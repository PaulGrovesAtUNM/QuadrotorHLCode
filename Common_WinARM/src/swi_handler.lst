   1              	# 1 "Common_WinARM/src/swi_handler.S"
   1              	/*****************************************************************************
   0              	
   0              	
   2              	*   swi_handler.s: SWI handler file ARM7TDMI-(S) (not just LPC2000)
   3              	*
   4              	*   by Martin Thomas
   5              	*   http://www.siwawi.arubi.uni-kl.de/avr_projects
   6              	*   based on information from ARM documents
   7              	*
   8              	*   (I think there is nothing left from the Philips example-code beside
   9              	*   of the filename and some comments.)
  10              	*
  11              	*****************************************************************************/
  12              	
  13              	.set SWI_IRQ_DIS,	0
  14              	.set SWI_IRQ_EN,	1
  15              	.set SWI_FIQ_DIS,	2
  16              	.set SWI_FIQ_EN,	3
  17              	.set SWI_GET_CPSR,	4
  18              	.set SWI_IRQ_REST,	5
  19              	.set SWI_FIQ_REST,	6
  20              	
  21              	.set I_Bit, 0x80
  22              	.set F_Bit, 0x40
  23              	.set T_Bit, 0x20
  24              	
  25              	
  26              	#ifdef ROM_RUN
  27              	#ifdef VECTORS_IN_RAM
  28              	.set VECTREMAPPED, 1
  29              	#else
  30              	.set VECTREMAPPED, 0
  31              	#endif
  32              	#endif
  33              	
  34              	#ifdef RAM_RUN
  35              	.set VECTREMAPPED, 0
  36              	#endif
  37              	
  38              	
  39              	/*********************************************************************
  40              	*  SWI interrupt handler
  41              	*  Function :  SoftwareInterrupt(SWI_Number)
  42              	*              See below "SwiFunction" table
  43              	*  Parameters:    None
  44              	*  input  :       SWI_Number (extracted from SWI command automaticly)
  45              	*  output :       states for some SWIs - see below
  46              	**********************************************************************/
  47              	.text
  48              	.arm
  49              	
  50              	.if (VECTREMAPPED)
  51              	.print "SWI-Handler in section .vectmapped -> .data"
  52              	.section .vectmapped, "ax"
  53              	.else
  54              	.print "SWI-Handler in section .vectorg -> .code/.text"
  55              	.section .vectorg, "ax"
  56              	.endif
  57              	
  58              	.global SoftwareInterrupt
  59              	.func   SoftwareInterrupt
  60              	SoftwareInterrupt:
  61              	SWI_HandlerMT:
  62 0000 10402DE9 	STMFD   sp!, {r4, lr}      /* store regs. */
  63 0004 00404FE1 	MRS     r4, spsr
  64 0008 200014E3 	TST     r4, #T_Bit             /* test for thumb */
  65 000c B2405E11 	LDRNEH  r4, [lr, #-2]          /* NE->thumb - get swi instruction code */
  66 0010 FF4CC413 	BICNE   r4, r4, #0xff00        /* NE->thumb - clear top 8 bits leaving swi "comment field"=number *
  67 0014 04401E05 	LDREQ   r4, [lr, #-4]          /* EQ->arm - get swi instruction code */
  68 0018 FF44C403 	BICEQ   r4, r4, #0xff000000    /* EQ->arm - clear top 8 bits leaving swi "comment field"=number */
  69 001c 060054E3 	CMP     r4, #MAX_SWI           /* range-check */
  70 0020 04F19F97 	LDRLS   pc, [pc, r4, LSL #2]   /* jump to routine if <= MAX (LS) */
  71              	SWIOutOfRange:
  72 0024 FEFFFFEA 	B       SWIOutOfRange
  73              	
  74              	/* Jump-Table */
  75              	SwiTableStart:
  76 0028 44000000 	.word IRQDisable	// 0
  77 002c 54000000 	.word IRQEnable		// 1
  78 0030 64000000 	.word FIQDisable	// 2
  79 0034 78000000 	.word FIQEnable		// 3
  80 0038 8C000000 	.word CPSRget		// 4
  81 003c 94000000 	.word IRQRestore	// 5
  82 0040 B0000000 	.word FIQRestore	// 6
  83              	SwiTableEnd:
  84              	.set MAX_SWI, ((SwiTableEnd-SwiTableStart)/4)-1
  85              	
  86              	IRQDisable:
  87 0044 00004FE1 	MRS     r0, SPSR                        /* Get SPSR = return value */
  88 0048 804080E3 	ORR     r4, r0, #I_Bit                  /* I_Bit set */
  89 004c 04F061E1 	MSR     SPSR_c, r4                      /* Set SPSR */
  90 0050 1D0000EA 	B       EndofSWI
  91              	
  92              	IRQEnable:
  93 0054 00004FE1 	MRS     r0, SPSR                        /* Get SPSR = return value */
  94 0058 8040C0E3 	BIC     r4, r0, #I_Bit                  /* I_Bit clear */
  95 005c 04F061E1 	MSR     SPSR_c, r4                      /* Set SPSR */
  96 0060 190000EA 	B       EndofSWI
  97              	
  98              	FIQDisable:
  99 0064 00004FE1 	MRS     r0, SPSR
 100 0068 404080E3 	ORR     r4, r0, #F_Bit
 101 006c 400000E2 	AND     r0, r0, #F_Bit
 102 0070 04F061E1 	MSR     SPSR_c, r4
 103 0074 140000EA 	B       EndofSWI
 104              	
 105              	FIQEnable:
 106 0078 00004FE1 	MRS     r0, SPSR
 107 007c 4040C0E3 	BIC     r4, r0, #F_Bit
 108 0080 400000E2 	AND     r0, r0, #F_Bit
 109 0084 04F061E1 	MSR     SPSR_c, r4
 110 0088 0F0000EA 	B       EndofSWI
 111              	
 112              	CPSRget:
 113              	// LDR r0, =0xdeadbeef
 114 008c 00004FE1 	MRS     r0, SPSR                        /* Get SPSR */
 115 0090 0D0000EA 	B       EndofSWI
 116              	
 117              	IRQRestore:
 118 0094 00404FE1 	MRS     r4, SPSR                        /* Get SPSR */
 119 0098 800000E2 	AND     r0, r0, #I_Bit
 120 009c 800010E3 	TST     r0, #I_Bit             /* Test input for I_Bit */
 121 00a0 8040C403 	BICEQ   r4, r4, #I_Bit
 122 00a4 80408413 	ORRNE   r4, r4, #I_Bit
 123 00a8 04F061E1 	MSR     SPSR_c, r4
 124 00ac 060000EA 	B       EndofSWI
 125              	
 126              	FIQRestore:
 127 00b0 00404FE1 	MRS     r4, SPSR                        /* Get SPSR */
 128 00b4 400000E2 	AND     r0, r0, #F_Bit
 129 00b8 400010E3 	TST     r0, #F_Bit             /* Test input for F_Bit */
 130 00bc 4040C403 	BICEQ   r4, r4, #F_Bit
 131 00c0 40408413 	ORRNE   r4, r4, #F_Bit
 132 00c4 04F061E1 	MSR     SPSR_c, r4
 133 00c8 FFFFFFEA 	B       EndofSWI
 134              	
 135              	EndofSWI:
 136 00cc 1080FDE8 	LDMFD   sp!, {r4,pc}^
 137              	.endfunc
 138              	
 139              	
 140              	/**********************************************************************
 141              	 *  Call SWI to restore IRQ
 142              	 *  Function : void IntEnable(uint32_t)
 143              	 *  Parameters:      None
 144              	 *  input  :         newstate
 145              	 *                   if I_bit in newstate cleared->IRQ on  -> clear I_BIT
 146              	 *                   if I_bit in newstate set    ->IRQ off -> set I_Bit
 147              	 *  output :         None
 148              	 **********************************************************************/
 149              	.arm
 150              	.text
 151              	.section .text, "ax"
 152              	.global IntRestore
 153              	.func   IntRestore
 154              	IntRestore:
 155 0000 050000EF 	SWI     SWI_IRQ_REST
 156 0004 1EFF2FE1 	BX      lr
 157              	.endfunc
 158              	
 159              	/**********************************************************************
 160              	 *  Call SWI to restore FIQ
 161              	 *  Function : void IntEnable(uint32_t)
 162              	 *  Parameters:      None
 163              	 *  input  :         newstate
 164              	 *                   if F_bit in newstate cleared->FIQ on  -> clear F_BIT
 165              	 *                   if F_bit in newstate set    ->FIQ off -> set F_Bit
 166              	 *  output :         None
 167              	 **********************************************************************/
 168              	.arm
 169              	.text
 170              	.section .text, "ax"
 171              	.global FiqRestore
 172              	.func   FiqRestore
 173              	FiqRestore:
 174 0008 060000EF 	SWI     SWI_FIQ_REST
 175 000c 1EFF2FE1 	BX      lr
 176              	.endfunc
 177              	
 178              	/**********************************************************************
 179              	 *  Call SWI to read IRQ/FIQ-status
 180              	 *  Function : uint32_t IntEnable(void)
 181              	 *  Parameters:      None
 182              	 *  input  :         None
 183              	 *  output :         CPSR (SPSR_SVC)
 184              	 **********************************************************************/
 185              	.arm
 186              	.text
 187              	.section .text, "ax"
 188              	.global IntGetCPSR
 189              	.func   IntGetCPSR
 190              	IntGetCPSR:
 191 0010 040000EF 	SWI     SWI_GET_CPSR
 192 0014 1EFF2FE1 	BX      lr
 193              	.endfunc
 194              	
 195              	/**********************************************************************
 196              	 *  Call SWI to enable IRQ
 197              	 *  Function : uint32_t IntEnable(void)
 198              	 *  Parameters:      None
 199              	 *  input  :         None
 200              	 *  output :         previous status
 201              	 *                   I_Bit clear if IRQs were enabled
 202              	 *                   I_Bit set   if IRQs were disabled
 203              	 **********************************************************************/
 204              	.arm
 205              	.text
 206              	.section .text, "ax"
 207              	.global IntEnable
 208              	.func   IntEnable
 209              	IntEnable:
 210 0018 010000EF 	SWI     SWI_IRQ_EN
 211 001c 1EFF2FE1 	BX      lr
 212              	.endfunc /* end of IntEnable */
 213              	
 214              	/**********************************************************************
 215              	 *  Call SWI to disable IRQ
 216              	 *  Function : uint32_t IntDisable(void)
 217              	 *  Parameters     : None
 218              	 *  input          : None
 219              	 *  output :         previous status
 220              	 *                   I_Bit clear if IRQs were enabled
 221              	 *                   I_Bit set   if IRQs were disabled
 222              	 **********************************************************************/
 223              	.arm
 224              	.global IntDisable
 225              	.section .text, "ax"
 226              	.func   IntDisable
 227              	IntDisable:
 228 0020 000000EF 	SWI     SWI_IRQ_DIS
 229 0024 1EFF2FE1 	BX      lr
 230              	.endfunc /* end of IntDisable */
 231              	
 232              	/**********************************************************************
 233              	 *  Call SWI to enable FIQ
 234              	 *  Function : uint32_t FiqEnable(void)
 235              	 *  Parameters:      None
 236              	 *  input  :         None
 237              	 *  output :         previous status
 238              	 *                   F_Bit clear if FIQs were enabled
 239              	 *                   F_Bit set   if FIQs were disabled
 240              	 **********************************************************************/
 241              	.arm
 242              	.text
 243              	.section .text, "ax"
 244              	.global FiqEnable
 245              	.func   FiqEnable
 246              	FiqEnable:
 247 0028 030000EF 	SWI     SWI_FIQ_EN
 248 002c 1EFF2FE1 	BX      lr
 249              	.endfunc
 250              	
 251              	/**********************************************************************
 252              	 *  Call SWI to disable FIQ
 253              	 *  Function : uint32_t FiqDisable(void)
 254              	 *  Parameters     : None
 255              	 *  input          : None
 256              	 *  output :         previous status
 257              	 *                   F_Bit clear if FIQs were enabled
 258              	 *                   F_Bit set   if FIQs were disabled
 259              	 **********************************************************************/
 260              	.arm
 261              	.global FiqDisable
 262              	.section .text, "ax"
 263              	.func   FiqDisable
 264              	FiqDisable:
 265 0030 020000EF 	SWI     SWI_FIQ_DIS
 266 0034 1EFF2FE1 	BX      lr
 267              	.endfunc
 268              	
 269              	
 270              	.end
DEFINED SYMBOLS
Common_WinARM/src/swi_handler.S:13     *ABS*:00000000 SWI_IRQ_DIS
Common_WinARM/src/swi_handler.S:14     *ABS*:00000001 SWI_IRQ_EN
Common_WinARM/src/swi_handler.S:15     *ABS*:00000002 SWI_FIQ_DIS
Common_WinARM/src/swi_handler.S:16     *ABS*:00000003 SWI_FIQ_EN
Common_WinARM/src/swi_handler.S:17     *ABS*:00000004 SWI_GET_CPSR
Common_WinARM/src/swi_handler.S:18     *ABS*:00000005 SWI_IRQ_REST
Common_WinARM/src/swi_handler.S:19     *ABS*:00000006 SWI_FIQ_REST
Common_WinARM/src/swi_handler.S:21     *ABS*:00000080 I_Bit
Common_WinARM/src/swi_handler.S:22     *ABS*:00000040 F_Bit
Common_WinARM/src/swi_handler.S:23     *ABS*:00000020 T_Bit
Common_WinARM/src/swi_handler.S:30     *ABS*:00000000 VECTREMAPPED
Common_WinARM/src/swi_handler.S:60     .vectorg:00000000 SoftwareInterrupt
Common_WinARM/src/swi_handler.S:61     .vectorg:00000000 SWI_HandlerMT
Common_WinARM/src/swi_handler.S:62     .vectorg:00000000 $a
                            *ABS*:00000006 MAX_SWI
Common_WinARM/src/swi_handler.S:71     .vectorg:00000024 SWIOutOfRange
Common_WinARM/src/swi_handler.S:75     .vectorg:00000028 SwiTableStart
Common_WinARM/src/swi_handler.S:76     .vectorg:00000028 $d
Common_WinARM/src/swi_handler.S:86     .vectorg:00000044 IRQDisable
Common_WinARM/src/swi_handler.S:92     .vectorg:00000054 IRQEnable
Common_WinARM/src/swi_handler.S:98     .vectorg:00000064 FIQDisable
Common_WinARM/src/swi_handler.S:105    .vectorg:00000078 FIQEnable
Common_WinARM/src/swi_handler.S:112    .vectorg:0000008c CPSRget
Common_WinARM/src/swi_handler.S:117    .vectorg:00000094 IRQRestore
Common_WinARM/src/swi_handler.S:126    .vectorg:000000b0 FIQRestore
Common_WinARM/src/swi_handler.S:83     .vectorg:00000044 SwiTableEnd
Common_WinARM/src/swi_handler.S:87     .vectorg:00000044 $a
Common_WinARM/src/swi_handler.S:135    .vectorg:000000cc EndofSWI
Common_WinARM/src/swi_handler.S:154    .text:00000000 IntRestore
Common_WinARM/src/swi_handler.S:155    .text:00000000 $a
Common_WinARM/src/swi_handler.S:173    .text:00000008 FiqRestore
Common_WinARM/src/swi_handler.S:190    .text:00000010 IntGetCPSR
Common_WinARM/src/swi_handler.S:209    .text:00000018 IntEnable
Common_WinARM/src/swi_handler.S:227    .text:00000020 IntDisable
Common_WinARM/src/swi_handler.S:246    .text:00000028 FiqEnable
Common_WinARM/src/swi_handler.S:264    .text:00000030 FiqDisable
                   .debug_aranges:0000000c $d

NO UNDEFINED SYMBOLS
