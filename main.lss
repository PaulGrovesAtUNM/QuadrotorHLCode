
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012fe8  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000d84  40000000  00012fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000015c0  40000d84  00013d6c  00020d84  2**2
                  ALLOC
  3 .stack        00001980  40002400  40002400  00020d90  2**4
                  CONTENTS
  4 .comment      0000002c  00000000  00000000  00022710  2**0
                  CONTENTS, READONLY
  5 .ARM.attributes 00000010  00000000  00000000  0002273c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008d0  00000000  00000000  00022750  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00001b24  00000000  00000000  00023020  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000203cd  00000000  00000000  00024b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004f10  00000000  00000000  00044f11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000f846  00000000  00000000  00049e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001e74  00000000  00000000  00059668  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000738  00000000  00000000  0005b4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000c291  00000000  00000000  0005bc14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000628  00000000  00000000  00067ea8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__Vectors>:

// Exception Vectors
// Mapped to Address 0.
// Absolute addressing mode must be used.

__Vectors:        LDR     PC,Reset_Addr         
       0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <Reset_Addr>
                LDR     PC,Undef_Addr
       4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <Undef_Addr>
                LDR     PC,SWI_Addr
       8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <SWI_Addr>
                LDR     PC,PAbt_Addr
       c:	e59ff018 	ldr	pc, [pc, #24]	; 2c <PAbt_Addr>
                LDR     PC,DAbt_Addr
      10:	e59ff018 	ldr	pc, [pc, #24]	; 30 <DAbt_Addr>
                NOP                            /* Reserved Vector */
      14:	e1a00000 	nop			; (mov r0, r0)
//                LDR     PC,IRQ_Addr
//                LDR     PC,[PC, #-0x0FF0]      /* Vector from VicVectAddr */
                LDR     PC,IRQ_Wrapper_Addr
      18:	e59ff018 	ldr	pc, [pc, #24]	; 38 <IRQ_Wrapper_Addr>
                LDR     PC,FIQ_Addr
      1c:	e59ff018 	ldr	pc, [pc, #24]	; 3c <FIQ_Addr>

00000020 <Reset_Addr>:
      20:	00000168 	.word	0x00000168

00000024 <Undef_Addr>:
      24:	00000040 	.word	0x00000040

00000028 <SWI_Addr>:
      28:	00000098 	.word	0x00000098

0000002c <PAbt_Addr>:
      2c:	00000044 	.word	0x00000044

00000030 <DAbt_Addr>:
      30:	00000048 	.word	0x00000048
      34:	00000000 	.word	0x00000000

00000038 <IRQ_Wrapper_Addr>:
      38:	00000050 	.word	0x00000050

0000003c <FIQ_Addr>:
      3c:	0000004c 	.word	0x0000004c

00000040 <Undef_Handler>:
                  .word     0                      /* Reserved Address */
// IRQ_Addr:         .word     __IRQ_Handler
IRQ_Wrapper_Addr: .word    __IRQ_Wrapper
FIQ_Addr:         .word     FIQ_Handler

Undef_Handler:  B       Undef_Handler
      40:	eafffffe 	b	40 <Undef_Handler>

00000044 <PAbt_Handler>:
/* SWI_Handler:    B       SWI_Handler */
PAbt_Handler:   B       PAbt_Handler
      44:	eafffffe 	b	44 <PAbt_Handler>

00000048 <DAbt_Handler>:
DAbt_Handler:   B       DAbt_Handler
      48:	eafffffe 	b	48 <DAbt_Handler>

0000004c <FIQ_Handler>:
/* IRQ_Handler:    B       IRQ_Handler */
FIQ_Handler:    B       FIQ_Handler
      4c:	eafffffe 	b	4c <FIQ_Handler>

00000050 <__IRQ_Wrapper>:
        .global __IRQ_Wrapper
        .func   __IRQ_Wrapper
__IRQ_Wrapper:
/*- Manage Exception Entry  */
/*- Adjust and save LR_irq in IRQ stack  */
            sub         lr, lr, #4
      50:	e24ee004 	sub	lr, lr, #4
            stmfd       sp!, {lr}
      54:	e92d4000 	push	{lr}

/*- Save SPSR need to be saved for nested interrupt */
            mrs         r14, SPSR
      58:	e14fe000 	mrs	lr, SPSR
            stmfd       sp!, {r14}
      5c:	e92d4000 	push	{lr}

/*- Save and r0 in IRQ stack  */
            stmfd       sp!, {r0}
      60:	e92d0001 	push	{r0}

/*- Write in the IVR to support Protect Mode  */
/*- No effect in Normal Mode  */
/*- De-assert the NIRQ and clear the source in Protect Mode */
/* R14 = LR */
            ldr         r14, =VIC_base_addr
      64:	e59fe028 	ldr	lr, [pc, #40]	; 94 <ABT_Stack_Size+0x14>
            ldr         r0 , [r14, #VIC_vect_offs]
      68:	e59e0030 	ldr	r0, [lr, #48]	; 0x30
            /*str         r14, [r14, #VIC_vect_offs]*/

/*- Enable Interrupt and Switch in Supervisor Mode */
            msr         CPSR_c, #I_Bit | Mode_SVC
      6c:	e321f093 	msr	CPSR_c, #147	; 0x93

/*- Save scratch/used registers and LR in User Stack */
            /*stmfd       sp!, { r1-r3, r12, r14}*/
            stmfd       sp!, { r1-r12, r14 }
      70:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

/*- Branch to the routine pointed by the VIC-Vector-Address  */
            mov         r14, pc
      74:	e1a0e00f 	mov	lr, pc
            bx          r0
      78:	e12fff10 	bx	r0
/*- Restore scratch/used registers and LR from User Stack*/
            /* ldmia       sp!, { r1-r3, r12, r14} */
            ldmia       sp!, { r1-r12, r14 }
      7c:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

/*- Disable Interrupt and switch back in IRQ mode */
            msr         CPSR_c, #I_Bit | Mode_IRQ
      80:	e321f092 	msr	CPSR_c, #146	; 0x92
            ldr         r14, =VIC_base_addr
            str         r14, [r14, #VIC_vect_offs]
#endif

/*- Restore SPSR_irq and r0 from IRQ stack */
            ldmia       sp!, {r0}
      84:	e8bd0001 	pop	{r0}

/*- Restore SPSR_irq and r0 from IRQ stack */
            ldmia       sp!, {r14}
      88:	e8bd4000 	pop	{lr}
            msr         SPSR_cxsf, r14
      8c:	e16ff00e 	msr	SPSR_fsxc, lr

/*- Restore adjusted  LR_irq from IRQ stack directly in the PC */
            ldmia       sp!, {pc}^
      90:	e8fd8000 	ldm	sp!, {pc}^

/*- Write in the IVR to support Protect Mode  */
/*- No effect in Normal Mode  */
/*- De-assert the NIRQ and clear the source in Protect Mode */
/* R14 = LR */
            ldr         r14, =VIC_base_addr
      94:	fffff000 	.word	0xfffff000

00000098 <SoftwareInterrupt>:

.global SoftwareInterrupt
.func   SoftwareInterrupt
SoftwareInterrupt:
SWI_HandlerMT:
	STMFD   sp!, {r4, lr}      /* store regs. */
      98:	e92d4010 	push	{r4, lr}
	MRS     r4, spsr
      9c:	e14f4000 	mrs	r4, SPSR
	TST     r4, #T_Bit             /* test for thumb */
      a0:	e3140020 	tst	r4, #32
	LDRNEH  r4, [lr, #-2]          /* NE->thumb - get swi instruction code */
      a4:	115e40b2 	ldrhne	r4, [lr, #-2]
	BICNE   r4, r4, #0xff00        /* NE->thumb - clear top 8 bits leaving swi "comment field"=number */
      a8:	13c44cff 	bicne	r4, r4, #65280	; 0xff00
	LDREQ   r4, [lr, #-4]          /* EQ->arm - get swi instruction code */
      ac:	051e4004 	ldreq	r4, [lr, #-4]
	BICEQ   r4, r4, #0xff000000    /* EQ->arm - clear top 8 bits leaving swi "comment field"=number */
      b0:	03c444ff 	biceq	r4, r4, #-16777216	; 0xff000000
	CMP     r4, #MAX_SWI           /* range-check */
      b4:	e3540006 	cmp	r4, #6
	LDRLS   pc, [pc, r4, LSL #2]   /* jump to routine if <= MAX (LS) */
      b8:	979ff104 	ldrls	pc, [pc, r4, lsl #2]

000000bc <SWIOutOfRange>:
SWIOutOfRange:
	B       SWIOutOfRange
      bc:	eafffffe 	b	bc <SWIOutOfRange>

000000c0 <SwiTableStart>:
      c0:	000000dc 	.word	0x000000dc
      c4:	000000ec 	.word	0x000000ec
      c8:	000000fc 	.word	0x000000fc
      cc:	00000110 	.word	0x00000110
      d0:	00000124 	.word	0x00000124
      d4:	0000012c 	.word	0x0000012c
      d8:	00000148 	.word	0x00000148

000000dc <IRQDisable>:
	.word FIQRestore	// 6
SwiTableEnd:
.set MAX_SWI, ((SwiTableEnd-SwiTableStart)/4)-1

IRQDisable:
	MRS     r0, SPSR                        /* Get SPSR = return value */
      dc:	e14f0000 	mrs	r0, SPSR
	ORR     r4, r0, #I_Bit                  /* I_Bit set */
      e0:	e3804080 	orr	r4, r0, #128	; 0x80
	MSR     SPSR_c, r4                      /* Set SPSR */
      e4:	e161f004 	msr	SPSR_c, r4
	B       EndofSWI
      e8:	ea00001d 	b	164 <EndofSWI>

000000ec <IRQEnable>:

IRQEnable:
	MRS     r0, SPSR                        /* Get SPSR = return value */
      ec:	e14f0000 	mrs	r0, SPSR
	BIC     r4, r0, #I_Bit                  /* I_Bit clear */
      f0:	e3c04080 	bic	r4, r0, #128	; 0x80
	MSR     SPSR_c, r4                      /* Set SPSR */
      f4:	e161f004 	msr	SPSR_c, r4
	B       EndofSWI                       
      f8:	ea000019 	b	164 <EndofSWI>

000000fc <FIQDisable>:

FIQDisable:
	MRS     r0, SPSR
      fc:	e14f0000 	mrs	r0, SPSR
	ORR     r4, r0, #F_Bit
     100:	e3804040 	orr	r4, r0, #64	; 0x40
	AND     r0, r0, #F_Bit
     104:	e2000040 	and	r0, r0, #64	; 0x40
	MSR     SPSR_c, r4
     108:	e161f004 	msr	SPSR_c, r4
	B       EndofSWI
     10c:	ea000014 	b	164 <EndofSWI>

00000110 <FIQEnable>:

FIQEnable:
	MRS     r0, SPSR
     110:	e14f0000 	mrs	r0, SPSR
	BIC     r4, r0, #F_Bit
     114:	e3c04040 	bic	r4, r0, #64	; 0x40
	AND     r0, r0, #F_Bit
     118:	e2000040 	and	r0, r0, #64	; 0x40
	MSR     SPSR_c, r4
     11c:	e161f004 	msr	SPSR_c, r4
	B       EndofSWI
     120:	ea00000f 	b	164 <EndofSWI>

00000124 <CPSRget>:

CPSRget:
	// LDR r0, =0xdeadbeef
	MRS     r0, SPSR                        /* Get SPSR */
     124:	e14f0000 	mrs	r0, SPSR
	B       EndofSWI                       
     128:	ea00000d 	b	164 <EndofSWI>

0000012c <IRQRestore>:

IRQRestore:
	MRS     r4, SPSR                        /* Get SPSR */
     12c:	e14f4000 	mrs	r4, SPSR
	AND     r0, r0, #I_Bit
     130:	e2000080 	and	r0, r0, #128	; 0x80
	TST     r0, #I_Bit             /* Test input for I_Bit */
     134:	e3100080 	tst	r0, #128	; 0x80
	BICEQ   r4, r4, #I_Bit
     138:	03c44080 	biceq	r4, r4, #128	; 0x80
	ORRNE   r4, r4, #I_Bit
     13c:	13844080 	orrne	r4, r4, #128	; 0x80
	MSR     SPSR_c, r4
     140:	e161f004 	msr	SPSR_c, r4
	B       EndofSWI
     144:	ea000006 	b	164 <EndofSWI>

00000148 <FIQRestore>:

FIQRestore:
	MRS     r4, SPSR                        /* Get SPSR */
     148:	e14f4000 	mrs	r4, SPSR
	AND     r0, r0, #F_Bit
     14c:	e2000040 	and	r0, r0, #64	; 0x40
	TST     r0, #F_Bit             /* Test input for F_Bit */
     150:	e3100040 	tst	r0, #64	; 0x40
	BICEQ   r4, r4, #F_Bit
     154:	03c44040 	biceq	r4, r4, #64	; 0x40
	ORRNE   r4, r4, #F_Bit
     158:	13844040 	orrne	r4, r4, #64	; 0x40
	MSR     SPSR_c, r4
     15c:	e161f004 	msr	SPSR_c, r4
	B       EndofSWI
     160:	eaffffff 	b	164 <EndofSWI>

00000164 <EndofSWI>:

EndofSWI:
	LDMFD   sp!, {r4,pc}^
     164:	e8fd8010 	ldm	sp!, {r4, pc}^

00000168 <__startup>:
__startup:

Reset_Handler:  

.if (VPBDIV_SETUP)
                LDR     R0, =VPBDIV
     168:	e59f0128 	ldr	r0, [pc, #296]	; 298 <__exit_THUMB+0x4>
                LDR     R1, =VPBDIV_Val
     16c:	e3a01000 	mov	r1, #0
                STR     R1, [R0]
     170:	e5801000 	str	r1, [r0]
.endif


.if (PLL_SETUP)
                LDR     R0, =PLL_BASE
     174:	e59f0120 	ldr	r0, [pc, #288]	; 29c <__exit_THUMB+0x8>
                MOV     R1, #0xAA
     178:	e3a010aa 	mov	r1, #170	; 0xaa
                MOV     R2, #0x55
     17c:	e3a02055 	mov	r2, #85	; 0x55

// Configure and Enable PLL
                MOV     R3, #PLLCFG_Val
     180:	e3a03024 	mov	r3, #36	; 0x24
                STR     R3, [R0, #PLLCFG_OFS] 
     184:	e5803004 	str	r3, [r0, #4]
                MOV     R3, #PLLCON_PLLE
     188:	e3a03001 	mov	r3, #1
                STR     R3, [R0, #PLLCON_OFS]
     18c:	e5803000 	str	r3, [r0]
                STR     R1, [R0, #PLLFEED_OFS]
     190:	e580100c 	str	r1, [r0, #12]
                STR     R2, [R0, #PLLFEED_OFS]
     194:	e580200c 	str	r2, [r0, #12]

00000198 <PLL_Loop>:

// Wait until PLL Locked
PLL_Loop:       LDR     R3, [R0, #PLLSTAT_OFS]
     198:	e5903008 	ldr	r3, [r0, #8]
                ANDS    R3, R3, #PLLSTAT_PLOCK
     19c:	e2133b01 	ands	r3, r3, #1024	; 0x400
                BEQ     PLL_Loop
     1a0:	0afffffc 	beq	198 <PLL_Loop>

// Switch to PLL Clock
                MOV     R3, #(PLLCON_PLLE | PLLCON_PLLC)
     1a4:	e3a03003 	mov	r3, #3
                STR     R3, [R0, #PLLCON_OFS]
     1a8:	e5803000 	str	r3, [r0]
                STR     R1, [R0, #PLLFEED_OFS]
     1ac:	e580100c 	str	r1, [r0, #12]
                STR     R2, [R0, #PLLFEED_OFS]
     1b0:	e580200c 	str	r2, [r0, #12]
.endif


.if (MAM_SETUP)
                LDR     R0, =MAM_BASE
     1b4:	e59f00e4 	ldr	r0, [pc, #228]	; 2a0 <__exit_THUMB+0xc>
                MOV     R1, #MAMTIM_Val
     1b8:	e3a01004 	mov	r1, #4
                STR     R1, [R0, #MAMTIM_OFS] 
     1bc:	e5801004 	str	r1, [r0, #4]
                MOV     R1, #MAMCR_Val
     1c0:	e3a01002 	mov	r1, #2
                STR     R1, [R0, #MAMCR_OFS] 
     1c4:	e5801000 	str	r1, [r0]
.endif
                STR     R1, [R0]
.endif

// Setup Stack for each mode
                LDR     R0, =Top_Stack
     1c8:	e59f00d4 	ldr	r0, [pc, #212]	; 2a4 <__exit_THUMB+0x10>

// Enter Undefined Instruction Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_UND|I_Bit|F_Bit
     1cc:	e321f0db 	msr	CPSR_c, #219	; 0xdb
                MOV     SP, R0
     1d0:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #UND_Stack_Size
     1d4:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter Abort Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_ABT|I_Bit|F_Bit
     1d8:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
                MOV     SP, R0
     1dc:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #ABT_Stack_Size
     1e0:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter FIQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_FIQ|I_Bit|F_Bit
     1e4:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
                MOV     SP, R0
     1e8:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #FIQ_Stack_Size
     1ec:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter IRQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_IRQ|I_Bit|F_Bit
     1f0:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
                MOV     SP, R0
     1f4:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #IRQ_Stack_Size
     1f8:	e2400b02 	sub	r0, r0, #2048	; 0x800

// Enter Supervisor Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_SVC|I_Bit|F_Bit
     1fc:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
                MOV     SP, R0
     200:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #SVC_Stack_Size
     204:	e2400b02 	sub	r0, r0, #2048	; 0x800

// Enter User Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_USR /* Interrupts enabled */
     208:	e321f010 	msr	CPSR_c, #16
//				MSR     CPSR_c, #Mode_USR|I_Bit|F_Bit /* Interrupts disabled */
                MOV     SP, R0
     20c:	e1a0d000 	mov	sp, r0


.if (RAM_MODE==0)
/* Relocate .data section (Copy from ROM to RAM) */
                LDR     R1, =_etext 
     210:	e59f1090 	ldr	r1, [pc, #144]	; 2a8 <__exit_THUMB+0x14>
                LDR     R2, =_data 
     214:	e59f2090 	ldr	r2, [pc, #144]	; 2ac <__exit_THUMB+0x18>
                LDR     R3, =_edata 
     218:	e59f3090 	ldr	r3, [pc, #144]	; 2b0 <__exit_THUMB+0x1c>
                CMP     R2, R3
     21c:	e1520003 	cmp	r2, r3
                BEQ     DataIsEmpty
     220:	0a000003 	beq	234 <DataIsEmpty>

00000224 <LoopRel>:
LoopRel:        CMP     R2, R3 
     224:	e1520003 	cmp	r2, r3
                LDRLO   R0, [R1], #4 
     228:	34910004 	ldrcc	r0, [r1], #4
                STRLO   R0, [R2], #4 
     22c:	34820004 	strcc	r0, [r2], #4
                BLO     LoopRel 
     230:	3afffffb 	bcc	224 <LoopRel>

00000234 <DataIsEmpty>:
DataIsEmpty:
.endif
 
/* Clear .bss section (Zero init) */
                MOV     R0, #0 
     234:	e3a00000 	mov	r0, #0
                LDR     R1, =__bss_start__ 
     238:	e59f1074 	ldr	r1, [pc, #116]	; 2b4 <__exit_THUMB+0x20>
                LDR     R2, =__bss_end__ 
     23c:	e59f2074 	ldr	r2, [pc, #116]	; 2b8 <__exit_THUMB+0x24>
                CMP     R1,R2
     240:	e1510002 	cmp	r1, r2
                BEQ     BSSIsEmpty
     244:	0a000002 	beq	254 <BSSIsEmpty>

00000248 <LoopZI>:
LoopZI:         CMP     R1, R2 
     248:	e1510002 	cmp	r1, r2
                STRLO   R0, [R1], #4 
     24c:	34810004 	strcc	r0, [r1], #4
                BLO     LoopZI 
     250:	3afffffc 	bcc	248 <LoopZI>

00000254 <BSSIsEmpty>:
BSSIsEmpty:


// call C++ constructors of global objects
		LDR 	r0, =__ctors_start__
     254:	e59f0060 	ldr	r0, [pc, #96]	; 2bc <__exit_THUMB+0x28>
		LDR 	r1, =__ctors_end__
     258:	e59f1060 	ldr	r1, [pc, #96]	; 2c0 <__exit_THUMB+0x2c>

0000025c <ctor_loop>:
ctor_loop:
		CMP 	r0, r1
     25c:	e1500001 	cmp	r0, r1
		BEQ 	ctor_end
     260:	0a000005 	beq	27c <ctor_end>
		LDR 	r2, [r0], #4
     264:	e4902004 	ldr	r2, [r0], #4
		STMFD 	sp!, {r0-r1}
     268:	e92d0003 	push	{r0, r1}
		MOV 	lr, pc
     26c:	e1a0e00f 	mov	lr, pc
		MOV 	pc, r2
     270:	e1a0f002 	mov	pc, r2
		LDMFD 	sp!, {r0-r1}
     274:	e8bd0003 	pop	{r0, r1}
		B 		ctor_loop
     278:	eafffff7 	b	25c <ctor_loop>

0000027c <ctor_end>:
ctor_end:

// Enter the C code
                //LDR     R0,=INIT
                LDR     R0,=main
     27c:	e59f0040 	ldr	r0, [pc, #64]	; 2c4 <__exit_THUMB+0x30>
                TST     R0,#1             // Bit-0 set: main is Thumb
     280:	e3100001 	tst	r0, #1
                LDREQ   LR,=__exit_ARM    // ARM Mode
     284:	059fe03c 	ldreq	lr, [pc, #60]	; 2c8 <__exit_THUMB+0x34>
                LDRNE   LR,=__exit_THUMB  // Thumb Mode
     288:	159fe03c 	ldrne	lr, [pc, #60]	; 2cc <__exit_THUMB+0x38>
                BX      R0
     28c:	e12fff10 	bx	r0

00000290 <__exit_ARM>:

.arm
.global __exit_ARM
.func __exit_ARM
__exit_ARM:
                B       __exit_ARM
     290:	eafffffe 	b	290 <__exit_ARM>

00000294 <__exit_THUMB>:

.thumb
.global __exit_THUMB
.func __exit_THUMB
__exit_THUMB:
                B       __exit_THUMB
     294:	e7fe      	b.n	294 <__exit_THUMB>
     296:	0000      	.short	0x0000
__startup:

Reset_Handler:  

.if (VPBDIV_SETUP)
                LDR     R0, =VPBDIV
     298:	e01fc100 	.word	0xe01fc100
                STR     R1, [R0]
.endif


.if (PLL_SETUP)
                LDR     R0, =PLL_BASE
     29c:	e01fc080 	.word	0xe01fc080
                STR     R2, [R0, #PLLFEED_OFS]
.endif


.if (MAM_SETUP)
                LDR     R0, =MAM_BASE
     2a0:	e01fc000 	.word	0xe01fc000
.endif
                STR     R1, [R0]
.endif

// Setup Stack for each mode
                LDR     R0, =Top_Stack
     2a4:	40003d80 	.word	0x40003d80
                MOV     SP, R0


.if (RAM_MODE==0)
/* Relocate .data section (Copy from ROM to RAM) */
                LDR     R1, =_etext 
     2a8:	00012fe8 	.word	0x00012fe8
                LDR     R2, =_data 
     2ac:	40000000 	.word	0x40000000
                LDR     R3, =_edata 
     2b0:	40000d84 	.word	0x40000d84
DataIsEmpty:
.endif
 
/* Clear .bss section (Zero init) */
                MOV     R0, #0 
                LDR     R1, =__bss_start__ 
     2b4:	40000d84 	.word	0x40000d84
                LDR     R2, =__bss_end__ 
     2b8:	40002344 	.word	0x40002344
                BLO     LoopZI 
BSSIsEmpty:


// call C++ constructors of global objects
		LDR 	r0, =__ctors_start__
     2bc:	00012fe8 	.word	0x00012fe8
		LDR 	r1, =__ctors_end__
     2c0:	00012fe8 	.word	0x00012fe8
		B 		ctor_loop
ctor_end:

// Enter the C code
                //LDR     R0,=INIT
                LDR     R0,=main
     2c4:	0000259c 	.word	0x0000259c
                TST     R0,#1             // Bit-0 set: main is Thumb
                LDREQ   LR,=__exit_ARM    // ARM Mode
     2c8:	00000290 	.word	0x00000290
                LDRNE   LR,=__exit_THUMB  // Thumb Mode
     2cc:	00000294 	.word	0x00000294

000002d0 <IntRestore>:
.text
.section .text, "ax"
.global IntRestore
.func   IntRestore
IntRestore:
		SWI     SWI_IRQ_REST
     2d0:	ef000005 	svc	0x00000005
		BX      lr
     2d4:	e12fff1e 	bx	lr

000002d8 <FiqRestore>:
.text
.section .text, "ax"
.global FiqRestore
.func   FiqRestore
FiqRestore:
		SWI     SWI_FIQ_REST
     2d8:	ef000006 	svc	0x00000006
		BX      lr
     2dc:	e12fff1e 	bx	lr

000002e0 <IntGetCPSR>:
.text
.section .text, "ax"
.global IntGetCPSR
.func   IntGetCPSR
IntGetCPSR:
		SWI     SWI_GET_CPSR
     2e0:	ef000004 	svc	0x00000004
		BX      lr
     2e4:	e12fff1e 	bx	lr

000002e8 <IntEnable>:
.text
.section .text, "ax"
.global IntEnable
.func   IntEnable
IntEnable:
        SWI     SWI_IRQ_EN
     2e8:	ef000001 	svc	0x00000001
        BX      lr
     2ec:	e12fff1e 	bx	lr

000002f0 <IntDisable>:
.arm
.global IntDisable
.section .text, "ax"
.func   IntDisable
IntDisable:
        SWI     SWI_IRQ_DIS
     2f0:	ef000000 	svc	0x00000000
        BX      lr
     2f4:	e12fff1e 	bx	lr

000002f8 <FiqEnable>:
.text
.section .text, "ax"
.global FiqEnable
.func   FiqEnable
FiqEnable:
        SWI     SWI_FIQ_EN
     2f8:	ef000003 	svc	0x00000003
        BX      lr
     2fc:	e12fff1e 	bx	lr

00000300 <FiqDisable>:
.arm
.global FiqDisable
.section .text, "ax"
.func   FiqDisable
FiqDisable:
        SWI     SWI_FIQ_DIS
     300:	ef000002 	svc	0x00000002
        BX      lr
     304:	e12fff1e 	bx	lr

00000308 <LL_write_ctrl_data>:
	SPIWRData[0] = '>';
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;

	if (!page) {
     308:	e31000ff 	tst	r0, #255	; 0xff
		pageselect = 0;
	}
	return (1);
}

void LL_write_ctrl_data(char page) {
     30c:	e92d4030 	push	{r4, r5, lr}

	//initialize syncbytes
	SPIWRData[0] = '>';
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;
     310:	e59fc0f8 	ldr	ip, [pc, #248]	; 410 <PLLSTAT_PLOCK+0x10>
	static volatile short spi_chksum;

	dataptr = (unsigned char *) &LL_1khz_control_input;

	//initialize syncbytes
	SPIWRData[0] = '>';
     314:	e59f50f8 	ldr	r5, [pc, #248]	; 414 <PLLSTAT_PLOCK+0x14>
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;
     318:	e3e03c55 	mvn	r3, #21760	; 0x5500

	if (!page) {
		for (i = 2; i < 40; i++) {
     31c:	159f00f4 	ldrne	r0, [pc, #244]	; 418 <PLLSTAT_PLOCK+0x18>

	dataptr = (unsigned char *) &LL_1khz_control_input;

	//initialize syncbytes
	SPIWRData[0] = '>';
	SPIWRData[1] = '*';
     320:	e3a0102a 	mov	r1, #42	; 0x2a

	spi_chksum = 0xAAAA;
     324:	e2433055 	sub	r3, r3, #85	; 0x55
	static volatile short spi_chksum;

	dataptr = (unsigned char *) &LL_1khz_control_input;

	//initialize syncbytes
	SPIWRData[0] = '>';
     328:	e3a0203e 	mov	r2, #62	; 0x3e
	SPIWRData[1] = '*';
     32c:	e5c51001 	strb	r1, [r5, #1]
	static volatile short spi_chksum;

	dataptr = (unsigned char *) &LL_1khz_control_input;

	//initialize syncbytes
	SPIWRData[0] = '>';
     330:	e5c52000 	strb	r2, [r5]
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;
     334:	e1cc30b0 	strh	r3, [ip]

	if (!page) {
		for (i = 2; i < 40; i++) {
     338:	11a01005 	movne	r1, r5
     33c:	1280e014 	addne	lr, r0, #20
	SPIWRData[0] = '>';
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;

	if (!page) {
     340:	1a000019 	bne	3ac <LL_write_ctrl_data+0xa4>
     344:	e59f00cc 	ldr	r0, [pc, #204]	; 418 <PLLSTAT_PLOCK+0x18>
     348:	e1a01005 	mov	r1, r5
     34c:	e280e026 	add	lr, r0, #38	; 0x26
		for (i = 2; i < 40; i++) {
			SPIWRData[i] = *dataptr++;
     350:	e4d02001 	ldrb	r2, [r0], #1
			spi_chksum += SPIWRData[i];
     354:	e1dc30b0 	ldrh	r3, [ip]
     358:	e0833002 	add	r3, r3, r2
     35c:	e1a03803 	lsl	r3, r3, #16
     360:	e1a03823 	lsr	r3, r3, #16
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;

	if (!page) {
		for (i = 2; i < 40; i++) {
     364:	e15e0000 	cmp	lr, r0
			SPIWRData[i] = *dataptr++;
     368:	e5c12002 	strb	r2, [r1, #2]
			spi_chksum += SPIWRData[i];
     36c:	e1cc30b0 	strh	r3, [ip]
     370:	e2811001 	add	r1, r1, #1
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;

	if (!page) {
		for (i = 2; i < 40; i++) {
     374:	1afffff5 	bne	350 <LL_write_ctrl_data+0x48>
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
	}

	SPIWRData[40] = spi_chksum; //chksum LSB
     378:	e1dc00b0 	ldrh	r0, [ip]
	SPIWRData[41] = (spi_chksum >> 8); //chksum MSB
     37c:	e1dc30b0 	ldrh	r3, [ip]
     380:	e1a03423 	lsr	r3, r3, #8
     384:	e5c53029 	strb	r3, [r5, #41]	; 0x29

	SPIWR_num_bytes = 42;
     388:	e59f308c 	ldr	r3, [pc, #140]	; 41c <PLLSTAT_PLOCK+0x1c>
     38c:	e3a0202a 	mov	r2, #42	; 0x2a
     390:	e5832000 	str	r2, [r3]
	data_sent_to_LL = 0;
     394:	e59f3084 	ldr	r3, [pc, #132]	; 420 <PLLSTAT_PLOCK+0x20>
     398:	e3a01000 	mov	r1, #0
     39c:	e5c31000 	strb	r1, [r3]
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
	}

	SPIWRData[40] = spi_chksum; //chksum LSB
     3a0:	e5c50028 	strb	r0, [r5, #40]	; 0x28
	SPIWRData[41] = (spi_chksum >> 8); //chksum MSB

	SPIWR_num_bytes = 42;
	data_sent_to_LL = 0;
}
     3a4:	e8bd4030 	pop	{r4, r5, lr}
     3a8:	e12fff1e 	bx	lr
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
	} else {
		for (i = 2; i < 22; i++) {
			SPIWRData[i] = *dataptr++;
     3ac:	e4d02001 	ldrb	r2, [r0], #1
			spi_chksum += SPIWRData[i];
     3b0:	e1dc30b0 	ldrh	r3, [ip]
     3b4:	e0833002 	add	r3, r3, r2
     3b8:	e1a03803 	lsl	r3, r3, #16
     3bc:	e1a03823 	lsr	r3, r3, #16
		for (i = 2; i < 40; i++) {
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
	} else {
		for (i = 2; i < 22; i++) {
     3c0:	e150000e 	cmp	r0, lr
			SPIWRData[i] = *dataptr++;
     3c4:	e5c12002 	strb	r2, [r1, #2]
			spi_chksum += SPIWRData[i];
     3c8:	e1cc30b0 	strh	r3, [ip]
     3cc:	e2811001 	add	r1, r1, #1
		for (i = 2; i < 40; i++) {
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
	} else {
		for (i = 2; i < 22; i++) {
     3d0:	1afffff5 	bne	3ac <LL_write_ctrl_data+0xa4>
     3d4:	e59fe038 	ldr	lr, [pc, #56]	; 414 <PLLSTAT_PLOCK+0x14>
     3d8:	e2804025 	add	r4, r0, #37	; 0x25
     3dc:	e2801013 	add	r1, r0, #19
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
		dataptr += 18;
		for (i = 22; i < 40; i++) {
			SPIWRData[i] = *dataptr++;
     3e0:	e5512001 	ldrb	r2, [r1, #-1]
			spi_chksum += SPIWRData[i];
     3e4:	e1dc30b0 	ldrh	r3, [ip]
     3e8:	e0833002 	add	r3, r3, r2
     3ec:	e1a03803 	lsl	r3, r3, #16
     3f0:	e2811001 	add	r1, r1, #1
     3f4:	e1a03823 	lsr	r3, r3, #16
		for (i = 2; i < 22; i++) {
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
		dataptr += 18;
		for (i = 22; i < 40; i++) {
     3f8:	e1510004 	cmp	r1, r4
			SPIWRData[i] = *dataptr++;
     3fc:	e5ce2016 	strb	r2, [lr, #22]
			spi_chksum += SPIWRData[i];
     400:	e1cc30b0 	strh	r3, [ip]
     404:	e28ee001 	add	lr, lr, #1
		for (i = 2; i < 22; i++) {
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
		dataptr += 18;
		for (i = 22; i < 40; i++) {
     408:	1afffff4 	bne	3e0 <LL_write_ctrl_data+0xd8>
     40c:	eaffffd9 	b	378 <LL_write_ctrl_data+0x70>
     410:	40000d96 	.word	0x40000d96
     414:	400020c4 	.word	0x400020c4
     418:	40001bbc 	.word	0x40001bbc
     41c:	400020bc 	.word	0x400020bc
     420:	4000000e 	.word	0x4000000e

00000424 <HL2LL_write_cycle>:
		}
	}
}

int HL2LL_write_cycle(void) //write data to low-level processor
{
     424:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned char i;
	static unsigned char jetiValuePartialSyncPending = 0;
	static unsigned char * transmitPtr;
	static unsigned short transmitCnt = 0;

	if (!data_sent_to_LL)
     428:	e59f38c4 	ldr	r3, [pc, #2244]	; cf4 <IRQ_Stack_Size+0x4f4>
     42c:	e5d30000 	ldrb	r0, [r3]
     430:	e3500000 	cmp	r0, #0
		}
	}
}

int HL2LL_write_cycle(void) //write data to low-level processor
{
     434:	e24dd010 	sub	sp, sp, #16
	unsigned char i;
	static unsigned char jetiValuePartialSyncPending = 0;
	static unsigned char * transmitPtr;
	static unsigned short transmitCnt = 0;

	if (!data_sent_to_LL)
     438:	0a00005c 	beq	5b0 <HL2LL_write_cycle+0x18c>

	//update 1kHz data
	LL_1khz_control_input.system_flags = 0 | pageselect;
	//SSP_ack=0;	//reset ack

	if (gpsDataOkTrigger)
     43c:	e59f38b4 	ldr	r3, [pc, #2228]	; cf8 <IRQ_Stack_Size+0x4f8>

	if (!data_sent_to_LL)
		return (0);

	//update 1kHz data
	LL_1khz_control_input.system_flags = 0 | pageselect;
     440:	e59f88b4 	ldr	r8, [pc, #2228]	; cfc <IRQ_Stack_Size+0x4fc>
	//SSP_ack=0;	//reset ack

	if (gpsDataOkTrigger)
     444:	e5932000 	ldr	r2, [r3]

	if (!data_sent_to_LL)
		return (0);

	//update 1kHz data
	LL_1khz_control_input.system_flags = 0 | pageselect;
     448:	e5d89000 	ldrb	r9, [r8]
     44c:	e59fb8ac 	ldr	fp, [pc, #2220]	; d00 <IRQ_Stack_Size+0x500>
	//SSP_ack=0;	//reset ack

	if (gpsDataOkTrigger)
     450:	e3520000 	cmp	r2, #0
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;

	if (WO_SDK.ctrl_enabled)
     454:	e59f28a8 	ldr	r2, [pc, #2216]	; d04 <IRQ_Stack_Size+0x504>
	//update 1kHz data
	LL_1khz_control_input.system_flags = 0 | pageselect;
	//SSP_ack=0;	//reset ack

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;
     458:	13893008 	orrne	r3, r9, #8

	if (!data_sent_to_LL)
		return (0);

	//update 1kHz data
	LL_1khz_control_input.system_flags = 0 | pageselect;
     45c:	e1cb90b0 	strh	r9, [fp]
	//SSP_ack=0;	//reset ack

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;
     460:	11cb30b0 	strhne	r3, [fp]

	if (WO_SDK.ctrl_enabled)
     464:	e5d23001 	ldrb	r3, [r2, #1]
     468:	e3530000 	cmp	r3, #0
		LL_1khz_control_input.system_flags |= SF_HL_CONTROL_ENABLED
     46c:	11db30b0 	ldrhne	r3, [fp]
				| SF_NEW_SDK;
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
     470:	01db30b0 	ldrheq	r3, [fp]

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;

	if (WO_SDK.ctrl_enabled)
		LL_1khz_control_input.system_flags |= SF_HL_CONTROL_ENABLED
     474:	13833143 	orrne	r3, r3, #-1073741808	; 0xc0000010
				| SF_NEW_SDK;
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
     478:	03c33010 	biceq	r3, r3, #16

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;

	if (WO_SDK.ctrl_enabled)
		LL_1khz_control_input.system_flags |= SF_HL_CONTROL_ENABLED
     47c:	138335ff 	orrne	r3, r3, #1069547520	; 0x3fc00000
				| SF_NEW_SDK;
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
     480:	01a03883 	lsleq	r3, r3, #17

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;

	if (WO_SDK.ctrl_enabled)
		LL_1khz_control_input.system_flags |= SF_HL_CONTROL_ENABLED
     484:	138339fe 	orrne	r3, r3, #4161536	; 0x3f8000
				| SF_NEW_SDK;
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
     488:	01a038a3 	lsreq	r3, r3, #17

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;

	if (WO_SDK.ctrl_enabled)
		LL_1khz_control_input.system_flags |= SF_HL_CONTROL_ENABLED
     48c:	11cb30b0 	strhne	r3, [fp]
				| SF_NEW_SDK;
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
     490:	01cb30b0 	strheq	r3, [fp]
				| SF_NEW_SDK);

	if (WO_SDK.disable_motor_onoff_by_stick)
     494:	e5d23002 	ldrb	r3, [r2, #2]
     498:	e3530000 	cmp	r3, #0
		LL_1khz_control_input.system_flags
     49c:	11db30b0 	ldrhne	r3, [fp]
				|= SF_SDK_DISABLE_MOTORONOFF_BY_STICK;
	else
		LL_1khz_control_input.system_flags
     4a0:	01db30b0 	ldrheq	r3, [fp]
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
				| SF_NEW_SDK);

	if (WO_SDK.disable_motor_onoff_by_stick)
		LL_1khz_control_input.system_flags
     4a4:	13833c01 	orrne	r3, r3, #256	; 0x100
				|= SF_SDK_DISABLE_MOTORONOFF_BY_STICK;
	else
		LL_1khz_control_input.system_flags
     4a8:	03c33c01 	biceq	r3, r3, #256	; 0x100
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
				| SF_NEW_SDK);

	if (WO_SDK.disable_motor_onoff_by_stick)
		LL_1khz_control_input.system_flags
     4ac:	11cb30b0 	strhne	r3, [fp]
				|= SF_SDK_DISABLE_MOTORONOFF_BY_STICK;
	else
		LL_1khz_control_input.system_flags
     4b0:	01cb30b0 	strheq	r3, [fp]
				&= ~SF_SDK_DISABLE_MOTORONOFF_BY_STICK;

	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
     4b4:	e5d23000 	ldrb	r3, [r2]
     4b8:	e3530000 	cmp	r3, #0
     4bc:	0a00003e 	beq	5bc <HL2LL_write_cycle+0x198>
		for (i = 0; i < 8; i++) {
			LL_1khz_control_input.direct_motor_control[i]
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
		}
	} else if (WO_SDK.ctrl_mode == 0x01) //direct motor control with standard output mapping
     4c0:	e3530001 	cmp	r3, #1
     4c4:	0a00008e 	beq	704 <HL2LL_write_cycle+0x2e0>
				= WO_Direct_Motor_Control.roll;
		LL_1khz_control_input.direct_motor_control[2]
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
     4c8:	e3530002 	cmp	r3, #2
     4cc:	0a000075 	beq	6a8 <HL2LL_write_cycle+0x284>
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
	} else if (WO_SDK.ctrl_mode == 0x03) //gps waypoint control
     4d0:	e3530003 	cmp	r3, #3
     4d4:	0a00013b 	beq	9c8 <IRQ_Stack_Size+0x1c8>
			}
		} else {
			LL_1khz_control_input.ctrl_flags &= 0x00FF;
		}
	} else
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
     4d8:	e1db30b0 	ldrh	r3, [fp]
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE);

	if (pageselect == 0) {
     4dc:	e3590000 	cmp	r9, #0
			}
		} else {
			LL_1khz_control_input.ctrl_flags &= 0x00FF;
		}
	} else
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
     4e0:	e3c330e0 	bic	r3, r3, #224	; 0xe0
     4e4:	e1cb30b0 	strh	r3, [fp]
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE);

	if (pageselect == 0) {
     4e8:	0a000044 	beq	600 <HL2LL_write_cycle+0x1dc>
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
		if (declinationAvailable == 1) {
     4ec:	e59f1814 	ldr	r1, [pc, #2068]	; d08 <IRQ_Stack_Size+0x508>
     4f0:	e5d13000 	ldrb	r3, [r1]
     4f4:	e20300ff 	and	r0, r3, #255	; 0xff
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
     4f8:	e59f380c 	ldr	r3, [pc, #2060]	; d0c <IRQ_Stack_Size+0x50c>
		//set pageselect to other page for next cycle
		pageselect = 1;
	} else //pageselect=1
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
     4fc:	e59f280c 	ldr	r2, [pc, #2060]	; d10 <IRQ_Stack_Size+0x510>
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
     500:	e1d3c0b2 	ldrh	ip, [r3, #2]
     504:	e1cbc3b2 	strh	ip, [fp, #50]	; 0x32
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
     508:	e1d2c2b4 	ldrh	ip, [r2, #36]	; 0x24
     50c:	e1cbc2bc 	strh	ip, [fp, #44]	; 0x2c
		//set pageselect to other page for next cycle
		pageselect = 1;
	} else //pageselect=1
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
     510:	e1d2c1b8 	ldrh	ip, [r2, #24]
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
     514:	e1d330b0 	ldrh	r3, [r3]
		//set pageselect to other page for next cycle
		pageselect = 1;
	} else //pageselect=1
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
     518:	e1cbc2b6 	strh	ip, [fp, #38]	; 0x26
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
     51c:	e1d2c1bc 	ldrh	ip, [r2, #28]
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
     520:	e1d222b0 	ldrh	r2, [r2, #32]
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
		if (declinationAvailable == 1) {
     524:	e3500001 	cmp	r0, #1
		pageselect = 1;
	} else //pageselect=1
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
     528:	e1cbc2b8 	strh	ip, [fp, #40]	; 0x28
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
     52c:	e1cb22ba 	strh	r2, [fp, #42]	; 0x2a
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
     530:	e1cb33b0 	strh	r3, [fp, #48]	; 0x30
		//set pageselect to other page for next cycle
		pageselect = 1;
	} else //pageselect=1
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
     534:	e59fe7c4 	ldr	lr, [pc, #1988]	; d00 <IRQ_Stack_Size+0x500>
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
		if (declinationAvailable == 1) {
     538:	0a00007e 	beq	738 <HL2LL_write_cycle+0x314>
			declinationAvailable = 2;
			LL_1khz_control_input.slowDataChannelSelect = SDC_DECLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedDeclination;

		} else if (declinationAvailable == 2) {
     53c:	e5d13000 	ldrb	r3, [r1]
     540:	e3530002 	cmp	r3, #2
     544:	0a000066 	beq	6e4 <HL2LL_write_cycle+0x2c0>
			declinationAvailable = 3;
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedInclination;

		} else if (transmitBuildInfoTrigger == 1) {
     548:	e59f47c4 	ldr	r4, [pc, #1988]	; d14 <IRQ_Stack_Size+0x514>
     54c:	e5d43000 	ldrb	r3, [r4]
     550:	e20300ff 	and	r0, r3, #255	; 0xff
     554:	e3500001 	cmp	r0, #1
     558:	0a00012f 	beq	a1c <IRQ_Stack_Size+0x21c>
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
     55c:	e5d43000 	ldrb	r3, [r4]
     560:	e3530002 	cmp	r3, #2
     564:	0a00013a 	beq	a54 <IRQ_Stack_Size+0x254>
			transmitPtr++;
			transmitCnt++;

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
		} else if (emergencyModeUpdate) {
     568:	e59f17a8 	ldr	r1, [pc, #1960]	; d18 <IRQ_Stack_Size+0x518>
     56c:	e5d13000 	ldrb	r3, [r1]
     570:	e3530000 	cmp	r3, #0
			LL_1khz_control_input.slowDataChannelSelect = SDC_EM_MODE;
			LL_1khz_control_input.slowDataChannelDataShort = emergencyMode;
     574:	159f37a0 	ldrne	r3, [pc, #1952]	; d1c <IRQ_Stack_Size+0x51c>
     578:	15d32000 	ldrbne	r2, [r3]
			//verify mode
			emergencyModeUpdate = 2;
     57c:	13a03002 	movne	r3, #2

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
		} else if (emergencyModeUpdate) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_EM_MODE;
			LL_1khz_control_input.slowDataChannelDataShort = emergencyMode;
     580:	11ce23b6 	strhne	r2, [lr, #54]	; 0x36
			transmitCnt++;

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
		} else if (emergencyModeUpdate) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_EM_MODE;
     584:	13a02018 	movne	r2, #24
			LL_1khz_control_input.slowDataChannelDataShort = emergencyMode;
			//verify mode
			emergencyModeUpdate = 2;
     588:	15c13000 	strbne	r3, [r1]
			transmitCnt++;

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
		} else if (emergencyModeUpdate) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_EM_MODE;
     58c:	15ce2034 	strbne	r2, [lr, #52]	; 0x34
			//verify mode
			emergencyModeUpdate = 2;
		} else {
			LL_1khz_control_input.slowDataChannelDataShort = 0;
			LL_1khz_control_input.slowDataChannelSelect = 0;
			LL_1khz_control_input.slowDataChannelDataChar = 0;
     590:	05ce3035 	strbeq	r3, [lr, #53]	; 0x35
			LL_1khz_control_input.slowDataChannelSelect = SDC_EM_MODE;
			LL_1khz_control_input.slowDataChannelDataShort = emergencyMode;
			//verify mode
			emergencyModeUpdate = 2;
		} else {
			LL_1khz_control_input.slowDataChannelDataShort = 0;
     594:	01ce33b6 	strheq	r3, [lr, #54]	; 0x36
			LL_1khz_control_input.slowDataChannelSelect = 0;
     598:	05ce3034 	strbeq	r3, [lr, #52]	; 0x34
			LL_1khz_control_input.slowDataChannelDataChar = 0;
		}

		//write data
		LL_write_ctrl_data(pageselect);
     59c:	e1a00009 	mov	r0, r9
     5a0:	ebffff58 	bl	308 <LL_write_ctrl_data>
		//set pageselect to other page for next cycle
		pageselect = 0;
     5a4:	e3a03000 	mov	r3, #0
     5a8:	e5c83000 	strb	r3, [r8]
     5ac:	e3a00001 	mov	r0, #1
	}
	return (1);
}
     5b0:	e28dd010 	add	sp, sp, #16
     5b4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5b8:	e12fff1e 	bx	lr
		LL_1khz_control_input.system_flags
				&= ~SF_SDK_DISABLE_MOTORONOFF_BY_STICK;

	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
	{
		LL_1khz_control_input.system_flags
     5bc:	e1db30b0 	ldrh	r3, [fp]
				|= SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL;
		for (i = 0; i < 8; i++) {
			LL_1khz_control_input.direct_motor_control[i]
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
     5c0:	e59f1758 	ldr	r1, [pc, #1880]	; d20 <IRQ_Stack_Size+0x520>
		LL_1khz_control_input.system_flags
				&= ~SF_SDK_DISABLE_MOTORONOFF_BY_STICK;

	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
	{
		LL_1khz_control_input.system_flags
     5c4:	e3833080 	orr	r3, r3, #128	; 0x80
     5c8:	e1cb30b0 	strh	r3, [fp]
				|= SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL;
		for (i = 0; i < 8; i++) {
			LL_1khz_control_input.direct_motor_control[i]
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
     5cc:	e5d12008 	ldrb	r2, [r1, #8]
     5d0:	e59fb728 	ldr	fp, [pc, #1832]	; d00 <IRQ_Stack_Size+0x500>
     5d4:	e1a02402 	lsl	r2, r2, #8
     5d8:	e1a0000b 	mov	r0, fp
     5dc:	e281c008 	add	ip, r1, #8
	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
	{
		LL_1khz_control_input.system_flags
				|= SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL;
		for (i = 0; i < 8; i++) {
			LL_1khz_control_input.direct_motor_control[i]
     5e0:	e4d13001 	ldrb	r3, [r1], #1

	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
	{
		LL_1khz_control_input.system_flags
				|= SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL;
		for (i = 0; i < 8; i++) {
     5e4:	e151000c 	cmp	r1, ip
			LL_1khz_control_input.direct_motor_control[i]
     5e8:	e5c0300c 	strb	r3, [r0, #12]
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
     5ec:	e2800001 	add	r0, r0, #1

	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
	{
		LL_1khz_control_input.system_flags
				|= SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL;
		for (i = 0; i < 8; i++) {
     5f0:	1afffffa 	bne	5e0 <HL2LL_write_cycle+0x1bc>
     5f4:	e1cb20b2 	strh	r2, [fp, #2]
		}
	} else
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE);

	if (pageselect == 0) {
     5f8:	e3590000 	cmp	r9, #0
     5fc:	1affffba 	bne	4ec <HL2LL_write_cycle+0xc8>
		if (LL_1khz_control_input.system_flags & SF_GPS_NEW) {
     600:	e1db30b0 	ldrh	r3, [fp]
     604:	e3130008 	tst	r3, #8
     608:	e59f56f0 	ldr	r5, [pc, #1776]	; d00 <IRQ_Stack_Size+0x500>
     60c:	1a000010 	bne	654 <HL2LL_write_cycle+0x230>

				//default is no command
				LL_1khz_control_input.status = 0;

				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
     610:	e59f670c 	ldr	r6, [pc, #1804]	; d24 <IRQ_Stack_Size+0x524>
     614:	e5d63000 	ldrb	r3, [r6]
     618:	e3530001 	cmp	r3, #1
			LL_1khz_control_input.speed_y = GPS_Data.speed_y;
			LL_1khz_control_input.heading = GPS_Data.heading;
			LL_1khz_control_input.status = GPS_Data.status;
		} else {
			//default is no command
			LL_1khz_control_input.status = 0;
     61c:	e1c592b4 	strh	r9, [r5, #36]	; 0x24
     620:	e1a07009 	mov	r7, r9

				//default is no command
				LL_1khz_control_input.status = 0;

				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
     624:	0a00011c 	beq	a9c <IRQ_Stack_Size+0x29c>
					jetiSyncState++;
					jetiSensorValCnt = 0;
					jetiSensorValUpdateTimeout = 0;

				} else {
					switch (jetiSyncState) {
     628:	e59fa6f8 	ldr	sl, [pc, #1784]	; d28 <IRQ_Stack_Size+0x528>
     62c:	e5da3000 	ldrb	r3, [sl]
     630:	e3530005 	cmp	r3, #5
     634:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
     638:	ea000014 	b	690 <HL2LL_write_cycle+0x26c>
     63c:	00000754 	.word	0x00000754
     640:	0000079c 	.word	0x0000079c
     644:	000007c8 	.word	0x000007c8
     648:	00000820 	.word	0x00000820
     64c:	00000874 	.word	0x00000874
     650:	000008c8 	.word	0x000008c8
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE);

	if (pageselect == 0) {
		if (LL_1khz_control_input.system_flags & SF_GPS_NEW) {
			//fill struct with 500Hz data
			LL_1khz_control_input.latitude = GPS_Data.latitude;
     654:	e59f36b4 	ldr	r3, [pc, #1716]	; d10 <IRQ_Stack_Size+0x510>
     658:	e5932000 	ldr	r2, [r3]
			LL_1khz_control_input.longitude = GPS_Data.longitude;
     65c:	e5931004 	ldr	r1, [r3, #4]
			LL_1khz_control_input.height = GPS_Data.height;
     660:	e5930008 	ldr	r0, [r3, #8]
			LL_1khz_control_input.speed_x = GPS_Data.speed_x;
			LL_1khz_control_input.speed_y = GPS_Data.speed_y;
			LL_1khz_control_input.heading = GPS_Data.heading;
			LL_1khz_control_input.status = GPS_Data.status;
     664:	e1d3c2b8 	ldrh	ip, [r3, #40]	; 0x28
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE);

	if (pageselect == 0) {
		if (LL_1khz_control_input.system_flags & SF_GPS_NEW) {
			//fill struct with 500Hz data
			LL_1khz_control_input.latitude = GPS_Data.latitude;
     668:	e5852014 	str	r2, [r5, #20]
			LL_1khz_control_input.longitude = GPS_Data.longitude;
     66c:	e5851018 	str	r1, [r5, #24]
			LL_1khz_control_input.height = GPS_Data.height;
			LL_1khz_control_input.speed_x = GPS_Data.speed_x;
			LL_1khz_control_input.speed_y = GPS_Data.speed_y;
     670:	e1d321b0 	ldrh	r2, [r3, #16]
		if (LL_1khz_control_input.system_flags & SF_GPS_NEW) {
			//fill struct with 500Hz data
			LL_1khz_control_input.latitude = GPS_Data.latitude;
			LL_1khz_control_input.longitude = GPS_Data.longitude;
			LL_1khz_control_input.height = GPS_Data.height;
			LL_1khz_control_input.speed_x = GPS_Data.speed_x;
     674:	e1d310bc 	ldrh	r1, [r3, #12]
			LL_1khz_control_input.speed_y = GPS_Data.speed_y;
			LL_1khz_control_input.heading = GPS_Data.heading;
     678:	e1d331b4 	ldrh	r3, [r3, #20]
			LL_1khz_control_input.status = GPS_Data.status;
     67c:	e1c5c2b4 	strh	ip, [r5, #36]	; 0x24
	if (pageselect == 0) {
		if (LL_1khz_control_input.system_flags & SF_GPS_NEW) {
			//fill struct with 500Hz data
			LL_1khz_control_input.latitude = GPS_Data.latitude;
			LL_1khz_control_input.longitude = GPS_Data.longitude;
			LL_1khz_control_input.height = GPS_Data.height;
     680:	e585001c 	str	r0, [r5, #28]
			LL_1khz_control_input.speed_x = GPS_Data.speed_x;
     684:	e1c512b0 	strh	r1, [r5, #32]
			LL_1khz_control_input.speed_y = GPS_Data.speed_y;
     688:	e1c522b2 	strh	r2, [r5, #34]	; 0x22
			LL_1khz_control_input.heading = GPS_Data.heading;
     68c:	e1c532be 	strh	r3, [r5, #46]	; 0x2e
				}
			}
		}

		//write data
		LL_write_ctrl_data(pageselect);
     690:	e5d80000 	ldrb	r0, [r8]
     694:	ebffff1b 	bl	308 <LL_write_ctrl_data>
		//set pageselect to other page for next cycle
		pageselect = 1;
     698:	e3a03001 	mov	r3, #1
     69c:	e1a00003 	mov	r0, r3
     6a0:	e5c83000 	strb	r3, [r8]
     6a4:	eaffffc1 	b	5b0 <HL2LL_write_cycle+0x18c>
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
     6a8:	e59f267c 	ldr	r2, [pc, #1660]	; d2c <IRQ_Stack_Size+0x52c>
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
     6ac:	e1db30b0 	ldrh	r3, [fp]
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
     6b0:	e1d210b6 	ldrh	r1, [r2, #6]
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
     6b4:	e3c330e0 	bic	r3, r3, #224	; 0xe0
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
     6b8:	e1d2c0b0 	ldrh	ip, [r2]
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
     6bc:	e1cb30b0 	strh	r3, [fp]
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
     6c0:	e1cb10ba 	strh	r1, [fp, #10]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
     6c4:	e1d230b8 	ldrh	r3, [r2, #8]
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
     6c8:	e1d210b2 	ldrh	r1, [r2, #2]
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
     6cc:	e1d220b4 	ldrh	r2, [r2, #4]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
     6d0:	e1cb30b2 	strh	r3, [fp, #2]
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
     6d4:	e1cbc0b4 	strh	ip, [fp, #4]
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
     6d8:	e1cb10b6 	strh	r1, [fp, #6]
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
     6dc:	e1cb20b8 	strh	r2, [fp, #8]
     6e0:	eaffffc4 	b	5f8 <HL2LL_write_cycle+0x1d4>
			LL_1khz_control_input.slowDataChannelSelect = SDC_DECLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedDeclination;

		} else if (declinationAvailable == 2) {
			declinationAvailable = 3;
     6e4:	e2833001 	add	r3, r3, #1
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
     6e8:	e59f2640 	ldr	r2, [pc, #1600]	; d30 <IRQ_Stack_Size+0x530>
			LL_1khz_control_input.slowDataChannelSelect = SDC_DECLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedDeclination;

		} else if (declinationAvailable == 2) {
			declinationAvailable = 3;
     6ec:	e5c13000 	strb	r3, [r1]
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
     6f0:	e5923000 	ldr	r3, [r2]
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedDeclination;

		} else if (declinationAvailable == 2) {
			declinationAvailable = 3;
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
     6f4:	e3a02012 	mov	r2, #18
			LL_1khz_control_input.slowDataChannelDataShort
     6f8:	e1ce33b6 	strh	r3, [lr, #54]	; 0x36
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedDeclination;

		} else if (declinationAvailable == 2) {
			declinationAvailable = 3;
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
     6fc:	e5ce2034 	strb	r2, [lr, #52]	; 0x34
     700:	eaffffa5 	b	59c <HL2LL_write_cycle+0x178>
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
		}
	} else if (WO_SDK.ctrl_mode == 0x01) //direct motor control with standard output mapping
	{
		LL_1khz_control_input.system_flags |= SF_DIRECT_MOTOR_CONTROL;
		LL_1khz_control_input.direct_motor_control[0]
     704:	e59f3628 	ldr	r3, [pc, #1576]	; d34 <IRQ_Stack_Size+0x534>
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
		}
	} else if (WO_SDK.ctrl_mode == 0x01) //direct motor control with standard output mapping
	{
		LL_1khz_control_input.system_flags |= SF_DIRECT_MOTOR_CONTROL;
     708:	e1db20b0 	ldrh	r2, [fp]
				= WO_Direct_Motor_Control.pitch;
		LL_1khz_control_input.direct_motor_control[1]
				= WO_Direct_Motor_Control.roll;
		LL_1khz_control_input.direct_motor_control[2]
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
     70c:	e5d3e003 	ldrb	lr, [r3, #3]
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
		}
	} else if (WO_SDK.ctrl_mode == 0x01) //direct motor control with standard output mapping
	{
		LL_1khz_control_input.system_flags |= SF_DIRECT_MOTOR_CONTROL;
		LL_1khz_control_input.direct_motor_control[0]
     710:	e5d31000 	ldrb	r1, [r3]
				= WO_Direct_Motor_Control.pitch;
		LL_1khz_control_input.direct_motor_control[1]
     714:	e5d30001 	ldrb	r0, [r3, #1]
				= WO_Direct_Motor_Control.roll;
		LL_1khz_control_input.direct_motor_control[2]
     718:	e5d3c002 	ldrb	ip, [r3, #2]
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
		}
	} else if (WO_SDK.ctrl_mode == 0x01) //direct motor control with standard output mapping
	{
		LL_1khz_control_input.system_flags |= SF_DIRECT_MOTOR_CONTROL;
     71c:	e3822020 	orr	r2, r2, #32
     720:	e1cb20b0 	strh	r2, [fp]
		LL_1khz_control_input.direct_motor_control[0]
     724:	e5cb100c 	strb	r1, [fp, #12]
				= WO_Direct_Motor_Control.pitch;
		LL_1khz_control_input.direct_motor_control[1]
     728:	e5cb000d 	strb	r0, [fp, #13]
				= WO_Direct_Motor_Control.roll;
		LL_1khz_control_input.direct_motor_control[2]
     72c:	e5cbc00e 	strb	ip, [fp, #14]
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
     730:	e5cbe00f 	strb	lr, [fp, #15]
     734:	eaffffaf 	b	5f8 <HL2LL_write_cycle+0x1d4>
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
		if (declinationAvailable == 1) {
			declinationAvailable = 2;
     738:	e3a03002 	mov	r3, #2
     73c:	e5c13000 	strb	r3, [r1]
			LL_1khz_control_input.slowDataChannelSelect = SDC_DECLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
     740:	e59f25f0 	ldr	r2, [pc, #1520]	; d38 <IRQ_Stack_Size+0x538>
     744:	e5923000 	ldr	r3, [r2]
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
		if (declinationAvailable == 1) {
			declinationAvailable = 2;
			LL_1khz_control_input.slowDataChannelSelect = SDC_DECLINATION;
     748:	e5ce0034 	strb	r0, [lr, #52]	; 0x34
			LL_1khz_control_input.slowDataChannelDataShort
     74c:	e1ce33b6 	strh	r3, [lr, #54]	; 0x36
     750:	eaffff91 	b	59c <HL2LL_write_cycle+0x178>

				} else {
					switch (jetiSyncState) {
					case 0:
						//sync name
						LL_1khz_control_input.status = PD_JETI_SETNAME;
     754:	e3a0c0a0 	mov	ip, #160	; 0xa0
						memcpy(&LL_1khz_control_input.latitude, &jetiName[0], 4);
     758:	e59f15dc 	ldr	r1, [pc, #1500]	; d3c <IRQ_Stack_Size+0x53c>
     75c:	e3a02004 	mov	r2, #4

				} else {
					switch (jetiSyncState) {
					case 0:
						//sync name
						LL_1khz_control_input.status = PD_JETI_SETNAME;
     760:	e1cbc2b4 	strh	ip, [fp, #36]	; 0x24
						memcpy(&LL_1khz_control_input.latitude, &jetiName[0], 4);
     764:	e59f05d4 	ldr	r0, [pc, #1492]	; d40 <IRQ_Stack_Size+0x540>
     768:	eb00483e 	bl	12868 <__memcpy_from_arm>
						memcpy(&LL_1khz_control_input.longitude, &jetiName[4],
     76c:	e59f15d0 	ldr	r1, [pc, #1488]	; d44 <IRQ_Stack_Size+0x544>
     770:	e3a02004 	mov	r2, #4
     774:	e59f05cc 	ldr	r0, [pc, #1484]	; d48 <IRQ_Stack_Size+0x548>
     778:	eb00483a 	bl	12868 <__memcpy_from_arm>
								4);
						memcpy(&LL_1khz_control_input.speed_x, &jetiName[8], 2);
     77c:	e59f05c8 	ldr	r0, [pc, #1480]	; d4c <IRQ_Stack_Size+0x54c>
     780:	e59f15c8 	ldr	r1, [pc, #1480]	; d50 <IRQ_Stack_Size+0x550>
								&jetiDisplayText[4], 4);
						memcpy(&LL_1khz_control_input.height,
								&jetiDisplayText[8], 4);
						memcpy(&LL_1khz_control_input.speed_x,
								&jetiDisplayText[12], 2);
						memcpy(&LL_1khz_control_input.speed_y,
     784:	e3a02002 	mov	r2, #2
     788:	eb004836 	bl	12868 <__memcpy_from_arm>
								&jetiDisplayText[14], 2);
						jetiSyncState++;
     78c:	e5da3000 	ldrb	r3, [sl]
     790:	e2833001 	add	r3, r3, #1
     794:	e5ca3000 	strb	r3, [sl]
     798:	eaffffbc 	b	690 <HL2LL_write_cycle+0x26c>
						jetiSyncState++;
						break;
					case 1:
						//sync alarm
						LL_1khz_control_input.status = PD_JETI_SETALARM;
						LL_1khz_control_input.speed_x = jetiAlarm;
     79c:	e59f35b0 	ldr	r3, [pc, #1456]	; d54 <IRQ_Stack_Size+0x554>
						LL_1khz_control_input.speed_y = jetiAlarmType;
     7a0:	e59f25b0 	ldr	r2, [pc, #1456]	; d58 <IRQ_Stack_Size+0x558>
						jetiSyncState++;
						break;
					case 1:
						//sync alarm
						LL_1khz_control_input.status = PD_JETI_SETALARM;
						LL_1khz_control_input.speed_x = jetiAlarm;
     7a4:	e5d31000 	ldrb	r1, [r3]
						LL_1khz_control_input.speed_y = jetiAlarmType;
     7a8:	e5d23000 	ldrb	r3, [r2]
						jetiSyncState++;
						break;
					case 1:
						//sync alarm
						LL_1khz_control_input.status = PD_JETI_SETALARM;
						LL_1khz_control_input.speed_x = jetiAlarm;
     7ac:	e1cb12b0 	strh	r1, [fp, #32]
						LL_1khz_control_input.speed_y = jetiAlarmType;
						jetiSyncState++;
     7b0:	e3a02002 	mov	r2, #2

						jetiSyncState++;
						break;
					case 1:
						//sync alarm
						LL_1khz_control_input.status = PD_JETI_SETALARM;
     7b4:	e3a010a3 	mov	r1, #163	; 0xa3
						LL_1khz_control_input.speed_x = jetiAlarm;
						LL_1khz_control_input.speed_y = jetiAlarmType;
     7b8:	e1cb32b2 	strh	r3, [fp, #34]	; 0x22
						jetiSyncState++;
     7bc:	e5ca2000 	strb	r2, [sl]

						jetiSyncState++;
						break;
					case 1:
						//sync alarm
						LL_1khz_control_input.status = PD_JETI_SETALARM;
     7c0:	e1cb12b4 	strh	r1, [fp, #36]	; 0x24
     7c4:	eaffffb1 	b	690 <HL2LL_write_cycle+0x26c>
						LL_1khz_control_input.speed_y = jetiAlarmType;
						jetiSyncState++;
						break;
					case 2:
						//sync complete sensor fields
						if (jetiValues[jetiSensorCnt].active) {
     7c8:	e59f558c 	ldr	r5, [pc, #1420]	; d5c <IRQ_Stack_Size+0x55c>
     7cc:	e5d52000 	ldrb	r2, [r5]
     7d0:	e0823102 	add	r3, r2, r2, lsl #2
     7d4:	e59f4584 	ldr	r4, [pc, #1412]	; d60 <IRQ_Stack_Size+0x560>
     7d8:	e0823083 	add	r3, r2, r3, lsl #1
     7dc:	e1a03083 	lsl	r3, r3, #1
     7e0:	e7d3c004 	ldrb	ip, [r3, r4]
     7e4:	e35c0000 	cmp	ip, #0
     7e8:	e0831004 	add	r1, r3, r4
     7ec:	1a0000f8 	bne	bd4 <IRQ_Stack_Size+0x3d4>
									&jetiValues[jetiSensorCnt].name[8], 2);
							LL_1khz_control_input.speed_y
									= jetiValues[jetiSensorCnt].decPoint;
							jetiValuePartialSyncPending = 1;
						} else {
							jetiSensorCnt++;
     7f0:	e2823001 	add	r3, r2, #1
     7f4:	e20330ff 	and	r3, r3, #255	; 0xff
							if (jetiSensorCnt == 15) {
     7f8:	e353000f 	cmp	r3, #15
									&jetiValues[jetiSensorCnt].name[8], 2);
							LL_1khz_control_input.speed_y
									= jetiValues[jetiSensorCnt].decPoint;
							jetiValuePartialSyncPending = 1;
						} else {
							jetiSensorCnt++;
     7fc:	e5c53000 	strb	r3, [r5]
							if (jetiSensorCnt == 15) {
								jetiSensorCnt = 0;
							}

							jetiSyncState++;
     800:	e3a03003 	mov	r3, #3
     804:	e5ca3000 	strb	r3, [sl]
							jetiSensorValCnt = 0;
							jetiSensorValUpdateTimeout = 0;
     808:	e59f2554 	ldr	r2, [pc, #1364]	; d64 <IRQ_Stack_Size+0x564>
							if (jetiSensorCnt == 15) {
								jetiSensorCnt = 0;
							}

							jetiSyncState++;
							jetiSensorValCnt = 0;
     80c:	e59f3554 	ldr	r3, [pc, #1364]	; d68 <IRQ_Stack_Size+0x568>
									= jetiValues[jetiSensorCnt].decPoint;
							jetiValuePartialSyncPending = 1;
						} else {
							jetiSensorCnt++;
							if (jetiSensorCnt == 15) {
								jetiSensorCnt = 0;
     810:	05c5c000 	strbeq	ip, [r5]
							}

							jetiSyncState++;
							jetiSensorValCnt = 0;
							jetiSensorValUpdateTimeout = 0;
     814:	e5c2c000 	strb	ip, [r2]
							if (jetiSensorCnt == 15) {
								jetiSensorCnt = 0;
							}

							jetiSyncState++;
							jetiSensorValCnt = 0;
     818:	e5c3c000 	strb	ip, [r3]
     81c:	eaffff9b 	b	690 <HL2LL_write_cycle+0x26c>
						}
						break;

					case 3:
						//sync text
						LL_1khz_control_input.status = PD_JETI_SETTEXT;
     820:	e3a0c0a4 	mov	ip, #164	; 0xa4
     824:	e1cbc2b4 	strh	ip, [fp, #36]	; 0x24
						memcpy(&LL_1khz_control_input.latitude,
     828:	e59f153c 	ldr	r1, [pc, #1340]	; d6c <IRQ_Stack_Size+0x56c>
     82c:	e3a02004 	mov	r2, #4
     830:	e59f0508 	ldr	r0, [pc, #1288]	; d40 <IRQ_Stack_Size+0x540>
     834:	eb00480b 	bl	12868 <__memcpy_from_arm>
								&jetiDisplayText[0], 4);
						memcpy(&LL_1khz_control_input.longitude,
     838:	e59f1530 	ldr	r1, [pc, #1328]	; d70 <IRQ_Stack_Size+0x570>
     83c:	e3a02004 	mov	r2, #4
     840:	e59f0500 	ldr	r0, [pc, #1280]	; d48 <IRQ_Stack_Size+0x548>
     844:	eb004807 	bl	12868 <__memcpy_from_arm>
								&jetiDisplayText[4], 4);
						memcpy(&LL_1khz_control_input.height,
     848:	e59f1524 	ldr	r1, [pc, #1316]	; d74 <IRQ_Stack_Size+0x574>
     84c:	e3a02004 	mov	r2, #4
     850:	e59f0520 	ldr	r0, [pc, #1312]	; d78 <IRQ_Stack_Size+0x578>
     854:	eb004803 	bl	12868 <__memcpy_from_arm>
								&jetiDisplayText[8], 4);
						memcpy(&LL_1khz_control_input.speed_x,
     858:	e59f151c 	ldr	r1, [pc, #1308]	; d7c <IRQ_Stack_Size+0x57c>
     85c:	e3a02002 	mov	r2, #2
     860:	e59f04e4 	ldr	r0, [pc, #1252]	; d4c <IRQ_Stack_Size+0x54c>
     864:	eb0047ff 	bl	12868 <__memcpy_from_arm>
								&jetiDisplayText[12], 2);
						memcpy(&LL_1khz_control_input.speed_y,
     868:	e59f0510 	ldr	r0, [pc, #1296]	; d80 <IRQ_Stack_Size+0x580>
     86c:	e59f1510 	ldr	r1, [pc, #1296]	; d84 <IRQ_Stack_Size+0x584>
     870:	eaffffc3 	b	784 <HL2LL_write_cycle+0x360>
						jetiSyncState++;
						break;

					case 4:
						//sync text2
						LL_1khz_control_input.status = PD_JETI_SETTEXT2;
     874:	e3a030a7 	mov	r3, #167	; 0xa7
     878:	e1cb32b4 	strh	r3, [fp, #36]	; 0x24

						memcpy(&LL_1khz_control_input.latitude,
     87c:	e59f1504 	ldr	r1, [pc, #1284]	; d88 <IRQ_Stack_Size+0x588>
     880:	e3a02004 	mov	r2, #4
     884:	e59f04b4 	ldr	r0, [pc, #1204]	; d40 <IRQ_Stack_Size+0x540>
     888:	eb0047f6 	bl	12868 <__memcpy_from_arm>
								&jetiDisplayText[16], 4);
						memcpy(&LL_1khz_control_input.longitude,
     88c:	e59f14f8 	ldr	r1, [pc, #1272]	; d8c <IRQ_Stack_Size+0x58c>
     890:	e3a02004 	mov	r2, #4
     894:	e59f04ac 	ldr	r0, [pc, #1196]	; d48 <IRQ_Stack_Size+0x548>
     898:	eb0047f2 	bl	12868 <__memcpy_from_arm>
								&jetiDisplayText[20], 4);
						memcpy(&LL_1khz_control_input.height,
     89c:	e59f14ec 	ldr	r1, [pc, #1260]	; d90 <IRQ_Stack_Size+0x590>
     8a0:	e3a02004 	mov	r2, #4
     8a4:	e59f04cc 	ldr	r0, [pc, #1228]	; d78 <IRQ_Stack_Size+0x578>
     8a8:	eb0047ee 	bl	12868 <__memcpy_from_arm>
								&jetiDisplayText[24], 4);
						memcpy(&LL_1khz_control_input.speed_x,
     8ac:	e59f14e0 	ldr	r1, [pc, #1248]	; d94 <IRQ_Stack_Size+0x594>
     8b0:	e3a02002 	mov	r2, #2
     8b4:	e59f0490 	ldr	r0, [pc, #1168]	; d4c <IRQ_Stack_Size+0x54c>
     8b8:	eb0047ea 	bl	12868 <__memcpy_from_arm>
								&jetiDisplayText[28], 2);
						memcpy(&LL_1khz_control_input.speed_y,
     8bc:	e59f04bc 	ldr	r0, [pc, #1212]	; d80 <IRQ_Stack_Size+0x580>
     8c0:	e59f14d0 	ldr	r1, [pc, #1232]	; d98 <IRQ_Stack_Size+0x598>
     8c4:	eaffffae 	b	784 <HL2LL_write_cycle+0x360>

					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
     8c8:	e59f9498 	ldr	r9, [pc, #1176]	; d68 <IRQ_Stack_Size+0x568>
     8cc:	e5d9c000 	ldrb	ip, [r9]
						LL_1khz_control_input.latitude = jetiValues[3
     8d0:	e08c108c 	add	r1, ip, ip, lsl #1
     8d4:	e0813101 	add	r3, r1, r1, lsl #2
     8d8:	e59f5480 	ldr	r5, [pc, #1152]	; d60 <IRQ_Stack_Size+0x560>
     8dc:	e0811083 	add	r1, r1, r3, lsl #1
     8e0:	e1a01081 	lsl	r1, r1, #1

					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
     8e4:	e58bc01c 	str	ip, [fp, #28]
						LL_1khz_control_input.latitude = jetiValues[3
     8e8:	e0813005 	add	r3, r1, r5
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     8ec:	e2832026 	add	r2, r3, #38	; 0x26
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     8f0:	e2833010 	add	r3, r3, #16
     8f4:	e5d34003 	ldrb	r4, [r3, #3]
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     8f8:	e5d20003 	ldrb	r0, [r2, #3]
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     8fc:	e5d3e002 	ldrb	lr, [r3, #2]
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     900:	e5d2c002 	ldrb	ip, [r2, #2]
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     904:	e5d36004 	ldrb	r6, [r3, #4]
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     908:	e5d27004 	ldrb	r7, [r2, #4]
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     90c:	e18ee404 	orr	lr, lr, r4, lsl #8
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     910:	e18cc400 	orr	ip, ip, r0, lsl #8
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     914:	e5d34005 	ldrb	r4, [r3, #5]
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     918:	e5d20005 	ldrb	r0, [r2, #5]
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     91c:	e18ee806 	orr	lr, lr, r6, lsl #16
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     920:	e18cc807 	orr	ip, ip, r7, lsl #16
     924:	e18ccc00 	orr	ip, ip, r0, lsl #24
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     928:	e18eec04 	orr	lr, lr, r4, lsl #24
						break;

					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
     92c:	e3a030a2 	mov	r3, #162	; 0xa2
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
								* jetiSensorValCnt + 1].value;
						memcpy(&LL_1khz_control_input.speed_y,
     930:	e0811005 	add	r1, r1, r5
     934:	e2811040 	add	r1, r1, #64	; 0x40
     938:	e3a02002 	mov	r2, #2

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     93c:	e58bc018 	str	ip, [fp, #24]
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     940:	e58be014 	str	lr, [fp, #20]
						break;

					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
     944:	e1cb32b4 	strh	r3, [fp, #36]	; 0x24
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
								* jetiSensorValCnt + 1].value;
						memcpy(&LL_1khz_control_input.speed_y,
     948:	e59f0430 	ldr	r0, [pc, #1072]	; d80 <IRQ_Stack_Size+0x580>
     94c:	eb0047c5 	bl	12868 <__memcpy_from_arm>
								(void *) (((unsigned char *) (&jetiValues[3
										* jetiSensorValCnt + 2].value)) + 2), 2);
						memcpy(&LL_1khz_control_input.speed_x, &jetiValues[3
     950:	e5d93000 	ldrb	r3, [r9]
     954:	e0833283 	add	r3, r3, r3, lsl #5
     958:	e0855083 	add	r5, r5, r3, lsl #1
     95c:	e3a02002 	mov	r2, #2
     960:	e285103e 	add	r1, r5, #62	; 0x3e
     964:	e59f03e0 	ldr	r0, [pc, #992]	; d4c <IRQ_Stack_Size+0x54c>
     968:	eb0047be 	bl	12868 <__memcpy_from_arm>
								* jetiSensorValCnt + 2].value, 2);

						jetiSensorValCnt++;
     96c:	e5d93000 	ldrb	r3, [r9]
     970:	e2833001 	add	r3, r3, #1
     974:	e20330ff 	and	r3, r3, #255	; 0xff
						if (jetiSensorValCnt == 5)
							jetiSensorValCnt = 0;

						if (jetiTriggerTextSync) {
     978:	e59f241c 	ldr	r2, [pc, #1052]	; d9c <IRQ_Stack_Size+0x59c>
										* jetiSensorValCnt + 2].value)) + 2), 2);
						memcpy(&LL_1khz_control_input.speed_x, &jetiValues[3
								* jetiSensorValCnt + 2].value, 2);

						jetiSensorValCnt++;
						if (jetiSensorValCnt == 5)
     97c:	e3530005 	cmp	r3, #5
								(void *) (((unsigned char *) (&jetiValues[3
										* jetiSensorValCnt + 2].value)) + 2), 2);
						memcpy(&LL_1khz_control_input.speed_x, &jetiValues[3
								* jetiSensorValCnt + 2].value, 2);

						jetiSensorValCnt++;
     980:	e5c93000 	strb	r3, [r9]
						if (jetiSensorValCnt == 5)
							jetiSensorValCnt = 0;
     984:	02433005 	subeq	r3, r3, #5
     988:	05c93000 	strbeq	r3, [r9]

						if (jetiTriggerTextSync) {
     98c:	e5d23000 	ldrb	r3, [r2]
     990:	e3530000 	cmp	r3, #0
							jetiSyncState = 3; //trigger text resync
							jetiTriggerTextSync = 0;
     994:	13a03000 	movne	r3, #0
     998:	15c23000 	strbne	r3, [r2]
						jetiSensorValCnt++;
						if (jetiSensorValCnt == 5)
							jetiSensorValCnt = 0;

						if (jetiTriggerTextSync) {
							jetiSyncState = 3; //trigger text resync
     99c:	13a02003 	movne	r2, #3
     9a0:	15ca2000 	strbne	r2, [sl]
							jetiTriggerTextSync = 0;
						}

						jetiSensorValUpdateTimeout++;
     9a4:	e59f23b8 	ldr	r2, [pc, #952]	; d64 <IRQ_Stack_Size+0x564>
     9a8:	e5d23000 	ldrb	r3, [r2]
     9ac:	e2833001 	add	r3, r3, #1
     9b0:	e20330ff 	and	r3, r3, #255	; 0xff
						if (jetiSensorValUpdateTimeout == 75) {
     9b4:	e353004b 	cmp	r3, #75	; 0x4b
						if (jetiTriggerTextSync) {
							jetiSyncState = 3; //trigger text resync
							jetiTriggerTextSync = 0;
						}

						jetiSensorValUpdateTimeout++;
     9b8:	e5c23000 	strb	r3, [r2]
						if (jetiSensorValUpdateTimeout == 75) {
							jetiSyncState = 0;
     9bc:	0243304b 	subeq	r3, r3, #75	; 0x4b
     9c0:	05ca3000 	strbeq	r3, [sl]
     9c4:	eaffff31 	b	690 <HL2LL_write_cycle+0x26c>
	{
		LL_1khz_control_input.system_flags |= SF_WAYPOINT_MODE;

		//check if new command should be send

		if (wpCtrlWpCmdUpdated) {
     9c8:	e59fc3d0 	ldr	ip, [pc, #976]	; da0 <IRQ_Stack_Size+0x5a0>
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
	} else if (WO_SDK.ctrl_mode == 0x03) //gps waypoint control
	{
		LL_1khz_control_input.system_flags |= SF_WAYPOINT_MODE;
     9cc:	e1db30b0 	ldrh	r3, [fp]

		//check if new command should be send

		if (wpCtrlWpCmdUpdated) {
     9d0:	e5dc2000 	ldrb	r2, [ip]
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
	} else if (WO_SDK.ctrl_mode == 0x03) //gps waypoint control
	{
		LL_1khz_control_input.system_flags |= SF_WAYPOINT_MODE;
     9d4:	e59fa324 	ldr	sl, [pc, #804]	; d00 <IRQ_Stack_Size+0x500>
     9d8:	e3833040 	orr	r3, r3, #64	; 0x40

		//check if new command should be send

		if (wpCtrlWpCmdUpdated) {
     9dc:	e3520000 	cmp	r2, #0
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
	} else if (WO_SDK.ctrl_mode == 0x03) //gps waypoint control
	{
		LL_1khz_control_input.system_flags |= SF_WAYPOINT_MODE;
     9e0:	e1cb30b0 	strh	r3, [fp]
				LL_1khz_control_input.ctrl_flags &= 0x00FF;
				LL_1khz_control_input.ctrl_flags |= wpCtrlWpCmd << 8;
				wpCtrlWpCmdUpdated = 0;
			}
		} else {
			LL_1khz_control_input.ctrl_flags &= 0x00FF;
     9e4:	05da3002 	ldrbeq	r3, [sl, #2]
     9e8:	01ca30b2 	strheq	r3, [sl, #2]
	{
		LL_1khz_control_input.system_flags |= SF_WAYPOINT_MODE;

		//check if new command should be send

		if (wpCtrlWpCmdUpdated) {
     9ec:	0affff01 	beq	5f8 <HL2LL_write_cycle+0x1d4>

			if (wpCtrlWpCmd == WP_CMD_SINGLE_WP) {
     9f0:	e59f33ac 	ldr	r3, [pc, #940]	; da4 <IRQ_Stack_Size+0x5a4>
     9f4:	e5d31000 	ldrb	r1, [r3]
     9f8:	e3510001 	cmp	r1, #1
     9fc:	0a000054 	beq	b54 <IRQ_Stack_Size+0x354>
					LL_1khz_control_input.direct_motor_control[7] = 0;
					wpCtrlWpCmdUpdated = 0;
					wpCtrlNavStatus = 0;
				}
			} else {
				LL_1khz_control_input.ctrl_flags &= 0x00FF;
     a00:	e5da3002 	ldrb	r3, [sl, #2]
				LL_1khz_control_input.ctrl_flags |= wpCtrlWpCmd << 8;
				wpCtrlWpCmdUpdated = 0;
     a04:	e59fc394 	ldr	ip, [pc, #916]	; da0 <IRQ_Stack_Size+0x5a0>
					wpCtrlWpCmdUpdated = 0;
					wpCtrlNavStatus = 0;
				}
			} else {
				LL_1khz_control_input.ctrl_flags &= 0x00FF;
				LL_1khz_control_input.ctrl_flags |= wpCtrlWpCmd << 8;
     a08:	e1833401 	orr	r3, r3, r1, lsl #8
				wpCtrlWpCmdUpdated = 0;
     a0c:	e3a02000 	mov	r2, #0
					wpCtrlWpCmdUpdated = 0;
					wpCtrlNavStatus = 0;
				}
			} else {
				LL_1khz_control_input.ctrl_flags &= 0x00FF;
				LL_1khz_control_input.ctrl_flags |= wpCtrlWpCmd << 8;
     a10:	e1ca30b2 	strh	r3, [sl, #2]
				wpCtrlWpCmdUpdated = 0;
     a14:	e5cc2000 	strb	r2, [ip]
     a18:	eafffef6 	b	5f8 <HL2LL_write_cycle+0x1d4>
					= estimatedInclination;

		} else if (transmitBuildInfoTrigger == 1) {
			transmitBuildInfoTrigger = 2;
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
     a1c:	e59f1384 	ldr	r1, [pc, #900]	; da8 <IRQ_Stack_Size+0x5a8>
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedInclination;

		} else if (transmitBuildInfoTrigger == 1) {
			transmitBuildInfoTrigger = 2;
     a20:	e3a03002 	mov	r3, #2
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a24:	e4d12001 	ldrb	r2, [r1], #1
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedInclination;

		} else if (transmitBuildInfoTrigger == 1) {
			transmitBuildInfoTrigger = 2;
     a28:	e5c43000 	strb	r3, [r4]
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
     a2c:	e59f3378 	ldr	r3, [pc, #888]	; dac <IRQ_Stack_Size+0x5ac>
			transmitBuildInfoTrigger = 2;
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a30:	e5ce2035 	strb	r2, [lr, #53]	; 0x35
			transmitPtr++;
			transmitCnt++;
     a34:	e59f2374 	ldr	r2, [pc, #884]	; db0 <IRQ_Stack_Size+0x5b0>
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
     a38:	e5831000 	str	r1, [r3]

		} else if (transmitBuildInfoTrigger == 1) {
			transmitBuildInfoTrigger = 2;
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
     a3c:	e3a03005 	mov	r3, #5
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
     a40:	e3a01000 	mov	r1, #0
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;
     a44:	e1c200b0 	strh	r0, [r2]

		} else if (transmitBuildInfoTrigger == 1) {
			transmitBuildInfoTrigger = 2;
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
     a48:	e5ce3034 	strb	r3, [lr, #52]	; 0x34
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
     a4c:	e1ce13b6 	strh	r1, [lr, #54]	; 0x36
     a50:	eafffed1 	b	59c <HL2LL_write_cycle+0x178>
			transmitPtr++;
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
     a54:	e59fc354 	ldr	ip, [pc, #852]	; db0 <IRQ_Stack_Size+0x5b0>
     a58:	e1dc30b0 	ldrh	r3, [ip]
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a5c:	e59f0348 	ldr	r0, [pc, #840]	; dac <IRQ_Stack_Size+0x5ac>
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
     a60:	e3a02005 	mov	r2, #5
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
     a64:	e1ce33b6 	strh	r3, [lr, #54]	; 0x36
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;
     a68:	e2833001 	add	r3, r3, #1
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
     a6c:	e5ce2034 	strb	r2, [lr, #52]	; 0x34
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;
     a70:	e1a03803 	lsl	r3, r3, #16
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a74:	e5902000 	ldr	r2, [r0]
			transmitPtr++;
			transmitCnt++;
     a78:	e1a03823 	lsr	r3, r3, #16
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a7c:	e4d21001 	ldrb	r1, [r2], #1
			transmitPtr++;
			transmitCnt++;

			if (transmitCnt == sizeof(buildInfo))
     a80:	e3530053 	cmp	r3, #83	; 0x53
		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;
     a84:	e1cc30b0 	strh	r3, [ip]

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
     a88:	02433050 	subeq	r3, r3, #80	; 0x50
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a8c:	e5ce1035 	strb	r1, [lr, #53]	; 0x35
			transmitPtr++;
     a90:	e5802000 	str	r2, [r0]
			transmitCnt++;

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
     a94:	05c43000 	strbeq	r3, [r4]
     a98:	eafffebf 	b	59c <HL2LL_write_cycle+0x178>
				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
					jetiValuePartialSyncPending = 0;
					LL_1khz_control_input.status = PD_JETI_SETSENSOR2;

					LL_1khz_control_input.height
     a9c:	e59fa2b8 	ldr	sl, [pc, #696]	; d5c <IRQ_Stack_Size+0x55c>
     aa0:	e5da3000 	ldrb	r3, [sl]
     aa4:	e59f42b4 	ldr	r4, [pc, #692]	; d60 <IRQ_Stack_Size+0x560>
     aa8:	e0832103 	add	r2, r3, r3, lsl #2
     aac:	e0833082 	add	r3, r3, r2, lsl #1
     ab0:	e7d4c083 	ldrb	ip, [r4, r3, lsl #1]
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
     ab4:	e0841083 	add	r1, r4, r3, lsl #1
				LL_1khz_control_input.status = 0;

				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
					jetiValuePartialSyncPending = 0;
					LL_1khz_control_input.status = PD_JETI_SETSENSOR2;
     ab8:	e3a030a6 	mov	r3, #166	; 0xa6

					LL_1khz_control_input.height
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
     abc:	e281100b 	add	r1, r1, #11
     ac0:	e3a02004 	mov	r2, #4
				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
					jetiValuePartialSyncPending = 0;
					LL_1khz_control_input.status = PD_JETI_SETSENSOR2;

					LL_1khz_control_input.height
     ac4:	e585c01c 	str	ip, [r5, #28]
				LL_1khz_control_input.status = 0;

				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
					jetiValuePartialSyncPending = 0;
					LL_1khz_control_input.status = PD_JETI_SETSENSOR2;
     ac8:	e1c532b4 	strh	r3, [r5, #36]	; 0x24

					LL_1khz_control_input.height
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
     acc:	e2850014 	add	r0, r5, #20
				//default is no command
				LL_1khz_control_input.status = 0;

				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
					jetiValuePartialSyncPending = 0;
     ad0:	e5c69000 	strb	r9, [r6]
					LL_1khz_control_input.status = PD_JETI_SETSENSOR2;

					LL_1khz_control_input.height
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
     ad4:	eb004763 	bl	12868 <__memcpy_from_arm>
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
     ad8:	e5da1000 	ldrb	r1, [sl]
     adc:	e0813101 	add	r3, r1, r1, lsl #2
     ae0:	e0813083 	add	r3, r1, r3, lsl #1
     ae4:	e0844083 	add	r4, r4, r3, lsl #1
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
     ae8:	e2842010 	add	r2, r4, #16
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
     aec:	e5d20003 	ldrb	r0, [r2, #3]
     af0:	e5d23002 	ldrb	r3, [r2, #2]
     af4:	e5d2c004 	ldrb	ip, [r2, #4]
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
     af8:	e2811001 	add	r1, r1, #1
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
     afc:	e5d2e005 	ldrb	lr, [r2, #5]
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
     b00:	e20110ff 	and	r1, r1, #255	; 0xff
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
     b04:	e1833400 	orr	r3, r3, r0, lsl #8

					LL_1khz_control_input.height
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
     b08:	e5d4200f 	ldrb	r2, [r4, #15]
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
     b0c:	e5d40010 	ldrb	r0, [r4, #16]
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
     b10:	e351000f 	cmp	r1, #15
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
     b14:	e5ca1000 	strb	r1, [sl]
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
     b18:	e183380c 	orr	r3, r3, ip, lsl #16
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
					}
					jetiSyncState++;
     b1c:	e59f1204 	ldr	r1, [pc, #516]	; d28 <IRQ_Stack_Size+0x528>
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
     b20:	e1833c0e 	orr	r3, r3, lr, lsl #24
     b24:	e5853018 	str	r3, [r5, #24]
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
					}
					jetiSyncState++;
     b28:	e5d13000 	ldrb	r3, [r1]
     b2c:	e2833001 	add	r3, r3, #1

					LL_1khz_control_input.height
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
     b30:	e1c522b0 	strh	r2, [r5, #32]
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
					}
					jetiSyncState++;
     b34:	e5c13000 	strb	r3, [r1]
					jetiSensorValCnt = 0;
					jetiSensorValUpdateTimeout = 0;
     b38:	e59f2224 	ldr	r2, [pc, #548]	; d64 <IRQ_Stack_Size+0x564>
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
					}
					jetiSyncState++;
					jetiSensorValCnt = 0;
     b3c:	e59f3224 	ldr	r3, [pc, #548]	; d68 <IRQ_Stack_Size+0x568>
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
     b40:	e1c502b2 	strh	r0, [r5, #34]	; 0x22
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
     b44:	05ca9000 	strbeq	r9, [sl]
					}
					jetiSyncState++;
					jetiSensorValCnt = 0;
					jetiSensorValUpdateTimeout = 0;
     b48:	e5c29000 	strb	r9, [r2]
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
					}
					jetiSyncState++;
					jetiSensorValCnt = 0;
     b4c:	e5c39000 	strb	r9, [r3]
     b50:	eafffece 	b	690 <HL2LL_write_cycle+0x26c>
		//check if new command should be send

		if (wpCtrlWpCmdUpdated) {

			if (wpCtrlWpCmd == WP_CMD_SINGLE_WP) {
				if (wpCtrlWpCmdUpdated == 1) {
     b54:	e3520001 	cmp	r2, #1
     b58:	0a00003d 	beq	c54 <IRQ_Stack_Size+0x454>
							>> 16;
					LL_1khz_control_input.direct_motor_control[7] = wpToLL.yaw
							>> 24;

					wpCtrlWpCmdUpdated++;
				} else if (wpCtrlWpCmdUpdated == 2) {
     b5c:	e3520002 	cmp	r2, #2
     b60:	1afffea4 	bne	5f8 <HL2LL_write_cycle+0x1d4>
							= wpToLL.wp_activated;
					LL_1khz_control_input.direct_motor_control[4] = 0;
					LL_1khz_control_input.direct_motor_control[5] = 0;
					LL_1khz_control_input.direct_motor_control[6] = 0;
					LL_1khz_control_input.direct_motor_control[7] = 0;
					wpCtrlWpCmdUpdated = 0;
     b64:	e59f3234 	ldr	r3, [pc, #564]	; da0 <IRQ_Stack_Size+0x5a0>
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.time;
					LL_1khz_control_input.roll = 0; //wpToLL.cam_angle_pitch;
     b68:	e3a0c000 	mov	ip, #0
							>> 24;

					wpCtrlWpCmdUpdated++;
				} else if (wpCtrlWpCmdUpdated == 2) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
     b6c:	e5da2002 	ldrb	r2, [sl, #2]
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.time;
     b70:	e59f123c 	ldr	r1, [pc, #572]	; db4 <IRQ_Stack_Size+0x5b4>
							= wpToLL.wp_activated;
					LL_1khz_control_input.direct_motor_control[4] = 0;
					LL_1khz_control_input.direct_motor_control[5] = 0;
					LL_1khz_control_input.direct_motor_control[6] = 0;
					LL_1khz_control_input.direct_motor_control[7] = 0;
					wpCtrlWpCmdUpdated = 0;
     b74:	e5c3c000 	strb	ip, [r3]
					wpCtrlNavStatus = 0;
     b78:	e59f3238 	ldr	r3, [pc, #568]	; db8 <IRQ_Stack_Size+0x5b8>
							>> 24;

					wpCtrlWpCmdUpdated++;
				} else if (wpCtrlWpCmdUpdated == 2) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
     b7c:	e3822c82 	orr	r2, r2, #33280	; 0x8200
					LL_1khz_control_input.direct_motor_control[0] = 0; //wpToLL.cam_angle_roll;
					LL_1khz_control_input.direct_motor_control[1]
							= wpToLL.max_speed;
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.properties;
					LL_1khz_control_input.direct_motor_control[3]
     b80:	e5915000 	ldr	r5, [r1]
					LL_1khz_control_input.pitch = wpToLL.time;
					LL_1khz_control_input.roll = 0; //wpToLL.cam_angle_pitch;
					LL_1khz_control_input.thrust = wpToLL.pos_acc;
					LL_1khz_control_input.yaw = wpToLL.chksum;
					LL_1khz_control_input.direct_motor_control[0] = 0; //wpToLL.cam_angle_roll;
					LL_1khz_control_input.direct_motor_control[1]
     b84:	e5d1e005 	ldrb	lr, [r1, #5]
							= wpToLL.max_speed;
					LL_1khz_control_input.direct_motor_control[2]
     b88:	e5d14004 	ldrb	r4, [r1, #4]
					LL_1khz_control_input.direct_motor_control[4] = 0;
					LL_1khz_control_input.direct_motor_control[5] = 0;
					LL_1khz_control_input.direct_motor_control[6] = 0;
					LL_1khz_control_input.direct_motor_control[7] = 0;
					wpCtrlWpCmdUpdated = 0;
					wpCtrlNavStatus = 0;
     b8c:	e1c3c0b0 	strh	ip, [r3]
							>> 24;

					wpCtrlWpCmdUpdated++;
				} else if (wpCtrlWpCmdUpdated == 2) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
     b90:	e1ca20b2 	strh	r2, [sl, #2]
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.time;
					LL_1khz_control_input.roll = 0; //wpToLL.cam_angle_pitch;
					LL_1khz_control_input.thrust = wpToLL.pos_acc;
     b94:	e1d130b8 	ldrh	r3, [r1, #8]
				} else if (wpCtrlWpCmdUpdated == 2) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.time;
     b98:	e1d120b6 	ldrh	r2, [r1, #6]
					LL_1khz_control_input.roll = 0; //wpToLL.cam_angle_pitch;
					LL_1khz_control_input.thrust = wpToLL.pos_acc;
					LL_1khz_control_input.yaw = wpToLL.chksum;
     b9c:	e1d110ba 	ldrh	r1, [r1, #10]
					LL_1khz_control_input.direct_motor_control[0] = 0; //wpToLL.cam_angle_roll;
					LL_1khz_control_input.direct_motor_control[1]
     ba0:	e5cae00d 	strb	lr, [sl, #13]
							= wpToLL.max_speed;
					LL_1khz_control_input.direct_motor_control[2]
     ba4:	e5ca400e 	strb	r4, [sl, #14]
							= wpToLL.properties;
					LL_1khz_control_input.direct_motor_control[3]
     ba8:	e5ca500f 	strb	r5, [sl, #15]
							= wpToLL.wp_activated;
					LL_1khz_control_input.direct_motor_control[4] = 0;
					LL_1khz_control_input.direct_motor_control[5] = 0;
					LL_1khz_control_input.direct_motor_control[6] = 0;
					LL_1khz_control_input.direct_motor_control[7] = 0;
     bac:	e5cac013 	strb	ip, [sl, #19]
				} else if (wpCtrlWpCmdUpdated == 2) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.time;
     bb0:	e1ca20b4 	strh	r2, [sl, #4]
					LL_1khz_control_input.roll = 0; //wpToLL.cam_angle_pitch;
     bb4:	e1cac0b6 	strh	ip, [sl, #6]
					LL_1khz_control_input.thrust = wpToLL.pos_acc;
     bb8:	e1ca30ba 	strh	r3, [sl, #10]
					LL_1khz_control_input.yaw = wpToLL.chksum;
     bbc:	e1ca10b8 	strh	r1, [sl, #8]
					LL_1khz_control_input.direct_motor_control[0] = 0; //wpToLL.cam_angle_roll;
     bc0:	e5cac00c 	strb	ip, [sl, #12]
							= wpToLL.max_speed;
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.properties;
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.wp_activated;
					LL_1khz_control_input.direct_motor_control[4] = 0;
     bc4:	e5cac010 	strb	ip, [sl, #16]
					LL_1khz_control_input.direct_motor_control[5] = 0;
     bc8:	e5cac011 	strb	ip, [sl, #17]
					LL_1khz_control_input.direct_motor_control[6] = 0;
     bcc:	e5cac012 	strb	ip, [sl, #18]
     bd0:	eafffe88 	b	5f8 <HL2LL_write_cycle+0x1d4>
						jetiSyncState++;
						break;
					case 2:
						//sync complete sensor fields
						if (jetiValues[jetiSensorCnt].active) {
							LL_1khz_control_input.status = PD_JETI_SETSENSOR;
     bd4:	e3a030a1 	mov	r3, #161	; 0xa1
							LL_1khz_control_input.height
     bd8:	e58bc01c 	str	ip, [fp, #28]
									= jetiValues[jetiSensorCnt].active;
							memcpy(&LL_1khz_control_input.latitude,
     bdc:	e2811001 	add	r1, r1, #1
     be0:	e3a02004 	mov	r2, #4
						jetiSyncState++;
						break;
					case 2:
						//sync complete sensor fields
						if (jetiValues[jetiSensorCnt].active) {
							LL_1khz_control_input.status = PD_JETI_SETSENSOR;
     be4:	e1cb32b4 	strh	r3, [fp, #36]	; 0x24
							LL_1khz_control_input.height
									= jetiValues[jetiSensorCnt].active;
							memcpy(&LL_1khz_control_input.latitude,
     be8:	e59f0150 	ldr	r0, [pc, #336]	; d40 <IRQ_Stack_Size+0x540>
     bec:	eb00471d 	bl	12868 <__memcpy_from_arm>
									&jetiValues[jetiSensorCnt].name[0], 4);
							memcpy(&LL_1khz_control_input.longitude,
     bf0:	e5d51000 	ldrb	r1, [r5]
     bf4:	e0813101 	add	r3, r1, r1, lsl #2
     bf8:	e0811083 	add	r1, r1, r3, lsl #1
     bfc:	e0841081 	add	r1, r4, r1, lsl #1
     c00:	e2811005 	add	r1, r1, #5
     c04:	e3a02004 	mov	r2, #4
     c08:	e59f0138 	ldr	r0, [pc, #312]	; d48 <IRQ_Stack_Size+0x548>
     c0c:	eb004715 	bl	12868 <__memcpy_from_arm>
									&jetiValues[jetiSensorCnt].name[4], 4);
							memcpy(&LL_1khz_control_input.speed_x,
     c10:	e5d51000 	ldrb	r1, [r5]
     c14:	e0813101 	add	r3, r1, r1, lsl #2
     c18:	e0811083 	add	r1, r1, r3, lsl #1
     c1c:	e0841081 	add	r1, r4, r1, lsl #1
     c20:	e3a02002 	mov	r2, #2
     c24:	e2811009 	add	r1, r1, #9
     c28:	e59f011c 	ldr	r0, [pc, #284]	; d4c <IRQ_Stack_Size+0x54c>
     c2c:	eb00470d 	bl	12868 <__memcpy_from_arm>
									&jetiValues[jetiSensorCnt].name[8], 2);
							LL_1khz_control_input.speed_y
     c30:	e5d53000 	ldrb	r3, [r5]
     c34:	e0832103 	add	r2, r3, r3, lsl #2
     c38:	e0833082 	add	r3, r3, r2, lsl #1
     c3c:	e0843083 	add	r3, r4, r3, lsl #1
     c40:	e5d32011 	ldrb	r2, [r3, #17]
									= jetiValues[jetiSensorCnt].decPoint;
							jetiValuePartialSyncPending = 1;
     c44:	e3a03001 	mov	r3, #1
									&jetiValues[jetiSensorCnt].name[0], 4);
							memcpy(&LL_1khz_control_input.longitude,
									&jetiValues[jetiSensorCnt].name[4], 4);
							memcpy(&LL_1khz_control_input.speed_x,
									&jetiValues[jetiSensorCnt].name[8], 2);
							LL_1khz_control_input.speed_y
     c48:	e1cb22b2 	strh	r2, [fp, #34]	; 0x22
									= jetiValues[jetiSensorCnt].decPoint;
							jetiValuePartialSyncPending = 1;
     c4c:	e5c63000 	strb	r3, [r6]
     c50:	eafffe8e 	b	690 <HL2LL_write_cycle+0x26c>
				if (wpCtrlWpCmdUpdated == 1) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
     c54:	e59f3158 	ldr	r3, [pc, #344]	; db4 <IRQ_Stack_Size+0x5b4>
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
					LL_1khz_control_input.direct_motor_control[0]
     c58:	e2830014 	add	r0, r3, #20
     c5c:	e8901001 	ldm	r0, {r0, ip}
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
     c60:	e283500c 	add	r5, r3, #12
     c64:	e8950060 	ldm	r5, {r5, r6}
							= wpToLL.height;
					LL_1khz_control_input.direct_motor_control[1]
							= wpToLL.height >> 8;
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.height >> 16;
					LL_1khz_control_input.direct_motor_control[3]
     c68:	e1a03c4c 	asr	r3, ip, #24
     c6c:	e58d3008 	str	r3, [sp, #8]
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
     c70:	e1a01846 	asr	r1, r6, #16
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.height >> 16;
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
     c74:	e1a03440 	asr	r3, r0, #8
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
     c78:	e58d100c 	str	r1, [sp, #12]
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.height >> 16;
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
     c7c:	e58d3004 	str	r3, [sp, #4]
							>> 8;
					LL_1khz_control_input.direct_motor_control[6] = wpToLL.yaw
							>> 16;
					LL_1khz_control_input.direct_motor_control[7] = wpToLL.yaw
     c80:	e1a01c40 	asr	r1, r0, #24
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
							>> 8;
					LL_1khz_control_input.direct_motor_control[6] = wpToLL.yaw
     c84:	e1a03840 	asr	r3, r0, #16
     c88:	e58d3000 	str	r3, [sp]
		if (wpCtrlWpCmdUpdated) {

			if (wpCtrlWpCmd == WP_CMD_SINGLE_WP) {
				if (wpCtrlWpCmdUpdated == 1) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
     c8c:	e5da2002 	ldrb	r2, [sl, #2]
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
							>> 8;
					LL_1khz_control_input.direct_motor_control[6] = wpToLL.yaw
							>> 16;
					LL_1khz_control_input.direct_motor_control[7] = wpToLL.yaw
     c90:	e5ca1013 	strb	r1, [sl, #19]
							>> 24;

					wpCtrlWpCmdUpdated++;
     c94:	e59f1104 	ldr	r1, [pc, #260]	; da0 <IRQ_Stack_Size+0x5a0>
     c98:	e3a03002 	mov	r3, #2
     c9c:	e5c13000 	strb	r3, [r1]
		if (wpCtrlWpCmdUpdated) {

			if (wpCtrlWpCmd == WP_CMD_SINGLE_WP) {
				if (wpCtrlWpCmdUpdated == 1) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
     ca0:	e3822c81 	orr	r2, r2, #33024	; 0x8100
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
					LL_1khz_control_input.direct_motor_control[0]
							= wpToLL.height;
					LL_1khz_control_input.direct_motor_control[1]
     ca4:	e1a0e44c 	asr	lr, ip, #8
							= wpToLL.height >> 8;
					LL_1khz_control_input.direct_motor_control[2]
     ca8:	e1a0484c 	asr	r4, ip, #16
		if (wpCtrlWpCmdUpdated) {

			if (wpCtrlWpCmd == WP_CMD_SINGLE_WP) {
				if (wpCtrlWpCmdUpdated == 1) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
     cac:	e1ca20b2 	strh	r2, [sl, #2]
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
     cb0:	e59d200c 	ldr	r2, [sp, #12]
					LL_1khz_control_input.direct_motor_control[0]
							= wpToLL.height;
					LL_1khz_control_input.direct_motor_control[1]
     cb4:	e5cae00d 	strb	lr, [sl, #13]
							= wpToLL.height >> 8;
					LL_1khz_control_input.direct_motor_control[2]
     cb8:	e5ca400e 	strb	r4, [sl, #14]
							= wpToLL.height >> 16;
					LL_1khz_control_input.direct_motor_control[3]
     cbc:	e59d3008 	ldr	r3, [sp, #8]
     cc0:	e5ca300f 	strb	r3, [sl, #15]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
     cc4:	e59d1004 	ldr	r1, [sp, #4]
     cc8:	e5ca1011 	strb	r1, [sl, #17]
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
     ccc:	e1ca20b8 	strh	r2, [sl, #8]
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
							>> 8;
					LL_1khz_control_input.direct_motor_control[6] = wpToLL.yaw
     cd0:	e59d2000 	ldr	r2, [sp]
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
     cd4:	e1a07845 	asr	r7, r5, #16
     cd8:	e1ca70b6 	strh	r7, [sl, #6]
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
							>> 8;
					LL_1khz_control_input.direct_motor_control[6] = wpToLL.yaw
     cdc:	e5ca2012 	strb	r2, [sl, #18]
				if (wpCtrlWpCmdUpdated == 1) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
     ce0:	e1ca50b4 	strh	r5, [sl, #4]
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
     ce4:	e1ca60ba 	strh	r6, [sl, #10]
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
					LL_1khz_control_input.direct_motor_control[0]
     ce8:	e5cac00c 	strb	ip, [sl, #12]
							= wpToLL.height >> 8;
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.height >> 16;
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
     cec:	e5ca0010 	strb	r0, [sl, #16]
     cf0:	eafffe40 	b	5f8 <HL2LL_write_cycle+0x1d4>
     cf4:	4000000e 	.word	0x4000000e
     cf8:	40000da8 	.word	0x40000da8
     cfc:	40000da5 	.word	0x40000da5
     d00:	40001bbc 	.word	0x40001bbc
     d04:	40001c84 	.word	0x40001c84
     d08:	40000ea0 	.word	0x40000ea0
     d0c:	40001de0 	.word	0x40001de0
     d10:	40001c10 	.word	0x40001c10
     d14:	40000d8e 	.word	0x40000d8e
     d18:	40000dac 	.word	0x40000dac
     d1c:	40001d30 	.word	0x40001d30
     d20:	40001c78 	.word	0x40001c78
     d24:	40000da4 	.word	0x40000da4
     d28:	40000d9b 	.word	0x40000d9b
     d2c:	40001c68 	.word	0x40001c68
     d30:	40000e9c 	.word	0x40000e9c
     d34:	40001c74 	.word	0x40001c74
     d38:	40000e98 	.word	0x40000e98
     d3c:	4000232e 	.word	0x4000232e
     d40:	40001bd0 	.word	0x40001bd0
     d44:	40002332 	.word	0x40002332
     d48:	40001bd4 	.word	0x40001bd4
     d4c:	40001bdc 	.word	0x40001bdc
     d50:	40002336 	.word	0x40002336
     d54:	40000e50 	.word	0x40000e50
     d58:	40000e51 	.word	0x40000e51
     d5c:	40000d9a 	.word	0x40000d9a
     d60:	400021e4 	.word	0x400021e4
     d64:	40000d98 	.word	0x40000d98
     d68:	40000d99 	.word	0x40000d99
     d6c:	400021c4 	.word	0x400021c4
     d70:	400021c8 	.word	0x400021c8
     d74:	400021cc 	.word	0x400021cc
     d78:	40001bd8 	.word	0x40001bd8
     d7c:	400021d0 	.word	0x400021d0
     d80:	40001bde 	.word	0x40001bde
     d84:	400021d2 	.word	0x400021d2
     d88:	400021d4 	.word	0x400021d4
     d8c:	400021d8 	.word	0x400021d8
     d90:	400021dc 	.word	0x400021dc
     d94:	400021e0 	.word	0x400021e0
     d98:	400021e2 	.word	0x400021e2
     d9c:	40000e52 	.word	0x40000e52
     da0:	40000d87 	.word	0x40000d87
     da4:	40000d86 	.word	0x40000d86
     da8:	40001d31 	.word	0x40001d31
     dac:	40000da0 	.word	0x40000da0
     db0:	40000d9c 	.word	0x40000d9c
     db4:	40001bf4 	.word	0x40001bf4
     db8:	40000d8a 	.word	0x40000d8a

00000dbc <SSP_data_distribution_HL>:

struct WAYPOINT wpToLL;

volatile unsigned char transmitBuildInfoTrigger = 0;

void SSP_data_distribution_HL(void) {
     dbc:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
	unsigned char i;
	unsigned char current_page = LL_1khz_attitude_data.system_flags & 0x03;
     dc0:	e59f630c 	ldr	r6, [pc, #780]	; 10d4 <SSP_data_distribution_HL+0x318>
     dc4:	e1d630b0 	ldrh	r3, [r6]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
     dc8:	e3130008 	tst	r3, #8

volatile unsigned char transmitBuildInfoTrigger = 0;

void SSP_data_distribution_HL(void) {
	unsigned char i;
	unsigned char current_page = LL_1khz_attitude_data.system_flags & 0x03;
     dcc:	e2037003 	and	r7, r3, #3
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;
     dd0:	159f3300 	ldrne	r3, [pc, #768]	; 10d8 <SSP_data_distribution_HL+0x31c>
     dd4:	13a02000 	movne	r2, #0
     dd8:	15832000 	strne	r2, [r3]

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
     ddc:	e1d610b6 	ldrh	r1, [r6, #6]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     de0:	e1d630f2 	ldrsh	r3, [r6, #2]
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
     de4:	e1d620f4 	ldrsh	r2, [r6, #4]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     de8:	e59f52ec 	ldr	r5, [pc, #748]	; 10dc <SSP_data_distribution_HL+0x320>

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
     dec:	e59f42ec 	ldr	r4, [pc, #748]	; 10e0 <SSP_data_distribution_HL+0x324>

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
     df0:	e1d600f8 	ldrsh	r0, [r6, #8]
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
     df4:	e1d6c0fa 	ldrsh	ip, [r6, #10]
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
     df8:	e1d6e0fc 	ldrsh	lr, [r6, #12]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     dfc:	e0833103 	add	r3, r3, r3, lsl #2
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
     e00:	e0822102 	add	r2, r2, r2, lsl #2
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
     e04:	e0811101 	add	r1, r1, r1, lsl #2
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     e08:	e1a03083 	lsl	r3, r3, #1
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
     e0c:	e1a02082 	lsl	r2, r2, #1
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
     e10:	e1a01081 	lsl	r1, r1, #1

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
     e14:	e3570000 	cmp	r7, #0

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
     e18:	e584301c 	str	r3, [r4, #28]
	RO_ALL_Data.angle_roll = IMU_CalcData.angle_roll;
     e1c:	e5842020 	str	r2, [r4, #32]
	RO_ALL_Data.angle_yaw = IMU_CalcData.angle_yaw;
     e20:	e5841024 	str	r1, [r4, #36]	; 0x24

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
     e24:	e5840028 	str	r0, [r4, #40]	; 0x28
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
     e28:	e584c02c 	str	ip, [r4, #44]	; 0x2c
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
     e2c:	e584e030 	str	lr, [r4, #48]	; 0x30
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     e30:	e5853000 	str	r3, [r5]
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
     e34:	e5852004 	str	r2, [r5, #4]
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
     e38:	e5851008 	str	r1, [r5, #8]

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
     e3c:	e585000c 	str	r0, [r5, #12]
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
     e40:	e585c010 	str	ip, [r5, #16]
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
     e44:	e585e014 	str	lr, [r5, #20]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     e48:	e1a08005 	mov	r8, r5

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
     e4c:	e1a0a004 	mov	sl, r4

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
     e50:	1a000026 	bne	ef0 <SSP_data_distribution_HL+0x134>
     e54:	e59f0288 	ldr	r0, [pc, #648]	; 10e4 <SSP_data_distribution_HL+0x328>
     e58:	e1a01004 	mov	r1, r4
     e5c:	e1a02006 	mov	r2, r6
     e60:	e286c008 	add	ip, r6, #8
     e64:	e1a0e006 	mov	lr, r6
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
     e68:	e5d2300e 	ldrb	r3, [r2, #14]
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
     e6c:	e2822001 	add	r2, r2, #1
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
     e70:	e1a03203 	lsl	r3, r3, #4
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
     e74:	e152000c 	cmp	r2, ip
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
     e78:	e1c130bc 	strh	r3, [r1, #12]
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
     e7c:	e0c030b2 	strh	r3, [r0], #2
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
     e80:	e2811002 	add	r1, r1, #2
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
     e84:	1afffff7 	bne	e68 <SSP_data_distribution_HL+0xac>
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
     e88:	e1de32f4 	ldrsh	r3, [lr, #36]	; 0x24
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
     e8c:	e1de22f0 	ldrsh	r2, [lr, #32]
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
     e90:	e1de12f2 	ldrsh	r1, [lr, #34]	; 0x22
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
     e94:	e0833103 	add	r3, r3, r3, lsl #2
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
     e98:	e0822102 	add	r2, r2, r2, lsl #2
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
     e9c:	e0811101 	add	r1, r1, r1, lsl #2
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
     ea0:	e1a03883 	lsl	r3, r3, #17
     ea4:	e1a00823 	lsr	r0, r3, #16
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
     ea8:	e1a02882 	lsl	r2, r2, #17
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
     eac:	e1a01881 	lsl	r1, r1, #17
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
     eb0:	e1a0c822 	lsr	ip, r2, #16
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
     eb4:	e1a01821 	lsr	r1, r1, #16
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
     eb8:	e3500000 	cmp	r0, #0
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
     ebc:	e1c801bc 	strh	r0, [r8, #28]
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
     ec0:	e1c8c1b8 	strh	ip, [r8, #24]
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
     ec4:	e1c811ba 	strh	r1, [r8, #26]
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
     ec8:	1a00003a 	bne	fb8 <SSP_data_distribution_HL+0x1fc>
		RO_ALL_Data.acc_y = IMU_CalcData.acc_y_calib;
		RO_ALL_Data.acc_z = IMU_CalcData.acc_z_calib;

		RO_ALL_Data.fusion_latitude
				= LL_1khz_attitude_data.latitude_best_estimate;
		RO_ALL_Data.fusion_longitude
     ecc:	e2862018 	add	r2, r6, #24
     ed0:	e892000c 	ldm	r2, {r2, r3}
     ed4:	e58a3090 	str	r3, [sl, #144]	; 0x90

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
			SYSTEM_initialized++;

		RO_ALL_Data.acc_x = IMU_CalcData.acc_x_calib;
     ed8:	e1cac3b4 	strh	ip, [sl, #52]	; 0x34
		RO_ALL_Data.acc_y = IMU_CalcData.acc_y_calib;
     edc:	e1ca13b6 	strh	r1, [sl, #54]	; 0x36
		RO_ALL_Data.acc_z = IMU_CalcData.acc_z_calib;
     ee0:	e1ca03b8 	strh	r0, [sl, #56]	; 0x38

		RO_ALL_Data.fusion_latitude
     ee4:	e58a208c 	str	r2, [sl, #140]	; 0x8c
						= LL_1khz_attitude_data.slowDataUpChannelDataShort;
			break;

		}
	}
}
     ee8:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, sl, lr}
     eec:	e12fff1e 	bx	lr
		RO_ALL_Data.fusion_latitude
				= LL_1khz_attitude_data.latitude_best_estimate;
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
     ef0:	e3570001 	cmp	r7, #1
     ef4:	0a000037 	beq	fd8 <SSP_data_distribution_HL+0x21c>
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
     ef8:	e3570002 	cmp	r7, #2
     efc:	1afffff9 	bne	ee8 <SSP_data_distribution_HL+0x12c>
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;
     f00:	e1d634f6 	ldrsh	r3, [r6, #70]	; 0x46
		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
     f04:	e59fc1dc 	ldr	ip, [pc, #476]	; 10e8 <SSP_data_distribution_HL+0x32c>
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;
     f08:	e5853038 	str	r3, [r5, #56]	; 0x38

		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;
     f0c:	e5843044 	str	r3, [r4, #68]	; 0x44

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
     f10:	e1d635b2 	ldrh	r3, [r6, #82]	; 0x52
     f14:	e1c430b0 	strh	r3, [r4]
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
     f18:	e1dc30b0 	ldrh	r3, [ip]
     f1c:	e1c430b6 	strh	r3, [r4, #6]
		RO_ALL_Data.flight_time = HL_Status.flight_time;
     f20:	e1dc30b6 	ldrh	r3, [ip, #6]
     f24:	e1c430b4 	strh	r3, [r4, #4]
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
     f28:	e1dc31b2 	ldrh	r3, [ip, #18]
		RO_ALL_Data.HL_up_time = HL_Status.up_time;

		if (LL_1khz_attitude_data.status2 & 0x01)
     f2c:	e1d625ba 	ldrh	r2, [r6, #90]	; 0x5a
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
		RO_ALL_Data.flight_time = HL_Status.flight_time;
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
     f30:	e1c430b8 	strh	r3, [r4, #8]
		RO_ALL_Data.HL_up_time = HL_Status.up_time;
     f34:	e1dc30b4 	ldrh	r3, [ip, #4]

		if (LL_1khz_attitude_data.status2 & 0x01)
     f38:	e212e001 	ands	lr, r2, #1

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
		RO_ALL_Data.flight_time = HL_Status.flight_time;
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
		RO_ALL_Data.HL_up_time = HL_Status.up_time;
     f3c:	e1c430ba 	strh	r3, [r4, #10]

		if (LL_1khz_attitude_data.status2 & 0x01)
     f40:	e1a02802 	lsl	r2, r2, #16
			RO_ALL_Data.flying = 1;
     f44:	13a03001 	movne	r3, #1
     f48:	15c43002 	strbne	r3, [r4, #2]
		else
			RO_ALL_Data.flying = 0;

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
     f4c:	e1a038c2 	asr	r3, r2, #17
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
     f50:	e1d614f2 	ldrsh	r1, [r6, #66]	; 0x42
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
     f54:	e1d604f4 	ldrsh	r0, [r6, #68]	; 0x44
		else
			RO_ALL_Data.flying = 0;

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
     f58:	e203307f 	and	r3, r3, #127	; 0x7f
     f5c:	e2433001 	sub	r3, r3, #1
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
     f60:	e584103c 	str	r1, [r4, #60]	; 0x3c
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
     f64:	e5840040 	str	r0, [r4, #64]	; 0x40
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
     f68:	e5851030 	str	r1, [r5, #48]	; 0x30
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
     f6c:	e5850034 	str	r0, [r5, #52]	; 0x34
		RO_ALL_Data.HL_up_time = HL_Status.up_time;

		if (LL_1khz_attitude_data.status2 & 0x01)
			RO_ALL_Data.flying = 1;
		else
			RO_ALL_Data.flying = 0;
     f70:	05c4e002 	strbeq	lr, [r4, #2]

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
     f74:	e353000d 	cmp	r3, #13
     f78:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
     f7c:	eaffffd9 	b	ee8 <SSP_data_distribution_HL+0x12c>
     f80:	00001028 	.word	0x00001028
     f84:	00000ee8 	.word	0x00000ee8
     f88:	00000ee8 	.word	0x00000ee8
     f8c:	00000ee8 	.word	0x00000ee8
     f90:	00000ee8 	.word	0x00000ee8
     f94:	00001034 	.word	0x00001034
     f98:	00001044 	.word	0x00001044
     f9c:	00001054 	.word	0x00001054
     fa0:	00000ee8 	.word	0x00000ee8
     fa4:	00000ee8 	.word	0x00000ee8
     fa8:	00000ee8 	.word	0x00000ee8
     fac:	00000ee8 	.word	0x00000ee8
     fb0:	00001064 	.word	0x00001064
     fb4:	00001094 	.word	0x00001094
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
     fb8:	e59f212c 	ldr	r2, [pc, #300]	; 10ec <SSP_data_distribution_HL+0x330>
     fbc:	e5d23000 	ldrb	r3, [r2]
     fc0:	e3530009 	cmp	r3, #9
			SYSTEM_initialized++;
     fc4:	95d23000 	ldrbls	r3, [r2]
     fc8:	92833001 	addls	r3, r3, #1
     fcc:	920330ff 	andls	r3, r3, #255	; 0xff
     fd0:	95c23000 	strbls	r3, [r2]
     fd4:	eaffffbc 	b	ecc <SSP_data_distribution_HL+0x110>
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;
     fd8:	e1d634f0 	ldrsh	r3, [r6, #64]	; 0x40
     fdc:	e5853050 	str	r3, [r5, #80]	; 0x50

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;
     fe0:	e5843088 	str	r3, [r4, #136]	; 0x88

		RO_ALL_Data.fusion_speed_x
     fe4:	e1d633b8 	ldrh	r3, [r6, #56]	; 0x38
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
     fe8:	e596203c 	ldr	r2, [r6, #60]	; 0x3c
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_speed_x
     fec:	e1c439b4 	strh	r3, [r4, #148]	; 0x94
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
     ff0:	e1d633ba 	ldrh	r3, [r6, #58]	; 0x3a
	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
     ff4:	e5842084 	str	r2, [r4, #132]	; 0x84
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
     ff8:	e585204c 	str	r2, [r5, #76]	; 0x4c
		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
     ffc:	e1c439b6 	strh	r3, [r4, #150]	; 0x96
    1000:	e1a00004 	mov	r0, r4
    1004:	e3a01000 	mov	r1, #0
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
    1008:	e0813006 	add	r3, r1, r6
    100c:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
    1010:	e2811001 	add	r1, r1, #1

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
    1014:	e3510006 	cmp	r1, #6
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
    1018:	e5c02048 	strb	r2, [r0, #72]	; 0x48
    101c:	e2800001 	add	r0, r0, #1

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
    1020:	1afffff8 	bne	1008 <SSP_data_distribution_HL+0x24c>
    1024:	eaffffaf 	b	ee8 <SSP_data_distribution_HL+0x12c>
		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
		case SUDC_FLIGHTTIME:

			HL_Status.flight_time
    1028:	e1d665b4 	ldrh	r6, [r6, #84]	; 0x54
    102c:	e1cc60b6 	strh	r6, [ip, #6]
    1030:	eaffffac 	b	ee8 <SSP_data_distribution_HL+0x12c>
					= LL_1khz_attitude_data.slowDataUpChannelDataShort;
			break;
		case SUDC_NAVSTATUS:
			wpCtrlNavStatus = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1034:	e59f30b4 	ldr	r3, [pc, #180]	; 10f0 <SSP_data_distribution_HL+0x334>
    1038:	e1d665b4 	ldrh	r6, [r6, #84]	; 0x54
    103c:	e1c360b0 	strh	r6, [r3]
    1040:	eaffffa8 	b	ee8 <SSP_data_distribution_HL+0x12c>
			break;
		case SUDC_DISTTOWP:
			wpCtrlDistToWp = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1044:	e59f30a8 	ldr	r3, [pc, #168]	; 10f4 <SSP_data_distribution_HL+0x338>
    1048:	e1d665b4 	ldrh	r6, [r6, #84]	; 0x54
    104c:	e1c360b0 	strh	r6, [r3]
    1050:	eaffffa4 	b	ee8 <SSP_data_distribution_HL+0x12c>
			break;
		case SUDC_WPACKTRIGGER:
			wpCtrlAckTrigger = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1054:	e1d625b4 	ldrh	r2, [r6, #84]	; 0x54
    1058:	e59f3098 	ldr	r3, [pc, #152]	; 10f8 <SSP_data_distribution_HL+0x33c>
    105c:	e5c32000 	strb	r2, [r3]
    1060:	eaffffa0 	b	ee8 <SSP_data_distribution_HL+0x12c>
			//if ((LL_1khz_attitude_data.slowDataUpChannelDataShort == OM_HEX)
			//		&& (fireflyLedEnabled == 0))
			//	fireflyLedEnabled = 1;
			break;
		case SUDC_JETIKEYVAL:
			if (oldKey != LL_1khz_attitude_data.slowDataUpChannelDataShort)
    1064:	e59f4090 	ldr	r4, [pc, #144]	; 10fc <SSP_data_distribution_HL+0x340>
    1068:	e1d605b4 	ldrh	r0, [r6, #84]	; 0x54
    106c:	e5d42000 	ldrb	r2, [r4]
    1070:	e1a03800 	lsl	r3, r0, #16
    1074:	e1520843 	cmp	r2, r3, asr #16
    1078:	0a000003 	beq	108c <SSP_data_distribution_HL+0x2d0>
				jetiSetKeyChanged(
    107c:	e20000ff 	and	r0, r0, #255	; 0xff
    1080:	eb0012ab 	bl	5b34 <jetiSetKeyChanged>
    1084:	e59f3048 	ldr	r3, [pc, #72]	; 10d4 <SSP_data_distribution_HL+0x318>
    1088:	e1d305b4 	ldrh	r0, [r3, #84]	; 0x54
						LL_1khz_attitude_data.slowDataUpChannelDataShort);
			oldKey = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    108c:	e5c40000 	strb	r0, [r4]
    1090:	eaffff94 	b	ee8 <SSP_data_distribution_HL+0x12c>
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
    1094:	e59fc064 	ldr	ip, [pc, #100]	; 1100 <SSP_data_distribution_HL+0x344>
    1098:	e5dc3000 	ldrb	r3, [ip]
    109c:	e3530002 	cmp	r3, #2
						!= emergencyMode)
					emergencyModeUpdate = 1;
				else
					emergencyModeUpdate = 0;
			} else
				emergencyMode
    10a0:	11d625b4 	ldrhne	r2, [r6, #84]	; 0x54
    10a4:	159f3058 	ldrne	r3, [pc, #88]	; 1104 <SSP_data_distribution_HL+0x348>
    10a8:	15c32000 	strbne	r2, [r3]
    10ac:	1affff8d 	bne	ee8 <SSP_data_distribution_HL+0x12c>
						LL_1khz_attitude_data.slowDataUpChannelDataShort);
			oldKey = LL_1khz_attitude_data.slowDataUpChannelDataShort;
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
				if (LL_1khz_attitude_data.slowDataUpChannelDataShort
    10b0:	e59f204c 	ldr	r2, [pc, #76]	; 1104 <SSP_data_distribution_HL+0x348>
    10b4:	e1d635f4 	ldrsh	r3, [r6, #84]	; 0x54
    10b8:	e5d21000 	ldrb	r1, [r2]
    10bc:	e1530001 	cmp	r3, r1
						!= emergencyMode)
					emergencyModeUpdate = 1;
    10c0:	13a03001 	movne	r3, #1
				else
					emergencyModeUpdate = 0;
    10c4:	03a03000 	moveq	r3, #0
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
				if (LL_1khz_attitude_data.slowDataUpChannelDataShort
						!= emergencyMode)
					emergencyModeUpdate = 1;
    10c8:	15cc3000 	strbne	r3, [ip]
				else
					emergencyModeUpdate = 0;
    10cc:	05cc3000 	strbeq	r3, [ip]
    10d0:	eaffff84 	b	ee8 <SSP_data_distribution_HL+0x12c>
    10d4:	40001b5c 	.word	0x40001b5c
    10d8:	40000da8 	.word	0x40000da8
    10dc:	40001d84 	.word	0x40001d84
    10e0:	40001c98 	.word	0x40001c98
    10e4:	40001c88 	.word	0x40001c88
    10e8:	40001de0 	.word	0x40001de0
    10ec:	40000e00 	.word	0x40000e00
    10f0:	40000d8a 	.word	0x40000d8a
    10f4:	40000d8c 	.word	0x40000d8c
    10f8:	40000d88 	.word	0x40000d88
    10fc:	40000da6 	.word	0x40000da6
    1100:	40000dac 	.word	0x40000dac
    1104:	40001d30 	.word	0x40001d30

00001108 <SSP_rx_handler_HL>:
	SPIWR_num_bytes = 42;
	data_sent_to_LL = 0;
}

inline void SSP_rx_handler_HL(unsigned char SPI_rxdata) //rx_handler @ high-level processor
{
    1108:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	static volatile unsigned char SPI_rxcount = 0;
	static volatile unsigned char *SPI_rxptr;
	static volatile unsigned char incoming_page;

	//receive handler
	if (SPI_syncstate == 0) {
    110c:	e59f2464 	ldr	r2, [pc, #1124]	; 1578 <SSP_rx_handler_HL+0x470>
    1110:	e5d23000 	ldrb	r3, [r2]
    1114:	e20330ff 	and	r3, r3, #255	; 0xff
    1118:	e3530000 	cmp	r3, #0
	SPIWR_num_bytes = 42;
	data_sent_to_LL = 0;
}

inline void SSP_rx_handler_HL(unsigned char SPI_rxdata) //rx_handler @ high-level processor
{
    111c:	e20000ff 	and	r0, r0, #255	; 0xff
	static volatile unsigned char SPI_rxcount = 0;
	static volatile unsigned char *SPI_rxptr;
	static volatile unsigned char incoming_page;

	//receive handler
	if (SPI_syncstate == 0) {
    1120:	e1a06002 	mov	r6, r2
    1124:	1a000004 	bne	113c <SSP_rx_handler_HL+0x34>
		if (SPI_rxdata == '>')
    1128:	e350003e 	cmp	r0, #62	; 0x3e
    112c:	0a000011 	beq	1178 <SSP_rx_handler_HL+0x70>
			SSP_data_distribution_HL(); //only distribute data to other structs, if it was received correctly
			//ack data receiption
		}
		SPI_syncstate = 0;
	} else
		SPI_syncstate = 0;
    1130:	e5c23000 	strb	r3, [r2]
}
    1134:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    1138:	e12fff1e 	bx	lr
	if (SPI_syncstate == 0) {
		if (SPI_rxdata == '>')
			SPI_syncstate++;
		else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 1) {
    113c:	e5d23000 	ldrb	r3, [r2]
    1140:	e3530001 	cmp	r3, #1
    1144:	0a000010 	beq	118c <SSP_rx_handler_HL+0x84>
			SPI_syncstate++;
			SPI_rxptr = (unsigned char *) &LL_1khz_attitude_data;
			SPI_rxcount = 40;
		} else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 2) {
    1148:	e5d23000 	ldrb	r3, [r2]
    114c:	e3530002 	cmp	r3, #2
    1150:	0a00001c 	beq	11c8 <SSP_rx_handler_HL+0xc0>
		*SPI_rxptr = SPI_rxdata;
		SPI_rxptr++;
		if (SPI_rxcount == 0) {
			SPI_syncstate++;
		}
	} else if (SPI_syncstate == 3) {
    1154:	e5d23000 	ldrb	r3, [r2]
    1158:	e3530003 	cmp	r3, #3
			SSP_data_distribution_HL(); //only distribute data to other structs, if it was received correctly
			//ack data receiption
		}
		SPI_syncstate = 0;
	} else
		SPI_syncstate = 0;
    115c:	13a03000 	movne	r3, #0
		*SPI_rxptr = SPI_rxdata;
		SPI_rxptr++;
		if (SPI_rxcount == 0) {
			SPI_syncstate++;
		}
	} else if (SPI_syncstate == 3) {
    1160:	1afffff2 	bne	1130 <SSP_rx_handler_HL+0x28>
		if (SPI_rxdata == '<') //last byte ok => data should be valid
    1164:	e350003c 	cmp	r0, #60	; 0x3c
    1168:	0a000039 	beq	1254 <SSP_rx_handler_HL+0x14c>
		{
			SSP_data_distribution_HL(); //only distribute data to other structs, if it was received correctly
			//ack data receiption
		}
		SPI_syncstate = 0;
    116c:	e3a03000 	mov	r3, #0
    1170:	e5c63000 	strb	r3, [r6]
    1174:	eaffffee 	b	1134 <SSP_rx_handler_HL+0x2c>
	static volatile unsigned char incoming_page;

	//receive handler
	if (SPI_syncstate == 0) {
		if (SPI_rxdata == '>')
			SPI_syncstate++;
    1178:	e5d23000 	ldrb	r3, [r2]
    117c:	e2833001 	add	r3, r3, #1
    1180:	e20330ff 	and	r3, r3, #255	; 0xff
    1184:	e5c23000 	strb	r3, [r2]
    1188:	eaffffe9 	b	1134 <SSP_rx_handler_HL+0x2c>
		else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 1) {
		if (SPI_rxdata == '*') {
    118c:	e350002a 	cmp	r0, #42	; 0x2a
			SPI_syncstate++;
			SPI_rxptr = (unsigned char *) &LL_1khz_attitude_data;
			SPI_rxcount = 40;
		} else
			SPI_syncstate = 0;
    1190:	13a03000 	movne	r3, #0
    1194:	15c23000 	strbne	r3, [r2]
		if (SPI_rxdata == '>')
			SPI_syncstate++;
		else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 1) {
		if (SPI_rxdata == '*') {
    1198:	1affffe5 	bne	1134 <SSP_rx_handler_HL+0x2c>
			SPI_syncstate++;
    119c:	e5d23000 	ldrb	r3, [r2]
    11a0:	e2833001 	add	r3, r3, #1
    11a4:	e20330ff 	and	r3, r3, #255	; 0xff
    11a8:	e5c23000 	strb	r3, [r2]
			SPI_rxptr = (unsigned char *) &LL_1khz_attitude_data;
    11ac:	e59f33c8 	ldr	r3, [pc, #968]	; 157c <SSP_rx_handler_HL+0x474>
    11b0:	e59f23c8 	ldr	r2, [pc, #968]	; 1580 <SSP_rx_handler_HL+0x478>
    11b4:	e5832000 	str	r2, [r3]
			SPI_rxcount = 40;
    11b8:	e59f33c4 	ldr	r3, [pc, #964]	; 1584 <SSP_rx_handler_HL+0x47c>
    11bc:	e3a01028 	mov	r1, #40	; 0x28
    11c0:	e5c31000 	strb	r1, [r3]
    11c4:	eaffffda 	b	1134 <SSP_rx_handler_HL+0x2c>
		} else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 2) {
		if (SPI_rxcount == 26) //14 bytes transmitted => select 500Hz page
    11c8:	e59fc3b4 	ldr	ip, [pc, #948]	; 1584 <SSP_rx_handler_HL+0x47c>
    11cc:	e5dc3000 	ldrb	r3, [ip]
    11d0:	e353001a 	cmp	r3, #26
    11d4:	0a00000e 	beq	1214 <SSP_rx_handler_HL+0x10c>
    11d8:	e59f139c 	ldr	r1, [pc, #924]	; 157c <SSP_rx_handler_HL+0x474>
			if (incoming_page == 1)
				SPI_rxptr += 26;
			else if (incoming_page == 2)
				SPI_rxptr += 52;
		}
		SPI_rxcount--;
    11dc:	e5dc3000 	ldrb	r3, [ip]
		*SPI_rxptr = SPI_rxdata;
    11e0:	e5912000 	ldr	r2, [r1]
			if (incoming_page == 1)
				SPI_rxptr += 26;
			else if (incoming_page == 2)
				SPI_rxptr += 52;
		}
		SPI_rxcount--;
    11e4:	e2433001 	sub	r3, r3, #1
    11e8:	e20330ff 	and	r3, r3, #255	; 0xff
    11ec:	e5cc3000 	strb	r3, [ip]
		*SPI_rxptr = SPI_rxdata;
    11f0:	e4c20001 	strb	r0, [r2], #1
		SPI_rxptr++;
		if (SPI_rxcount == 0) {
    11f4:	e5dc3000 	ldrb	r3, [ip]
    11f8:	e3530000 	cmp	r3, #0
			else if (incoming_page == 2)
				SPI_rxptr += 52;
		}
		SPI_rxcount--;
		*SPI_rxptr = SPI_rxdata;
		SPI_rxptr++;
    11fc:	e5812000 	str	r2, [r1]
		if (SPI_rxcount == 0) {
			SPI_syncstate++;
    1200:	05d63000 	ldrbeq	r3, [r6]
    1204:	02833001 	addeq	r3, r3, #1
    1208:	020330ff 	andeq	r3, r3, #255	; 0xff
    120c:	05c63000 	strbeq	r3, [r6]
    1210:	eaffffc7 	b	1134 <SSP_rx_handler_HL+0x2c>
		} else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 2) {
		if (SPI_rxcount == 26) //14 bytes transmitted => select 500Hz page
		{
			incoming_page = LL_1khz_attitude_data.system_flags & 0x03; //system flags were already received
    1214:	e59f3364 	ldr	r3, [pc, #868]	; 1580 <SSP_rx_handler_HL+0x478>
    1218:	e1d320b0 	ldrh	r2, [r3]
    121c:	e59f1364 	ldr	r1, [pc, #868]	; 1588 <SSP_rx_handler_HL+0x480>
    1220:	e2022003 	and	r2, r2, #3
    1224:	e5c12000 	strb	r2, [r1]
			if (incoming_page == 1)
    1228:	e5d13000 	ldrb	r3, [r1]
    122c:	e3530001 	cmp	r3, #1
    1230:	0a0000ae 	beq	14f0 <SSP_rx_handler_HL+0x3e8>
				SPI_rxptr += 26;
			else if (incoming_page == 2)
    1234:	e5d13000 	ldrb	r3, [r1]
    1238:	e3530002 	cmp	r3, #2
    123c:	1affffe5 	bne	11d8 <SSP_rx_handler_HL+0xd0>
				SPI_rxptr += 52;
    1240:	e59f1334 	ldr	r1, [pc, #820]	; 157c <SSP_rx_handler_HL+0x474>
    1244:	e5913000 	ldr	r3, [r1]
    1248:	e2833034 	add	r3, r3, #52	; 0x34
    124c:	e5813000 	str	r3, [r1]
    1250:	eaffffe1 	b	11dc <SSP_rx_handler_HL+0xd4>

volatile unsigned char transmitBuildInfoTrigger = 0;

void SSP_data_distribution_HL(void) {
	unsigned char i;
	unsigned char current_page = LL_1khz_attitude_data.system_flags & 0x03;
    1254:	e59f7324 	ldr	r7, [pc, #804]	; 1580 <SSP_rx_handler_HL+0x478>
    1258:	e1d730b0 	ldrh	r3, [r7]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
    125c:	e3130008 	tst	r3, #8

volatile unsigned char transmitBuildInfoTrigger = 0;

void SSP_data_distribution_HL(void) {
	unsigned char i;
	unsigned char current_page = LL_1khz_attitude_data.system_flags & 0x03;
    1260:	e2038003 	and	r8, r3, #3
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;
    1264:	159f3320 	ldrne	r3, [pc, #800]	; 158c <SSP_rx_handler_HL+0x484>
    1268:	13a02000 	movne	r2, #0
    126c:	15832000 	strne	r2, [r3]

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
    1270:	e1d710b6 	ldrh	r1, [r7, #6]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    1274:	e1d730f2 	ldrsh	r3, [r7, #2]
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
    1278:	e1d720f4 	ldrsh	r2, [r7, #4]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    127c:	e59f530c 	ldr	r5, [pc, #780]	; 1590 <SSP_rx_handler_HL+0x488>

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
    1280:	e59f430c 	ldr	r4, [pc, #780]	; 1594 <SSP_rx_handler_HL+0x48c>

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
    1284:	e1d700f8 	ldrsh	r0, [r7, #8]
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
    1288:	e1d7c0fa 	ldrsh	ip, [r7, #10]
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
    128c:	e1d7e0fc 	ldrsh	lr, [r7, #12]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    1290:	e0833103 	add	r3, r3, r3, lsl #2
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
    1294:	e0822102 	add	r2, r2, r2, lsl #2
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
    1298:	e0811101 	add	r1, r1, r1, lsl #2
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    129c:	e1a03083 	lsl	r3, r3, #1
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
    12a0:	e1a02082 	lsl	r2, r2, #1
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
    12a4:	e1a01081 	lsl	r1, r1, #1

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
    12a8:	e3580000 	cmp	r8, #0

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
    12ac:	e584301c 	str	r3, [r4, #28]
	RO_ALL_Data.angle_roll = IMU_CalcData.angle_roll;
    12b0:	e5842020 	str	r2, [r4, #32]
	RO_ALL_Data.angle_yaw = IMU_CalcData.angle_yaw;
    12b4:	e5841024 	str	r1, [r4, #36]	; 0x24

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
    12b8:	e5840028 	str	r0, [r4, #40]	; 0x28
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
    12bc:	e584c02c 	str	ip, [r4, #44]	; 0x2c
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
    12c0:	e584e030 	str	lr, [r4, #48]	; 0x30
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    12c4:	e5853000 	str	r3, [r5]
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
    12c8:	e5852004 	str	r2, [r5, #4]
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
    12cc:	e5851008 	str	r1, [r5, #8]

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
    12d0:	e585000c 	str	r0, [r5, #12]
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
    12d4:	e585c010 	str	ip, [r5, #16]
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
    12d8:	e585e014 	str	lr, [r5, #20]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    12dc:	e1a09005 	mov	r9, r5

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
    12e0:	e1a0a004 	mov	sl, r4

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
    12e4:	1a00002c 	bne	139c <SSP_rx_handler_HL+0x294>
    12e8:	e59f02a8 	ldr	r0, [pc, #680]	; 1598 <SSP_rx_handler_HL+0x490>
    12ec:	e1a01004 	mov	r1, r4
    12f0:	e1a02007 	mov	r2, r7
    12f4:	e287c008 	add	ip, r7, #8
    12f8:	e1a0e007 	mov	lr, r7
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
    12fc:	e5d2300e 	ldrb	r3, [r2, #14]
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
    1300:	e2822001 	add	r2, r2, #1
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
    1304:	e1a03203 	lsl	r3, r3, #4
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
    1308:	e15c0002 	cmp	ip, r2
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
    130c:	e1c130bc 	strh	r3, [r1, #12]
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
    1310:	e0c030b2 	strh	r3, [r0], #2
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
    1314:	e2811002 	add	r1, r1, #2
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
    1318:	1afffff7 	bne	12fc <SSP_rx_handler_HL+0x1f4>
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
    131c:	e1de32f4 	ldrsh	r3, [lr, #36]	; 0x24
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
    1320:	e1de22f0 	ldrsh	r2, [lr, #32]
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
    1324:	e1de12f2 	ldrsh	r1, [lr, #34]	; 0x22
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
    1328:	e0833103 	add	r3, r3, r3, lsl #2
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
    132c:	e0822102 	add	r2, r2, r2, lsl #2
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
    1330:	e0811101 	add	r1, r1, r1, lsl #2
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
    1334:	e1a03883 	lsl	r3, r3, #17
    1338:	e1a00823 	lsr	r0, r3, #16
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
    133c:	e1a02882 	lsl	r2, r2, #17
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
    1340:	e1a01881 	lsl	r1, r1, #17
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
    1344:	e1a0c822 	lsr	ip, r2, #16
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
    1348:	e1a01821 	lsr	r1, r1, #16
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
    134c:	e3500000 	cmp	r0, #0
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
    1350:	e1c901bc 	strh	r0, [r9, #28]
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
    1354:	e1c9c1b8 	strh	ip, [r9, #24]
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
    1358:	e1c911ba 	strh	r1, [r9, #26]
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
    135c:	0a000006 	beq	137c <SSP_rx_handler_HL+0x274>
    1360:	e59f2234 	ldr	r2, [pc, #564]	; 159c <SSP_rx_handler_HL+0x494>
    1364:	e5d23000 	ldrb	r3, [r2]
    1368:	e3530009 	cmp	r3, #9
			SYSTEM_initialized++;
    136c:	95d23000 	ldrbls	r3, [r2]
    1370:	92833001 	addls	r3, r3, #1
    1374:	920330ff 	andls	r3, r3, #255	; 0xff
    1378:	95c23000 	strbls	r3, [r2]
		RO_ALL_Data.acc_y = IMU_CalcData.acc_y_calib;
		RO_ALL_Data.acc_z = IMU_CalcData.acc_z_calib;

		RO_ALL_Data.fusion_latitude
				= LL_1khz_attitude_data.latitude_best_estimate;
		RO_ALL_Data.fusion_longitude
    137c:	e2872018 	add	r2, r7, #24
    1380:	e892000c 	ldm	r2, {r2, r3}
    1384:	e58a3090 	str	r3, [sl, #144]	; 0x90

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
			SYSTEM_initialized++;

		RO_ALL_Data.acc_x = IMU_CalcData.acc_x_calib;
    1388:	e1cac3b4 	strh	ip, [sl, #52]	; 0x34
		RO_ALL_Data.acc_y = IMU_CalcData.acc_y_calib;
    138c:	e1ca13b6 	strh	r1, [sl, #54]	; 0x36
		RO_ALL_Data.acc_z = IMU_CalcData.acc_z_calib;
    1390:	e1ca03b8 	strh	r0, [sl, #56]	; 0x38

		RO_ALL_Data.fusion_latitude
    1394:	e58a208c 	str	r2, [sl, #140]	; 0x8c
    1398:	eaffff73 	b	116c <SSP_rx_handler_HL+0x64>
				= LL_1khz_attitude_data.latitude_best_estimate;
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
    139c:	e3580001 	cmp	r8, #1
    13a0:	0a000057 	beq	1504 <SSP_rx_handler_HL+0x3fc>
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
    13a4:	e3580002 	cmp	r8, #2
    13a8:	1affff6f 	bne	116c <SSP_rx_handler_HL+0x64>
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;
    13ac:	e1d734f6 	ldrsh	r3, [r7, #70]	; 0x46
		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
    13b0:	e59fc1e8 	ldr	ip, [pc, #488]	; 15a0 <SSP_rx_handler_HL+0x498>
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;
    13b4:	e5853038 	str	r3, [r5, #56]	; 0x38

		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;
    13b8:	e5843044 	str	r3, [r4, #68]	; 0x44

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
    13bc:	e1d735b2 	ldrh	r3, [r7, #82]	; 0x52
    13c0:	e1c430b0 	strh	r3, [r4]
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
    13c4:	e1dc30b0 	ldrh	r3, [ip]
    13c8:	e1c430b6 	strh	r3, [r4, #6]
		RO_ALL_Data.flight_time = HL_Status.flight_time;
    13cc:	e1dc30b6 	ldrh	r3, [ip, #6]
    13d0:	e1c430b4 	strh	r3, [r4, #4]
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
    13d4:	e1dc31b2 	ldrh	r3, [ip, #18]
		RO_ALL_Data.HL_up_time = HL_Status.up_time;

		if (LL_1khz_attitude_data.status2 & 0x01)
    13d8:	e1d725ba 	ldrh	r2, [r7, #90]	; 0x5a
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
		RO_ALL_Data.flight_time = HL_Status.flight_time;
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
    13dc:	e1c430b8 	strh	r3, [r4, #8]
		RO_ALL_Data.HL_up_time = HL_Status.up_time;
    13e0:	e1dc30b4 	ldrh	r3, [ip, #4]

		if (LL_1khz_attitude_data.status2 & 0x01)
    13e4:	e212e001 	ands	lr, r2, #1

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
		RO_ALL_Data.flight_time = HL_Status.flight_time;
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
		RO_ALL_Data.HL_up_time = HL_Status.up_time;
    13e8:	e1c430ba 	strh	r3, [r4, #10]

		if (LL_1khz_attitude_data.status2 & 0x01)
    13ec:	e1a02802 	lsl	r2, r2, #16
			RO_ALL_Data.flying = 1;
    13f0:	13a03001 	movne	r3, #1
    13f4:	15c43002 	strbne	r3, [r4, #2]
		else
			RO_ALL_Data.flying = 0;

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
    13f8:	e1a038c2 	asr	r3, r2, #17
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
    13fc:	e1d714f2 	ldrsh	r1, [r7, #66]	; 0x42
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
    1400:	e1d704f4 	ldrsh	r0, [r7, #68]	; 0x44
		else
			RO_ALL_Data.flying = 0;

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
    1404:	e203307f 	and	r3, r3, #127	; 0x7f
    1408:	e2433001 	sub	r3, r3, #1
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
    140c:	e584103c 	str	r1, [r4, #60]	; 0x3c
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
    1410:	e5840040 	str	r0, [r4, #64]	; 0x40
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
    1414:	e5851030 	str	r1, [r5, #48]	; 0x30
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
    1418:	e5850034 	str	r0, [r5, #52]	; 0x34
		RO_ALL_Data.HL_up_time = HL_Status.up_time;

		if (LL_1khz_attitude_data.status2 & 0x01)
			RO_ALL_Data.flying = 1;
		else
			RO_ALL_Data.flying = 0;
    141c:	05c4e002 	strbeq	lr, [r4, #2]

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
    1420:	e353000d 	cmp	r3, #13
    1424:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    1428:	eaffff4f 	b	116c <SSP_rx_handler_HL+0x64>
    142c:	00001464 	.word	0x00001464
    1430:	0000116c 	.word	0x0000116c
    1434:	0000116c 	.word	0x0000116c
    1438:	0000116c 	.word	0x0000116c
    143c:	0000116c 	.word	0x0000116c
    1440:	00001470 	.word	0x00001470
    1444:	00001480 	.word	0x00001480
    1448:	00001490 	.word	0x00001490
    144c:	0000116c 	.word	0x0000116c
    1450:	0000116c 	.word	0x0000116c
    1454:	0000116c 	.word	0x0000116c
    1458:	0000116c 	.word	0x0000116c
    145c:	000014a0 	.word	0x000014a0
    1460:	000014d0 	.word	0x000014d0
		case SUDC_FLIGHTTIME:

			HL_Status.flight_time
    1464:	e1d775b4 	ldrh	r7, [r7, #84]	; 0x54
    1468:	e1cc70b6 	strh	r7, [ip, #6]
    146c:	eaffff3e 	b	116c <SSP_rx_handler_HL+0x64>
					= LL_1khz_attitude_data.slowDataUpChannelDataShort;
			break;
		case SUDC_NAVSTATUS:
			wpCtrlNavStatus = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1470:	e59f312c 	ldr	r3, [pc, #300]	; 15a4 <SSP_rx_handler_HL+0x49c>
    1474:	e1d775b4 	ldrh	r7, [r7, #84]	; 0x54
    1478:	e1c370b0 	strh	r7, [r3]
    147c:	eaffff3a 	b	116c <SSP_rx_handler_HL+0x64>
			break;
		case SUDC_DISTTOWP:
			wpCtrlDistToWp = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1480:	e59f3120 	ldr	r3, [pc, #288]	; 15a8 <SSP_rx_handler_HL+0x4a0>
    1484:	e1d775b4 	ldrh	r7, [r7, #84]	; 0x54
    1488:	e1c370b0 	strh	r7, [r3]
    148c:	eaffff36 	b	116c <SSP_rx_handler_HL+0x64>
			break;
		case SUDC_WPACKTRIGGER:
			wpCtrlAckTrigger = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1490:	e1d725b4 	ldrh	r2, [r7, #84]	; 0x54
    1494:	e59f3110 	ldr	r3, [pc, #272]	; 15ac <SSP_rx_handler_HL+0x4a4>
    1498:	e5c32000 	strb	r2, [r3]
    149c:	eaffff32 	b	116c <SSP_rx_handler_HL+0x64>
			//if ((LL_1khz_attitude_data.slowDataUpChannelDataShort == OM_HEX)
			//		&& (fireflyLedEnabled == 0))
			//	fireflyLedEnabled = 1;
			break;
		case SUDC_JETIKEYVAL:
			if (oldKey != LL_1khz_attitude_data.slowDataUpChannelDataShort)
    14a0:	e59f4108 	ldr	r4, [pc, #264]	; 15b0 <SSP_rx_handler_HL+0x4a8>
    14a4:	e1d705b4 	ldrh	r0, [r7, #84]	; 0x54
    14a8:	e5d42000 	ldrb	r2, [r4]
    14ac:	e1a03800 	lsl	r3, r0, #16
    14b0:	e1520843 	cmp	r2, r3, asr #16
    14b4:	0a000003 	beq	14c8 <SSP_rx_handler_HL+0x3c0>
				jetiSetKeyChanged(
    14b8:	e20000ff 	and	r0, r0, #255	; 0xff
    14bc:	eb00119c 	bl	5b34 <jetiSetKeyChanged>
    14c0:	e59f30b8 	ldr	r3, [pc, #184]	; 1580 <SSP_rx_handler_HL+0x478>
    14c4:	e1d305b4 	ldrh	r0, [r3, #84]	; 0x54
						LL_1khz_attitude_data.slowDataUpChannelDataShort);
			oldKey = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    14c8:	e5c40000 	strb	r0, [r4]
    14cc:	eaffff26 	b	116c <SSP_rx_handler_HL+0x64>
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
    14d0:	e59f00dc 	ldr	r0, [pc, #220]	; 15b4 <SSP_rx_handler_HL+0x4ac>
    14d4:	e5d03000 	ldrb	r3, [r0]
    14d8:	e3530002 	cmp	r3, #2
    14dc:	0a00001c 	beq	1554 <SSP_rx_handler_HL+0x44c>
						!= emergencyMode)
					emergencyModeUpdate = 1;
				else
					emergencyModeUpdate = 0;
			} else
				emergencyMode
    14e0:	e1d725b4 	ldrh	r2, [r7, #84]	; 0x54
    14e4:	e59f30cc 	ldr	r3, [pc, #204]	; 15b8 <SSP_rx_handler_HL+0x4b0>
    14e8:	e5c32000 	strb	r2, [r3]
    14ec:	eaffff1e 	b	116c <SSP_rx_handler_HL+0x64>
	} else if (SPI_syncstate == 2) {
		if (SPI_rxcount == 26) //14 bytes transmitted => select 500Hz page
		{
			incoming_page = LL_1khz_attitude_data.system_flags & 0x03; //system flags were already received
			if (incoming_page == 1)
				SPI_rxptr += 26;
    14f0:	e59f1084 	ldr	r1, [pc, #132]	; 157c <SSP_rx_handler_HL+0x474>
    14f4:	e5913000 	ldr	r3, [r1]
    14f8:	e283301a 	add	r3, r3, #26
    14fc:	e5813000 	str	r3, [r1]
    1500:	eaffff35 	b	11dc <SSP_rx_handler_HL+0xd4>
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;
    1504:	e1d734f0 	ldrsh	r3, [r7, #64]	; 0x40
    1508:	e5853050 	str	r3, [r5, #80]	; 0x50

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;
    150c:	e5843088 	str	r3, [r4, #136]	; 0x88

		RO_ALL_Data.fusion_speed_x
    1510:	e1d733b8 	ldrh	r3, [r7, #56]	; 0x38
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
    1514:	e597203c 	ldr	r2, [r7, #60]	; 0x3c
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_speed_x
    1518:	e1c439b4 	strh	r3, [r4, #148]	; 0x94
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
    151c:	e1d733ba 	ldrh	r3, [r7, #58]	; 0x3a
	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
    1520:	e5842084 	str	r2, [r4, #132]	; 0x84
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
    1524:	e585204c 	str	r2, [r5, #76]	; 0x4c
		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
    1528:	e1c439b6 	strh	r3, [r4, #150]	; 0x96
    152c:	e1a00004 	mov	r0, r4
    1530:	e3a01000 	mov	r1, #0
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
    1534:	e0813007 	add	r3, r1, r7
    1538:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
    153c:	e2811001 	add	r1, r1, #1

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
    1540:	e3510006 	cmp	r1, #6
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
    1544:	e5c02048 	strb	r2, [r0, #72]	; 0x48
    1548:	e2800001 	add	r0, r0, #1

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
    154c:	1afffff8 	bne	1534 <SSP_rx_handler_HL+0x42c>
    1550:	eaffff05 	b	116c <SSP_rx_handler_HL+0x64>
						LL_1khz_attitude_data.slowDataUpChannelDataShort);
			oldKey = LL_1khz_attitude_data.slowDataUpChannelDataShort;
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
				if (LL_1khz_attitude_data.slowDataUpChannelDataShort
    1554:	e59f205c 	ldr	r2, [pc, #92]	; 15b8 <SSP_rx_handler_HL+0x4b0>
    1558:	e1d735f4 	ldrsh	r3, [r7, #84]	; 0x54
    155c:	e5d21000 	ldrb	r1, [r2]
    1560:	e1530001 	cmp	r3, r1
						!= emergencyMode)
					emergencyModeUpdate = 1;
    1564:	13a03001 	movne	r3, #1
				else
					emergencyModeUpdate = 0;
    1568:	03a03000 	moveq	r3, #0
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
				if (LL_1khz_attitude_data.slowDataUpChannelDataShort
						!= emergencyMode)
					emergencyModeUpdate = 1;
    156c:	15c03000 	strbne	r3, [r0]
				else
					emergencyModeUpdate = 0;
    1570:	05c03000 	strbeq	r3, [r0]
    1574:	eafffefc 	b	116c <SSP_rx_handler_HL+0x64>
    1578:	40000d95 	.word	0x40000d95
    157c:	40000d90 	.word	0x40000d90
    1580:	40001b5c 	.word	0x40001b5c
    1584:	40000d94 	.word	0x40000d94
    1588:	40000d8f 	.word	0x40000d8f
    158c:	40000da8 	.word	0x40000da8
    1590:	40001d84 	.word	0x40001d84
    1594:	40001c98 	.word	0x40001c98
    1598:	40001c88 	.word	0x40001c88
    159c:	40000e00 	.word	0x40000e00
    15a0:	40001de0 	.word	0x40001de0
    15a4:	40000d8a 	.word	0x40000d8a
    15a8:	40000d8c 	.word	0x40000d8c
    15ac:	40000d88 	.word	0x40000d88
    15b0:	40000da6 	.word	0x40000da6
    15b4:	40000dac 	.word	0x40000dac
    15b8:	40001d30 	.word	0x40001d30

000015bc <fast_abs>:
inline int fast_abs(int x)
{

	if(x>0) return x; else return (-x);

}
    15bc:	e3500000 	cmp	r0, #0
    15c0:	b2600000 	rsblt	r0, r0, #0
    15c4:	e12fff1e 	bx	lr

000015c8 <fast_sqrt>:

int fast_sqrt(int x)
{
	int l=0,r=0;
	l=x;
	while(fast_abs(l-r)>1){
    15c8:	e0203fc0 	eor	r3, r0, r0, asr #31
    15cc:	e0433fc0 	sub	r3, r3, r0, asr #31
    15d0:	e3530001 	cmp	r3, #1
	if(x>0) return x; else return (-x);

}

int fast_sqrt(int x)
{
    15d4:	e92d4030 	push	{r4, r5, lr}
    15d8:	e1a05000 	mov	r5, r0
	int l=0,r=0;
	l=x;
	while(fast_abs(l-r)>1){
    15dc:	d1a04000 	movle	r4, r0
    15e0:	da00000b 	ble	1614 <fast_sqrt+0x4c>
    15e4:	e1a04000 	mov	r4, r0
		r=x/l;
    15e8:	e1a01004 	mov	r1, r4
    15ec:	e1a00005 	mov	r0, r5
    15f0:	eb00449f 	bl	12874 <____divsi3_from_arm>
		l=(l+r)/2;
    15f4:	e0843000 	add	r3, r4, r0
    15f8:	e0833fa3 	add	r3, r3, r3, lsr #31
    15fc:	e1a040c3 	asr	r4, r3, #1

int fast_sqrt(int x)
{
	int l=0,r=0;
	l=x;
	while(fast_abs(l-r)>1){
    1600:	e0600004 	rsb	r0, r0, r4
    1604:	e3500000 	cmp	r0, #0
    1608:	b2600000 	rsblt	r0, r0, #0
    160c:	e3500001 	cmp	r0, #1
    1610:	cafffff4 	bgt	15e8 <fast_sqrt+0x20>
		r=x/l;
		l=(l+r)/2;
	}
	return(l);
}
    1614:	e1a00004 	mov	r0, r4
    1618:	e8bd4030 	pop	{r4, r5, lr}
    161c:	e12fff1e 	bx	lr

00001620 <xy2latlon>:
struct GPS_DATA gps_data_temp;

unsigned int gpsDataOkTrigger=0;

void xy2latlon(double lat0, double lon0, double X, double Y, double *lat, double *lon)	//X: East, Y: North in m; lat0,lon0: Reference coordinates; lat,lon: current GPS measurement
{
    1620:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
        *lat=lat0+Y/MEAN_EARTH_DIAMETER*360./PI;
    1624:	e59f40f4 	ldr	r4, [pc, #244]	; 1720 <xy2latlon+0x100>
    1628:	e3a06101 	mov	r6, #1073741824	; 0x40000000
struct GPS_DATA gps_data_temp;

unsigned int gpsDataOkTrigger=0;

void xy2latlon(double lat0, double lon0, double X, double Y, double *lat, double *lon)	//X: East, Y: North in m; lat0,lon0: Reference coordinates; lat,lon: current GPS measurement
{
    162c:	e24dd008 	sub	sp, sp, #8
        *lat=lat0+Y/MEAN_EARTH_DIAMETER*360./PI;
    1630:	e3a05101 	mov	r5, #1073741824	; 0x40000000
    1634:	e2866876 	add	r6, r6, #7733248	; 0x760000
    1638:	e28f80d0 	add	r8, pc, #208	; 0xd0
    163c:	e8980300 	ldm	r8, {r8, r9}
struct GPS_DATA gps_data_temp;

unsigned int gpsDataOkTrigger=0;

void xy2latlon(double lat0, double lon0, double X, double Y, double *lat, double *lon)	//X: East, Y: North in m; lat0,lon0: Reference coordinates; lat,lon: current GPS measurement
{
    1640:	e1a0a000 	mov	sl, r0
    1644:	e1a0b001 	mov	fp, r1
    1648:	e88d000c 	stm	sp, {r2, r3}
        *lat=lat0+Y/MEAN_EARTH_DIAMETER*360./PI;
    164c:	e28d0034 	add	r0, sp, #52	; 0x34
    1650:	e8900003 	ldm	r0, {r0, r1}
    1654:	e1a02004 	mov	r2, r4
    1658:	e1a03005 	mov	r3, r5
    165c:	e2866902 	add	r6, r6, #32768	; 0x8000
    1660:	e3a07000 	mov	r7, #0
    1664:	eb002d81 	bl	cc70 <__aeabi_ddiv>
    1668:	e1a02006 	mov	r2, r6
    166c:	e1a03007 	mov	r3, r7
    1670:	eb002cda 	bl	c9e0 <__aeabi_dmul>
    1674:	e1a02008 	mov	r2, r8
    1678:	e1a03009 	mov	r3, r9
    167c:	eb002d7b 	bl	cc70 <__aeabi_ddiv>
    1680:	e1a0200a 	mov	r2, sl
    1684:	e1a0300b 	mov	r3, fp
    1688:	eb002bcb 	bl	c5bc <__adddf3>
    168c:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
    1690:	e8830003 	stm	r3, {r0, r1}
        *lon=lon0+X/MEAN_EARTH_DIAMETER*360./PI/cos(lat0*UMR);
    1694:	e1a02004 	mov	r2, r4
    1698:	e1a03005 	mov	r3, r5
    169c:	e28d002c 	add	r0, sp, #44	; 0x2c
    16a0:	e8900003 	ldm	r0, {r0, r1}
    16a4:	eb002d71 	bl	cc70 <__aeabi_ddiv>
    16a8:	e1a02006 	mov	r2, r6
    16ac:	e1a03007 	mov	r3, r7
    16b0:	eb002cca 	bl	c9e0 <__aeabi_dmul>
    16b4:	e1a02008 	mov	r2, r8
    16b8:	e1a03009 	mov	r3, r9
    16bc:	eb002d6b 	bl	cc70 <__aeabi_ddiv>
    16c0:	e28f2050 	add	r2, pc, #80	; 0x50
    16c4:	e892000c 	ldm	r2, {r2, r3}
    16c8:	e1a04000 	mov	r4, r0
    16cc:	e1a05001 	mov	r5, r1
    16d0:	e1a0000a 	mov	r0, sl
    16d4:	e1a0100b 	mov	r1, fp
    16d8:	eb002cc0 	bl	c9e0 <__aeabi_dmul>
    16dc:	eb004467 	bl	12880 <__cos_from_arm>
    16e0:	e1a02000 	mov	r2, r0
    16e4:	e1a03001 	mov	r3, r1
    16e8:	e1a00004 	mov	r0, r4
    16ec:	e1a01005 	mov	r1, r5
    16f0:	eb002d5e 	bl	cc70 <__aeabi_ddiv>
    16f4:	e89d000c 	ldm	sp, {r2, r3}
    16f8:	eb002baf 	bl	c5bc <__adddf3>
    16fc:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    1700:	e8830003 	stm	r3, {r0, r1}
}
    1704:	e28dd008 	add	sp, sp, #8
    1708:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    170c:	e12fff1e 	bx	lr
    1710:	400921fb 	.word	0x400921fb
    1714:	54442d18 	.word	0x54442d18
    1718:	3f91df46 	.word	0x3f91df46
    171c:	a2529d39 	.word	0xa2529d39
    1720:	416854a6 	.word	0x416854a6

00001724 <SDK_SetEmergencyMode>:
			!= EM_RETURN_AT_MISSION_SUMMIT) && (mode
			!= EM_RETURN_AT_PREDEFINED_HEIGHT))
		return;
	emergencyMode = mode;
	emergencyModeUpdate = 1;
}
    1724:	e12fff1e 	bx	lr

00001728 <SDK_mainloop>:

int errs = 0;
int dmcs = 0;

void SDK_mainloop(void)
{
    1728:	e92d4070 	push	{r4, r5, r6, lr}
	int i;
	char dbgMsg[100];

	//loops++;
	if (loops > 2000)
    172c:	e59f6138 	ldr	r6, [pc, #312]	; 186c <SDK_mainloop+0x144>
    1730:	e5963000 	ldr	r3, [r6]
    1734:	e3530e7d 	cmp	r3, #2000	; 0x7d0

int errs = 0;
int dmcs = 0;

void SDK_mainloop(void)
{
    1738:	e24dd070 	sub	sp, sp, #112	; 0x70
	int i;
	char dbgMsg[100];

	//loops++;
	if (loops > 2000)
    173c:	ca000014 	bgt	1794 <SDK_mainloop+0x6c>
	
		//sendText(dbgMsg);
	}
	
	// Read any characters in the recieve buffer into our RingBuffer
	emptyUART0();
    1740:	eb000615 	bl	2f9c <emptyUART0>

	if ( loadFrame() ) //We have received a valid frame...
    1744:	eb0016c5 	bl	7260 <loadFrame>
    1748:	e3500000 	cmp	r0, #0
    174c:	0a00000d 	beq	1788 <SDK_mainloop+0x60>
	{ 
		switch (frame.command)
    1750:	e59f4118 	ldr	r4, [pc, #280]	; 1870 <SDK_mainloop+0x148>
    1754:	e5d42001 	ldrb	r2, [r4, #1]
    1758:	e35200ca 	cmp	r2, #202	; 0xca
    175c:	0a00001b 	beq	17d0 <SDK_mainloop+0xa8>
    1760:	e35200cb 	cmp	r2, #203	; 0xcb
    1764:	0a00001c 	beq	17dc <SDK_mainloop+0xb4>
    1768:	e35200c9 	cmp	r2, #201	; 0xc9
    176c:	0a000021 	beq	17f8 <SDK_mainloop+0xd0>
			case DEBUGMODE:
				DEBUG_ENABLED = frame.data[0];
				debugMsg("SDK","Debug Enabled."); //Only send if debug is enabled.
			break;
			default: 
				sprintf(dbgMsg, "Unknown Command in Frame: %i", frame.command);
    1770:	e28d400c 	add	r4, sp, #12
    1774:	e1a00004 	mov	r0, r4
    1778:	e59f10f4 	ldr	r1, [pc, #244]	; 1874 <SDK_mainloop+0x14c>
    177c:	eb004442 	bl	1288c <__sprintf_from_arm>
				sendText(dbgMsg);
    1780:	e1a00004 	mov	r0, r4
    1784:	eb0002e9 	bl	2330 <sendText>
			break;
		}
	}
}	
    1788:	e28dd070 	add	sp, sp, #112	; 0x70
    178c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1790:	e12fff1e 	bx	lr

	//loops++;
	if (loops > 2000)
	{
		loops = 0;
		sprintf(dbgMsg,"%i %i,%i,%i,%i:\n\r", dmcs,   
    1794:	e59f10dc 	ldr	r1, [pc, #220]	; 1878 <SDK_mainloop+0x150>
    1798:	e59f30dc 	ldr	r3, [pc, #220]	; 187c <SDK_mainloop+0x154>
    179c:	e5d15003 	ldrb	r5, [r1, #3]
    17a0:	e5d1e001 	ldrb	lr, [r1, #1]
    17a4:	e5d14002 	ldrb	r4, [r1, #2]
    17a8:	e5932000 	ldr	r2, [r3]
	char dbgMsg[100];

	//loops++;
	if (loops > 2000)
	{
		loops = 0;
    17ac:	e3a0c000 	mov	ip, #0
		sprintf(dbgMsg,"%i %i,%i,%i,%i:\n\r", dmcs,   
    17b0:	e5d13000 	ldrb	r3, [r1]
    17b4:	e28d000c 	add	r0, sp, #12
    17b8:	e59f10c0 	ldr	r1, [pc, #192]	; 1880 <SDK_mainloop+0x158>
	char dbgMsg[100];

	//loops++;
	if (loops > 2000)
	{
		loops = 0;
    17bc:	e586c000 	str	ip, [r6]
		sprintf(dbgMsg,"%i %i,%i,%i,%i:\n\r", dmcs,   
    17c0:	e58de000 	str	lr, [sp]
    17c4:	e98d0030 	stmib	sp, {r4, r5}
    17c8:	eb00442f 	bl	1288c <__sprintf_from_arm>
    17cc:	eaffffdb 	b	1740 <SDK_mainloop+0x18>
				HL2LL_write_cycle();
				dmcs++;	
				LED(0,OFF);	
			break;
			case VERSION:
				sendText( QUAD_VERSION );
    17d0:	e59f00ac 	ldr	r0, [pc, #172]	; 1884 <SDK_mainloop+0x15c>
    17d4:	eb0002d5 	bl	2330 <sendText>
    17d8:	eaffffea 	b	1788 <SDK_mainloop+0x60>
				break;
			case DEBUGMODE:
				DEBUG_ENABLED = frame.data[0];
    17dc:	e5d42002 	ldrb	r2, [r4, #2]
    17e0:	e59f30a0 	ldr	r3, [pc, #160]	; 1888 <SDK_mainloop+0x160>
				debugMsg("SDK","Debug Enabled."); //Only send if debug is enabled.
    17e4:	e59f00a0 	ldr	r0, [pc, #160]	; 188c <SDK_mainloop+0x164>
    17e8:	e59f10a0 	ldr	r1, [pc, #160]	; 1890 <SDK_mainloop+0x168>
			break;
			case VERSION:
				sendText( QUAD_VERSION );
				break;
			case DEBUGMODE:
				DEBUG_ENABLED = frame.data[0];
    17ec:	e5c32000 	strb	r2, [r3]
				debugMsg("SDK","Debug Enabled."); //Only send if debug is enabled.
    17f0:	eb0002dc 	bl	2368 <debugMsg>
    17f4:	eaffffe3 	b	1788 <SDK_mainloop+0x60>
	if ( loadFrame() ) //We have received a valid frame...
	{ 
		switch (frame.command)
		{
			case DMC: //Direct Motor Command
				LED(0,ON);
    17f8:	e3a01001 	mov	r1, #1
    17fc:	e3a00000 	mov	r0, #0
    1800:	eb00042c 	bl	28b8 <LED>
				 			  //1: enable control by HL processor

				WO_SDK.disable_motor_onoff_by_stick = 0;

				for (i = 0; i < 4; i++ )
					WO_Direct_Individual_Motor_Control.motor[i] = frame.data[i];
    1804:	e59f206c 	ldr	r2, [pc, #108]	; 1878 <SDK_mainloop+0x150>
	{ 
		switch (frame.command)
		{
			case DMC: //Direct Motor Command
				LED(0,ON);
				WO_SDK.ctrl_mode=0x00;	//0x00: direct individual motor control: individual commands for motors 0..3
    1808:	e59f1084 	ldr	r1, [pc, #132]	; 1894 <SDK_mainloop+0x16c>
				 			  //1: enable control by HL processor

				WO_SDK.disable_motor_onoff_by_stick = 0;

				for (i = 0; i < 4; i++ )
					WO_Direct_Individual_Motor_Control.motor[i] = frame.data[i];
    180c:	e5d45005 	ldrb	r5, [r4, #5]
    1810:	e5d4c003 	ldrb	ip, [r4, #3]
    1814:	e5d4e004 	ldrb	lr, [r4, #4]
    1818:	e5d40002 	ldrb	r0, [r4, #2]
		switch (frame.command)
		{
			case DMC: //Direct Motor Command
				LED(0,ON);
				WO_SDK.ctrl_mode=0x00;	//0x00: direct individual motor control: individual commands for motors 0..3
				WO_SDK.ctrl_enabled = 1;  //0: disable control by HL processor
    181c:	e3a03001 	mov	r3, #1
	{ 
		switch (frame.command)
		{
			case DMC: //Direct Motor Command
				LED(0,ON);
				WO_SDK.ctrl_mode=0x00;	//0x00: direct individual motor control: individual commands for motors 0..3
    1820:	e3a04000 	mov	r4, #0
				WO_SDK.ctrl_enabled = 1;  //0: disable control by HL processor
    1824:	e5c13001 	strb	r3, [r1, #1]
				 			  //1: enable control by HL processor

				WO_SDK.disable_motor_onoff_by_stick = 0;
    1828:	e5c14002 	strb	r4, [r1, #2]

				for (i = 0; i < 4; i++ )
					WO_Direct_Individual_Motor_Control.motor[i] = frame.data[i];
    182c:	e5c2c001 	strb	ip, [r2, #1]
    1830:	e5c2e002 	strb	lr, [r2, #2]
    1834:	e5c25003 	strb	r5, [r2, #3]
				WO_Direct_Individual_Motor_Control.motor[4] = 0;
				WO_Direct_Individual_Motor_Control.motor[5] = 0;
    1838:	e5c24005 	strb	r4, [r2, #5]
	{ 
		switch (frame.command)
		{
			case DMC: //Direct Motor Command
				LED(0,ON);
				WO_SDK.ctrl_mode=0x00;	//0x00: direct individual motor control: individual commands for motors 0..3
    183c:	e5c14000 	strb	r4, [r1]

				WO_SDK.disable_motor_onoff_by_stick = 0;

				for (i = 0; i < 4; i++ )
					WO_Direct_Individual_Motor_Control.motor[i] = frame.data[i];
				WO_Direct_Individual_Motor_Control.motor[4] = 0;
    1840:	e5c24004 	strb	r4, [r2, #4]
				 			  //1: enable control by HL processor

				WO_SDK.disable_motor_onoff_by_stick = 0;

				for (i = 0; i < 4; i++ )
					WO_Direct_Individual_Motor_Control.motor[i] = frame.data[i];
    1844:	e5c20000 	strb	r0, [r2]
				WO_Direct_Individual_Motor_Control.motor[4] = 0;
				WO_Direct_Individual_Motor_Control.motor[5] = 0;
				
				//write data to transmit buffer for immediate transfer to LL processor
				HL2LL_write_cycle();
    1848:	ebfffaf5 	bl	424 <HL2LL_write_cycle>
				dmcs++;	
    184c:	e59f2028 	ldr	r2, [pc, #40]	; 187c <SDK_mainloop+0x154>
    1850:	e5923000 	ldr	r3, [r2]
    1854:	e2833001 	add	r3, r3, #1
				LED(0,OFF);	
    1858:	e1a00004 	mov	r0, r4
    185c:	e1a01004 	mov	r1, r4
				WO_Direct_Individual_Motor_Control.motor[4] = 0;
				WO_Direct_Individual_Motor_Control.motor[5] = 0;
				
				//write data to transmit buffer for immediate transfer to LL processor
				HL2LL_write_cycle();
				dmcs++;	
    1860:	e5823000 	str	r3, [r2]
				LED(0,OFF);	
    1864:	eb000413 	bl	28b8 <LED>
    1868:	eaffffc6 	b	1788 <SDK_mainloop+0x60>
    186c:	40000db0 	.word	0x40000db0
    1870:	4000233c 	.word	0x4000233c
    1874:	00012984 	.word	0x00012984
    1878:	40001c78 	.word	0x40001c78
    187c:	40000dcc 	.word	0x40000dcc
    1880:	00012958 	.word	0x00012958
    1884:	0001296c 	.word	0x0001296c
    1888:	40000de4 	.word	0x40000de4
    188c:	00012970 	.word	0x00012970
    1890:	00012974 	.word	0x00012974
    1894:	40001c84 	.word	0x40001c84

00001898 <buzzer>:


void buzzer(unsigned char offon)
{

	if(offon)	//beeper on
    1898:	e31000ff 	tst	r0, #255	; 0xff
	{
		IOSET1 = (1<<17);
	}
	else
	{
		IOCLR1 = (1<<17);
    189c:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
void buzzer(unsigned char offon)
{

	if(offon)	//beeper on
	{
		IOSET1 = (1<<17);
    18a0:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
	}
	else
	{
		IOCLR1 = (1<<17);
    18a4:	e281190a 	add	r1, r1, #163840	; 0x28000
void buzzer(unsigned char offon)
{

	if(offon)	//beeper on
	{
		IOSET1 = (1<<17);
    18a8:	e282290a 	add	r2, r2, #163840	; 0x28000
    18ac:	13a03802 	movne	r3, #131072	; 0x20000
	}
	else
	{
		IOCLR1 = (1<<17);
    18b0:	03a03802 	moveq	r3, #131072	; 0x20000
void buzzer(unsigned char offon)
{

	if(offon)	//beeper on
	{
		IOSET1 = (1<<17);
    18b4:	15823014 	strne	r3, [r2, #20]
	}
	else
	{
		IOCLR1 = (1<<17);
    18b8:	0581301c 	streq	r3, [r1, #28]
    18bc:	e12fff1e 	bx	lr

000018c0 <buzzer_handler>:
unsigned char buzzer_warnings=BUZZER_WARNING_INIT_BEEP|BUZZER_WARNING_GPS_BEEP;
unsigned short ALARM_battery_warning_voltage_high=10600;
unsigned short ALARM_battery_warning_voltage_low=10100;

void buzzer_handler(unsigned int vbat)	//needs to be triggered at 100 Hz
{
    18c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	static char bat_warning_enabled=0;

	unsigned char i;


	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;
    18c4:	e59f6574 	ldr	r6, [pc, #1396]	; 1e40 <buzzer_handler+0x580>
    18c8:	e1d630b0 	ldrh	r3, [r6]
    18cc:	e2833001 	add	r3, r3, #1

	//battery warning
	if(++bat_cnt==100){
    18d0:	e59f456c 	ldr	r4, [pc, #1388]	; 1e44 <buzzer_handler+0x584>
	static char bat_warning_enabled=0;

	unsigned char i;


	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;
    18d4:	e1a03803 	lsl	r3, r3, #16
    18d8:	e1a03823 	lsr	r3, r3, #16
    18dc:	e35300c7 	cmp	r3, #199	; 0xc7
    18e0:	e1c630b0 	strh	r3, [r6]

	//battery warning
	if(++bat_cnt==100){
    18e4:	e5943000 	ldr	r3, [r4]
	static char bat_warning_enabled=0;

	unsigned char i;


	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;
    18e8:	83a02000 	movhi	r2, #0

	//battery warning
	if(++bat_cnt==100){
    18ec:	e2833001 	add	r3, r3, #1
	static char bat_warning_enabled=0;

	unsigned char i;


	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;
    18f0:	81c620b0 	strhhi	r2, [r6]

	//battery warning
	if(++bat_cnt==100){
    18f4:	e3530064 	cmp	r3, #100	; 0x64
unsigned char buzzer_warnings=BUZZER_WARNING_INIT_BEEP|BUZZER_WARNING_GPS_BEEP;
unsigned short ALARM_battery_warning_voltage_high=10600;
unsigned short ALARM_battery_warning_voltage_low=10100;

void buzzer_handler(unsigned int vbat)	//needs to be triggered at 100 Hz
{
    18f8:	e1a0e000 	mov	lr, r0


	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;

	//battery warning
	if(++bat_cnt==100){
    18fc:	e5843000 	str	r3, [r4]
    1900:	159f5540 	ldrne	r5, [pc, #1344]	; 1e48 <buzzer_handler+0x588>
    1904:	159fc540 	ldrne	ip, [pc, #1344]	; 1e4c <buzzer_handler+0x58c>
    1908:	0a00012f 	beq	1dcc <buzzer_handler+0x50c>
		bat_cnt=0;
		bat_div=(ALARM_battery_warning_voltage_high-ALARM_battery_warning_voltage_low)/100;
	}
	if(vbat<ALARM_battery_warning_voltage_low) vbat=ALARM_battery_warning_voltage_low;
    190c:	e1dc10b0 	ldrh	r1, [ip]

	if(vbat<ALARM_battery_warning_voltage_high)	//decide if it's really an empty battery
    1910:	e1d530b0 	ldrh	r3, [r5]
	//battery warning
	if(++bat_cnt==100){
		bat_cnt=0;
		bat_div=(ALARM_battery_warning_voltage_high-ALARM_battery_warning_voltage_low)/100;
	}
	if(vbat<ALARM_battery_warning_voltage_low) vbat=ALARM_battery_warning_voltage_low;
    1914:	e151000e 	cmp	r1, lr
    1918:	21a00001 	movcs	r0, r1
    191c:	31a0000e 	movcc	r0, lr

	if(vbat<ALARM_battery_warning_voltage_high)	//decide if it's really an empty battery
    1920:	e1500003 	cmp	r0, r3
    1924:	2a00006b 	bcs	1ad8 <buzzer_handler+0x218>
	{
		if(bat_warning<ControllerCyclesPerSecond/5) bat_warning++;
    1928:	e59f2520 	ldr	r2, [pc, #1312]	; 1e50 <buzzer_handler+0x590>
    192c:	e5923000 	ldr	r3, [r2]
    1930:	e35300c7 	cmp	r3, #199	; 0xc7
		else bat_warning_enabled=1;
    1934:	c59f3518 	ldrgt	r3, [pc, #1304]	; 1e54 <buzzer_handler+0x594>
	}
	if(vbat<ALARM_battery_warning_voltage_low) vbat=ALARM_battery_warning_voltage_low;

	if(vbat<ALARM_battery_warning_voltage_high)	//decide if it's really an empty battery
	{
		if(bat_warning<ControllerCyclesPerSecond/5) bat_warning++;
    1938:	d2833001 	addle	r3, r3, #1
		else bat_warning_enabled=1;
    193c:	c3a02001 	movgt	r2, #1
	}
	if(vbat<ALARM_battery_warning_voltage_low) vbat=ALARM_battery_warning_voltage_low;

	if(vbat<ALARM_battery_warning_voltage_high)	//decide if it's really an empty battery
	{
		if(bat_warning<ControllerCyclesPerSecond/5) bat_warning++;
    1940:	d5823000 	strle	r3, [r2]
		else bat_warning_enabled=1;
    1944:	c5c32000 	strbgt	r2, [r3]
	}
	if(vbat<ALARM_battery_warning_voltage_low) vbat=ALARM_battery_warning_voltage_low;

	if(vbat<ALARM_battery_warning_voltage_high)	//decide if it's really an empty battery
	{
		if(bat_warning<ControllerCyclesPerSecond/5) bat_warning++;
    1948:	da000068 	ble	1af0 <buzzer_handler+0x230>
			buz_active&=~BU_BATTERY;
		}
	}
	if(bat_warning_enabled)
	{
		if(bat_cnt>((vbat-ALARM_battery_warning_voltage_low)/bat_div)) buz_active|=BU_BATTERY; //Beeper on
    194c:	e59f3504 	ldr	r3, [pc, #1284]	; 1e58 <buzzer_handler+0x598>
    1950:	e0610000 	rsb	r0, r1, r0
    1954:	e5931000 	ldr	r1, [r3]
    1958:	eb0043ce 	bl	12898 <____udivsi3_from_arm>
    195c:	e5943000 	ldr	r3, [r4]
    1960:	e1530000 	cmp	r3, r0
    1964:	83a01010 	movhi	r1, #16
    1968:	81a00001 	movhi	r0, r1
    196c:	93a01000 	movls	r1, #0
    1970:	93a00010 	movls	r0, #16
	{
		buz_active&=~BU_BATTERY;
		buz_priority&=~BU_BATTERY;
	}

	if(buzzer_warnings&BUZZER_WARNING_GPS_BEEP)
    1974:	e59f34e0 	ldr	r3, [pc, #1248]	; 1e5c <buzzer_handler+0x59c>
    1978:	e5d37000 	ldrb	r7, [r3]
    197c:	e3170002 	tst	r7, #2
    1980:	059f24d8 	ldreq	r2, [pc, #1240]	; 1e60 <buzzer_handler+0x5a0>
    1984:	0a000009 	beq	19b0 <buzzer_handler+0xf0>
	{
		if(((GPS_Data.status&0xFF)!=3)&&(LL_1khz_attitude_data.RC_data[5]>200))	//no lock and in GPS mode
    1988:	e59f34d4 	ldr	r3, [pc, #1236]	; 1e64 <buzzer_handler+0x5a4>
    198c:	e5d32028 	ldrb	r2, [r3, #40]	; 0x28
    1990:	e3520003 	cmp	r2, #3
    1994:	0a000120 	beq	1e1c <buzzer_handler+0x55c>
    1998:	e59f24c0 	ldr	r2, [pc, #1216]	; 1e60 <buzzer_handler+0x5a0>
    199c:	e5d23013 	ldrb	r3, [r2, #19]
    19a0:	e35300c8 	cmp	r3, #200	; 0xc8
    19a4:	8a000116 	bhi	1e04 <buzzer_handler+0x544>
			if(buz_cnt<5) buz_active|=BU_GPS_BEEP;
			else buz_active&=~BU_GPS_BEEP;
		}
		else
		{
			buz_active&=~BU_GPS_BEEP;
    19a8:	e3c11c01 	bic	r1, r1, #256	; 0x100
			buz_priority&=~BU_GPS_BEEP;
    19ac:	e3c00c01 	bic	r0, r0, #256	; 0x100
		}
	}

	//gyro error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_GYROS)&&(SYSTEM_initialized))
    19b0:	e1d235b2 	ldrh	r3, [r2, #82]	; 0x52
    19b4:	e1a04803 	lsl	r4, r3, #16
    19b8:	e1a0c824 	lsr	ip, r4, #16
    19bc:	e31c0c02 	tst	ip, #512	; 0x200
    19c0:	0a000003 	beq	19d4 <buzzer_handler+0x114>
    19c4:	e59f349c 	ldr	r3, [pc, #1180]	; 1e68 <buzzer_handler+0x5a8>
    19c8:	e5d32000 	ldrb	r2, [r3]
    19cc:	e3520000 	cmp	r2, #0
    19d0:	1a00009a 	bne	1c40 <buzzer_handler+0x380>
		else if(buz_cnt<165) buz_active|=BU_ERROR_GYRO;
		else buz_active&=~BU_ERROR_GYRO;
	}
	else
	{
		buz_priority&=~BU_ERROR_GYRO;
    19d4:	e3c00002 	bic	r0, r0, #2
		buz_active&=~BU_ERROR_GYRO;
    19d8:	e3c11002 	bic	r1, r1, #2
	}

	//ACC error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_ACC)&&(SYSTEM_initialized))
    19dc:	e31c0b01 	tst	ip, #1024	; 0x400
    19e0:	0a000003 	beq	19f4 <buzzer_handler+0x134>
    19e4:	e59f347c 	ldr	r3, [pc, #1148]	; 1e68 <buzzer_handler+0x5a8>
    19e8:	e5d32000 	ldrb	r2, [r3]
    19ec:	e3520000 	cmp	r2, #0
    19f0:	1a000084 	bne	1c08 <buzzer_handler+0x348>
		else if(buz_cnt<165) buz_active|=BU_ERROR_ACC;
		else buz_active&=~BU_ERROR_ACC;
	}
	else
	{
		buz_priority&=~BU_ERROR_ACC;
    19f4:	e3c00004 	bic	r0, r0, #4
		buz_active&=~BU_ERROR_ACC;
    19f8:	e3c11004 	bic	r1, r1, #4
	}

	//ADC error
	if((LL_1khz_attitude_data.flightMode&FM_ADC_STARTUP_ERROR)&&(SYSTEM_initialized))
    19fc:	e31c0b02 	tst	ip, #2048	; 0x800
    1a00:	0a000003 	beq	1a14 <buzzer_handler+0x154>
    1a04:	e59f345c 	ldr	r3, [pc, #1116]	; 1e68 <buzzer_handler+0x5a8>
    1a08:	e5d32000 	ldrb	r2, [r3]
    1a0c:	e3520000 	cmp	r2, #0
    1a10:	1a00006a 	bne	1bc0 <buzzer_handler+0x300>
		else if(buz_cnt<165) buz_active|=BU_ERROR_ADC;
		else buz_active&=~BU_ERROR_ADC;
	}
	else
	{
		buz_priority&=~BU_ERROR_ADC;
    1a14:	e3c0e008 	bic	lr, r0, #8
		buz_active&=~BU_ERROR_ADC;
    1a18:	e3c10008 	bic	r0, r1, #8
	}

	//compass failure: warn 3 seconds only
	if((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE)&&(SYSTEM_initialized)&&(error_cnt_compass++<400))
    1a1c:	e31c0010 	tst	ip, #16
    1a20:	0a000003 	beq	1a34 <buzzer_handler+0x174>
    1a24:	e59f343c 	ldr	r3, [pc, #1084]	; 1e68 <buzzer_handler+0x5a8>
    1a28:	e5d32000 	ldrb	r2, [r3]
    1a2c:	e3520000 	cmp	r2, #0
    1a30:	1a00003e 	bne	1b30 <buzzer_handler+0x270>
		else if(buz_cnt%100<50) buz_active&=~BU_COMPASS_FAILURE;
		else buz_active&=~BU_COMPASS_FAILURE;
	}
	else
	{
		buz_priority&=~BU_COMPASS_FAILURE;
    1a34:	e3cee020 	bic	lr, lr, #32
		buz_active&=~BU_COMPASS_FAILURE;
    1a38:	e3c00020 	bic	r0, r0, #32
	}

	//mag fieldstrength warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_FIELD_STRENGTH_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_fs++<400))
    1a3c:	e31c0901 	tst	ip, #16384	; 0x4000
    1a40:	0a000003 	beq	1a54 <buzzer_handler+0x194>
    1a44:	e59f341c 	ldr	r3, [pc, #1052]	; 1e68 <buzzer_handler+0x5a8>
    1a48:	e5d32000 	ldrb	r2, [r3]
    1a4c:	e3520000 	cmp	r2, #0
    1a50:	1a000084 	bne	1c68 <buzzer_handler+0x3a8>
		else if(buz_cnt%100<30) buz_active&=~BU_WARNING_MAG_FS;
		else buz_active&=~BU_WARNING_MAG_FS;
	}
	else
	{
		buz_priority&=~BU_WARNING_MAG_FS;
    1a54:	e3cec040 	bic	ip, lr, #64	; 0x40
		buz_active&=~BU_WARNING_MAG_FS;
    1a58:	e3c00040 	bic	r0, r0, #64	; 0x40
	}

	//mag inclination warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_INCLINATION_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_inc++<400))
    1a5c:	e3540000 	cmp	r4, #0
    1a60:	ba0000b5 	blt	1d3c <buzzer_handler+0x47c>
		else if(buz_cnt%100<40) buz_active&=~BU_WARNING_MAG_INC;
		else buz_active&=~BU_WARNING_MAG_INC;
	}
	else
	{
		buz_priority&=~BU_WARNING_MAG_INC;
    1a64:	e3cc5080 	bic	r5, ip, #128	; 0x80
		buz_active&=~BU_WARNING_MAG_INC;
    1a68:	e3c04080 	bic	r4, r0, #128	; 0x80
	}

	if(buzzer_warnings&BUZZER_WARNING_INIT_BEEP)
    1a6c:	e3170001 	tst	r7, #1
    1a70:	0a000006 	beq	1a90 <buzzer_handler+0x1d0>
	{
		if(!SYSTEM_initialized)
    1a74:	e59f33ec 	ldr	r3, [pc, #1004]	; 1e68 <buzzer_handler+0x5a8>
    1a78:	e5d32000 	ldrb	r2, [r3]
    1a7c:	e20200ff 	and	r0, r2, #255	; 0xff
    1a80:	e3500000 	cmp	r0, #0

#endif
		}
		else
		{
			buz_active&=~BU_INIT;
    1a84:	13c44001 	bicne	r4, r4, #1
			buz_priority&=~BU_INIT;
    1a88:	13c55001 	bicne	r5, r5, #1
		buz_active&=~BU_WARNING_MAG_INC;
	}

	if(buzzer_warnings&BUZZER_WARNING_INIT_BEEP)
	{
		if(!SYSTEM_initialized)
    1a8c:	0a000091 	beq	1cd8 <buzzer_handler+0x418>
#endif
		}
		else
		{
			buz_active&=~BU_INIT;
			buz_priority&=~BU_INIT;
    1a90:	e3a02000 	mov	r2, #0
    1a94:	e3a01001 	mov	r1, #1
	}

	//buzzer control
	for(i=0;i<BUZZ_NR_OF_WARNINGS; i++)
	{
		if(buz_priority&(1<<i))
    1a98:	e1a03211 	lsl	r3, r1, r2
    1a9c:	e1150003 	tst	r5, r3
		{
			buz_active&=(1<<i);
    1aa0:	e2822001 	add	r2, r2, #1
	}

	//buzzer control
	for(i=0;i<BUZZ_NR_OF_WARNINGS; i++)
	{
		if(buz_priority&(1<<i))
    1aa4:	1a000005 	bne	1ac0 <buzzer_handler+0x200>
			buz_priority&=~BU_INIT;
		}
	}

	//buzzer control
	for(i=0;i<BUZZ_NR_OF_WARNINGS; i++)
    1aa8:	e3520009 	cmp	r2, #9
    1aac:	0a000004 	beq	1ac4 <buzzer_handler+0x204>
	{
		if(buz_priority&(1<<i))
    1ab0:	e1a03211 	lsl	r3, r1, r2
    1ab4:	e1150003 	tst	r5, r3
		{
			buz_active&=(1<<i);
    1ab8:	e2822001 	add	r2, r2, #1
	}

	//buzzer control
	for(i=0;i<BUZZ_NR_OF_WARNINGS; i++)
	{
		if(buz_priority&(1<<i))
    1abc:	0afffff9 	beq	1aa8 <buzzer_handler+0x1e8>
		{
			buz_active&=(1<<i);
    1ac0:	e0044003 	and	r4, r4, r3
			i=BUZZ_NR_OF_WARNINGS;
		}
	}

	if(buz_active) buzzer(ON);
    1ac4:	e3540000 	cmp	r4, #0
    1ac8:	0a00000f 	beq	1b0c <buzzer_handler+0x24c>
    1acc:	e3a00001 	mov	r0, #1
	else buzzer(OFF);
}
    1ad0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
			buz_active&=(1<<i);
			i=BUZZ_NR_OF_WARNINGS;
		}
	}

	if(buz_active) buzzer(ON);
    1ad4:	eaffff6f 	b	1898 <buzzer>
		if(bat_warning<ControllerCyclesPerSecond/5) bat_warning++;
		else bat_warning_enabled=1;
	}
	else
	{
		if(bat_warning>10) bat_warning-=2;
    1ad8:	e59f2370 	ldr	r2, [pc, #880]	; 1e50 <buzzer_handler+0x590>
    1adc:	e5923000 	ldr	r3, [r2]
    1ae0:	e353000a 	cmp	r3, #10
    1ae4:	c2433002 	subgt	r3, r3, #2
    1ae8:	c5823000 	strgt	r3, [r2]
    1aec:	da000009 	ble	1b18 <buzzer_handler+0x258>
		{
			bat_warning_enabled=0;
			buz_active&=~BU_BATTERY;
		}
	}
	if(bat_warning_enabled)
    1af0:	e59f335c 	ldr	r3, [pc, #860]	; 1e54 <buzzer_handler+0x594>
    1af4:	e5d32000 	ldrb	r2, [r3]
    1af8:	e3520000 	cmp	r2, #0
    1afc:	01a01002 	moveq	r1, r2
    1b00:	01a00001 	moveq	r0, r1
    1b04:	0affff9a 	beq	1974 <buzzer_handler+0xb4>
    1b08:	eaffff8f 	b	194c <buzzer_handler+0x8c>
			i=BUZZ_NR_OF_WARNINGS;
		}
	}

	if(buz_active) buzzer(ON);
	else buzzer(OFF);
    1b0c:	e1a00004 	mov	r0, r4
}
    1b10:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
			i=BUZZ_NR_OF_WARNINGS;
		}
	}

	if(buz_active) buzzer(ON);
	else buzzer(OFF);
    1b14:	eaffff5f 	b	1898 <buzzer>
	else
	{
		if(bat_warning>10) bat_warning-=2;
		else
		{
			bat_warning_enabled=0;
    1b18:	e3a02000 	mov	r2, #0
    1b1c:	e59f3330 	ldr	r3, [pc, #816]	; 1e54 <buzzer_handler+0x594>
    1b20:	e1a01002 	mov	r1, r2
    1b24:	e1a00002 	mov	r0, r2
    1b28:	e5c32000 	strb	r2, [r3]
    1b2c:	eaffff90 	b	1974 <buzzer_handler+0xb4>
		buz_priority&=~BU_ERROR_ADC;
		buz_active&=~BU_ERROR_ADC;
	}

	//compass failure: warn 3 seconds only
	if((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE)&&(SYSTEM_initialized)&&(error_cnt_compass++<400))
    1b30:	e59f2334 	ldr	r2, [pc, #820]	; 1e6c <buzzer_handler+0x5ac>
    1b34:	e1d230b0 	ldrh	r3, [r2]
    1b38:	e3530e19 	cmp	r3, #400	; 0x190
    1b3c:	e2833001 	add	r3, r3, #1
    1b40:	e1c230b0 	strh	r3, [r2]
    1b44:	2affffba 	bcs	1a34 <buzzer_handler+0x174>
	{
		buz_priority|=BU_COMPASS_FAILURE;
		if(buz_cnt%100<5) buz_active|=BU_COMPASS_FAILURE;
    1b48:	e1d610b0 	ldrh	r1, [r6]
    1b4c:	e59f231c 	ldr	r2, [pc, #796]	; 1e70 <buzzer_handler+0x5b0>
    1b50:	e0835192 	umull	r5, r3, r2, r1
    1b54:	e1a032a3 	lsr	r3, r3, #5
    1b58:	e0833103 	add	r3, r3, r3, lsl #2
    1b5c:	e0833103 	add	r3, r3, r3, lsl #2
    1b60:	e0411103 	sub	r1, r1, r3, lsl #2
    1b64:	e1a01801 	lsl	r1, r1, #16
    1b68:	e1a01821 	lsr	r1, r1, #16
    1b6c:	e3510004 	cmp	r1, #4
	}

	//compass failure: warn 3 seconds only
	if((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE)&&(SYSTEM_initialized)&&(error_cnt_compass++<400))
	{
		buz_priority|=BU_COMPASS_FAILURE;
    1b70:	e38ee020 	orr	lr, lr, #32
		if(buz_cnt%100<5) buz_active|=BU_COMPASS_FAILURE;
    1b74:	9a00000f 	bls	1bb8 <buzzer_handler+0x2f8>
		else if(buz_cnt%100<10) buz_active&=~BU_COMPASS_FAILURE;
    1b78:	e3510009 	cmp	r1, #9
    1b7c:	9affffad 	bls	1a38 <buzzer_handler+0x178>
		else if(buz_cnt%100<15) buz_active|=BU_COMPASS_FAILURE;
    1b80:	e351000e 	cmp	r1, #14
    1b84:	9a00000b 	bls	1bb8 <buzzer_handler+0x2f8>
		else if(buz_cnt%100<20) buz_active&=~BU_COMPASS_FAILURE;
    1b88:	e3510013 	cmp	r1, #19
    1b8c:	9affffa9 	bls	1a38 <buzzer_handler+0x178>
		else if(buz_cnt%100<25) buz_active|=BU_COMPASS_FAILURE;
    1b90:	e3510018 	cmp	r1, #24
    1b94:	9a000007 	bls	1bb8 <buzzer_handler+0x2f8>
		else if(buz_cnt%100<30) buz_active&=~BU_COMPASS_FAILURE;
    1b98:	e351001d 	cmp	r1, #29
    1b9c:	9affffa5 	bls	1a38 <buzzer_handler+0x178>
		else if(buz_cnt%100<35) buz_active|=BU_COMPASS_FAILURE;
    1ba0:	e3510022 	cmp	r1, #34	; 0x22
    1ba4:	9a000003 	bls	1bb8 <buzzer_handler+0x2f8>
		else if(buz_cnt%100<40) buz_active&=~BU_COMPASS_FAILURE;
    1ba8:	e3510027 	cmp	r1, #39	; 0x27
    1bac:	9affffa1 	bls	1a38 <buzzer_handler+0x178>
		else if(buz_cnt%100<45) buz_active|=BU_COMPASS_FAILURE;
    1bb0:	e351002c 	cmp	r1, #44	; 0x2c
    1bb4:	8affff9f 	bhi	1a38 <buzzer_handler+0x178>
    1bb8:	e3800020 	orr	r0, r0, #32
    1bbc:	eaffff9e 	b	1a3c <buzzer_handler+0x17c>

	//ADC error
	if((LL_1khz_attitude_data.flightMode&FM_ADC_STARTUP_ERROR)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_ADC;
		if(buz_cnt<135) buz_active|=BU_ERROR_ADC;
    1bc0:	e1d630b0 	ldrh	r3, [r6]
    1bc4:	e3530086 	cmp	r3, #134	; 0x86
	}

	//ADC error
	if((LL_1khz_attitude_data.flightMode&FM_ADC_STARTUP_ERROR)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_ADC;
    1bc8:	e380e008 	orr	lr, r0, #8
		if(buz_cnt<135) buz_active|=BU_ERROR_ADC;
    1bcc:	9a00000b 	bls	1c00 <buzzer_handler+0x340>
		else if(buz_cnt<140) buz_active&=~BU_ERROR_ADC;
    1bd0:	e353008b 	cmp	r3, #139	; 0x8b
    1bd4:	9affff8f 	bls	1a18 <buzzer_handler+0x158>
		else if(buz_cnt<145) buz_active|=BU_ERROR_ADC;
    1bd8:	e3530090 	cmp	r3, #144	; 0x90
    1bdc:	9a000007 	bls	1c00 <buzzer_handler+0x340>
		else if(buz_cnt<150) buz_active&=~BU_ERROR_ADC;
    1be0:	e3530095 	cmp	r3, #149	; 0x95
    1be4:	9affff8b 	bls	1a18 <buzzer_handler+0x158>
		else if(buz_cnt<155) buz_active|=BU_ERROR_ADC;
    1be8:	e353009a 	cmp	r3, #154	; 0x9a
    1bec:	9a000003 	bls	1c00 <buzzer_handler+0x340>
		else if(buz_cnt<160) buz_active&=~BU_ERROR_ADC;
    1bf0:	e353009f 	cmp	r3, #159	; 0x9f
    1bf4:	9affff87 	bls	1a18 <buzzer_handler+0x158>
		else if(buz_cnt<165) buz_active|=BU_ERROR_ADC;
    1bf8:	e35300a4 	cmp	r3, #164	; 0xa4
    1bfc:	8affff85 	bhi	1a18 <buzzer_handler+0x158>
    1c00:	e3810008 	orr	r0, r1, #8
    1c04:	eaffff84 	b	1a1c <buzzer_handler+0x15c>

	//ACC error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_ACC)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_ACC;
		if(buz_cnt<145) buz_active|=BU_ERROR_ACC;
    1c08:	e1d630b0 	ldrh	r3, [r6]
    1c0c:	e3530090 	cmp	r3, #144	; 0x90
	}

	//ACC error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_ACC)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_ACC;
    1c10:	e3800004 	orr	r0, r0, #4
		if(buz_cnt<145) buz_active|=BU_ERROR_ACC;
    1c14:	9a000007 	bls	1c38 <buzzer_handler+0x378>
		else if(buz_cnt<150) buz_active&=~BU_ERROR_ACC;
    1c18:	e3530095 	cmp	r3, #149	; 0x95
    1c1c:	9affff75 	bls	19f8 <buzzer_handler+0x138>
		else if(buz_cnt<155) buz_active|=BU_ERROR_ACC;
    1c20:	e353009a 	cmp	r3, #154	; 0x9a
    1c24:	9a000003 	bls	1c38 <buzzer_handler+0x378>
		else if(buz_cnt<160) buz_active&=~BU_ERROR_ACC;
    1c28:	e353009f 	cmp	r3, #159	; 0x9f
    1c2c:	9affff71 	bls	19f8 <buzzer_handler+0x138>
		else if(buz_cnt<165) buz_active|=BU_ERROR_ACC;
    1c30:	e35300a4 	cmp	r3, #164	; 0xa4
    1c34:	8affff6f 	bhi	19f8 <buzzer_handler+0x138>
    1c38:	e3811004 	orr	r1, r1, #4
    1c3c:	eaffff6e 	b	19fc <buzzer_handler+0x13c>

	//gyro error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_GYROS)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_GYRO;
		if(buz_cnt<155) buz_active|=BU_ERROR_GYRO;
    1c40:	e1d630b0 	ldrh	r3, [r6]
    1c44:	e353009a 	cmp	r3, #154	; 0x9a
	}

	//gyro error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_GYROS)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_GYRO;
    1c48:	e3800002 	orr	r0, r0, #2
		if(buz_cnt<155) buz_active|=BU_ERROR_GYRO;
    1c4c:	9a000003 	bls	1c60 <buzzer_handler+0x3a0>
		else if(buz_cnt<160) buz_active&=~BU_ERROR_GYRO;
    1c50:	e353009f 	cmp	r3, #159	; 0x9f
    1c54:	9affff5f 	bls	19d8 <buzzer_handler+0x118>
		else if(buz_cnt<165) buz_active|=BU_ERROR_GYRO;
    1c58:	e35300a4 	cmp	r3, #164	; 0xa4
    1c5c:	8affff5d 	bhi	19d8 <buzzer_handler+0x118>
    1c60:	e3811002 	orr	r1, r1, #2
    1c64:	eaffff5c 	b	19dc <buzzer_handler+0x11c>
		buz_priority&=~BU_COMPASS_FAILURE;
		buz_active&=~BU_COMPASS_FAILURE;
	}

	//mag fieldstrength warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_FIELD_STRENGTH_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_fs++<400))
    1c68:	e59f2204 	ldr	r2, [pc, #516]	; 1e74 <buzzer_handler+0x5b4>
    1c6c:	e1d230b0 	ldrh	r3, [r2]
    1c70:	e3530e19 	cmp	r3, #400	; 0x190
    1c74:	e2833001 	add	r3, r3, #1
    1c78:	e1c230b0 	strh	r3, [r2]
    1c7c:	2affff74 	bcs	1a54 <buzzer_handler+0x194>
	{
		buz_priority|=BU_WARNING_MAG_FS;
		if(buz_cnt%100<5) buz_active|=BU_WARNING_MAG_FS;
    1c80:	e1d610b0 	ldrh	r1, [r6]
    1c84:	e59f21e4 	ldr	r2, [pc, #484]	; 1e70 <buzzer_handler+0x5b0>
    1c88:	e083c192 	umull	ip, r3, r2, r1
    1c8c:	e1a032a3 	lsr	r3, r3, #5
    1c90:	e0833103 	add	r3, r3, r3, lsl #2
    1c94:	e0833103 	add	r3, r3, r3, lsl #2
    1c98:	e0411103 	sub	r1, r1, r3, lsl #2
    1c9c:	e1a01801 	lsl	r1, r1, #16
    1ca0:	e1a01821 	lsr	r1, r1, #16
    1ca4:	e3510004 	cmp	r1, #4
	}

	//mag fieldstrength warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_FIELD_STRENGTH_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_fs++<400))
	{
		buz_priority|=BU_WARNING_MAG_FS;
    1ca8:	e38ec040 	orr	ip, lr, #64	; 0x40
		if(buz_cnt%100<5) buz_active|=BU_WARNING_MAG_FS;
    1cac:	9a000007 	bls	1cd0 <buzzer_handler+0x410>
		else if(buz_cnt%100<10) buz_active&=~BU_WARNING_MAG_FS;
    1cb0:	e3510009 	cmp	r1, #9
    1cb4:	9affff67 	bls	1a58 <buzzer_handler+0x198>
		else if(buz_cnt%100<15) buz_active|=BU_WARNING_MAG_FS;
    1cb8:	e351000e 	cmp	r1, #14
    1cbc:	9a000003 	bls	1cd0 <buzzer_handler+0x410>
		else if(buz_cnt%100<20) buz_active&=~BU_WARNING_MAG_FS;
    1cc0:	e3510013 	cmp	r1, #19
    1cc4:	9affff63 	bls	1a58 <buzzer_handler+0x198>
		else if(buz_cnt%100<25) buz_active|=BU_WARNING_MAG_FS;
    1cc8:	e3510018 	cmp	r1, #24
    1ccc:	8affff61 	bhi	1a58 <buzzer_handler+0x198>
    1cd0:	e3800040 	orr	r0, r0, #64	; 0x40
    1cd4:	eaffff60 	b	1a5c <buzzer_handler+0x19c>
		if(!SYSTEM_initialized)
		{
			buz_priority|=BU_INIT;

#ifndef MATLAB
			if(buz_cnt%100<5){buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}
    1cd8:	e1d610b0 	ldrh	r1, [r6]
    1cdc:	e59f218c 	ldr	r2, [pc, #396]	; 1e70 <buzzer_handler+0x5b0>
    1ce0:	e083c192 	umull	ip, r3, r2, r1
    1ce4:	e1a032a3 	lsr	r3, r3, #5
    1ce8:	e0833103 	add	r3, r3, r3, lsl #2
    1cec:	e0833103 	add	r3, r3, r3, lsl #2
    1cf0:	e0411103 	sub	r1, r1, r3, lsl #2
    1cf4:	e1a01801 	lsl	r1, r1, #16
    1cf8:	e1a01821 	lsr	r1, r1, #16
    1cfc:	e3510004 	cmp	r1, #4

	if(buzzer_warnings&BUZZER_WARNING_INIT_BEEP)
	{
		if(!SYSTEM_initialized)
		{
			buz_priority|=BU_INIT;
    1d00:	e3855001 	orr	r5, r5, #1

#ifndef MATLAB
			if(buz_cnt%100<5){buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}
    1d04:	9a000048 	bls	1e2c <buzzer_handler+0x56c>
			else if(buz_cnt%100<10) {buz_active&=~BU_INIT; I2C1_setRGBLed(0, 0, 0);}
    1d08:	e3510009 	cmp	r1, #9
    1d0c:	9a000005 	bls	1d28 <buzzer_handler+0x468>
			else if(buz_cnt%100<15) {buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}
    1d10:	e351000e 	cmp	r1, #14
    1d14:	9a000044 	bls	1e2c <buzzer_handler+0x56c>

			#if ((__BUILD_CONFIG==0x00) || (__BUILD_CONFIG==0x02))
				else if(buz_cnt%100<30) {buz_active&=~BU_INIT; I2C1_setRGBLed(0, 0, 0);}
    1d18:	e351001d 	cmp	r1, #29
    1d1c:	9a000001 	bls	1d28 <buzzer_handler+0x468>
				else if(buz_cnt%100<35) {buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}
    1d20:	e3510022 	cmp	r1, #34	; 0x22
    1d24:	9a000040 	bls	1e2c <buzzer_handler+0x56c>
			#endif

			else {buz_active&=~BU_INIT; I2C1_setRGBLed(0, 0, 0);}
    1d28:	e1a01000 	mov	r1, r0
    1d2c:	e1a02000 	mov	r2, r0
    1d30:	e3c44001 	bic	r4, r4, #1
    1d34:	eb000c3f 	bl	4e38 <I2C1_setRGBLed>
    1d38:	eaffff54 	b	1a90 <buzzer_handler+0x1d0>
		buz_priority&=~BU_WARNING_MAG_FS;
		buz_active&=~BU_WARNING_MAG_FS;
	}

	//mag inclination warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_INCLINATION_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_inc++<400))
    1d3c:	e59f3124 	ldr	r3, [pc, #292]	; 1e68 <buzzer_handler+0x5a8>
    1d40:	e5d32000 	ldrb	r2, [r3]
    1d44:	e3520000 	cmp	r2, #0
    1d48:	0affff45 	beq	1a64 <buzzer_handler+0x1a4>
    1d4c:	e59f2124 	ldr	r2, [pc, #292]	; 1e78 <buzzer_handler+0x5b8>
    1d50:	e1d230b0 	ldrh	r3, [r2]
    1d54:	e3530e19 	cmp	r3, #400	; 0x190
    1d58:	e2833001 	add	r3, r3, #1
    1d5c:	e1c230b0 	strh	r3, [r2]
    1d60:	2affff3f 	bcs	1a64 <buzzer_handler+0x1a4>
	{
		buz_priority|=BU_WARNING_MAG_INC;
		if(buz_cnt%100<5) buz_active|=BU_WARNING_MAG_INC;
    1d64:	e1d610b0 	ldrh	r1, [r6]
    1d68:	e59f2100 	ldr	r2, [pc, #256]	; 1e70 <buzzer_handler+0x5b0>
    1d6c:	e083e192 	umull	lr, r3, r2, r1
    1d70:	e1a032a3 	lsr	r3, r3, #5
    1d74:	e0833103 	add	r3, r3, r3, lsl #2
    1d78:	e0833103 	add	r3, r3, r3, lsl #2
    1d7c:	e0411103 	sub	r1, r1, r3, lsl #2
    1d80:	e1a01801 	lsl	r1, r1, #16
    1d84:	e1a01821 	lsr	r1, r1, #16
    1d88:	e3510004 	cmp	r1, #4
	}

	//mag inclination warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_INCLINATION_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_inc++<400))
	{
		buz_priority|=BU_WARNING_MAG_INC;
    1d8c:	e38c5080 	orr	r5, ip, #128	; 0x80
		if(buz_cnt%100<5) buz_active|=BU_WARNING_MAG_INC;
    1d90:	9a00000b 	bls	1dc4 <buzzer_handler+0x504>
		else if(buz_cnt%100<10) buz_active&=~BU_WARNING_MAG_INC;
    1d94:	e3510009 	cmp	r1, #9
    1d98:	9affff32 	bls	1a68 <buzzer_handler+0x1a8>
		else if(buz_cnt%100<15) buz_active|=BU_WARNING_MAG_INC;
    1d9c:	e351000e 	cmp	r1, #14
    1da0:	9a000007 	bls	1dc4 <buzzer_handler+0x504>
		else if(buz_cnt%100<20) buz_active&=~BU_WARNING_MAG_INC;
    1da4:	e3510013 	cmp	r1, #19
    1da8:	9affff2e 	bls	1a68 <buzzer_handler+0x1a8>
		else if(buz_cnt%100<25) buz_active|=BU_WARNING_MAG_INC;
    1dac:	e3510018 	cmp	r1, #24
    1db0:	9a000003 	bls	1dc4 <buzzer_handler+0x504>
		else if(buz_cnt%100<30) buz_active&=~BU_WARNING_MAG_INC;
    1db4:	e351001d 	cmp	r1, #29
    1db8:	9affff2a 	bls	1a68 <buzzer_handler+0x1a8>
		else if(buz_cnt%100<35) buz_active|=BU_WARNING_MAG_INC;
    1dbc:	e3510022 	cmp	r1, #34	; 0x22
    1dc0:	8affff28 	bhi	1a68 <buzzer_handler+0x1a8>
    1dc4:	e3804080 	orr	r4, r0, #128	; 0x80
    1dc8:	eaffff27 	b	1a6c <buzzer_handler+0x1ac>
	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;

	//battery warning
	if(++bat_cnt==100){
		bat_cnt=0;
		bat_div=(ALARM_battery_warning_voltage_high-ALARM_battery_warning_voltage_low)/100;
    1dcc:	e59f5074 	ldr	r5, [pc, #116]	; 1e48 <buzzer_handler+0x588>
    1dd0:	e59fc074 	ldr	ip, [pc, #116]	; 1e4c <buzzer_handler+0x58c>
    1dd4:	e1d530b0 	ldrh	r3, [r5]
    1dd8:	e1dc20b0 	ldrh	r2, [ip]
    1ddc:	e59f108c 	ldr	r1, [pc, #140]	; 1e70 <buzzer_handler+0x5b0>
    1de0:	e0623003 	rsb	r3, r2, r3
    1de4:	e0c02391 	smull	r2, r0, r1, r3
    1de8:	e1a03fc3 	asr	r3, r3, #31
    1dec:	e59f2064 	ldr	r2, [pc, #100]	; 1e58 <buzzer_handler+0x598>
    1df0:	e06332c0 	rsb	r3, r3, r0, asr #5

	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;

	//battery warning
	if(++bat_cnt==100){
		bat_cnt=0;
    1df4:	e3a01000 	mov	r1, #0
		bat_div=(ALARM_battery_warning_voltage_high-ALARM_battery_warning_voltage_low)/100;
    1df8:	e5823000 	str	r3, [r2]

	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;

	//battery warning
	if(++bat_cnt==100){
		bat_cnt=0;
    1dfc:	e5841000 	str	r1, [r4]
    1e00:	eafffec1 	b	190c <buzzer_handler+0x4c>
	if(buzzer_warnings&BUZZER_WARNING_GPS_BEEP)
	{
		if(((GPS_Data.status&0xFF)!=3)&&(LL_1khz_attitude_data.RC_data[5]>200))	//no lock and in GPS mode
		{
			buz_priority|=BU_GPS_BEEP;
			if(buz_cnt<5) buz_active|=BU_GPS_BEEP;
    1e04:	e1d630b0 	ldrh	r3, [r6]
    1e08:	e3530004 	cmp	r3, #4

	if(buzzer_warnings&BUZZER_WARNING_GPS_BEEP)
	{
		if(((GPS_Data.status&0xFF)!=3)&&(LL_1khz_attitude_data.RC_data[5]>200))	//no lock and in GPS mode
		{
			buz_priority|=BU_GPS_BEEP;
    1e0c:	e3800c01 	orr	r0, r0, #256	; 0x100
			if(buz_cnt<5) buz_active|=BU_GPS_BEEP;
    1e10:	93811c01 	orrls	r1, r1, #256	; 0x100
			else buz_active&=~BU_GPS_BEEP;
    1e14:	83c11c01 	bichi	r1, r1, #256	; 0x100
    1e18:	eafffee4 	b	19b0 <buzzer_handler+0xf0>
    1e1c:	e59f203c 	ldr	r2, [pc, #60]	; 1e60 <buzzer_handler+0x5a0>
		}
		else
		{
			buz_active&=~BU_GPS_BEEP;
    1e20:	e3c11c01 	bic	r1, r1, #256	; 0x100
			buz_priority&=~BU_GPS_BEEP;
    1e24:	e3c00c01 	bic	r0, r0, #256	; 0x100
    1e28:	eafffee0 	b	19b0 <buzzer_handler+0xf0>
			else if(buz_cnt%100<10) {buz_active&=~BU_INIT; I2C1_setRGBLed(0, 0, 0);}
			else if(buz_cnt%100<15) {buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}

			#if ((__BUILD_CONFIG==0x00) || (__BUILD_CONFIG==0x02))
				else if(buz_cnt%100<30) {buz_active&=~BU_INIT; I2C1_setRGBLed(0, 0, 0);}
				else if(buz_cnt%100<35) {buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}
    1e2c:	e1a01000 	mov	r1, r0
    1e30:	e3a020ff 	mov	r2, #255	; 0xff
    1e34:	e3844001 	orr	r4, r4, #1
    1e38:	eb000bfe 	bl	4e38 <I2C1_setRGBLed>
    1e3c:	eaffff13 	b	1a90 <buzzer_handler+0x1d0>
    1e40:	40000ddc 	.word	0x40000ddc
    1e44:	40000dd8 	.word	0x40000dd8
    1e48:	40000002 	.word	0x40000002
    1e4c:	40000004 	.word	0x40000004
    1e50:	40000dd4 	.word	0x40000dd4
    1e54:	40000dd0 	.word	0x40000dd0
    1e58:	40000008 	.word	0x40000008
    1e5c:	40000000 	.word	0x40000000
    1e60:	40001b5c 	.word	0x40001b5c
    1e64:	40001c10 	.word	0x40001c10
    1e68:	40000e00 	.word	0x40000e00
    1e6c:	40000dde 	.word	0x40000dde
    1e70:	51eb851f 	.word	0x51eb851f
    1e74:	40000de2 	.word	0x40000de2
    1e78:	40000de0 	.word	0x40000de0

00001e7c <generateBuildInfo>:
/*
 *  MODIFY THIS FUNCTION TO INCLUDE ALL IMPORTANT DEFINES OF A PROJECT
 */

void generateBuildInfo()
{
    1e7c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e80:	e24dd030 	sub	sp, sp, #48	; 0x30
	char months[12][3]={"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dez"};
    1e84:	e28d4001 	add	r4, sp, #1
    1e88:	e59f119c 	ldr	r1, [pc, #412]	; 202c <generateBuildInfo+0x1b0>
    1e8c:	e3a02024 	mov	r2, #36	; 0x24
    1e90:	e1a00004 	mov	r0, r4
	    char dateStr[11]=__DATE__;
    1e94:	e28d6025 	add	r6, sp, #37	; 0x25
 *  MODIFY THIS FUNCTION TO INCLUDE ALL IMPORTANT DEFINES OF A PROJECT
 */

void generateBuildInfo()
{
	char months[12][3]={"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dez"};
    1e98:	eb004272 	bl	12868 <__memcpy_from_arm>
	    char dateStr[11]=__DATE__;
    1e9c:	e1a00006 	mov	r0, r6
    1ea0:	e59f1188 	ldr	r1, [pc, #392]	; 2030 <generateBuildInfo+0x1b4>
    1ea4:	e3a0200b 	mov	r2, #11
    1ea8:	eb00426e 	bl	12868 <__memcpy_from_arm>
    1eac:	e59f5180 	ldr	r5, [pc, #384]	; 2034 <generateBuildInfo+0x1b8>
    1eb0:	e3a00000 	mov	r0, #0
    1eb4:	e5dd7025 	ldrb	r7, [sp, #37]	; 0x25
    1eb8:	e5dde026 	ldrb	lr, [sp, #38]	; 0x26
    1ebc:	e5ddc027 	ldrb	ip, [sp, #39]	; 0x27
    1ec0:	e1a0a000 	mov	sl, r0
    1ec4:	e1a09000 	mov	r9, r0
    1ec8:	e1a0b000 	mov	fp, r0
    1ecc:	e1a08000 	mov	r8, r0
    1ed0:	ea000005 	b	1eec <generateBuildInfo+0x70>
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
	                            cnt++;
	            if (cnt==3)
    1ed4:	e3510003 	cmp	r1, #3
	    int i,z;


	    m=1;

	    for (z=0;z<11;z++)
    1ed8:	e2844003 	add	r4, r4, #3
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
	                            cnt++;
	            if (cnt==3)
    1edc:	0a000010 	beq	1f24 <generateBuildInfo+0xa8>
	    int i,z;


	    m=1;

	    for (z=0;z<11;z++)
    1ee0:	e2800001 	add	r0, r0, #1
    1ee4:	e350000b 	cmp	r0, #11
    1ee8:	0a00000f 	beq	1f2c <generateBuildInfo+0xb0>
/*
 *  MODIFY THIS FUNCTION TO INCLUDE ALL IMPORTANT DEFINES OF A PROJECT
 */

void generateBuildInfo()
{
    1eec:	e5d43000 	ldrb	r3, [r4]

	    for (z=0;z<11;z++)
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
    1ef0:	e5d42001 	ldrb	r2, [r4, #1]
/*
 *  MODIFY THIS FUNCTION TO INCLUDE ALL IMPORTANT DEFINES OF A PROJECT
 */

void generateBuildInfo()
{
    1ef4:	e1530007 	cmp	r3, r7
    1ef8:	13a01000 	movne	r1, #0
    1efc:	03a01001 	moveq	r1, #1

	    for (z=0;z<11;z++)
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
    1f00:	e5d43002 	ldrb	r3, [r4, #2]
    1f04:	e152000e 	cmp	r2, lr
	                            cnt++;
    1f08:	02811001 	addeq	r1, r1, #1

	    for (z=0;z<11;z++)
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
    1f0c:	e153000c 	cmp	r3, ip
    1f10:	1affffef 	bne	1ed4 <generateBuildInfo+0x58>
	                            cnt++;
    1f14:	e2811001 	add	r1, r1, #1
	            if (cnt==3)
    1f18:	e3510003 	cmp	r1, #3
	    int i,z;


	    m=1;

	    for (z=0;z<11;z++)
    1f1c:	e2844003 	add	r4, r4, #3
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
	                            cnt++;
	            if (cnt==3)
    1f20:	1affffee 	bne	1ee0 <generateBuildInfo+0x64>
	            {
	                    m=z+1;
    1f24:	e2804001 	add	r4, r0, #1
    1f28:	ea000000 	b	1f30 <generateBuildInfo+0xb4>
	    int i,z;


	    m=1;

	    for (z=0;z<11;z++)
    1f2c:	e3a04001 	mov	r4, #1
    1f30:	e3a02000 	mov	r2, #0
    1f34:	e3a01030 	mov	r1, #48	; 0x30
	                    m=z+1;
	                    break;
	            }
	    }
	    for (z=0;z<11;z++)
	            if (dateStr[z]<48)
    1f38:	e7d23006 	ldrb	r3, [r2, r6]
    1f3c:	e353002f 	cmp	r3, #47	; 0x2f
	                    dateStr[z]=48;
    1f40:	97c21006 	strbls	r1, [r2, r6]
	            {
	                    m=z+1;
	                    break;
	            }
	    }
	    for (z=0;z<11;z++)
    1f44:	e2822001 	add	r2, r2, #1
    1f48:	e352000b 	cmp	r2, #11
    1f4c:	1afffff9 	bne	1f38 <generateBuildInfo+0xbc>

	    d=(dateStr[4]-48)*10+(dateStr[5]-48);
	    y=(dateStr[7]-48)*1000+(dateStr[8]-48)*100+(dateStr[9]-48)*10+(dateStr[10]-48);


	 buildInfo.build_date=y+m*10000+d*1000000;
    1f50:	e5dd302d 	ldrb	r3, [sp, #45]	; 0x2d
    1f54:	e5dd102c 	ldrb	r1, [sp, #44]	; 0x2c
    1f58:	e0833103 	add	r3, r3, r3, lsl #2
    1f5c:	e5ddc029 	ldrb	ip, [sp, #41]	; 0x29
    1f60:	e0612281 	rsb	r2, r1, r1, lsl #5
    1f64:	e0833103 	add	r3, r3, r3, lsl #2
    1f68:	e5dd002a 	ldrb	r0, [sp, #42]	; 0x2a
    1f6c:	e0811102 	add	r1, r1, r2, lsl #2
    1f70:	e08cc10c 	add	ip, ip, ip, lsl #2
    1f74:	e5dde02f 	ldrb	lr, [sp, #47]	; 0x2f
    1f78:	e1a03103 	lsl	r3, r3, #2
    1f7c:	e5dd202e 	ldrb	r2, [sp, #46]	; 0x2e
    1f80:	e0833181 	add	r3, r3, r1, lsl #3
    1f84:	e080008c 	add	r0, r0, ip, lsl #1
    1f88:	e083300e 	add	r3, r3, lr
    1f8c:	e2400e21 	sub	r0, r0, #528	; 0x210
    1f90:	e0822102 	add	r2, r2, r2, lsl #2
    1f94:	e0833082 	add	r3, r3, r2, lsl #1
    1f98:	e0601280 	rsb	r1, r0, r0, lsl #5
    1f9c:	e0611301 	rsb	r1, r1, r1, lsl #6
    1fa0:	e2433a0d 	sub	r3, r3, #53248	; 0xd000
    1fa4:	e0642284 	rsb	r2, r4, r4, lsl #5
    1fa8:	e0800181 	add	r0, r0, r1, lsl #3
    1fac:	e0842102 	add	r2, r4, r2, lsl #2
    1fb0:	e2433050 	sub	r3, r3, #80	; 0x50
    1fb4:	e0833300 	add	r3, r3, r0, lsl #6
    1fb8:	e0822102 	add	r2, r2, r2, lsl #2
    1fbc:	e0833202 	add	r3, r3, r2, lsl #4
	 buildInfo.configuration=__BUILD_CONFIG;
	 buildInfo.build_number=0;
	 buildInfo.svn_modified=0;
	 buildInfo.svn_revision=0;
    1fc0:	e3a01000 	mov	r1, #0

	    d=(dateStr[4]-48)*10+(dateStr[5]-48);
	    y=(dateStr[7]-48)*1000+(dateStr[8]-48)*100+(dateStr[9]-48)*10+(dateStr[10]-48);


	 buildInfo.build_date=y+m*10000+d*1000000;
    1fc4:	e1a0e423 	lsr	lr, r3, #8
    1fc8:	e1a0c823 	lsr	ip, r3, #16
    1fcc:	e1a00c23 	lsr	r0, r3, #24
    1fd0:	e3a02003 	mov	r2, #3
    1fd4:	e5c53004 	strb	r3, [r5, #4]
    1fd8:	e5c52000 	strb	r2, [r5]
    1fdc:	e5c51011 	strb	r1, [r5, #17]
    1fe0:	e5c58010 	strb	r8, [r5, #16]
    1fe4:	e5c5b012 	strb	fp, [r5, #18]
    1fe8:	e5c5900b 	strb	r9, [r5, #11]
    1fec:	e5c5a00a 	strb	sl, [r5, #10]
    1ff0:	e5c51009 	strb	r1, [r5, #9]
    1ff4:	e5c51008 	strb	r1, [r5, #8]
    1ff8:	e5c5100f 	strb	r1, [r5, #15]
    1ffc:	e5c5100e 	strb	r1, [r5, #14]
    2000:	e5c5100d 	strb	r1, [r5, #13]
    2004:	e5c5100c 	strb	r1, [r5, #12]
    2008:	e5c50007 	strb	r0, [r5, #7]
    200c:	e5c5c006 	strb	ip, [r5, #6]
    2010:	e5c5e005 	strb	lr, [r5, #5]
    2014:	e5c51003 	strb	r1, [r5, #3]
    2018:	e5c51002 	strb	r1, [r5, #2]
    201c:	e5c51001 	strb	r1, [r5, #1]
	 buildInfo.svn_modified=0;
	 buildInfo.svn_revision=0;
	 buildInfo.version_major=__VERSION_MAJOR;
	 buildInfo.version_minor=__VERSION_MINOR;

}
    2020:	e28dd030 	add	sp, sp, #48	; 0x30
    2024:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2028:	e12fff1e 	bx	lr
    202c:	000129b0 	.word	0x000129b0
    2030:	000129a4 	.word	0x000129a4
    2034:	40001d31 	.word	0x40001d31

00002038 <RBInit>:

void UART0Debug(char *msg, int length);

void RBInit(RING_BUFFER *aBuffer)
{
	aBuffer->EOB = 0;
    2038:	e3a02000 	mov	r2, #0
	aBuffer->SOB = -1; //we increment first. 
    203c:	e3e03000 	mvn	r3, #0

void UART0Debug(char *msg, int length);

void RBInit(RING_BUFFER *aBuffer)
{
	aBuffer->EOB = 0;
    2040:	e5802000 	str	r2, [r0]
	aBuffer->SOB = -1; //we increment first. 
    2044:	e5803004 	str	r3, [r0, #4]
	aBuffer->bytes = 0;
    2048:	e5c02008 	strb	r2, [r0, #8]
}
    204c:	e12fff1e 	bx	lr

00002050 <showBuffer>:
	for (i = 0; i < aBuffer->bytes; i++)
	{
		sprintf(msg, "Byte %i:%i\n\r", i, aBuffer->buffer[ aBuffer->SOB + i + 1]);
		sendText(msg);
	}
}
    2050:	e12fff1e 	bx	lr

00002054 <RBDiscard>:
}

void RBDiscard(RING_BUFFER *aBuffer, char numToDiscard)
{
	
	if ( aBuffer->bytes <= numToDiscard )
    2054:	e5d03008 	ldrb	r3, [r0, #8]
	
	return aByte;
}

void RBDiscard(RING_BUFFER *aBuffer, char numToDiscard)
{
    2058:	e20110ff 	and	r1, r1, #255	; 0xff
	
	if ( aBuffer->bytes <= numToDiscard )
    205c:	e1530001 	cmp	r3, r1
	{
		aBuffer->bytes = 0;
    2060:	e3a02000 	mov	r2, #0
}

void RBDiscard(RING_BUFFER *aBuffer, char numToDiscard)
{
	
	if ( aBuffer->bytes <= numToDiscard )
    2064:	8a000004 	bhi	207c <RBDiscard+0x28>
	{
		aBuffer->bytes = 0;
		aBuffer->EOB = 0;
		aBuffer->SOB = -1;		
    2068:	e3e03000 	mvn	r3, #0
void RBDiscard(RING_BUFFER *aBuffer, char numToDiscard)
{
	
	if ( aBuffer->bytes <= numToDiscard )
	{
		aBuffer->bytes = 0;
    206c:	e5c02008 	strb	r2, [r0, #8]
		aBuffer->EOB = 0;
    2070:	e5802000 	str	r2, [r0]
		aBuffer->SOB = -1;		
    2074:	e5803004 	str	r3, [r0, #4]
    2078:	e12fff1e 	bx	lr
	}
	else
	{
		aBuffer->SOB += numToDiscard;
    207c:	e5903004 	ldr	r3, [r0, #4]
    2080:	e0833001 	add	r3, r3, r1
    2084:	e5803004 	str	r3, [r0, #4]
		if (aBuffer->SOB >= BUFF_LEN)
    2088:	e5902004 	ldr	r2, [r0, #4]
    208c:	e3520095 	cmp	r2, #149	; 0x95
			aBuffer->SOB = aBuffer->SOB - BUFF_LEN;
    2090:	c5903004 	ldrgt	r3, [r0, #4]
    2094:	c2433096 	subgt	r3, r3, #150	; 0x96
    2098:	c5803004 	strgt	r3, [r0, #4]
    209c:	e12fff1e 	bx	lr

000020a0 <RBPushBack>:
	
}

void RBPushBack(RING_BUFFER *aBuffer, char aByte)
{
	aBuffer->buffer[ aBuffer->SOB ] = aByte;
    20a0:	e5902004 	ldr	r2, [r0, #4]
    20a4:	e0822000 	add	r2, r2, r0
    20a8:	e2822008 	add	r2, r2, #8
	}
	
}

void RBPushBack(RING_BUFFER *aBuffer, char aByte)
{
    20ac:	e20110ff 	and	r1, r1, #255	; 0xff
	aBuffer->buffer[ aBuffer->SOB ] = aByte;
    20b0:	e5c21001 	strb	r1, [r2, #1]
	aBuffer->SOB--;
    20b4:	e5903004 	ldr	r3, [r0, #4]
    20b8:	e2433001 	sub	r3, r3, #1
    20bc:	e5803004 	str	r3, [r0, #4]
	if ( aBuffer->SOB < 0 )
    20c0:	e5902004 	ldr	r2, [r0, #4]
    20c4:	e3520000 	cmp	r2, #0
		aBuffer->SOB = BUFF_LEN - 1;
    20c8:	b3a03095 	movlt	r3, #149	; 0x95
    20cc:	b5803004 	strlt	r3, [r0, #4]
	aBuffer->bytes++;
    20d0:	e5d03008 	ldrb	r3, [r0, #8]
    20d4:	e2833001 	add	r3, r3, #1
    20d8:	e20330ff 	and	r3, r3, #255	; 0xff
    20dc:	e5c03008 	strb	r3, [r0, #8]
}
    20e0:	e12fff1e 	bx	lr

000020e4 <RBPeek>:
char RBPeek(RING_BUFFER *aBuffer)
{
	int idxNByte;
	char aByte;
	
	if ( aBuffer->bytes == 0 )
    20e4:	e5d03008 	ldrb	r3, [r0, #8]
    20e8:	e20330ff 	and	r3, r3, #255	; 0xff
    20ec:	e3530000 	cmp	r3, #0
    20f0:	0a000007 	beq	2114 <RBPeek+0x30>
		return 0;
	idxNByte = aBuffer->SOB + 1;
    20f4:	e5903004 	ldr	r3, [r0, #4]
    20f8:	e2833001 	add	r3, r3, #1
	
	if ( idxNByte >= BUFF_LEN )
    20fc:	e3530095 	cmp	r3, #149	; 0x95
    2100:	c3a03000 	movgt	r3, #0
		idxNByte = 0;
	aByte = aBuffer->buffer[ idxNByte ];
    2104:	e0833000 	add	r3, r3, r0
    2108:	e2833008 	add	r3, r3, #8
    210c:	e5d32001 	ldrb	r2, [r3, #1]
    2110:	e20230ff 	and	r3, r2, #255	; 0xff
	return aByte;
}
    2114:	e1a00003 	mov	r0, r3
    2118:	e12fff1e 	bx	lr

0000211c <RBfindInBuffer>:

// Searches the Ring Buffer for a specific character within searchLen characters of start.
//  Returns index if found, -1 if not.
int RBfindInBuffer(RING_BUFFER *aBuffer, int startIndex, int searchLen, char aByte)
{
    211c:	e92d4030 	push	{r4, r5, lr}
    2120:	e1a05000 	mov	r5, r0
	int x, idx;
	int hit = -1;

	idx = aBuffer->SOB + startIndex + 1;
    2124:	e5900004 	ldr	r0, [r0, #4]
    2128:	e2800001 	add	r0, r0, #1
    212c:	e0811000 	add	r1, r1, r0

	if ( idx >= BUFF_LEN )
    2130:	e3510095 	cmp	r1, #149	; 0x95
		idx = idx - BUFF_LEN;
    2134:	c2411096 	subgt	r1, r1, #150	; 0x96
	
	for (x = 0; x < searchLen && hit == -1; x++)
    2138:	e3520000 	cmp	r2, #0
}

// Searches the Ring Buffer for a specific character within searchLen characters of start.
//  Returns index if found, -1 if not.
int RBfindInBuffer(RING_BUFFER *aBuffer, int startIndex, int searchLen, char aByte)
{
    213c:	e1a0e002 	mov	lr, r2
    2140:	e20340ff 	and	r4, r3, #255	; 0xff
	idx = aBuffer->SOB + startIndex + 1;

	if ( idx >= BUFF_LEN )
		idx = idx - BUFF_LEN;
	
	for (x = 0; x < searchLen && hit == -1; x++)
    2144:	d3e00000 	mvnle	r0, #0
    2148:	da000011 	ble	2194 <RBfindInBuffer+0x78>
    214c:	e3a0c000 	mov	ip, #0
    2150:	e3e00000 	mvn	r0, #0
	{			
		if ( aBuffer->buffer[idx] == aByte )
    2154:	e0813005 	add	r3, r1, r5
    2158:	e2833008 	add	r3, r3, #8
    215c:	e5d32001 	ldrb	r2, [r3, #1]
    2160:	e1520004 	cmp	r2, r4
    2164:	01a0000c 	moveq	r0, ip
	idx = aBuffer->SOB + startIndex + 1;

	if ( idx >= BUFF_LEN )
		idx = idx - BUFF_LEN;
	
	for (x = 0; x < searchLen && hit == -1; x++)
    2168:	e28cc001 	add	ip, ip, #1
    216c:	e15e000c 	cmp	lr, ip
    2170:	d3a03000 	movle	r3, #0
    2174:	c3a03001 	movgt	r3, #1
	{			
		if ( aBuffer->buffer[idx] == aByte )
			hit = x;
		idx++;	
    2178:	e2811001 	add	r1, r1, #1
	idx = aBuffer->SOB + startIndex + 1;

	if ( idx >= BUFF_LEN )
		idx = idx - BUFF_LEN;
	
	for (x = 0; x < searchLen && hit == -1; x++)
    217c:	e3700001 	cmn	r0, #1
    2180:	13a03000 	movne	r3, #0
	{			
		if ( aBuffer->buffer[idx] == aByte )
			hit = x;
		idx++;	
		if ( idx >= BUFF_LEN )
    2184:	e3510095 	cmp	r1, #149	; 0x95
    2188:	c3a01000 	movgt	r1, #0
	idx = aBuffer->SOB + startIndex + 1;

	if ( idx >= BUFF_LEN )
		idx = idx - BUFF_LEN;
	
	for (x = 0; x < searchLen && hit == -1; x++)
    218c:	e3530000 	cmp	r3, #0
    2190:	1affffef 	bne	2154 <RBfindInBuffer+0x38>
		idx++;	
		if ( idx >= BUFF_LEN )
			idx = 0;
	}
	return hit; //Not found...	
}
    2194:	e8bd4030 	pop	{r4, r5, lr}
    2198:	e12fff1e 	bx	lr

0000219c <RBCount>:

int RBCount(RING_BUFFER *aBuffer)
{
	return aBuffer->bytes;
    219c:	e5d00008 	ldrb	r0, [r0, #8]
}
    21a0:	e12fff1e 	bx	lr

000021a4 <RBDequeue>:
	if (aBuffer->EOB >= BUFF_LEN)
		aBuffer->EOB = 0;
}

char RBDequeue(RING_BUFFER *aBuffer)
{
    21a4:	e92d4010 	push	{r4, lr}
    21a8:	e1a0c000 	mov	ip, r0
	char aByte;
	
	if ( aBuffer->bytes == 0 )
    21ac:	e5dc3008 	ldrb	r3, [ip, #8]
    21b0:	e20340ff 	and	r4, r3, #255	; 0xff
    21b4:	e3540000 	cmp	r4, #0
	{
		UART0Debug("RBDequeue: Buffer Empty!\n",25);
    21b8:	e3a01019 	mov	r1, #25
    21bc:	e59f0054 	ldr	r0, [pc, #84]	; 2218 <RBDequeue+0x74>

char RBDequeue(RING_BUFFER *aBuffer)
{
	char aByte;
	
	if ( aBuffer->bytes == 0 )
    21c0:	0a000011 	beq	220c <RBDequeue+0x68>
		UART0Debug("RBDequeue: Buffer Empty!\n",25);
		return 0; //Empty buffer!
	}
	

	aBuffer->bytes--;
    21c4:	e5dc3008 	ldrb	r3, [ip, #8]
    21c8:	e2433001 	sub	r3, r3, #1
    21cc:	e20330ff 	and	r3, r3, #255	; 0xff
    21d0:	e5cc3008 	strb	r3, [ip, #8]
	aBuffer->SOB++;
    21d4:	e59c2004 	ldr	r2, [ip, #4]
    21d8:	e2822001 	add	r2, r2, #1
    21dc:	e58c2004 	str	r2, [ip, #4]
	if ( aBuffer->SOB >= BUFF_LEN)
    21e0:	e59c3004 	ldr	r3, [ip, #4]
    21e4:	e3530095 	cmp	r3, #149	; 0x95
		aBuffer->SOB = 0;
    21e8:	c3a03000 	movgt	r3, #0
    21ec:	c58c3004 	strgt	r3, [ip, #4]

	aByte = aBuffer->buffer[ aBuffer->SOB ];
    21f0:	e59c3004 	ldr	r3, [ip, #4]
    21f4:	e083300c 	add	r3, r3, ip
    21f8:	e2833008 	add	r3, r3, #8
    21fc:	e5d32001 	ldrb	r2, [r3, #1]
    2200:	e20200ff 	and	r0, r2, #255	; 0xff
	
	
	return aByte;
}
    2204:	e8bd4010 	pop	{r4, lr}
    2208:	e12fff1e 	bx	lr
{
	char aByte;
	
	if ( aBuffer->bytes == 0 )
	{
		UART0Debug("RBDequeue: Buffer Empty!\n",25);
    220c:	eb0003ba 	bl	30fc <UART0Debug>
    2210:	e1a00004 	mov	r0, r4
    2214:	eafffffa 	b	2204 <RBDequeue+0x60>
    2218:	000129d4 	.word	0x000129d4

0000221c <RBEnqueue>:
		sendText(msg);
	}
}
 
void RBEnqueue(RING_BUFFER *aBuffer, char x)
{
    221c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    2220:	e1a0c000 	mov	ip, r0
	if ( aBuffer->bytes >= BUFF_LEN )
    2224:	e5dc3008 	ldrb	r3, [ip, #8]
		sendText(msg);
	}
}
 
void RBEnqueue(RING_BUFFER *aBuffer, char x)
{
    2228:	e1a02001 	mov	r2, r1
	if ( aBuffer->bytes >= BUFF_LEN )
    222c:	e3530095 	cmp	r3, #149	; 0x95
	{
		UART0Debug("1Buffer FULL!\n",13);
    2230:	e59f0054 	ldr	r0, [pc, #84]	; 228c <RBEnqueue+0x70>
    2234:	e3a0100d 	mov	r1, #13
		sendText(msg);
	}
}
 
void RBEnqueue(RING_BUFFER *aBuffer, char x)
{
    2238:	e20220ff 	and	r2, r2, #255	; 0xff
	if ( aBuffer->bytes >= BUFF_LEN )
    223c:	8a000010 	bhi	2284 <RBEnqueue+0x68>
	{
		UART0Debug("1Buffer FULL!\n",13);
		return;
	}
	aBuffer->buffer[ aBuffer->EOB ] = x;
    2240:	e59c3000 	ldr	r3, [ip]
    2244:	e083300c 	add	r3, r3, ip
    2248:	e2833008 	add	r3, r3, #8
    224c:	e5c32001 	strb	r2, [r3, #1]
	aBuffer->EOB++;
    2250:	e59c2000 	ldr	r2, [ip]
    2254:	e2822001 	add	r2, r2, #1
    2258:	e58c2000 	str	r2, [ip]
	aBuffer->bytes++;
    225c:	e5dc3008 	ldrb	r3, [ip, #8]
    2260:	e2833001 	add	r3, r3, #1
    2264:	e20330ff 	and	r3, r3, #255	; 0xff
    2268:	e5cc3008 	strb	r3, [ip, #8]
	if (aBuffer->EOB >= BUFF_LEN)
    226c:	e59c2000 	ldr	r2, [ip]
    2270:	e3520095 	cmp	r2, #149	; 0x95
		aBuffer->EOB = 0;
    2274:	c3a03000 	movgt	r3, #0
    2278:	c58c3000 	strgt	r3, [ip]
}
    227c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    2280:	e12fff1e 	bx	lr
 
void RBEnqueue(RING_BUFFER *aBuffer, char x)
{
	if ( aBuffer->bytes >= BUFF_LEN )
	{
		UART0Debug("1Buffer FULL!\n",13);
    2284:	eb00039c 	bl	30fc <UART0Debug>
    2288:	eafffffb 	b	227c <RBEnqueue+0x60>
    228c:	000129f0 	.word	0x000129f0

00002290 <findInBuffer>:

// Searches the buffer, starting at startIndex, for aByte.
//  Returns the index in the buffer (from 0) the byte first occurs at.
//  Returns -1 if there is no occurrence.
int findInBuffer(int startIndex, int distance, char aByte)
{
    2290:	e1a03002 	mov	r3, r2
    2294:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    2298:	e1a02001 	mov	r2, r1
    229c:	e20330ff 	and	r3, r3, #255	; 0xff
	return RBfindInBuffer(&u0r, startIndex, distance, aByte); 
    22a0:	e1a01000 	mov	r1, r0
    22a4:	e59f0008 	ldr	r0, [pc, #8]	; 22b4 <findInBuffer+0x24>
    22a8:	ebffff9b 	bl	211c <RBfindInBuffer>
}
    22ac:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    22b0:	e12fff1e 	bx	lr
    22b4:	40001e54 	.word	0x40001e54

000022b8 <peekByte>:
}

// peekByte
//  Returns the next byte in the buffer w/o consuming it.
char peekByte()
{
    22b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	return RBPeek(&u0r);
    22bc:	e59f0008 	ldr	r0, [pc, #8]	; 22cc <peekByte+0x14>
    22c0:	ebffff87 	bl	20e4 <RBPeek>
}
    22c4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    22c8:	e12fff1e 	bx	lr
    22cc:	40001e54 	.word	0x40001e54

000022d0 <skipBytes>:
}

// skipBytes
//	Discard num bytes in the buffer.
int skipBytes(int num)
{
    22d0:	e92d4010 	push	{r4, lr}
	RBDiscard(&u0r, num);
    22d4:	e59f4018 	ldr	r4, [pc, #24]	; 22f4 <skipBytes+0x24>
    22d8:	e20010ff 	and	r1, r0, #255	; 0xff
    22dc:	e1a00004 	mov	r0, r4
    22e0:	ebffff5b 	bl	2054 <RBDiscard>
	return RBCount(&u0r);
    22e4:	e1a00004 	mov	r0, r4
    22e8:	ebffffab 	bl	219c <RBCount>
}
    22ec:	e8bd4010 	pop	{r4, lr}
    22f0:	e12fff1e 	bx	lr
    22f4:	40001e54 	.word	0x40001e54

000022f8 <bytesAvailable>:
		RBEnqueue(&u0s,*msg++);
	uart0Prime();
}

char bytesAvailable(void)
{
    22f8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	return RBCount(&u0r); //Groups of 4...
    22fc:	e59f000c 	ldr	r0, [pc, #12]	; 2310 <bytesAvailable+0x18>
    2300:	ebffffa5 	bl	219c <RBCount>
    2304:	e20000ff 	and	r0, r0, #255	; 0xff
}
    2308:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    230c:	e12fff1e 	bx	lr
    2310:	40001e54 	.word	0x40001e54

00002314 <pushBack>:
		*buffer = getByte();
}

// Pushes a byte back onto the Ring Buffer.
void pushBack(char byte)
{
    2314:	e20010ff 	and	r1, r0, #255	; 0xff
    2318:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	RBPushBack(&u0r, byte);
    231c:	e59f0008 	ldr	r0, [pc, #8]	; 232c <pushBack+0x18>
    2320:	ebffff5e 	bl	20a0 <RBPushBack>
}
    2324:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    2328:	e12fff1e 	bx	lr
    232c:	40001e54 	.word	0x40001e54

00002330 <sendText>:
	for (c = 0; c < num; c++)
		UART0WriteChar(bytes[c]);
}

void sendText(char *msg)
{
    2330:	e92d4010 	push	{r4, lr}
	while (*msg)
    2334:	e5d01000 	ldrb	r1, [r0]
    2338:	e3510000 	cmp	r1, #0
    233c:	0a000005 	beq	2358 <sendText+0x28>
    2340:	e1a04000 	mov	r4, r0
		RBEnqueue(&u0s,*msg++);
    2344:	e59f0018 	ldr	r0, [pc, #24]	; 2364 <sendText+0x34>
    2348:	ebffffb3 	bl	221c <RBEnqueue>
		UART0WriteChar(bytes[c]);
}

void sendText(char *msg)
{
	while (*msg)
    234c:	e5f41001 	ldrb	r1, [r4, #1]!
    2350:	e3510000 	cmp	r1, #0
    2354:	1afffffa 	bne	2344 <sendText+0x14>
		RBEnqueue(&u0s,*msg++);
	uart0Prime();
    2358:	eb0003a0 	bl	31e0 <uart0Prime>
}
    235c:	e8bd4010 	pop	{r4, lr}
    2360:	e12fff1e 	bx	lr
    2364:	40001ef4 	.word	0x40001ef4

00002368 <debugMsg>:
	return RBfindInBuffer(&u0r, startIndex, distance, aByte); 
}

void debugMsg(char *func, char *msg)
{
	if (!DEBUG_ENABLED)
    2368:	e59f3048 	ldr	r3, [pc, #72]	; 23b8 <debugMsg+0x50>
    236c:	e5932000 	ldr	r2, [r3]
    2370:	e3520000 	cmp	r2, #0
{
	return RBfindInBuffer(&u0r, startIndex, distance, aByte); 
}

void debugMsg(char *func, char *msg)
{
    2374:	e92d4030 	push	{r4, r5, lr}
    2378:	e1a04000 	mov	r4, r0
    237c:	e1a05001 	mov	r5, r1
	if (!DEBUG_ENABLED)
		return;
	sendText("DEBUG:");
    2380:	e59f0034 	ldr	r0, [pc, #52]	; 23bc <debugMsg+0x54>
	return RBfindInBuffer(&u0r, startIndex, distance, aByte); 
}

void debugMsg(char *func, char *msg)
{
	if (!DEBUG_ENABLED)
    2384:	1a000001 	bne	2390 <debugMsg+0x28>
	sendText("DEBUG:");
	sendText(func);
	sendText(":");
	sendText(msg);
	sendText("\n");
}
    2388:	e8bd4030 	pop	{r4, r5, lr}
    238c:	e12fff1e 	bx	lr

void debugMsg(char *func, char *msg)
{
	if (!DEBUG_ENABLED)
		return;
	sendText("DEBUG:");
    2390:	ebffffe6 	bl	2330 <sendText>
	sendText(func);
    2394:	e1a00004 	mov	r0, r4
    2398:	ebffffe4 	bl	2330 <sendText>
	sendText(":");
    239c:	e59f001c 	ldr	r0, [pc, #28]	; 23c0 <debugMsg+0x58>
    23a0:	ebffffe2 	bl	2330 <sendText>
	sendText(msg);
    23a4:	e1a00005 	mov	r0, r5
    23a8:	ebffffe0 	bl	2330 <sendText>
	sendText("\n");
    23ac:	e59f0010 	ldr	r0, [pc, #16]	; 23c4 <debugMsg+0x5c>
}
    23b0:	e8bd4030 	pop	{r4, r5, lr}
		return;
	sendText("DEBUG:");
	sendText(func);
	sendText(":");
	sendText(msg);
	sendText("\n");
    23b4:	eaffffdd 	b	2330 <sendText>
    23b8:	40000de4 	.word	0x40000de4
    23bc:	00012a00 	.word	0x00012a00
    23c0:	00012a08 	.word	0x00012a08
    23c4:	00012a0c 	.word	0x00012a0c

000023c8 <sendNBytes>:
	UART0WriteChar(aByte);
	RBEnqueue(&u0s, aByte);
}

void sendNBytes(char *bytes, int num)
{
    23c8:	e92d4070 	push	{r4, r5, r6, lr}
	int c;

	for (c = 0; c < num; c++)
    23cc:	e2516000 	subs	r6, r1, #0
	UART0WriteChar(aByte);
	RBEnqueue(&u0s, aByte);
}

void sendNBytes(char *bytes, int num)
{
    23d0:	e1a05000 	mov	r5, r0
	int c;

	for (c = 0; c < num; c++)
    23d4:	da000005 	ble	23f0 <sendNBytes+0x28>
    23d8:	e3a04000 	mov	r4, #0
		UART0WriteChar(bytes[c]);
    23dc:	e7d40005 	ldrb	r0, [r4, r5]

void sendNBytes(char *bytes, int num)
{
	int c;

	for (c = 0; c < num; c++)
    23e0:	e2844001 	add	r4, r4, #1
		UART0WriteChar(bytes[c]);
    23e4:	eb000363 	bl	3178 <UART0WriteChar>

void sendNBytes(char *bytes, int num)
{
	int c;

	for (c = 0; c < num; c++)
    23e8:	e1560004 	cmp	r6, r4
    23ec:	1afffffa 	bne	23dc <sendNBytes+0x14>
		UART0WriteChar(bytes[c]);
}
    23f0:	e8bd4070 	pop	{r4, r5, r6, lr}
    23f4:	e12fff1e 	bx	lr

000023f8 <sendByte>:
{
	showBuffer(&u0r);
}

void sendByte(char aByte)
{
    23f8:	e92d4010 	push	{r4, lr}
    23fc:	e20040ff 	and	r4, r0, #255	; 0xff
	UART0WriteChar(aByte);
    2400:	e1a00004 	mov	r0, r4
    2404:	eb00035b 	bl	3178 <UART0WriteChar>
	RBEnqueue(&u0s, aByte);
    2408:	e1a01004 	mov	r1, r4
    240c:	e59f0008 	ldr	r0, [pc, #8]	; 241c <sendByte+0x24>
    2410:	ebffff81 	bl	221c <RBEnqueue>
}
    2414:	e8bd4010 	pop	{r4, lr}
    2418:	e12fff1e 	bx	lr
    241c:	40001ef4 	.word	0x40001ef4

00002420 <getByte>:
{
	return RBCount(&u0r); //Groups of 4...
}

char getByte(void)
{
    2420:	e92d4010 	push	{r4, lr}
	char aByte;

	if ( !RBCount(&u0r) )
    2424:	e59f0040 	ldr	r0, [pc, #64]	; 246c <getByte+0x4c>
    2428:	ebffff5b 	bl	219c <RBCount>
    242c:	e2503000 	subs	r3, r0, #0
    2430:	e1a04003 	mov	r4, r3
		return 0;

 	aByte = RBDequeue(&u0r);
    2434:	e59f0030 	ldr	r0, [pc, #48]	; 246c <getByte+0x4c>

char getByte(void)
{
	char aByte;

	if ( !RBCount(&u0r) )
    2438:	1a000002 	bne	2448 <getByte+0x28>

	if (ECHOMODE)
		sendByte(aByte);

	return aByte;
}
    243c:	e1a00004 	mov	r0, r4
    2440:	e8bd4010 	pop	{r4, lr}
    2444:	e12fff1e 	bx	lr
	char aByte;

	if ( !RBCount(&u0r) )
		return 0;

 	aByte = RBDequeue(&u0r);
    2448:	ebffff55 	bl	21a4 <RBDequeue>

	if (ECHOMODE)
    244c:	e59f301c 	ldr	r3, [pc, #28]	; 2470 <getByte+0x50>
    2450:	e5932000 	ldr	r2, [r3]
    2454:	e3520000 	cmp	r2, #0
    2458:	e1a04000 	mov	r4, r0
    245c:	0afffff6 	beq	243c <getByte+0x1c>
		sendByte(aByte);
    2460:	e1a04000 	mov	r4, r0
    2464:	ebffffe3 	bl	23f8 <sendByte>
    2468:	eafffff3 	b	243c <getByte+0x1c>
    246c:	40001e54 	.word	0x40001e54
    2470:	40000de8 	.word	0x40000de8

00002474 <getBytes>:

	return aByte;
}

void getBytes(char *buffer, int num)
{
    2474:	e92d4030 	push	{r4, r5, lr}
	for (; num; num--, buffer++)
    2478:	e2514000 	subs	r4, r1, #0

	return aByte;
}

void getBytes(char *buffer, int num)
{
    247c:	e1a05000 	mov	r5, r0
	for (; num; num--, buffer++)
    2480:	0a000003 	beq	2494 <getBytes+0x20>
		*buffer = getByte();
    2484:	ebffffe5 	bl	2420 <getByte>
	return aByte;
}

void getBytes(char *buffer, int num)
{
	for (; num; num--, buffer++)
    2488:	e2544001 	subs	r4, r4, #1
		*buffer = getByte();
    248c:	e4c50001 	strb	r0, [r5], #1
	return aByte;
}

void getBytes(char *buffer, int num)
{
	for (; num; num--, buffer++)
    2490:	1afffffb 	bne	2484 <getBytes+0x10>
		*buffer = getByte();
}
    2494:	e8bd4030 	pop	{r4, r5, lr}
    2498:	e12fff1e 	bx	lr

0000249c <showRBuffer>:

int DEBUG_ENABLED = FALSE; //Debug mode off.
int ECHOMODE = FALSE; // Don't echo.

void showRBuffer(void)
{
    249c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	showBuffer(&u0r);
    24a0:	e59f0008 	ldr	r0, [pc, #8]	; 24b0 <showRBuffer+0x14>
    24a4:	ebfffee9 	bl	2050 <showBuffer>
}
    24a8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    24ac:	e12fff1e 	bx	lr
    24b0:	40001e54 	.word	0x40001e54

000024b4 <timer0ISR>:

extern char updated;
char newvals = 0;

void timer0ISR(void) __irq
{
    24b4:	e1a0c00d 	mov	ip, sp
    24b8:	e92dd800 	push	{fp, ip, lr, pc}
    24bc:	e24cb004 	sub	fp, ip, #4
  T0IR = 0x01;      //Clear the timer 0 interrupt
    24c0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    24c4:	e2833901 	add	r3, r3, #16384	; 0x4000
    24c8:	e3a02001 	mov	r2, #1
    24cc:	e5832000 	str	r2, [r3]
  IENABLE;

  // Performance Counter
  trigger_cnt++;
    24d0:	e59f30b4 	ldr	r3, [pc, #180]	; 258c <timer0ISR+0xd8>
    24d4:	e5933000 	ldr	r3, [r3]
    24d8:	e2832001 	add	r2, r3, #1
    24dc:	e59f30a8 	ldr	r3, [pc, #168]	; 258c <timer0ISR+0xd8>
    24e0:	e5832000 	str	r2, [r3]
  if (trigger_cnt == ControllerCyclesPerSecond)
    24e4:	e59f30a0 	ldr	r3, [pc, #160]	; 258c <timer0ISR+0xd8>
    24e8:	e5933000 	ldr	r3, [r3]
    24ec:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    24f0:	1a000012 	bne	2540 <timer0ISR+0x8c>
  {
  	trigger_cnt = 0;
    24f4:	e59f2090 	ldr	r2, [pc, #144]	; 258c <timer0ISR+0xd8>
    24f8:	e3a03000 	mov	r3, #0
    24fc:	e5823000 	str	r3, [r2]
  	HL_Status.up_time++;
    2500:	e59f3088 	ldr	r3, [pc, #136]	; 2590 <timer0ISR+0xdc>
    2504:	e1d330b4 	ldrh	r3, [r3, #4]
    2508:	e2833001 	add	r3, r3, #1
    250c:	e1a03803 	lsl	r3, r3, #16
    2510:	e1a02823 	lsr	r2, r3, #16
    2514:	e59f3074 	ldr	r3, [pc, #116]	; 2590 <timer0ISR+0xdc>
    2518:	e1c320b4 	strh	r2, [r3, #4]
  	HL_Status.cpu_load = mainloop_cnt;
    251c:	e59f3070 	ldr	r3, [pc, #112]	; 2594 <timer0ISR+0xe0>
    2520:	e5933000 	ldr	r3, [r3]
    2524:	e1a03803 	lsl	r3, r3, #16
    2528:	e1a02823 	lsr	r2, r3, #16
    252c:	e59f305c 	ldr	r3, [pc, #92]	; 2590 <timer0ISR+0xdc>
    2530:	e1c321b2 	strh	r2, [r3, #18]

  	mainloop_cnt = 0;
    2534:	e59f2058 	ldr	r2, [pc, #88]	; 2594 <timer0ISR+0xe0>
    2538:	e3a03000 	mov	r3, #0
    253c:	e5823000 	str	r3, [r2]
  }

  if ( mainloop_trigger < 10 ) 
    2540:	e59f3050 	ldr	r3, [pc, #80]	; 2598 <timer0ISR+0xe4>
    2544:	e5d33000 	ldrb	r3, [r3]
    2548:	e20330ff 	and	r3, r3, #255	; 0xff
    254c:	e3530009 	cmp	r3, #9
    2550:	8a000006 	bhi	2570 <timer0ISR+0xbc>
    mainloop_trigger++;
    2554:	e59f303c 	ldr	r3, [pc, #60]	; 2598 <timer0ISR+0xe4>
    2558:	e5d33000 	ldrb	r3, [r3]
    255c:	e20330ff 	and	r3, r3, #255	; 0xff
    2560:	e2833001 	add	r3, r3, #1
    2564:	e20330ff 	and	r3, r3, #255	; 0xff
    2568:	e59f2028 	ldr	r2, [pc, #40]	; 2598 <timer0ISR+0xe4>
    256c:	e5c23000 	strb	r3, [r2]

  IDISABLE;
  VICVectAddr = 0;		// Acknowledge Interrupt
    2570:	e3a03000 	mov	r3, #0
    2574:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    2578:	e3a02000 	mov	r2, #0
    257c:	e5832000 	str	r2, [r3]
}
    2580:	e24bd00c 	sub	sp, fp, #12
    2584:	e89d6800 	ldm	sp, {fp, sp, lr}
    2588:	e12fff1e 	bx	lr
    258c:	40000dfc 	.word	0x40000dfc
    2590:	40001de0 	.word	0x40001de0
    2594:	40000df4 	.word	0x40000df4
    2598:	40000df8 	.word	0x40000df8

0000259c <main>:

/**********************************************************
                       MAIN
**********************************************************/
int	main (void) {
    259c:	e1a0c00d 	mov	ip, sp
    25a0:	e92dd800 	push	{fp, ip, lr, pc}
    25a4:	e24cb004 	sub	fp, ip, #4
    25a8:	e24dd00c 	sub	sp, sp, #12

  static int vbat1; //battery_voltage (lowpass-filtered)
  unsigned int TimerT1, TimerT2;

  init(); //system.c
    25ac:	eb0000e4 	bl	2944 <init>
  buzzer(OFF);
    25b0:	e3a00000 	mov	r0, #0
    25b4:	ebfffcb7 	bl	1898 <buzzer>
  LL_write_init();
    25b8:	eb000ccb 	bl	58ec <LL_write_init>

  //initialize AscTec Firefly LED fin on I2C1 (not necessary on AscTec Hummingbird or Pelican)
  I2C1Init();
    25bc:	eb000a5e 	bl	4f3c <I2C1Init>
  I2C1_setRGBLed(255,0,0);
    25c0:	e3a000ff 	mov	r0, #255	; 0xff
    25c4:	e3a01000 	mov	r1, #0
    25c8:	e3a02000 	mov	r2, #0
    25cc:	eb000a19 	bl	4e38 <I2C1_setRGBLed>

  ADC0triggerSampling( 1<<VOLTAGE_1); //activate ADC sampling
    25d0:	e3a00004 	mov	r0, #4
    25d4:	eb000c06 	bl	55f4 <ADC0triggerSampling>

  generateBuildInfo();
    25d8:	ebfffe27 	bl	1e7c <generateBuildInfo>

  HL_Status.up_time = 0;
    25dc:	e59f32b4 	ldr	r3, [pc, #692]	; 2898 <main+0x2fc>
    25e0:	e3a02000 	mov	r2, #0
    25e4:	e1c320b4 	strh	r2, [r3, #4]
    25e8:	eaffffff 	b	25ec <main+0x50>
  //update parameters stored by ACI:
  //...

  while(1)
  {
      if (mainloop_trigger)
    25ec:	e59f32a8 	ldr	r3, [pc, #680]	; 289c <main+0x300>
    25f0:	e5d33000 	ldrb	r3, [r3]
    25f4:	e20330ff 	and	r3, r3, #255	; 0xff
    25f8:	e3530000 	cmp	r3, #0
    25fc:	0afffffa 	beq	25ec <main+0x50>
      {
	LED(1,ON);
    2600:	e3a00001 	mov	r0, #1
    2604:	e3a01001 	mov	r1, #1
    2608:	eb0000aa 	bl	28b8 <LED>
      	TimerT1 =  T0TC;
    260c:	e3a03901 	mov	r3, #16384	; 0x4000
    2610:	e283328e 	add	r3, r3, #-536870904	; 0xe0000008
    2614:	e5933000 	ldr	r3, [r3]
    2618:	e50b3014 	str	r3, [fp, #-20]

        //battery monitoring
        ADC0getSamplingResults(0xFF,adcChannelValues);
    261c:	e3a000ff 	mov	r0, #255	; 0xff
    2620:	e59f1278 	ldr	r1, [pc, #632]	; 28a0 <main+0x304>
    2624:	eb000c03 	bl	5638 <ADC0getSamplingResults>
        vbat1=(vbat1*14+(adcChannelValues[VOLTAGE_1]*9872/579))/15;	//voltage in mV
    2628:	e59f3274 	ldr	r3, [pc, #628]	; 28a4 <main+0x308>
    262c:	e5932000 	ldr	r2, [r3]
    2630:	e1a03002 	mov	r3, r2
    2634:	e1a03183 	lsl	r3, r3, #3
    2638:	e0623003 	rsb	r3, r2, r3
    263c:	e1a03083 	lsl	r3, r3, #1
    2640:	e1a00003 	mov	r0, r3
    2644:	e59f3254 	ldr	r3, [pc, #596]	; 28a0 <main+0x304>
    2648:	e5931008 	ldr	r1, [r3, #8]
    264c:	e1a02001 	mov	r2, r1
    2650:	e1a02102 	lsl	r2, r2, #2
    2654:	e0822001 	add	r2, r2, r1
    2658:	e1a02082 	lsl	r2, r2, #1
    265c:	e0822001 	add	r2, r2, r1
    2660:	e1a03182 	lsl	r3, r2, #3
    2664:	e0623003 	rsb	r3, r2, r3
    2668:	e1a03183 	lsl	r3, r3, #3
    266c:	e0833001 	add	r3, r3, r1
    2670:	e1a03203 	lsl	r3, r3, #4
    2674:	e1a02003 	mov	r2, r3
    2678:	e3a032be 	mov	r3, #-536870901	; 0xe000000b
    267c:	e2833626 	add	r3, r3, #39845888	; 0x2600000
    2680:	e2833c63 	add	r3, r3, #25344	; 0x6300
    2684:	e0831392 	umull	r1, r3, r2, r3
    2688:	e1a034a3 	lsr	r3, r3, #9
    268c:	e0802003 	add	r2, r0, r3
    2690:	e59f3210 	ldr	r3, [pc, #528]	; 28a8 <main+0x30c>
    2694:	e0831392 	umull	r1, r3, r2, r3
    2698:	e1a031a3 	lsr	r3, r3, #3
    269c:	e1a02003 	mov	r2, r3
    26a0:	e59f31fc 	ldr	r3, [pc, #508]	; 28a4 <main+0x308>
    26a4:	e5832000 	str	r2, [r3]

		    HL_Status.battery_voltage_1 = vbat1;
    26a8:	e59f31f4 	ldr	r3, [pc, #500]	; 28a4 <main+0x308>
    26ac:	e5933000 	ldr	r3, [r3]
    26b0:	e1a03803 	lsl	r3, r3, #16
    26b4:	e1a02823 	lsr	r2, r3, #16
    26b8:	e59f31d8 	ldr	r3, [pc, #472]	; 2898 <main+0x2fc>
    26bc:	e1c320b0 	strh	r2, [r3]
		
        mainloop_cnt++;
    26c0:	e59f31e4 	ldr	r3, [pc, #484]	; 28ac <main+0x310>
    26c4:	e5933000 	ldr	r3, [r3]
    26c8:	e2832001 	add	r2, r3, #1
    26cc:	e59f31d8 	ldr	r3, [pc, #472]	; 28ac <main+0x310>
    26d0:	e5832000 	str	r2, [r3]
		    if (!(mainloop_cnt % 10)) 
    26d4:	e59f31d0 	ldr	r3, [pc, #464]	; 28ac <main+0x310>
    26d8:	e5932000 	ldr	r2, [r3]
    26dc:	e59f31cc 	ldr	r3, [pc, #460]	; 28b0 <main+0x314>
    26e0:	e0831392 	umull	r1, r3, r2, r3
    26e4:	e1a031a3 	lsr	r3, r3, #3
    26e8:	e50b3018 	str	r3, [fp, #-24]
    26ec:	e51b3018 	ldr	r3, [fp, #-24]
    26f0:	e1a03103 	lsl	r3, r3, #2
    26f4:	e51b1018 	ldr	r1, [fp, #-24]
    26f8:	e0833001 	add	r3, r3, r1
    26fc:	e1a03083 	lsl	r3, r3, #1
    2700:	e0632002 	rsb	r2, r3, r2
    2704:	e50b2018 	str	r2, [fp, #-24]
    2708:	e51b3018 	ldr	r3, [fp, #-24]
    270c:	e3530000 	cmp	r3, #0
    2710:	1a000005 	bne	272c <main+0x190>
          buzzer_handler(HL_Status.battery_voltage_1);
    2714:	e59f317c 	ldr	r3, [pc, #380]	; 2898 <main+0x2fc>
    2718:	e1d330b0 	ldrh	r3, [r3]
    271c:	e1a03803 	lsl	r3, r3, #16
    2720:	e1a03843 	asr	r3, r3, #16
    2724:	e1a00003 	mov	r0, r3
    2728:	ebfffc64 	bl	18c0 <buzzer_handler>

        if (mainloop_trigger) 
    272c:	e59f3168 	ldr	r3, [pc, #360]	; 289c <main+0x300>
    2730:	e5d33000 	ldrb	r3, [r3]
    2734:	e20330ff 	and	r3, r3, #255	; 0xff
    2738:	e3530000 	cmp	r3, #0
    273c:	0a000006 	beq	275c <main+0x1c0>
          mainloop_trigger--;
    2740:	e59f3154 	ldr	r3, [pc, #340]	; 289c <main+0x300>
    2744:	e5d33000 	ldrb	r3, [r3]
    2748:	e20330ff 	and	r3, r3, #255	; 0xff
    274c:	e2433001 	sub	r3, r3, #1
    2750:	e20330ff 	and	r3, r3, #255	; 0xff
    2754:	e59f2140 	ldr	r2, [pc, #320]	; 289c <main+0x300>
    2758:	e5c23000 	strb	r3, [r2]
		  
        SDK_mainloop(); //1000 times per second.
    275c:	ebfffbf1 	bl	1728 <SDK_mainloop>

        // CPU Usage calculation
        TimerT2 = T0TC;
    2760:	e3a03901 	mov	r3, #16384	; 0x4000
    2764:	e283328e 	add	r3, r3, #-536870904	; 0xe0000008
    2768:	e5933000 	ldr	r3, [r3]
    276c:	e50b3010 	str	r3, [fp, #-16]
        if ( mainloop_trigger)
    2770:	e59f3124 	ldr	r3, [pc, #292]	; 289c <main+0x300>
    2774:	e5d33000 	ldrb	r3, [r3]
    2778:	e20330ff 	and	r3, r3, #255	; 0xff
    277c:	e3530000 	cmp	r3, #0
    2780:	0a00000a 	beq	27b0 <main+0x214>
        {
        	HL_Status.cpu_load = 1000;
    2784:	e59f210c 	ldr	r2, [pc, #268]	; 2898 <main+0x2fc>
    2788:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    278c:	e1c231b2 	strh	r3, [r2, #18]
        	mainloop_overflows++;
    2790:	e59f311c 	ldr	r3, [pc, #284]	; 28b4 <main+0x318>
    2794:	e1d330b0 	ldrh	r3, [r3]
    2798:	e2833001 	add	r3, r3, #1
    279c:	e1a03803 	lsl	r3, r3, #16
    27a0:	e1a02823 	lsr	r2, r3, #16
    27a4:	e59f3108 	ldr	r3, [pc, #264]	; 28b4 <main+0x318>
    27a8:	e1c320b0 	strh	r2, [r3]
    27ac:	ea000035 	b	2888 <main+0x2ec>
        }
        else if (TimerT2 < TimerT1)
    27b0:	e51b2010 	ldr	r2, [fp, #-16]
    27b4:	e51b3014 	ldr	r3, [fp, #-20]
    27b8:	e1520003 	cmp	r2, r3
    27bc:	2a00001b 	bcs	2830 <main+0x294>
        	HL_Status.cpu_load = (T0MR0 - TimerT1 + TimerT2)*1000/T0MR0; // load = "timer cycles" / "timer cycles per controller cycle" * 1000
    27c0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    27c4:	e2833901 	add	r3, r3, #16384	; 0x4000
    27c8:	e2833018 	add	r3, r3, #24
    27cc:	e5932000 	ldr	r2, [r3]
    27d0:	e51b3014 	ldr	r3, [fp, #-20]
    27d4:	e0632002 	rsb	r2, r3, r2
    27d8:	e51b3010 	ldr	r3, [fp, #-16]
    27dc:	e0822003 	add	r2, r2, r3
    27e0:	e1a03002 	mov	r3, r2
    27e4:	e1a03283 	lsl	r3, r3, #5
    27e8:	e0623003 	rsb	r3, r2, r3
    27ec:	e1a03103 	lsl	r3, r3, #2
    27f0:	e0833002 	add	r3, r3, r2
    27f4:	e1a03183 	lsl	r3, r3, #3
    27f8:	e1a02003 	mov	r2, r3
    27fc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2800:	e2833901 	add	r3, r3, #16384	; 0x4000
    2804:	e2833018 	add	r3, r3, #24
    2808:	e5933000 	ldr	r3, [r3]
    280c:	e1a00002 	mov	r0, r2
    2810:	e1a01003 	mov	r1, r3
    2814:	eb00401f 	bl	12898 <____udivsi3_from_arm>
    2818:	e1a03000 	mov	r3, r0
    281c:	e1a03803 	lsl	r3, r3, #16
    2820:	e1a02823 	lsr	r2, r3, #16
    2824:	e59f306c 	ldr	r3, [pc, #108]	; 2898 <main+0x2fc>
    2828:	e1c321b2 	strh	r2, [r3, #18]
    282c:	ea000015 	b	2888 <main+0x2ec>
        else
        	HL_Status.cpu_load = (TimerT2 - TimerT1)*1000/T0MR0; // load = "timer cycles" / "timer cycles per controller cycle" * 1000
    2830:	e51b2010 	ldr	r2, [fp, #-16]
    2834:	e51b3014 	ldr	r3, [fp, #-20]
    2838:	e0632002 	rsb	r2, r3, r2
    283c:	e1a03002 	mov	r3, r2
    2840:	e1a03283 	lsl	r3, r3, #5
    2844:	e0623003 	rsb	r3, r2, r3
    2848:	e1a03103 	lsl	r3, r3, #2
    284c:	e0833002 	add	r3, r3, r2
    2850:	e1a03183 	lsl	r3, r3, #3
    2854:	e1a02003 	mov	r2, r3
    2858:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    285c:	e2833901 	add	r3, r3, #16384	; 0x4000
    2860:	e2833018 	add	r3, r3, #24
    2864:	e5933000 	ldr	r3, [r3]
    2868:	e1a00002 	mov	r0, r2
    286c:	e1a01003 	mov	r1, r3
    2870:	eb004008 	bl	12898 <____udivsi3_from_arm>
    2874:	e1a03000 	mov	r3, r0
    2878:	e1a03803 	lsl	r3, r3, #16
    287c:	e1a02823 	lsr	r2, r3, #16
    2880:	e59f3010 	ldr	r3, [pc, #16]	; 2898 <main+0x2fc>
    2884:	e1c321b2 	strh	r2, [r3, #18]
	LED(1,OFF);
    2888:	e3a00001 	mov	r0, #1
    288c:	e3a01000 	mov	r1, #0
    2890:	eb000008 	bl	28b8 <LED>
      }
  }
    2894:	eaffff54 	b	25ec <main+0x50>
    2898:	40001de0 	.word	0x40001de0
    289c:	40000df8 	.word	0x40000df8
    28a0:	40002098 	.word	0x40002098
    28a4:	40000e08 	.word	0x40000e08
    28a8:	88888889 	.word	0x88888889
    28ac:	40000df4 	.word	0x40000df4
    28b0:	cccccccd 	.word	0xcccccccd
    28b4:	40000e02 	.word	0x40000e02

000028b8 <LED>:
#include "hardware.h"
#include "irq.h"


void LED(unsigned char nr, unsigned char onoff) //set or reset LED 0..3
{
    28b8:	e1a0c00d 	mov	ip, sp
    28bc:	e92dd800 	push	{fp, ip, lr, pc}
    28c0:	e24cb004 	sub	fp, ip, #4
    28c4:	e24dd008 	sub	sp, sp, #8
    28c8:	e1a03000 	mov	r3, r0
    28cc:	e1a02001 	mov	r2, r1
    28d0:	e54b3010 	strb	r3, [fp, #-16]
    28d4:	e1a03002 	mov	r3, r2
    28d8:	e54b3014 	strb	r3, [fp, #-20]
  if (nr>=2)
    28dc:	e55b3010 	ldrb	r3, [fp, #-16]
    28e0:	e3530001 	cmp	r3, #1
    28e4:	8a000013 	bhi	2938 <LED+0x80>
  	return;
  if(onoff == OFF)
    28e8:	e55b3014 	ldrb	r3, [fp, #-20]
    28ec:	e3530000 	cmp	r3, #0
    28f0:	1a000008 	bne	2918 <LED+0x60>
  {
    IOSET1 = (1<<(24+nr));
    28f4:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    28f8:	e282290a 	add	r2, r2, #163840	; 0x28000
    28fc:	e2822014 	add	r2, r2, #20
    2900:	e55b3010 	ldrb	r3, [fp, #-16]
    2904:	e2831018 	add	r1, r3, #24
    2908:	e3a03001 	mov	r3, #1
    290c:	e1a03113 	lsl	r3, r3, r1
    2910:	e5823000 	str	r3, [r2]
    2914:	ea000007 	b	2938 <LED+0x80>
  }
  else
  {
    IOCLR1 = (1<<(24+nr));
    2918:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    291c:	e282290a 	add	r2, r2, #163840	; 0x28000
    2920:	e282201c 	add	r2, r2, #28
    2924:	e55b3010 	ldrb	r3, [fp, #-16]
    2928:	e2831018 	add	r1, r3, #24
    292c:	e3a03001 	mov	r3, #1
    2930:	e1a03113 	lsl	r3, r3, r1
    2934:	e5823000 	str	r3, [r2]
  }
}
    2938:	e24bd00c 	sub	sp, fp, #12
    293c:	e89d6800 	ldm	sp, {fp, sp, lr}
    2940:	e12fff1e 	bx	lr

00002944 <init>:
#include "ssp.h"
#include "adc.h"
#include "options.h" //#defines for irq optoins

void init(void)
{
    2944:	e1a0c00d 	mov	ip, sp
    2948:	e92dd800 	push	{fp, ip, lr, pc}
    294c:	e24cb004 	sub	fp, ip, #4
  MAMCR = 0x02;  //Memory Acceleration enabled
    2950:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2954:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2958:	e3a02002 	mov	r2, #2
    295c:	e5832000 	str	r2, [r3]
  MAMTIM = 0x04;
    2960:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2964:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2968:	e3a02004 	mov	r2, #4
    296c:	e5832000 	str	r2, [r3]
  VPBDIV = 0x01;  //0x01: peripheral frequency == cpu frequency, 0x00: per. freq. = crystal freq.
    2970:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2974:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2978:	e2833c01 	add	r3, r3, #256	; 0x100
    297c:	e3a02001 	mov	r2, #1
    2980:	e5832000 	str	r2, [r3]
  pll_init();
    2984:	eb0000f1 	bl	2d50 <pll_init>
  pll_feed();
    2988:	eb000100 	bl	2d90 <pll_feed>
  init_ports();
    298c:	eb000039 	bl	2a78 <init_ports>
  UART0Initialize(57600);	//debug / command
    2990:	e3a00ce1 	mov	r0, #57600	; 0xe100
    2994:	eb00019c 	bl	300c <UART0Initialize>
  UART1Initialize(57600);	//57600 Servo / GPS, 38400 "indoor GPS"
    2998:	e3a00ce1 	mov	r0, #57600	; 0xe100
    299c:	eb000238 	bl	3284 <UART1Initialize>
  init_spi();
    29a0:	eb0000b5 	bl	2c7c <init_spi>
  init_spi1();
    29a4:	eb0000c2 	bl	2cb4 <init_spi1>
  init_timer0();
    29a8:	eb00005c 	bl	2b20 <init_timer0>
//  I2CInit(I2CMASTER);
  PWM_Init();
    29ac:	eb000085 	bl	2bc8 <PWM_Init>
  ADCInit(ADC_CLK);
    29b0:	e3a0093d 	mov	r0, #999424	; 0xf4000
    29b4:	e2800d09 	add	r0, r0, #576	; 0x240
    29b8:	eb000a5a 	bl	5328 <ADCInit>
  init_interrupts();
    29bc:	eb000002 	bl	29cc <init_interrupts>
 }
    29c0:	e24bd00c 	sub	sp, fp, #12
    29c4:	e89d6800 	ldm	sp, {fp, sp, lr}
    29c8:	e12fff1e 	bx	lr

000029cc <init_interrupts>:

void init_interrupts(void)
{
    29cc:	e1a0c00d 	mov	ip, sp
    29d0:	e92dd800 	push	{fp, ip, lr, pc}
    29d4:	e24cb004 	sub	fp, ip, #4
  init_VIC();
    29d8:	eb0009a6 	bl	5078 <init_VIC>

  //Timer0 interrupt
  install_irq( TIMER0_INT, (void *) timer0ISR );
    29dc:	e3a00004 	mov	r0, #4
    29e0:	e59f1080 	ldr	r1, [pc, #128]	; 2a68 <init_interrupts+0x9c>
    29e4:	eb0009d4 	bl	513c <install_irq>

  //UART1 interrupt
  #ifdef UART1_IRQ
  install_irq( UART1_INT, (void *) uart1ISR );
    29e8:	e3a00007 	mov	r0, #7
    29ec:	e59f1078 	ldr	r1, [pc, #120]	; 2a6c <init_interrupts+0xa0>
    29f0:	eb0009d1 	bl	513c <install_irq>
  U1IER = 3; //=3; enable THRE and RX interrupt
    29f4:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    29f8:	e2833801 	add	r3, r3, #65536	; 0x10000
    29fc:	e3a02003 	mov	r2, #3
    2a00:	e5832000 	str	r2, [r3]
  #endif

  //UART0 interrupt
  #ifdef UART0_IRQ
  install_irq( UART0_INT, (void *) uart0ISR );
    2a04:	e3a00006 	mov	r0, #6
    2a08:	e59f1060 	ldr	r1, [pc, #96]	; 2a70 <init_interrupts+0xa4>
    2a0c:	eb0009ca 	bl	513c <install_irq>
  U0IER = 3; //=3; enable THRE and RX interrupt
    2a10:	e3a03903 	mov	r3, #49152	; 0xc000
    2a14:	e283324e 	add	r3, r3, #-536870908	; 0xe0000004
    2a18:	e3a02003 	mov	r2, #3
    2a1c:	e5832000 	str	r2, [r3]
  //I2C0 interrupt
//  install_irq( I2C0_INT, (void *) I2C0MasterHandler );
//  I20CONSET = I2CONSET_I2EN;

  //SSP interrupt
  install_irq( SPI1_INT, (void *) SSPHandler );
    2a20:	e3a0000b 	mov	r0, #11
    2a24:	e59f1048 	ldr	r1, [pc, #72]	; 2a74 <init_interrupts+0xa8>
    2a28:	eb0009c3 	bl	513c <install_irq>
  /* Set SSPINMS registers to enable interrupts */
  /* enable all interrupts, Rx overrun, Rx timeout, RX FIFO half full int,
  TX FIFO half empty int */
  SSPIMSC = SSPIMSC_TXIM | SSPIMSC_RXIM | SSPIMSC_RORIM;// | SSPIMSC_RTIM;
    2a2c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2a30:	e283391a 	add	r3, r3, #425984	; 0x68000
    2a34:	e2833014 	add	r3, r3, #20
    2a38:	e3a0200d 	mov	r2, #13
    2a3c:	e5832000 	str	r2, [r3]
  /* SSP Enabled */
  SSPCR1 |= SSPCR1_SSE;
    2a40:	e3a0224e 	mov	r2, #-536870908	; 0xe0000004
    2a44:	e282291a 	add	r2, r2, #425984	; 0x68000
    2a48:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2a4c:	e283391a 	add	r3, r3, #425984	; 0x68000
    2a50:	e5933000 	ldr	r3, [r3]
    2a54:	e3833002 	orr	r3, r3, #2
    2a58:	e5823000 	str	r3, [r2]
}
    2a5c:	e24bd00c 	sub	sp, fp, #12
    2a60:	e89d6800 	ldm	sp, {fp, sp, lr}
    2a64:	e12fff1e 	bx	lr
    2a68:	000024b4 	.word	0x000024b4
    2a6c:	00003248 	.word	0x00003248
    2a70:	00002ed0 	.word	0x00002ed0
    2a74:	00005714 	.word	0x00005714

00002a78 <init_ports>:


void init_ports(void)
{
    2a78:	e1a0c00d 	mov	ip, sp
    2a7c:	e92dd800 	push	{fp, ip, lr, pc}
    2a80:	e24cb004 	sub	fp, ip, #4
 * Byte3_sel = 0b00110000 = 0x30
 * Byte1_io_dir = 0x00
 * or SD_Logging => Byte1_io_dir=0x40
 */

 	PINSEL0=0x30C51555;
    2a84:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2a88:	e283390b 	add	r3, r3, #180224	; 0x2c000
    2a8c:	e59f2084 	ldr	r2, [pc, #132]	; 2b18 <init_ports+0xa0>
    2a90:	e5832000 	str	r2, [r3]
  * P0.30: CURRENT_1: -> 01
  * P0.31: IO_in -> 00
  * Byte3: 0b00010101 = 0x15
  * Byte3_io_dir=0x00
  */
 PINSEL1 = 0x150406A8;
    2a94:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2a98:	e283390b 	add	r3, r3, #180224	; 0x2c000
    2a9c:	e59f2078 	ldr	r2, [pc, #120]	; 2b1c <init_ports+0xa4>
    2aa0:	e5832000 	str	r2, [r3]

 PINSEL2 = 0x00000004;
    2aa4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2aa8:	e283390b 	add	r3, r3, #180224	; 0x2c000
    2aac:	e2833014 	add	r3, r3, #20
    2ab0:	e3a02004 	mov	r2, #4
    2ab4:	e5832000 	str	r2, [r3]

 IODIR0 = 0x0030B480;
    2ab8:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    2abc:	e282290a 	add	r2, r2, #163840	; 0x28000
    2ac0:	e3a039c2 	mov	r3, #3178496	; 0x308000
    2ac4:	e2833dd2 	add	r3, r3, #13440	; 0x3480
    2ac8:	e5823000 	str	r3, [r2]

 IOSET0 = (1<<EXT_NCS)|(1<<11); //all nCS high
    2acc:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2ad0:	e283390a 	add	r3, r3, #163840	; 0x28000
    2ad4:	e3a02d22 	mov	r2, #2176	; 0x880
    2ad8:	e5832000 	str	r2, [r3]
 * P1.24: LED1/IO_out
 * P1.25: LED2/IO_out
 *
 */

 IODIR1 = 0x03030000;
    2adc:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2ae0:	e282290a 	add	r2, r2, #163840	; 0x28000
    2ae4:	e2822018 	add	r2, r2, #24
    2ae8:	e3a03403 	mov	r3, #50331648	; 0x3000000
    2aec:	e2833803 	add	r3, r3, #196608	; 0x30000
    2af0:	e5823000 	str	r3, [r2]
 IOSET1 = ((1<<24)|(1<<16)); //turn off LED1, turn beeper off
    2af4:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2af8:	e282290a 	add	r2, r2, #163840	; 0x28000
    2afc:	e2822014 	add	r2, r2, #20
    2b00:	e3a03401 	mov	r3, #16777216	; 0x1000000
    2b04:	e2833801 	add	r3, r3, #65536	; 0x10000
    2b08:	e5823000 	str	r3, [r2]

}
    2b0c:	e24bd00c 	sub	sp, fp, #12
    2b10:	e89d6800 	ldm	sp, {fp, sp, lr}
    2b14:	e12fff1e 	bx	lr
    2b18:	30c51555 	.word	0x30c51555
    2b1c:	150406a8 	.word	0x150406a8

00002b20 <init_timer0>:

void init_timer0(void)
{
    2b20:	e1a0c00d 	mov	ip, sp
    2b24:	e92dd810 	push	{r4, fp, ip, lr, pc}
    2b28:	e24cb004 	sub	fp, ip, #4
  T0TC=0;
    2b2c:	e3a03901 	mov	r3, #16384	; 0x4000
    2b30:	e283328e 	add	r3, r3, #-536870904	; 0xe0000008
    2b34:	e3a02000 	mov	r2, #0
    2b38:	e5832000 	str	r2, [r3]
  T0TCR=0x0;    //Reset timer0
    2b3c:	e3a03901 	mov	r3, #16384	; 0x4000
    2b40:	e283324e 	add	r3, r3, #-536870908	; 0xe0000004
    2b44:	e3a02000 	mov	r2, #0
    2b48:	e5832000 	str	r2, [r3]
  T0MCR=0x3;    //Interrupt on match MR0 and reset counter
    2b4c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2b50:	e2833901 	add	r3, r3, #16384	; 0x4000
    2b54:	e2833014 	add	r3, r3, #20
    2b58:	e3a02003 	mov	r2, #3
    2b5c:	e5832000 	str	r2, [r3]
  T0PR=0;
    2b60:	e3a03901 	mov	r3, #16384	; 0x4000
    2b64:	e28332ce 	add	r3, r3, #-536870900	; 0xe000000c
    2b68:	e3a02000 	mov	r2, #0
    2b6c:	e5832000 	str	r2, [r3]
  T0PC=0;     //Prescale Counter = 0
    2b70:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2b74:	e2833901 	add	r3, r3, #16384	; 0x4000
    2b78:	e2833010 	add	r3, r3, #16
    2b7c:	e3a02000 	mov	r2, #0
    2b80:	e5832000 	str	r2, [r3]
  T0MR0=peripheralClockFrequency()/ControllerCyclesPerSecond; // /200 => 200 Hz Period
    2b84:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    2b88:	e2844901 	add	r4, r4, #16384	; 0x4000
    2b8c:	e2844018 	add	r4, r4, #24
    2b90:	eb000096 	bl	2df0 <peripheralClockFrequency>
    2b94:	e1a02000 	mov	r2, r0
    2b98:	e59f3024 	ldr	r3, [pc, #36]	; 2bc4 <init_timer0+0xa4>
    2b9c:	e0831392 	umull	r1, r3, r2, r3
    2ba0:	e1a03323 	lsr	r3, r3, #6
    2ba4:	e5843000 	str	r3, [r4]
  T0TCR=0x1;   //Set timer0
    2ba8:	e3a03901 	mov	r3, #16384	; 0x4000
    2bac:	e283324e 	add	r3, r3, #-536870908	; 0xe0000004
    2bb0:	e3a02001 	mov	r2, #1
    2bb4:	e5832000 	str	r2, [r3]
}
    2bb8:	e24bd010 	sub	sp, fp, #16
    2bbc:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
    2bc0:	e12fff1e 	bx	lr
    2bc4:	10624dd3 	.word	0x10624dd3

00002bc8 <PWM_Init>:

void PWM_Init( void )
{
    2bc8:	e1a0c00d 	mov	ip, sp
    2bcc:	e92dd800 	push	{fp, ip, lr, pc}
    2bd0:	e24cb004 	sub	fp, ip, #4
  //  match_counter = 0;
  //  PINSEL0 = 0x000A800A;	/* set GPIOs for all PWMs */
  //  PINSEL1 = 0x00000400;
    PWMTCR = TCR_RESET;		/* Counter Reset */
    2bd4:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2bd8:	e2833905 	add	r3, r3, #81920	; 0x14000
    2bdc:	e3a02002 	mov	r2, #2
    2be0:	e5832000 	str	r2, [r3]

    PWMPR = 0x00;		/* count frequency:Fpclk */
    2be4:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    2be8:	e2833905 	add	r3, r3, #81920	; 0x14000
    2bec:	e3a02000 	mov	r2, #0
    2bf0:	e5832000 	str	r2, [r3]
    PWMMCR = PWMMR0R;	/* interrupt on PWMMR0, reset on PWMMR0, reset
    2bf4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2bf8:	e2833905 	add	r3, r3, #81920	; 0x14000
    2bfc:	e2833014 	add	r3, r3, #20
    2c00:	e3a02002 	mov	r2, #2
    2c04:	e5832000 	str	r2, [r3]
				TC if PWM0 matches */
    PWMMR0 = 1179648 ;
    2c08:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2c0c:	e2833905 	add	r3, r3, #81920	; 0x14000
    2c10:	e2833018 	add	r3, r3, #24
    2c14:	e3a02812 	mov	r2, #1179648	; 0x120000
    2c18:	e5832000 	str	r2, [r3]
    PWMMR5 = 88470;
    2c1c:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2c20:	e2822905 	add	r2, r2, #81920	; 0x14000
    2c24:	e2822044 	add	r2, r2, #68	; 0x44
    2c28:	e3a03b56 	mov	r3, #88064	; 0x15800
    2c2c:	e2833f65 	add	r3, r3, #404	; 0x194
    2c30:	e2833002 	add	r3, r3, #2
    2c34:	e5823000 	str	r3, [r2]

    /* all PWM latch enabled */
    PWMLER = LER5_EN;
    2c38:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2c3c:	e2833905 	add	r3, r3, #81920	; 0x14000
    2c40:	e2833050 	add	r3, r3, #80	; 0x50
    2c44:	e3a02020 	mov	r2, #32
    2c48:	e5832000 	str	r2, [r3]

        /* All single edge, all enable */
    PWMPCR = PWMENA1 | PWMENA2 | PWMENA3 | PWMENA4 | PWMENA5 | PWMENA6;
    2c4c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2c50:	e2833905 	add	r3, r3, #81920	; 0x14000
    2c54:	e283304c 	add	r3, r3, #76	; 0x4c
    2c58:	e3a02c7e 	mov	r2, #32256	; 0x7e00
    2c5c:	e5832000 	str	r2, [r3]
    PWMTCR = TCR_CNT_EN | TCR_PWM_EN;	/* counter enable, PWM enable */
    2c60:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2c64:	e2833905 	add	r3, r3, #81920	; 0x14000
    2c68:	e3a02009 	mov	r2, #9
    2c6c:	e5832000 	str	r2, [r3]
}
    2c70:	e24bd00c 	sub	sp, fp, #12
    2c74:	e89d6800 	ldm	sp, {fp, sp, lr}
    2c78:	e12fff1e 	bx	lr

00002c7c <init_spi>:


void init_spi(void)
{
    2c7c:	e1a0c00d 	mov	ip, sp
    2c80:	e92dd800 	push	{fp, ip, lr, pc}
    2c84:	e24cb004 	sub	fp, ip, #4
  S0SPCCR=0x04; //30 clock-cycles (~60MHz) = 1 SPI cycle => SPI @ 2MHz
    2c88:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    2c8c:	e2833802 	add	r3, r3, #131072	; 0x20000
    2c90:	e3a02004 	mov	r2, #4
    2c94:	e5832000 	str	r2, [r3]
  S0SPCR=0x20;  //LPC is Master
    2c98:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2c9c:	e2833802 	add	r3, r3, #131072	; 0x20000
    2ca0:	e3a02020 	mov	r2, #32
    2ca4:	e5832000 	str	r2, [r3]
}
    2ca8:	e24bd00c 	sub	sp, fp, #12
    2cac:	e89d6800 	ldm	sp, {fp, sp, lr}
    2cb0:	e12fff1e 	bx	lr

00002cb4 <init_spi1>:

void init_spi1(void)
{
    2cb4:	e1a0c00d 	mov	ip, sp
    2cb8:	e92dd800 	push	{fp, ip, lr, pc}
    2cbc:	e24cb004 	sub	fp, ip, #4
    2cc0:	e24dd004 	sub	sp, sp, #4
	unsigned char i, Dummy;

    /* Set DSS data to 8-bit, Frame format SPI, CPOL = 0, CPHA = 0, and SCR is 3 */
    SSPCR0 = 0x040F;
    2cc4:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2cc8:	e282291a 	add	r2, r2, #425984	; 0x68000
    2ccc:	e3a03b01 	mov	r3, #1024	; 0x400
    2cd0:	e283300f 	add	r3, r3, #15
    2cd4:	e5823000 	str	r3, [r2]

    /* SSPCPSR clock prescale register, master mode, minimum divisor is 0x02 */
    SSPCPSR = 0x1B;
    2cd8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2cdc:	e283391a 	add	r3, r3, #425984	; 0x68000
    2ce0:	e2833010 	add	r3, r3, #16
    2ce4:	e3a0201b 	mov	r2, #27
    2ce8:	e5832000 	str	r2, [r3]

    for ( i = 0; i < FIFOSIZE; i++ )
    2cec:	e3a03000 	mov	r3, #0
    2cf0:	e54b300e 	strb	r3, [fp, #-14]
    2cf4:	ea000006 	b	2d14 <init_spi1+0x60>
    {
	Dummy = SSPDR;		/* clear the RxFIFO */
    2cf8:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    2cfc:	e283391a 	add	r3, r3, #425984	; 0x68000
    2d00:	e5933000 	ldr	r3, [r3]
    2d04:	e54b300d 	strb	r3, [fp, #-13]
    SSPCR0 = 0x040F;

    /* SSPCPSR clock prescale register, master mode, minimum divisor is 0x02 */
    SSPCPSR = 0x1B;

    for ( i = 0; i < FIFOSIZE; i++ )
    2d08:	e55b300e 	ldrb	r3, [fp, #-14]
    2d0c:	e2833001 	add	r3, r3, #1
    2d10:	e54b300e 	strb	r3, [fp, #-14]
    2d14:	e55b300e 	ldrb	r3, [fp, #-14]
    2d18:	e3530007 	cmp	r3, #7
    2d1c:	9afffff5 	bls	2cf8 <init_spi1+0x44>
    {
	Dummy = SSPDR;		/* clear the RxFIFO */
    }

    /*all ints deactivated*/
	SSPIMSC = 0;
    2d20:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2d24:	e283391a 	add	r3, r3, #425984	; 0x68000
    2d28:	e2833014 	add	r3, r3, #20
    2d2c:	e3a02000 	mov	r2, #0
    2d30:	e5832000 	str	r2, [r3]

    /* Device select as master, SSP Enabled */
    SSPCR1 = 0x00;// | SSPCR1_SSE;
    2d34:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2d38:	e283391a 	add	r3, r3, #425984	; 0x68000
    2d3c:	e3a02000 	mov	r2, #0
    2d40:	e5832000 	str	r2, [r3]

    return;


}
    2d44:	e24bd00c 	sub	sp, fp, #12
    2d48:	e89d6800 	ldm	sp, {fp, sp, lr}
    2d4c:	e12fff1e 	bx	lr

00002d50 <pll_init>:

void pll_init(void)
{
    2d50:	e1a0c00d 	mov	ip, sp
    2d54:	e92dd800 	push	{fp, ip, lr, pc}
    2d58:	e24cb004 	sub	fp, ip, #4
  PLLCFG=0x23;    //0b00100011; => M=4,0690; P=2;
    2d5c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2d60:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2d64:	e2833084 	add	r3, r3, #132	; 0x84
    2d68:	e3a02023 	mov	r2, #35	; 0x23
    2d6c:	e5832000 	str	r2, [r3]
  PLLCON=0x03;    //PLLE=1, PLLC=1 => PLL enabled as system clock
    2d70:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2d74:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2d78:	e2833080 	add	r3, r3, #128	; 0x80
    2d7c:	e3a02003 	mov	r2, #3
    2d80:	e5832000 	str	r2, [r3]
}
    2d84:	e24bd00c 	sub	sp, fp, #12
    2d88:	e89d6800 	ldm	sp, {fp, sp, lr}
    2d8c:	e12fff1e 	bx	lr

00002d90 <pll_feed>:

void pll_feed(void)
{
    2d90:	e1a0c00d 	mov	ip, sp
    2d94:	e92dd800 	push	{fp, ip, lr, pc}
    2d98:	e24cb004 	sub	fp, ip, #4
  PLLFEED=0xAA;
    2d9c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2da0:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2da4:	e283308c 	add	r3, r3, #140	; 0x8c
    2da8:	e3a020aa 	mov	r2, #170	; 0xaa
    2dac:	e5832000 	str	r2, [r3]
  PLLFEED=0x55;
    2db0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2db4:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2db8:	e283308c 	add	r3, r3, #140	; 0x8c
    2dbc:	e3a02055 	mov	r2, #85	; 0x55
    2dc0:	e5832000 	str	r2, [r3]
}
    2dc4:	e24bd00c 	sub	sp, fp, #12
    2dc8:	e89d6800 	ldm	sp, {fp, sp, lr}
    2dcc:	e12fff1e 	bx	lr

00002dd0 <processorClockFrequency>:

unsigned int processorClockFrequency(void)
{
    2dd0:	e1a0c00d 	mov	ip, sp
    2dd4:	e92dd800 	push	{fp, ip, lr, pc}
    2dd8:	e24cb004 	sub	fp, ip, #4
  return 58982400;
    2ddc:	e3a037e1 	mov	r3, #58982400	; 0x3840000
}
    2de0:	e1a00003 	mov	r0, r3
    2de4:	e24bd00c 	sub	sp, fp, #12
    2de8:	e89d6800 	ldm	sp, {fp, sp, lr}
    2dec:	e12fff1e 	bx	lr

00002df0 <peripheralClockFrequency>:

unsigned int peripheralClockFrequency(void)
{
    2df0:	e1a0c00d 	mov	ip, sp
    2df4:	e92dd800 	push	{fp, ip, lr, pc}
    2df8:	e24cb004 	sub	fp, ip, #4
    2dfc:	e24dd008 	sub	sp, sp, #8
  unsigned int divider;
  switch (VPBDIV & 3)
    2e00:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2e04:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2e08:	e2833c01 	add	r3, r3, #256	; 0x100
    2e0c:	e5933000 	ldr	r3, [r3]
    2e10:	e2033003 	and	r3, r3, #3
    2e14:	e50b3014 	str	r3, [fp, #-20]
    2e18:	e51b3014 	ldr	r3, [fp, #-20]
    2e1c:	e3530001 	cmp	r3, #1
    2e20:	0a000009 	beq	2e4c <peripheralClockFrequency+0x5c>
    2e24:	e51b3014 	ldr	r3, [fp, #-20]
    2e28:	e3530001 	cmp	r3, #1
    2e2c:	3a000003 	bcc	2e40 <peripheralClockFrequency+0x50>
    2e30:	e51b3014 	ldr	r3, [fp, #-20]
    2e34:	e3530002 	cmp	r3, #2
    2e38:	0a000006 	beq	2e58 <peripheralClockFrequency+0x68>
    2e3c:	ea000007 	b	2e60 <peripheralClockFrequency+0x70>
    {
      case 0:
        divider = 4;
    2e40:	e3a03004 	mov	r3, #4
    2e44:	e50b3010 	str	r3, [fp, #-16]
        break;
    2e48:	ea000004 	b	2e60 <peripheralClockFrequency+0x70>
      case 1:
        divider = 1;
    2e4c:	e3a03001 	mov	r3, #1
    2e50:	e50b3010 	str	r3, [fp, #-16]
        break;
    2e54:	ea000001 	b	2e60 <peripheralClockFrequency+0x70>
      case 2:
        divider = 2;
    2e58:	e3a03002 	mov	r3, #2
    2e5c:	e50b3010 	str	r3, [fp, #-16]
        break;
    }
  return processorClockFrequency() / divider;
    2e60:	ebffffda 	bl	2dd0 <processorClockFrequency>
    2e64:	e1a03000 	mov	r3, r0
    2e68:	e1a00003 	mov	r0, r3
    2e6c:	e51b1010 	ldr	r1, [fp, #-16]
    2e70:	eb003e88 	bl	12898 <____udivsi3_from_arm>
    2e74:	e1a03000 	mov	r3, r0
}
    2e78:	e1a00003 	mov	r0, r3
    2e7c:	e24bd00c 	sub	sp, fp, #12
    2e80:	e89d6800 	ldm	sp, {fp, sp, lr}
    2e84:	e12fff1e 	bx	lr

00002e88 <delay>:

void delay(int n)
{
    2e88:	e1a0c00d 	mov	ip, sp
    2e8c:	e92dd800 	push	{fp, ip, lr, pc}
    2e90:	e24cb004 	sub	fp, ip, #4
    2e94:	e24dd008 	sub	sp, sp, #8
    2e98:	e50b0014 	str	r0, [fp, #-20]
  volatile int i;
  for (i = 0; i < n; ++i);
    2e9c:	e3a03000 	mov	r3, #0
    2ea0:	e50b3010 	str	r3, [fp, #-16]
    2ea4:	ea000002 	b	2eb4 <delay+0x2c>
    2ea8:	e51b3010 	ldr	r3, [fp, #-16]
    2eac:	e2833001 	add	r3, r3, #1
    2eb0:	e50b3010 	str	r3, [fp, #-16]
    2eb4:	e51b2010 	ldr	r2, [fp, #-16]
    2eb8:	e51b3014 	ldr	r3, [fp, #-20]
    2ebc:	e1520003 	cmp	r2, r3
    2ec0:	bafffff8 	blt	2ea8 <delay+0x20>
}
    2ec4:	e24bd00c 	sub	sp, fp, #12
    2ec8:	e89d6800 	ldm	sp, {fp, sp, lr}
    2ecc:	e12fff1e 	bx	lr

00002ed0 <uart0ISR>:
volatile int toggle = 0;
volatile int lps = 0;

// user uart
void uart0ISR(void) __irq
{
    2ed0:	e1a0c00d 	mov	ip, sp
    2ed4:	e92dd810 	push	{r4, fp, ip, lr, pc}
    2ed8:	e24cb004 	sub	fp, ip, #4
    2edc:	e24dd004 	sub	sp, sp, #4

  // Read IIR to clear interrupt and find out the cause
  IENABLE;

  // Handle UART interrupt
  iir = (U0IIR >> 1) & 0x7;
    2ee0:	e3a03903 	mov	r3, #49152	; 0xc000
    2ee4:	e283328e 	add	r3, r3, #-536870904	; 0xe0000008
    2ee8:	e5933000 	ldr	r3, [r3]
    2eec:	e1a030a3 	lsr	r3, r3, #1
    2ef0:	e2033007 	and	r3, r3, #7
    2ef4:	e50b3014 	str	r3, [fp, #-20]
  if (iir == 1) // Transmitter is empty
    2ef8:	e51b3014 	ldr	r3, [fp, #-20]
    2efc:	e3530001 	cmp	r3, #1
    2f00:	1a000012 	bne	2f50 <uart0ISR+0x80>
  {
	// 0x20 -- On when U0THR (Transmitter Holding Register) is empty...
	while (RBCount(&u0s) != 0 && ((U0LSR & 0x20) != 0))
    2f04:	ea000005 	b	2f20 <uart0ISR+0x50>
	{ 
			U0THR = RBDequeue(&u0s);
    2f08:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    2f0c:	e2844903 	add	r4, r4, #49152	; 0xc000
    2f10:	e59f007c 	ldr	r0, [pc, #124]	; 2f94 <uart0ISR+0xc4>
    2f14:	ebfffca2 	bl	21a4 <RBDequeue>
    2f18:	e1a03000 	mov	r3, r0
    2f1c:	e5843000 	str	r3, [r4]
  // Handle UART interrupt
  iir = (U0IIR >> 1) & 0x7;
  if (iir == 1) // Transmitter is empty
  {
	// 0x20 -- On when U0THR (Transmitter Holding Register) is empty...
	while (RBCount(&u0s) != 0 && ((U0LSR & 0x20) != 0))
    2f20:	e59f006c 	ldr	r0, [pc, #108]	; 2f94 <uart0ISR+0xc4>
    2f24:	ebfffc9c 	bl	219c <RBCount>
    2f28:	e1a03000 	mov	r3, r0
    2f2c:	e3530000 	cmp	r3, #0
    2f30:	0a000006 	beq	2f50 <uart0ISR+0x80>
    2f34:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2f38:	e2833903 	add	r3, r3, #49152	; 0xc000
    2f3c:	e2833014 	add	r3, r3, #20
    2f40:	e5933000 	ldr	r3, [r3]
    2f44:	e2033020 	and	r3, r3, #32
    2f48:	e3530000 	cmp	r3, #0
    2f4c:	1affffed 	bne	2f08 <uart0ISR+0x38>
//  	RBEnqueue(&u0r, U0RBR);
 // 	RBEnqueue(&u0r, U0RBR);
  //	RBEnqueue(&u0r, U0RBR);
  //	RBEnqueue(&u0r, U0RBR);
  } 
  if (iir == 6)
    2f50:	e51b3014 	ldr	r3, [fp, #-20]
    2f54:	e3530006 	cmp	r3, #6
    2f58:	1a000006 	bne	2f78 <uart0ISR+0xa8>
	 RBEnqueue(&u0r, U0RBR);
    2f5c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2f60:	e2833903 	add	r3, r3, #49152	; 0xc000
    2f64:	e5933000 	ldr	r3, [r3]
    2f68:	e20330ff 	and	r3, r3, #255	; 0xff
    2f6c:	e59f0024 	ldr	r0, [pc, #36]	; 2f98 <uart0ISR+0xc8>
    2f70:	e1a01003 	mov	r1, r3
    2f74:	ebfffca8 	bl	221c <RBEnqueue>
  IDISABLE; 
  VICVectAddr = 0;		// Acknowledge Interrupt
    2f78:	e3a03000 	mov	r3, #0
    2f7c:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    2f80:	e3a02000 	mov	r2, #0
    2f84:	e5832000 	str	r2, [r3]
}
    2f88:	e24bd010 	sub	sp, fp, #16
    2f8c:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
    2f90:	e12fff1e 	bx	lr
    2f94:	40001ef4 	.word	0x40001ef4
    2f98:	40001e54 	.word	0x40001e54

00002f9c <emptyUART0>:

void emptyUART0(void)
{
    2f9c:	e1a0c00d 	mov	ip, sp
    2fa0:	e92dd800 	push	{fp, ip, lr, pc}
    2fa4:	e24cb004 	sub	fp, ip, #4
    2fa8:	e24dd004 	sub	sp, sp, #4
	char rcvd;

	while ( LSR0_RDR )
    2fac:	ea00000a 	b	2fdc <emptyUART0+0x40>
	{
		rcvd = U0RBR;
    2fb0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2fb4:	e2833903 	add	r3, r3, #49152	; 0xc000
    2fb8:	e5933000 	ldr	r3, [r3]
    2fbc:	e54b300d 	strb	r3, [fp, #-13]
		RBEnqueue(&u0r, rcvd);
    2fc0:	e55b300d 	ldrb	r3, [fp, #-13]
    2fc4:	e59f003c 	ldr	r0, [pc, #60]	; 3008 <emptyUART0+0x6c>
    2fc8:	e1a01003 	mov	r1, r3
    2fcc:	ebfffc92 	bl	221c <RBEnqueue>
		UART0WriteChar(rcvd);
    2fd0:	e55b300d 	ldrb	r3, [fp, #-13]
    2fd4:	e1a00003 	mov	r0, r3
    2fd8:	eb000066 	bl	3178 <UART0WriteChar>

void emptyUART0(void)
{
	char rcvd;

	while ( LSR0_RDR )
    2fdc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2fe0:	e2833903 	add	r3, r3, #49152	; 0xc000
    2fe4:	e2833014 	add	r3, r3, #20
    2fe8:	e5933000 	ldr	r3, [r3]
    2fec:	e2033001 	and	r3, r3, #1
    2ff0:	e20330ff 	and	r3, r3, #255	; 0xff
    2ff4:	e3530000 	cmp	r3, #0
    2ff8:	1affffec 	bne	2fb0 <emptyUART0+0x14>
	{
		rcvd = U0RBR;
		RBEnqueue(&u0r, rcvd);
		UART0WriteChar(rcvd);
	}
}
    2ffc:	e24bd00c 	sub	sp, fp, #12
    3000:	e89d6800 	ldm	sp, {fp, sp, lr}
    3004:	e12fff1e 	bx	lr
    3008:	40001e54 	.word	0x40001e54

0000300c <UART0Initialize>:

void UART0Initialize(unsigned int baud)
{
    300c:	e1a0c00d 	mov	ip, sp
    3010:	e92dd800 	push	{fp, ip, lr, pc}
    3014:	e24cb004 	sub	fp, ip, #4
    3018:	e24dd008 	sub	sp, sp, #8
    301c:	e50b0014 	str	r0, [fp, #-20]
  unsigned int divisor = peripheralClockFrequency() / (16 * baud);
    3020:	ebffff72 	bl	2df0 <peripheralClockFrequency>
    3024:	e1a02000 	mov	r2, r0
    3028:	e51b3014 	ldr	r3, [fp, #-20]
    302c:	e1a03203 	lsl	r3, r3, #4
    3030:	e1a00002 	mov	r0, r2
    3034:	e1a01003 	mov	r1, r3
    3038:	eb003e16 	bl	12898 <____udivsi3_from_arm>
    303c:	e1a03000 	mov	r3, r0
    3040:	e50b3010 	str	r3, [fp, #-16]
// U0IER
//  Bit0: RBR enable
//  Bit1: THRE enable

  //UART0
	LED(0,OFF);
    3044:	e3a00000 	mov	r0, #0
    3048:	e3a01000 	mov	r1, #0
    304c:	ebfffe19 	bl	28b8 <LED>
	LED(1,OFF);
    3050:	e3a00001 	mov	r0, #1
    3054:	e3a01000 	mov	r1, #0
    3058:	ebfffe16 	bl	28b8 <LED>

  RBInit(&u0s);
    305c:	e59f0090 	ldr	r0, [pc, #144]	; 30f4 <UART0Initialize+0xe8>
    3060:	ebfffbf4 	bl	2038 <RBInit>
  RBInit(&u0r); //Send / Receive uart buffers.
    3064:	e59f008c 	ldr	r0, [pc, #140]	; 30f8 <UART0Initialize+0xec>
    3068:	ebfffbf2 	bl	2038 <RBInit>
  U0LCR = 0x83; /* 8 bit, 1 stop bit, no parity, enable DLAB */
    306c:	e3a03903 	mov	r3, #49152	; 0xc000
    3070:	e28332ce 	add	r3, r3, #-536870900	; 0xe000000c
    3074:	e3a02083 	mov	r2, #131	; 0x83
    3078:	e5832000 	str	r2, [r3]
  U0DLL = divisor & 0xFF;
    307c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3080:	e2833903 	add	r3, r3, #49152	; 0xc000
    3084:	e51b2010 	ldr	r2, [fp, #-16]
    3088:	e20220ff 	and	r2, r2, #255	; 0xff
    308c:	e5832000 	str	r2, [r3]
  U0DLM = (divisor >> 8) & 0xFF;
    3090:	e3a02903 	mov	r2, #49152	; 0xc000
    3094:	e282224e 	add	r2, r2, #-536870908	; 0xe0000004
    3098:	e51b3010 	ldr	r3, [fp, #-16]
    309c:	e1a03423 	lsr	r3, r3, #8
    30a0:	e20330ff 	and	r3, r3, #255	; 0xff
    30a4:	e5823000 	str	r3, [r2]
  U0LCR &= ~0x80; /* Disable DLAB */
    30a8:	e3a02903 	mov	r2, #49152	; 0xc000
    30ac:	e28222ce 	add	r2, r2, #-536870900	; 0xe000000c
    30b0:	e3a03903 	mov	r3, #49152	; 0xc000
    30b4:	e28332ce 	add	r3, r3, #-536870900	; 0xe000000c
    30b8:	e5933000 	ldr	r3, [r3]
    30bc:	e3c33080 	bic	r3, r3, #128	; 0x80
    30c0:	e5823000 	str	r3, [r2]
  U0FCR = FIFO_ENABLE | TL3; // Enable FIFO's, interrupt every 14 characters.
    30c4:	e3a03903 	mov	r3, #49152	; 0xc000
    30c8:	e283328e 	add	r3, r3, #-536870904	; 0xe0000008
    30cc:	e3a020b1 	mov	r2, #177	; 0xb1
    30d0:	e5832000 	str	r2, [r3]
  U0TER = 0x80; //Enable transmitter.
    30d4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    30d8:	e2833903 	add	r3, r3, #49152	; 0xc000
    30dc:	e2833030 	add	r3, r3, #48	; 0x30
    30e0:	e3a02080 	mov	r2, #128	; 0x80
    30e4:	e5832000 	str	r2, [r3]
}
    30e8:	e24bd00c 	sub	sp, fp, #12
    30ec:	e89d6800 	ldm	sp, {fp, sp, lr}
    30f0:	e12fff1e 	bx	lr
    30f4:	40001ef4 	.word	0x40001ef4
    30f8:	40001e54 	.word	0x40001e54

000030fc <UART0Debug>:

void UART0Debug(char *msg, int length)
{
    30fc:	e1a0c00d 	mov	ip, sp
    3100:	e92dd800 	push	{fp, ip, lr, pc}
    3104:	e24cb004 	sub	fp, ip, #4
    3108:	e24dd008 	sub	sp, sp, #8
    310c:	e50b0010 	str	r0, [fp, #-16]
    3110:	e50b1014 	str	r1, [fp, #-20]

  while ( length > 0 )
    3114:	ea000011 	b	3160 <UART0Debug+0x64>
  {
	while ( (U0LSR & 0x20) == 0 ); // Wait until we can send...
    3118:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    311c:	e2833903 	add	r3, r3, #49152	; 0xc000
    3120:	e2833014 	add	r3, r3, #20
    3124:	e5933000 	ldr	r3, [r3]
    3128:	e2033020 	and	r3, r3, #32
    312c:	e3530000 	cmp	r3, #0
    3130:	0afffff8 	beq	3118 <UART0Debug+0x1c>
	length--;
    3134:	e51b3014 	ldr	r3, [fp, #-20]
    3138:	e2433001 	sub	r3, r3, #1
    313c:	e50b3014 	str	r3, [fp, #-20]
	U0THR = *msg;
    3140:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    3144:	e2822903 	add	r2, r2, #49152	; 0xc000
    3148:	e51b3010 	ldr	r3, [fp, #-16]
    314c:	e5d33000 	ldrb	r3, [r3]
    3150:	e5823000 	str	r3, [r2]
	msg++;
    3154:	e51b3010 	ldr	r3, [fp, #-16]
    3158:	e2833001 	add	r3, r3, #1
    315c:	e50b3010 	str	r3, [fp, #-16]
}

void UART0Debug(char *msg, int length)
{

  while ( length > 0 )
    3160:	e51b3014 	ldr	r3, [fp, #-20]
    3164:	e3530000 	cmp	r3, #0
    3168:	caffffea 	bgt	3118 <UART0Debug+0x1c>
	length--;
	U0THR = *msg;
	msg++;
  }

}
    316c:	e24bd00c 	sub	sp, fp, #12
    3170:	e89d6800 	ldm	sp, {fp, sp, lr}
    3174:	e12fff1e 	bx	lr

00003178 <UART0WriteChar>:

//Write to UART0
void UART0WriteChar(unsigned char ch)
{
    3178:	e1a0c00d 	mov	ip, sp
    317c:	e92dd800 	push	{fp, ip, lr, pc}
    3180:	e24cb004 	sub	fp, ip, #4
    3184:	e24dd004 	sub	sp, sp, #4
    3188:	e1a03000 	mov	r3, r0
    318c:	e54b3010 	strb	r3, [fp, #-16]
  if ( U0LSR & 0x20 ) // Transmitter Empty, so we need to write directly to transmitter.
    3190:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3194:	e2833903 	add	r3, r3, #49152	; 0xc000
    3198:	e2833014 	add	r3, r3, #20
    319c:	e5933000 	ldr	r3, [r3]
    31a0:	e2033020 	and	r3, r3, #32
    31a4:	e3530000 	cmp	r3, #0
    31a8:	0a000004 	beq	31c0 <UART0WriteChar+0x48>
	U0THR = ch;
    31ac:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    31b0:	e2833903 	add	r3, r3, #49152	; 0xc000
    31b4:	e55b2010 	ldrb	r2, [fp, #-16]
    31b8:	e5832000 	str	r2, [r3]
    31bc:	ea000003 	b	31d0 <UART0WriteChar+0x58>
  else
	RBEnqueue(&u0s, ch);
    31c0:	e55b3010 	ldrb	r3, [fp, #-16]
    31c4:	e59f0010 	ldr	r0, [pc, #16]	; 31dc <UART0WriteChar+0x64>
    31c8:	e1a01003 	mov	r1, r3
    31cc:	ebfffc12 	bl	221c <RBEnqueue>
}
    31d0:	e24bd00c 	sub	sp, fp, #12
    31d4:	e89d6800 	ldm	sp, {fp, sp, lr}
    31d8:	e12fff1e 	bx	lr
    31dc:	40001ef4 	.word	0x40001ef4

000031e0 <uart0Prime>:

// Primes the UART send buffer.
void uart0Prime(void)
{
    31e0:	e1a0c00d 	mov	ip, sp
    31e4:	e92dd810 	push	{r4, fp, ip, lr, pc}
    31e8:	e24cb004 	sub	fp, ip, #4
	while ( RBCount(&u0s) > 0 )
    31ec:	ea00000c 	b	3224 <uart0Prime+0x44>
	{
		while (!(U0LSR & 0x20));
    31f0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    31f4:	e2833903 	add	r3, r3, #49152	; 0xc000
    31f8:	e2833014 	add	r3, r3, #20
    31fc:	e5933000 	ldr	r3, [r3]
    3200:	e2033020 	and	r3, r3, #32
    3204:	e3530000 	cmp	r3, #0
    3208:	0afffff8 	beq	31f0 <uart0Prime+0x10>
	//if ( U0LSR & 0x20 ) //If transmitter is empty
		U0THR = RBDequeue(&u0s); //Write to the transmitter
    320c:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    3210:	e2844903 	add	r4, r4, #49152	; 0xc000
    3214:	e59f0028 	ldr	r0, [pc, #40]	; 3244 <uart0Prime+0x64>
    3218:	ebfffbe1 	bl	21a4 <RBDequeue>
    321c:	e1a03000 	mov	r3, r0
    3220:	e5843000 	str	r3, [r4]
}

// Primes the UART send buffer.
void uart0Prime(void)
{
	while ( RBCount(&u0s) > 0 )
    3224:	e59f0018 	ldr	r0, [pc, #24]	; 3244 <uart0Prime+0x64>
    3228:	ebfffbdb 	bl	219c <RBCount>
    322c:	e1a03000 	mov	r3, r0
    3230:	e3530000 	cmp	r3, #0
    3234:	caffffed 	bgt	31f0 <uart0Prime+0x10>
	{
		while (!(U0LSR & 0x20));
	//if ( U0LSR & 0x20 ) //If transmitter is empty
		U0THR = RBDequeue(&u0s); //Write to the transmitter
	}
}
    3238:	e24bd010 	sub	sp, fp, #16
    323c:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
    3240:	e12fff1e 	bx	lr
    3244:	40001ef4 	.word	0x40001ef4

00003248 <uart1ISR>:



// GPS Uart
void uart1ISR(void) __irq
{
    3248:	e1a0c00d 	mov	ip, sp
    324c:	e92dd800 	push	{fp, ip, lr, pc}
    3250:	e24cb004 	sub	fp, ip, #4
    3254:	e24dd008 	sub	sp, sp, #8
  unsigned char t;
  IENABLE;
  unsigned iir = U1IIR;
    3258:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    325c:	e2833801 	add	r3, r3, #65536	; 0x10000
    3260:	e5933000 	ldr	r3, [r3]
    3264:	e50b3010 	str	r3, [fp, #-16]
      case 6:
        // CTI interrupt
        break;
   }
  IDISABLE;
  VICVectAddr = 0;		/* Acknowledge Interrupt */
    3268:	e3a03000 	mov	r3, #0
    326c:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    3270:	e3a02000 	mov	r2, #0
    3274:	e5832000 	str	r2, [r3]
}
    3278:	e24bd00c 	sub	sp, fp, #12
    327c:	e89d6800 	ldm	sp, {fp, sp, lr}
    3280:	e12fff1e 	bx	lr

00003284 <UART1Initialize>:



// Uart1 seems to get used for GPS.
void UART1Initialize(unsigned int baud)
{
    3284:	e1a0c00d 	mov	ip, sp
    3288:	e92dd800 	push	{fp, ip, lr, pc}
    328c:	e24cb004 	sub	fp, ip, #4
    3290:	e24dd008 	sub	sp, sp, #8
    3294:	e50b0014 	str	r0, [fp, #-20]
  unsigned int divisor = peripheralClockFrequency() / (16 * baud);
    3298:	ebfffed4 	bl	2df0 <peripheralClockFrequency>
    329c:	e1a02000 	mov	r2, r0
    32a0:	e51b3014 	ldr	r3, [fp, #-20]
    32a4:	e1a03203 	lsl	r3, r3, #4
    32a8:	e1a00002 	mov	r0, r2
    32ac:	e1a01003 	mov	r1, r3
    32b0:	eb003d78 	bl	12898 <____udivsi3_from_arm>
    32b4:	e1a03000 	mov	r3, r0
    32b8:	e50b3010 	str	r3, [fp, #-16]
//UART1
  U1LCR = 0x83; /* 8 bit, 1 stop bit, no parity, enable DLAB */
    32bc:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    32c0:	e2833801 	add	r3, r3, #65536	; 0x10000
    32c4:	e3a02083 	mov	r2, #131	; 0x83
    32c8:	e5832000 	str	r2, [r3]
  U1DLL = divisor & 0xFF;
    32cc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    32d0:	e2833801 	add	r3, r3, #65536	; 0x10000
    32d4:	e51b2010 	ldr	r2, [fp, #-16]
    32d8:	e20220ff 	and	r2, r2, #255	; 0xff
    32dc:	e5832000 	str	r2, [r3]
  U1DLM = (divisor >> 8) & 0xFF;
    32e0:	e3a0224e 	mov	r2, #-536870908	; 0xe0000004
    32e4:	e2822801 	add	r2, r2, #65536	; 0x10000
    32e8:	e51b3010 	ldr	r3, [fp, #-16]
    32ec:	e1a03423 	lsr	r3, r3, #8
    32f0:	e20330ff 	and	r3, r3, #255	; 0xff
    32f4:	e5823000 	str	r3, [r2]
  U1LCR &= ~0x80; /* Disable DLAB */
    32f8:	e3a022ce 	mov	r2, #-536870900	; 0xe000000c
    32fc:	e2822801 	add	r2, r2, #65536	; 0x10000
    3300:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    3304:	e2833801 	add	r3, r3, #65536	; 0x10000
    3308:	e5933000 	ldr	r3, [r3]
    330c:	e3c33080 	bic	r3, r3, #128	; 0x80
    3310:	e5823000 	str	r3, [r2]
  U1FCR = 1;
    3314:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    3318:	e2833801 	add	r3, r3, #65536	; 0x10000
    331c:	e3a02001 	mov	r2, #1
    3320:	e5832000 	str	r2, [r3]
}
    3324:	e24bd00c 	sub	sp, fp, #12
    3328:	e89d6800 	ldm	sp, {fp, sp, lr}
    332c:	e12fff1e 	bx	lr

00003330 <UART1WriteChar>:


//Write to UART1
void UART1WriteChar(unsigned char ch)
{
    3330:	e1a0c00d 	mov	ip, sp
    3334:	e92dd800 	push	{fp, ip, lr, pc}
    3338:	e24cb004 	sub	fp, ip, #4
    333c:	e24dd004 	sub	sp, sp, #4
    3340:	e1a03000 	mov	r3, r0
    3344:	e54b3010 	strb	r3, [fp, #-16]
  while ((U1LSR & 0x20) == 0);
    3348:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    334c:	e2833801 	add	r3, r3, #65536	; 0x10000
    3350:	e2833014 	add	r3, r3, #20
    3354:	e5933000 	ldr	r3, [r3]
    3358:	e2033020 	and	r3, r3, #32
    335c:	e3530000 	cmp	r3, #0
    3360:	0afffff8 	beq	3348 <UART1WriteChar+0x18>
  U1THR = ch;
    3364:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3368:	e2833801 	add	r3, r3, #65536	; 0x10000
    336c:	e55b2010 	ldrb	r2, [fp, #-16]
    3370:	e5832000 	str	r2, [r3]
}
    3374:	e24bd00c 	sub	sp, fp, #12
    3378:	e89d6800 	ldm	sp, {fp, sp, lr}
    337c:	e12fff1e 	bx	lr

00003380 <UART1ReadChar>:

unsigned char UART1ReadChar(void)
{
    3380:	e1a0c00d 	mov	ip, sp
    3384:	e92dd800 	push	{fp, ip, lr, pc}
    3388:	e24cb004 	sub	fp, ip, #4
  while ((U1LSR & 0x01) == 0);
    338c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3390:	e2833801 	add	r3, r3, #65536	; 0x10000
    3394:	e2833014 	add	r3, r3, #20
    3398:	e5933000 	ldr	r3, [r3]
    339c:	e2033001 	and	r3, r3, #1
    33a0:	e3530000 	cmp	r3, #0
    33a4:	0afffff8 	beq	338c <UART1ReadChar+0xc>
  return U1RBR;
    33a8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    33ac:	e2833801 	add	r3, r3, #65536	; 0x10000
    33b0:	e5933000 	ldr	r3, [r3]
    33b4:	e20330ff 	and	r3, r3, #255	; 0xff
}
    33b8:	e1a00003 	mov	r0, r3
    33bc:	e24bd00c 	sub	sp, fp, #12
    33c0:	e89d6800 	ldm	sp, {fp, sp, lr}
    33c4:	e12fff1e 	bx	lr

000033c8 <__putchar>:

void __putchar(int ch)
{
    33c8:	e1a0c00d 	mov	ip, sp
    33cc:	e92dd800 	push	{fp, ip, lr, pc}
    33d0:	e24cb004 	sub	fp, ip, #4
    33d4:	e24dd004 	sub	sp, sp, #4
    33d8:	e50b0010 	str	r0, [fp, #-16]
  if (ch == '\n')
    33dc:	e51b3010 	ldr	r3, [fp, #-16]
    33e0:	e353000a 	cmp	r3, #10
    33e4:	1a000001 	bne	33f0 <__putchar+0x28>
    UART0WriteChar('\r');
    33e8:	e3a0000d 	mov	r0, #13
    33ec:	ebffff61 	bl	3178 <UART0WriteChar>
  UART0WriteChar(ch);
    33f0:	e51b3010 	ldr	r3, [fp, #-16]
    33f4:	e20330ff 	and	r3, r3, #255	; 0xff
    33f8:	e1a00003 	mov	r0, r3
    33fc:	ebffff5d 	bl	3178 <UART0WriteChar>
}
    3400:	e24bd00c 	sub	sp, fp, #12
    3404:	e89d6800 	ldm	sp, {fp, sp, lr}
    3408:	e12fff1e 	bx	lr

0000340c <UART1_send>:

void UART1_send(unsigned char *buffer, unsigned char length)
{
    340c:	e1a0c00d 	mov	ip, sp
    3410:	e92dd800 	push	{fp, ip, lr, pc}
    3414:	e24cb004 	sub	fp, ip, #4
    3418:	e24dd00c 	sub	sp, sp, #12
    341c:	e50b0014 	str	r0, [fp, #-20]
    3420:	e1a03001 	mov	r3, r1
    3424:	e54b3018 	strb	r3, [fp, #-24]
  unsigned char cnt=0;
    3428:	e3a03000 	mov	r3, #0
    342c:	e54b300d 	strb	r3, [fp, #-13]
  while(length--)
    3430:	ea000011 	b	347c <UART1_send+0x70>
  {
    while (!(U1LSR & 0x20)); //wait until U1THR is empty
    3434:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3438:	e2833801 	add	r3, r3, #65536	; 0x10000
    343c:	e2833014 	add	r3, r3, #20
    3440:	e5933000 	ldr	r3, [r3]
    3444:	e2033020 	and	r3, r3, #32
    3448:	e3530000 	cmp	r3, #0
    344c:	0afffff8 	beq	3434 <UART1_send+0x28>
    U1THR = buffer[cnt++];
    3450:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    3454:	e2822801 	add	r2, r2, #65536	; 0x10000
    3458:	e55b300d 	ldrb	r3, [fp, #-13]
    345c:	e1a01003 	mov	r1, r3
    3460:	e51b3014 	ldr	r3, [fp, #-20]
    3464:	e0813003 	add	r3, r1, r3
    3468:	e5d33000 	ldrb	r3, [r3]
    346c:	e5823000 	str	r3, [r2]
    3470:	e55b300d 	ldrb	r3, [fp, #-13]
    3474:	e2833001 	add	r3, r3, #1
    3478:	e54b300d 	strb	r3, [fp, #-13]
}

void UART1_send(unsigned char *buffer, unsigned char length)
{
  unsigned char cnt=0;
  while(length--)
    347c:	e55b3018 	ldrb	r3, [fp, #-24]
    3480:	e2433001 	sub	r3, r3, #1
    3484:	e54b3018 	strb	r3, [fp, #-24]
    3488:	e55b3018 	ldrb	r3, [fp, #-24]
    348c:	e35300ff 	cmp	r3, #255	; 0xff
    3490:	1affffe7 	bne	3434 <UART1_send+0x28>
  {
    while (!(U1LSR & 0x20)); //wait until U1THR is empty
    U1THR = buffer[cnt++];
  }
}
    3494:	e24bd00c 	sub	sp, fp, #12
    3498:	e89d6800 	ldm	sp, {fp, sp, lr}
    349c:	e12fff1e 	bx	lr

000034a0 <crc_update>:

//example CRC16 function
unsigned short crc_update (unsigned short crc, unsigned char data)
     {
    34a0:	e1a0c00d 	mov	ip, sp
    34a4:	e92dd800 	push	{fp, ip, lr, pc}
    34a8:	e24cb004 	sub	fp, ip, #4
    34ac:	e24dd008 	sub	sp, sp, #8
    34b0:	e1a03000 	mov	r3, r0
    34b4:	e1a02001 	mov	r2, r1
    34b8:	e14b31b0 	strh	r3, [fp, #-16]
    34bc:	e1a03002 	mov	r3, r2
    34c0:	e54b3014 	strb	r3, [fp, #-20]
         data ^= (crc & 0xff);
    34c4:	e15b31b0 	ldrh	r3, [fp, #-16]
    34c8:	e20330ff 	and	r3, r3, #255	; 0xff
    34cc:	e20330ff 	and	r3, r3, #255	; 0xff
    34d0:	e55b2014 	ldrb	r2, [fp, #-20]
    34d4:	e1a01003 	mov	r1, r3
    34d8:	e1a03002 	mov	r3, r2
    34dc:	e0213003 	eor	r3, r1, r3
    34e0:	e20330ff 	and	r3, r3, #255	; 0xff
    34e4:	e54b3014 	strb	r3, [fp, #-20]
         data ^= data << 4;
    34e8:	e55b3014 	ldrb	r3, [fp, #-20]
    34ec:	e1a03203 	lsl	r3, r3, #4
    34f0:	e20330ff 	and	r3, r3, #255	; 0xff
    34f4:	e55b2014 	ldrb	r2, [fp, #-20]
    34f8:	e1a01003 	mov	r1, r3
    34fc:	e1a03002 	mov	r3, r2
    3500:	e0213003 	eor	r3, r1, r3
    3504:	e20330ff 	and	r3, r3, #255	; 0xff
    3508:	e54b3014 	strb	r3, [fp, #-20]

         return ((((unsigned short )data << 8) | ((crc>>8)&0xff)) ^ (unsigned char )(data >> 4)
    350c:	e55b3014 	ldrb	r3, [fp, #-20]
    3510:	e1a03403 	lsl	r3, r3, #8
    3514:	e1a03803 	lsl	r3, r3, #16
    3518:	e1a02823 	lsr	r2, r3, #16
    351c:	e15b31b0 	ldrh	r3, [fp, #-16]
    3520:	e1a03423 	lsr	r3, r3, #8
    3524:	e1a03803 	lsl	r3, r3, #16
    3528:	e1a03823 	lsr	r3, r3, #16
    352c:	e1a03803 	lsl	r3, r3, #16
    3530:	e1a03823 	lsr	r3, r3, #16
    3534:	e20330ff 	and	r3, r3, #255	; 0xff
    3538:	e1823003 	orr	r3, r2, r3
    353c:	e1a03803 	lsl	r3, r3, #16
    3540:	e1a02823 	lsr	r2, r3, #16
    3544:	e55b3014 	ldrb	r3, [fp, #-20]
    3548:	e1a03223 	lsr	r3, r3, #4
    354c:	e20330ff 	and	r3, r3, #255	; 0xff
    3550:	e0223003 	eor	r3, r2, r3
    3554:	e1a03803 	lsl	r3, r3, #16
    3558:	e1a02823 	lsr	r2, r3, #16
    355c:	e55b3014 	ldrb	r3, [fp, #-20]
    3560:	e1a03183 	lsl	r3, r3, #3
    3564:	e1a03803 	lsl	r3, r3, #16
    3568:	e1a03823 	lsr	r3, r3, #16
    356c:	e0223003 	eor	r3, r2, r3
    3570:	e1a03803 	lsl	r3, r3, #16
    3574:	e1a03823 	lsr	r3, r3, #16
    3578:	e1a03803 	lsl	r3, r3, #16
    357c:	e1a03823 	lsr	r3, r3, #16
                 ^ ((unsigned short )data << 3));
     }
    3580:	e1a00003 	mov	r0, r3
    3584:	e24bd00c 	sub	sp, fp, #12
    3588:	e89d6800 	ldm	sp, {fp, sp, lr}
    358c:	e12fff1e 	bx	lr

00003590 <crc16>:

 unsigned short crc16(void* data, unsigned short cnt)
 {
    3590:	e1a0c00d 	mov	ip, sp
    3594:	e92dd800 	push	{fp, ip, lr, pc}
    3598:	e24cb004 	sub	fp, ip, #4
    359c:	e24dd014 	sub	sp, sp, #20
    35a0:	e50b001c 	str	r0, [fp, #-28]
    35a4:	e1a03001 	mov	r3, r1
    35a8:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
   unsigned short crc=0xff;
    35ac:	e3a030ff 	mov	r3, #255	; 0xff
    35b0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
   unsigned char * ptr=(unsigned char *) data;
    35b4:	e51b301c 	ldr	r3, [fp, #-28]
    35b8:	e50b3014 	str	r3, [fp, #-20]
   int i;

   for (i=0;i<cnt;i++)
    35bc:	e3a03000 	mov	r3, #0
    35c0:	e50b3010 	str	r3, [fp, #-16]
    35c4:	ea00000d 	b	3600 <crc16+0x70>
     {
       crc=crc_update(crc,*ptr);
    35c8:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
    35cc:	e51b3014 	ldr	r3, [fp, #-20]
    35d0:	e5d33000 	ldrb	r3, [r3]
    35d4:	e1a00002 	mov	r0, r2
    35d8:	e1a01003 	mov	r1, r3
    35dc:	ebffffaf 	bl	34a0 <crc_update>
    35e0:	e1a03000 	mov	r3, r0
    35e4:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
       ptr++;
    35e8:	e51b3014 	ldr	r3, [fp, #-20]
    35ec:	e2833001 	add	r3, r3, #1
    35f0:	e50b3014 	str	r3, [fp, #-20]
 {
   unsigned short crc=0xff;
   unsigned char * ptr=(unsigned char *) data;
   int i;

   for (i=0;i<cnt;i++)
    35f4:	e51b3010 	ldr	r3, [fp, #-16]
    35f8:	e2833001 	add	r3, r3, #1
    35fc:	e50b3010 	str	r3, [fp, #-16]
    3600:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
    3604:	e51b3010 	ldr	r3, [fp, #-16]
    3608:	e1520003 	cmp	r2, r3
    360c:	caffffed 	bgt	35c8 <crc16+0x38>
     {
       crc=crc_update(crc,*ptr);
       ptr++;
     }
   return crc;
    3610:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 }
    3614:	e1a00003 	mov	r0, r3
    3618:	e24bd00c 	sub	sp, fp, #12
    361c:	e89d6800 	ldm	sp, {fp, sp, lr}
    3620:	e12fff1e 	bx	lr

00003624 <_read_r>:
#include <sys/stat.h>
#include "uart.h"

// new code for _read_r provided by Alexey Shusharin - Thanks
_ssize_t _read_r(struct _reent *r, int file, void *ptr, size_t len)
{
    3624:	e1a0c00d 	mov	ip, sp
    3628:	e92dd800 	push	{fp, ip, lr, pc}
    362c:	e24cb004 	sub	fp, ip, #4
    3630:	e24dd020 	sub	sp, sp, #32
    3634:	e50b001c 	str	r0, [fp, #-28]
    3638:	e50b1020 	str	r1, [fp, #-32]
    363c:	e50b2024 	str	r2, [fp, #-36]	; 0x24
    3640:	e50b3028 	str	r3, [fp, #-40]	; 0x28
  char c;
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;
    3644:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
    3648:	e50b3010 	str	r3, [fp, #-16]

  for (i = 0; i < len; i++)
    364c:	e3a03000 	mov	r3, #0
    3650:	e50b3014 	str	r3, [fp, #-20]
    3654:	ea000017 	b	36b8 <_read_r+0x94>
  {
  //  c = UART0ReadChar();  -- PFG

    *p++ = c;
    3658:	e51b2010 	ldr	r2, [fp, #-16]
    365c:	e55b3015 	ldrb	r3, [fp, #-21]
    3660:	e5c23000 	strb	r3, [r2]
    3664:	e51b3010 	ldr	r3, [fp, #-16]
    3668:	e2833001 	add	r3, r3, #1
    366c:	e50b3010 	str	r3, [fp, #-16]
    //UART0WriteChar(c);  -- PFG

    if (c == 0x0D && i <= (len - 2))
    3670:	e55b3015 	ldrb	r3, [fp, #-21]
    3674:	e353000d 	cmp	r3, #13
    3678:	1a00000b 	bne	36ac <_read_r+0x88>
    367c:	e51b3014 	ldr	r3, [fp, #-20]
    3680:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    3684:	e2422002 	sub	r2, r2, #2
    3688:	e1530002 	cmp	r3, r2
    368c:	8a000006 	bhi	36ac <_read_r+0x88>
    {
      *p = 0x0A;
    3690:	e51b2010 	ldr	r2, [fp, #-16]
    3694:	e3a0300a 	mov	r3, #10
    3698:	e5c23000 	strb	r3, [r2]
      //UART0WriteChar(0x0A); -- PFG
      return i + 2;
    369c:	e51b3014 	ldr	r3, [fp, #-20]
    36a0:	e2833002 	add	r3, r3, #2
    36a4:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
    36a8:	ea000008 	b	36d0 <_read_r+0xac>
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;

  for (i = 0; i < len; i++)
    36ac:	e51b3014 	ldr	r3, [fp, #-20]
    36b0:	e2833001 	add	r3, r3, #1
    36b4:	e50b3014 	str	r3, [fp, #-20]
    36b8:	e51b2014 	ldr	r2, [fp, #-20]
    36bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    36c0:	e1520003 	cmp	r2, r3
    36c4:	3affffe3 	bcc	3658 <_read_r+0x34>
      *p = 0x0A;
      //UART0WriteChar(0x0A); -- PFG
      return i + 2;
    }
  }
  return i;
    36c8:	e51b3014 	ldr	r3, [fp, #-20]
    36cc:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
    36d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
}
    36d4:	e1a00003 	mov	r0, r3
    36d8:	e24bd00c 	sub	sp, fp, #12
    36dc:	e89d6800 	ldm	sp, {fp, sp, lr}
    36e0:	e12fff1e 	bx	lr

000036e4 <_write_r>:
_ssize_t _write_r (
    struct _reent *r, 
    int file, 
    const void *ptr, 
    size_t len)
{
    36e4:	e1a0c00d 	mov	ip, sp
    36e8:	e92dd800 	push	{fp, ip, lr, pc}
    36ec:	e24cb004 	sub	fp, ip, #4
    36f0:	e24dd018 	sub	sp, sp, #24
    36f4:	e50b0018 	str	r0, [fp, #-24]
    36f8:	e50b101c 	str	r1, [fp, #-28]
    36fc:	e50b2020 	str	r2, [fp, #-32]
    3700:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
    3704:	e51b3020 	ldr	r3, [fp, #-32]
    3708:	e50b3010 	str	r3, [fp, #-16]
	
	for (i = 0; i < len; i++) {
    370c:	e3a03000 	mov	r3, #0
    3710:	e50b3014 	str	r3, [fp, #-20]
    3714:	ea000010 	b	375c <_write_r+0x78>
		if (*p == '\n' ) UART0WriteChar('\r');
    3718:	e51b3010 	ldr	r3, [fp, #-16]
    371c:	e5d33000 	ldrb	r3, [r3]
    3720:	e353000a 	cmp	r3, #10
    3724:	1a000001 	bne	3730 <_write_r+0x4c>
    3728:	e3a0000d 	mov	r0, #13
    372c:	ebfffe91 	bl	3178 <UART0WriteChar>
		UART0WriteChar(*p++);
    3730:	e51b3010 	ldr	r3, [fp, #-16]
    3734:	e5d33000 	ldrb	r3, [r3]
    3738:	e1a02003 	mov	r2, r3
    373c:	e51b3010 	ldr	r3, [fp, #-16]
    3740:	e2833001 	add	r3, r3, #1
    3744:	e50b3010 	str	r3, [fp, #-16]
    3748:	e1a00002 	mov	r0, r2
    374c:	ebfffe89 	bl	3178 <UART0WriteChar>
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    3750:	e51b3014 	ldr	r3, [fp, #-20]
    3754:	e2833001 	add	r3, r3, #1
    3758:	e50b3014 	str	r3, [fp, #-20]
    375c:	e51b2014 	ldr	r2, [fp, #-20]
    3760:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
    3764:	e1520003 	cmp	r2, r3
    3768:	3affffea 	bcc	3718 <_write_r+0x34>
		if (*p == '\n' ) UART0WriteChar('\r');
		UART0WriteChar(*p++);
	}
	
	return len;
    376c:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
}
    3770:	e1a00003 	mov	r0, r3
    3774:	e24bd00c 	sub	sp, fp, #12
    3778:	e89d6800 	ldm	sp, {fp, sp, lr}
    377c:	e12fff1e 	bx	lr

00003780 <_close_r>:

int _close_r(
    struct _reent *r, 
    int file)
{
    3780:	e1a0c00d 	mov	ip, sp
    3784:	e92dd800 	push	{fp, ip, lr, pc}
    3788:	e24cb004 	sub	fp, ip, #4
    378c:	e24dd008 	sub	sp, sp, #8
    3790:	e50b0010 	str	r0, [fp, #-16]
    3794:	e50b1014 	str	r1, [fp, #-20]
	return 0;
    3798:	e3a03000 	mov	r3, #0
}
    379c:	e1a00003 	mov	r0, r3
    37a0:	e24bd00c 	sub	sp, fp, #12
    37a4:	e89d6800 	ldm	sp, {fp, sp, lr}
    37a8:	e12fff1e 	bx	lr

000037ac <_lseek_r>:
_off_t _lseek_r(
    struct _reent *r, 
    int file, 
    _off_t ptr, 
    int dir)
{
    37ac:	e1a0c00d 	mov	ip, sp
    37b0:	e92dd800 	push	{fp, ip, lr, pc}
    37b4:	e24cb004 	sub	fp, ip, #4
    37b8:	e24dd010 	sub	sp, sp, #16
    37bc:	e50b0010 	str	r0, [fp, #-16]
    37c0:	e50b1014 	str	r1, [fp, #-20]
    37c4:	e50b2018 	str	r2, [fp, #-24]
    37c8:	e50b301c 	str	r3, [fp, #-28]
	return (_off_t)0;	/*  Always indicate we are at file beginning.	*/
    37cc:	e3a03000 	mov	r3, #0
}
    37d0:	e1a00003 	mov	r0, r3
    37d4:	e24bd00c 	sub	sp, fp, #12
    37d8:	e89d6800 	ldm	sp, {fp, sp, lr}
    37dc:	e12fff1e 	bx	lr

000037e0 <_fstat_r>:

int _fstat_r(
    struct _reent *r, 
    int file, 
    struct stat *st)
{
    37e0:	e1a0c00d 	mov	ip, sp
    37e4:	e92dd800 	push	{fp, ip, lr, pc}
    37e8:	e24cb004 	sub	fp, ip, #4
    37ec:	e24dd00c 	sub	sp, sp, #12
    37f0:	e50b0010 	str	r0, [fp, #-16]
    37f4:	e50b1014 	str	r1, [fp, #-20]
    37f8:	e50b2018 	str	r2, [fp, #-24]
	/*  Always set as character device.				*/
	st->st_mode = S_IFCHR;	
    37fc:	e51b2018 	ldr	r2, [fp, #-24]
    3800:	e3a03a02 	mov	r3, #8192	; 0x2000
    3804:	e5823004 	str	r3, [r2, #4]
		/* assigned to strong type with implicit 	*/
		/* signed/unsigned conversion.  Required by 	*/
		/* newlib.					*/

	return 0;
    3808:	e3a03000 	mov	r3, #0
}
    380c:	e1a00003 	mov	r0, r3
    3810:	e24bd00c 	sub	sp, fp, #12
    3814:	e89d6800 	ldm	sp, {fp, sp, lr}
    3818:	e12fff1e 	bx	lr

0000381c <isatty>:

int isatty(int file); /* avoid warning */

int isatty(int file)
{
    381c:	e1a0c00d 	mov	ip, sp
    3820:	e92dd800 	push	{fp, ip, lr, pc}
    3824:	e24cb004 	sub	fp, ip, #4
    3828:	e24dd004 	sub	sp, sp, #4
    382c:	e50b0010 	str	r0, [fp, #-16]
	return 1;
    3830:	e3a03001 	mov	r3, #1
}
    3834:	e1a00003 	mov	r0, r3
    3838:	e24bd00c 	sub	sp, fp, #12
    383c:	e89d6800 	ldm	sp, {fp, sp, lr}
    3840:	e12fff1e 	bx	lr

00003844 <_sbrk_r>:
/* messages must be suppressed.						*/

void * _sbrk_r(
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
    3844:	e1a0c00d 	mov	ip, sp
    3848:	e92dd800 	push	{fp, ip, lr, pc}
    384c:	e24cb004 	sub	fp, ip, #4
    3850:	e24dd00c 	sub	sp, sp, #12
    3854:	e50b0014 	str	r0, [fp, #-20]
    3858:	e50b1018 	str	r1, [fp, #-24]
	char  *base;		/*  errno should be set to  ENOMEM on error	*/

	if (!heap_ptr) {	/*  Initialize if first time through.		*/
    385c:	e59f304c 	ldr	r3, [pc, #76]	; 38b0 <_sbrk_r+0x6c>
    3860:	e5933000 	ldr	r3, [r3]
    3864:	e3530000 	cmp	r3, #0
    3868:	1a000002 	bne	3878 <_sbrk_r+0x34>
		heap_ptr = _end;
    386c:	e59f203c 	ldr	r2, [pc, #60]	; 38b0 <_sbrk_r+0x6c>
    3870:	e59f303c 	ldr	r3, [pc, #60]	; 38b4 <_sbrk_r+0x70>
    3874:	e5823000 	str	r3, [r2]
	}
	base = heap_ptr;	/*  Point to end of heap.			*/
    3878:	e59f3030 	ldr	r3, [pc, #48]	; 38b0 <_sbrk_r+0x6c>
    387c:	e5933000 	ldr	r3, [r3]
    3880:	e50b3010 	str	r3, [fp, #-16]
	heap_ptr += nbytes;	/*  Increase heap.				*/
    3884:	e59f3024 	ldr	r3, [pc, #36]	; 38b0 <_sbrk_r+0x6c>
    3888:	e5932000 	ldr	r2, [r3]
    388c:	e51b3018 	ldr	r3, [fp, #-24]
    3890:	e0822003 	add	r2, r2, r3
    3894:	e59f3014 	ldr	r3, [pc, #20]	; 38b0 <_sbrk_r+0x6c>
    3898:	e5832000 	str	r2, [r3]
	
	return base;		/*  Return pointer to start of new heap area.	*/
    389c:	e51b3010 	ldr	r3, [fp, #-16]
}
    38a0:	e1a00003 	mov	r0, r3
    38a4:	e24bd00c 	sub	sp, fp, #12
    38a8:	e89d6800 	ldm	sp, {fp, sp, lr}
    38ac:	e12fff1e 	bx	lr
    38b0:	40000e18 	.word	0x40000e18
    38b4:	40003d80 	.word	0x40003d80

000038b8 <I2C0MasterHandler>:
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void I2C0MasterHandler (void) __irq 
{
    38b8:	e1a0c00d 	mov	ip, sp
    38bc:	e92dd800 	push	{fp, ip, lr, pc}
    38c0:	e24cb004 	sub	fp, ip, #4
    38c4:	e24dd004 	sub	sp, sp, #4
    BYTE StatValue;

    /* this handler deals with master read and master write only */
    StatValue = I20STAT;
    38c8:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    38cc:	e2833907 	add	r3, r3, #114688	; 0x1c000
    38d0:	e5933000 	ldr	r3, [r3]
    38d4:	e54b300d 	strb	r3, [fp, #-13]
    
    IENABLE;   
    switch ( StatValue )
    38d8:	e55b300d 	ldrb	r3, [fp, #-13]
    38dc:	e2433008 	sub	r3, r3, #8
    38e0:	e3530050 	cmp	r3, #80	; 0x50
    38e4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    38e8:	ea000106 	b	3d08 <I2C0MasterHandler+0x450>
    38ec:	00003a30 	.word	0x00003a30
    38f0:	00003d08 	.word	0x00003d08
    38f4:	00003d08 	.word	0x00003d08
    38f8:	00003d08 	.word	0x00003d08
    38fc:	00003d08 	.word	0x00003d08
    3900:	00003d08 	.word	0x00003d08
    3904:	00003d08 	.word	0x00003d08
    3908:	00003d08 	.word	0x00003d08
    390c:	00003a68 	.word	0x00003a68
    3910:	00003d08 	.word	0x00003d08
    3914:	00003d08 	.word	0x00003d08
    3918:	00003d08 	.word	0x00003d08
    391c:	00003d08 	.word	0x00003d08
    3920:	00003d08 	.word	0x00003d08
    3924:	00003d08 	.word	0x00003d08
    3928:	00003d08 	.word	0x00003d08
    392c:	00003ac0 	.word	0x00003ac0
    3930:	00003d08 	.word	0x00003d08
    3934:	00003d08 	.word	0x00003d08
    3938:	00003d08 	.word	0x00003d08
    393c:	00003d08 	.word	0x00003d08
    3940:	00003d08 	.word	0x00003d08
    3944:	00003d08 	.word	0x00003d08
    3948:	00003d08 	.word	0x00003d08
    394c:	00003ce4 	.word	0x00003ce4
    3950:	00003d08 	.word	0x00003d08
    3954:	00003d08 	.word	0x00003d08
    3958:	00003d08 	.word	0x00003d08
    395c:	00003d08 	.word	0x00003d08
    3960:	00003d08 	.word	0x00003d08
    3964:	00003d08 	.word	0x00003d08
    3968:	00003d08 	.word	0x00003d08
    396c:	00003b28 	.word	0x00003b28
    3970:	00003d08 	.word	0x00003d08
    3974:	00003d08 	.word	0x00003d08
    3978:	00003d08 	.word	0x00003d08
    397c:	00003d08 	.word	0x00003d08
    3980:	00003d08 	.word	0x00003d08
    3984:	00003d08 	.word	0x00003d08
    3988:	00003d08 	.word	0x00003d08
    398c:	00003b28 	.word	0x00003b28
    3990:	00003d08 	.word	0x00003d08
    3994:	00003d08 	.word	0x00003d08
    3998:	00003d08 	.word	0x00003d08
    399c:	00003d08 	.word	0x00003d08
    39a0:	00003d08 	.word	0x00003d08
    39a4:	00003d08 	.word	0x00003d08
    39a8:	00003d08 	.word	0x00003d08
    39ac:	00003d08 	.word	0x00003d08
    39b0:	00003d08 	.word	0x00003d08
    39b4:	00003d08 	.word	0x00003d08
    39b8:	00003d08 	.word	0x00003d08
    39bc:	00003d08 	.word	0x00003d08
    39c0:	00003d08 	.word	0x00003d08
    39c4:	00003d08 	.word	0x00003d08
    39c8:	00003d08 	.word	0x00003d08
    39cc:	00003c2c 	.word	0x00003c2c
    39d0:	00003d08 	.word	0x00003d08
    39d4:	00003d08 	.word	0x00003d08
    39d8:	00003d08 	.word	0x00003d08
    39dc:	00003d08 	.word	0x00003d08
    39e0:	00003d08 	.word	0x00003d08
    39e4:	00003d08 	.word	0x00003d08
    39e8:	00003d08 	.word	0x00003d08
    39ec:	00003ce4 	.word	0x00003ce4
    39f0:	00003d08 	.word	0x00003d08
    39f4:	00003d08 	.word	0x00003d08
    39f8:	00003d08 	.word	0x00003d08
    39fc:	00003d08 	.word	0x00003d08
    3a00:	00003d08 	.word	0x00003d08
    3a04:	00003d08 	.word	0x00003d08
    3a08:	00003d08 	.word	0x00003d08
    3a0c:	00003c44 	.word	0x00003c44
    3a10:	00003d08 	.word	0x00003d08
    3a14:	00003d08 	.word	0x00003d08
    3a18:	00003d08 	.word	0x00003d08
    3a1c:	00003d08 	.word	0x00003d08
    3a20:	00003d08 	.word	0x00003d08
    3a24:	00003d08 	.word	0x00003d08
    3a28:	00003d08 	.word	0x00003d08
    3a2c:	00003c44 	.word	0x00003c44
    {
	case 0x08:			/* A Start condition is issued. */
	I20DAT = I2CMasterBuffer[0];
    3a30:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    3a34:	e2822907 	add	r2, r2, #114688	; 0x1c000
    3a38:	e59f32f8 	ldr	r3, [pc, #760]	; 3d38 <I2C0MasterHandler+0x480>
    3a3c:	e5d33000 	ldrb	r3, [r3]
    3a40:	e5823000 	str	r3, [r2]
	I20CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    3a44:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3a48:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3a4c:	e2833018 	add	r3, r3, #24
    3a50:	e3a02028 	mov	r2, #40	; 0x28
    3a54:	e5832000 	str	r2, [r3]
	I2CMasterState = I2C_STARTED;
    3a58:	e59f22dc 	ldr	r2, [pc, #732]	; 3d3c <I2C0MasterHandler+0x484>
    3a5c:	e3a03001 	mov	r3, #1
    3a60:	e5823000 	str	r3, [r2]
	break;
    3a64:	ea0000ac 	b	3d1c <I2C0MasterHandler+0x464>
	
	case 0x10:			/* A repeated started is issued */
	if (  I2CCmd == GET_DEVICE_ID || I2CCmd == GET_TEMPERATURE )
    3a68:	e59f32d0 	ldr	r3, [pc, #720]	; 3d40 <I2C0MasterHandler+0x488>
    3a6c:	e5933000 	ldr	r3, [r3]
    3a70:	e3530001 	cmp	r3, #1
    3a74:	0a000003 	beq	3a88 <I2C0MasterHandler+0x1d0>
    3a78:	e59f32c0 	ldr	r3, [pc, #704]	; 3d40 <I2C0MasterHandler+0x488>
    3a7c:	e5933000 	ldr	r3, [r3]
    3a80:	e3530002 	cmp	r3, #2
    3a84:	1a000004 	bne	3a9c <I2C0MasterHandler+0x1e4>
	{
	    I20DAT = I2CMasterBuffer[2];
    3a88:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    3a8c:	e2822907 	add	r2, r2, #114688	; 0x1c000
    3a90:	e59f32a0 	ldr	r3, [pc, #672]	; 3d38 <I2C0MasterHandler+0x480>
    3a94:	e5d33002 	ldrb	r3, [r3, #2]
    3a98:	e5823000 	str	r3, [r2]
	}
	I20CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    3a9c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3aa0:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3aa4:	e2833018 	add	r3, r3, #24
    3aa8:	e3a02028 	mov	r2, #40	; 0x28
    3aac:	e5832000 	str	r2, [r3]
	I2CMasterState = I2C_RESTARTED;
    3ab0:	e59f2284 	ldr	r2, [pc, #644]	; 3d3c <I2C0MasterHandler+0x484>
    3ab4:	e3a03002 	mov	r3, #2
    3ab8:	e5823000 	str	r3, [r2]
	break;
    3abc:	ea000096 	b	3d1c <I2C0MasterHandler+0x464>
	
	case 0x18:			/* Regardless, it's a ACK */
	if ( I2CMasterState == I2C_STARTED )
    3ac0:	e59f3274 	ldr	r3, [pc, #628]	; 3d3c <I2C0MasterHandler+0x484>
    3ac4:	e5933000 	ldr	r3, [r3]
    3ac8:	e3530001 	cmp	r3, #1
    3acc:	1a00000f 	bne	3b10 <I2C0MasterHandler+0x258>
	{
	    I20DAT = I2CMasterBuffer[1+WrIndex];
    3ad0:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    3ad4:	e2822907 	add	r2, r2, #114688	; 0x1c000
    3ad8:	e59f3264 	ldr	r3, [pc, #612]	; 3d44 <I2C0MasterHandler+0x48c>
    3adc:	e5933000 	ldr	r3, [r3]
    3ae0:	e2831001 	add	r1, r3, #1
    3ae4:	e59f324c 	ldr	r3, [pc, #588]	; 3d38 <I2C0MasterHandler+0x480>
    3ae8:	e7d33001 	ldrb	r3, [r3, r1]
    3aec:	e5823000 	str	r3, [r2]
	    WrIndex++;
    3af0:	e59f324c 	ldr	r3, [pc, #588]	; 3d44 <I2C0MasterHandler+0x48c>
    3af4:	e5933000 	ldr	r3, [r3]
    3af8:	e2832001 	add	r2, r3, #1
    3afc:	e59f3240 	ldr	r3, [pc, #576]	; 3d44 <I2C0MasterHandler+0x48c>
    3b00:	e5832000 	str	r2, [r3]
	    I2CMasterState = DATA_ACK;
    3b04:	e59f2230 	ldr	r2, [pc, #560]	; 3d3c <I2C0MasterHandler+0x484>
    3b08:	e3a03004 	mov	r3, #4
    3b0c:	e5823000 	str	r3, [r2]
	}
	I20CONCLR = I2CONCLR_SIC;
    3b10:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3b14:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3b18:	e2833018 	add	r3, r3, #24
    3b1c:	e3a02008 	mov	r2, #8
    3b20:	e5832000 	str	r2, [r3]
	break;
    3b24:	ea00007c 	b	3d1c <I2C0MasterHandler+0x464>
	
	case 0x28:	/* Data byte has been transmitted, regardless ACK or NACK */
	case 0x30:
	if ( WrIndex != I2CWriteLength )
    3b28:	e59f3214 	ldr	r3, [pc, #532]	; 3d44 <I2C0MasterHandler+0x48c>
    3b2c:	e5932000 	ldr	r2, [r3]
    3b30:	e59f3210 	ldr	r3, [pc, #528]	; 3d48 <I2C0MasterHandler+0x490>
    3b34:	e5933000 	ldr	r3, [r3]
    3b38:	e1520003 	cmp	r2, r3
    3b3c:	0a000025 	beq	3bd8 <I2C0MasterHandler+0x320>
	{   
	    I20DAT = I2CMasterBuffer[1+WrIndex]; /* this should be the last one */
    3b40:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    3b44:	e2822907 	add	r2, r2, #114688	; 0x1c000
    3b48:	e59f31f4 	ldr	r3, [pc, #500]	; 3d44 <I2C0MasterHandler+0x48c>
    3b4c:	e5933000 	ldr	r3, [r3]
    3b50:	e2831001 	add	r1, r3, #1
    3b54:	e59f31dc 	ldr	r3, [pc, #476]	; 3d38 <I2C0MasterHandler+0x480>
    3b58:	e7d33001 	ldrb	r3, [r3, r1]
    3b5c:	e5823000 	str	r3, [r2]
	    WrIndex++;
    3b60:	e59f31dc 	ldr	r3, [pc, #476]	; 3d44 <I2C0MasterHandler+0x48c>
    3b64:	e5933000 	ldr	r3, [r3]
    3b68:	e2832001 	add	r2, r3, #1
    3b6c:	e59f31d0 	ldr	r3, [pc, #464]	; 3d44 <I2C0MasterHandler+0x48c>
    3b70:	e5832000 	str	r2, [r3]
	    if ( WrIndex != I2CWriteLength )
    3b74:	e59f31c8 	ldr	r3, [pc, #456]	; 3d44 <I2C0MasterHandler+0x48c>
    3b78:	e5932000 	ldr	r2, [r3]
    3b7c:	e59f31c4 	ldr	r3, [pc, #452]	; 3d48 <I2C0MasterHandler+0x490>
    3b80:	e5933000 	ldr	r3, [r3]
    3b84:	e1520003 	cmp	r2, r3
    3b88:	0a000003 	beq	3b9c <I2C0MasterHandler+0x2e4>
	    {   
		I2CMasterState = DATA_ACK;
    3b8c:	e59f21a8 	ldr	r2, [pc, #424]	; 3d3c <I2C0MasterHandler+0x484>
    3b90:	e3a03004 	mov	r3, #4
    3b94:	e5823000 	str	r3, [r2]
    3b98:	ea00001d 	b	3c14 <I2C0MasterHandler+0x35c>
	    }
	    else
	    {
		I2CMasterState = DATA_NACK;
    3b9c:	e59f2198 	ldr	r2, [pc, #408]	; 3d3c <I2C0MasterHandler+0x484>
    3ba0:	e3a03005 	mov	r3, #5
    3ba4:	e5823000 	str	r3, [r2]
		if ( I2CReadLength != 0 )
    3ba8:	e59f319c 	ldr	r3, [pc, #412]	; 3d4c <I2C0MasterHandler+0x494>
    3bac:	e5933000 	ldr	r3, [r3]
    3bb0:	e3530000 	cmp	r3, #0
    3bb4:	0a000016 	beq	3c14 <I2C0MasterHandler+0x35c>
		{
		    I20CONSET = I2CONSET_STA;	/* Set Repeated-start flag */
    3bb8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3bbc:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3bc0:	e3a02020 	mov	r2, #32
    3bc4:	e5832000 	str	r2, [r3]
		    I2CMasterState = I2C_REPEATED_START;
    3bc8:	e59f216c 	ldr	r2, [pc, #364]	; 3d3c <I2C0MasterHandler+0x484>
    3bcc:	e3a03003 	mov	r3, #3
    3bd0:	e5823000 	str	r3, [r2]
    3bd4:	ea00000e 	b	3c14 <I2C0MasterHandler+0x35c>
		}
	    }
	}
	else
	{
	    if ( I2CReadLength != 0 )
    3bd8:	e59f316c 	ldr	r3, [pc, #364]	; 3d4c <I2C0MasterHandler+0x494>
    3bdc:	e5933000 	ldr	r3, [r3]
    3be0:	e3530000 	cmp	r3, #0
    3be4:	0a000007 	beq	3c08 <I2C0MasterHandler+0x350>
	    {
		I20CONSET = I2CONSET_STA;	/* Set Repeated-start flag */
    3be8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3bec:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3bf0:	e3a02020 	mov	r2, #32
    3bf4:	e5832000 	str	r2, [r3]
		I2CMasterState = I2C_REPEATED_START;
    3bf8:	e59f213c 	ldr	r2, [pc, #316]	; 3d3c <I2C0MasterHandler+0x484>
    3bfc:	e3a03003 	mov	r3, #3
    3c00:	e5823000 	str	r3, [r2]
    3c04:	ea000002 	b	3c14 <I2C0MasterHandler+0x35c>
	    }
	    else
	    {
		I2CMasterState = DATA_NACK;
    3c08:	e59f212c 	ldr	r2, [pc, #300]	; 3d3c <I2C0MasterHandler+0x484>
    3c0c:	e3a03005 	mov	r3, #5
    3c10:	e5823000 	str	r3, [r2]
	    }
	}
	I20CONCLR = I2CONCLR_SIC;
    3c14:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3c18:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3c1c:	e2833018 	add	r3, r3, #24
    3c20:	e3a02008 	mov	r2, #8
    3c24:	e5832000 	str	r2, [r3]
	break;
    3c28:	ea00003b 	b	3d1c <I2C0MasterHandler+0x464>
	
	case 0x40:	/* Master Receive, SLA_R has been sent */
	I20CONCLR = I2CONCLR_SIC;
    3c2c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3c30:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3c34:	e2833018 	add	r3, r3, #24
    3c38:	e3a02008 	mov	r2, #8
    3c3c:	e5832000 	str	r2, [r3]
	break;
    3c40:	ea000035 	b	3d1c <I2C0MasterHandler+0x464>
	
	case 0x50:	/* Data byte has been received, regardless following ACK or NACK */
	case 0x58:
	I2CMasterBuffer[3+RdIndex] = I20DAT;
    3c44:	e59f3104 	ldr	r3, [pc, #260]	; 3d50 <I2C0MasterHandler+0x498>
    3c48:	e5933000 	ldr	r3, [r3]
    3c4c:	e2831003 	add	r1, r3, #3
    3c50:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    3c54:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3c58:	e5933000 	ldr	r3, [r3]
    3c5c:	e20330ff 	and	r3, r3, #255	; 0xff
    3c60:	e59f20d0 	ldr	r2, [pc, #208]	; 3d38 <I2C0MasterHandler+0x480>
    3c64:	e7c23001 	strb	r3, [r2, r1]
	RdIndex++;
    3c68:	e59f30e0 	ldr	r3, [pc, #224]	; 3d50 <I2C0MasterHandler+0x498>
    3c6c:	e5933000 	ldr	r3, [r3]
    3c70:	e2832001 	add	r2, r3, #1
    3c74:	e59f30d4 	ldr	r3, [pc, #212]	; 3d50 <I2C0MasterHandler+0x498>
    3c78:	e5832000 	str	r2, [r3]
	if ( RdIndex != I2CReadLength )
    3c7c:	e59f30cc 	ldr	r3, [pc, #204]	; 3d50 <I2C0MasterHandler+0x498>
    3c80:	e5932000 	ldr	r2, [r3]
    3c84:	e59f30c0 	ldr	r3, [pc, #192]	; 3d4c <I2C0MasterHandler+0x494>
    3c88:	e5933000 	ldr	r3, [r3]
    3c8c:	e1520003 	cmp	r2, r3
    3c90:	0a000003 	beq	3ca4 <I2C0MasterHandler+0x3ec>
	{   
	    I2CMasterState = DATA_ACK;
    3c94:	e59f20a0 	ldr	r2, [pc, #160]	; 3d3c <I2C0MasterHandler+0x484>
    3c98:	e3a03004 	mov	r3, #4
    3c9c:	e5823000 	str	r3, [r2]
    3ca0:	ea000005 	b	3cbc <I2C0MasterHandler+0x404>
	}
	else
	{
	    RdIndex = 0;
    3ca4:	e59f20a4 	ldr	r2, [pc, #164]	; 3d50 <I2C0MasterHandler+0x498>
    3ca8:	e3a03000 	mov	r3, #0
    3cac:	e5823000 	str	r3, [r2]
	    I2CMasterState = DATA_NACK;
    3cb0:	e59f2084 	ldr	r2, [pc, #132]	; 3d3c <I2C0MasterHandler+0x484>
    3cb4:	e3a03005 	mov	r3, #5
    3cb8:	e5823000 	str	r3, [r2]
	}
	I20CONSET = I2CONSET_AA;	/* assert ACK after data is received */
    3cbc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3cc0:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3cc4:	e3a02004 	mov	r2, #4
    3cc8:	e5832000 	str	r2, [r3]
	I20CONCLR = I2CONCLR_SIC;
    3ccc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3cd0:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3cd4:	e2833018 	add	r3, r3, #24
    3cd8:	e3a02008 	mov	r2, #8
    3cdc:	e5832000 	str	r2, [r3]
	break;
    3ce0:	ea00000d 	b	3d1c <I2C0MasterHandler+0x464>
	
	case 0x20:			/* regardless, it's a NACK */
	case 0x48:
	I20CONCLR = I2CONCLR_SIC;
    3ce4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3ce8:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3cec:	e2833018 	add	r3, r3, #24
    3cf0:	e3a02008 	mov	r2, #8
    3cf4:	e5832000 	str	r2, [r3]
	I2CMasterState = DATA_NACK;
    3cf8:	e59f203c 	ldr	r2, [pc, #60]	; 3d3c <I2C0MasterHandler+0x484>
    3cfc:	e3a03005 	mov	r3, #5
    3d00:	e5823000 	str	r3, [r2]
	break;
    3d04:	ea000004 	b	3d1c <I2C0MasterHandler+0x464>
	
	case 0x38:			/* Arbitration lost, in this example, we don't
					deal with multiple master situation */
	default:
	I20CONCLR = I2CONCLR_SIC;	
    3d08:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3d0c:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3d10:	e2833018 	add	r3, r3, #24
    3d14:	e3a02008 	mov	r2, #8
    3d18:	e5832000 	str	r2, [r3]
	break;
    }
    
    IDISABLE;
    VICVectAddr = 0;		/* Acknowledge Interrupt */
    3d1c:	e3a03000 	mov	r3, #0
    3d20:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    3d24:	e3a02000 	mov	r2, #0
    3d28:	e5832000 	str	r2, [r3]

}
    3d2c:	e24bd00c 	sub	sp, fp, #12
    3d30:	e89d6800 	ldm	sp, {fp, sp, lr}
    3d34:	e12fff1e 	bx	lr
    3d38:	4000200c 	.word	0x4000200c
    3d3c:	40000e1c 	.word	0x40000e1c
    3d40:	4000202c 	.word	0x4000202c
    3d44:	40000e2c 	.word	0x40000e2c
    3d48:	40002030 	.word	0x40002030
    3d4c:	40001fe4 	.word	0x40001fe4
    3d50:	40000e28 	.word	0x40000e28

00003d54 <I2C0_send_motordata>:


void I2C0_send_motordata(void)
{
    3d54:	e1a0c00d 	mov	ip, sp
    3d58:	e92dd800 	push	{fp, ip, lr, pc}
    3d5c:	e24cb004 	sub	fp, ip, #4
	WrIndex=0;
    3d60:	e59f2080 	ldr	r2, [pc, #128]	; 3de8 <I2C0_send_motordata+0x94>
    3d64:	e3a03000 	mov	r3, #0
    3d68:	e5823000 	str	r3, [r2]
	RdIndex=0;
    3d6c:	e59f2078 	ldr	r2, [pc, #120]	; 3dec <I2C0_send_motordata+0x98>
    3d70:	e3a03000 	mov	r3, #0
    3d74:	e5823000 	str	r3, [r2]
	I2CWriteLength = 5;
    3d78:	e59f2070 	ldr	r2, [pc, #112]	; 3df0 <I2C0_send_motordata+0x9c>
    3d7c:	e3a03005 	mov	r3, #5
    3d80:	e5823000 	str	r3, [r2]
	I2CReadLength = 0;
    3d84:	e59f2068 	ldr	r2, [pc, #104]	; 3df4 <I2C0_send_motordata+0xa0>
    3d88:	e3a03000 	mov	r3, #0
    3d8c:	e5823000 	str	r3, [r2]
    I2CMasterBuffer[0] = 0x02;
    3d90:	e59f2060 	ldr	r2, [pc, #96]	; 3df8 <I2C0_send_motordata+0xa4>
    3d94:	e3a03002 	mov	r3, #2
    3d98:	e5c23000 	strb	r3, [r2]
    I2CMasterBuffer[1] = 100;
    3d9c:	e59f2054 	ldr	r2, [pc, #84]	; 3df8 <I2C0_send_motordata+0xa4>
    3da0:	e3a03064 	mov	r3, #100	; 0x64
    3da4:	e5c23001 	strb	r3, [r2, #1]
    I2CMasterBuffer[2] = 100;
    3da8:	e59f2048 	ldr	r2, [pc, #72]	; 3df8 <I2C0_send_motordata+0xa4>
    3dac:	e3a03064 	mov	r3, #100	; 0x64
    3db0:	e5c23002 	strb	r3, [r2, #2]
    I2CMasterBuffer[3] = 100;
    3db4:	e59f203c 	ldr	r2, [pc, #60]	; 3df8 <I2C0_send_motordata+0xa4>
    3db8:	e3a03064 	mov	r3, #100	; 0x64
    3dbc:	e5c23003 	strb	r3, [r2, #3]
    I2CMasterBuffer[4] = 1;
    3dc0:	e59f2030 	ldr	r2, [pc, #48]	; 3df8 <I2C0_send_motordata+0xa4>
    3dc4:	e3a03001 	mov	r3, #1
    3dc8:	e5c23004 	strb	r3, [r2, #4]

    //I20CONSET = I2CONSET_STA;	/* Set Start flag */
    //if ( !I2CStart() ) I2CStop();
    I2CCmd = GET_TEMPERATURE;
    3dcc:	e59f2028 	ldr	r2, [pc, #40]	; 3dfc <I2C0_send_motordata+0xa8>
    3dd0:	e3a03002 	mov	r3, #2
    3dd4:	e5823000 	str	r3, [r2]
	I2CEngine();
    3dd8:	eb000066 	bl	3f78 <I2CEngine>
}
    3ddc:	e24bd00c 	sub	sp, fp, #12
    3de0:	e89d6800 	ldm	sp, {fp, sp, lr}
    3de4:	e12fff1e 	bx	lr
    3de8:	40000e2c 	.word	0x40000e2c
    3dec:	40000e28 	.word	0x40000e28
    3df0:	40002030 	.word	0x40002030
    3df4:	40001fe4 	.word	0x40001fe4
    3df8:	4000200c 	.word	0x4000200c
    3dfc:	4000202c 	.word	0x4000202c

00003e00 <I2CStart>:
** parameters:			None
** Returned value:		true or false, return false if timed out
** 
*****************************************************************************/
unsigned int I2CStart( void )
{
    3e00:	e1a0c00d 	mov	ip, sp
    3e04:	e92dd800 	push	{fp, ip, lr, pc}
    3e08:	e24cb004 	sub	fp, ip, #4
    3e0c:	e24dd008 	sub	sp, sp, #8
    unsigned int timeout = 0;
    3e10:	e3a03000 	mov	r3, #0
    3e14:	e50b3014 	str	r3, [fp, #-20]
    unsigned int returnValue = FALSE;
    3e18:	e3a03000 	mov	r3, #0
    3e1c:	e50b3010 	str	r3, [fp, #-16]
 
    /*--- Issue a start condition ---*/
    I20CONSET = I2CONSET_STA;	/* Set Start flag */
    3e20:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3e24:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3e28:	e3a02020 	mov	r2, #32
    3e2c:	e5832000 	str	r2, [r3]
    
    /*--- Wait until START transmitted ---*/
    while( 1 )
    {
	if ( I2CMasterState == I2C_STARTED )
    3e30:	e59f3058 	ldr	r3, [pc, #88]	; 3e90 <I2CStart+0x90>
    3e34:	e5933000 	ldr	r3, [r3]
    3e38:	e3530001 	cmp	r3, #1
    3e3c:	1a000002 	bne	3e4c <I2CStart+0x4c>
	{
	    returnValue = TRUE;
    3e40:	e3a03001 	mov	r3, #1
    3e44:	e50b3010 	str	r3, [fp, #-16]
	    break;	
    3e48:	ea00000b 	b	3e7c <I2CStart+0x7c>
	}
	if ( timeout >= MAX_TIMEOUT )
    3e4c:	e51b2014 	ldr	r2, [fp, #-20]
    3e50:	e3a03401 	mov	r3, #16777216	; 0x1000000
    3e54:	e2433002 	sub	r3, r3, #2
    3e58:	e1520003 	cmp	r2, r3
    3e5c:	9a000002 	bls	3e6c <I2CStart+0x6c>
	{
	    returnValue = FALSE;
    3e60:	e3a03000 	mov	r3, #0
    3e64:	e50b3010 	str	r3, [fp, #-16]
	    break;
    3e68:	ea000003 	b	3e7c <I2CStart+0x7c>
	}
	timeout++;
    3e6c:	e51b3014 	ldr	r3, [fp, #-20]
    3e70:	e2833001 	add	r3, r3, #1
    3e74:	e50b3014 	str	r3, [fp, #-20]
    }
    3e78:	eaffffec 	b	3e30 <I2CStart+0x30>
    return( returnValue );
    3e7c:	e51b3010 	ldr	r3, [fp, #-16]
}
    3e80:	e1a00003 	mov	r0, r3
    3e84:	e24bd00c 	sub	sp, fp, #12
    3e88:	e89d6800 	ldm	sp, {fp, sp, lr}
    3e8c:	e12fff1e 	bx	lr
    3e90:	40000e1c 	.word	0x40000e1c

00003e94 <I2CStop>:
** parameters:			None
** Returned value:		true or never return
** 
*****************************************************************************/
unsigned int I2CStop( void )
{
    3e94:	e1a0c00d 	mov	ip, sp
    3e98:	e92dd800 	push	{fp, ip, lr, pc}
    3e9c:	e24cb004 	sub	fp, ip, #4
    I20CONSET = I2CONSET_STO;      /* Set Stop flag */ 
    3ea0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3ea4:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3ea8:	e3a02010 	mov	r2, #16
    3eac:	e5832000 	str	r2, [r3]
    I20CONCLR = I2CONCLR_SIC;  /* Clear SI flag */ 
    3eb0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3eb4:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3eb8:	e2833018 	add	r3, r3, #24
    3ebc:	e3a02008 	mov	r2, #8
    3ec0:	e5832000 	str	r2, [r3]
            
    /*--- Wait for STOP detected ---*/
    while( I20CONSET & I2CONSET_STO );
    3ec4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3ec8:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3ecc:	e5933000 	ldr	r3, [r3]
    3ed0:	e2033010 	and	r3, r3, #16
    3ed4:	e3530000 	cmp	r3, #0
    3ed8:	1afffff9 	bne	3ec4 <I2CStop+0x30>
    return TRUE;
    3edc:	e3a03001 	mov	r3, #1
}
    3ee0:	e1a00003 	mov	r0, r3
    3ee4:	e24bd00c 	sub	sp, fp, #12
    3ee8:	e89d6800 	ldm	sp, {fp, sp, lr}
    3eec:	e12fff1e 	bx	lr

00003ef0 <I2CInit>:
** Returned value:		true or false, return false if the I2C
**				interrupt handler was not installed correctly
** 
*****************************************************************************/
void I2CInit( unsigned int I2cMode ) 
{
    3ef0:	e1a0c00d 	mov	ip, sp
    3ef4:	e92dd800 	push	{fp, ip, lr, pc}
    3ef8:	e24cb004 	sub	fp, ip, #4
    3efc:	e24dd004 	sub	sp, sp, #4
    3f00:	e50b0010 	str	r0, [fp, #-16]
    IODIR0|= 0x0C;	/* set port 0.2 and port 0.3 to output, high */
    3f04:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    3f08:	e282290a 	add	r2, r2, #163840	; 0x28000
    3f0c:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    3f10:	e283390a 	add	r3, r3, #163840	; 0x28000
    3f14:	e5933000 	ldr	r3, [r3]
    3f18:	e383300c 	orr	r3, r3, #12
    3f1c:	e5823000 	str	r3, [r2]
    IOSET0 = 0x0C;
    3f20:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    3f24:	e283390a 	add	r3, r3, #163840	; 0x28000
    3f28:	e3a0200c 	mov	r2, #12
    3f2c:	e5832000 	str	r2, [r3]

    /*--- Clear flags ---*/
    I20CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;    
    3f30:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3f34:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3f38:	e2833018 	add	r3, r3, #24
    3f3c:	e3a0206c 	mov	r2, #108	; 0x6c
    3f40:	e5832000 	str	r2, [r3]

    /*--- Reset registers ---*/
    I20SCLL   = I2SCLL_SCLL;
    3f44:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3f48:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3f4c:	e2833014 	add	r3, r3, #20
    3f50:	e3a02080 	mov	r2, #128	; 0x80
    3f54:	e5832000 	str	r2, [r3]
    I20SCLH   = I2SCLH_SCLH;
    3f58:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3f5c:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3f60:	e2833010 	add	r3, r3, #16
    3f64:	e3a02080 	mov	r2, #128	; 0x80
    3f68:	e5832000 	str	r2, [r3]
}
    3f6c:	e24bd00c 	sub	sp, fp, #12
    3f70:	e89d6800 	ldm	sp, {fp, sp, lr}
    3f74:	e12fff1e 	bx	lr

00003f78 <I2CEngine>:
**				start condition can never be generated and
**				timed out. 
** 
*****************************************************************************/
unsigned int I2CEngine( void ) 
{
    3f78:	e1a0c00d 	mov	ip, sp
    3f7c:	e92dd800 	push	{fp, ip, lr, pc}
    3f80:	e24cb004 	sub	fp, ip, #4
    3f84:	e24dd004 	sub	sp, sp, #4
    I2CMasterState = I2C_IDLE;
    3f88:	e59f206c 	ldr	r2, [pc, #108]	; 3ffc <I2CEngine+0x84>
    3f8c:	e3a03000 	mov	r3, #0
    3f90:	e5823000 	str	r3, [r2]
    RdIndex = 0;
    3f94:	e59f2064 	ldr	r2, [pc, #100]	; 4000 <I2CEngine+0x88>
    3f98:	e3a03000 	mov	r3, #0
    3f9c:	e5823000 	str	r3, [r2]
    WrIndex = 0;
    3fa0:	e59f205c 	ldr	r2, [pc, #92]	; 4004 <I2CEngine+0x8c>
    3fa4:	e3a03000 	mov	r3, #0
    3fa8:	e5823000 	str	r3, [r2]
    if ( I2CStart() != TRUE )
    3fac:	ebffff93 	bl	3e00 <I2CStart>
    3fb0:	e1a03000 	mov	r3, r0
    3fb4:	e3530001 	cmp	r3, #1
    3fb8:	0a000003 	beq	3fcc <I2CEngine+0x54>
    {
		I2CStop();
    3fbc:	ebffffb4 	bl	3e94 <I2CStop>
	return ( FALSE );
    3fc0:	e3a03000 	mov	r3, #0
    3fc4:	e50b3010 	str	r3, [fp, #-16]
    3fc8:	ea000006 	b	3fe8 <I2CEngine+0x70>
    }
    while ( 1 )
    {
	if ( I2CMasterState == DATA_NACK )
    3fcc:	e59f3028 	ldr	r3, [pc, #40]	; 3ffc <I2CEngine+0x84>
    3fd0:	e5933000 	ldr	r3, [r3]
    3fd4:	e3530005 	cmp	r3, #5
    3fd8:	1afffffb 	bne	3fcc <I2CEngine+0x54>
	{
	    I2CStop();
    3fdc:	ebffffac 	bl	3e94 <I2CStop>
	    break;
	}
    }    
    return ( TRUE );      
    3fe0:	e3a03001 	mov	r3, #1
    3fe4:	e50b3010 	str	r3, [fp, #-16]
	if ( I2CMasterState == DATA_NACK )
	{
	    I2CStop();
	    break;
	}
    }    
    3fe8:	e51b3010 	ldr	r3, [fp, #-16]
    return ( TRUE );      
}
    3fec:	e1a00003 	mov	r0, r3
    3ff0:	e24bd00c 	sub	sp, fp, #12
    3ff4:	e89d6800 	ldm	sp, {fp, sp, lr}
    3ff8:	e12fff1e 	bx	lr
    3ffc:	40000e1c 	.word	0x40000e1c
    4000:	40000e28 	.word	0x40000e28
    4004:	40000e2c 	.word	0x40000e2c

00004008 <I2C1MasterHandler>:
** Returned value:		None
**
*****************************************************************************/

void I2C1MasterHandler (void) __irq
{
    4008:	e1a0c00d 	mov	ip, sp
    400c:	e92dd800 	push	{fp, ip, lr, pc}
    4010:	e24cb004 	sub	fp, ip, #4
    4014:	e24dd004 	sub	sp, sp, #4
    BYTE StatValue;

    /* this handler deals with master read and master write only */
    StatValue = I21STAT;
    4018:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    401c:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4020:	e5933000 	ldr	r3, [r3]
    4024:	e54b300d 	strb	r3, [fp, #-13]

    IENABLE;
    switch ( StatValue )
    4028:	e55b300d 	ldrb	r3, [fp, #-13]
    402c:	e2433008 	sub	r3, r3, #8
    4030:	e3530028 	cmp	r3, #40	; 0x28
    4034:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    4038:	ea00009e 	b	42b8 <I2C1MasterHandler+0x2b0>
    403c:	000040e0 	.word	0x000040e0
    4040:	000042b8 	.word	0x000042b8
    4044:	000042b8 	.word	0x000042b8
    4048:	000042b8 	.word	0x000042b8
    404c:	000042b8 	.word	0x000042b8
    4050:	000042b8 	.word	0x000042b8
    4054:	000042b8 	.word	0x000042b8
    4058:	000042b8 	.word	0x000042b8
    405c:	000042b8 	.word	0x000042b8
    4060:	000042b8 	.word	0x000042b8
    4064:	000042b8 	.word	0x000042b8
    4068:	000042b8 	.word	0x000042b8
    406c:	000042b8 	.word	0x000042b8
    4070:	000042b8 	.word	0x000042b8
    4074:	000042b8 	.word	0x000042b8
    4078:	000042b8 	.word	0x000042b8
    407c:	00004118 	.word	0x00004118
    4080:	000042b8 	.word	0x000042b8
    4084:	000042b8 	.word	0x000042b8
    4088:	000042b8 	.word	0x000042b8
    408c:	000042b8 	.word	0x000042b8
    4090:	000042b8 	.word	0x000042b8
    4094:	000042b8 	.word	0x000042b8
    4098:	000042b8 	.word	0x000042b8
    409c:	00004264 	.word	0x00004264
    40a0:	000042b8 	.word	0x000042b8
    40a4:	000042b8 	.word	0x000042b8
    40a8:	000042b8 	.word	0x000042b8
    40ac:	000042b8 	.word	0x000042b8
    40b0:	000042b8 	.word	0x000042b8
    40b4:	000042b8 	.word	0x000042b8
    40b8:	000042b8 	.word	0x000042b8
    40bc:	00004174 	.word	0x00004174
    40c0:	000042b8 	.word	0x000042b8
    40c4:	000042b8 	.word	0x000042b8
    40c8:	000042b8 	.word	0x000042b8
    40cc:	000042b8 	.word	0x000042b8
    40d0:	000042b8 	.word	0x000042b8
    40d4:	000042b8 	.word	0x000042b8
    40d8:	000042b8 	.word	0x000042b8
    40dc:	00004224 	.word	0x00004224
    {
	case 0x08:			/* A Start condition is issued. */
	I21DAT = I2C1MasterBuffer[0];
    40e0:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    40e4:	e2822917 	add	r2, r2, #376832	; 0x5c000
    40e8:	e59f31f8 	ldr	r3, [pc, #504]	; 42e8 <I2C1MasterHandler+0x2e0>
    40ec:	e5d33000 	ldrb	r3, [r3]
    40f0:	e5823000 	str	r3, [r2]
	I21CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    40f4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    40f8:	e2833917 	add	r3, r3, #376832	; 0x5c000
    40fc:	e2833018 	add	r3, r3, #24
    4100:	e3a02028 	mov	r2, #40	; 0x28
    4104:	e5832000 	str	r2, [r3]
	I2C1MasterState = I2C_STARTED;
    4108:	e59f21dc 	ldr	r2, [pc, #476]	; 42ec <I2C1MasterHandler+0x2e4>
    410c:	e3a03001 	mov	r3, #1
    4110:	e5823000 	str	r3, [r2]
	break;
    4114:	ea00006c 	b	42cc <I2C1MasterHandler+0x2c4>


	case 0x18:			/* Regardless, it's a ACK */
	if ( I2C1MasterState == I2C_STARTED )
    4118:	e59f31cc 	ldr	r3, [pc, #460]	; 42ec <I2C1MasterHandler+0x2e4>
    411c:	e5933000 	ldr	r3, [r3]
    4120:	e3530001 	cmp	r3, #1
    4124:	1a00000c 	bne	415c <I2C1MasterHandler+0x154>
	{
	    I21DAT = I2C1MasterBuffer[1];
    4128:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    412c:	e2822917 	add	r2, r2, #376832	; 0x5c000
    4130:	e59f31b0 	ldr	r3, [pc, #432]	; 42e8 <I2C1MasterHandler+0x2e0>
    4134:	e5d33001 	ldrb	r3, [r3, #1]
    4138:	e5823000 	str	r3, [r2]
	    WrIndex1++;
    413c:	e59f31ac 	ldr	r3, [pc, #428]	; 42f0 <I2C1MasterHandler+0x2e8>
    4140:	e5933000 	ldr	r3, [r3]
    4144:	e2832001 	add	r2, r3, #1
    4148:	e59f31a0 	ldr	r3, [pc, #416]	; 42f0 <I2C1MasterHandler+0x2e8>
    414c:	e5832000 	str	r2, [r3]
	    I2C1MasterState = DATA_ACK;
    4150:	e59f2194 	ldr	r2, [pc, #404]	; 42ec <I2C1MasterHandler+0x2e4>
    4154:	e3a03004 	mov	r3, #4
    4158:	e5823000 	str	r3, [r2]
	}
	I21CONCLR = I2CONCLR_SIC;
    415c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4160:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4164:	e2833018 	add	r3, r3, #24
    4168:	e3a02008 	mov	r2, #8
    416c:	e5832000 	str	r2, [r3]
	break;
    4170:	ea000055 	b	42cc <I2C1MasterHandler+0x2c4>

	case 0x28:	/* Data byte has been transmitted, regardless ACK or NACK */
	if ( WrIndex1 < I2C1WriteLength )
    4174:	e59f3174 	ldr	r3, [pc, #372]	; 42f0 <I2C1MasterHandler+0x2e8>
    4178:	e5932000 	ldr	r2, [r3]
    417c:	e59f3170 	ldr	r3, [pc, #368]	; 42f4 <I2C1MasterHandler+0x2ec>
    4180:	e5933000 	ldr	r3, [r3]
    4184:	e1520003 	cmp	r2, r3
    4188:	2a000010 	bcs	41d0 <I2C1MasterHandler+0x1c8>
	{
	    I21DAT = I2C1MasterBuffer[1+WrIndex1]; /* this should be the last one */
    418c:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    4190:	e2822917 	add	r2, r2, #376832	; 0x5c000
    4194:	e59f3154 	ldr	r3, [pc, #340]	; 42f0 <I2C1MasterHandler+0x2e8>
    4198:	e5933000 	ldr	r3, [r3]
    419c:	e2831001 	add	r1, r3, #1
    41a0:	e59f3140 	ldr	r3, [pc, #320]	; 42e8 <I2C1MasterHandler+0x2e0>
    41a4:	e7d33001 	ldrb	r3, [r3, r1]
    41a8:	e5823000 	str	r3, [r2]
	    WrIndex1++;
    41ac:	e59f313c 	ldr	r3, [pc, #316]	; 42f0 <I2C1MasterHandler+0x2e8>
    41b0:	e5933000 	ldr	r3, [r3]
    41b4:	e2832001 	add	r2, r3, #1
    41b8:	e59f3130 	ldr	r3, [pc, #304]	; 42f0 <I2C1MasterHandler+0x2e8>
    41bc:	e5832000 	str	r2, [r3]
	    I2C1MasterState = DATA_ACK;
    41c0:	e59f2124 	ldr	r2, [pc, #292]	; 42ec <I2C1MasterHandler+0x2e4>
    41c4:	e3a03004 	mov	r3, #4
    41c8:	e5823000 	str	r3, [r2]
    41cc:	ea00000b 	b	4200 <I2C1MasterHandler+0x1f8>

	}
	else
	{
		I2C1MasterState = DATA_WRITE_DONE;
    41d0:	e59f2114 	ldr	r2, [pc, #276]	; 42ec <I2C1MasterHandler+0x2e4>
    41d4:	e3a03007 	mov	r3, #7
    41d8:	e5823000 	str	r3, [r2]
		  	//I2C Stop
		I21CONSET = I2CONSET_STO;      /* Set Stop flag */
    41dc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    41e0:	e2833917 	add	r3, r3, #376832	; 0x5c000
    41e4:	e3a02010 	mov	r2, #16
    41e8:	e5832000 	str	r2, [r3]
		I21CONCLR = I2CONCLR_SIC;  /* Clear SI flag */
    41ec:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    41f0:	e2833917 	add	r3, r3, #376832	; 0x5c000
    41f4:	e2833018 	add	r3, r3, #24
    41f8:	e3a02008 	mov	r2, #8
    41fc:	e5832000 	str	r2, [r3]
	}
	I21CONCLR = I2CONCLR_SIC;
    4200:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4204:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4208:	e2833018 	add	r3, r3, #24
    420c:	e3a02008 	mov	r2, #8
    4210:	e5832000 	str	r2, [r3]
	lastI2c1Error=I2C_ERROR_NONE;
    4214:	e59f20dc 	ldr	r2, [pc, #220]	; 42f8 <I2C1MasterHandler+0x2f0>
    4218:	e3a03000 	mov	r3, #0
    421c:	e5c23000 	strb	r3, [r2]

	break;
    4220:	ea000029 	b	42cc <I2C1MasterHandler+0x2c4>

	case 0x30: //data has been transmited but NACK was received
		I2C1MasterState = DATA_NACK;
    4224:	e59f20c0 	ldr	r2, [pc, #192]	; 42ec <I2C1MasterHandler+0x2e4>
    4228:	e3a03005 	mov	r3, #5
    422c:	e5823000 	str	r3, [r2]
		  	//I2C Stop
		I21CONSET = I2CONSET_STO;      /* Set Stop flag */
    4230:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4234:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4238:	e3a02010 	mov	r2, #16
    423c:	e5832000 	str	r2, [r3]
		I21CONCLR = I2CONCLR_SIC;  /* Clear SI flag */
    4240:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4244:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4248:	e2833018 	add	r3, r3, #24
    424c:	e3a02008 	mov	r2, #8
    4250:	e5832000 	str	r2, [r3]
		lastI2c1Error=I2C_ERROR_NACKAFTERWRITE;
    4254:	e59f209c 	ldr	r2, [pc, #156]	; 42f8 <I2C1MasterHandler+0x2f0>
    4258:	e3a03002 	mov	r3, #2
    425c:	e5c23000 	strb	r3, [r2]
	break;
    4260:	ea000019 	b	42cc <I2C1MasterHandler+0x2c4>

	case 0x20: //NACK received, receiver not found
				I21CONCLR = I2CONCLR_SIC;
    4264:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4268:	e2833917 	add	r3, r3, #376832	; 0x5c000
    426c:	e2833018 	add	r3, r3, #24
    4270:	e3a02008 	mov	r2, #8
    4274:	e5832000 	str	r2, [r3]
				I2C1MasterState = DATA_NACK;
    4278:	e59f206c 	ldr	r2, [pc, #108]	; 42ec <I2C1MasterHandler+0x2e4>
    427c:	e3a03005 	mov	r3, #5
    4280:	e5823000 	str	r3, [r2]
				//I2C Stop
				I21CONSET = I2CONSET_STO;      /* Set Stop flag */
    4284:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4288:	e2833917 	add	r3, r3, #376832	; 0x5c000
    428c:	e3a02010 	mov	r2, #16
    4290:	e5832000 	str	r2, [r3]
				I21CONCLR = I2CONCLR_SIC;  /* Clear SI flag */
    4294:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4298:	e2833917 	add	r3, r3, #376832	; 0x5c000
    429c:	e2833018 	add	r3, r3, #24
    42a0:	e3a02008 	mov	r2, #8
    42a4:	e5832000 	str	r2, [r3]
				lastI2c1Error=I2C_ERROR_NACKAFTERSTART;
    42a8:	e59f2048 	ldr	r2, [pc, #72]	; 42f8 <I2C1MasterHandler+0x2f0>
    42ac:	e3a03001 	mov	r3, #1
    42b0:	e5c23000 	strb	r3, [r2]
	break;
    42b4:	ea000004 	b	42cc <I2C1MasterHandler+0x2c4>



	default:
	I21CONCLR = I2CONCLR_SIC;
    42b8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    42bc:	e2833917 	add	r3, r3, #376832	; 0x5c000
    42c0:	e2833018 	add	r3, r3, #24
    42c4:	e3a02008 	mov	r2, #8
    42c8:	e5832000 	str	r2, [r3]
	break;
    }

    IDISABLE;
    VICVectAddr = 0;		/* Acknowledge Interrupt */
    42cc:	e3a03000 	mov	r3, #0
    42d0:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    42d4:	e3a02000 	mov	r2, #0
    42d8:	e5832000 	str	r2, [r3]

}
    42dc:	e24bd00c 	sub	sp, fp, #12
    42e0:	e89d6800 	ldm	sp, {fp, sp, lr}
    42e4:	e12fff1e 	bx	lr
    42e8:	40002038 	.word	0x40002038
    42ec:	40000e30 	.word	0x40000e30
    42f0:	40000e38 	.word	0x40000e38
    42f4:	40002034 	.word	0x40002034
    42f8:	40000e3c 	.word	0x40000e3c

000042fc <fireFlyLedHandler>:

void fireFlyLedHandler(void) 	//called with 100Hz
{
    42fc:	e1a0c00d 	mov	ip, sp
    4300:	e92dd800 	push	{fp, ip, lr, pc}
    4304:	e24cb004 	sub	fp, ip, #4
    4308:	e24dd00c 	sub	sp, sp, #12
	static unsigned short cnt=0;
	static unsigned char mfsCnt=0;
	static unsigned char mincCnt=0;
	static unsigned char ceCnt=0;

	errorFlags=0;
    430c:	e3a03000 	mov	r3, #0
    4310:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee


	if (LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_GYROS)
    4314:	e59f3af4 	ldr	r3, [pc, #2804]	; 4e10 <fireFlyLedHandler+0xb14>
    4318:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    431c:	e1a03803 	lsl	r3, r3, #16
    4320:	e1a03823 	lsr	r3, r3, #16
    4324:	e2033c02 	and	r3, r3, #512	; 0x200
    4328:	e3530000 	cmp	r3, #0
    432c:	0a000002 	beq	433c <fireFlyLedHandler+0x40>
	{
		errorFlags|=0x02;
    4330:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4334:	e3833002 	orr	r3, r3, #2
    4338:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	}

	if (LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_ACC)
    433c:	e59f3acc 	ldr	r3, [pc, #2764]	; 4e10 <fireFlyLedHandler+0xb14>
    4340:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    4344:	e1a03803 	lsl	r3, r3, #16
    4348:	e1a03823 	lsr	r3, r3, #16
    434c:	e2033b01 	and	r3, r3, #1024	; 0x400
    4350:	e3530000 	cmp	r3, #0
    4354:	0a000002 	beq	4364 <fireFlyLedHandler+0x68>
	{
		errorFlags|=0x04;
    4358:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    435c:	e3833004 	orr	r3, r3, #4
    4360:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	}

	if ((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE) && (ceCnt<5))
    4364:	e59f3aa4 	ldr	r3, [pc, #2724]	; 4e10 <fireFlyLedHandler+0xb14>
    4368:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    436c:	e1a03803 	lsl	r3, r3, #16
    4370:	e1a03823 	lsr	r3, r3, #16
    4374:	e2033010 	and	r3, r3, #16
    4378:	e3530000 	cmp	r3, #0
    437c:	0a000006 	beq	439c <fireFlyLedHandler+0xa0>
    4380:	e59f3a8c 	ldr	r3, [pc, #2700]	; 4e14 <fireFlyLedHandler+0xb18>
    4384:	e5d33000 	ldrb	r3, [r3]
    4388:	e3530004 	cmp	r3, #4
    438c:	8a000002 	bhi	439c <fireFlyLedHandler+0xa0>
	{
		errorFlags|=0x08;
    4390:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4394:	e3833008 	orr	r3, r3, #8
    4398:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	}

	if ((LL_1khz_attitude_data.flightMode&FM_MAG_INCLINATION_ERROR) && (mincCnt<5) && ((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE)==0))
    439c:	e59f3a6c 	ldr	r3, [pc, #2668]	; 4e10 <fireFlyLedHandler+0xb14>
    43a0:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    43a4:	e1a03803 	lsl	r3, r3, #16
    43a8:	e1a03843 	asr	r3, r3, #16
    43ac:	e3530000 	cmp	r3, #0
    43b0:	aa00000d 	bge	43ec <fireFlyLedHandler+0xf0>
    43b4:	e59f3a5c 	ldr	r3, [pc, #2652]	; 4e18 <fireFlyLedHandler+0xb1c>
    43b8:	e5d33000 	ldrb	r3, [r3]
    43bc:	e3530004 	cmp	r3, #4
    43c0:	8a000009 	bhi	43ec <fireFlyLedHandler+0xf0>
    43c4:	e59f3a44 	ldr	r3, [pc, #2628]	; 4e10 <fireFlyLedHandler+0xb14>
    43c8:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    43cc:	e1a03803 	lsl	r3, r3, #16
    43d0:	e1a03823 	lsr	r3, r3, #16
    43d4:	e2033010 	and	r3, r3, #16
    43d8:	e3530000 	cmp	r3, #0
    43dc:	1a000002 	bne	43ec <fireFlyLedHandler+0xf0>
	{
		errorFlags|=0x10;
    43e0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    43e4:	e3833010 	orr	r3, r3, #16
    43e8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	}

	if ((LL_1khz_attitude_data.flightMode&FM_MAG_FIELD_STRENGTH_ERROR) && (mfsCnt<5) && ((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE)==0))
    43ec:	e59f3a1c 	ldr	r3, [pc, #2588]	; 4e10 <fireFlyLedHandler+0xb14>
    43f0:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    43f4:	e1a03803 	lsl	r3, r3, #16
    43f8:	e1a03823 	lsr	r3, r3, #16
    43fc:	e2033901 	and	r3, r3, #16384	; 0x4000
    4400:	e3530000 	cmp	r3, #0
    4404:	0a00000d 	beq	4440 <fireFlyLedHandler+0x144>
    4408:	e59f3a0c 	ldr	r3, [pc, #2572]	; 4e1c <fireFlyLedHandler+0xb20>
    440c:	e5d33000 	ldrb	r3, [r3]
    4410:	e3530004 	cmp	r3, #4
    4414:	8a000009 	bhi	4440 <fireFlyLedHandler+0x144>
    4418:	e59f39f0 	ldr	r3, [pc, #2544]	; 4e10 <fireFlyLedHandler+0xb14>
    441c:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    4420:	e1a03803 	lsl	r3, r3, #16
    4424:	e1a03823 	lsr	r3, r3, #16
    4428:	e2033010 	and	r3, r3, #16
    442c:	e3530000 	cmp	r3, #0
    4430:	1a000002 	bne	4440 <fireFlyLedHandler+0x144>
	{
		errorFlags|=0x20;
    4434:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4438:	e3833020 	orr	r3, r3, #32
    443c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	}

	cnt++;
    4440:	e59f39d8 	ldr	r3, [pc, #2520]	; 4e20 <fireFlyLedHandler+0xb24>
    4444:	e1d330b0 	ldrh	r3, [r3]
    4448:	e2833001 	add	r3, r3, #1
    444c:	e1a03803 	lsl	r3, r3, #16
    4450:	e1a02823 	lsr	r2, r3, #16
    4454:	e59f39c4 	ldr	r3, [pc, #2500]	; 4e20 <fireFlyLedHandler+0xb24>
    4458:	e1c320b0 	strh	r2, [r3]
	if (cnt==200)
    445c:	e59f39bc 	ldr	r3, [pc, #2492]	; 4e20 <fireFlyLedHandler+0xb24>
    4460:	e1d330b0 	ldrh	r3, [r3]
    4464:	e35300c8 	cmp	r3, #200	; 0xc8
    4468:	1a000002 	bne	4478 <fireFlyLedHandler+0x17c>
		cnt=0;
    446c:	e59f39ac 	ldr	r3, [pc, #2476]	; 4e20 <fireFlyLedHandler+0xb24>
    4470:	e3a02000 	mov	r2, #0
    4474:	e1c320b0 	strh	r2, [r3]
	if(!SYSTEM_initialized)
    4478:	e59f39a4 	ldr	r3, [pc, #2468]	; 4e24 <fireFlyLedHandler+0xb28>
    447c:	e5d33000 	ldrb	r3, [r3]
    4480:	e20330ff 	and	r3, r3, #255	; 0xff
    4484:	e3530000 	cmp	r3, #0
    4488:	1a000009 	bne	44b4 <fireFlyLedHandler+0x1b8>
		{
			errorFlags|=0x01;
    448c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4490:	e3833001 	orr	r3, r3, #1
    4494:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
			r=0;
    4498:	e3a03000 	mov	r3, #0
    449c:	e54b3015 	strb	r3, [fp, #-21]
			g=0;
    44a0:	e3a03000 	mov	r3, #0
    44a4:	e54b3014 	strb	r3, [fp, #-20]
			b=255;
    44a8:	e3e03000 	mvn	r3, #0
    44ac:	e54b3013 	strb	r3, [fp, #-19]
    44b0:	ea000080 	b	46b8 <fireFlyLedHandler+0x3bc>
		}
	else if (((GPS_Data.status&0xFF)==3) && (HL_Status.battery_voltage_1>11000))
    44b4:	e59f396c 	ldr	r3, [pc, #2412]	; 4e28 <fireFlyLedHandler+0xb2c>
    44b8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
    44bc:	e20330ff 	and	r3, r3, #255	; 0xff
    44c0:	e3530003 	cmp	r3, #3
    44c4:	1a00000e 	bne	4504 <fireFlyLedHandler+0x208>
    44c8:	e59f395c 	ldr	r3, [pc, #2396]	; 4e2c <fireFlyLedHandler+0xb30>
    44cc:	e1d330b0 	ldrh	r3, [r3]
    44d0:	e1a03803 	lsl	r3, r3, #16
    44d4:	e1a02843 	asr	r2, r3, #16
    44d8:	e3a03dab 	mov	r3, #10944	; 0x2ac0
    44dc:	e2833038 	add	r3, r3, #56	; 0x38
    44e0:	e1520003 	cmp	r2, r3
    44e4:	da000006 	ble	4504 <fireFlyLedHandler+0x208>
    {
    	r=0;
    44e8:	e3a03000 	mov	r3, #0
    44ec:	e54b3015 	strb	r3, [fp, #-21]
    	g=255;
    44f0:	e3e03000 	mvn	r3, #0
    44f4:	e54b3014 	strb	r3, [fp, #-20]
    	b=0;
    44f8:	e3a03000 	mov	r3, #0
    44fc:	e54b3013 	strb	r3, [fp, #-19]
			errorFlags|=0x01;
			r=0;
			g=0;
			b=255;
		}
	else if (((GPS_Data.status&0xFF)==3) && (HL_Status.battery_voltage_1>11000))
    4500:	ea00006c 	b	46b8 <fireFlyLedHandler+0x3bc>
    {
    	r=0;
    	g=255;
    	b=0;
    }else if (HL_Status.battery_voltage_1<11000)
    4504:	e59f3920 	ldr	r3, [pc, #2336]	; 4e2c <fireFlyLedHandler+0xb30>
    4508:	e1d330b0 	ldrh	r3, [r3]
    450c:	e1a03803 	lsl	r3, r3, #16
    4510:	e1a02843 	asr	r2, r3, #16
    4514:	e3a03dab 	mov	r3, #10944	; 0x2ac0
    4518:	e2833037 	add	r3, r3, #55	; 0x37
    451c:	e1520003 	cmp	r2, r3
    4520:	ca000059 	bgt	468c <fireFlyLedHandler+0x390>
    {
    	unsigned int dim=11000-HL_Status.battery_voltage_1;
    4524:	e59f3900 	ldr	r3, [pc, #2304]	; 4e2c <fireFlyLedHandler+0xb30>
    4528:	e1d330b0 	ldrh	r3, [r3]
    452c:	e1a03803 	lsl	r3, r3, #16
    4530:	e1a03843 	asr	r3, r3, #16
    4534:	e2633dab 	rsb	r3, r3, #10944	; 0x2ac0
    4538:	e2833038 	add	r3, r3, #56	; 0x38
    453c:	e50b3010 	str	r3, [fp, #-16]

    	if (dim>1000)
    4540:	e51b3010 	ldr	r3, [fp, #-16]
    4544:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    4548:	9a000001 	bls	4554 <fireFlyLedHandler+0x258>
    		dim=1000;
    454c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    4550:	e50b3010 	str	r3, [fp, #-16]


    	if ((GPS_Data.status&0xFF)!=3)
    4554:	e59f38cc 	ldr	r3, [pc, #2252]	; 4e28 <fireFlyLedHandler+0xb2c>
    4558:	e5933028 	ldr	r3, [r3, #40]	; 0x28
    455c:	e20330ff 	and	r3, r3, #255	; 0xff
    4560:	e3530003 	cmp	r3, #3
    4564:	0a000018 	beq	45cc <fireFlyLedHandler+0x2d0>
    	{
        	dim/=6;
    4568:	e51b2010 	ldr	r2, [fp, #-16]
    456c:	e59f38bc 	ldr	r3, [pc, #2236]	; 4e30 <fireFlyLedHandler+0xb34>
    4570:	e0831392 	umull	r1, r3, r2, r3
    4574:	e1a03123 	lsr	r3, r3, #2
    4578:	e50b3010 	str	r3, [fp, #-16]
        	dim+=10;
    457c:	e51b3010 	ldr	r3, [fp, #-16]
    4580:	e283300a 	add	r3, r3, #10
    4584:	e50b3010 	str	r3, [fp, #-16]
        	if (dim>165)
    4588:	e51b3010 	ldr	r3, [fp, #-16]
    458c:	e35300a5 	cmp	r3, #165	; 0xa5
    4590:	9a000001 	bls	459c <fireFlyLedHandler+0x2a0>
        		dim=165;
    4594:	e3a030a5 	mov	r3, #165	; 0xa5
    4598:	e50b3010 	str	r3, [fp, #-16]
    		r=255;
    459c:	e3e03000 	mvn	r3, #0
    45a0:	e54b3015 	strb	r3, [fp, #-21]
    		g=165-dim;
    45a4:	e51b3010 	ldr	r3, [fp, #-16]
    45a8:	e20330ff 	and	r3, r3, #255	; 0xff
    45ac:	e26334ff 	rsb	r3, r3, #-16777216	; 0xff000000
    45b0:	e28338ff 	add	r3, r3, #16711680	; 0xff0000
    45b4:	e2833cff 	add	r3, r3, #65280	; 0xff00
    45b8:	e28330a5 	add	r3, r3, #165	; 0xa5
    45bc:	e54b3014 	strb	r3, [fp, #-20]
    		b=0;
    45c0:	e3a03000 	mov	r3, #0
    45c4:	e54b3013 	strb	r3, [fp, #-19]
    45c8:	ea000012 	b	4618 <fireFlyLedHandler+0x31c>
    	}else
    	{
        	dim/=4;
    45cc:	e51b3010 	ldr	r3, [fp, #-16]
    45d0:	e1a03123 	lsr	r3, r3, #2
    45d4:	e50b3010 	str	r3, [fp, #-16]
        	dim+=5;
    45d8:	e51b3010 	ldr	r3, [fp, #-16]
    45dc:	e2833005 	add	r3, r3, #5
    45e0:	e50b3010 	str	r3, [fp, #-16]
        	if (dim>255)
    45e4:	e51b3010 	ldr	r3, [fp, #-16]
    45e8:	e35300ff 	cmp	r3, #255	; 0xff
    45ec:	9a000001 	bls	45f8 <fireFlyLedHandler+0x2fc>
        		dim=255;
    45f0:	e3a030ff 	mov	r3, #255	; 0xff
    45f4:	e50b3010 	str	r3, [fp, #-16]
    		r=dim;
    45f8:	e51b3010 	ldr	r3, [fp, #-16]
    45fc:	e54b3015 	strb	r3, [fp, #-21]
    		g=255-dim;
    4600:	e51b3010 	ldr	r3, [fp, #-16]
    4604:	e20330ff 	and	r3, r3, #255	; 0xff
    4608:	e1e03003 	mvn	r3, r3
    460c:	e54b3014 	strb	r3, [fp, #-20]
    		b=0;
    4610:	e3a03000 	mov	r3, #0
    4614:	e54b3013 	strb	r3, [fp, #-19]
    	}
    	if(HL_Status.battery_voltage_1<10300) //blink LED @ very low voltage
    4618:	e59f380c 	ldr	r3, [pc, #2060]	; 4e2c <fireFlyLedHandler+0xb30>
    461c:	e1d330b0 	ldrh	r3, [r3]
    4620:	e1a03803 	lsl	r3, r3, #16
    4624:	e1a02843 	asr	r2, r3, #16
    4628:	e3a03b0a 	mov	r3, #10240	; 0x2800
    462c:	e283303b 	add	r3, r3, #59	; 0x3b
    4630:	e1520003 	cmp	r2, r3
    4634:	ca00001f 	bgt	46b8 <fireFlyLedHandler+0x3bc>
    	{
    		if((cnt%20)<10) {r=0;g=0;b=0;};
    4638:	e59f37e0 	ldr	r3, [pc, #2016]	; 4e20 <fireFlyLedHandler+0xb24>
    463c:	e1d310b0 	ldrh	r1, [r3]
    4640:	e59f37ec 	ldr	r3, [pc, #2028]	; 4e34 <fireFlyLedHandler+0xb38>
    4644:	e0832391 	umull	r2, r3, r1, r3
    4648:	e1a02223 	lsr	r2, r3, #4
    464c:	e1a03002 	mov	r3, r2
    4650:	e1a03103 	lsl	r3, r3, #2
    4654:	e0833002 	add	r3, r3, r2
    4658:	e1a03103 	lsl	r3, r3, #2
    465c:	e0633001 	rsb	r3, r3, r1
    4660:	e1a03803 	lsl	r3, r3, #16
    4664:	e1a03823 	lsr	r3, r3, #16
    4668:	e3530009 	cmp	r3, #9
    466c:	8a000011 	bhi	46b8 <fireFlyLedHandler+0x3bc>
    4670:	e3a03000 	mov	r3, #0
    4674:	e54b3015 	strb	r3, [fp, #-21]
    4678:	e3a03000 	mov	r3, #0
    467c:	e54b3014 	strb	r3, [fp, #-20]
    4680:	e3a03000 	mov	r3, #0
    4684:	e54b3013 	strb	r3, [fp, #-19]
    4688:	ea00000a 	b	46b8 <fireFlyLedHandler+0x3bc>
    	}
    }else if ((GPS_Data.status&0xFF)!=3)
    468c:	e59f3794 	ldr	r3, [pc, #1940]	; 4e28 <fireFlyLedHandler+0xb2c>
    4690:	e5933028 	ldr	r3, [r3, #40]	; 0x28
    4694:	e20330ff 	and	r3, r3, #255	; 0xff
    4698:	e3530003 	cmp	r3, #3
    469c:	0a000005 	beq	46b8 <fireFlyLedHandler+0x3bc>
    {
    	r=255;
    46a0:	e3e03000 	mvn	r3, #0
    46a4:	e54b3015 	strb	r3, [fp, #-21]
    	g=165;
    46a8:	e3e0305a 	mvn	r3, #90	; 0x5a
    46ac:	e54b3014 	strb	r3, [fp, #-20]
    	b=0;
    46b0:	e3a03000 	mov	r3, #0
    46b4:	e54b3013 	strb	r3, [fp, #-19]
    }

	if ((cnt<=100) && (errorFlags))
    46b8:	e59f3760 	ldr	r3, [pc, #1888]	; 4e20 <fireFlyLedHandler+0xb24>
    46bc:	e1d330b0 	ldrh	r3, [r3]
    46c0:	e3530064 	cmp	r3, #100	; 0x64
    46c4:	8a000008 	bhi	46ec <fireFlyLedHandler+0x3f0>
    46c8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    46cc:	e3530000 	cmp	r3, #0
    46d0:	0a000005 	beq	46ec <fireFlyLedHandler+0x3f0>
	{
		r=g=b=0;
    46d4:	e3a03000 	mov	r3, #0
    46d8:	e54b3013 	strb	r3, [fp, #-19]
    46dc:	e55b3013 	ldrb	r3, [fp, #-19]
    46e0:	e54b3014 	strb	r3, [fp, #-20]
    46e4:	e55b3014 	ldrb	r3, [fp, #-20]
    46e8:	e54b3015 	strb	r3, [fp, #-21]
	}

	if ((cnt>100) && (cnt<200) && (errorFlags)) //always signal errors for 1 second.
    46ec:	e59f372c 	ldr	r3, [pc, #1836]	; 4e20 <fireFlyLedHandler+0xb24>
    46f0:	e1d330b0 	ldrh	r3, [r3]
    46f4:	e3530064 	cmp	r3, #100	; 0x64
    46f8:	9a0001ba 	bls	4de8 <fireFlyLedHandler+0xaec>
    46fc:	e59f371c 	ldr	r3, [pc, #1820]	; 4e20 <fireFlyLedHandler+0xb24>
    4700:	e1d330b0 	ldrh	r3, [r3]
    4704:	e35300c7 	cmp	r3, #199	; 0xc7
    4708:	8a0001b6 	bhi	4de8 <fireFlyLedHandler+0xaec>
    470c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4710:	e3530000 	cmp	r3, #0
    4714:	0a0001b3 	beq	4de8 <fireFlyLedHandler+0xaec>
	{
		//overwrite rgb with error signaling
		if (errorFlags & 0x02) //gyros
    4718:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    471c:	e2033002 	and	r3, r3, #2
    4720:	e3530000 	cmp	r3, #0
    4724:	0a000027 	beq	47c8 <fireFlyLedHandler+0x4cc>
		{
			if (cnt < 125) {
    4728:	e59f36f0 	ldr	r3, [pc, #1776]	; 4e20 <fireFlyLedHandler+0xb24>
    472c:	e1d330b0 	ldrh	r3, [r3]
    4730:	e353007c 	cmp	r3, #124	; 0x7c
    4734:	8a000006 	bhi	4754 <fireFlyLedHandler+0x458>
				r = 0;
    4738:	e3a03000 	mov	r3, #0
    473c:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4740:	e3a03000 	mov	r3, #0
    4744:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4748:	e3a03000 	mov	r3, #0
    474c:	e54b3013 	strb	r3, [fp, #-19]
    4750:	ea0001a4 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 150) {
    4754:	e59f36c4 	ldr	r3, [pc, #1732]	; 4e20 <fireFlyLedHandler+0xb24>
    4758:	e1d330b0 	ldrh	r3, [r3]
    475c:	e3530095 	cmp	r3, #149	; 0x95
    4760:	8a000006 	bhi	4780 <fireFlyLedHandler+0x484>
				r = 255;
    4764:	e3e03000 	mvn	r3, #0
    4768:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    476c:	e3a03000 	mov	r3, #0
    4770:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4774:	e3a03000 	mov	r3, #0
    4778:	e54b3013 	strb	r3, [fp, #-19]
    477c:	ea000199 	b	4de8 <fireFlyLedHandler+0xaec>

			} else if (cnt < 175) {
    4780:	e59f3698 	ldr	r3, [pc, #1688]	; 4e20 <fireFlyLedHandler+0xb24>
    4784:	e1d330b0 	ldrh	r3, [r3]
    4788:	e35300ae 	cmp	r3, #174	; 0xae
    478c:	8a000006 	bhi	47ac <fireFlyLedHandler+0x4b0>
				r = 0;
    4790:	e3a03000 	mov	r3, #0
    4794:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4798:	e3a03000 	mov	r3, #0
    479c:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    47a0:	e3a03000 	mov	r3, #0
    47a4:	e54b3013 	strb	r3, [fp, #-19]
    47a8:	ea00018e 	b	4de8 <fireFlyLedHandler+0xaec>
			} else {
				r = 255;
    47ac:	e3e03000 	mvn	r3, #0
    47b0:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    47b4:	e3a03000 	mov	r3, #0
    47b8:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    47bc:	e3a03000 	mov	r3, #0
    47c0:	e54b3013 	strb	r3, [fp, #-19]
    47c4:	ea000187 	b	4de8 <fireFlyLedHandler+0xaec>
			}
		} else if (errorFlags & 0x04) {
    47c8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    47cc:	e2033004 	and	r3, r3, #4
    47d0:	e3530000 	cmp	r3, #0
    47d4:	0a000031 	beq	48a0 <fireFlyLedHandler+0x5a4>
			//blink 3x
			if (cnt < 125) {
    47d8:	e59f3640 	ldr	r3, [pc, #1600]	; 4e20 <fireFlyLedHandler+0xb24>
    47dc:	e1d330b0 	ldrh	r3, [r3]
    47e0:	e353007c 	cmp	r3, #124	; 0x7c
    47e4:	8a000005 	bhi	4800 <fireFlyLedHandler+0x504>
				r = 255;
    47e8:	e3e03000 	mvn	r3, #0
    47ec:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    47f0:	e3a03000 	mov	r3, #0
    47f4:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    47f8:	e3a03000 	mov	r3, #0
    47fc:	e54b3013 	strb	r3, [fp, #-19]
			}
			if (cnt < 140) {
    4800:	e59f3618 	ldr	r3, [pc, #1560]	; 4e20 <fireFlyLedHandler+0xb24>
    4804:	e1d330b0 	ldrh	r3, [r3]
    4808:	e353008b 	cmp	r3, #139	; 0x8b
    480c:	8a000006 	bhi	482c <fireFlyLedHandler+0x530>
				r = 0;
    4810:	e3a03000 	mov	r3, #0
    4814:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4818:	e3a03000 	mov	r3, #0
    481c:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4820:	e3a03000 	mov	r3, #0
    4824:	e54b3013 	strb	r3, [fp, #-19]
    4828:	ea00016e 	b	4de8 <fireFlyLedHandler+0xaec>

			} else if (cnt < 175) {
    482c:	e59f35ec 	ldr	r3, [pc, #1516]	; 4e20 <fireFlyLedHandler+0xb24>
    4830:	e1d330b0 	ldrh	r3, [r3]
    4834:	e35300ae 	cmp	r3, #174	; 0xae
    4838:	8a000006 	bhi	4858 <fireFlyLedHandler+0x55c>
				r = 255;
    483c:	e3e03000 	mvn	r3, #0
    4840:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4844:	e3a03000 	mov	r3, #0
    4848:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    484c:	e3a03000 	mov	r3, #0
    4850:	e54b3013 	strb	r3, [fp, #-19]
    4854:	ea000163 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 190) {
    4858:	e59f35c0 	ldr	r3, [pc, #1472]	; 4e20 <fireFlyLedHandler+0xb24>
    485c:	e1d330b0 	ldrh	r3, [r3]
    4860:	e35300bd 	cmp	r3, #189	; 0xbd
    4864:	8a000006 	bhi	4884 <fireFlyLedHandler+0x588>
				r = 0;
    4868:	e3a03000 	mov	r3, #0
    486c:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4870:	e3a03000 	mov	r3, #0
    4874:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4878:	e3a03000 	mov	r3, #0
    487c:	e54b3013 	strb	r3, [fp, #-19]
    4880:	ea000158 	b	4de8 <fireFlyLedHandler+0xaec>
			} else {
				r = 255;
    4884:	e3e03000 	mvn	r3, #0
    4888:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    488c:	e3a03000 	mov	r3, #0
    4890:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4894:	e3a03000 	mov	r3, #0
    4898:	e54b3013 	strb	r3, [fp, #-19]
    489c:	ea000151 	b	4de8 <fireFlyLedHandler+0xaec>
			}
		} else if (errorFlags & 0x08) {
    48a0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    48a4:	e2033008 	and	r3, r3, #8
    48a8:	e3530000 	cmp	r3, #0
    48ac:	0a000082 	beq	4abc <fireFlyLedHandler+0x7c0>
			if ((ceCnt < 5) && (cnt == 195))
    48b0:	e59f355c 	ldr	r3, [pc, #1372]	; 4e14 <fireFlyLedHandler+0xb18>
    48b4:	e5d33000 	ldrb	r3, [r3]
    48b8:	e3530004 	cmp	r3, #4
    48bc:	8a000009 	bhi	48e8 <fireFlyLedHandler+0x5ec>
    48c0:	e59f3558 	ldr	r3, [pc, #1368]	; 4e20 <fireFlyLedHandler+0xb24>
    48c4:	e1d330b0 	ldrh	r3, [r3]
    48c8:	e35300c3 	cmp	r3, #195	; 0xc3
    48cc:	1a000005 	bne	48e8 <fireFlyLedHandler+0x5ec>
				ceCnt++;
    48d0:	e59f353c 	ldr	r3, [pc, #1340]	; 4e14 <fireFlyLedHandler+0xb18>
    48d4:	e5d33000 	ldrb	r3, [r3]
    48d8:	e2833001 	add	r3, r3, #1
    48dc:	e20330ff 	and	r3, r3, #255	; 0xff
    48e0:	e59f252c 	ldr	r2, [pc, #1324]	; 4e14 <fireFlyLedHandler+0xb18>
    48e4:	e5c23000 	strb	r3, [r2]
			//blink 5x
			if (cnt < 105) {
    48e8:	e59f3530 	ldr	r3, [pc, #1328]	; 4e20 <fireFlyLedHandler+0xb24>
    48ec:	e1d330b0 	ldrh	r3, [r3]
    48f0:	e3530068 	cmp	r3, #104	; 0x68
    48f4:	8a000006 	bhi	4914 <fireFlyLedHandler+0x618>
				r = 0;
    48f8:	e3a03000 	mov	r3, #0
    48fc:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4900:	e3a03000 	mov	r3, #0
    4904:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4908:	e3a03000 	mov	r3, #0
    490c:	e54b3013 	strb	r3, [fp, #-19]
    4910:	ea000134 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 115) {
    4914:	e59f3504 	ldr	r3, [pc, #1284]	; 4e20 <fireFlyLedHandler+0xb24>
    4918:	e1d330b0 	ldrh	r3, [r3]
    491c:	e3530072 	cmp	r3, #114	; 0x72
    4920:	8a000006 	bhi	4940 <fireFlyLedHandler+0x644>
				r = 255;
    4924:	e3e03000 	mvn	r3, #0
    4928:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    492c:	e3a03000 	mov	r3, #0
    4930:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4934:	e3a03000 	mov	r3, #0
    4938:	e54b3013 	strb	r3, [fp, #-19]
    493c:	ea000129 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 125) {
    4940:	e59f34d8 	ldr	r3, [pc, #1240]	; 4e20 <fireFlyLedHandler+0xb24>
    4944:	e1d330b0 	ldrh	r3, [r3]
    4948:	e353007c 	cmp	r3, #124	; 0x7c
    494c:	8a000006 	bhi	496c <fireFlyLedHandler+0x670>
				r = 0;
    4950:	e3a03000 	mov	r3, #0
    4954:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4958:	e3a03000 	mov	r3, #0
    495c:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4960:	e3a03000 	mov	r3, #0
    4964:	e54b3013 	strb	r3, [fp, #-19]
    4968:	ea00011e 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 135) {
    496c:	e59f34ac 	ldr	r3, [pc, #1196]	; 4e20 <fireFlyLedHandler+0xb24>
    4970:	e1d330b0 	ldrh	r3, [r3]
    4974:	e3530086 	cmp	r3, #134	; 0x86
    4978:	8a000006 	bhi	4998 <fireFlyLedHandler+0x69c>
				r = 255;
    497c:	e3e03000 	mvn	r3, #0
    4980:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4984:	e3a03000 	mov	r3, #0
    4988:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    498c:	e3a03000 	mov	r3, #0
    4990:	e54b3013 	strb	r3, [fp, #-19]
    4994:	ea000113 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 145) {
    4998:	e59f3480 	ldr	r3, [pc, #1152]	; 4e20 <fireFlyLedHandler+0xb24>
    499c:	e1d330b0 	ldrh	r3, [r3]
    49a0:	e3530090 	cmp	r3, #144	; 0x90
    49a4:	8a000006 	bhi	49c4 <fireFlyLedHandler+0x6c8>
				r = 0;
    49a8:	e3a03000 	mov	r3, #0
    49ac:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    49b0:	e3a03000 	mov	r3, #0
    49b4:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    49b8:	e3a03000 	mov	r3, #0
    49bc:	e54b3013 	strb	r3, [fp, #-19]
    49c0:	ea000108 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 155) {
    49c4:	e59f3454 	ldr	r3, [pc, #1108]	; 4e20 <fireFlyLedHandler+0xb24>
    49c8:	e1d330b0 	ldrh	r3, [r3]
    49cc:	e353009a 	cmp	r3, #154	; 0x9a
    49d0:	8a000006 	bhi	49f0 <fireFlyLedHandler+0x6f4>
				r = 255;
    49d4:	e3e03000 	mvn	r3, #0
    49d8:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    49dc:	e3a03000 	mov	r3, #0
    49e0:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    49e4:	e3a03000 	mov	r3, #0
    49e8:	e54b3013 	strb	r3, [fp, #-19]
    49ec:	ea0000fd 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 165) {
    49f0:	e59f3428 	ldr	r3, [pc, #1064]	; 4e20 <fireFlyLedHandler+0xb24>
    49f4:	e1d330b0 	ldrh	r3, [r3]
    49f8:	e35300a4 	cmp	r3, #164	; 0xa4
    49fc:	8a000006 	bhi	4a1c <fireFlyLedHandler+0x720>
				r = 0;
    4a00:	e3a03000 	mov	r3, #0
    4a04:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4a08:	e3a03000 	mov	r3, #0
    4a0c:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4a10:	e3a03000 	mov	r3, #0
    4a14:	e54b3013 	strb	r3, [fp, #-19]
    4a18:	ea0000f2 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 175) {
    4a1c:	e59f33fc 	ldr	r3, [pc, #1020]	; 4e20 <fireFlyLedHandler+0xb24>
    4a20:	e1d330b0 	ldrh	r3, [r3]
    4a24:	e35300ae 	cmp	r3, #174	; 0xae
    4a28:	8a000006 	bhi	4a48 <fireFlyLedHandler+0x74c>
				r = 255;
    4a2c:	e3e03000 	mvn	r3, #0
    4a30:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4a34:	e3a03000 	mov	r3, #0
    4a38:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4a3c:	e3a03000 	mov	r3, #0
    4a40:	e54b3013 	strb	r3, [fp, #-19]
    4a44:	ea0000e7 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 185) {
    4a48:	e59f33d0 	ldr	r3, [pc, #976]	; 4e20 <fireFlyLedHandler+0xb24>
    4a4c:	e1d330b0 	ldrh	r3, [r3]
    4a50:	e35300b8 	cmp	r3, #184	; 0xb8
    4a54:	8a000006 	bhi	4a74 <fireFlyLedHandler+0x778>
				r = 0;
    4a58:	e3a03000 	mov	r3, #0
    4a5c:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4a60:	e3a03000 	mov	r3, #0
    4a64:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4a68:	e3a03000 	mov	r3, #0
    4a6c:	e54b3013 	strb	r3, [fp, #-19]
    4a70:	ea0000dc 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 195) {
    4a74:	e59f33a4 	ldr	r3, [pc, #932]	; 4e20 <fireFlyLedHandler+0xb24>
    4a78:	e1d330b0 	ldrh	r3, [r3]
    4a7c:	e35300c2 	cmp	r3, #194	; 0xc2
    4a80:	8a000006 	bhi	4aa0 <fireFlyLedHandler+0x7a4>
				r = 255;
    4a84:	e3e03000 	mvn	r3, #0
    4a88:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4a8c:	e3a03000 	mov	r3, #0
    4a90:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4a94:	e3a03000 	mov	r3, #0
    4a98:	e54b3013 	strb	r3, [fp, #-19]
    4a9c:	ea0000d1 	b	4de8 <fireFlyLedHandler+0xaec>
			} else {
				r = 0;
    4aa0:	e3a03000 	mov	r3, #0
    4aa4:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4aa8:	e3a03000 	mov	r3, #0
    4aac:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4ab0:	e3a03000 	mov	r3, #0
    4ab4:	e54b3013 	strb	r3, [fp, #-19]
    4ab8:	ea0000ca 	b	4de8 <fireFlyLedHandler+0xaec>
			}
		} else if (errorFlags & 0x10) {
    4abc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4ac0:	e2033010 	and	r3, r3, #16
    4ac4:	e3530000 	cmp	r3, #0
    4ac8:	0a00006c 	beq	4c80 <fireFlyLedHandler+0x984>
			if ((mincCnt < 5) && (cnt == 195))
    4acc:	e59f3344 	ldr	r3, [pc, #836]	; 4e18 <fireFlyLedHandler+0xb1c>
    4ad0:	e5d33000 	ldrb	r3, [r3]
    4ad4:	e3530004 	cmp	r3, #4
    4ad8:	8a000009 	bhi	4b04 <fireFlyLedHandler+0x808>
    4adc:	e59f333c 	ldr	r3, [pc, #828]	; 4e20 <fireFlyLedHandler+0xb24>
    4ae0:	e1d330b0 	ldrh	r3, [r3]
    4ae4:	e35300c3 	cmp	r3, #195	; 0xc3
    4ae8:	1a000005 	bne	4b04 <fireFlyLedHandler+0x808>
				mincCnt++;
    4aec:	e59f3324 	ldr	r3, [pc, #804]	; 4e18 <fireFlyLedHandler+0xb1c>
    4af0:	e5d33000 	ldrb	r3, [r3]
    4af4:	e2833001 	add	r3, r3, #1
    4af8:	e20330ff 	and	r3, r3, #255	; 0xff
    4afc:	e59f2314 	ldr	r2, [pc, #788]	; 4e18 <fireFlyLedHandler+0xb1c>
    4b00:	e5c23000 	strb	r3, [r2]
			//blink 4x
			if (cnt < 105) {
    4b04:	e59f3314 	ldr	r3, [pc, #788]	; 4e20 <fireFlyLedHandler+0xb24>
    4b08:	e1d330b0 	ldrh	r3, [r3]
    4b0c:	e3530068 	cmp	r3, #104	; 0x68
    4b10:	8a000006 	bhi	4b30 <fireFlyLedHandler+0x834>
				r = 0;
    4b14:	e3a03000 	mov	r3, #0
    4b18:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4b1c:	e3a03000 	mov	r3, #0
    4b20:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4b24:	e3a03000 	mov	r3, #0
    4b28:	e54b3013 	strb	r3, [fp, #-19]
    4b2c:	ea0000ad 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 115) {
    4b30:	e59f32e8 	ldr	r3, [pc, #744]	; 4e20 <fireFlyLedHandler+0xb24>
    4b34:	e1d330b0 	ldrh	r3, [r3]
    4b38:	e3530072 	cmp	r3, #114	; 0x72
    4b3c:	8a000006 	bhi	4b5c <fireFlyLedHandler+0x860>
				r = 0;
    4b40:	e3a03000 	mov	r3, #0
    4b44:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4b48:	e3a03000 	mov	r3, #0
    4b4c:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4b50:	e3e03000 	mvn	r3, #0
    4b54:	e54b3013 	strb	r3, [fp, #-19]
    4b58:	ea0000a2 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 125) {
    4b5c:	e59f32bc 	ldr	r3, [pc, #700]	; 4e20 <fireFlyLedHandler+0xb24>
    4b60:	e1d330b0 	ldrh	r3, [r3]
    4b64:	e353007c 	cmp	r3, #124	; 0x7c
    4b68:	8a000006 	bhi	4b88 <fireFlyLedHandler+0x88c>
				r = 0;
    4b6c:	e3a03000 	mov	r3, #0
    4b70:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4b74:	e3a03000 	mov	r3, #0
    4b78:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4b7c:	e3a03000 	mov	r3, #0
    4b80:	e54b3013 	strb	r3, [fp, #-19]
    4b84:	ea000097 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 135) {
    4b88:	e59f3290 	ldr	r3, [pc, #656]	; 4e20 <fireFlyLedHandler+0xb24>
    4b8c:	e1d330b0 	ldrh	r3, [r3]
    4b90:	e3530086 	cmp	r3, #134	; 0x86
    4b94:	8a000006 	bhi	4bb4 <fireFlyLedHandler+0x8b8>
				r = 0;
    4b98:	e3a03000 	mov	r3, #0
    4b9c:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4ba0:	e3a03000 	mov	r3, #0
    4ba4:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4ba8:	e3e03000 	mvn	r3, #0
    4bac:	e54b3013 	strb	r3, [fp, #-19]
    4bb0:	ea00008c 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 145) {
    4bb4:	e59f3264 	ldr	r3, [pc, #612]	; 4e20 <fireFlyLedHandler+0xb24>
    4bb8:	e1d330b0 	ldrh	r3, [r3]
    4bbc:	e3530090 	cmp	r3, #144	; 0x90
    4bc0:	8a000006 	bhi	4be0 <fireFlyLedHandler+0x8e4>
				r = 0;
    4bc4:	e3a03000 	mov	r3, #0
    4bc8:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4bcc:	e3a03000 	mov	r3, #0
    4bd0:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4bd4:	e3a03000 	mov	r3, #0
    4bd8:	e54b3013 	strb	r3, [fp, #-19]
    4bdc:	ea000081 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 155) {
    4be0:	e59f3238 	ldr	r3, [pc, #568]	; 4e20 <fireFlyLedHandler+0xb24>
    4be4:	e1d330b0 	ldrh	r3, [r3]
    4be8:	e353009a 	cmp	r3, #154	; 0x9a
    4bec:	8a000006 	bhi	4c0c <fireFlyLedHandler+0x910>
				r = 0;
    4bf0:	e3a03000 	mov	r3, #0
    4bf4:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4bf8:	e3a03000 	mov	r3, #0
    4bfc:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4c00:	e3e03000 	mvn	r3, #0
    4c04:	e54b3013 	strb	r3, [fp, #-19]
    4c08:	ea000076 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 165) {
    4c0c:	e59f320c 	ldr	r3, [pc, #524]	; 4e20 <fireFlyLedHandler+0xb24>
    4c10:	e1d330b0 	ldrh	r3, [r3]
    4c14:	e35300a4 	cmp	r3, #164	; 0xa4
    4c18:	8a000006 	bhi	4c38 <fireFlyLedHandler+0x93c>
				r = 0;
    4c1c:	e3a03000 	mov	r3, #0
    4c20:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4c24:	e3a03000 	mov	r3, #0
    4c28:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4c2c:	e3a03000 	mov	r3, #0
    4c30:	e54b3013 	strb	r3, [fp, #-19]
    4c34:	ea00006b 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 175) {
    4c38:	e59f31e0 	ldr	r3, [pc, #480]	; 4e20 <fireFlyLedHandler+0xb24>
    4c3c:	e1d330b0 	ldrh	r3, [r3]
    4c40:	e35300ae 	cmp	r3, #174	; 0xae
    4c44:	8a000006 	bhi	4c64 <fireFlyLedHandler+0x968>
				r = 0;
    4c48:	e3a03000 	mov	r3, #0
    4c4c:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4c50:	e3a03000 	mov	r3, #0
    4c54:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4c58:	e3e03000 	mvn	r3, #0
    4c5c:	e54b3013 	strb	r3, [fp, #-19]
    4c60:	ea000060 	b	4de8 <fireFlyLedHandler+0xaec>
			} else {
				r = 0;
    4c64:	e3a03000 	mov	r3, #0
    4c68:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4c6c:	e3a03000 	mov	r3, #0
    4c70:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4c74:	e3a03000 	mov	r3, #0
    4c78:	e54b3013 	strb	r3, [fp, #-19]
    4c7c:	ea000059 	b	4de8 <fireFlyLedHandler+0xaec>
			}
		} else if (errorFlags & 0x20) {
    4c80:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4c84:	e2033020 	and	r3, r3, #32
    4c88:	e3530000 	cmp	r3, #0
    4c8c:	0a000055 	beq	4de8 <fireFlyLedHandler+0xaec>
			if ((mfsCnt < 5) && (cnt == 195))
    4c90:	e59f3184 	ldr	r3, [pc, #388]	; 4e1c <fireFlyLedHandler+0xb20>
    4c94:	e5d33000 	ldrb	r3, [r3]
    4c98:	e3530004 	cmp	r3, #4
    4c9c:	8a000009 	bhi	4cc8 <fireFlyLedHandler+0x9cc>
    4ca0:	e59f3178 	ldr	r3, [pc, #376]	; 4e20 <fireFlyLedHandler+0xb24>
    4ca4:	e1d330b0 	ldrh	r3, [r3]
    4ca8:	e35300c3 	cmp	r3, #195	; 0xc3
    4cac:	1a000005 	bne	4cc8 <fireFlyLedHandler+0x9cc>
				mfsCnt++;
    4cb0:	e59f3164 	ldr	r3, [pc, #356]	; 4e1c <fireFlyLedHandler+0xb20>
    4cb4:	e5d33000 	ldrb	r3, [r3]
    4cb8:	e2833001 	add	r3, r3, #1
    4cbc:	e20330ff 	and	r3, r3, #255	; 0xff
    4cc0:	e59f2154 	ldr	r2, [pc, #340]	; 4e1c <fireFlyLedHandler+0xb20>
    4cc4:	e5c23000 	strb	r3, [r2]
			//blink 3x !
			if (cnt < 105) {
    4cc8:	e59f3150 	ldr	r3, [pc, #336]	; 4e20 <fireFlyLedHandler+0xb24>
    4ccc:	e1d330b0 	ldrh	r3, [r3]
    4cd0:	e3530068 	cmp	r3, #104	; 0x68
    4cd4:	8a000006 	bhi	4cf4 <fireFlyLedHandler+0x9f8>
				r = 0;
    4cd8:	e3a03000 	mov	r3, #0
    4cdc:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4ce0:	e3a03000 	mov	r3, #0
    4ce4:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4ce8:	e3a03000 	mov	r3, #0
    4cec:	e54b3013 	strb	r3, [fp, #-19]
    4cf0:	ea00003c 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 115) {
    4cf4:	e59f3124 	ldr	r3, [pc, #292]	; 4e20 <fireFlyLedHandler+0xb24>
    4cf8:	e1d330b0 	ldrh	r3, [r3]
    4cfc:	e3530072 	cmp	r3, #114	; 0x72
    4d00:	8a000006 	bhi	4d20 <fireFlyLedHandler+0xa24>
				r = 0;
    4d04:	e3a03000 	mov	r3, #0
    4d08:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4d0c:	e3a03000 	mov	r3, #0
    4d10:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4d14:	e3e03000 	mvn	r3, #0
    4d18:	e54b3013 	strb	r3, [fp, #-19]
    4d1c:	ea000031 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 125) {
    4d20:	e59f30f8 	ldr	r3, [pc, #248]	; 4e20 <fireFlyLedHandler+0xb24>
    4d24:	e1d330b0 	ldrh	r3, [r3]
    4d28:	e353007c 	cmp	r3, #124	; 0x7c
    4d2c:	8a000006 	bhi	4d4c <fireFlyLedHandler+0xa50>
				r = 0;
    4d30:	e3a03000 	mov	r3, #0
    4d34:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4d38:	e3a03000 	mov	r3, #0
    4d3c:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4d40:	e3a03000 	mov	r3, #0
    4d44:	e54b3013 	strb	r3, [fp, #-19]
    4d48:	ea000026 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 135) {
    4d4c:	e59f30cc 	ldr	r3, [pc, #204]	; 4e20 <fireFlyLedHandler+0xb24>
    4d50:	e1d330b0 	ldrh	r3, [r3]
    4d54:	e3530086 	cmp	r3, #134	; 0x86
    4d58:	8a000006 	bhi	4d78 <fireFlyLedHandler+0xa7c>
				r = 0;
    4d5c:	e3a03000 	mov	r3, #0
    4d60:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4d64:	e3a03000 	mov	r3, #0
    4d68:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4d6c:	e3e03000 	mvn	r3, #0
    4d70:	e54b3013 	strb	r3, [fp, #-19]
    4d74:	ea00001b 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 145) {
    4d78:	e59f30a0 	ldr	r3, [pc, #160]	; 4e20 <fireFlyLedHandler+0xb24>
    4d7c:	e1d330b0 	ldrh	r3, [r3]
    4d80:	e3530090 	cmp	r3, #144	; 0x90
    4d84:	8a000006 	bhi	4da4 <fireFlyLedHandler+0xaa8>
				r = 0;
    4d88:	e3a03000 	mov	r3, #0
    4d8c:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4d90:	e3a03000 	mov	r3, #0
    4d94:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4d98:	e3a03000 	mov	r3, #0
    4d9c:	e54b3013 	strb	r3, [fp, #-19]
    4da0:	ea000010 	b	4de8 <fireFlyLedHandler+0xaec>
			} else if (cnt < 155) {
    4da4:	e59f3074 	ldr	r3, [pc, #116]	; 4e20 <fireFlyLedHandler+0xb24>
    4da8:	e1d330b0 	ldrh	r3, [r3]
    4dac:	e353009a 	cmp	r3, #154	; 0x9a
    4db0:	8a000006 	bhi	4dd0 <fireFlyLedHandler+0xad4>
				r = 0;
    4db4:	e3a03000 	mov	r3, #0
    4db8:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4dbc:	e3a03000 	mov	r3, #0
    4dc0:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4dc4:	e3e03000 	mvn	r3, #0
    4dc8:	e54b3013 	strb	r3, [fp, #-19]
    4dcc:	ea000005 	b	4de8 <fireFlyLedHandler+0xaec>
			} else {
				r = 0;
    4dd0:	e3a03000 	mov	r3, #0
    4dd4:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4dd8:	e3a03000 	mov	r3, #0
    4ddc:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4de0:	e3a03000 	mov	r3, #0
    4de4:	e54b3013 	strb	r3, [fp, #-19]
			}
		}
	}
	I2C1_setRGBLed(r, g, b);
    4de8:	e55b3015 	ldrb	r3, [fp, #-21]
    4dec:	e55b2014 	ldrb	r2, [fp, #-20]
    4df0:	e55bc013 	ldrb	ip, [fp, #-19]
    4df4:	e1a00003 	mov	r0, r3
    4df8:	e1a01002 	mov	r1, r2
    4dfc:	e1a0200c 	mov	r2, ip
    4e00:	eb00000c 	bl	4e38 <I2C1_setRGBLed>
}
    4e04:	e24bd00c 	sub	sp, fp, #12
    4e08:	e89d6800 	ldm	sp, {fp, sp, lr}
    4e0c:	e12fff1e 	bx	lr
    4e10:	40001b5c 	.word	0x40001b5c
    4e14:	40000e3d 	.word	0x40000e3d
    4e18:	40000e3e 	.word	0x40000e3e
    4e1c:	40000e3f 	.word	0x40000e3f
    4e20:	40000e40 	.word	0x40000e40
    4e24:	40000e00 	.word	0x40000e00
    4e28:	40001c10 	.word	0x40001c10
    4e2c:	40001de0 	.word	0x40001de0
    4e30:	aaaaaaab 	.word	0xaaaaaaab
    4e34:	cccccccd 	.word	0xcccccccd

00004e38 <I2C1_setRGBLed>:


char I2C1_setRGBLed(unsigned char r,unsigned char g,unsigned char b)
{
    4e38:	e1a0c00d 	mov	ip, sp
    4e3c:	e92dd800 	push	{fp, ip, lr, pc}
    4e40:	e24cb004 	sub	fp, ip, #4
    4e44:	e24dd010 	sub	sp, sp, #16
    4e48:	e1a03000 	mov	r3, r0
    4e4c:	e54b3010 	strb	r3, [fp, #-16]
    4e50:	e1a03001 	mov	r3, r1
    4e54:	e54b3014 	strb	r3, [fp, #-20]
    4e58:	e1a03002 	mov	r3, r2
    4e5c:	e54b3018 	strb	r3, [fp, #-24]
	if ((I2C1MasterState == I2C_STARTED) || (I2C1MasterState == DATA_ACK))
    4e60:	e59f30c4 	ldr	r3, [pc, #196]	; 4f2c <I2C1_setRGBLed+0xf4>
    4e64:	e5933000 	ldr	r3, [r3]
    4e68:	e3530001 	cmp	r3, #1
    4e6c:	0a000003 	beq	4e80 <I2C1_setRGBLed+0x48>
    4e70:	e59f30b4 	ldr	r3, [pc, #180]	; 4f2c <I2C1_setRGBLed+0xf4>
    4e74:	e5933000 	ldr	r3, [r3]
    4e78:	e3530004 	cmp	r3, #4
    4e7c:	1a000002 	bne	4e8c <I2C1_setRGBLed+0x54>
			return I2C_ERROR_BUSBUSY;
    4e80:	e3a03005 	mov	r3, #5
    4e84:	e50b301c 	str	r3, [fp, #-28]
    4e88:	ea000022 	b	4f18 <I2C1_setRGBLed+0xe0>
	WrIndex1=0;
    4e8c:	e59f209c 	ldr	r2, [pc, #156]	; 4f30 <I2C1_setRGBLed+0xf8>
    4e90:	e3a03000 	mov	r3, #0
    4e94:	e5823000 	str	r3, [r2]
	I2C1WriteLength = 5;
    4e98:	e59f2094 	ldr	r2, [pc, #148]	; 4f34 <I2C1_setRGBLed+0xfc>
    4e9c:	e3a03005 	mov	r3, #5
    4ea0:	e5823000 	str	r3, [r2]
	I2C1MasterBuffer[0] = 0x30;	//address
    4ea4:	e59f208c 	ldr	r2, [pc, #140]	; 4f38 <I2C1_setRGBLed+0x100>
    4ea8:	e3a03030 	mov	r3, #48	; 0x30
    4eac:	e5c23000 	strb	r3, [r2]
    I2C1MasterBuffer[1] = r;
    4eb0:	e59f2080 	ldr	r2, [pc, #128]	; 4f38 <I2C1_setRGBLed+0x100>
    4eb4:	e55b3010 	ldrb	r3, [fp, #-16]
    4eb8:	e5c23001 	strb	r3, [r2, #1]
    I2C1MasterBuffer[2] = g;
    4ebc:	e59f2074 	ldr	r2, [pc, #116]	; 4f38 <I2C1_setRGBLed+0x100>
    4ec0:	e55b3014 	ldrb	r3, [fp, #-20]
    4ec4:	e5c23002 	strb	r3, [r2, #2]
    I2C1MasterBuffer[3] = b;
    4ec8:	e59f2068 	ldr	r2, [pc, #104]	; 4f38 <I2C1_setRGBLed+0x100>
    4ecc:	e55b3018 	ldrb	r3, [fp, #-24]
    4ed0:	e5c23003 	strb	r3, [r2, #3]
    I2C1MasterBuffer[4] = 255-(unsigned char)(r+g+b);
    4ed4:	e55b2010 	ldrb	r2, [fp, #-16]
    4ed8:	e55b3014 	ldrb	r3, [fp, #-20]
    4edc:	e0823003 	add	r3, r2, r3
    4ee0:	e20320ff 	and	r2, r3, #255	; 0xff
    4ee4:	e55b3018 	ldrb	r3, [fp, #-24]
    4ee8:	e0823003 	add	r3, r2, r3
    4eec:	e20330ff 	and	r3, r3, #255	; 0xff
    4ef0:	e1e03003 	mvn	r3, r3
    4ef4:	e20330ff 	and	r3, r3, #255	; 0xff
    4ef8:	e59f2038 	ldr	r2, [pc, #56]	; 4f38 <I2C1_setRGBLed+0x100>
    4efc:	e5c23004 	strb	r3, [r2, #4]

    I2C1MasterState = I2C_STARTED;
    4f00:	e59f2024 	ldr	r2, [pc, #36]	; 4f2c <I2C1_setRGBLed+0xf4>
    4f04:	e3a03001 	mov	r3, #1
    4f08:	e5823000 	str	r3, [r2]
    I2C1Engine();
    4f0c:	eb000027 	bl	4fb0 <I2C1Engine>

    return 0;
    4f10:	e3a03000 	mov	r3, #0
    4f14:	e50b301c 	str	r3, [fp, #-28]
    4f18:	e51b301c 	ldr	r3, [fp, #-28]
}
    4f1c:	e1a00003 	mov	r0, r3
    4f20:	e24bd00c 	sub	sp, fp, #12
    4f24:	e89d6800 	ldm	sp, {fp, sp, lr}
    4f28:	e12fff1e 	bx	lr
    4f2c:	40000e30 	.word	0x40000e30
    4f30:	40000e38 	.word	0x40000e38
    4f34:	40002034 	.word	0x40002034
    4f38:	40002038 	.word	0x40002038

00004f3c <I2C1Init>:



void I2C1Init(void)
{
    4f3c:	e1a0c00d 	mov	ip, sp
    4f40:	e92dd800 	push	{fp, ip, lr, pc}
    4f44:	e24cb004 	sub	fp, ip, #4
    /*--- Clear flags ---*/
    I21CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;
    4f48:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4f4c:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4f50:	e2833018 	add	r3, r3, #24
    4f54:	e3a0206c 	mov	r2, #108	; 0x6c
    4f58:	e5832000 	str	r2, [r3]

    /*--- Reset registers ---*/
    I21SCLL   = I21SCLL_SCLL;
    4f5c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4f60:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4f64:	e2833014 	add	r3, r3, #20
    4f68:	e3a02c02 	mov	r2, #512	; 0x200
    4f6c:	e5832000 	str	r2, [r3]
    I21SCLH   = I21SCLH_SCLH;
    4f70:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4f74:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4f78:	e2833010 	add	r3, r3, #16
    4f7c:	e3a02c02 	mov	r2, #512	; 0x200
    4f80:	e5832000 	str	r2, [r3]

    install_irq( I2C1_INT, (void *) I2C1MasterHandler );
    4f84:	e3a00013 	mov	r0, #19
    4f88:	e59f101c 	ldr	r1, [pc, #28]	; 4fac <I2C1Init+0x70>
    4f8c:	eb00006a 	bl	513c <install_irq>
    I21CONSET = I2CONSET_I2EN;
    4f90:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4f94:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4f98:	e3a02040 	mov	r2, #64	; 0x40
    4f9c:	e5832000 	str	r2, [r3]
}
    4fa0:	e24bd00c 	sub	sp, fp, #12
    4fa4:	e89d6800 	ldm	sp, {fp, sp, lr}
    4fa8:	e12fff1e 	bx	lr
    4fac:	00004008 	.word	0x00004008

00004fb0 <I2C1Engine>:

unsigned int I2C1Engine( void )
{
    4fb0:	e1a0c00d 	mov	ip, sp
    4fb4:	e92dd800 	push	{fp, ip, lr, pc}
    4fb8:	e24cb004 	sub	fp, ip, #4
	I21CONSET = I2CONSET_STO;      /* Set Stop flag */
    4fbc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4fc0:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4fc4:	e3a02010 	mov	r2, #16
    4fc8:	e5832000 	str	r2, [r3]
	I21CONCLR = I2CONCLR_SIC;  /* Clear SI flag */
    4fcc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4fd0:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4fd4:	e2833018 	add	r3, r3, #24
    4fd8:	e3a02008 	mov	r2, #8
    4fdc:	e5832000 	str	r2, [r3]
	I2C1MasterState = I2C_IDLE;
    4fe0:	e59f2034 	ldr	r2, [pc, #52]	; 501c <I2C1Engine+0x6c>
    4fe4:	e3a03000 	mov	r3, #0
    4fe8:	e5823000 	str	r3, [r2]
    WrIndex1 = 0;
    4fec:	e59f202c 	ldr	r2, [pc, #44]	; 5020 <I2C1Engine+0x70>
    4ff0:	e3a03000 	mov	r3, #0
    4ff4:	e5823000 	str	r3, [r2]
    I21CONSET = I2CONSET_STA;	/* Set Start flag */
    4ff8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4ffc:	e2833917 	add	r3, r3, #376832	; 0x5c000
    5000:	e3a02020 	mov	r2, #32
    5004:	e5832000 	str	r2, [r3]
    return ( TRUE );
    5008:	e3a03001 	mov	r3, #1
}
    500c:	e1a00003 	mov	r0, r3
    5010:	e24bd00c 	sub	sp, fp, #12
    5014:	e89d6800 	ldm	sp, {fp, sp, lr}
    5018:	e12fff1e 	bx	lr
    501c:	40000e30 	.word	0x40000e30
    5020:	40000e38 	.word	0x40000e38

00005024 <I2C1State>:

unsigned char I2C1State(void)
{
    5024:	e1a0c00d 	mov	ip, sp
    5028:	e92dd800 	push	{fp, ip, lr, pc}
    502c:	e24cb004 	sub	fp, ip, #4
	return I2C1MasterState;
    5030:	e59f3014 	ldr	r3, [pc, #20]	; 504c <I2C1State+0x28>
    5034:	e5933000 	ldr	r3, [r3]
    5038:	e20330ff 	and	r3, r3, #255	; 0xff
}
    503c:	e1a00003 	mov	r0, r3
    5040:	e24bd00c 	sub	sp, fp, #12
    5044:	e89d6800 	ldm	sp, {fp, sp, lr}
    5048:	e12fff1e 	bx	lr
    504c:	40000e30 	.word	0x40000e30

00005050 <DefaultVICHandler>:
** Returned value:		None
** 
******************************************************************************/
// mthomas: inserted static to avoid gcc-warning
static void DefaultVICHandler (void) __irq 
{
    5050:	e1a0c00d 	mov	ip, sp
    5054:	e92dd800 	push	{fp, ip, lr, pc}
    5058:	e24cb004 	sub	fp, ip, #4
    /* if the IRQ is not installed into the VIC, and interrupt occurs, the
    default interrupt VIC address will be used. This could happen in a race 
    condition. For debugging, use this endless loop to trace back. */
    /* For more details, see Philips appnote AN10414 */
    VICVectAddr = 0;		/* Acknowledge Interrupt */ 
    505c:	e3a03000 	mov	r3, #0
    5060:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    5064:	e3a02000 	mov	r2, #0
    5068:	e5832000 	str	r2, [r3]
    // while ( 1 ); to find unknown interrupts while debugging
}
    506c:	e24bd00c 	sub	sp, fp, #12
    5070:	e89d6800 	ldm	sp, {fp, sp, lr}
    5074:	e12fff1e 	bx	lr

00005078 <init_VIC>:
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void init_VIC(void) 
{
    5078:	e1a0c00d 	mov	ip, sp
    507c:	e92dd800 	push	{fp, ip, lr, pc}
    5080:	e24cb004 	sub	fp, ip, #4
    5084:	e24dd00c 	sub	sp, sp, #12
    unsigned long i = 0;
    5088:	e3a03000 	mov	r3, #0
    508c:	e50b3018 	str	r3, [fp, #-24]
    unsigned long *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    5090:	e3e03efe 	mvn	r3, #4064	; 0xfe0
    5094:	e243300b 	sub	r3, r3, #11
    5098:	e3e02000 	mvn	r2, #0
    509c:	e5832000 	str	r2, [r3]
    VICVectAddr = 0;
    50a0:	e3a03000 	mov	r3, #0
    50a4:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    50a8:	e3a02000 	mov	r2, #0
    50ac:	e5832000 	str	r2, [r3]
    VICIntSelect = 0;
    50b0:	e3e03eff 	mvn	r3, #4080	; 0xff0
    50b4:	e2433003 	sub	r3, r3, #3
    50b8:	e3a02000 	mov	r2, #0
    50bc:	e5832000 	str	r2, [r3]

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    50c0:	e3a03000 	mov	r3, #0
    50c4:	e50b3018 	str	r3, [fp, #-24]
    50c8:	ea000010 	b	5110 <init_VIC+0x98>
    {
	vect_addr = (unsigned long *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
    50cc:	e51b3018 	ldr	r3, [fp, #-24]
    50d0:	e1a03103 	lsl	r3, r3, #2
    50d4:	e2433c0f 	sub	r3, r3, #3840	; 0xf00
    50d8:	e50b3014 	str	r3, [fp, #-20]
	vect_cntl = (unsigned long *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
    50dc:	e51b3018 	ldr	r3, [fp, #-24]
    50e0:	e1a03103 	lsl	r3, r3, #2
    50e4:	e2433c0e 	sub	r3, r3, #3584	; 0xe00
    50e8:	e50b3010 	str	r3, [fp, #-16]
	*vect_addr = 0;	
    50ec:	e51b2014 	ldr	r2, [fp, #-20]
    50f0:	e3a03000 	mov	r3, #0
    50f4:	e5823000 	str	r3, [r2]
	*vect_cntl = 0;
    50f8:	e51b2010 	ldr	r2, [fp, #-16]
    50fc:	e3a03000 	mov	r3, #0
    5100:	e5823000 	str	r3, [r2]
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    5104:	e51b3018 	ldr	r3, [fp, #-24]
    5108:	e2833001 	add	r3, r3, #1
    510c:	e50b3018 	str	r3, [fp, #-24]
    5110:	e51b3018 	ldr	r3, [fp, #-24]
    5114:	e353000f 	cmp	r3, #15
    5118:	9affffeb 	bls	50cc <init_VIC+0x54>
	*vect_addr = 0;	
	*vect_cntl = 0;
    }

    /* Install the default VIC handler here */
    VICDefVectAddr = (unsigned long)DefaultVICHandler;   
    511c:	e3e03d3f 	mvn	r3, #4032	; 0xfc0
    5120:	e243300b 	sub	r3, r3, #11
    5124:	e59f200c 	ldr	r2, [pc, #12]	; 5138 <init_VIC+0xc0>
    5128:	e5832000 	str	r2, [r3]
    return;
}
    512c:	e24bd00c 	sub	sp, fp, #12
    5130:	e89d6800 	ldm	sp, {fp, sp, lr}
    5134:	e12fff1e 	bx	lr
    5138:	00005050 	.word	0x00005050

0000513c <install_irq>:
** parameters:			Interrupt number and interrupt handler address
** Returned value:		true or false, when the table is full, return false
** 
******************************************************************************/
unsigned long install_irq( unsigned long IntNumber, void *HandlerAddr )
{
    513c:	e1a0c00d 	mov	ip, sp
    5140:	e92dd800 	push	{fp, ip, lr, pc}
    5144:	e24cb004 	sub	fp, ip, #4
    5148:	e24dd018 	sub	sp, sp, #24
    514c:	e50b001c 	str	r0, [fp, #-28]
    5150:	e50b1020 	str	r1, [fp, #-32]
    unsigned long i;
    unsigned long *vect_addr;
    unsigned long *vect_cntl;
      
    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
    5154:	e3e02efe 	mvn	r2, #4064	; 0xfe0
    5158:	e242200b 	sub	r2, r2, #11
    515c:	e51b101c 	ldr	r1, [fp, #-28]
    5160:	e3a03001 	mov	r3, #1
    5164:	e1a03113 	lsl	r3, r3, r1
    5168:	e5823000 	str	r3, [r2]
    
    for ( i = 0; i < VIC_SIZE; i++ )
    516c:	e3a03000 	mov	r3, #0
    5170:	e50b3018 	str	r3, [fp, #-24]
    5174:	ea000017 	b	51d8 <install_irq+0x9c>
    {
	/* find first un-assigned VIC address for the handler */

	vect_addr = (unsigned long *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
    5178:	e51b3018 	ldr	r3, [fp, #-24]
    517c:	e1a03103 	lsl	r3, r3, #2
    5180:	e2433c0f 	sub	r3, r3, #3840	; 0xf00
    5184:	e50b3014 	str	r3, [fp, #-20]
	vect_cntl = (unsigned long *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
    5188:	e51b3018 	ldr	r3, [fp, #-24]
    518c:	e1a03103 	lsl	r3, r3, #2
    5190:	e2433c0e 	sub	r3, r3, #3584	; 0xe00
    5194:	e50b3010 	str	r3, [fp, #-16]
	if ( *vect_addr == (unsigned long)NULL )
    5198:	e51b3014 	ldr	r3, [fp, #-20]
    519c:	e5933000 	ldr	r3, [r3]
    51a0:	e3530000 	cmp	r3, #0
    51a4:	1a000008 	bne	51cc <install_irq+0x90>
	{
	    *vect_addr = (unsigned long)HandlerAddr;	/* set interrupt vector */
    51a8:	e51b3020 	ldr	r3, [fp, #-32]
    51ac:	e1a02003 	mov	r2, r3
    51b0:	e51b3014 	ldr	r3, [fp, #-20]
    51b4:	e5832000 	str	r2, [r3]
	    *vect_cntl = (unsigned long)(IRQ_SLOT_EN | IntNumber);
    51b8:	e51b301c 	ldr	r3, [fp, #-28]
    51bc:	e3832020 	orr	r2, r3, #32
    51c0:	e51b3010 	ldr	r3, [fp, #-16]
    51c4:	e5832000 	str	r2, [r3]
	    break;
    51c8:	ea000005 	b	51e4 <install_irq+0xa8>
    unsigned long *vect_addr;
    unsigned long *vect_cntl;
      
    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
    
    for ( i = 0; i < VIC_SIZE; i++ )
    51cc:	e51b3018 	ldr	r3, [fp, #-24]
    51d0:	e2833001 	add	r3, r3, #1
    51d4:	e50b3018 	str	r3, [fp, #-24]
    51d8:	e51b3018 	ldr	r3, [fp, #-24]
    51dc:	e353000f 	cmp	r3, #15
    51e0:	9affffe4 	bls	5178 <install_irq+0x3c>
	    *vect_addr = (unsigned long)HandlerAddr;	/* set interrupt vector */
	    *vect_cntl = (unsigned long)(IRQ_SLOT_EN | IntNumber);
	    break;
	}
    }
    if ( i == VIC_SIZE )
    51e4:	e51b3018 	ldr	r3, [fp, #-24]
    51e8:	e3530010 	cmp	r3, #16
    51ec:	1a000002 	bne	51fc <install_irq+0xc0>
    {
	return( FALSE );		/* fatal error, can't find empty vector slot */
    51f0:	e3a03000 	mov	r3, #0
    51f4:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    51f8:	ea000007 	b	521c <install_irq+0xe0>
    }
    VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
    51fc:	e3a02000 	mov	r2, #0
    5200:	e2422eff 	sub	r2, r2, #4080	; 0xff0
    5204:	e51b101c 	ldr	r1, [fp, #-28]
    5208:	e3a03001 	mov	r3, #1
    520c:	e1a03113 	lsl	r3, r3, r1
    5210:	e5823000 	str	r3, [r2]
    return( TRUE );
    5214:	e3a03001 	mov	r3, #1
    5218:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    521c:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
}
    5220:	e1a00003 	mov	r0, r3
    5224:	e24bd00c 	sub	sp, fp, #12
    5228:	e89d6800 	ldm	sp, {fp, sp, lr}
    522c:	e12fff1e 	bx	lr

00005230 <uninstall_irq>:
** Returned value:		true or false, when the interrupt number is not found, 
**				return false
** 
******************************************************************************/
unsigned long uninstall_irq( unsigned long IntNumber )
{
    5230:	e1a0c00d 	mov	ip, sp
    5234:	e92dd800 	push	{fp, ip, lr, pc}
    5238:	e24cb004 	sub	fp, ip, #4
    523c:	e24dd014 	sub	sp, sp, #20
    5240:	e50b001c 	str	r0, [fp, #-28]
    unsigned long i;
    unsigned long *vect_addr;
    unsigned long *vect_cntl;
      
    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
    5244:	e3e02efe 	mvn	r2, #4064	; 0xfe0
    5248:	e242200b 	sub	r2, r2, #11
    524c:	e51b101c 	ldr	r1, [fp, #-28]
    5250:	e3a03001 	mov	r3, #1
    5254:	e1a03113 	lsl	r3, r3, r1
    5258:	e5823000 	str	r3, [r2]
    
    for ( i = 0; i < VIC_SIZE; i++ )
    525c:	e3a03000 	mov	r3, #0
    5260:	e50b3018 	str	r3, [fp, #-24]
    5264:	ea000019 	b	52d0 <uninstall_irq+0xa0>
    {
	/* find first un-assigned VIC address for the handler */
	vect_addr = (unsigned long *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
    5268:	e51b3018 	ldr	r3, [fp, #-24]
    526c:	e1a03103 	lsl	r3, r3, #2
    5270:	e2433c0f 	sub	r3, r3, #3840	; 0xf00
    5274:	e50b3014 	str	r3, [fp, #-20]
	vect_cntl = (unsigned long *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
    5278:	e51b3018 	ldr	r3, [fp, #-24]
    527c:	e1a03103 	lsl	r3, r3, #2
    5280:	e2433c0e 	sub	r3, r3, #3584	; 0xe00
    5284:	e50b3010 	str	r3, [fp, #-16]
	if ( (*vect_cntl & ~IRQ_SLOT_EN ) == IntNumber )
    5288:	e51b3010 	ldr	r3, [fp, #-16]
    528c:	e5933000 	ldr	r3, [r3]
    5290:	e3c32020 	bic	r2, r3, #32
    5294:	e51b301c 	ldr	r3, [fp, #-28]
    5298:	e1520003 	cmp	r2, r3
    529c:	1a000008 	bne	52c4 <uninstall_irq+0x94>
	{
	    *vect_addr = (unsigned long)NULL;	/* clear the VIC entry in the VIC table */
    52a0:	e51b2014 	ldr	r2, [fp, #-20]
    52a4:	e3a03000 	mov	r3, #0
    52a8:	e5823000 	str	r3, [r2]
	    *vect_cntl &= ~IRQ_SLOT_EN;	/* disable SLOT_EN bit */	
    52ac:	e51b3010 	ldr	r3, [fp, #-16]
    52b0:	e5933000 	ldr	r3, [r3]
    52b4:	e3c32020 	bic	r2, r3, #32
    52b8:	e51b3010 	ldr	r3, [fp, #-16]
    52bc:	e5832000 	str	r2, [r3]
	    break;
    52c0:	ea000005 	b	52dc <uninstall_irq+0xac>
    unsigned long *vect_addr;
    unsigned long *vect_cntl;
      
    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
    
    for ( i = 0; i < VIC_SIZE; i++ )
    52c4:	e51b3018 	ldr	r3, [fp, #-24]
    52c8:	e2833001 	add	r3, r3, #1
    52cc:	e50b3018 	str	r3, [fp, #-24]
    52d0:	e51b3018 	ldr	r3, [fp, #-24]
    52d4:	e353000f 	cmp	r3, #15
    52d8:	9affffe2 	bls	5268 <uninstall_irq+0x38>
	    *vect_addr = (unsigned long)NULL;	/* clear the VIC entry in the VIC table */
	    *vect_cntl &= ~IRQ_SLOT_EN;	/* disable SLOT_EN bit */	
	    break;
	}
    }
    if ( i == VIC_SIZE )
    52dc:	e51b3018 	ldr	r3, [fp, #-24]
    52e0:	e3530010 	cmp	r3, #16
    52e4:	1a000002 	bne	52f4 <uninstall_irq+0xc4>
    {
	return( FALSE );		/* fatal error, can't find interrupt number 
    52e8:	e3a03000 	mov	r3, #0
    52ec:	e50b3020 	str	r3, [fp, #-32]
    52f0:	ea000007 	b	5314 <uninstall_irq+0xe4>
					in vector slot */
    }
    VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
    52f4:	e3a02000 	mov	r2, #0
    52f8:	e2422eff 	sub	r2, r2, #4080	; 0xff0
    52fc:	e51b101c 	ldr	r1, [fp, #-28]
    5300:	e3a03001 	mov	r3, #1
    5304:	e1a03113 	lsl	r3, r3, r1
    5308:	e5823000 	str	r3, [r2]
    return( TRUE );
    530c:	e3a03001 	mov	r3, #1
    5310:	e50b3020 	str	r3, [fp, #-32]
    5314:	e51b3020 	ldr	r3, [fp, #-32]
}
    5318:	e1a00003 	mov	r0, r3
    531c:	e24bd00c 	sub	sp, fp, #12
    5320:	e89d6800 	ldm	sp, {fp, sp, lr}
    5324:	e12fff1e 	bx	lr

00005328 <ADCInit>:
** parameters:			ADC clock rate
** Returned value:		true or false
**
*****************************************************************************/
unsigned int ADCInit( unsigned int ADC_Clk )
{
    5328:	e1a0c00d 	mov	ip, sp
    532c:	e92dd810 	push	{r4, fp, ip, lr, pc}
    5330:	e24cb004 	sub	fp, ip, #4
    5334:	e24dd004 	sub	sp, sp, #4
    5338:	e50b0014 	str	r0, [fp, #-20]
	   AD0CR = ( 0x01 ) | 	// SEL=1,select channel 0, 1 to 4 on ADC0
    533c:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    5340:	e284490d 	add	r4, r4, #212992	; 0x34000
    5344:	e3a008e5 	mov	r0, #15007744	; 0xe50000
    5348:	e2400d79 	sub	r0, r0, #7744	; 0x1e40
    534c:	e51b1014 	ldr	r1, [fp, #-20]
    5350:	eb003550 	bl	12898 <____udivsi3_from_arm>
    5354:	e1a03000 	mov	r3, r0
    5358:	e2433001 	sub	r3, r3, #1
    535c:	e1a03403 	lsl	r3, r3, #8
    5360:	e3833821 	orr	r3, r3, #2162688	; 0x210000
    5364:	e3833001 	orr	r3, r3, #1
    5368:	e5843000 	str	r3, [r4]
	( 0 << 22 ) |  		// TEST1:0 = 00
	( 0 << 24 ) |  		// START = 0 A/D conversion stops
	( 0 << 27 );		// EDGE = 0 (CAP/MAT singal falling,trigger A/D
				conversion) */

    AD1CR = ( 0x01 << 0 ) | 	// SEL=1,select channel 0, 0 to 7 on ADC1
    536c:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    5370:	e2844806 	add	r4, r4, #393216	; 0x60000
    5374:	e3a008e5 	mov	r0, #15007744	; 0xe50000
    5378:	e2400d79 	sub	r0, r0, #7744	; 0x1e40
    537c:	e51b1014 	ldr	r1, [fp, #-20]
    5380:	eb003544 	bl	12898 <____udivsi3_from_arm>
    5384:	e1a03000 	mov	r3, r0
    5388:	e2433001 	sub	r3, r3, #1
    538c:	e1a03403 	lsl	r3, r3, #8
    5390:	e3833602 	orr	r3, r3, #2097152	; 0x200000
    5394:	e3833001 	orr	r3, r3, #1
    5398:	e5843000 	str	r3, [r4]
    {
	return (FALSE);
    }
#endif

    return (TRUE);
    539c:	e3a03001 	mov	r3, #1
}
    53a0:	e1a00003 	mov	r0, r3
    53a4:	e24bd010 	sub	sp, fp, #16
    53a8:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
    53ac:	e12fff1e 	bx	lr

000053b0 <ADC0Read>:
** parameters:			Channel number
** Returned value:		Value read, if interrupt driven, return channel #
**
*****************************************************************************/
unsigned int ADC0Read( unsigned char channelNum )
{
    53b0:	e1a0c00d 	mov	ip, sp
    53b4:	e92dd800 	push	{fp, ip, lr, pc}
    53b8:	e24cb004 	sub	fp, ip, #4
    53bc:	e24dd014 	sub	sp, sp, #20
    53c0:	e1a03000 	mov	r3, r0
    53c4:	e54b301c 	strb	r3, [fp, #-28]
#if !ADC_INTERRUPT_FLAG
    unsigned int regVal, ADC_Data;
    volatile unsigned int timeout=0;
    53c8:	e3a03000 	mov	r3, #0
    53cc:	e50b3018 	str	r3, [fp, #-24]
#endif

    /* channel number is 0 through 7 */
    if ( channelNum >= ADC_NUM )
    53d0:	e55b301c 	ldrb	r3, [fp, #-28]
    53d4:	e3530007 	cmp	r3, #7
    53d8:	9a000001 	bls	53e4 <ADC0Read+0x34>
    {
	channelNum = 0;		/* reset channel number to 0 */
    53dc:	e3a03000 	mov	r3, #0
    53e0:	e54b301c 	strb	r3, [fp, #-28]
    }
    AD0CR &= 0xFFFFFF00;
    53e4:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    53e8:	e282290d 	add	r2, r2, #212992	; 0x34000
    53ec:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    53f0:	e283390d 	add	r3, r3, #212992	; 0x34000
    53f4:	e5933000 	ldr	r3, [r3]
    53f8:	e3c330ff 	bic	r3, r3, #255	; 0xff
    53fc:	e5823000 	str	r3, [r2]
    AD0CR |= (1 << 24) | (1 << channelNum);
    5400:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
    5404:	e281190d 	add	r1, r1, #212992	; 0x34000
    5408:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    540c:	e283390d 	add	r3, r3, #212992	; 0x34000
    5410:	e5930000 	ldr	r0, [r3]
    5414:	e55b201c 	ldrb	r2, [fp, #-28]
    5418:	e3a03001 	mov	r3, #1
    541c:	e1a03213 	lsl	r3, r3, r2
    5420:	e1803003 	orr	r3, r0, r3
    5424:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
    5428:	e5813000 	str	r3, [r1]
				/* switch channel,start A/D convert */
#if !ADC_INTERRUPT_FLAG
    while ( timeout++<5000 )			/* wait until end of A/D convert */
    542c:	ea000009 	b	5458 <ADC0Read+0xa8>
    {
	regVal = *(volatile unsigned long *)(AD0_BASE_ADDR
    5430:	e55b301c 	ldrb	r3, [fp, #-28]
    5434:	e1a03103 	lsl	r3, r3, #2
    5438:	e283320e 	add	r3, r3, #-536870912	; 0xe0000000
    543c:	e283390d 	add	r3, r3, #212992	; 0x34000
    5440:	e2833010 	add	r3, r3, #16
    5444:	e5933000 	ldr	r3, [r3]
    5448:	e50b3014 	str	r3, [fp, #-20]
			+ ADC_OFFSET + ADC_INDEX * channelNum);
				/* read result of A/D conversion */
	if ( regVal & ADC_DONE )
    544c:	e51b3014 	ldr	r3, [fp, #-20]
    5450:	e3530000 	cmp	r3, #0
    5454:	ba00000a 	blt	5484 <ADC0Read+0xd4>
    }
    AD0CR &= 0xFFFFFF00;
    AD0CR |= (1 << 24) | (1 << channelNum);
				/* switch channel,start A/D convert */
#if !ADC_INTERRUPT_FLAG
    while ( timeout++<5000 )			/* wait until end of A/D convert */
    5458:	e51b1018 	ldr	r1, [fp, #-24]
    545c:	e3a03d4e 	mov	r3, #4992	; 0x1380
    5460:	e2833007 	add	r3, r3, #7
    5464:	e1510003 	cmp	r1, r3
    5468:	83a03000 	movhi	r3, #0
    546c:	93a03001 	movls	r3, #1
    5470:	e20320ff 	and	r2, r3, #255	; 0xff
    5474:	e2813001 	add	r3, r1, #1
    5478:	e50b3018 	str	r3, [fp, #-24]
    547c:	e3520000 	cmp	r2, #0
    5480:	1affffea 	bne	5430 <ADC0Read+0x80>
	{
	    break;
	}
    }

    AD0CR &= 0xF8FFFFFF;	/* stop ADC now */
    5484:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    5488:	e282290d 	add	r2, r2, #212992	; 0x34000
    548c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5490:	e283390d 	add	r3, r3, #212992	; 0x34000
    5494:	e5933000 	ldr	r3, [r3]
    5498:	e3c33407 	bic	r3, r3, #117440512	; 0x7000000
    549c:	e5823000 	str	r3, [r2]
    if ( regVal & ADC_OVERRUN )	/* save data when it's not overrun
    54a0:	e51b3014 	ldr	r3, [fp, #-20]
    54a4:	e2033101 	and	r3, r3, #1073741824	; 0x40000000
    54a8:	e3530000 	cmp	r3, #0
    54ac:	0a000002 	beq	54bc <ADC0Read+0x10c>
				otherwise, return zero */
    {
	return ( 0 );
    54b0:	e3a03000 	mov	r3, #0
    54b4:	e50b3020 	str	r3, [fp, #-32]
    54b8:	ea000006 	b	54d8 <ADC0Read+0x128>
    }
    ADC_Data = ( regVal >> 6 ) & 0x3FF;
    54bc:	e51b3014 	ldr	r3, [fp, #-20]
    54c0:	e1a03323 	lsr	r3, r3, #6
    54c4:	e1a03b03 	lsl	r3, r3, #22
    54c8:	e1a03b23 	lsr	r3, r3, #22
    54cc:	e50b3010 	str	r3, [fp, #-16]
    return ( ADC_Data );	/* return A/D conversion value */
    54d0:	e51b3010 	ldr	r3, [fp, #-16]
    54d4:	e50b3020 	str	r3, [fp, #-32]
    54d8:	e51b3020 	ldr	r3, [fp, #-32]
#else
    return ( channelNum );	/* if it's interrupt driven, the
				ADC reading is done inside the handler.
				so, return channel number */
#endif
}
    54dc:	e1a00003 	mov	r0, r3
    54e0:	e24bd00c 	sub	sp, fp, #12
    54e4:	e89d6800 	ldm	sp, {fp, sp, lr}
    54e8:	e12fff1e 	bx	lr

000054ec <ADC1Read>:
** parameters:			Channel number
** Returned value:		Value read, if interrupt driven, return channel #
**
*****************************************************************************/
unsigned int ADC1Read( unsigned char channelNum )
{
    54ec:	e1a0c00d 	mov	ip, sp
    54f0:	e92dd800 	push	{fp, ip, lr, pc}
    54f4:	e24cb004 	sub	fp, ip, #4
    54f8:	e24dd010 	sub	sp, sp, #16
    54fc:	e1a03000 	mov	r3, r0
    5500:	e54b3018 	strb	r3, [fp, #-24]
    unsigned int regVal;
	unsigned int ADC_Data;
#endif

    /* channel number is 0 through 7 */
    if ( channelNum >= ADC_NUM )
    5504:	e55b3018 	ldrb	r3, [fp, #-24]
    5508:	e3530007 	cmp	r3, #7
    550c:	9a000001 	bls	5518 <ADC1Read+0x2c>
    {
	channelNum = 0;		/* reset channel number to 0 */
    5510:	e3a03000 	mov	r3, #0
    5514:	e54b3018 	strb	r3, [fp, #-24]
    }
    AD1CR &= 0xFFFFFF00;
    5518:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    551c:	e2822806 	add	r2, r2, #393216	; 0x60000
    5520:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5524:	e2833806 	add	r3, r3, #393216	; 0x60000
    5528:	e5933000 	ldr	r3, [r3]
    552c:	e3c330ff 	bic	r3, r3, #255	; 0xff
    5530:	e5823000 	str	r3, [r2]
    AD1CR |= (1 << 24) | (1 << channelNum);
    5534:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
    5538:	e2811806 	add	r1, r1, #393216	; 0x60000
    553c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5540:	e2833806 	add	r3, r3, #393216	; 0x60000
    5544:	e5930000 	ldr	r0, [r3]
    5548:	e55b2018 	ldrb	r2, [fp, #-24]
    554c:	e3a03001 	mov	r3, #1
    5550:	e1a03213 	lsl	r3, r3, r2
    5554:	e1803003 	orr	r3, r0, r3
    5558:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
    555c:	e5813000 	str	r3, [r1]
				/* switch channel,start A/D convert */
#if !ADC_INTERRUPT_FLAG
    while ( 1 )			/* wait until end of A/D convert */
    {
	regVal = *(volatile unsigned long *)(AD1_BASE_ADDR
    5560:	e55b3018 	ldrb	r3, [fp, #-24]
    5564:	e1a03103 	lsl	r3, r3, #2
    5568:	e283320e 	add	r3, r3, #-536870912	; 0xe0000000
    556c:	e2833806 	add	r3, r3, #393216	; 0x60000
    5570:	e2833010 	add	r3, r3, #16
    5574:	e5933000 	ldr	r3, [r3]
    5578:	e50b3014 	str	r3, [fp, #-20]
			+ ADC_OFFSET + ADC_INDEX * channelNum);
				/* read result of A/D conversion */
	if ( regVal & ADC_DONE )
    557c:	e51b3014 	ldr	r3, [fp, #-20]
    5580:	e3530000 	cmp	r3, #0
    5584:	ba000000 	blt	558c <ADC1Read+0xa0>
	{
	    break;
	}
    }
    5588:	eafffff4 	b	5560 <ADC1Read+0x74>

    AD1CR &= 0xF8FFFFFF;	/* stop ADC now */
    558c:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    5590:	e2822806 	add	r2, r2, #393216	; 0x60000
    5594:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5598:	e2833806 	add	r3, r3, #393216	; 0x60000
    559c:	e5933000 	ldr	r3, [r3]
    55a0:	e3c33407 	bic	r3, r3, #117440512	; 0x7000000
    55a4:	e5823000 	str	r3, [r2]
    if ( regVal & ADC_OVERRUN )	/* save data when it's not overrun
    55a8:	e51b3014 	ldr	r3, [fp, #-20]
    55ac:	e2033101 	and	r3, r3, #1073741824	; 0x40000000
    55b0:	e3530000 	cmp	r3, #0
    55b4:	0a000002 	beq	55c4 <ADC1Read+0xd8>
				otherwise, return zero */
    {
	return ( 0 );
    55b8:	e3a03000 	mov	r3, #0
    55bc:	e50b301c 	str	r3, [fp, #-28]
    55c0:	ea000006 	b	55e0 <ADC1Read+0xf4>
    }

    ADC_Data = ( regVal >> 6 ) & 0x3FF;
    55c4:	e51b3014 	ldr	r3, [fp, #-20]
    55c8:	e1a03323 	lsr	r3, r3, #6
    55cc:	e1a03b03 	lsl	r3, r3, #22
    55d0:	e1a03b23 	lsr	r3, r3, #22
    55d4:	e50b3010 	str	r3, [fp, #-16]
    return ( ADC_Data );	/* return A/D conversion value */
    55d8:	e51b3010 	ldr	r3, [fp, #-16]
    55dc:	e50b301c 	str	r3, [fp, #-28]
    55e0:	e51b301c 	ldr	r3, [fp, #-28]
#else
    return ( channelNum );
#endif
}
    55e4:	e1a00003 	mov	r0, r3
    55e8:	e24bd00c 	sub	sp, fp, #12
    55ec:	e89d6800 	ldm	sp, {fp, sp, lr}
    55f0:	e12fff1e 	bx	lr

000055f4 <ADC0triggerSampling>:

void ADC0triggerSampling(unsigned char selectChannels)
{
    55f4:	e1a0c00d 	mov	ip, sp
    55f8:	e92dd800 	push	{fp, ip, lr, pc}
    55fc:	e24cb004 	sub	fp, ip, #4
    5600:	e24dd004 	sub	sp, sp, #4
    5604:	e1a03000 	mov	r3, r0
    5608:	e54b3010 	strb	r3, [fp, #-16]
	AD0CR |= (selectChannels);
    560c:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    5610:	e282290d 	add	r2, r2, #212992	; 0x34000
    5614:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5618:	e283390d 	add	r3, r3, #212992	; 0x34000
    561c:	e5931000 	ldr	r1, [r3]
    5620:	e55b3010 	ldrb	r3, [fp, #-16]
    5624:	e1813003 	orr	r3, r1, r3
    5628:	e5823000 	str	r3, [r2]

}
    562c:	e24bd00c 	sub	sp, fp, #12
    5630:	e89d6800 	ldm	sp, {fp, sp, lr}
    5634:	e12fff1e 	bx	lr

00005638 <ADC0getSamplingResults>:

void ADC0getSamplingResults(unsigned char selectChannels, unsigned int * channelValues)
{
    5638:	e1a0c00d 	mov	ip, sp
    563c:	e92dd800 	push	{fp, ip, lr, pc}
    5640:	e24cb004 	sub	fp, ip, #4
    5644:	e24dd010 	sub	sp, sp, #16
    5648:	e1a03000 	mov	r3, r0
    564c:	e50b101c 	str	r1, [fp, #-28]
    5650:	e54b3018 	strb	r3, [fp, #-24]
	int i;
	//get last result from all selected channels
	for (i=0;i<8;i++)
    5654:	e3a03000 	mov	r3, #0
    5658:	e50b3014 	str	r3, [fp, #-20]
    565c:	ea000026 	b	56fc <ADC0getSamplingResults+0xc4>
		if (selectChannels&(1<<i))
    5660:	e55b2018 	ldrb	r2, [fp, #-24]
    5664:	e51b3014 	ldr	r3, [fp, #-20]
    5668:	e1a03352 	asr	r3, r2, r3
    566c:	e2033001 	and	r3, r3, #1
    5670:	e20330ff 	and	r3, r3, #255	; 0xff
    5674:	e3530000 	cmp	r3, #0
    5678:	0a00001c 	beq	56f0 <ADC0getSamplingResults+0xb8>
		{
		    unsigned int regVal;

			regVal=*(volatile unsigned long *)(AD0_BASE_ADDR
    567c:	e51b3014 	ldr	r3, [fp, #-20]
    5680:	e1a03103 	lsl	r3, r3, #2
    5684:	e283320e 	add	r3, r3, #-536870912	; 0xe0000000
    5688:	e283390d 	add	r3, r3, #212992	; 0x34000
    568c:	e2833010 	add	r3, r3, #16
    5690:	e5933000 	ldr	r3, [r3]
    5694:	e50b3010 	str	r3, [fp, #-16]
					+ ADC_OFFSET + ADC_INDEX * i);

			if ((regVal&(ADC_OVERRUN|ADC_DONE))==0)
    5698:	e51b3010 	ldr	r3, [fp, #-16]
    569c:	e2033103 	and	r3, r3, #-1073741824	; 0xc0000000
    56a0:	e3530000 	cmp	r3, #0
    56a4:	1a000007 	bne	56c8 <ADC0getSamplingResults+0x90>
					channelValues[i]=0;
    56a8:	e51b3014 	ldr	r3, [fp, #-20]
    56ac:	e1a03103 	lsl	r3, r3, #2
    56b0:	e1a02003 	mov	r2, r3
    56b4:	e51b301c 	ldr	r3, [fp, #-28]
    56b8:	e0822003 	add	r2, r2, r3
    56bc:	e3a03000 	mov	r3, #0
    56c0:	e5823000 	str	r3, [r2]
    56c4:	ea000009 	b	56f0 <ADC0getSamplingResults+0xb8>
			else
					channelValues[i]=( regVal >> 6 ) & 0x3FF;
    56c8:	e51b3014 	ldr	r3, [fp, #-20]
    56cc:	e1a03103 	lsl	r3, r3, #2
    56d0:	e1a02003 	mov	r2, r3
    56d4:	e51b301c 	ldr	r3, [fp, #-28]
    56d8:	e0822003 	add	r2, r2, r3
    56dc:	e51b3010 	ldr	r3, [fp, #-16]
    56e0:	e1a03323 	lsr	r3, r3, #6
    56e4:	e1a03b03 	lsl	r3, r3, #22
    56e8:	e1a03b23 	lsr	r3, r3, #22
    56ec:	e5823000 	str	r3, [r2]

void ADC0getSamplingResults(unsigned char selectChannels, unsigned int * channelValues)
{
	int i;
	//get last result from all selected channels
	for (i=0;i<8;i++)
    56f0:	e51b3014 	ldr	r3, [fp, #-20]
    56f4:	e2833001 	add	r3, r3, #1
    56f8:	e50b3014 	str	r3, [fp, #-20]
    56fc:	e51b3014 	ldr	r3, [fp, #-20]
    5700:	e3530007 	cmp	r3, #7
    5704:	daffffd5 	ble	5660 <ADC0getSamplingResults+0x28>
			if ((regVal&(ADC_OVERRUN|ADC_DONE))==0)
					channelValues[i]=0;
			else
					channelValues[i]=( regVal >> 6 ) & 0x3FF;
		}
}
    5708:	e24bd00c 	sub	sp, fp, #12
    570c:	e89d6800 	ldm	sp, {fp, sp, lr}
    5710:	e12fff1e 	bx	lr

00005714 <SSPHandler>:
char data_sent_to_HL=1;

inline void SSPReceive(unsigned char);

void SSPHandler (void) __irq
{
    5714:	e1a0c00d 	mov	ip, sp
    5718:	e92dd800 	push	{fp, ip, lr, pc}
    571c:	e24cb004 	sub	fp, ip, #4
    5720:	e24dd008 	sub	sp, sp, #8
    unsigned short input_data;
//    unsigned char timeout=0;

    IENABLE;				/* handles nested interrupt */

    regValue = SSPMIS;
    5724:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5728:	e283391a 	add	r3, r3, #425984	; 0x68000
    572c:	e283301c 	add	r3, r3, #28
    5730:	e5933000 	ldr	r3, [r3]
    5734:	e50b3014 	str	r3, [fp, #-20]
    if ( regValue & SSPMIS_RORMIS )	/* Receive overrun interrupt */
    5738:	e51b3014 	ldr	r3, [fp, #-20]
    573c:	e2033001 	and	r3, r3, #1
    5740:	e20330ff 	and	r3, r3, #255	; 0xff
    5744:	e3530000 	cmp	r3, #0
    5748:	0a000004 	beq	5760 <SSPHandler+0x4c>
    {
		SSPICR = SSPICR_RORIC;		/* clear interrupt */
    574c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5750:	e283391a 	add	r3, r3, #425984	; 0x68000
    5754:	e2833020 	add	r3, r3, #32
    5758:	e3a02001 	mov	r2, #1
    575c:	e5832000 	str	r2, [r3]
    }
    if ( regValue & SSPMIS_RTMIS )	/* Receive timeout interrupt */
    5760:	e51b3014 	ldr	r3, [fp, #-20]
    5764:	e2033002 	and	r3, r3, #2
    5768:	e3530000 	cmp	r3, #0
    576c:	0a000004 	beq	5784 <SSPHandler+0x70>
    {
		SSPICR = SSPICR_RTIC;		/* clear interrupt */
    5770:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5774:	e283391a 	add	r3, r3, #425984	; 0x68000
    5778:	e2833020 	add	r3, r3, #32
    577c:	e3a02002 	mov	r2, #2
    5780:	e5832000 	str	r2, [r3]
    }

    if ( regValue & SSPMIS_RXMIS )	/* Rx at least half full */
    5784:	e51b3014 	ldr	r3, [fp, #-20]
    5788:	e2033004 	and	r3, r3, #4
    578c:	e3530000 	cmp	r3, #0
    5790:	0a000016 	beq	57f0 <SSPHandler+0xdc>
    {
    			/* receive until it's empty */
	while ( SSPSR & SSPSR_RNE )
    5794:	ea00000f 	b	57d8 <SSPHandler+0xc4>
	{
		input_data=SSPDR;
    5798:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    579c:	e283391a 	add	r3, r3, #425984	; 0x68000
    57a0:	e5933000 	ldr	r3, [r3]
    57a4:	e14b30be 	strh	r3, [fp, #-14]
	    //SSPReceive(input_data&0xFF);
	    //SSPReceive(input_data>>8);

		SSP_rx_handler_HL(input_data&0xFF);
    57a8:	e15b30be 	ldrh	r3, [fp, #-14]
    57ac:	e20330ff 	and	r3, r3, #255	; 0xff
    57b0:	e20330ff 	and	r3, r3, #255	; 0xff
    57b4:	e1a00003 	mov	r0, r3
    57b8:	ebffee52 	bl	1108 <SSP_rx_handler_HL>
		SSP_rx_handler_HL(input_data>>8);
    57bc:	e15b30be 	ldrh	r3, [fp, #-14]
    57c0:	e1a03423 	lsr	r3, r3, #8
    57c4:	e1a03803 	lsl	r3, r3, #16
    57c8:	e1a03823 	lsr	r3, r3, #16
    57cc:	e20330ff 	and	r3, r3, #255	; 0xff
    57d0:	e1a00003 	mov	r0, r3
    57d4:	ebffee4b 	bl	1108 <SSP_rx_handler_HL>
    }

    if ( regValue & SSPMIS_RXMIS )	/* Rx at least half full */
    {
    			/* receive until it's empty */
	while ( SSPSR & SSPSR_RNE )
    57d8:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    57dc:	e283391a 	add	r3, r3, #425984	; 0x68000
    57e0:	e5933000 	ldr	r3, [r3]
    57e4:	e2033004 	and	r3, r3, #4
    57e8:	e3530000 	cmp	r3, #0
    57ec:	1affffe9 	bne	5798 <SSPHandler+0x84>
	//    while ( (!(SSPSR & SSPSR_BSY) )&&(timeout++<50) );
	}				/* interrupt will be cleared when */
					/* data register is read or written */
    }

    if ( regValue & SSPMIS_TXMIS )	/* Tx at least half empty */
    57f0:	e51b3014 	ldr	r3, [fp, #-20]
    57f4:	e2033008 	and	r3, r3, #8
    57f8:	e3530000 	cmp	r3, #0
    57fc:	0a00002f 	beq	58c0 <SSPHandler+0x1ac>
    {
	/* transmit until it's full */
	while ( (SSPSR & SSPSR_TNF) )
    5800:	ea000028 	b	58a8 <SSPHandler+0x194>
	{
	    if(CurrentTxIndex<SPIWR_num_bytes)
    5804:	e59f30d0 	ldr	r3, [pc, #208]	; 58dc <SSPHandler+0x1c8>
    5808:	e5933000 	ldr	r3, [r3]
    580c:	e1a02003 	mov	r2, r3
    5810:	e59f30c8 	ldr	r3, [pc, #200]	; 58e0 <SSPHandler+0x1cc>
    5814:	e5933000 	ldr	r3, [r3]
    5818:	e1520003 	cmp	r2, r3
    581c:	2a000014 	bcs	5874 <SSPHandler+0x160>
	    {
	    	SSPDR = SPIWRData[CurrentTxIndex]|(SPIWRData[CurrentTxIndex+1]<<8);
    5820:	e3a0128e 	mov	r1, #-536870904	; 0xe0000008
    5824:	e281191a 	add	r1, r1, #425984	; 0x68000
    5828:	e59f30ac 	ldr	r3, [pc, #172]	; 58dc <SSPHandler+0x1c8>
    582c:	e5932000 	ldr	r2, [r3]
    5830:	e59f30ac 	ldr	r3, [pc, #172]	; 58e4 <SSPHandler+0x1d0>
    5834:	e7d33002 	ldrb	r3, [r3, r2]
    5838:	e1a00003 	mov	r0, r3
    583c:	e59f3098 	ldr	r3, [pc, #152]	; 58dc <SSPHandler+0x1c8>
    5840:	e5933000 	ldr	r3, [r3]
    5844:	e2832001 	add	r2, r3, #1
    5848:	e59f3094 	ldr	r3, [pc, #148]	; 58e4 <SSPHandler+0x1d0>
    584c:	e7d33002 	ldrb	r3, [r3, r2]
    5850:	e1a03403 	lsl	r3, r3, #8
    5854:	e1803003 	orr	r3, r0, r3
    5858:	e5813000 	str	r3, [r1]
	    	CurrentTxIndex+=2;
    585c:	e59f3078 	ldr	r3, [pc, #120]	; 58dc <SSPHandler+0x1c8>
    5860:	e5933000 	ldr	r3, [r3]
    5864:	e2832002 	add	r2, r3, #2
    5868:	e59f306c 	ldr	r3, [pc, #108]	; 58dc <SSPHandler+0x1c8>
    586c:	e5832000 	str	r2, [r3]
    5870:	ea00000c 	b	58a8 <SSPHandler+0x194>
	    }
	    else
	    {
	    	CurrentTxIndex=0;
    5874:	e59f2060 	ldr	r2, [pc, #96]	; 58dc <SSPHandler+0x1c8>
    5878:	e3a03000 	mov	r3, #0
    587c:	e5823000 	str	r3, [r2]
	    	SPIWR_num_bytes=0;
    5880:	e59f2058 	ldr	r2, [pc, #88]	; 58e0 <SSPHandler+0x1cc>
    5884:	e3a03000 	mov	r3, #0
    5888:	e5823000 	str	r3, [r2]
	    	data_sent_to_LL=1;
    588c:	e59f2054 	ldr	r2, [pc, #84]	; 58e8 <SSPHandler+0x1d4>
    5890:	e3a03001 	mov	r3, #1
    5894:	e5c23000 	strb	r3, [r2]
			SSPDR=0;
    5898:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    589c:	e283391a 	add	r3, r3, #425984	; 0x68000
    58a0:	e3a02000 	mov	r2, #0
    58a4:	e5832000 	str	r2, [r3]
    }

    if ( regValue & SSPMIS_TXMIS )	/* Tx at least half empty */
    {
	/* transmit until it's full */
	while ( (SSPSR & SSPSR_TNF) )
    58a8:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    58ac:	e283391a 	add	r3, r3, #425984	; 0x68000
    58b0:	e5933000 	ldr	r3, [r3]
    58b4:	e2033002 	and	r3, r3, #2
    58b8:	e3530000 	cmp	r3, #0
    58bc:	1affffd0 	bne	5804 <SSPHandler+0xf0>
	}				/* interrupt will be cleared when */
					/* data register is read or written */
    }

    IDISABLE;
    VICVectAddr = 0;		/* Acknowledge Interrupt */
    58c0:	e3a03000 	mov	r3, #0
    58c4:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    58c8:	e3a02000 	mov	r2, #0
    58cc:	e5832000 	str	r2, [r3]
}
    58d0:	e24bd00c 	sub	sp, fp, #12
    58d4:	e89d6800 	ldm	sp, {fp, sp, lr}
    58d8:	e12fff1e 	bx	lr
    58dc:	400020c0 	.word	0x400020c0
    58e0:	400020bc 	.word	0x400020bc
    58e4:	400020c4 	.word	0x400020c4
    58e8:	4000000e 	.word	0x4000000e

000058ec <LL_write_init>:

void LL_write_init(void)
{
    58ec:	e1a0c00d 	mov	ip, sp
    58f0:	e92dd800 	push	{fp, ip, lr, pc}
    58f4:	e24cb004 	sub	fp, ip, #4
		SPIWRData[0]='>';
    58f8:	e59f2028 	ldr	r2, [pc, #40]	; 5928 <LL_write_init+0x3c>
    58fc:	e3a0303e 	mov	r3, #62	; 0x3e
    5900:	e5c23000 	strb	r3, [r2]
		SPIWRData[1]='*';
    5904:	e59f201c 	ldr	r2, [pc, #28]	; 5928 <LL_write_init+0x3c>
    5908:	e3a0302a 	mov	r3, #42	; 0x2a
    590c:	e5c23001 	strb	r3, [r2, #1]
		SPIWRData[2]='>';
    5910:	e59f2010 	ldr	r2, [pc, #16]	; 5928 <LL_write_init+0x3c>
    5914:	e3a0303e 	mov	r3, #62	; 0x3e
    5918:	e5c23002 	strb	r3, [r2, #2]
}
    591c:	e24bd00c 	sub	sp, fp, #12
    5920:	e89d6800 	ldm	sp, {fp, sp, lr}
    5924:	e12fff1e 	bx	lr
    5928:	400020c4 	.word	0x400020c4

0000592c <LL_write>:

int LL_write(unsigned char *data, unsigned short cnt, unsigned char PD )	//write data to high-level processor
{
    592c:	e1a0c00d 	mov	ip, sp
    5930:	e92dd800 	push	{fp, ip, lr, pc}
    5934:	e24cb004 	sub	fp, ip, #4
    5938:	e24dd014 	sub	sp, sp, #20
    593c:	e50b0014 	str	r0, [fp, #-20]
    5940:	e1a03001 	mov	r3, r1
    5944:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
    5948:	e1a03002 	mov	r3, r2
    594c:	e54b301c 	strb	r3, [fp, #-28]
	unsigned int i;

	if(data_sent_to_LL)
    5950:	e59f31d0 	ldr	r3, [pc, #464]	; 5b28 <LL_write+0x1fc>
    5954:	e5d33000 	ldrb	r3, [r3]
    5958:	e3530000 	cmp	r3, #0
    595c:	0a00001f 	beq	59e0 <LL_write+0xb4>
	{
		SPIWRData[3]=PD;
    5960:	e59f31c4 	ldr	r3, [pc, #452]	; 5b2c <LL_write+0x200>
    5964:	e55b201c 	ldrb	r2, [fp, #-28]
    5968:	e5c32003 	strb	r2, [r3, #3]
		for(i=0; i<cnt; i++)
    596c:	e3a03000 	mov	r3, #0
    5970:	e50b3010 	str	r3, [fp, #-16]
    5974:	ea00000a 	b	59a4 <LL_write+0x78>
		{
			SPIWRData[i+4]=data[i];
    5978:	e51b3010 	ldr	r3, [fp, #-16]
    597c:	e2831004 	add	r1, r3, #4
    5980:	e51b2010 	ldr	r2, [fp, #-16]
    5984:	e51b3014 	ldr	r3, [fp, #-20]
    5988:	e0823003 	add	r3, r2, r3
    598c:	e5d33000 	ldrb	r3, [r3]
    5990:	e59f2194 	ldr	r2, [pc, #404]	; 5b2c <LL_write+0x200>
    5994:	e7c23001 	strb	r3, [r2, r1]
	unsigned int i;

	if(data_sent_to_LL)
	{
		SPIWRData[3]=PD;
		for(i=0; i<cnt; i++)
    5998:	e51b3010 	ldr	r3, [fp, #-16]
    599c:	e2833001 	add	r3, r3, #1
    59a0:	e50b3010 	str	r3, [fp, #-16]
    59a4:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
    59a8:	e51b3010 	ldr	r3, [fp, #-16]
    59ac:	e1520003 	cmp	r2, r3
    59b0:	8afffff0 	bhi	5978 <LL_write+0x4c>
		{
			SPIWRData[i+4]=data[i];
		}
		SPIWRData[cnt+4]=0;
    59b4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
    59b8:	e2831004 	add	r1, r3, #4
    59bc:	e59f2168 	ldr	r2, [pc, #360]	; 5b2c <LL_write+0x200>
    59c0:	e3a03000 	mov	r3, #0
    59c4:	e7c23001 	strb	r3, [r2, r1]
		SPIWR_num_bytes=cnt+5;
    59c8:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
    59cc:	e2833005 	add	r3, r3, #5
    59d0:	e1a02003 	mov	r2, r3
    59d4:	e59f3154 	ldr	r3, [pc, #340]	; 5b30 <LL_write+0x204>
    59d8:	e5832000 	str	r2, [r3]
    59dc:	ea000047 	b	5b00 <LL_write+0x1d4>
	}
	else if(SPIWR_num_bytes+cnt<127)
    59e0:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
    59e4:	e59f3144 	ldr	r3, [pc, #324]	; 5b30 <LL_write+0x204>
    59e8:	e5933000 	ldr	r3, [r3]
    59ec:	e0823003 	add	r3, r2, r3
    59f0:	e353007e 	cmp	r3, #126	; 0x7e
    59f4:	8a00003e 	bhi	5af4 <LL_write+0x1c8>
	{
		SPIWRData[SPIWR_num_bytes-1]='>';
    59f8:	e59f3130 	ldr	r3, [pc, #304]	; 5b30 <LL_write+0x204>
    59fc:	e5933000 	ldr	r3, [r3]
    5a00:	e2431001 	sub	r1, r3, #1
    5a04:	e59f2120 	ldr	r2, [pc, #288]	; 5b2c <LL_write+0x200>
    5a08:	e3a0303e 	mov	r3, #62	; 0x3e
    5a0c:	e7c23001 	strb	r3, [r2, r1]
		SPIWRData[0+SPIWR_num_bytes]='*';
    5a10:	e59f3118 	ldr	r3, [pc, #280]	; 5b30 <LL_write+0x204>
    5a14:	e5931000 	ldr	r1, [r3]
    5a18:	e59f210c 	ldr	r2, [pc, #268]	; 5b2c <LL_write+0x200>
    5a1c:	e3a0302a 	mov	r3, #42	; 0x2a
    5a20:	e7c23001 	strb	r3, [r2, r1]
		SPIWRData[1+SPIWR_num_bytes]='>';
    5a24:	e59f3104 	ldr	r3, [pc, #260]	; 5b30 <LL_write+0x204>
    5a28:	e5933000 	ldr	r3, [r3]
    5a2c:	e2831001 	add	r1, r3, #1
    5a30:	e59f20f4 	ldr	r2, [pc, #244]	; 5b2c <LL_write+0x200>
    5a34:	e3a0303e 	mov	r3, #62	; 0x3e
    5a38:	e7c23001 	strb	r3, [r2, r1]
		SPIWRData[2+SPIWR_num_bytes]=PD;
    5a3c:	e59f30ec 	ldr	r3, [pc, #236]	; 5b30 <LL_write+0x204>
    5a40:	e5933000 	ldr	r3, [r3]
    5a44:	e2831002 	add	r1, r3, #2
    5a48:	e59f20dc 	ldr	r2, [pc, #220]	; 5b2c <LL_write+0x200>
    5a4c:	e55b301c 	ldrb	r3, [fp, #-28]
    5a50:	e7c23001 	strb	r3, [r2, r1]
		for(i=SPIWR_num_bytes; i<cnt+SPIWR_num_bytes; i++)
    5a54:	e59f30d4 	ldr	r3, [pc, #212]	; 5b30 <LL_write+0x204>
    5a58:	e5933000 	ldr	r3, [r3]
    5a5c:	e50b3010 	str	r3, [fp, #-16]
    5a60:	ea00000e 	b	5aa0 <LL_write+0x174>
		{
			SPIWRData[i+3]=data[i-SPIWR_num_bytes];
    5a64:	e51b3010 	ldr	r3, [fp, #-16]
    5a68:	e2831003 	add	r1, r3, #3
    5a6c:	e59f30bc 	ldr	r3, [pc, #188]	; 5b30 <LL_write+0x204>
    5a70:	e5932000 	ldr	r2, [r3]
    5a74:	e51b3010 	ldr	r3, [fp, #-16]
    5a78:	e0623003 	rsb	r3, r2, r3
    5a7c:	e1a02003 	mov	r2, r3
    5a80:	e51b3014 	ldr	r3, [fp, #-20]
    5a84:	e0823003 	add	r3, r2, r3
    5a88:	e5d33000 	ldrb	r3, [r3]
    5a8c:	e59f2098 	ldr	r2, [pc, #152]	; 5b2c <LL_write+0x200>
    5a90:	e7c23001 	strb	r3, [r2, r1]
	{
		SPIWRData[SPIWR_num_bytes-1]='>';
		SPIWRData[0+SPIWR_num_bytes]='*';
		SPIWRData[1+SPIWR_num_bytes]='>';
		SPIWRData[2+SPIWR_num_bytes]=PD;
		for(i=SPIWR_num_bytes; i<cnt+SPIWR_num_bytes; i++)
    5a94:	e51b3010 	ldr	r3, [fp, #-16]
    5a98:	e2833001 	add	r3, r3, #1
    5a9c:	e50b3010 	str	r3, [fp, #-16]
    5aa0:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
    5aa4:	e59f3084 	ldr	r3, [pc, #132]	; 5b30 <LL_write+0x204>
    5aa8:	e5933000 	ldr	r3, [r3]
    5aac:	e0822003 	add	r2, r2, r3
    5ab0:	e51b3010 	ldr	r3, [fp, #-16]
    5ab4:	e1520003 	cmp	r2, r3
    5ab8:	8affffe9 	bhi	5a64 <LL_write+0x138>
		{
			SPIWRData[i+3]=data[i-SPIWR_num_bytes];
		}
		SPIWR_num_bytes+=cnt+5;
    5abc:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
    5ac0:	e59f3068 	ldr	r3, [pc, #104]	; 5b30 <LL_write+0x204>
    5ac4:	e5933000 	ldr	r3, [r3]
    5ac8:	e0823003 	add	r3, r2, r3
    5acc:	e2832005 	add	r2, r3, #5
    5ad0:	e59f3058 	ldr	r3, [pc, #88]	; 5b30 <LL_write+0x204>
    5ad4:	e5832000 	str	r2, [r3]
		SPIWRData[SPIWR_num_bytes-1]=0;
    5ad8:	e59f3050 	ldr	r3, [pc, #80]	; 5b30 <LL_write+0x204>
    5adc:	e5933000 	ldr	r3, [r3]
    5ae0:	e2431001 	sub	r1, r3, #1
    5ae4:	e59f2040 	ldr	r2, [pc, #64]	; 5b2c <LL_write+0x200>
    5ae8:	e3a03000 	mov	r3, #0
    5aec:	e7c23001 	strb	r3, [r2, r1]
    5af0:	ea000002 	b	5b00 <LL_write+0x1d4>
	}
	else return(0);
    5af4:	e3a03000 	mov	r3, #0
    5af8:	e50b3020 	str	r3, [fp, #-32]
    5afc:	ea000004 	b	5b14 <LL_write+0x1e8>
	data_sent_to_LL=0;
    5b00:	e59f3020 	ldr	r3, [pc, #32]	; 5b28 <LL_write+0x1fc>
    5b04:	e3a02000 	mov	r2, #0
    5b08:	e5c32000 	strb	r2, [r3]

	return(1);
    5b0c:	e3a03001 	mov	r3, #1
    5b10:	e50b3020 	str	r3, [fp, #-32]
    5b14:	e51b3020 	ldr	r3, [fp, #-32]
}
    5b18:	e1a00003 	mov	r0, r3
    5b1c:	e24bd00c 	sub	sp, fp, #12
    5b20:	e89d6800 	ldm	sp, {fp, sp, lr}
    5b24:	e12fff1e 	bx	lr
    5b28:	4000000e 	.word	0x4000000e
    5b2c:	400020c4 	.word	0x400020c4
    5b30:	400020bc 	.word	0x400020bc

00005b34 <jetiSetKeyChanged>:
unsigned char jetiKeyChanged=0;
unsigned char jetiKey=0;


void jetiSetKeyChanged(unsigned char key)
{
    5b34:	e1a0c00d 	mov	ip, sp
    5b38:	e92dd800 	push	{fp, ip, lr, pc}
    5b3c:	e24cb004 	sub	fp, ip, #4
    5b40:	e24dd004 	sub	sp, sp, #4
    5b44:	e1a03000 	mov	r3, r0
    5b48:	e54b3010 	strb	r3, [fp, #-16]
	jetiKey=key;
    5b4c:	e59f201c 	ldr	r2, [pc, #28]	; 5b70 <jetiSetKeyChanged+0x3c>
    5b50:	e55b3010 	ldrb	r3, [fp, #-16]
    5b54:	e5c23000 	strb	r3, [r2]
	jetiKeyChanged=1;
    5b58:	e59f2014 	ldr	r2, [pc, #20]	; 5b74 <jetiSetKeyChanged+0x40>
    5b5c:	e3a03001 	mov	r3, #1
    5b60:	e5c23000 	strb	r3, [r2]
}
    5b64:	e24bd00c 	sub	sp, fp, #12
    5b68:	e89d6800 	ldm	sp, {fp, sp, lr}
    5b6c:	e12fff1e 	bx	lr
    5b70:	40000e54 	.word	0x40000e54
    5b74:	40000e53 	.word	0x40000e53

00005b78 <jetiCheckForKeyChange>:


unsigned char jetiCheckForKeyChange(void)
{
    5b78:	e1a0c00d 	mov	ip, sp
    5b7c:	e92dd800 	push	{fp, ip, lr, pc}
    5b80:	e24cb004 	sub	fp, ip, #4
    5b84:	e24dd004 	sub	sp, sp, #4
	if (jetiKeyChanged)
    5b88:	e59f3040 	ldr	r3, [pc, #64]	; 5bd0 <jetiCheckForKeyChange+0x58>
    5b8c:	e5d33000 	ldrb	r3, [r3]
    5b90:	e3530000 	cmp	r3, #0
    5b94:	0a000006 	beq	5bb4 <jetiCheckForKeyChange+0x3c>
	{
		jetiKeyChanged=0;
    5b98:	e59f2030 	ldr	r2, [pc, #48]	; 5bd0 <jetiCheckForKeyChange+0x58>
    5b9c:	e3a03000 	mov	r3, #0
    5ba0:	e5c23000 	strb	r3, [r2]
		return jetiKey;
    5ba4:	e59f3028 	ldr	r3, [pc, #40]	; 5bd4 <jetiCheckForKeyChange+0x5c>
    5ba8:	e5d33000 	ldrb	r3, [r3]
    5bac:	e50b3010 	str	r3, [fp, #-16]
    5bb0:	ea000001 	b	5bbc <jetiCheckForKeyChange+0x44>
	}else
		return 0;
    5bb4:	e3a03000 	mov	r3, #0
    5bb8:	e50b3010 	str	r3, [fp, #-16]
    5bbc:	e51b3010 	ldr	r3, [fp, #-16]
}
    5bc0:	e1a00003 	mov	r0, r3
    5bc4:	e24bd00c 	sub	sp, fp, #12
    5bc8:	e89d6800 	ldm	sp, {fp, sp, lr}
    5bcc:	e12fff1e 	bx	lr
    5bd0:	40000e53 	.word	0x40000e53
    5bd4:	40000e54 	.word	0x40000e54

00005bd8 <jetiSetAlarm>:
unsigned char jetiSetAlarm(unsigned char alarm, unsigned alarmType)
{
    5bd8:	e1a0c00d 	mov	ip, sp
    5bdc:	e92dd800 	push	{fp, ip, lr, pc}
    5be0:	e24cb004 	sub	fp, ip, #4
    5be4:	e24dd00c 	sub	sp, sp, #12
    5be8:	e1a03000 	mov	r3, r0
    5bec:	e50b1014 	str	r1, [fp, #-20]
    5bf0:	e54b3010 	strb	r3, [fp, #-16]
	if (((alarm<'A')||(alarm>'Z')) && (alarm))
    5bf4:	e55b3010 	ldrb	r3, [fp, #-16]
    5bf8:	e3530040 	cmp	r3, #64	; 0x40
    5bfc:	9a000002 	bls	5c0c <jetiSetAlarm+0x34>
    5c00:	e55b3010 	ldrb	r3, [fp, #-16]
    5c04:	e353005a 	cmp	r3, #90	; 0x5a
    5c08:	9a000005 	bls	5c24 <jetiSetAlarm+0x4c>
    5c0c:	e55b3010 	ldrb	r3, [fp, #-16]
    5c10:	e3530000 	cmp	r3, #0
    5c14:	0a000002 	beq	5c24 <jetiSetAlarm+0x4c>
		return JETI_ERROR_ALARM_RANGE;
    5c18:	e3a03050 	mov	r3, #80	; 0x50
    5c1c:	e50b3018 	str	r3, [fp, #-24]
    5c20:	ea00000e 	b	5c60 <jetiSetAlarm+0x88>
	if (alarmType>1)
    5c24:	e51b3014 	ldr	r3, [fp, #-20]
    5c28:	e3530001 	cmp	r3, #1
    5c2c:	9a000002 	bls	5c3c <jetiSetAlarm+0x64>
		return JETI_ERROR_ALARM_TYPE;
    5c30:	e3a03051 	mov	r3, #81	; 0x51
    5c34:	e50b3018 	str	r3, [fp, #-24]
    5c38:	ea000008 	b	5c60 <jetiSetAlarm+0x88>
	jetiAlarm=alarm;
    5c3c:	e59f2030 	ldr	r2, [pc, #48]	; 5c74 <jetiSetAlarm+0x9c>
    5c40:	e55b3010 	ldrb	r3, [fp, #-16]
    5c44:	e5c23000 	strb	r3, [r2]
	jetiAlarmType=alarmType;
    5c48:	e51b3014 	ldr	r3, [fp, #-20]
    5c4c:	e20330ff 	and	r3, r3, #255	; 0xff
    5c50:	e59f2020 	ldr	r2, [pc, #32]	; 5c78 <jetiSetAlarm+0xa0>
    5c54:	e5c23000 	strb	r3, [r2]

	return JETI_NO_ERROR;
    5c58:	e3a03000 	mov	r3, #0
    5c5c:	e50b3018 	str	r3, [fp, #-24]
    5c60:	e51b3018 	ldr	r3, [fp, #-24]

}
    5c64:	e1a00003 	mov	r0, r3
    5c68:	e24bd00c 	sub	sp, fp, #12
    5c6c:	e89d6800 	ldm	sp, {fp, sp, lr}
    5c70:	e12fff1e 	bx	lr
    5c74:	40000e50 	.word	0x40000e50
    5c78:	40000e51 	.word	0x40000e51

00005c7c <jetiSetDeviceName>:

unsigned char jetiSetDeviceName(char * name)
{
    5c7c:	e1a0c00d 	mov	ip, sp
    5c80:	e92dd800 	push	{fp, ip, lr, pc}
    5c84:	e24cb004 	sub	fp, ip, #4
    5c88:	e24dd010 	sub	sp, sp, #16
    5c8c:	e50b001c 	str	r0, [fp, #-28]
	unsigned char nameLength=0;
    5c90:	e3a03000 	mov	r3, #0
    5c94:	e54b3015 	strb	r3, [fp, #-21]
	int i;
	unsigned char error=JETI_NO_ERROR;
    5c98:	e3a03000 	mov	r3, #0
    5c9c:	e54b300d 	strb	r3, [fp, #-13]

	for (i=0;i<11;i++)
    5ca0:	e3a03000 	mov	r3, #0
    5ca4:	e50b3014 	str	r3, [fp, #-20]
    5ca8:	ea000009 	b	5cd4 <jetiSetDeviceName+0x58>
		if (name[i]==0)
    5cac:	e51b3014 	ldr	r3, [fp, #-20]
    5cb0:	e1a02003 	mov	r2, r3
    5cb4:	e51b301c 	ldr	r3, [fp, #-28]
    5cb8:	e0823003 	add	r3, r2, r3
    5cbc:	e5d33000 	ldrb	r3, [r3]
    5cc0:	e3530000 	cmp	r3, #0
    5cc4:	0a000005 	beq	5ce0 <jetiSetDeviceName+0x64>
{
	unsigned char nameLength=0;
	int i;
	unsigned char error=JETI_NO_ERROR;

	for (i=0;i<11;i++)
    5cc8:	e51b3014 	ldr	r3, [fp, #-20]
    5ccc:	e2833001 	add	r3, r3, #1
    5cd0:	e50b3014 	str	r3, [fp, #-20]
    5cd4:	e51b3014 	ldr	r3, [fp, #-20]
    5cd8:	e353000a 	cmp	r3, #10
    5cdc:	dafffff2 	ble	5cac <jetiSetDeviceName+0x30>
		if (name[i]==0)
			break;
	if (i==10)
    5ce0:	e51b3014 	ldr	r3, [fp, #-20]
    5ce4:	e353000a 	cmp	r3, #10
    5ce8:	1a000001 	bne	5cf4 <jetiSetDeviceName+0x78>
		error=JETI_ERROR_STRING_NAME;
    5cec:	e3a03013 	mov	r3, #19
    5cf0:	e54b300d 	strb	r3, [fp, #-13]

	nameLength=i;
    5cf4:	e51b3014 	ldr	r3, [fp, #-20]
    5cf8:	e54b3015 	strb	r3, [fp, #-21]

	memcpy(&jetiName[0],name,nameLength);
    5cfc:	e55b1015 	ldrb	r1, [fp, #-21]
    5d00:	e59f3028 	ldr	r3, [pc, #40]	; 5d30 <jetiSetDeviceName+0xb4>
    5d04:	e51b201c 	ldr	r2, [fp, #-28]
    5d08:	e1a0c001 	mov	ip, r1
    5d0c:	e1a00003 	mov	r0, r3
    5d10:	e1a01002 	mov	r1, r2
    5d14:	e1a0200c 	mov	r2, ip
    5d18:	eb0032d2 	bl	12868 <__memcpy_from_arm>

	return error;
    5d1c:	e55b300d 	ldrb	r3, [fp, #-13]
}
    5d20:	e1a00003 	mov	r0, r3
    5d24:	e24bd00c 	sub	sp, fp, #12
    5d28:	e89d6800 	ldm	sp, {fp, sp, lr}
    5d2c:	e12fff1e 	bx	lr
    5d30:	4000232e 	.word	0x4000232e

00005d34 <jetiActivateValue>:

unsigned char jetiActivateValue(unsigned char id)
{
    5d34:	e1a0c00d 	mov	ip, sp
    5d38:	e92dd800 	push	{fp, ip, lr, pc}
    5d3c:	e24cb004 	sub	fp, ip, #4
    5d40:	e24dd008 	sub	sp, sp, #8
    5d44:	e1a03000 	mov	r3, r0
    5d48:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    5d4c:	e55b3010 	ldrb	r3, [fp, #-16]
    5d50:	e353000e 	cmp	r3, #14
    5d54:	9a000002 	bls	5d64 <jetiActivateValue+0x30>
		return JETI_ERROR_ID_RANGE;
    5d58:	e3a03001 	mov	r3, #1
    5d5c:	e50b3014 	str	r3, [fp, #-20]
    5d60:	ea00000f 	b	5da4 <jetiActivateValue+0x70>
	jetiValues[id].active=id+1;
    5d64:	e55b2010 	ldrb	r2, [fp, #-16]
    5d68:	e55b3010 	ldrb	r3, [fp, #-16]
    5d6c:	e2833001 	add	r3, r3, #1
    5d70:	e20310ff 	and	r1, r3, #255	; 0xff
    5d74:	e59f003c 	ldr	r0, [pc, #60]	; 5db8 <jetiActivateValue+0x84>
    5d78:	e1a03002 	mov	r3, r2
    5d7c:	e1a03103 	lsl	r3, r3, #2
    5d80:	e0833002 	add	r3, r3, r2
    5d84:	e1a03083 	lsl	r3, r3, #1
    5d88:	e0833002 	add	r3, r3, r2
    5d8c:	e1a03083 	lsl	r3, r3, #1
    5d90:	e0832000 	add	r2, r3, r0
    5d94:	e1a03001 	mov	r3, r1
    5d98:	e5c23000 	strb	r3, [r2]

	return JETI_NO_ERROR;
    5d9c:	e3a03000 	mov	r3, #0
    5da0:	e50b3014 	str	r3, [fp, #-20]
    5da4:	e51b3014 	ldr	r3, [fp, #-20]
}
    5da8:	e1a00003 	mov	r0, r3
    5dac:	e24bd00c 	sub	sp, fp, #12
    5db0:	e89d6800 	ldm	sp, {fp, sp, lr}
    5db4:	e12fff1e 	bx	lr
    5db8:	400021e4 	.word	0x400021e4

00005dbc <jetiDeactivateValue>:

unsigned char jetiDeactivateValue(unsigned char id)
{
    5dbc:	e1a0c00d 	mov	ip, sp
    5dc0:	e92dd800 	push	{fp, ip, lr, pc}
    5dc4:	e24cb004 	sub	fp, ip, #4
    5dc8:	e24dd008 	sub	sp, sp, #8
    5dcc:	e1a03000 	mov	r3, r0
    5dd0:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    5dd4:	e55b3010 	ldrb	r3, [fp, #-16]
    5dd8:	e353000e 	cmp	r3, #14
    5ddc:	9a000002 	bls	5dec <jetiDeactivateValue+0x30>
		return JETI_ERROR_ID_RANGE;
    5de0:	e3a03001 	mov	r3, #1
    5de4:	e50b3014 	str	r3, [fp, #-20]
    5de8:	ea00000c 	b	5e20 <jetiDeactivateValue+0x64>
	jetiValues[id].active=0;
    5dec:	e55b2010 	ldrb	r2, [fp, #-16]
    5df0:	e59f103c 	ldr	r1, [pc, #60]	; 5e34 <jetiDeactivateValue+0x78>
    5df4:	e1a03002 	mov	r3, r2
    5df8:	e1a03103 	lsl	r3, r3, #2
    5dfc:	e0833002 	add	r3, r3, r2
    5e00:	e1a03083 	lsl	r3, r3, #1
    5e04:	e0833002 	add	r3, r3, r2
    5e08:	e1a03083 	lsl	r3, r3, #1
    5e0c:	e0832001 	add	r2, r3, r1
    5e10:	e3a03000 	mov	r3, #0
    5e14:	e5c23000 	strb	r3, [r2]

	return JETI_NO_ERROR;
    5e18:	e3a03000 	mov	r3, #0
    5e1c:	e50b3014 	str	r3, [fp, #-20]
    5e20:	e51b3014 	ldr	r3, [fp, #-20]
}
    5e24:	e1a00003 	mov	r0, r3
    5e28:	e24bd00c 	sub	sp, fp, #12
    5e2c:	e89d6800 	ldm	sp, {fp, sp, lr}
    5e30:	e12fff1e 	bx	lr
    5e34:	400021e4 	.word	0x400021e4

00005e38 <jetiSetDecimalPoint>:

unsigned char jetiSetDecimalPoint(unsigned char id, unsigned char decimalPoint)
{
    5e38:	e1a0c00d 	mov	ip, sp
    5e3c:	e92dd800 	push	{fp, ip, lr, pc}
    5e40:	e24cb004 	sub	fp, ip, #4
    5e44:	e24dd00c 	sub	sp, sp, #12
    5e48:	e1a03000 	mov	r3, r0
    5e4c:	e1a02001 	mov	r2, r1
    5e50:	e54b3010 	strb	r3, [fp, #-16]
    5e54:	e1a03002 	mov	r3, r2
    5e58:	e54b3014 	strb	r3, [fp, #-20]
	if (id>14)
    5e5c:	e55b3010 	ldrb	r3, [fp, #-16]
    5e60:	e353000e 	cmp	r3, #14
    5e64:	9a000002 	bls	5e74 <jetiSetDecimalPoint+0x3c>
		return JETI_ERROR_ID_RANGE;
    5e68:	e3a03001 	mov	r3, #1
    5e6c:	e50b3018 	str	r3, [fp, #-24]
    5e70:	ea000014 	b	5ec8 <jetiSetDecimalPoint+0x90>
	if (decimalPoint>3)
    5e74:	e55b3014 	ldrb	r3, [fp, #-20]
    5e78:	e3530003 	cmp	r3, #3
    5e7c:	9a000002 	bls	5e8c <jetiSetDecimalPoint+0x54>
		return JETI_ERROR_DECPOINT_RANGE;
    5e80:	e3a03030 	mov	r3, #48	; 0x30
    5e84:	e50b3018 	str	r3, [fp, #-24]
    5e88:	ea00000e 	b	5ec8 <jetiSetDecimalPoint+0x90>
	jetiValues[id].decPoint=decimalPoint;
    5e8c:	e55b2010 	ldrb	r2, [fp, #-16]
    5e90:	e59f1044 	ldr	r1, [pc, #68]	; 5edc <jetiSetDecimalPoint+0xa4>
    5e94:	e3a00011 	mov	r0, #17
    5e98:	e1a03002 	mov	r3, r2
    5e9c:	e1a03103 	lsl	r3, r3, #2
    5ea0:	e0833002 	add	r3, r3, r2
    5ea4:	e1a03083 	lsl	r3, r3, #1
    5ea8:	e0833002 	add	r3, r3, r2
    5eac:	e1a03083 	lsl	r3, r3, #1
    5eb0:	e0833001 	add	r3, r3, r1
    5eb4:	e0832000 	add	r2, r3, r0
    5eb8:	e55b3014 	ldrb	r3, [fp, #-20]
    5ebc:	e5c23000 	strb	r3, [r2]
	return JETI_NO_ERROR;
    5ec0:	e3a03000 	mov	r3, #0
    5ec4:	e50b3018 	str	r3, [fp, #-24]
    5ec8:	e51b3018 	ldr	r3, [fp, #-24]
}
    5ecc:	e1a00003 	mov	r0, r3
    5ed0:	e24bd00c 	sub	sp, fp, #12
    5ed4:	e89d6800 	ldm	sp, {fp, sp, lr}
    5ed8:	e12fff1e 	bx	lr
    5edc:	400021e4 	.word	0x400021e4

00005ee0 <jetiSetValue30B>:

unsigned char jetiSetValue30B(unsigned char id, int value)
{
    5ee0:	e1a0c00d 	mov	ip, sp
    5ee4:	e92dd800 	push	{fp, ip, lr, pc}
    5ee8:	e24cb004 	sub	fp, ip, #4
    5eec:	e24dd00c 	sub	sp, sp, #12
    5ef0:	e1a03000 	mov	r3, r0
    5ef4:	e50b1014 	str	r1, [fp, #-20]
    5ef8:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    5efc:	e55b3010 	ldrb	r3, [fp, #-16]
    5f00:	e353000e 	cmp	r3, #14
    5f04:	9a000002 	bls	5f14 <jetiSetValue30B+0x34>
		return JETI_ERROR_ID_RANGE;
    5f08:	e3a03001 	mov	r3, #1
    5f0c:	e50b3018 	str	r3, [fp, #-24]
    5f10:	ea000048 	b	6038 <jetiSetValue30B+0x158>

	if ((value>=(1<<30)) || (value<=-(1<<30)))
    5f14:	e51b3014 	ldr	r3, [fp, #-20]
    5f18:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
    5f1c:	ca000002 	bgt	5f2c <jetiSetValue30B+0x4c>
    5f20:	e51b3014 	ldr	r3, [fp, #-20]
    5f24:	e3530103 	cmp	r3, #-1073741824	; 0xc0000000
    5f28:	ca000002 	bgt	5f38 <jetiSetValue30B+0x58>
		return JETI_ERROR_VALUE_RANGE;
    5f2c:	e3a03020 	mov	r3, #32
    5f30:	e50b3018 	str	r3, [fp, #-24]
    5f34:	ea00003f 	b	6038 <jetiSetValue30B+0x158>

	jetiValues[id].value=value;
    5f38:	e55b2010 	ldrb	r2, [fp, #-16]
    5f3c:	e59f1108 	ldr	r1, [pc, #264]	; 604c <jetiSetValue30B+0x16c>
    5f40:	e3a00010 	mov	r0, #16
    5f44:	e1a03002 	mov	r3, r2
    5f48:	e1a03103 	lsl	r3, r3, #2
    5f4c:	e0833002 	add	r3, r3, r2
    5f50:	e1a03083 	lsl	r3, r3, #1
    5f54:	e0833002 	add	r3, r3, r2
    5f58:	e1a03083 	lsl	r3, r3, #1
    5f5c:	e0833001 	add	r3, r3, r1
    5f60:	e0830000 	add	r0, r3, r0
    5f64:	e55b1014 	ldrb	r1, [fp, #-20]
    5f68:	e3a03000 	mov	r3, #0
    5f6c:	e1a02003 	mov	r2, r3
    5f70:	e1a03001 	mov	r3, r1
    5f74:	e1823003 	orr	r3, r2, r3
    5f78:	e5c03002 	strb	r3, [r0, #2]
    5f7c:	e55b1013 	ldrb	r1, [fp, #-19]
    5f80:	e3a03000 	mov	r3, #0
    5f84:	e1a02003 	mov	r2, r3
    5f88:	e1a03001 	mov	r3, r1
    5f8c:	e1823003 	orr	r3, r2, r3
    5f90:	e5c03003 	strb	r3, [r0, #3]
    5f94:	e55b1012 	ldrb	r1, [fp, #-18]
    5f98:	e3a03000 	mov	r3, #0
    5f9c:	e1a02003 	mov	r2, r3
    5fa0:	e1a03001 	mov	r3, r1
    5fa4:	e1823003 	orr	r3, r2, r3
    5fa8:	e5c03004 	strb	r3, [r0, #4]
    5fac:	e55b1011 	ldrb	r1, [fp, #-17]
    5fb0:	e3a03000 	mov	r3, #0
    5fb4:	e1a02003 	mov	r2, r3
    5fb8:	e1a03001 	mov	r3, r1
    5fbc:	e1823003 	orr	r3, r2, r3
    5fc0:	e5c03005 	strb	r3, [r0, #5]
	if (jetiValues[id].varType!=JETI_VART_30B)
    5fc4:	e55b2010 	ldrb	r2, [fp, #-16]
    5fc8:	e59f107c 	ldr	r1, [pc, #124]	; 604c <jetiSetValue30B+0x16c>
    5fcc:	e3a00010 	mov	r0, #16
    5fd0:	e1a03002 	mov	r3, r2
    5fd4:	e1a03103 	lsl	r3, r3, #2
    5fd8:	e0833002 	add	r3, r3, r2
    5fdc:	e1a03083 	lsl	r3, r3, #1
    5fe0:	e0833002 	add	r3, r3, r2
    5fe4:	e1a03083 	lsl	r3, r3, #1
    5fe8:	e0833001 	add	r3, r3, r1
    5fec:	e0833000 	add	r3, r3, r0
    5ff0:	e5d33000 	ldrb	r3, [r3]
    5ff4:	e3530048 	cmp	r3, #72	; 0x48
    5ff8:	0a00000c 	beq	6030 <jetiSetValue30B+0x150>
	{
		jetiValues[id].varType=JETI_VART_30B;
    5ffc:	e55b2010 	ldrb	r2, [fp, #-16]
    6000:	e59f1044 	ldr	r1, [pc, #68]	; 604c <jetiSetValue30B+0x16c>
    6004:	e3a00010 	mov	r0, #16
    6008:	e1a03002 	mov	r3, r2
    600c:	e1a03103 	lsl	r3, r3, #2
    6010:	e0833002 	add	r3, r3, r2
    6014:	e1a03083 	lsl	r3, r3, #1
    6018:	e0833002 	add	r3, r3, r2
    601c:	e1a03083 	lsl	r3, r3, #1
    6020:	e0833001 	add	r3, r3, r1
    6024:	e0832000 	add	r2, r3, r0
    6028:	e3a03048 	mov	r3, #72	; 0x48
    602c:	e5c23000 	strb	r3, [r2]
	}

	return JETI_NO_ERROR;
    6030:	e3a03000 	mov	r3, #0
    6034:	e50b3018 	str	r3, [fp, #-24]
    6038:	e51b3018 	ldr	r3, [fp, #-24]

}
    603c:	e1a00003 	mov	r0, r3
    6040:	e24bd00c 	sub	sp, fp, #12
    6044:	e89d6800 	ldm	sp, {fp, sp, lr}
    6048:	e12fff1e 	bx	lr
    604c:	400021e4 	.word	0x400021e4

00006050 <jetiSetValue22B>:

unsigned char jetiSetValue22B(unsigned char id, int value)
{
    6050:	e1a0c00d 	mov	ip, sp
    6054:	e92dd800 	push	{fp, ip, lr, pc}
    6058:	e24cb004 	sub	fp, ip, #4
    605c:	e24dd00c 	sub	sp, sp, #12
    6060:	e1a03000 	mov	r3, r0
    6064:	e50b1014 	str	r1, [fp, #-20]
    6068:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    606c:	e55b3010 	ldrb	r3, [fp, #-16]
    6070:	e353000e 	cmp	r3, #14
    6074:	9a000002 	bls	6084 <jetiSetValue22B+0x34>
		return JETI_ERROR_ID_RANGE;
    6078:	e3a03001 	mov	r3, #1
    607c:	e50b3018 	str	r3, [fp, #-24]
    6080:	ea00004a 	b	61b0 <jetiSetValue22B+0x160>
	if ((value>=(1<<23)) || (value<=-(1<<23)))
    6084:	e51b2014 	ldr	r2, [fp, #-20]
    6088:	e3a03502 	mov	r3, #8388608	; 0x800000
    608c:	e2433001 	sub	r3, r3, #1
    6090:	e1520003 	cmp	r2, r3
    6094:	ca000002 	bgt	60a4 <jetiSetValue22B+0x54>
    6098:	e51b3014 	ldr	r3, [fp, #-20]
    609c:	e3730502 	cmn	r3, #8388608	; 0x800000
    60a0:	ca000002 	bgt	60b0 <jetiSetValue22B+0x60>
		return JETI_ERROR_VALUE_RANGE;
    60a4:	e3a03020 	mov	r3, #32
    60a8:	e50b3018 	str	r3, [fp, #-24]
    60ac:	ea00003f 	b	61b0 <jetiSetValue22B+0x160>

	jetiValues[id].value=value;
    60b0:	e55b2010 	ldrb	r2, [fp, #-16]
    60b4:	e59f1108 	ldr	r1, [pc, #264]	; 61c4 <jetiSetValue22B+0x174>
    60b8:	e3a00010 	mov	r0, #16
    60bc:	e1a03002 	mov	r3, r2
    60c0:	e1a03103 	lsl	r3, r3, #2
    60c4:	e0833002 	add	r3, r3, r2
    60c8:	e1a03083 	lsl	r3, r3, #1
    60cc:	e0833002 	add	r3, r3, r2
    60d0:	e1a03083 	lsl	r3, r3, #1
    60d4:	e0833001 	add	r3, r3, r1
    60d8:	e0830000 	add	r0, r3, r0
    60dc:	e55b1014 	ldrb	r1, [fp, #-20]
    60e0:	e3a03000 	mov	r3, #0
    60e4:	e1a02003 	mov	r2, r3
    60e8:	e1a03001 	mov	r3, r1
    60ec:	e1823003 	orr	r3, r2, r3
    60f0:	e5c03002 	strb	r3, [r0, #2]
    60f4:	e55b1013 	ldrb	r1, [fp, #-19]
    60f8:	e3a03000 	mov	r3, #0
    60fc:	e1a02003 	mov	r2, r3
    6100:	e1a03001 	mov	r3, r1
    6104:	e1823003 	orr	r3, r2, r3
    6108:	e5c03003 	strb	r3, [r0, #3]
    610c:	e55b1012 	ldrb	r1, [fp, #-18]
    6110:	e3a03000 	mov	r3, #0
    6114:	e1a02003 	mov	r2, r3
    6118:	e1a03001 	mov	r3, r1
    611c:	e1823003 	orr	r3, r2, r3
    6120:	e5c03004 	strb	r3, [r0, #4]
    6124:	e55b1011 	ldrb	r1, [fp, #-17]
    6128:	e3a03000 	mov	r3, #0
    612c:	e1a02003 	mov	r2, r3
    6130:	e1a03001 	mov	r3, r1
    6134:	e1823003 	orr	r3, r2, r3
    6138:	e5c03005 	strb	r3, [r0, #5]
	if (jetiValues[id].varType!=JETI_VART_22B)
    613c:	e55b2010 	ldrb	r2, [fp, #-16]
    6140:	e59f107c 	ldr	r1, [pc, #124]	; 61c4 <jetiSetValue22B+0x174>
    6144:	e3a00010 	mov	r0, #16
    6148:	e1a03002 	mov	r3, r2
    614c:	e1a03103 	lsl	r3, r3, #2
    6150:	e0833002 	add	r3, r3, r2
    6154:	e1a03083 	lsl	r3, r3, #1
    6158:	e0833002 	add	r3, r3, r2
    615c:	e1a03083 	lsl	r3, r3, #1
    6160:	e0833001 	add	r3, r3, r1
    6164:	e0833000 	add	r3, r3, r0
    6168:	e5d33000 	ldrb	r3, [r3]
    616c:	e3530034 	cmp	r3, #52	; 0x34
    6170:	0a00000c 	beq	61a8 <jetiSetValue22B+0x158>
	{
		jetiValues[id].varType=JETI_VART_22B;
    6174:	e55b2010 	ldrb	r2, [fp, #-16]
    6178:	e59f1044 	ldr	r1, [pc, #68]	; 61c4 <jetiSetValue22B+0x174>
    617c:	e3a00010 	mov	r0, #16
    6180:	e1a03002 	mov	r3, r2
    6184:	e1a03103 	lsl	r3, r3, #2
    6188:	e0833002 	add	r3, r3, r2
    618c:	e1a03083 	lsl	r3, r3, #1
    6190:	e0833002 	add	r3, r3, r2
    6194:	e1a03083 	lsl	r3, r3, #1
    6198:	e0833001 	add	r3, r3, r1
    619c:	e0832000 	add	r2, r3, r0
    61a0:	e3a03034 	mov	r3, #52	; 0x34
    61a4:	e5c23000 	strb	r3, [r2]
	}

	return JETI_NO_ERROR;
    61a8:	e3a03000 	mov	r3, #0
    61ac:	e50b3018 	str	r3, [fp, #-24]
    61b0:	e51b3018 	ldr	r3, [fp, #-24]
}
    61b4:	e1a00003 	mov	r0, r3
    61b8:	e24bd00c 	sub	sp, fp, #12
    61bc:	e89d6800 	ldm	sp, {fp, sp, lr}
    61c0:	e12fff1e 	bx	lr
    61c4:	400021e4 	.word	0x400021e4

000061c8 <jetiSetValue6B>:

unsigned char jetiSetValue6B(unsigned char id, int value)
{
    61c8:	e1a0c00d 	mov	ip, sp
    61cc:	e92dd800 	push	{fp, ip, lr, pc}
    61d0:	e24cb004 	sub	fp, ip, #4
    61d4:	e24dd00c 	sub	sp, sp, #12
    61d8:	e1a03000 	mov	r3, r0
    61dc:	e50b1014 	str	r1, [fp, #-20]
    61e0:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    61e4:	e55b3010 	ldrb	r3, [fp, #-16]
    61e8:	e353000e 	cmp	r3, #14
    61ec:	9a000002 	bls	61fc <jetiSetValue6B+0x34>
		return JETI_ERROR_ID_RANGE;
    61f0:	e3a03001 	mov	r3, #1
    61f4:	e50b3018 	str	r3, [fp, #-24]
    61f8:	ea000048 	b	6320 <jetiSetValue6B+0x158>

	if ((value>=(1<<7)) || (value<=-(1<<7)))
    61fc:	e51b3014 	ldr	r3, [fp, #-20]
    6200:	e353007f 	cmp	r3, #127	; 0x7f
    6204:	ca000002 	bgt	6214 <jetiSetValue6B+0x4c>
    6208:	e51b3014 	ldr	r3, [fp, #-20]
    620c:	e3730080 	cmn	r3, #128	; 0x80
    6210:	ca000002 	bgt	6220 <jetiSetValue6B+0x58>
		return JETI_ERROR_VALUE_RANGE;
    6214:	e3a03020 	mov	r3, #32
    6218:	e50b3018 	str	r3, [fp, #-24]
    621c:	ea00003f 	b	6320 <jetiSetValue6B+0x158>

	jetiValues[id].value=value;
    6220:	e55b2010 	ldrb	r2, [fp, #-16]
    6224:	e59f1108 	ldr	r1, [pc, #264]	; 6334 <jetiSetValue6B+0x16c>
    6228:	e3a00010 	mov	r0, #16
    622c:	e1a03002 	mov	r3, r2
    6230:	e1a03103 	lsl	r3, r3, #2
    6234:	e0833002 	add	r3, r3, r2
    6238:	e1a03083 	lsl	r3, r3, #1
    623c:	e0833002 	add	r3, r3, r2
    6240:	e1a03083 	lsl	r3, r3, #1
    6244:	e0833001 	add	r3, r3, r1
    6248:	e0830000 	add	r0, r3, r0
    624c:	e55b1014 	ldrb	r1, [fp, #-20]
    6250:	e3a03000 	mov	r3, #0
    6254:	e1a02003 	mov	r2, r3
    6258:	e1a03001 	mov	r3, r1
    625c:	e1823003 	orr	r3, r2, r3
    6260:	e5c03002 	strb	r3, [r0, #2]
    6264:	e55b1013 	ldrb	r1, [fp, #-19]
    6268:	e3a03000 	mov	r3, #0
    626c:	e1a02003 	mov	r2, r3
    6270:	e1a03001 	mov	r3, r1
    6274:	e1823003 	orr	r3, r2, r3
    6278:	e5c03003 	strb	r3, [r0, #3]
    627c:	e55b1012 	ldrb	r1, [fp, #-18]
    6280:	e3a03000 	mov	r3, #0
    6284:	e1a02003 	mov	r2, r3
    6288:	e1a03001 	mov	r3, r1
    628c:	e1823003 	orr	r3, r2, r3
    6290:	e5c03004 	strb	r3, [r0, #4]
    6294:	e55b1011 	ldrb	r1, [fp, #-17]
    6298:	e3a03000 	mov	r3, #0
    629c:	e1a02003 	mov	r2, r3
    62a0:	e1a03001 	mov	r3, r1
    62a4:	e1823003 	orr	r3, r2, r3
    62a8:	e5c03005 	strb	r3, [r0, #5]
	if (jetiValues[id].varType!=JETI_VART_6B)
    62ac:	e55b2010 	ldrb	r2, [fp, #-16]
    62b0:	e59f107c 	ldr	r1, [pc, #124]	; 6334 <jetiSetValue6B+0x16c>
    62b4:	e3a00010 	mov	r0, #16
    62b8:	e1a03002 	mov	r3, r2
    62bc:	e1a03103 	lsl	r3, r3, #2
    62c0:	e0833002 	add	r3, r3, r2
    62c4:	e1a03083 	lsl	r3, r3, #1
    62c8:	e0833002 	add	r3, r3, r2
    62cc:	e1a03083 	lsl	r3, r3, #1
    62d0:	e0833001 	add	r3, r3, r1
    62d4:	e0833000 	add	r3, r3, r0
    62d8:	e5d33000 	ldrb	r3, [r3]
    62dc:	e3530010 	cmp	r3, #16
    62e0:	0a00000c 	beq	6318 <jetiSetValue6B+0x150>
	{
		jetiValues[id].varType=JETI_VART_6B;
    62e4:	e55b2010 	ldrb	r2, [fp, #-16]
    62e8:	e59f1044 	ldr	r1, [pc, #68]	; 6334 <jetiSetValue6B+0x16c>
    62ec:	e3a00010 	mov	r0, #16
    62f0:	e1a03002 	mov	r3, r2
    62f4:	e1a03103 	lsl	r3, r3, #2
    62f8:	e0833002 	add	r3, r3, r2
    62fc:	e1a03083 	lsl	r3, r3, #1
    6300:	e0833002 	add	r3, r3, r2
    6304:	e1a03083 	lsl	r3, r3, #1
    6308:	e0833001 	add	r3, r3, r1
    630c:	e0832000 	add	r2, r3, r0
    6310:	e3a03010 	mov	r3, #16
    6314:	e5c23000 	strb	r3, [r2]
	}

	return JETI_NO_ERROR;
    6318:	e3a03000 	mov	r3, #0
    631c:	e50b3018 	str	r3, [fp, #-24]
    6320:	e51b3018 	ldr	r3, [fp, #-24]
}
    6324:	e1a00003 	mov	r0, r3
    6328:	e24bd00c 	sub	sp, fp, #12
    632c:	e89d6800 	ldm	sp, {fp, sp, lr}
    6330:	e12fff1e 	bx	lr
    6334:	400021e4 	.word	0x400021e4

00006338 <jetiSetValue14B>:

unsigned char jetiSetValue14B(unsigned char id, int value)
{
    6338:	e1a0c00d 	mov	ip, sp
    633c:	e92dd800 	push	{fp, ip, lr, pc}
    6340:	e24cb004 	sub	fp, ip, #4
    6344:	e24dd00c 	sub	sp, sp, #12
    6348:	e1a03000 	mov	r3, r0
    634c:	e50b1014 	str	r1, [fp, #-20]
    6350:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    6354:	e55b3010 	ldrb	r3, [fp, #-16]
    6358:	e353000e 	cmp	r3, #14
    635c:	9a000002 	bls	636c <jetiSetValue14B+0x34>
		return JETI_ERROR_ID_RANGE;
    6360:	e3a03001 	mov	r3, #1
    6364:	e50b3018 	str	r3, [fp, #-24]
    6368:	ea00004a 	b	6498 <jetiSetValue14B+0x160>

	if ((value>=(1<<15)) || (value<=-(1<<15)))
    636c:	e51b2014 	ldr	r2, [fp, #-20]
    6370:	e3a03c7f 	mov	r3, #32512	; 0x7f00
    6374:	e28330ff 	add	r3, r3, #255	; 0xff
    6378:	e1520003 	cmp	r2, r3
    637c:	ca000002 	bgt	638c <jetiSetValue14B+0x54>
    6380:	e51b3014 	ldr	r3, [fp, #-20]
    6384:	e3730902 	cmn	r3, #32768	; 0x8000
    6388:	ca000002 	bgt	6398 <jetiSetValue14B+0x60>
		return JETI_ERROR_VALUE_RANGE;
    638c:	e3a03020 	mov	r3, #32
    6390:	e50b3018 	str	r3, [fp, #-24]
    6394:	ea00003f 	b	6498 <jetiSetValue14B+0x160>

	jetiValues[id].value=value;
    6398:	e55b2010 	ldrb	r2, [fp, #-16]
    639c:	e59f1108 	ldr	r1, [pc, #264]	; 64ac <jetiSetValue14B+0x174>
    63a0:	e3a00010 	mov	r0, #16
    63a4:	e1a03002 	mov	r3, r2
    63a8:	e1a03103 	lsl	r3, r3, #2
    63ac:	e0833002 	add	r3, r3, r2
    63b0:	e1a03083 	lsl	r3, r3, #1
    63b4:	e0833002 	add	r3, r3, r2
    63b8:	e1a03083 	lsl	r3, r3, #1
    63bc:	e0833001 	add	r3, r3, r1
    63c0:	e0830000 	add	r0, r3, r0
    63c4:	e55b1014 	ldrb	r1, [fp, #-20]
    63c8:	e3a03000 	mov	r3, #0
    63cc:	e1a02003 	mov	r2, r3
    63d0:	e1a03001 	mov	r3, r1
    63d4:	e1823003 	orr	r3, r2, r3
    63d8:	e5c03002 	strb	r3, [r0, #2]
    63dc:	e55b1013 	ldrb	r1, [fp, #-19]
    63e0:	e3a03000 	mov	r3, #0
    63e4:	e1a02003 	mov	r2, r3
    63e8:	e1a03001 	mov	r3, r1
    63ec:	e1823003 	orr	r3, r2, r3
    63f0:	e5c03003 	strb	r3, [r0, #3]
    63f4:	e55b1012 	ldrb	r1, [fp, #-18]
    63f8:	e3a03000 	mov	r3, #0
    63fc:	e1a02003 	mov	r2, r3
    6400:	e1a03001 	mov	r3, r1
    6404:	e1823003 	orr	r3, r2, r3
    6408:	e5c03004 	strb	r3, [r0, #4]
    640c:	e55b1011 	ldrb	r1, [fp, #-17]
    6410:	e3a03000 	mov	r3, #0
    6414:	e1a02003 	mov	r2, r3
    6418:	e1a03001 	mov	r3, r1
    641c:	e1823003 	orr	r3, r2, r3
    6420:	e5c03005 	strb	r3, [r0, #5]
	if (jetiValues[id].varType!=JETI_VART_14B)
    6424:	e55b2010 	ldrb	r2, [fp, #-16]
    6428:	e59f107c 	ldr	r1, [pc, #124]	; 64ac <jetiSetValue14B+0x174>
    642c:	e3a00010 	mov	r0, #16
    6430:	e1a03002 	mov	r3, r2
    6434:	e1a03103 	lsl	r3, r3, #2
    6438:	e0833002 	add	r3, r3, r2
    643c:	e1a03083 	lsl	r3, r3, #1
    6440:	e0833002 	add	r3, r3, r2
    6444:	e1a03083 	lsl	r3, r3, #1
    6448:	e0833001 	add	r3, r3, r1
    644c:	e0833000 	add	r3, r3, r0
    6450:	e5d33000 	ldrb	r3, [r3]
    6454:	e3530021 	cmp	r3, #33	; 0x21
    6458:	0a00000c 	beq	6490 <jetiSetValue14B+0x158>
	{
		jetiValues[id].varType=JETI_VART_14B;
    645c:	e55b2010 	ldrb	r2, [fp, #-16]
    6460:	e59f1044 	ldr	r1, [pc, #68]	; 64ac <jetiSetValue14B+0x174>
    6464:	e3a00010 	mov	r0, #16
    6468:	e1a03002 	mov	r3, r2
    646c:	e1a03103 	lsl	r3, r3, #2
    6470:	e0833002 	add	r3, r3, r2
    6474:	e1a03083 	lsl	r3, r3, #1
    6478:	e0833002 	add	r3, r3, r2
    647c:	e1a03083 	lsl	r3, r3, #1
    6480:	e0833001 	add	r3, r3, r1
    6484:	e0832000 	add	r2, r3, r0
    6488:	e3a03021 	mov	r3, #33	; 0x21
    648c:	e5c23000 	strb	r3, [r2]
	}

	return JETI_NO_ERROR;
    6490:	e3a03000 	mov	r3, #0
    6494:	e50b3018 	str	r3, [fp, #-24]
    6498:	e51b3018 	ldr	r3, [fp, #-24]

}
    649c:	e1a00003 	mov	r0, r3
    64a0:	e24bd00c 	sub	sp, fp, #12
    64a4:	e89d6800 	ldm	sp, {fp, sp, lr}
    64a8:	e12fff1e 	bx	lr
    64ac:	400021e4 	.word	0x400021e4

000064b0 <jetiSetValueTime>:

unsigned char jetiSetValueTime(unsigned char id, unsigned char hours, unsigned char minutes, unsigned char seconds)
{
    64b0:	e1a0c00d 	mov	ip, sp
    64b4:	e92dd800 	push	{fp, ip, lr, pc}
    64b8:	e24cb004 	sub	fp, ip, #4
    64bc:	e24dd018 	sub	sp, sp, #24
    64c0:	e1a0c003 	mov	ip, r3
    64c4:	e1a03000 	mov	r3, r0
    64c8:	e54b3014 	strb	r3, [fp, #-20]
    64cc:	e1a03001 	mov	r3, r1
    64d0:	e54b3018 	strb	r3, [fp, #-24]
    64d4:	e1a03002 	mov	r3, r2
    64d8:	e54b301c 	strb	r3, [fp, #-28]
    64dc:	e1a0300c 	mov	r3, ip
    64e0:	e54b3020 	strb	r3, [fp, #-32]
	unsigned int value;
	if (id>14)
    64e4:	e55b3014 	ldrb	r3, [fp, #-20]
    64e8:	e353000e 	cmp	r3, #14
    64ec:	9a000002 	bls	64fc <jetiSetValueTime+0x4c>
		return JETI_ERROR_ID_RANGE;
    64f0:	e3a03001 	mov	r3, #1
    64f4:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    64f8:	ea000058 	b	6660 <jetiSetValueTime+0x1b0>
	if (seconds>59)
    64fc:	e55b3020 	ldrb	r3, [fp, #-32]
    6500:	e353003b 	cmp	r3, #59	; 0x3b
    6504:	9a000002 	bls	6514 <jetiSetValueTime+0x64>
		return JETI_ERROR_SECOND;
    6508:	e3a03046 	mov	r3, #70	; 0x46
    650c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6510:	ea000052 	b	6660 <jetiSetValueTime+0x1b0>
	if (minutes>59)
    6514:	e55b301c 	ldrb	r3, [fp, #-28]
    6518:	e353003b 	cmp	r3, #59	; 0x3b
    651c:	9a000002 	bls	652c <jetiSetValueTime+0x7c>
		return JETI_ERROR_MINUTE;
    6520:	e3a03045 	mov	r3, #69	; 0x45
    6524:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6528:	ea00004c 	b	6660 <jetiSetValueTime+0x1b0>
	if (hours>23)
    652c:	e55b3018 	ldrb	r3, [fp, #-24]
    6530:	e3530017 	cmp	r3, #23
    6534:	9a000002 	bls	6544 <jetiSetValueTime+0x94>
		return JETI_ERROR_HOUR;
    6538:	e3a03044 	mov	r3, #68	; 0x44
    653c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6540:	ea000046 	b	6660 <jetiSetValueTime+0x1b0>

	value=seconds;
    6544:	e55b3020 	ldrb	r3, [fp, #-32]
    6548:	e50b3010 	str	r3, [fp, #-16]
	value|=minutes<<8;
    654c:	e55b301c 	ldrb	r3, [fp, #-28]
    6550:	e1a03403 	lsl	r3, r3, #8
    6554:	e1a02003 	mov	r2, r3
    6558:	e51b3010 	ldr	r3, [fp, #-16]
    655c:	e1833002 	orr	r3, r3, r2
    6560:	e50b3010 	str	r3, [fp, #-16]
	value|=hours<<16;
    6564:	e55b3018 	ldrb	r3, [fp, #-24]
    6568:	e1a03803 	lsl	r3, r3, #16
    656c:	e1a02003 	mov	r2, r3
    6570:	e51b3010 	ldr	r3, [fp, #-16]
    6574:	e1833002 	orr	r3, r3, r2
    6578:	e50b3010 	str	r3, [fp, #-16]

	jetiValues[id].value=value;
    657c:	e55b2014 	ldrb	r2, [fp, #-20]
    6580:	e51b0010 	ldr	r0, [fp, #-16]
    6584:	e59f10e8 	ldr	r1, [pc, #232]	; 6674 <jetiSetValueTime+0x1c4>
    6588:	e3a0c010 	mov	ip, #16
    658c:	e1a03002 	mov	r3, r2
    6590:	e1a03103 	lsl	r3, r3, #2
    6594:	e0833002 	add	r3, r3, r2
    6598:	e1a03083 	lsl	r3, r3, #1
    659c:	e0833002 	add	r3, r3, r2
    65a0:	e1a03083 	lsl	r3, r3, #1
    65a4:	e0833001 	add	r3, r3, r1
    65a8:	e083c00c 	add	ip, r3, ip
    65ac:	e20010ff 	and	r1, r0, #255	; 0xff
    65b0:	e3a03000 	mov	r3, #0
    65b4:	e1a02003 	mov	r2, r3
    65b8:	e1a03001 	mov	r3, r1
    65bc:	e1823003 	orr	r3, r2, r3
    65c0:	e5cc3002 	strb	r3, [ip, #2]
    65c4:	e1a03420 	lsr	r3, r0, #8
    65c8:	e20310ff 	and	r1, r3, #255	; 0xff
    65cc:	e3a03000 	mov	r3, #0
    65d0:	e1a02003 	mov	r2, r3
    65d4:	e1a03001 	mov	r3, r1
    65d8:	e1823003 	orr	r3, r2, r3
    65dc:	e5cc3003 	strb	r3, [ip, #3]
    65e0:	e1a03820 	lsr	r3, r0, #16
    65e4:	e20310ff 	and	r1, r3, #255	; 0xff
    65e8:	e3a03000 	mov	r3, #0
    65ec:	e1a02003 	mov	r2, r3
    65f0:	e1a03001 	mov	r3, r1
    65f4:	e1823003 	orr	r3, r2, r3
    65f8:	e5cc3004 	strb	r3, [ip, #4]
    65fc:	e1a01c20 	lsr	r1, r0, #24
    6600:	e3a03000 	mov	r3, #0
    6604:	e1a02003 	mov	r2, r3
    6608:	e1a03001 	mov	r3, r1
    660c:	e1823003 	orr	r3, r2, r3
    6610:	e5cc3005 	strb	r3, [ip, #5]
	jetiSetDecimalPoint(id,0); //time
    6614:	e55b3014 	ldrb	r3, [fp, #-20]
    6618:	e1a00003 	mov	r0, r3
    661c:	e3a01000 	mov	r1, #0
    6620:	ebfffe04 	bl	5e38 <jetiSetDecimalPoint>
	jetiValues[id].varType=JETI_VART_DATETIME;
    6624:	e55b2014 	ldrb	r2, [fp, #-20]
    6628:	e59f1044 	ldr	r1, [pc, #68]	; 6674 <jetiSetValueTime+0x1c4>
    662c:	e3a00010 	mov	r0, #16
    6630:	e1a03002 	mov	r3, r2
    6634:	e1a03103 	lsl	r3, r3, #2
    6638:	e0833002 	add	r3, r3, r2
    663c:	e1a03083 	lsl	r3, r3, #1
    6640:	e0833002 	add	r3, r3, r2
    6644:	e1a03083 	lsl	r3, r3, #1
    6648:	e0833001 	add	r3, r3, r1
    664c:	e0832000 	add	r2, r3, r0
    6650:	e3a03035 	mov	r3, #53	; 0x35
    6654:	e5c23000 	strb	r3, [r2]

	return JETI_NO_ERROR;
    6658:	e3a03000 	mov	r3, #0
    665c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6660:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
}
    6664:	e1a00003 	mov	r0, r3
    6668:	e24bd00c 	sub	sp, fp, #12
    666c:	e89d6800 	ldm	sp, {fp, sp, lr}
    6670:	e12fff1e 	bx	lr
    6674:	400021e4 	.word	0x400021e4

00006678 <jetiSetValueDate>:

unsigned char jetiSetValueDate(unsigned char id, unsigned char day, unsigned char month, unsigned short year)
{
    6678:	e1a0c00d 	mov	ip, sp
    667c:	e92dd800 	push	{fp, ip, lr, pc}
    6680:	e24cb004 	sub	fp, ip, #4
    6684:	e24dd018 	sub	sp, sp, #24
    6688:	e1a0c003 	mov	ip, r3
    668c:	e1a03000 	mov	r3, r0
    6690:	e54b3014 	strb	r3, [fp, #-20]
    6694:	e1a03001 	mov	r3, r1
    6698:	e54b3018 	strb	r3, [fp, #-24]
    669c:	e1a03002 	mov	r3, r2
    66a0:	e54b301c 	strb	r3, [fp, #-28]
    66a4:	e14bc2b0 	strh	ip, [fp, #-32]	; 0xffffffe0
	unsigned int value;
	if (id>14)
    66a8:	e55b3014 	ldrb	r3, [fp, #-20]
    66ac:	e353000e 	cmp	r3, #14
    66b0:	9a000002 	bls	66c0 <jetiSetValueDate+0x48>
		return JETI_ERROR_ID_RANGE;
    66b4:	e3a03001 	mov	r3, #1
    66b8:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    66bc:	ea000064 	b	6854 <jetiSetValueDate+0x1dc>

	if (year>2000)
    66c0:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
    66c4:	e3530e7d 	cmp	r3, #2000	; 0x7d0
    66c8:	9a000002 	bls	66d8 <jetiSetValueDate+0x60>
		year-=2000;
    66cc:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
    66d0:	e2433e7d 	sub	r3, r3, #2000	; 0x7d0
    66d4:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
	if (year>100)
    66d8:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
    66dc:	e3530064 	cmp	r3, #100	; 0x64
    66e0:	9a000002 	bls	66f0 <jetiSetValueDate+0x78>
		return JETI_ERROR_YEAR;
    66e4:	e3a03041 	mov	r3, #65	; 0x41
    66e8:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    66ec:	ea000058 	b	6854 <jetiSetValueDate+0x1dc>
	if ((month<1)||(month>12))
    66f0:	e55b301c 	ldrb	r3, [fp, #-28]
    66f4:	e3530000 	cmp	r3, #0
    66f8:	0a000002 	beq	6708 <jetiSetValueDate+0x90>
    66fc:	e55b301c 	ldrb	r3, [fp, #-28]
    6700:	e353000c 	cmp	r3, #12
    6704:	9a000002 	bls	6714 <jetiSetValueDate+0x9c>
		return JETI_ERROR_MONTH;
    6708:	e3a03042 	mov	r3, #66	; 0x42
    670c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6710:	ea00004f 	b	6854 <jetiSetValueDate+0x1dc>
	if ((day<1)||(day>31))
    6714:	e55b3018 	ldrb	r3, [fp, #-24]
    6718:	e3530000 	cmp	r3, #0
    671c:	0a000002 	beq	672c <jetiSetValueDate+0xb4>
    6720:	e55b3018 	ldrb	r3, [fp, #-24]
    6724:	e353001f 	cmp	r3, #31
    6728:	9a000002 	bls	6738 <jetiSetValueDate+0xc0>
		return JETI_ERROR_DAY;
    672c:	e3a03043 	mov	r3, #67	; 0x43
    6730:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6734:	ea000046 	b	6854 <jetiSetValueDate+0x1dc>

	value=year;
    6738:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
    673c:	e50b3010 	str	r3, [fp, #-16]
	value|=month<<8;
    6740:	e55b301c 	ldrb	r3, [fp, #-28]
    6744:	e1a03403 	lsl	r3, r3, #8
    6748:	e1a02003 	mov	r2, r3
    674c:	e51b3010 	ldr	r3, [fp, #-16]
    6750:	e1833002 	orr	r3, r3, r2
    6754:	e50b3010 	str	r3, [fp, #-16]
	value|=day<<16;
    6758:	e55b3018 	ldrb	r3, [fp, #-24]
    675c:	e1a03803 	lsl	r3, r3, #16
    6760:	e1a02003 	mov	r2, r3
    6764:	e51b3010 	ldr	r3, [fp, #-16]
    6768:	e1833002 	orr	r3, r3, r2
    676c:	e50b3010 	str	r3, [fp, #-16]

	jetiValues[id].value=value;
    6770:	e55b2014 	ldrb	r2, [fp, #-20]
    6774:	e51b0010 	ldr	r0, [fp, #-16]
    6778:	e59f10e8 	ldr	r1, [pc, #232]	; 6868 <jetiSetValueDate+0x1f0>
    677c:	e3a0c010 	mov	ip, #16
    6780:	e1a03002 	mov	r3, r2
    6784:	e1a03103 	lsl	r3, r3, #2
    6788:	e0833002 	add	r3, r3, r2
    678c:	e1a03083 	lsl	r3, r3, #1
    6790:	e0833002 	add	r3, r3, r2
    6794:	e1a03083 	lsl	r3, r3, #1
    6798:	e0833001 	add	r3, r3, r1
    679c:	e083c00c 	add	ip, r3, ip
    67a0:	e20010ff 	and	r1, r0, #255	; 0xff
    67a4:	e3a03000 	mov	r3, #0
    67a8:	e1a02003 	mov	r2, r3
    67ac:	e1a03001 	mov	r3, r1
    67b0:	e1823003 	orr	r3, r2, r3
    67b4:	e5cc3002 	strb	r3, [ip, #2]
    67b8:	e1a03420 	lsr	r3, r0, #8
    67bc:	e20310ff 	and	r1, r3, #255	; 0xff
    67c0:	e3a03000 	mov	r3, #0
    67c4:	e1a02003 	mov	r2, r3
    67c8:	e1a03001 	mov	r3, r1
    67cc:	e1823003 	orr	r3, r2, r3
    67d0:	e5cc3003 	strb	r3, [ip, #3]
    67d4:	e1a03820 	lsr	r3, r0, #16
    67d8:	e20310ff 	and	r1, r3, #255	; 0xff
    67dc:	e3a03000 	mov	r3, #0
    67e0:	e1a02003 	mov	r2, r3
    67e4:	e1a03001 	mov	r3, r1
    67e8:	e1823003 	orr	r3, r2, r3
    67ec:	e5cc3004 	strb	r3, [ip, #4]
    67f0:	e1a01c20 	lsr	r1, r0, #24
    67f4:	e3a03000 	mov	r3, #0
    67f8:	e1a02003 	mov	r2, r3
    67fc:	e1a03001 	mov	r3, r1
    6800:	e1823003 	orr	r3, r2, r3
    6804:	e5cc3005 	strb	r3, [ip, #5]
	jetiSetDecimalPoint(id,1); //time
    6808:	e55b3014 	ldrb	r3, [fp, #-20]
    680c:	e1a00003 	mov	r0, r3
    6810:	e3a01001 	mov	r1, #1
    6814:	ebfffd87 	bl	5e38 <jetiSetDecimalPoint>
	jetiValues[id].varType=JETI_VART_DATETIME;
    6818:	e55b2014 	ldrb	r2, [fp, #-20]
    681c:	e59f1044 	ldr	r1, [pc, #68]	; 6868 <jetiSetValueDate+0x1f0>
    6820:	e3a00010 	mov	r0, #16
    6824:	e1a03002 	mov	r3, r2
    6828:	e1a03103 	lsl	r3, r3, #2
    682c:	e0833002 	add	r3, r3, r2
    6830:	e1a03083 	lsl	r3, r3, #1
    6834:	e0833002 	add	r3, r3, r2
    6838:	e1a03083 	lsl	r3, r3, #1
    683c:	e0833001 	add	r3, r3, r1
    6840:	e0832000 	add	r2, r3, r0
    6844:	e3a03035 	mov	r3, #53	; 0x35
    6848:	e5c23000 	strb	r3, [r2]

	return JETI_NO_ERROR;
    684c:	e3a03000 	mov	r3, #0
    6850:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6854:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
}
    6858:	e1a00003 	mov	r0, r3
    685c:	e24bd00c 	sub	sp, fp, #12
    6860:	e89d6800 	ldm	sp, {fp, sp, lr}
    6864:	e12fff1e 	bx	lr
    6868:	400021e4 	.word	0x400021e4

0000686c <jetiSetTextDisplay>:

unsigned char jetiSetTextDisplay(char * text)
{
    686c:	e1a0c00d 	mov	ip, sp
    6870:	e92dd800 	push	{fp, ip, lr, pc}
    6874:	e24cb004 	sub	fp, ip, #4
    6878:	e24dd00c 	sub	sp, sp, #12
    687c:	e50b0018 	str	r0, [fp, #-24]
	unsigned char textLength=0;
    6880:	e3a03000 	mov	r3, #0
    6884:	e54b3013 	strb	r3, [fp, #-19]
	unsigned char error=JETI_NO_ERROR;
    6888:	e3a03000 	mov	r3, #0
    688c:	e54b3012 	strb	r3, [fp, #-18]
	unsigned char textChanged=0;
    6890:	e3a03000 	mov	r3, #0
    6894:	e54b3011 	strb	r3, [fp, #-17]
	int i;

	for (i=0;i<33;i++)
    6898:	e3a03000 	mov	r3, #0
    689c:	e50b3010 	str	r3, [fp, #-16]
    68a0:	ea000015 	b	68fc <jetiSetTextDisplay+0x90>
	{
		if (text[i]!=jetiDisplayText[i])
    68a4:	e51b3010 	ldr	r3, [fp, #-16]
    68a8:	e1a02003 	mov	r2, r3
    68ac:	e51b3018 	ldr	r3, [fp, #-24]
    68b0:	e0823003 	add	r3, r2, r3
    68b4:	e5d31000 	ldrb	r1, [r3]
    68b8:	e51b2010 	ldr	r2, [fp, #-16]
    68bc:	e59f30ec 	ldr	r3, [pc, #236]	; 69b0 <jetiSetTextDisplay+0x144>
    68c0:	e7d33002 	ldrb	r3, [r3, r2]
    68c4:	e1510003 	cmp	r1, r3
    68c8:	0a000001 	beq	68d4 <jetiSetTextDisplay+0x68>
			textChanged=1;
    68cc:	e3a03001 	mov	r3, #1
    68d0:	e54b3011 	strb	r3, [fp, #-17]
		if (text[i]==0)
    68d4:	e51b3010 	ldr	r3, [fp, #-16]
    68d8:	e1a02003 	mov	r2, r3
    68dc:	e51b3018 	ldr	r3, [fp, #-24]
    68e0:	e0823003 	add	r3, r2, r3
    68e4:	e5d33000 	ldrb	r3, [r3]
    68e8:	e3530000 	cmp	r3, #0
    68ec:	0a000005 	beq	6908 <jetiSetTextDisplay+0x9c>
	unsigned char textLength=0;
	unsigned char error=JETI_NO_ERROR;
	unsigned char textChanged=0;
	int i;

	for (i=0;i<33;i++)
    68f0:	e51b3010 	ldr	r3, [fp, #-16]
    68f4:	e2833001 	add	r3, r3, #1
    68f8:	e50b3010 	str	r3, [fp, #-16]
    68fc:	e51b3010 	ldr	r3, [fp, #-16]
    6900:	e3530020 	cmp	r3, #32
    6904:	daffffe6 	ble	68a4 <jetiSetTextDisplay+0x38>
		if (text[i]!=jetiDisplayText[i])
			textChanged=1;
		if (text[i]==0)
			break;
	}
	if (i==32)
    6908:	e51b3010 	ldr	r3, [fp, #-16]
    690c:	e3530020 	cmp	r3, #32
    6910:	1a000001 	bne	691c <jetiSetTextDisplay+0xb0>
		error=JETI_ERROR_STRING_TEXT;
    6914:	e3a03016 	mov	r3, #22
    6918:	e54b3012 	strb	r3, [fp, #-18]

	textLength=i;
    691c:	e51b3010 	ldr	r3, [fp, #-16]
    6920:	e54b3013 	strb	r3, [fp, #-19]
	memcpy(&jetiDisplayText[0],text,textLength);
    6924:	e55b1013 	ldrb	r1, [fp, #-19]
    6928:	e59f3080 	ldr	r3, [pc, #128]	; 69b0 <jetiSetTextDisplay+0x144>
    692c:	e51b2018 	ldr	r2, [fp, #-24]
    6930:	e1a0c001 	mov	ip, r1
    6934:	e1a00003 	mov	r0, r3
    6938:	e1a01002 	mov	r1, r2
    693c:	e1a0200c 	mov	r2, ip
    6940:	eb002fc8 	bl	12868 <__memcpy_from_arm>
	if (textLength<32)
    6944:	e55b3013 	ldrb	r3, [fp, #-19]
    6948:	e353001f 	cmp	r3, #31
    694c:	8a00000c 	bhi	6984 <jetiSetTextDisplay+0x118>
		for (i=textLength;i<32;i++)
    6950:	e55b3013 	ldrb	r3, [fp, #-19]
    6954:	e50b3010 	str	r3, [fp, #-16]
    6958:	ea000006 	b	6978 <jetiSetTextDisplay+0x10c>
			jetiDisplayText[i]=0;
    695c:	e51b1010 	ldr	r1, [fp, #-16]
    6960:	e59f2048 	ldr	r2, [pc, #72]	; 69b0 <jetiSetTextDisplay+0x144>
    6964:	e3a03000 	mov	r3, #0
    6968:	e7c23001 	strb	r3, [r2, r1]
		error=JETI_ERROR_STRING_TEXT;

	textLength=i;
	memcpy(&jetiDisplayText[0],text,textLength);
	if (textLength<32)
		for (i=textLength;i<32;i++)
    696c:	e51b3010 	ldr	r3, [fp, #-16]
    6970:	e2833001 	add	r3, r3, #1
    6974:	e50b3010 	str	r3, [fp, #-16]
    6978:	e51b3010 	ldr	r3, [fp, #-16]
    697c:	e353001f 	cmp	r3, #31
    6980:	dafffff5 	ble	695c <jetiSetTextDisplay+0xf0>
			jetiDisplayText[i]=0;

	if (textChanged)
    6984:	e55b3011 	ldrb	r3, [fp, #-17]
    6988:	e3530000 	cmp	r3, #0
    698c:	0a000002 	beq	699c <jetiSetTextDisplay+0x130>
		jetiTriggerTextSync=1;
    6990:	e59f301c 	ldr	r3, [pc, #28]	; 69b4 <jetiSetTextDisplay+0x148>
    6994:	e3a02001 	mov	r2, #1
    6998:	e5c32000 	strb	r2, [r3]
	return error;
    699c:	e55b3012 	ldrb	r3, [fp, #-18]
}
    69a0:	e1a00003 	mov	r0, r3
    69a4:	e24bd00c 	sub	sp, fp, #12
    69a8:	e89d6800 	ldm	sp, {fp, sp, lr}
    69ac:	e12fff1e 	bx	lr
    69b0:	400021c4 	.word	0x400021c4
    69b4:	40000e52 	.word	0x40000e52

000069b8 <jetiInitValue>:

unsigned char jetiInitValue(unsigned char id, char * description, char * unit)
{
    69b8:	e1a0c00d 	mov	ip, sp
    69bc:	e92dd800 	push	{fp, ip, lr, pc}
    69c0:	e24cb004 	sub	fp, ip, #4
    69c4:	e24dd018 	sub	sp, sp, #24
    69c8:	e1a03000 	mov	r3, r0
    69cc:	e50b101c 	str	r1, [fp, #-28]
    69d0:	e50b2020 	str	r2, [fp, #-32]
    69d4:	e54b3018 	strb	r3, [fp, #-24]
	unsigned char descLength=0;
    69d8:	e3a03000 	mov	r3, #0
    69dc:	e54b3013 	strb	r3, [fp, #-19]
	unsigned char unitLength=0;
    69e0:	e3a03000 	mov	r3, #0
    69e4:	e54b3012 	strb	r3, [fp, #-18]
	unsigned char error=JETI_NO_ERROR;
    69e8:	e3a03000 	mov	r3, #0
    69ec:	e54b3011 	strb	r3, [fp, #-17]

	int i;

	if (id>14)
    69f0:	e55b3018 	ldrb	r3, [fp, #-24]
    69f4:	e353000e 	cmp	r3, #14
    69f8:	9a000002 	bls	6a08 <jetiInitValue+0x50>
		return JETI_ERROR_ID_RANGE;
    69fc:	e3a03001 	mov	r3, #1
    6a00:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6a04:	ea000068 	b	6bac <jetiInitValue+0x1f4>

	for (i=0;i<11;i++)
    6a08:	e3a03000 	mov	r3, #0
    6a0c:	e50b3010 	str	r3, [fp, #-16]
    6a10:	ea000009 	b	6a3c <jetiInitValue+0x84>
		if (description[i]==0)
    6a14:	e51b3010 	ldr	r3, [fp, #-16]
    6a18:	e1a02003 	mov	r2, r3
    6a1c:	e51b301c 	ldr	r3, [fp, #-28]
    6a20:	e0823003 	add	r3, r2, r3
    6a24:	e5d33000 	ldrb	r3, [r3]
    6a28:	e3530000 	cmp	r3, #0
    6a2c:	0a000005 	beq	6a48 <jetiInitValue+0x90>
	int i;

	if (id>14)
		return JETI_ERROR_ID_RANGE;

	for (i=0;i<11;i++)
    6a30:	e51b3010 	ldr	r3, [fp, #-16]
    6a34:	e2833001 	add	r3, r3, #1
    6a38:	e50b3010 	str	r3, [fp, #-16]
    6a3c:	e51b3010 	ldr	r3, [fp, #-16]
    6a40:	e353000a 	cmp	r3, #10
    6a44:	dafffff2 	ble	6a14 <jetiInitValue+0x5c>
		if (description[i]==0)
			break;
	if (i==10)
    6a48:	e51b3010 	ldr	r3, [fp, #-16]
    6a4c:	e353000a 	cmp	r3, #10
    6a50:	1a000001 	bne	6a5c <jetiInitValue+0xa4>
		error=JETI_ERROR_STRING_DESC;
    6a54:	e3a03014 	mov	r3, #20
    6a58:	e54b3011 	strb	r3, [fp, #-17]
	descLength=i;
    6a5c:	e51b3010 	ldr	r3, [fp, #-16]
    6a60:	e54b3013 	strb	r3, [fp, #-19]

	for (i=0;i<6;i++)
    6a64:	e3a03000 	mov	r3, #0
    6a68:	e50b3010 	str	r3, [fp, #-16]
    6a6c:	ea000009 	b	6a98 <jetiInitValue+0xe0>
			if (unit[i]==0)
    6a70:	e51b3010 	ldr	r3, [fp, #-16]
    6a74:	e1a02003 	mov	r2, r3
    6a78:	e51b3020 	ldr	r3, [fp, #-32]
    6a7c:	e0823003 	add	r3, r2, r3
    6a80:	e5d33000 	ldrb	r3, [r3]
    6a84:	e3530000 	cmp	r3, #0
    6a88:	0a000005 	beq	6aa4 <jetiInitValue+0xec>
			break;
	if (i==10)
		error=JETI_ERROR_STRING_DESC;
	descLength=i;

	for (i=0;i<6;i++)
    6a8c:	e51b3010 	ldr	r3, [fp, #-16]
    6a90:	e2833001 	add	r3, r3, #1
    6a94:	e50b3010 	str	r3, [fp, #-16]
    6a98:	e51b3010 	ldr	r3, [fp, #-16]
    6a9c:	e3530005 	cmp	r3, #5
    6aa0:	dafffff2 	ble	6a70 <jetiInitValue+0xb8>
			if (unit[i]==0)
				break;
	if (i==5)
    6aa4:	e51b3010 	ldr	r3, [fp, #-16]
    6aa8:	e3530005 	cmp	r3, #5
    6aac:	1a000001 	bne	6ab8 <jetiInitValue+0x100>
			error=JETI_ERROR_STRING_UNIT;
    6ab0:	e3a03015 	mov	r3, #21
    6ab4:	e54b3011 	strb	r3, [fp, #-17]

	unitLength=i;
    6ab8:	e51b3010 	ldr	r3, [fp, #-16]
    6abc:	e54b3012 	strb	r3, [fp, #-18]

	jetiValues[id].active=id+1;
    6ac0:	e55b2018 	ldrb	r2, [fp, #-24]
    6ac4:	e55b3018 	ldrb	r3, [fp, #-24]
    6ac8:	e2833001 	add	r3, r3, #1
    6acc:	e20310ff 	and	r1, r3, #255	; 0xff
    6ad0:	e59f00e8 	ldr	r0, [pc, #232]	; 6bc0 <jetiInitValue+0x208>
    6ad4:	e1a03002 	mov	r3, r2
    6ad8:	e1a03103 	lsl	r3, r3, #2
    6adc:	e0833002 	add	r3, r3, r2
    6ae0:	e1a03083 	lsl	r3, r3, #1
    6ae4:	e0833002 	add	r3, r3, r2
    6ae8:	e1a03083 	lsl	r3, r3, #1
    6aec:	e0832000 	add	r2, r3, r0
    6af0:	e1a03001 	mov	r3, r1
    6af4:	e5c23000 	strb	r3, [r2]
	memcpy(&jetiValues[id].name[0],description,descLength);
    6af8:	e55b2018 	ldrb	r2, [fp, #-24]
    6afc:	e1a03002 	mov	r3, r2
    6b00:	e1a03103 	lsl	r3, r3, #2
    6b04:	e0833002 	add	r3, r3, r2
    6b08:	e1a03083 	lsl	r3, r3, #1
    6b0c:	e0833002 	add	r3, r3, r2
    6b10:	e1a02083 	lsl	r2, r3, #1
    6b14:	e59f30a4 	ldr	r3, [pc, #164]	; 6bc0 <jetiInitValue+0x208>
    6b18:	e0823003 	add	r3, r2, r3
    6b1c:	e2832001 	add	r2, r3, #1
    6b20:	e55b1013 	ldrb	r1, [fp, #-19]
    6b24:	e51b301c 	ldr	r3, [fp, #-28]
    6b28:	e1a0c001 	mov	ip, r1
    6b2c:	e1a00002 	mov	r0, r2
    6b30:	e1a01003 	mov	r1, r3
    6b34:	e1a0200c 	mov	r2, ip
    6b38:	eb002f4a 	bl	12868 <__memcpy_from_arm>
	memcpy(&jetiValues[id].unit[0],unit,unitLength);
    6b3c:	e55b2018 	ldrb	r2, [fp, #-24]
    6b40:	e1a03002 	mov	r3, r2
    6b44:	e1a03103 	lsl	r3, r3, #2
    6b48:	e0833002 	add	r3, r3, r2
    6b4c:	e1a03083 	lsl	r3, r3, #1
    6b50:	e0833002 	add	r3, r3, r2
    6b54:	e1a03083 	lsl	r3, r3, #1
    6b58:	e2832008 	add	r2, r3, #8
    6b5c:	e59f305c 	ldr	r3, [pc, #92]	; 6bc0 <jetiInitValue+0x208>
    6b60:	e0823003 	add	r3, r2, r3
    6b64:	e2832003 	add	r2, r3, #3
    6b68:	e55b1012 	ldrb	r1, [fp, #-18]
    6b6c:	e51b3020 	ldr	r3, [fp, #-32]
    6b70:	e1a0c001 	mov	ip, r1
    6b74:	e1a00002 	mov	r0, r2
    6b78:	e1a01003 	mov	r1, r3
    6b7c:	e1a0200c 	mov	r2, ip
    6b80:	eb002f38 	bl	12868 <__memcpy_from_arm>
	jetiSetValue6B(id,0);
    6b84:	e55b3018 	ldrb	r3, [fp, #-24]
    6b88:	e1a00003 	mov	r0, r3
    6b8c:	e3a01000 	mov	r1, #0
    6b90:	ebfffd8c 	bl	61c8 <jetiSetValue6B>
	jetiSetDecimalPoint(id,0);
    6b94:	e55b3018 	ldrb	r3, [fp, #-24]
    6b98:	e1a00003 	mov	r0, r3
    6b9c:	e3a01000 	mov	r1, #0
    6ba0:	ebfffca4 	bl	5e38 <jetiSetDecimalPoint>

	return error;
    6ba4:	e55b3011 	ldrb	r3, [fp, #-17]
    6ba8:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6bac:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24

}
    6bb0:	e1a00003 	mov	r0, r3
    6bb4:	e24bd00c 	sub	sp, fp, #12
    6bb8:	e89d6800 	ldm	sp, {fp, sp, lr}
    6bbc:	e12fff1e 	bx	lr
    6bc0:	400021e4 	.word	0x400021e4

00006bc4 <ee_erase>:
/*                                                                     	*/
/* revision history:                                                   	*/
/* - Rev. 1.1 adds interrupt disable feature.							*/
/*                                                                     	*/
/************************************************************************/
void ee_erase(unsigned int command_ee,unsigned int result_ee[]){
    6bc4:	e1a0c00d 	mov	ip, sp
    6bc8:	e92dd800 	push	{fp, ip, lr, pc}
    6bcc:	e24cb004 	sub	fp, ip, #4
    6bd0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    6bd4:	e50b0034 	str	r0, [fp, #-52]	; 0x34
    6bd8:	e50b1038 	str	r1, [fp, #-56]	; 0x38
	unsigned int command_iap[5];
	unsigned int result_iap[3];
	unsigned long int enabled_interrupts;

	enabled_interrupts = VICIntEnable;  //disable all interrupts
    6bdc:	e3a03000 	mov	r3, #0
    6be0:	e2433eff 	sub	r3, r3, #4080	; 0xff0
    6be4:	e5933000 	ldr	r3, [r3]
    6be8:	e50b3010 	str	r3, [fp, #-16]
	VICIntEnClr        = enabled_interrupts;
    6bec:	e3e03efe 	mvn	r3, #4064	; 0xfe0
    6bf0:	e243300b 	sub	r3, r3, #11
    6bf4:	e51b2010 	ldr	r2, [fp, #-16]
    6bf8:	e5832000 	str	r2, [r3]

	command_iap[0]=50;					//prepare sectors from EE_SEC_L to EE_SEC_H for erase
    6bfc:	e3a03032 	mov	r3, #50	; 0x32
    6c00:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	command_iap[1]=EE_SEC_L;
    6c04:	e3a0300e 	mov	r3, #14
    6c08:	e50b3020 	str	r3, [fp, #-32]
	command_iap[2]=EE_SEC_H;
    6c0c:	e3a0300e 	mov	r3, #14
    6c10:	e50b301c 	str	r3, [fp, #-28]
	iap_entry=(IAP) IAP_LOCATION;
    6c14:	e59f20e0 	ldr	r2, [pc, #224]	; 6cfc <ee_erase+0x138>
    6c18:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    6c1c:	e5823000 	str	r3, [r2]
	iap_entry(command_iap,result_iap);
    6c20:	e59f30d4 	ldr	r3, [pc, #212]	; 6cfc <ee_erase+0x138>
    6c24:	e593c000 	ldr	ip, [r3]
    6c28:	e24b3024 	sub	r3, fp, #36	; 0x24
    6c2c:	e24b2030 	sub	r2, fp, #48	; 0x30
    6c30:	e1a00003 	mov	r0, r3
    6c34:	e1a01002 	mov	r1, r2
    6c38:	e1a0e00f 	mov	lr, pc
    6c3c:	e12fff1c 	bx	ip

	command_iap[0]=52;					//erase sectors from EE_SEC_L to EE_SEC_H
    6c40:	e3a03034 	mov	r3, #52	; 0x34
    6c44:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	command_iap[1]=EE_SEC_L;
    6c48:	e3a0300e 	mov	r3, #14
    6c4c:	e50b3020 	str	r3, [fp, #-32]
	command_iap[2]=EE_SEC_H;
    6c50:	e3a0300e 	mov	r3, #14
    6c54:	e50b301c 	str	r3, [fp, #-28]
	command_iap[3]=EE_CCLK;
    6c58:	e3a03cea 	mov	r3, #59904	; 0xea00
    6c5c:	e2833060 	add	r3, r3, #96	; 0x60
    6c60:	e50b3018 	str	r3, [fp, #-24]
	iap_entry=(IAP) IAP_LOCATION;
    6c64:	e59f2090 	ldr	r2, [pc, #144]	; 6cfc <ee_erase+0x138>
    6c68:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    6c6c:	e5823000 	str	r3, [r2]
	iap_entry(command_iap,result_iap);
    6c70:	e59f3084 	ldr	r3, [pc, #132]	; 6cfc <ee_erase+0x138>
    6c74:	e593c000 	ldr	ip, [r3]
    6c78:	e24b3024 	sub	r3, fp, #36	; 0x24
    6c7c:	e24b2030 	sub	r2, fp, #48	; 0x30
    6c80:	e1a00003 	mov	r0, r3
    6c84:	e1a01002 	mov	r1, r2
    6c88:	e1a0e00f 	mov	lr, pc
    6c8c:	e12fff1c 	bx	ip

	command_iap[0]=53;					//blankcheck sectors from EE_SEC_L to EE_SEC_H
    6c90:	e3a03035 	mov	r3, #53	; 0x35
    6c94:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	command_iap[1]=EE_SEC_L;
    6c98:	e3a0300e 	mov	r3, #14
    6c9c:	e50b3020 	str	r3, [fp, #-32]
	command_iap[2]=EE_SEC_H;
    6ca0:	e3a0300e 	mov	r3, #14
    6ca4:	e50b301c 	str	r3, [fp, #-28]
	iap_entry=(IAP) IAP_LOCATION;
    6ca8:	e59f204c 	ldr	r2, [pc, #76]	; 6cfc <ee_erase+0x138>
    6cac:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    6cb0:	e5823000 	str	r3, [r2]
	iap_entry(command_iap,result_iap);
    6cb4:	e59f3040 	ldr	r3, [pc, #64]	; 6cfc <ee_erase+0x138>
    6cb8:	e593c000 	ldr	ip, [r3]
    6cbc:	e24b3024 	sub	r3, fp, #36	; 0x24
    6cc0:	e24b2030 	sub	r2, fp, #48	; 0x30
    6cc4:	e1a00003 	mov	r0, r3
    6cc8:	e1a01002 	mov	r1, r2
    6ccc:	e1a0e00f 	mov	lr, pc
    6cd0:	e12fff1c 	bx	ip

	VICIntEnable = enabled_interrupts;  //restore interrupt enable register
    6cd4:	e3a03000 	mov	r3, #0
    6cd8:	e2433eff 	sub	r3, r3, #4080	; 0xff0
    6cdc:	e51b2010 	ldr	r2, [fp, #-16]
    6ce0:	e5832000 	str	r2, [r3]

	result_ee[0]=result_iap[0];
    6ce4:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    6ce8:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    6cec:	e5832000 	str	r2, [r3]
	return;
}
    6cf0:	e24bd00c 	sub	sp, fp, #12
    6cf4:	e89d6800 	ldm	sp, {fp, sp, lr}
    6cf8:	e12fff1e 	bx	lr
    6cfc:	40002338 	.word	0x40002338

00006d00 <ee_write>:
/*   the EEPROM. 1.0 was reporting missmatch even when there were no	*/
/*   problems at all.													*/
/*   Rev. 1.1 adds interrupt disable feature.							*/
/*                                                                     	*/
/************************************************************************/
void ee_write(unsigned int command_ee,unsigned int result_ee[]){
    6d00:	e1a0c00d 	mov	ip, sp
    6d04:	e92dd800 	push	{fp, ip, lr, pc}
    6d08:	e24cb004 	sub	fp, ip, #4
    6d0c:	e24ddf4f 	sub	sp, sp, #316	; 0x13c
    6d10:	e50b0144 	str	r0, [fp, #-324]	; 0x144
    6d14:	e50b1148 	str	r1, [fp, #-328]	; 0x148
	unsigned int *source, *destination, i;
	unsigned char ee_buffer[EE_BUFFER_SIZE];
	unsigned int command_iap[5], result_iap[3];
	unsigned long int enabled_interrupts;

	location = ee_locate();
    6d18:	eb0000dc 	bl	7090 <ee_locate>
    6d1c:	e1a03000 	mov	r3, r0
    6d20:	e50b3020 	str	r3, [fp, #-32]
	if (location == -1){
    6d24:	e51b3020 	ldr	r3, [fp, #-32]
    6d28:	e3730001 	cmn	r3, #1
    6d2c:	1a000004 	bne	6d44 <ee_write+0x44>
		result_ee[0]=NO_SPACE_IN_EEPROM;
    6d30:	e51b2148 	ldr	r2, [fp, #-328]	; 0x148
    6d34:	e3a03f7d 	mov	r3, #500	; 0x1f4
    6d38:	e2833001 	add	r3, r3, #1
    6d3c:	e5823000 	str	r3, [r2]
    6d40:	ea000073 	b	6f14 <ee_write+0x214>
	}
	else{
		for (i=0;i<EE_BUFFER_SIZE;i++) ee_buffer[i]=0xFF;
    6d44:	e3a03000 	mov	r3, #0
    6d48:	e50b3014 	str	r3, [fp, #-20]
    6d4c:	ea00000a 	b	6d7c <ee_write+0x7c>
    6d50:	e51b2014 	ldr	r2, [fp, #-20]
    6d54:	e3a034bb 	mov	r3, #-1157627904	; 0xbb000000
    6d58:	e1a03b43 	asr	r3, r3, #22
    6d5c:	e24b100c 	sub	r1, fp, #12
    6d60:	e0812002 	add	r2, r1, r2
    6d64:	e0822003 	add	r2, r2, r3
    6d68:	e3e03000 	mvn	r3, #0
    6d6c:	e5c23000 	strb	r3, [r2]
    6d70:	e51b3014 	ldr	r3, [fp, #-20]
    6d74:	e2833001 	add	r3, r3, #1
    6d78:	e50b3014 	str	r3, [fp, #-20]
    6d7c:	e51b3014 	ldr	r3, [fp, #-20]
    6d80:	e35300ff 	cmp	r3, #255	; 0xff
    6d84:	9afffff1 	bls	6d50 <ee_write+0x50>

		destination = (unsigned int *) ((&ee_buffer[0])+((unsigned int)location & EE_BUFFER_MASK));
    6d88:	e24b3e12 	sub	r3, fp, #288	; 0x120
    6d8c:	e50b3018 	str	r3, [fp, #-24]
		source = (unsigned int *) command_ee;
    6d90:	e51b3144 	ldr	r3, [fp, #-324]	; 0x144
    6d94:	e50b301c 	str	r3, [fp, #-28]
		for(i=0;i!=EE_REC_SIZE/4;i++) *(destination+i) = *(source+i);
    6d98:	e3a03000 	mov	r3, #0
    6d9c:	e50b3014 	str	r3, [fp, #-20]
    6da0:	ea00000e 	b	6de0 <ee_write+0xe0>
    6da4:	e51b3014 	ldr	r3, [fp, #-20]
    6da8:	e1a03103 	lsl	r3, r3, #2
    6dac:	e1a02003 	mov	r2, r3
    6db0:	e51b3018 	ldr	r3, [fp, #-24]
    6db4:	e0821003 	add	r1, r2, r3
    6db8:	e51b3014 	ldr	r3, [fp, #-20]
    6dbc:	e1a03103 	lsl	r3, r3, #2
    6dc0:	e1a02003 	mov	r2, r3
    6dc4:	e51b301c 	ldr	r3, [fp, #-28]
    6dc8:	e0823003 	add	r3, r2, r3
    6dcc:	e5933000 	ldr	r3, [r3]
    6dd0:	e5813000 	str	r3, [r1]
    6dd4:	e51b3014 	ldr	r3, [fp, #-20]
    6dd8:	e2833001 	add	r3, r3, #1
    6ddc:	e50b3014 	str	r3, [fp, #-20]
    6de0:	e51b3014 	ldr	r3, [fp, #-20]
    6de4:	e3530040 	cmp	r3, #64	; 0x40
    6de8:	1affffed 	bne	6da4 <ee_write+0xa4>

		enabled_interrupts = VICIntEnable;  //disable all interrupts
    6dec:	e3a03000 	mov	r3, #0
    6df0:	e2433eff 	sub	r3, r3, #4080	; 0xff0
    6df4:	e5933000 	ldr	r3, [r3]
    6df8:	e50b3010 	str	r3, [fp, #-16]
		VICIntEnClr        = enabled_interrupts;
    6dfc:	e3e03efe 	mvn	r3, #4064	; 0xfe0
    6e00:	e243300b 	sub	r3, r3, #11
    6e04:	e51b2010 	ldr	r2, [fp, #-16]
    6e08:	e5832000 	str	r2, [r3]

		command_iap[0]=50;					//prepare sectors from EE_SEC_L to EE_SEC_H for erase
    6e0c:	e3a03032 	mov	r3, #50	; 0x32
    6e10:	e50b3134 	str	r3, [fp, #-308]	; 0x134
		command_iap[1]=EE_SEC_L;
    6e14:	e3a0300e 	mov	r3, #14
    6e18:	e50b3130 	str	r3, [fp, #-304]	; 0x130
		command_iap[2]=EE_SEC_H;
    6e1c:	e3a0300e 	mov	r3, #14
    6e20:	e50b312c 	str	r3, [fp, #-300]	; 0x12c
		iap_entry=(IAP) IAP_LOCATION;
    6e24:	e59f20f4 	ldr	r2, [pc, #244]	; 6f20 <ee_write+0x220>
    6e28:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    6e2c:	e5823000 	str	r3, [r2]
		iap_entry(command_iap,result_iap);
    6e30:	e59f30e8 	ldr	r3, [pc, #232]	; 6f20 <ee_write+0x220>
    6e34:	e593c000 	ldr	ip, [r3]
    6e38:	e24b3f4d 	sub	r3, fp, #308	; 0x134
    6e3c:	e24b2d05 	sub	r2, fp, #320	; 0x140
    6e40:	e1a00003 	mov	r0, r3
    6e44:	e1a01002 	mov	r1, r2
    6e48:	e1a0e00f 	mov	lr, pc
    6e4c:	e12fff1c 	bx	ip

		command_iap[0]=51;					//copy RAM to flash/eeprom
    6e50:	e3a03033 	mov	r3, #51	; 0x33
    6e54:	e50b3134 	str	r3, [fp, #-308]	; 0x134
		command_iap[1]=(unsigned int) (location & EE_START_MASK);
    6e58:	e51b3020 	ldr	r3, [fp, #-32]
    6e5c:	e3c330ff 	bic	r3, r3, #255	; 0xff
    6e60:	e50b3130 	str	r3, [fp, #-304]	; 0x130
		command_iap[2]=(unsigned int) (&ee_buffer[0]);
    6e64:	e24b3e12 	sub	r3, fp, #288	; 0x120
    6e68:	e50b312c 	str	r3, [fp, #-300]	; 0x12c
		command_iap[3]=EE_BUFFER_SIZE;
    6e6c:	e3a03c01 	mov	r3, #256	; 0x100
    6e70:	e50b3128 	str	r3, [fp, #-296]	; 0x128
		command_iap[4]=EE_CCLK;
    6e74:	e3a03cea 	mov	r3, #59904	; 0xea00
    6e78:	e2833060 	add	r3, r3, #96	; 0x60
    6e7c:	e50b3124 	str	r3, [fp, #-292]	; 0x124
		iap_entry=(IAP) IAP_LOCATION;
    6e80:	e59f2098 	ldr	r2, [pc, #152]	; 6f20 <ee_write+0x220>
    6e84:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    6e88:	e5823000 	str	r3, [r2]
		iap_entry(command_iap,result_iap);
    6e8c:	e59f308c 	ldr	r3, [pc, #140]	; 6f20 <ee_write+0x220>
    6e90:	e593c000 	ldr	ip, [r3]
    6e94:	e24b3f4d 	sub	r3, fp, #308	; 0x134
    6e98:	e24b2d05 	sub	r2, fp, #320	; 0x140
    6e9c:	e1a00003 	mov	r0, r3
    6ea0:	e1a01002 	mov	r1, r2
    6ea4:	e1a0e00f 	mov	lr, pc
    6ea8:	e12fff1c 	bx	ip

		command_iap[0]=56;					//compare RAM and flash/eeprom
    6eac:	e3a03038 	mov	r3, #56	; 0x38
    6eb0:	e50b3134 	str	r3, [fp, #-308]	; 0x134
		command_iap[1]=(unsigned int) source;
    6eb4:	e51b301c 	ldr	r3, [fp, #-28]
    6eb8:	e50b3130 	str	r3, [fp, #-304]	; 0x130
		command_iap[2]=(unsigned int) location;
    6ebc:	e51b3020 	ldr	r3, [fp, #-32]
    6ec0:	e50b312c 	str	r3, [fp, #-300]	; 0x12c
		command_iap[3]=EE_REC_SIZE;
    6ec4:	e3a03c01 	mov	r3, #256	; 0x100
    6ec8:	e50b3128 	str	r3, [fp, #-296]	; 0x128
		iap_entry=(IAP) IAP_LOCATION;
    6ecc:	e59f204c 	ldr	r2, [pc, #76]	; 6f20 <ee_write+0x220>
    6ed0:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    6ed4:	e5823000 	str	r3, [r2]
		iap_entry(command_iap,result_iap);
    6ed8:	e59f3040 	ldr	r3, [pc, #64]	; 6f20 <ee_write+0x220>
    6edc:	e593c000 	ldr	ip, [r3]
    6ee0:	e24b3f4d 	sub	r3, fp, #308	; 0x134
    6ee4:	e24b2d05 	sub	r2, fp, #320	; 0x140
    6ee8:	e1a00003 	mov	r0, r3
    6eec:	e1a01002 	mov	r1, r2
    6ef0:	e1a0e00f 	mov	lr, pc
    6ef4:	e12fff1c 	bx	ip

		VICIntEnable = enabled_interrupts;  //restore interrupt enable register
    6ef8:	e3a03000 	mov	r3, #0
    6efc:	e2433eff 	sub	r3, r3, #4080	; 0xff0
    6f00:	e51b2010 	ldr	r2, [fp, #-16]
    6f04:	e5832000 	str	r2, [r3]

		result_ee[0]=result_iap[0];
    6f08:	e51b2140 	ldr	r2, [fp, #-320]	; 0x140
    6f0c:	e51b3148 	ldr	r3, [fp, #-328]	; 0x148
    6f10:	e5832000 	str	r2, [r3]
	}
	return;
}
    6f14:	e24bd00c 	sub	sp, fp, #12
    6f18:	e89d6800 	ldm	sp, {fp, sp, lr}
    6f1c:	e12fff1e 	bx	lr
    6f20:	40002338 	.word	0x40002338

00006f24 <ee_read>:
/* revision history:                                                   	*/
/* - Rev. 1.0 had problems with accessing the last record in a fully	*/
/*   occupied EEPROM. Rev. 1.1 fixes this.								*/
/*                                                                     	*/
/************************************************************************/
void ee_read(unsigned int command_ee,unsigned int result_ee[]){
    6f24:	e1a0c00d 	mov	ip, sp
    6f28:	e92dd800 	push	{fp, ip, lr, pc}
    6f2c:	e24cb004 	sub	fp, ip, #4
    6f30:	e24dd00c 	sub	sp, sp, #12
    6f34:	e50b0014 	str	r0, [fp, #-20]
    6f38:	e50b1018 	str	r1, [fp, #-24]
	int location;

	location = ee_locate();
    6f3c:	eb000053 	bl	7090 <ee_locate>
    6f40:	e1a03000 	mov	r3, r0
    6f44:	e50b3010 	str	r3, [fp, #-16]
	if (location == EE_ADDR_L){
    6f48:	e51b3010 	ldr	r3, [fp, #-16]
    6f4c:	e353090e 	cmp	r3, #229376	; 0x38000
    6f50:	1a000003 	bne	6f64 <ee_read+0x40>
		result_ee[0]=NO_RECORDS_AVAILABLE;
    6f54:	e51b2018 	ldr	r2, [fp, #-24]
    6f58:	e3a03f7d 	mov	r3, #500	; 0x1f4
    6f5c:	e5823000 	str	r3, [r2]
    6f60:	ea000010 	b	6fa8 <ee_read+0x84>
	}
	else{
		result_ee[0]=0;
    6f64:	e51b3018 	ldr	r3, [fp, #-24]
    6f68:	e3a02000 	mov	r2, #0
    6f6c:	e5832000 	str	r2, [r3]
		if (location == -1)
    6f70:	e51b3010 	ldr	r3, [fp, #-16]
    6f74:	e3730001 	cmn	r3, #1
    6f78:	1a000005 	bne	6f94 <ee_read+0x70>
			result_ee[1]=(unsigned int)(EE_ADDR_H+1 - EE_REC_SIZE);
    6f7c:	e51b3018 	ldr	r3, [fp, #-24]
    6f80:	e2832004 	add	r2, r3, #4
    6f84:	e3a03bff 	mov	r3, #261120	; 0x3fc00
    6f88:	e2833c03 	add	r3, r3, #768	; 0x300
    6f8c:	e5823000 	str	r3, [r2]
    6f90:	ea000004 	b	6fa8 <ee_read+0x84>
		else
			result_ee[1]=(unsigned int)(location - EE_REC_SIZE);
    6f94:	e51b3018 	ldr	r3, [fp, #-24]
    6f98:	e2832004 	add	r2, r3, #4
    6f9c:	e51b3010 	ldr	r3, [fp, #-16]
    6fa0:	e2433c01 	sub	r3, r3, #256	; 0x100
    6fa4:	e5823000 	str	r3, [r2]
	}
	return;
}
    6fa8:	e24bd00c 	sub	sp, fp, #12
    6fac:	e89d6800 	ldm	sp, {fp, sp, lr}
    6fb0:	e12fff1e 	bx	lr

00006fb4 <ee_readn>:
/* description:															*/
/*  This function returns in result_ee[1] an address of an EEPROM 		*/
/*  record index specified in command_ee. Index can not be less than 0.	*/
/*                                                                     	*/
/************************************************************************/
void ee_readn(unsigned int command_ee,unsigned int result_ee[]){
    6fb4:	e1a0c00d 	mov	ip, sp
    6fb8:	e92dd800 	push	{fp, ip, lr, pc}
    6fbc:	e24cb004 	sub	fp, ip, #4
    6fc0:	e24dd008 	sub	sp, sp, #8
    6fc4:	e50b0010 	str	r0, [fp, #-16]
    6fc8:	e50b1014 	str	r1, [fp, #-20]
	if(command_ee>((EE_ADDR_H+1-EE_ADDR_L)/EE_REC_SIZE)){
    6fcc:	e51b3010 	ldr	r3, [fp, #-16]
    6fd0:	e3530080 	cmp	r3, #128	; 0x80
    6fd4:	9a000004 	bls	6fec <ee_readn+0x38>
		result_ee[0]=INDEX_OUT_OF_RANGE;}
    6fd8:	e51b2014 	ldr	r2, [fp, #-20]
    6fdc:	e3a03f7d 	mov	r3, #500	; 0x1f4
    6fe0:	e2833002 	add	r3, r3, #2
    6fe4:	e5823000 	str	r3, [r2]
    6fe8:	ea000008 	b	7010 <ee_readn+0x5c>
	else{
		result_ee[0]=0;
    6fec:	e51b2014 	ldr	r2, [fp, #-20]
    6ff0:	e3a03000 	mov	r3, #0
    6ff4:	e5823000 	str	r3, [r2]
		result_ee[1]=(unsigned int)(EE_ADDR_L+EE_REC_SIZE*command_ee);
    6ff8:	e51b3014 	ldr	r3, [fp, #-20]
    6ffc:	e2832004 	add	r2, r3, #4
    7000:	e51b3010 	ldr	r3, [fp, #-16]
    7004:	e1a03403 	lsl	r3, r3, #8
    7008:	e283390e 	add	r3, r3, #229376	; 0x38000
    700c:	e5823000 	str	r3, [r2]
	}
	return;
}
    7010:	e24bd00c 	sub	sp, fp, #12
    7014:	e89d6800 	ldm	sp, {fp, sp, lr}
    7018:	e12fff1e 	bx	lr

0000701c <ee_count>:
/* revision history:                                                   	*/
/* - Initial release (1.0) was not supplying the right feedback in case */
/*   of counting records in a full EEPROM. Rev. 1.1 fixes this.         */
/*                                                                     	*/
/************************************************************************/
void ee_count(unsigned int command_ee,unsigned int result_ee[]){
    701c:	e1a0c00d 	mov	ip, sp
    7020:	e92dd800 	push	{fp, ip, lr, pc}
    7024:	e24cb004 	sub	fp, ip, #4
    7028:	e24dd00c 	sub	sp, sp, #12
    702c:	e50b0014 	str	r0, [fp, #-20]
    7030:	e50b1018 	str	r1, [fp, #-24]
	int location;
	result_ee[0]=0;
    7034:	e51b2018 	ldr	r2, [fp, #-24]
    7038:	e3a03000 	mov	r3, #0
    703c:	e5823000 	str	r3, [r2]
	location = ee_locate();
    7040:	eb000012 	bl	7090 <ee_locate>
    7044:	e1a03000 	mov	r3, r0
    7048:	e50b3010 	str	r3, [fp, #-16]
	if (location == -1) location = EE_ADDR_H+1;
    704c:	e51b3010 	ldr	r3, [fp, #-16]
    7050:	e3730001 	cmn	r3, #1
    7054:	1a000001 	bne	7060 <ee_count+0x44>
    7058:	e3a03701 	mov	r3, #262144	; 0x40000
    705c:	e50b3010 	str	r3, [fp, #-16]
	result_ee[1]=(unsigned int)((location-EE_ADDR_L)/EE_REC_SIZE);
    7060:	e51b3018 	ldr	r3, [fp, #-24]
    7064:	e2831004 	add	r1, r3, #4
    7068:	e51b3010 	ldr	r3, [fp, #-16]
    706c:	e243390e 	sub	r3, r3, #229376	; 0x38000
    7070:	e28320ff 	add	r2, r3, #255	; 0xff
    7074:	e3530000 	cmp	r3, #0
    7078:	b1a03002 	movlt	r3, r2
    707c:	e1a03443 	asr	r3, r3, #8
    7080:	e5813000 	str	r3, [r1]
	return;
}
    7084:	e24bd00c 	sub	sp, fp, #12
    7088:	e89d6800 	ldm	sp, {fp, sp, lr}
    708c:	e12fff1e 	bx	lr

00007090 <ee_locate>:
/* revision history:                                                   	*/
/* - Rev. 1.1 fixes a bug related to identifying an unused byte of 		*/
/*   EEPROM in an EEPROM with size not equal to EE_REC_SIZE * 2^k (k>=0)*/
/*                                                                     	*/
/************************************************************************/
int ee_locate(void){
    7090:	e1a0c00d 	mov	ip, sp
    7094:	e92dd800 	push	{fp, ip, lr, pc}
    7098:	e24cb004 	sub	fp, ip, #4
    709c:	e24dd018 	sub	sp, sp, #24
	unsigned int addr_l, addr_m, addr_r, size, slice_limit;
	addr_l = EE_ADDR_L;
    70a0:	e3a0390e 	mov	r3, #229376	; 0x38000
    70a4:	e50b3020 	str	r3, [fp, #-32]
	if ((*((unsigned char *)addr_l))==0xFF) return(addr_l);
    70a8:	e51b3020 	ldr	r3, [fp, #-32]
    70ac:	e5d33000 	ldrb	r3, [r3]
    70b0:	e35300ff 	cmp	r3, #255	; 0xff
    70b4:	1a000002 	bne	70c4 <ee_locate+0x34>
    70b8:	e51b3020 	ldr	r3, [fp, #-32]
    70bc:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    70c0:	ea00003f 	b	71c4 <ee_locate+0x134>
	addr_r = EE_ADDR_H+1;
    70c4:	e3a03701 	mov	r3, #262144	; 0x40000
    70c8:	e50b3018 	str	r3, [fp, #-24]
	if ((*((unsigned char *)(addr_r-EE_REC_SIZE)))==EE_REC_ID) return(-1);
    70cc:	e51b3018 	ldr	r3, [fp, #-24]
    70d0:	e2433c01 	sub	r3, r3, #256	; 0x100
    70d4:	e5d33000 	ldrb	r3, [r3]
    70d8:	e35300aa 	cmp	r3, #170	; 0xaa
    70dc:	1a000002 	bne	70ec <ee_locate+0x5c>
    70e0:	e3e03000 	mvn	r3, #0
    70e4:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    70e8:	ea000035 	b	71c4 <ee_locate+0x134>
	size = addr_r - addr_l;
    70ec:	e51b2018 	ldr	r2, [fp, #-24]
    70f0:	e51b3020 	ldr	r3, [fp, #-32]
    70f4:	e0633002 	rsb	r3, r3, r2
    70f8:	e50b3014 	str	r3, [fp, #-20]
	slice_limit = EE_REC_SIZE - 1;
    70fc:	e3a030ff 	mov	r3, #255	; 0xff
    7100:	e50b3010 	str	r3, [fp, #-16]
	while(size != EE_REC_SIZE){
    7104:	ea000029 	b	71b0 <ee_locate+0x120>
		addr_m = (addr_r+addr_l)/2;
    7108:	e51b2018 	ldr	r2, [fp, #-24]
    710c:	e51b3020 	ldr	r3, [fp, #-32]
    7110:	e0823003 	add	r3, r2, r3
    7114:	e1a030a3 	lsr	r3, r3, #1
    7118:	e50b301c 	str	r3, [fp, #-28]
		if ((addr_m & slice_limit)!=0x00000000){
    711c:	e51b201c 	ldr	r2, [fp, #-28]
    7120:	e51b3010 	ldr	r3, [fp, #-16]
    7124:	e0023003 	and	r3, r2, r3
    7128:	e3530000 	cmp	r3, #0
    712c:	0a000013 	beq	7180 <ee_locate+0xf0>
			if ((*((unsigned char *)(addr_r - EE_REC_SIZE)))==0xFF) 
    7130:	e51b3018 	ldr	r3, [fp, #-24]
    7134:	e2433c01 	sub	r3, r3, #256	; 0x100
    7138:	e5d33000 	ldrb	r3, [r3]
    713c:	e35300ff 	cmp	r3, #255	; 0xff
    7140:	1a000003 	bne	7154 <ee_locate+0xc4>
				addr_r = addr_r - EE_REC_SIZE;
    7144:	e51b3018 	ldr	r3, [fp, #-24]
    7148:	e2433c01 	sub	r3, r3, #256	; 0x100
    714c:	e50b3018 	str	r3, [fp, #-24]
    7150:	ea000002 	b	7160 <ee_locate+0xd0>
			else
				addr_l = addr_l + EE_REC_SIZE;
    7154:	e51b3020 	ldr	r3, [fp, #-32]
    7158:	e2833c01 	add	r3, r3, #256	; 0x100
    715c:	e50b3020 	str	r3, [fp, #-32]
			addr_m = (addr_r+addr_l)/2;
    7160:	e51b2018 	ldr	r2, [fp, #-24]
    7164:	e51b3020 	ldr	r3, [fp, #-32]
    7168:	e0823003 	add	r3, r2, r3
    716c:	e1a030a3 	lsr	r3, r3, #1
    7170:	e50b301c 	str	r3, [fp, #-28]
			size = size - EE_REC_SIZE;
    7174:	e51b3014 	ldr	r3, [fp, #-20]
    7178:	e2433c01 	sub	r3, r3, #256	; 0x100
    717c:	e50b3014 	str	r3, [fp, #-20]
		}
		if ((*((unsigned char *)addr_m))==0xFF)
    7180:	e51b301c 	ldr	r3, [fp, #-28]
    7184:	e5d33000 	ldrb	r3, [r3]
    7188:	e35300ff 	cmp	r3, #255	; 0xff
    718c:	1a000002 	bne	719c <ee_locate+0x10c>
			addr_r = addr_m;
    7190:	e51b301c 	ldr	r3, [fp, #-28]
    7194:	e50b3018 	str	r3, [fp, #-24]
    7198:	ea000001 	b	71a4 <ee_locate+0x114>
		else
			addr_l = addr_m;
    719c:	e51b301c 	ldr	r3, [fp, #-28]
    71a0:	e50b3020 	str	r3, [fp, #-32]
		size = size/2;
    71a4:	e51b3014 	ldr	r3, [fp, #-20]
    71a8:	e1a030a3 	lsr	r3, r3, #1
    71ac:	e50b3014 	str	r3, [fp, #-20]
	if ((*((unsigned char *)addr_l))==0xFF) return(addr_l);
	addr_r = EE_ADDR_H+1;
	if ((*((unsigned char *)(addr_r-EE_REC_SIZE)))==EE_REC_ID) return(-1);
	size = addr_r - addr_l;
	slice_limit = EE_REC_SIZE - 1;
	while(size != EE_REC_SIZE){
    71b0:	e51b3014 	ldr	r3, [fp, #-20]
    71b4:	e3530c01 	cmp	r3, #256	; 0x100
    71b8:	1affffd2 	bne	7108 <ee_locate+0x78>
			addr_r = addr_m;
		else
			addr_l = addr_m;
		size = size/2;
	}
	return(addr_r);
    71bc:	e51b3018 	ldr	r3, [fp, #-24]
    71c0:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    71c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
}
    71c8:	e1a00003 	mov	r0, r3
    71cc:	e24bd00c 	sub	sp, fp, #12
    71d0:	e89d6800 	ldm	sp, {fp, sp, lr}
    71d4:	e12fff1e 	bx	lr

000071d8 <enter_isp>:

void enter_isp()
{
    71d8:	e1a0c00d 	mov	ip, sp
    71dc:	e92dd800 	push	{fp, ip, lr, pc}
    71e0:	e24cb004 	sub	fp, ip, #4
    71e4:	e24dd024 	sub	sp, sp, #36	; 0x24
	unsigned long enabled_interrupts;

	//this functions enters the ISP mode by software
	//disable PLL

	enabled_interrupts = VICIntEnable;  //disable all interrupts
    71e8:	e3a03000 	mov	r3, #0
    71ec:	e2433eff 	sub	r3, r3, #4080	; 0xff0
    71f0:	e5933000 	ldr	r3, [r3]
    71f4:	e50b3010 	str	r3, [fp, #-16]
	VICIntEnClr        = enabled_interrupts;
    71f8:	e3e03efe 	mvn	r3, #4064	; 0xfe0
    71fc:	e243300b 	sub	r3, r3, #11
    7200:	e51b2010 	ldr	r2, [fp, #-16]
    7204:	e5832000 	str	r2, [r3]


	PLLCON=0; //PLL disabled
    7208:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    720c:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    7210:	e2833080 	add	r3, r3, #128	; 0x80
    7214:	e3a02000 	mov	r2, #0
    7218:	e5832000 	str	r2, [r3]

	command_iap[0]=57;
    721c:	e3a03039 	mov	r3, #57	; 0x39
    7220:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	iap_entry=(IAP) IAP_LOCATION;
    7224:	e59f2030 	ldr	r2, [pc, #48]	; 725c <enter_isp+0x84>
    7228:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    722c:	e5823000 	str	r3, [r2]
	iap_entry(command_iap,result_iap);
    7230:	e59f3024 	ldr	r3, [pc, #36]	; 725c <enter_isp+0x84>
    7234:	e593c000 	ldr	ip, [r3]
    7238:	e24b3024 	sub	r3, fp, #36	; 0x24
    723c:	e24b2030 	sub	r2, fp, #48	; 0x30
    7240:	e1a00003 	mov	r0, r3
    7244:	e1a01002 	mov	r1, r2
    7248:	e1a0e00f 	mov	lr, pc
    724c:	e12fff1c 	bx	ip

}
    7250:	e24bd00c 	sub	sp, fp, #12
    7254:	e89d6800 	ldm	sp, {fp, sp, lr}
    7258:	e12fff1e 	bx	lr
    725c:	40002338 	.word	0x40002338

00007260 <loadFrame>:

// Processes bytes in our ring buffer and pulls out a frame.
//  Returns TRUE if there is a valid frame.
//  FALSE if there is not a valid frame in the Ring Buffer.
char loadFrame(void)
{
    7260:	e1a0c00d 	mov	ip, sp
    7264:	e92dd800 	push	{fp, ip, lr, pc}
    7268:	e24cb004 	sub	fp, ip, #4
    726c:	e24dd014 	sub	sp, sp, #20
	int i;
	int sIndex, eIndex; //SOF / EOF indexes.
	int nBuf; //Bytes in the buffer.
	
	// Loop through the available data while we have enough bytes to form a frame.
	while ( bytesAvailable() >= 8 )
    7270:	ea00004a 	b	73a0 <loadFrame+0x140>
	{
		nBuf = bytesAvailable();
    7274:	ebffec1f 	bl	22f8 <bytesAvailable>
    7278:	e1a03000 	mov	r3, r0
    727c:	e50b3010 	str	r3, [fp, #-16]
	
		// Find our first SOF byte.
		sIndex = findInBuffer(  0, nBuf, SOF );
    7280:	e3a00000 	mov	r0, #0
    7284:	e51b1010 	ldr	r1, [fp, #-16]
    7288:	e3a020ea 	mov	r2, #234	; 0xea
    728c:	ebffebff 	bl	2290 <findInBuffer>
    7290:	e1a03000 	mov	r3, r0
    7294:	e50b3018 	str	r3, [fp, #-24]
		if ( sIndex == -1 ) //No SOF in the entire buffer?
    7298:	e51b3018 	ldr	r3, [fp, #-24]
    729c:	e3730001 	cmn	r3, #1
    72a0:	1a000002 	bne	72b0 <loadFrame+0x50>
		{
			skipBytes(nBuf); //Discard the entire buffer.
    72a4:	e51b0010 	ldr	r0, [fp, #-16]
    72a8:	ebffec08 	bl	22d0 <skipBytes>
			continue;        //And try again.
    72ac:	ea00003b 	b	73a0 <loadFrame+0x140>
		}
	
		// Make sure the SOF is the first entry in our Ring Buffer
		nBuf = skipBytes(sIndex);
    72b0:	e51b0018 	ldr	r0, [fp, #-24]
    72b4:	ebffec05 	bl	22d0 <skipBytes>
    72b8:	e1a03000 	mov	r3, r0
    72bc:	e50b3010 	str	r3, [fp, #-16]
	
		// If we don't have enough characters left in the buffer for a frame
		if ( nBuf < 8 ) 
    72c0:	e51b3010 	ldr	r3, [fp, #-16]
    72c4:	e3530007 	cmp	r3, #7
    72c8:	ca000002 	bgt	72d8 <loadFrame+0x78>
			return 0; // Then we're done.
    72cc:	e3a03000 	mov	r3, #0
    72d0:	e50b3020 	str	r3, [fp, #-32]
    72d4:	ea000037 	b	73b8 <loadFrame+0x158>
			
		// Now we need to make sure we don't have another SOF.
		// We shouldn't have another for at least 8 bytes.
		sIndex = findInBuffer( 1, 7, SOF );
    72d8:	e3a00001 	mov	r0, #1
    72dc:	e3a01007 	mov	r1, #7
    72e0:	e3a020ea 	mov	r2, #234	; 0xea
    72e4:	ebffebe9 	bl	2290 <findInBuffer>
    72e8:	e1a03000 	mov	r3, r0
    72ec:	e50b3018 	str	r3, [fp, #-24]
		if ( sIndex != -1 ) // We have another SOF in the next 7 characters.
    72f0:	e51b3018 	ldr	r3, [fp, #-24]
    72f4:	e3730001 	cmn	r3, #1
    72f8:	0a000002 	beq	7308 <loadFrame+0xa8>
		{
			skipBytes( sIndex ); //Skip up until then
    72fc:	e51b0018 	ldr	r0, [fp, #-24]
    7300:	ebffebf2 	bl	22d0 <skipBytes>
			continue;
    7304:	ea000025 	b	73a0 <loadFrame+0x140>
		}
		
		// We don't have another SOF, do we have a valid EOF?
		eIndex = findInBuffer( 1, 7, EOFm );
    7308:	e3a00001 	mov	r0, #1
    730c:	e3a01007 	mov	r1, #7
    7310:	e3a020d5 	mov	r2, #213	; 0xd5
    7314:	ebffebdd 	bl	2290 <findInBuffer>
    7318:	e1a03000 	mov	r3, r0
    731c:	e50b3014 	str	r3, [fp, #-20]

		if (eIndex != 6) //EOF should be the 8th byte out. Bad Frame! Bad!
    7320:	e51b3014 	ldr	r3, [fp, #-20]
    7324:	e3530006 	cmp	r3, #6
    7328:	0a00000a 	beq	7358 <loadFrame+0xf8>
		{
			// We will discard byte up to the EOF if it was found...
			if ( eIndex >= 0 )
    732c:	e51b3014 	ldr	r3, [fp, #-20]
    7330:	e3530000 	cmp	r3, #0
    7334:	ba000004 	blt	734c <loadFrame+0xec>
				skipBytes( eIndex + 1 ); //Discard up to and including the EOF.
    7338:	e51b3014 	ldr	r3, [fp, #-20]
    733c:	e2833001 	add	r3, r3, #1
    7340:	e1a00003 	mov	r0, r3
    7344:	ebffebe1 	bl	22d0 <skipBytes>
    7348:	ea000014 	b	73a0 <loadFrame+0x140>
			else
				skipBytes( 8 ); //No EOF was found at all. Discard next 8 bytes.
    734c:	e3a00008 	mov	r0, #8
    7350:	ebffebde 	bl	22d0 <skipBytes>
			continue;
    7354:	ea000011 	b	73a0 <loadFrame+0x140>
		}		
		// We have a valid frame.
		frame.prefix = getByte(); //SOF byte
    7358:	ebffec30 	bl	2420 <getByte>
    735c:	e1a03000 	mov	r3, r0
    7360:	e59f2064 	ldr	r2, [pc, #100]	; 73cc <loadFrame+0x16c>
    7364:	e5c23000 	strb	r3, [r2]
		// Get the command byte
		frame.command = getByte();
    7368:	ebffec2c 	bl	2420 <getByte>
    736c:	e1a03000 	mov	r3, r0
    7370:	e59f2054 	ldr	r2, [pc, #84]	; 73cc <loadFrame+0x16c>
    7374:	e5c23001 	strb	r3, [r2, #1]
		getBytes(frame.data, 5); //Data bytes.
    7378:	e59f0050 	ldr	r0, [pc, #80]	; 73d0 <loadFrame+0x170>
    737c:	e3a01005 	mov	r1, #5
    7380:	ebffec3b 	bl	2474 <getBytes>
		frame.suffix = getByte(); //EOF byte
    7384:	ebffec25 	bl	2420 <getByte>
    7388:	e1a03000 	mov	r3, r0
    738c:	e59f2038 	ldr	r2, [pc, #56]	; 73cc <loadFrame+0x16c>
    7390:	e5c23007 	strb	r3, [r2, #7]
		
		return 1;
    7394:	e3a03001 	mov	r3, #1
    7398:	e50b3020 	str	r3, [fp, #-32]
    739c:	ea000005 	b	73b8 <loadFrame+0x158>
	int i;
	int sIndex, eIndex; //SOF / EOF indexes.
	int nBuf; //Bytes in the buffer.
	
	// Loop through the available data while we have enough bytes to form a frame.
	while ( bytesAvailable() >= 8 )
    73a0:	ebffebd4 	bl	22f8 <bytesAvailable>
    73a4:	e1a03000 	mov	r3, r0
    73a8:	e3530007 	cmp	r3, #7
    73ac:	8affffb0 	bhi	7274 <loadFrame+0x14>
		getBytes(frame.data, 5); //Data bytes.
		frame.suffix = getByte(); //EOF byte
		
		return 1;
	}
	return 0; //No valid frame present.			
    73b0:	e3a03000 	mov	r3, #0
    73b4:	e50b3020 	str	r3, [fp, #-32]
    73b8:	e51b3020 	ldr	r3, [fp, #-32]
}
    73bc:	e1a00003 	mov	r0, r3
    73c0:	e24bd00c 	sub	sp, fp, #12
    73c4:	e89d6800 	ldm	sp, {fp, sp, lr}
    73c8:	e12fff1e 	bx	lr
    73cc:	4000233c 	.word	0x4000233c
    73d0:	4000233e 	.word	0x4000233e

000073d4 <memcpy>:
    73d4:	b530      	push	{r4, r5, lr}
    73d6:	1c05      	adds	r5, r0, #0
    73d8:	1c14      	adds	r4, r2, #0
    73da:	2a0f      	cmp	r2, #15
    73dc:	d904      	bls.n	73e8 <memcpy+0x14>
    73de:	1c0a      	adds	r2, r1, #0
    73e0:	432a      	orrs	r2, r5
    73e2:	2303      	movs	r3, #3
    73e4:	421a      	tst	r2, r3
    73e6:	d00b      	beq.n	7400 <memcpy+0x2c>
    73e8:	1e62      	subs	r2, r4, #1
    73ea:	d305      	bcc.n	73f8 <memcpy+0x24>
    73ec:	780b      	ldrb	r3, [r1, #0]
    73ee:	3101      	adds	r1, #1
    73f0:	7003      	strb	r3, [r0, #0]
    73f2:	3001      	adds	r0, #1
    73f4:	3a01      	subs	r2, #1
    73f6:	d2f9      	bcs.n	73ec <memcpy+0x18>
    73f8:	1c28      	adds	r0, r5, #0
    73fa:	bc30      	pop	{r4, r5}
    73fc:	bc02      	pop	{r1}
    73fe:	4708      	bx	r1
    7400:	1c2a      	adds	r2, r5, #0
    7402:	680b      	ldr	r3, [r1, #0]
    7404:	6013      	str	r3, [r2, #0]
    7406:	684b      	ldr	r3, [r1, #4]
    7408:	6053      	str	r3, [r2, #4]
    740a:	688b      	ldr	r3, [r1, #8]
    740c:	6093      	str	r3, [r2, #8]
    740e:	68cb      	ldr	r3, [r1, #12]
    7410:	3c10      	subs	r4, #16
    7412:	60d3      	str	r3, [r2, #12]
    7414:	3110      	adds	r1, #16
    7416:	3210      	adds	r2, #16
    7418:	2c0f      	cmp	r4, #15
    741a:	d8f2      	bhi.n	7402 <memcpy+0x2e>
    741c:	2c03      	cmp	r4, #3
    741e:	d904      	bls.n	742a <memcpy+0x56>
    7420:	c908      	ldmia	r1!, {r3}
    7422:	3c04      	subs	r4, #4
    7424:	c208      	stmia	r2!, {r3}
    7426:	2c03      	cmp	r4, #3
    7428:	d8fa      	bhi.n	7420 <memcpy+0x4c>
    742a:	1c10      	adds	r0, r2, #0
    742c:	e7dc      	b.n	73e8 <memcpy+0x14>
    742e:	46c0      	nop			; (mov r8, r8)

00007430 <sprintf>:
    7430:	b40e      	push	{r1, r2, r3}
    7432:	b510      	push	{r4, lr}
    7434:	b098      	sub	sp, #96	; 0x60
    7436:	9000      	str	r0, [sp, #0]
    7438:	9004      	str	r0, [sp, #16]
    743a:	480c      	ldr	r0, [pc, #48]	; (746c <sprintf+0x3c>)
    743c:	9002      	str	r0, [sp, #8]
    743e:	9005      	str	r0, [sp, #20]
    7440:	2001      	movs	r0, #1
    7442:	4669      	mov	r1, sp
    7444:	4240      	negs	r0, r0
    7446:	ab1a      	add	r3, sp, #104	; 0x68
    7448:	81c8      	strh	r0, [r1, #14]
    744a:	2482      	movs	r4, #130	; 0x82
    744c:	4808      	ldr	r0, [pc, #32]	; (7470 <sprintf+0x40>)
    744e:	cb04      	ldmia	r3!, {r2}
    7450:	00a4      	lsls	r4, r4, #2
    7452:	818c      	strh	r4, [r1, #12]
    7454:	6800      	ldr	r0, [r0, #0]
    7456:	9317      	str	r3, [sp, #92]	; 0x5c
    7458:	f000 f83c 	bl	74d4 <_vfprintf_r>
    745c:	9a00      	ldr	r2, [sp, #0]
    745e:	2300      	movs	r3, #0
    7460:	b018      	add	sp, #96	; 0x60
    7462:	7013      	strb	r3, [r2, #0]
    7464:	bc10      	pop	{r4}
    7466:	bc08      	pop	{r3}
    7468:	b003      	add	sp, #12
    746a:	4718      	bx	r3
    746c:	7fffffff 	.word	0x7fffffff
    7470:	40000014 	.word	0x40000014

00007474 <_sprintf_r>:
    7474:	b40c      	push	{r2, r3}
    7476:	b530      	push	{r4, r5, lr}
    7478:	b098      	sub	sp, #96	; 0x60
    747a:	9100      	str	r1, [sp, #0]
    747c:	9104      	str	r1, [sp, #16]
    747e:	490c      	ldr	r1, [pc, #48]	; (74b0 <_sprintf_r+0x3c>)
    7480:	ab1b      	add	r3, sp, #108	; 0x6c
    7482:	9102      	str	r1, [sp, #8]
    7484:	9105      	str	r1, [sp, #20]
    7486:	2101      	movs	r1, #1
    7488:	466d      	mov	r5, sp
    748a:	cb04      	ldmia	r3!, {r2}
    748c:	4249      	negs	r1, r1
    748e:	2482      	movs	r4, #130	; 0x82
    7490:	81e9      	strh	r1, [r5, #14]
    7492:	00a4      	lsls	r4, r4, #2
    7494:	4669      	mov	r1, sp
    7496:	81ac      	strh	r4, [r5, #12]
    7498:	9317      	str	r3, [sp, #92]	; 0x5c
    749a:	f000 f81b 	bl	74d4 <_vfprintf_r>
    749e:	9a00      	ldr	r2, [sp, #0]
    74a0:	2300      	movs	r3, #0
    74a2:	b018      	add	sp, #96	; 0x60
    74a4:	7013      	strb	r3, [r2, #0]
    74a6:	bc30      	pop	{r4, r5}
    74a8:	bc08      	pop	{r3}
    74aa:	b002      	add	sp, #8
    74ac:	4718      	bx	r3
    74ae:	46c0      	nop			; (mov r8, r8)
    74b0:	7fffffff 	.word	0x7fffffff

000074b4 <__sprint>:
    74b4:	b510      	push	{r4, lr}
    74b6:	688b      	ldr	r3, [r1, #8]
    74b8:	1c0c      	adds	r4, r1, #0
    74ba:	2b00      	cmp	r3, #0
    74bc:	d104      	bne.n	74c8 <__sprint+0x14>
    74be:	604b      	str	r3, [r1, #4]
    74c0:	2000      	movs	r0, #0
    74c2:	bc10      	pop	{r4}
    74c4:	bc02      	pop	{r1}
    74c6:	4708      	bx	r1
    74c8:	f003 f96a 	bl	a7a0 <__sfvwrite>
    74cc:	2300      	movs	r3, #0
    74ce:	60a3      	str	r3, [r4, #8]
    74d0:	6063      	str	r3, [r4, #4]
    74d2:	e7f6      	b.n	74c2 <__sprint+0xe>

000074d4 <_vfprintf_r>:
    74d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    74d6:	465f      	mov	r7, fp
    74d8:	4656      	mov	r6, sl
    74da:	464d      	mov	r5, r9
    74dc:	4644      	mov	r4, r8
    74de:	b4f0      	push	{r4, r5, r6, r7}
    74e0:	4cb9      	ldr	r4, [pc, #740]	; (77c8 <_vfprintf_r+0x2f4>)
    74e2:	44a5      	add	sp, r4
    74e4:	9005      	str	r0, [sp, #20]
    74e6:	4689      	mov	r9, r1
    74e8:	1c15      	adds	r5, r2, #0
    74ea:	469a      	mov	sl, r3
    74ec:	f003 fb1c 	bl	ab28 <localeconv>
    74f0:	6800      	ldr	r0, [r0, #0]
    74f2:	900c      	str	r0, [sp, #48]	; 0x30
    74f4:	9805      	ldr	r0, [sp, #20]
    74f6:	2800      	cmp	r0, #0
    74f8:	d003      	beq.n	7502 <_vfprintf_r+0x2e>
    74fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
    74fc:	2b00      	cmp	r3, #0
    74fe:	d100      	bne.n	7502 <_vfprintf_r+0x2e>
    7500:	e329      	b.n	7b56 <_vfprintf_r+0x682>
    7502:	4649      	mov	r1, r9
    7504:	898a      	ldrh	r2, [r1, #12]
    7506:	0713      	lsls	r3, r2, #28
    7508:	d400      	bmi.n	750c <_vfprintf_r+0x38>
    750a:	e32b      	b.n	7b64 <_vfprintf_r+0x690>
    750c:	690b      	ldr	r3, [r1, #16]
    750e:	2b00      	cmp	r3, #0
    7510:	d100      	bne.n	7514 <_vfprintf_r+0x40>
    7512:	e327      	b.n	7b64 <_vfprintf_r+0x690>
    7514:	231a      	movs	r3, #26
    7516:	4013      	ands	r3, r2
    7518:	2b0a      	cmp	r3, #10
    751a:	d14b      	bne.n	75b4 <_vfprintf_r+0xe0>
    751c:	4648      	mov	r0, r9
    751e:	210e      	movs	r1, #14
    7520:	5e43      	ldrsh	r3, [r0, r1]
    7522:	2b00      	cmp	r3, #0
    7524:	db46      	blt.n	75b4 <_vfprintf_r+0xe0>
    7526:	24b7      	movs	r4, #183	; 0xb7
    7528:	2302      	movs	r3, #2
    752a:	00e4      	lsls	r4, r4, #3
    752c:	446c      	add	r4, sp
    752e:	439a      	bics	r2, r3
    7530:	81a2      	strh	r2, [r4, #12]
    7532:	89c3      	ldrh	r3, [r0, #14]
    7534:	4aa5      	ldr	r2, [pc, #660]	; (77cc <_vfprintf_r+0x2f8>)
    7536:	81e3      	strh	r3, [r4, #14]
    7538:	69c3      	ldr	r3, [r0, #28]
    753a:	446a      	add	r2, sp
    753c:	6013      	str	r3, [r2, #0]
    753e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    7540:	48a3      	ldr	r0, [pc, #652]	; (77d0 <_vfprintf_r+0x2fc>)
    7542:	22b9      	movs	r2, #185	; 0xb9
    7544:	4468      	add	r0, sp
    7546:	00d2      	lsls	r2, r2, #3
    7548:	6003      	str	r3, [r0, #0]
    754a:	446a      	add	r2, sp
    754c:	ab17      	add	r3, sp, #92	; 0x5c
    754e:	20b8      	movs	r0, #184	; 0xb8
    7550:	49a0      	ldr	r1, [pc, #640]	; (77d4 <_vfprintf_r+0x300>)
    7552:	6013      	str	r3, [r2, #0]
    7554:	6023      	str	r3, [r4, #0]
    7556:	00c0      	lsls	r0, r0, #3
    7558:	2380      	movs	r3, #128	; 0x80
    755a:	22ba      	movs	r2, #186	; 0xba
    755c:	00db      	lsls	r3, r3, #3
    755e:	4468      	add	r0, sp
    7560:	4469      	add	r1, sp
    7562:	00d2      	lsls	r2, r2, #3
    7564:	6003      	str	r3, [r0, #0]
    7566:	600b      	str	r3, [r1, #0]
    7568:	446a      	add	r2, sp
    756a:	2300      	movs	r3, #0
    756c:	6013      	str	r3, [r2, #0]
    756e:	9805      	ldr	r0, [sp, #20]
    7570:	1c21      	adds	r1, r4, #0
    7572:	1c2a      	adds	r2, r5, #0
    7574:	4653      	mov	r3, sl
    7576:	f7ff ffad 	bl	74d4 <_vfprintf_r>
    757a:	900a      	str	r0, [sp, #40]	; 0x28
    757c:	2800      	cmp	r0, #0
    757e:	db05      	blt.n	758c <_vfprintf_r+0xb8>
    7580:	1c20      	adds	r0, r4, #0
    7582:	f002 feb5 	bl	a2f0 <fflush>
    7586:	2800      	cmp	r0, #0
    7588:	d000      	beq.n	758c <_vfprintf_r+0xb8>
    758a:	e372      	b.n	7c72 <_vfprintf_r+0x79e>
    758c:	89a3      	ldrh	r3, [r4, #12]
    758e:	065c      	lsls	r4, r3, #25
    7590:	d505      	bpl.n	759e <_vfprintf_r+0xca>
    7592:	4648      	mov	r0, r9
    7594:	8983      	ldrh	r3, [r0, #12]
    7596:	2240      	movs	r2, #64	; 0x40
    7598:	4313      	orrs	r3, r2
    759a:	4649      	mov	r1, r9
    759c:	818b      	strh	r3, [r1, #12]
    759e:	4b8e      	ldr	r3, [pc, #568]	; (77d8 <_vfprintf_r+0x304>)
    75a0:	980a      	ldr	r0, [sp, #40]	; 0x28
    75a2:	449d      	add	sp, r3
    75a4:	bc3c      	pop	{r2, r3, r4, r5}
    75a6:	4690      	mov	r8, r2
    75a8:	4699      	mov	r9, r3
    75aa:	46a2      	mov	sl, r4
    75ac:	46ab      	mov	fp, r5
    75ae:	bcf0      	pop	{r4, r5, r6, r7}
    75b0:	bc02      	pop	{r1}
    75b2:	4708      	bx	r1
    75b4:	4a89      	ldr	r2, [pc, #548]	; (77dc <_vfprintf_r+0x308>)
    75b6:	4b8a      	ldr	r3, [pc, #552]	; (77e0 <_vfprintf_r+0x30c>)
    75b8:	446a      	add	r2, sp
    75ba:	446b      	add	r3, sp
    75bc:	601a      	str	r2, [r3, #0]
    75be:	4989      	ldr	r1, [pc, #548]	; (77e4 <_vfprintf_r+0x310>)
    75c0:	4a89      	ldr	r2, [pc, #548]	; (77e8 <_vfprintf_r+0x314>)
    75c2:	4c8a      	ldr	r4, [pc, #552]	; (77ec <_vfprintf_r+0x318>)
    75c4:	20d0      	movs	r0, #208	; 0xd0
    75c6:	00c0      	lsls	r0, r0, #3
    75c8:	9113      	str	r1, [sp, #76]	; 0x4c
    75ca:	9214      	str	r2, [sp, #80]	; 0x50
    75cc:	4a83      	ldr	r2, [pc, #524]	; (77dc <_vfprintf_r+0x308>)
    75ce:	9507      	str	r5, [sp, #28]
    75d0:	2700      	movs	r7, #0
    75d2:	2500      	movs	r5, #0
    75d4:	446c      	add	r4, sp
    75d6:	4468      	add	r0, sp
    75d8:	446a      	add	r2, sp
    75da:	6027      	str	r7, [r4, #0]
    75dc:	6005      	str	r5, [r0, #0]
    75de:	950a      	str	r5, [sp, #40]	; 0x28
    75e0:	950e      	str	r5, [sp, #56]	; 0x38
    75e2:	9511      	str	r5, [sp, #68]	; 0x44
    75e4:	9512      	str	r5, [sp, #72]	; 0x48
    75e6:	4690      	mov	r8, r2
    75e8:	9907      	ldr	r1, [sp, #28]
    75ea:	780a      	ldrb	r2, [r1, #0]
    75ec:	2a00      	cmp	r2, #0
    75ee:	d101      	bne.n	75f4 <_vfprintf_r+0x120>
    75f0:	f000 fcb2 	bl	7f58 <_vfprintf_r+0xa84>
    75f4:	2a25      	cmp	r2, #37	; 0x25
    75f6:	d028      	beq.n	764a <_vfprintf_r+0x176>
    75f8:	1c0c      	adds	r4, r1, #0
    75fa:	e002      	b.n	7602 <_vfprintf_r+0x12e>
    75fc:	2b25      	cmp	r3, #37	; 0x25
    75fe:	d100      	bne.n	7602 <_vfprintf_r+0x12e>
    7600:	e28e      	b.n	7b20 <_vfprintf_r+0x64c>
    7602:	3401      	adds	r4, #1
    7604:	7823      	ldrb	r3, [r4, #0]
    7606:	2b00      	cmp	r3, #0
    7608:	d1f8      	bne.n	75fc <_vfprintf_r+0x128>
    760a:	9b07      	ldr	r3, [sp, #28]
    760c:	1ae6      	subs	r6, r4, r3
    760e:	2e00      	cmp	r6, #0
    7610:	d019      	beq.n	7646 <_vfprintf_r+0x172>
    7612:	9b07      	ldr	r3, [sp, #28]
    7614:	4640      	mov	r0, r8
    7616:	6003      	str	r3, [r0, #0]
    7618:	4a74      	ldr	r2, [pc, #464]	; (77ec <_vfprintf_r+0x318>)
    761a:	23d0      	movs	r3, #208	; 0xd0
    761c:	00db      	lsls	r3, r3, #3
    761e:	446a      	add	r2, sp
    7620:	446b      	add	r3, sp
    7622:	6817      	ldr	r7, [r2, #0]
    7624:	681d      	ldr	r5, [r3, #0]
    7626:	496e      	ldr	r1, [pc, #440]	; (77e0 <_vfprintf_r+0x30c>)
    7628:	19f7      	adds	r7, r6, r7
    762a:	4469      	add	r1, sp
    762c:	3501      	adds	r5, #1
    762e:	6046      	str	r6, [r0, #4]
    7630:	9104      	str	r1, [sp, #16]
    7632:	6017      	str	r7, [r2, #0]
    7634:	601d      	str	r5, [r3, #0]
    7636:	2d07      	cmp	r5, #7
    7638:	dd00      	ble.n	763c <_vfprintf_r+0x168>
    763a:	e365      	b.n	7d08 <_vfprintf_r+0x834>
    763c:	2008      	movs	r0, #8
    763e:	4480      	add	r8, r0
    7640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7642:	1992      	adds	r2, r2, r6
    7644:	920a      	str	r2, [sp, #40]	; 0x28
    7646:	9407      	str	r4, [sp, #28]
    7648:	7822      	ldrb	r2, [r4, #0]
    764a:	2a00      	cmp	r2, #0
    764c:	d101      	bne.n	7652 <_vfprintf_r+0x17e>
    764e:	f000 fc83 	bl	7f58 <_vfprintf_r+0xa84>
    7652:	9b07      	ldr	r3, [sp, #28]
    7654:	4c66      	ldr	r4, [pc, #408]	; (77f0 <_vfprintf_r+0x31c>)
    7656:	3301      	adds	r3, #1
    7658:	9307      	str	r3, [sp, #28]
    765a:	446c      	add	r4, sp
    765c:	2300      	movs	r3, #0
    765e:	7023      	strb	r3, [r4, #0]
    7660:	9807      	ldr	r0, [sp, #28]
    7662:	9315      	str	r3, [sp, #84]	; 0x54
    7664:	930b      	str	r3, [sp, #44]	; 0x2c
    7666:	2601      	movs	r6, #1
    7668:	7802      	ldrb	r2, [r0, #0]
    766a:	4276      	negs	r6, r6
    766c:	9807      	ldr	r0, [sp, #28]
    766e:	3001      	adds	r0, #1
    7670:	9208      	str	r2, [sp, #32]
    7672:	9007      	str	r0, [sp, #28]
    7674:	9b08      	ldr	r3, [sp, #32]
    7676:	3b20      	subs	r3, #32
    7678:	2b58      	cmp	r3, #88	; 0x58
    767a:	d803      	bhi.n	7684 <_vfprintf_r+0x1b0>
    767c:	4a5d      	ldr	r2, [pc, #372]	; (77f4 <_vfprintf_r+0x320>)
    767e:	009b      	lsls	r3, r3, #2
    7680:	589b      	ldr	r3, [r3, r2]
    7682:	469f      	mov	pc, r3
    7684:	9908      	ldr	r1, [sp, #32]
    7686:	2900      	cmp	r1, #0
    7688:	d101      	bne.n	768e <_vfprintf_r+0x1ba>
    768a:	f000 fc65 	bl	7f58 <_vfprintf_r+0xa84>
    768e:	4d5a      	ldr	r5, [pc, #360]	; (77f8 <_vfprintf_r+0x324>)
    7690:	4c57      	ldr	r4, [pc, #348]	; (77f0 <_vfprintf_r+0x31c>)
    7692:	4650      	mov	r0, sl
    7694:	446d      	add	r5, sp
    7696:	2300      	movs	r3, #0
    7698:	446c      	add	r4, sp
    769a:	7029      	strb	r1, [r5, #0]
    769c:	7023      	strb	r3, [r4, #0]
    769e:	9016      	str	r0, [sp, #88]	; 0x58
    76a0:	9509      	str	r5, [sp, #36]	; 0x24
    76a2:	2001      	movs	r0, #1
    76a4:	4683      	mov	fp, r0
    76a6:	4682      	mov	sl, r0
    76a8:	494d      	ldr	r1, [pc, #308]	; (77e0 <_vfprintf_r+0x30c>)
    76aa:	2000      	movs	r0, #0
    76ac:	4469      	add	r1, sp
    76ae:	9010      	str	r0, [sp, #64]	; 0x40
    76b0:	9104      	str	r1, [sp, #16]
    76b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    76b4:	0792      	lsls	r2, r2, #30
    76b6:	d501      	bpl.n	76bc <_vfprintf_r+0x1e8>
    76b8:	2302      	movs	r3, #2
    76ba:	449a      	add	sl, r3
    76bc:	9c15      	ldr	r4, [sp, #84]	; 0x54
    76be:	2384      	movs	r3, #132	; 0x84
    76c0:	401c      	ands	r4, r3
    76c2:	9406      	str	r4, [sp, #24]
    76c4:	d000      	beq.n	76c8 <_vfprintf_r+0x1f4>
    76c6:	e164      	b.n	7992 <_vfprintf_r+0x4be>
    76c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    76ca:	4651      	mov	r1, sl
    76cc:	1a44      	subs	r4, r0, r1
    76ce:	2c00      	cmp	r4, #0
    76d0:	dc00      	bgt.n	76d4 <_vfprintf_r+0x200>
    76d2:	e34b      	b.n	7d6c <_vfprintf_r+0x898>
    76d4:	2c10      	cmp	r4, #16
    76d6:	dc01      	bgt.n	76dc <_vfprintf_r+0x208>
    76d8:	f000 ff8b 	bl	85f2 <_vfprintf_r+0x111e>
    76dc:	4a43      	ldr	r2, [pc, #268]	; (77ec <_vfprintf_r+0x318>)
    76de:	23d0      	movs	r3, #208	; 0xd0
    76e0:	00db      	lsls	r3, r3, #3
    76e2:	446a      	add	r2, sp
    76e4:	446b      	add	r3, sp
    76e6:	6817      	ldr	r7, [r2, #0]
    76e8:	681d      	ldr	r5, [r3, #0]
    76ea:	4e44      	ldr	r6, [pc, #272]	; (77fc <_vfprintf_r+0x328>)
    76ec:	e004      	b.n	76f8 <_vfprintf_r+0x224>
    76ee:	2308      	movs	r3, #8
    76f0:	3c10      	subs	r4, #16
    76f2:	4498      	add	r8, r3
    76f4:	2c10      	cmp	r4, #16
    76f6:	dd23      	ble.n	7740 <_vfprintf_r+0x26c>
    76f8:	493c      	ldr	r1, [pc, #240]	; (77ec <_vfprintf_r+0x318>)
    76fa:	22d0      	movs	r2, #208	; 0xd0
    76fc:	00d2      	lsls	r2, r2, #3
    76fe:	4640      	mov	r0, r8
    7700:	2310      	movs	r3, #16
    7702:	3710      	adds	r7, #16
    7704:	4469      	add	r1, sp
    7706:	3501      	adds	r5, #1
    7708:	446a      	add	r2, sp
    770a:	6006      	str	r6, [r0, #0]
    770c:	6043      	str	r3, [r0, #4]
    770e:	600f      	str	r7, [r1, #0]
    7710:	6015      	str	r5, [r2, #0]
    7712:	2d07      	cmp	r5, #7
    7714:	ddeb      	ble.n	76ee <_vfprintf_r+0x21a>
    7716:	4932      	ldr	r1, [pc, #200]	; (77e0 <_vfprintf_r+0x30c>)
    7718:	4648      	mov	r0, r9
    771a:	4469      	add	r1, sp
    771c:	f7ff feca 	bl	74b4 <__sprint>
    7720:	2800      	cmp	r0, #0
    7722:	d000      	beq.n	7726 <_vfprintf_r+0x252>
    7724:	e207      	b.n	7b36 <_vfprintf_r+0x662>
    7726:	482d      	ldr	r0, [pc, #180]	; (77dc <_vfprintf_r+0x308>)
    7728:	4930      	ldr	r1, [pc, #192]	; (77ec <_vfprintf_r+0x318>)
    772a:	22d0      	movs	r2, #208	; 0xd0
    772c:	00d2      	lsls	r2, r2, #3
    772e:	4468      	add	r0, sp
    7730:	4469      	add	r1, sp
    7732:	446a      	add	r2, sp
    7734:	3c10      	subs	r4, #16
    7736:	4680      	mov	r8, r0
    7738:	680f      	ldr	r7, [r1, #0]
    773a:	6815      	ldr	r5, [r2, #0]
    773c:	2c10      	cmp	r4, #16
    773e:	dcdb      	bgt.n	76f8 <_vfprintf_r+0x224>
    7740:	4a2a      	ldr	r2, [pc, #168]	; (77ec <_vfprintf_r+0x318>)
    7742:	23d0      	movs	r3, #208	; 0xd0
    7744:	00db      	lsls	r3, r3, #3
    7746:	4641      	mov	r1, r8
    7748:	193f      	adds	r7, r7, r4
    774a:	446a      	add	r2, sp
    774c:	3501      	adds	r5, #1
    774e:	446b      	add	r3, sp
    7750:	600e      	str	r6, [r1, #0]
    7752:	604c      	str	r4, [r1, #4]
    7754:	6017      	str	r7, [r2, #0]
    7756:	601d      	str	r5, [r3, #0]
    7758:	2d07      	cmp	r5, #7
    775a:	dd00      	ble.n	775e <_vfprintf_r+0x28a>
    775c:	e30e      	b.n	7d7c <_vfprintf_r+0x8a8>
    775e:	4a24      	ldr	r2, [pc, #144]	; (77f0 <_vfprintf_r+0x31c>)
    7760:	446a      	add	r2, sp
    7762:	7813      	ldrb	r3, [r2, #0]
    7764:	2408      	movs	r4, #8
    7766:	44a0      	add	r8, r4
    7768:	2b00      	cmp	r3, #0
    776a:	d000      	beq.n	776e <_vfprintf_r+0x29a>
    776c:	e11e      	b.n	79ac <_vfprintf_r+0x4d8>
    776e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    7770:	2102      	movs	r1, #2
    7772:	420a      	tst	r2, r1
    7774:	d100      	bne.n	7778 <_vfprintf_r+0x2a4>
    7776:	e12c      	b.n	79d2 <_vfprintf_r+0x4fe>
    7778:	4b21      	ldr	r3, [pc, #132]	; (7800 <_vfprintf_r+0x32c>)
    777a:	2230      	movs	r2, #48	; 0x30
    777c:	446b      	add	r3, sp
    777e:	701a      	strb	r2, [r3, #0]
    7780:	ac08      	add	r4, sp, #32
    7782:	7824      	ldrb	r4, [r4, #0]
    7784:	4640      	mov	r0, r8
    7786:	705c      	strb	r4, [r3, #1]
    7788:	22d0      	movs	r2, #208	; 0xd0
    778a:	6041      	str	r1, [r0, #4]
    778c:	4917      	ldr	r1, [pc, #92]	; (77ec <_vfprintf_r+0x318>)
    778e:	00d2      	lsls	r2, r2, #3
    7790:	3702      	adds	r7, #2
    7792:	4469      	add	r1, sp
    7794:	3501      	adds	r5, #1
    7796:	446a      	add	r2, sp
    7798:	6003      	str	r3, [r0, #0]
    779a:	600f      	str	r7, [r1, #0]
    779c:	6015      	str	r5, [r2, #0]
    779e:	2d07      	cmp	r5, #7
    77a0:	dd00      	ble.n	77a4 <_vfprintf_r+0x2d0>
    77a2:	e29e      	b.n	7ce2 <_vfprintf_r+0x80e>
    77a4:	9a06      	ldr	r2, [sp, #24]
    77a6:	2308      	movs	r3, #8
    77a8:	4498      	add	r8, r3
    77aa:	2a80      	cmp	r2, #128	; 0x80
    77ac:	d000      	beq.n	77b0 <_vfprintf_r+0x2dc>
    77ae:	e114      	b.n	79da <_vfprintf_r+0x506>
    77b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    77b2:	4650      	mov	r0, sl
    77b4:	1a1c      	subs	r4, r3, r0
    77b6:	2c00      	cmp	r4, #0
    77b8:	dc00      	bgt.n	77bc <_vfprintf_r+0x2e8>
    77ba:	e10e      	b.n	79da <_vfprintf_r+0x506>
    77bc:	2c10      	cmp	r4, #16
    77be:	dc01      	bgt.n	77c4 <_vfprintf_r+0x2f0>
    77c0:	f001 f88f 	bl	88e2 <_vfprintf_r+0x140e>
    77c4:	4e0f      	ldr	r6, [pc, #60]	; (7804 <_vfprintf_r+0x330>)
    77c6:	e024      	b.n	7812 <_vfprintf_r+0x33e>
    77c8:	fffff94c 	.word	0xfffff94c
    77cc:	000005d4 	.word	0x000005d4
    77d0:	000005dc 	.word	0x000005dc
    77d4:	000005cc 	.word	0x000005cc
    77d8:	000006b4 	.word	0x000006b4
    77dc:	00000614 	.word	0x00000614
    77e0:	0000067c 	.word	0x0000067c
	...
    77ec:	00000684 	.word	0x00000684
    77f0:	000006b3 	.word	0x000006b3
    77f4:	00012a74 	.word	0x00012a74
    77f8:	0000045c 	.word	0x0000045c
    77fc:	00012be8 	.word	0x00012be8
    7800:	000006b1 	.word	0x000006b1
    7804:	00012bd8 	.word	0x00012bd8
    7808:	2008      	movs	r0, #8
    780a:	3c10      	subs	r4, #16
    780c:	4480      	add	r8, r0
    780e:	2c10      	cmp	r4, #16
    7810:	dd23      	ble.n	785a <_vfprintf_r+0x386>
    7812:	4641      	mov	r1, r8
    7814:	2310      	movs	r3, #16
    7816:	604b      	str	r3, [r1, #4]
    7818:	4ad6      	ldr	r2, [pc, #856]	; (7b74 <_vfprintf_r+0x6a0>)
    781a:	23d0      	movs	r3, #208	; 0xd0
    781c:	00db      	lsls	r3, r3, #3
    781e:	3710      	adds	r7, #16
    7820:	446a      	add	r2, sp
    7822:	3501      	adds	r5, #1
    7824:	446b      	add	r3, sp
    7826:	600e      	str	r6, [r1, #0]
    7828:	6017      	str	r7, [r2, #0]
    782a:	601d      	str	r5, [r3, #0]
    782c:	2d07      	cmp	r5, #7
    782e:	ddeb      	ble.n	7808 <_vfprintf_r+0x334>
    7830:	49d1      	ldr	r1, [pc, #836]	; (7b78 <_vfprintf_r+0x6a4>)
    7832:	4648      	mov	r0, r9
    7834:	4469      	add	r1, sp
    7836:	f7ff fe3d 	bl	74b4 <__sprint>
    783a:	2800      	cmp	r0, #0
    783c:	d000      	beq.n	7840 <_vfprintf_r+0x36c>
    783e:	e17a      	b.n	7b36 <_vfprintf_r+0x662>
    7840:	49ce      	ldr	r1, [pc, #824]	; (7b7c <_vfprintf_r+0x6a8>)
    7842:	4acc      	ldr	r2, [pc, #816]	; (7b74 <_vfprintf_r+0x6a0>)
    7844:	23d0      	movs	r3, #208	; 0xd0
    7846:	00db      	lsls	r3, r3, #3
    7848:	4469      	add	r1, sp
    784a:	446a      	add	r2, sp
    784c:	446b      	add	r3, sp
    784e:	3c10      	subs	r4, #16
    7850:	4688      	mov	r8, r1
    7852:	6817      	ldr	r7, [r2, #0]
    7854:	681d      	ldr	r5, [r3, #0]
    7856:	2c10      	cmp	r4, #16
    7858:	dcdb      	bgt.n	7812 <_vfprintf_r+0x33e>
    785a:	49c6      	ldr	r1, [pc, #792]	; (7b74 <_vfprintf_r+0x6a0>)
    785c:	22d0      	movs	r2, #208	; 0xd0
    785e:	00d2      	lsls	r2, r2, #3
    7860:	4640      	mov	r0, r8
    7862:	193f      	adds	r7, r7, r4
    7864:	4469      	add	r1, sp
    7866:	3501      	adds	r5, #1
    7868:	446a      	add	r2, sp
    786a:	6006      	str	r6, [r0, #0]
    786c:	6044      	str	r4, [r0, #4]
    786e:	600f      	str	r7, [r1, #0]
    7870:	6015      	str	r5, [r2, #0]
    7872:	2d07      	cmp	r5, #7
    7874:	dd01      	ble.n	787a <_vfprintf_r+0x3a6>
    7876:	f000 fde4 	bl	8442 <_vfprintf_r+0xf6e>
    787a:	2308      	movs	r3, #8
    787c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    787e:	4498      	add	r8, r3
    7880:	465b      	mov	r3, fp
    7882:	1ad4      	subs	r4, r2, r3
    7884:	2c00      	cmp	r4, #0
    7886:	dd00      	ble.n	788a <_vfprintf_r+0x3b6>
    7888:	e0ad      	b.n	79e6 <_vfprintf_r+0x512>
    788a:	9815      	ldr	r0, [sp, #84]	; 0x54
    788c:	05c0      	lsls	r0, r0, #23
    788e:	d500      	bpl.n	7892 <_vfprintf_r+0x3be>
    7890:	e0ed      	b.n	7a6e <_vfprintf_r+0x59a>
    7892:	4cb8      	ldr	r4, [pc, #736]	; (7b74 <_vfprintf_r+0x6a0>)
    7894:	20d0      	movs	r0, #208	; 0xd0
    7896:	9909      	ldr	r1, [sp, #36]	; 0x24
    7898:	00c0      	lsls	r0, r0, #3
    789a:	4642      	mov	r2, r8
    789c:	465b      	mov	r3, fp
    789e:	445f      	add	r7, fp
    78a0:	446c      	add	r4, sp
    78a2:	3501      	adds	r5, #1
    78a4:	4468      	add	r0, sp
    78a6:	6011      	str	r1, [r2, #0]
    78a8:	6053      	str	r3, [r2, #4]
    78aa:	6027      	str	r7, [r4, #0]
    78ac:	6005      	str	r5, [r0, #0]
    78ae:	2d07      	cmp	r5, #7
    78b0:	dd00      	ble.n	78b4 <_vfprintf_r+0x3e0>
    78b2:	e208      	b.n	7cc6 <_vfprintf_r+0x7f2>
    78b4:	3208      	adds	r2, #8
    78b6:	9c15      	ldr	r4, [sp, #84]	; 0x54
    78b8:	0764      	lsls	r4, r4, #29
    78ba:	d54c      	bpl.n	7956 <_vfprintf_r+0x482>
    78bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    78be:	4651      	mov	r1, sl
    78c0:	1a44      	subs	r4, r0, r1
    78c2:	2c00      	cmp	r4, #0
    78c4:	dd47      	ble.n	7956 <_vfprintf_r+0x482>
    78c6:	2c10      	cmp	r4, #16
    78c8:	dc01      	bgt.n	78ce <_vfprintf_r+0x3fa>
    78ca:	f000 ff56 	bl	877a <_vfprintf_r+0x12a6>
    78ce:	23d0      	movs	r3, #208	; 0xd0
    78d0:	00db      	lsls	r3, r3, #3
    78d2:	446b      	add	r3, sp
    78d4:	681d      	ldr	r5, [r3, #0]
    78d6:	4eaa      	ldr	r6, [pc, #680]	; (7b80 <_vfprintf_r+0x6ac>)
    78d8:	e003      	b.n	78e2 <_vfprintf_r+0x40e>
    78da:	3c10      	subs	r4, #16
    78dc:	3208      	adds	r2, #8
    78de:	2c10      	cmp	r4, #16
    78e0:	dd21      	ble.n	7926 <_vfprintf_r+0x452>
    78e2:	48a4      	ldr	r0, [pc, #656]	; (7b74 <_vfprintf_r+0x6a0>)
    78e4:	21d0      	movs	r1, #208	; 0xd0
    78e6:	00c9      	lsls	r1, r1, #3
    78e8:	2310      	movs	r3, #16
    78ea:	3710      	adds	r7, #16
    78ec:	4468      	add	r0, sp
    78ee:	3501      	adds	r5, #1
    78f0:	4469      	add	r1, sp
    78f2:	6016      	str	r6, [r2, #0]
    78f4:	6053      	str	r3, [r2, #4]
    78f6:	6007      	str	r7, [r0, #0]
    78f8:	600d      	str	r5, [r1, #0]
    78fa:	2d07      	cmp	r5, #7
    78fc:	dded      	ble.n	78da <_vfprintf_r+0x406>
    78fe:	499e      	ldr	r1, [pc, #632]	; (7b78 <_vfprintf_r+0x6a4>)
    7900:	4648      	mov	r0, r9
    7902:	4469      	add	r1, sp
    7904:	f7ff fdd6 	bl	74b4 <__sprint>
    7908:	2800      	cmp	r0, #0
    790a:	d000      	beq.n	790e <_vfprintf_r+0x43a>
    790c:	e113      	b.n	7b36 <_vfprintf_r+0x662>
    790e:	4b99      	ldr	r3, [pc, #612]	; (7b74 <_vfprintf_r+0x6a0>)
    7910:	20d0      	movs	r0, #208	; 0xd0
    7912:	4a9a      	ldr	r2, [pc, #616]	; (7b7c <_vfprintf_r+0x6a8>)
    7914:	00c0      	lsls	r0, r0, #3
    7916:	446b      	add	r3, sp
    7918:	4468      	add	r0, sp
    791a:	3c10      	subs	r4, #16
    791c:	446a      	add	r2, sp
    791e:	681f      	ldr	r7, [r3, #0]
    7920:	6805      	ldr	r5, [r0, #0]
    7922:	2c10      	cmp	r4, #16
    7924:	dcdd      	bgt.n	78e2 <_vfprintf_r+0x40e>
    7926:	6016      	str	r6, [r2, #0]
    7928:	6054      	str	r4, [r2, #4]
    792a:	23d0      	movs	r3, #208	; 0xd0
    792c:	4a91      	ldr	r2, [pc, #580]	; (7b74 <_vfprintf_r+0x6a0>)
    792e:	00db      	lsls	r3, r3, #3
    7930:	193f      	adds	r7, r7, r4
    7932:	446a      	add	r2, sp
    7934:	3501      	adds	r5, #1
    7936:	446b      	add	r3, sp
    7938:	6017      	str	r7, [r2, #0]
    793a:	601d      	str	r5, [r3, #0]
    793c:	2d07      	cmp	r5, #7
    793e:	dd0a      	ble.n	7956 <_vfprintf_r+0x482>
    7940:	498d      	ldr	r1, [pc, #564]	; (7b78 <_vfprintf_r+0x6a4>)
    7942:	4648      	mov	r0, r9
    7944:	4469      	add	r1, sp
    7946:	f7ff fdb5 	bl	74b4 <__sprint>
    794a:	2800      	cmp	r0, #0
    794c:	d000      	beq.n	7950 <_vfprintf_r+0x47c>
    794e:	e0f2      	b.n	7b36 <_vfprintf_r+0x662>
    7950:	4c88      	ldr	r4, [pc, #544]	; (7b74 <_vfprintf_r+0x6a0>)
    7952:	446c      	add	r4, sp
    7954:	6827      	ldr	r7, [r4, #0]
    7956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7958:	4553      	cmp	r3, sl
    795a:	da00      	bge.n	795e <_vfprintf_r+0x48a>
    795c:	4653      	mov	r3, sl
    795e:	980a      	ldr	r0, [sp, #40]	; 0x28
    7960:	18c0      	adds	r0, r0, r3
    7962:	900a      	str	r0, [sp, #40]	; 0x28
    7964:	2f00      	cmp	r7, #0
    7966:	d000      	beq.n	796a <_vfprintf_r+0x496>
    7968:	e0dd      	b.n	7b26 <_vfprintf_r+0x652>
    796a:	21d0      	movs	r1, #208	; 0xd0
    796c:	00c9      	lsls	r1, r1, #3
    796e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7970:	2500      	movs	r5, #0
    7972:	4469      	add	r1, sp
    7974:	600d      	str	r5, [r1, #0]
    7976:	2a00      	cmp	r2, #0
    7978:	d100      	bne.n	797c <_vfprintf_r+0x4a8>
    797a:	e0ef      	b.n	7b5c <_vfprintf_r+0x688>
    797c:	9805      	ldr	r0, [sp, #20]
    797e:	1c11      	adds	r1, r2, #0
    7980:	f002 fe2a 	bl	a5d8 <_free_r>
    7984:	4b7d      	ldr	r3, [pc, #500]	; (7b7c <_vfprintf_r+0x6a8>)
    7986:	9512      	str	r5, [sp, #72]	; 0x48
    7988:	446b      	add	r3, sp
    798a:	4698      	mov	r8, r3
    798c:	9816      	ldr	r0, [sp, #88]	; 0x58
    798e:	4682      	mov	sl, r0
    7990:	e62a      	b.n	75e8 <_vfprintf_r+0x114>
    7992:	4b78      	ldr	r3, [pc, #480]	; (7b74 <_vfprintf_r+0x6a0>)
    7994:	24d0      	movs	r4, #208	; 0xd0
    7996:	00e4      	lsls	r4, r4, #3
    7998:	446b      	add	r3, sp
    799a:	446c      	add	r4, sp
    799c:	681f      	ldr	r7, [r3, #0]
    799e:	6825      	ldr	r5, [r4, #0]
    79a0:	4a78      	ldr	r2, [pc, #480]	; (7b84 <_vfprintf_r+0x6b0>)
    79a2:	446a      	add	r2, sp
    79a4:	7813      	ldrb	r3, [r2, #0]
    79a6:	2b00      	cmp	r3, #0
    79a8:	d100      	bne.n	79ac <_vfprintf_r+0x4d8>
    79aa:	e6e0      	b.n	776e <_vfprintf_r+0x29a>
    79ac:	4871      	ldr	r0, [pc, #452]	; (7b74 <_vfprintf_r+0x6a0>)
    79ae:	21d0      	movs	r1, #208	; 0xd0
    79b0:	4643      	mov	r3, r8
    79b2:	00c9      	lsls	r1, r1, #3
    79b4:	601a      	str	r2, [r3, #0]
    79b6:	4644      	mov	r4, r8
    79b8:	2301      	movs	r3, #1
    79ba:	3701      	adds	r7, #1
    79bc:	4468      	add	r0, sp
    79be:	3501      	adds	r5, #1
    79c0:	4469      	add	r1, sp
    79c2:	6063      	str	r3, [r4, #4]
    79c4:	6007      	str	r7, [r0, #0]
    79c6:	600d      	str	r5, [r1, #0]
    79c8:	2d07      	cmp	r5, #7
    79ca:	dd00      	ble.n	79ce <_vfprintf_r+0x4fa>
    79cc:	e1bb      	b.n	7d46 <_vfprintf_r+0x872>
    79ce:	2208      	movs	r2, #8
    79d0:	4490      	add	r8, r2
    79d2:	9a06      	ldr	r2, [sp, #24]
    79d4:	2a80      	cmp	r2, #128	; 0x80
    79d6:	d100      	bne.n	79da <_vfprintf_r+0x506>
    79d8:	e6ea      	b.n	77b0 <_vfprintf_r+0x2dc>
    79da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    79dc:	465b      	mov	r3, fp
    79de:	1ad4      	subs	r4, r2, r3
    79e0:	2c00      	cmp	r4, #0
    79e2:	dc00      	bgt.n	79e6 <_vfprintf_r+0x512>
    79e4:	e751      	b.n	788a <_vfprintf_r+0x3b6>
    79e6:	2c10      	cmp	r4, #16
    79e8:	dc01      	bgt.n	79ee <_vfprintf_r+0x51a>
    79ea:	f000 fda2 	bl	8532 <_vfprintf_r+0x105e>
    79ee:	4e66      	ldr	r6, [pc, #408]	; (7b88 <_vfprintf_r+0x6b4>)
    79f0:	e004      	b.n	79fc <_vfprintf_r+0x528>
    79f2:	2308      	movs	r3, #8
    79f4:	3c10      	subs	r4, #16
    79f6:	4498      	add	r8, r3
    79f8:	2c10      	cmp	r4, #16
    79fa:	dd23      	ble.n	7a44 <_vfprintf_r+0x570>
    79fc:	495d      	ldr	r1, [pc, #372]	; (7b74 <_vfprintf_r+0x6a0>)
    79fe:	22d0      	movs	r2, #208	; 0xd0
    7a00:	00d2      	lsls	r2, r2, #3
    7a02:	4640      	mov	r0, r8
    7a04:	2310      	movs	r3, #16
    7a06:	3710      	adds	r7, #16
    7a08:	4469      	add	r1, sp
    7a0a:	3501      	adds	r5, #1
    7a0c:	446a      	add	r2, sp
    7a0e:	6006      	str	r6, [r0, #0]
    7a10:	6043      	str	r3, [r0, #4]
    7a12:	600f      	str	r7, [r1, #0]
    7a14:	6015      	str	r5, [r2, #0]
    7a16:	2d07      	cmp	r5, #7
    7a18:	ddeb      	ble.n	79f2 <_vfprintf_r+0x51e>
    7a1a:	4957      	ldr	r1, [pc, #348]	; (7b78 <_vfprintf_r+0x6a4>)
    7a1c:	4648      	mov	r0, r9
    7a1e:	4469      	add	r1, sp
    7a20:	f7ff fd48 	bl	74b4 <__sprint>
    7a24:	2800      	cmp	r0, #0
    7a26:	d000      	beq.n	7a2a <_vfprintf_r+0x556>
    7a28:	e085      	b.n	7b36 <_vfprintf_r+0x662>
    7a2a:	4854      	ldr	r0, [pc, #336]	; (7b7c <_vfprintf_r+0x6a8>)
    7a2c:	4951      	ldr	r1, [pc, #324]	; (7b74 <_vfprintf_r+0x6a0>)
    7a2e:	22d0      	movs	r2, #208	; 0xd0
    7a30:	00d2      	lsls	r2, r2, #3
    7a32:	4468      	add	r0, sp
    7a34:	4469      	add	r1, sp
    7a36:	446a      	add	r2, sp
    7a38:	3c10      	subs	r4, #16
    7a3a:	4680      	mov	r8, r0
    7a3c:	680f      	ldr	r7, [r1, #0]
    7a3e:	6815      	ldr	r5, [r2, #0]
    7a40:	2c10      	cmp	r4, #16
    7a42:	dcdb      	bgt.n	79fc <_vfprintf_r+0x528>
    7a44:	4643      	mov	r3, r8
    7a46:	193f      	adds	r7, r7, r4
    7a48:	605c      	str	r4, [r3, #4]
    7a4a:	20d0      	movs	r0, #208	; 0xd0
    7a4c:	4c49      	ldr	r4, [pc, #292]	; (7b74 <_vfprintf_r+0x6a0>)
    7a4e:	00c0      	lsls	r0, r0, #3
    7a50:	446c      	add	r4, sp
    7a52:	3501      	adds	r5, #1
    7a54:	4468      	add	r0, sp
    7a56:	601e      	str	r6, [r3, #0]
    7a58:	6027      	str	r7, [r4, #0]
    7a5a:	6005      	str	r5, [r0, #0]
    7a5c:	2d07      	cmp	r5, #7
    7a5e:	dd00      	ble.n	7a62 <_vfprintf_r+0x58e>
    7a60:	e15e      	b.n	7d20 <_vfprintf_r+0x84c>
    7a62:	9815      	ldr	r0, [sp, #84]	; 0x54
    7a64:	2108      	movs	r1, #8
    7a66:	4488      	add	r8, r1
    7a68:	05c0      	lsls	r0, r0, #23
    7a6a:	d400      	bmi.n	7a6e <_vfprintf_r+0x59a>
    7a6c:	e711      	b.n	7892 <_vfprintf_r+0x3be>
    7a6e:	9a08      	ldr	r2, [sp, #32]
    7a70:	2a65      	cmp	r2, #101	; 0x65
    7a72:	dd00      	ble.n	7a76 <_vfprintf_r+0x5a2>
    7a74:	e092      	b.n	7b9c <_vfprintf_r+0x6c8>
    7a76:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    7a78:	2c01      	cmp	r4, #1
    7a7a:	dc01      	bgt.n	7a80 <_vfprintf_r+0x5ac>
    7a7c:	f000 fd3f 	bl	84fe <_vfprintf_r+0x102a>
    7a80:	9909      	ldr	r1, [sp, #36]	; 0x24
    7a82:	4a42      	ldr	r2, [pc, #264]	; (7b8c <_vfprintf_r+0x6b8>)
    7a84:	780b      	ldrb	r3, [r1, #0]
    7a86:	446a      	add	r2, sp
    7a88:	7013      	strb	r3, [r2, #0]
    7a8a:	483a      	ldr	r0, [pc, #232]	; (7b74 <_vfprintf_r+0x6a0>)
    7a8c:	232e      	movs	r3, #46	; 0x2e
    7a8e:	21d0      	movs	r1, #208	; 0xd0
    7a90:	7053      	strb	r3, [r2, #1]
    7a92:	00c9      	lsls	r1, r1, #3
    7a94:	4643      	mov	r3, r8
    7a96:	601a      	str	r2, [r3, #0]
    7a98:	4644      	mov	r4, r8
    7a9a:	2302      	movs	r3, #2
    7a9c:	3702      	adds	r7, #2
    7a9e:	4468      	add	r0, sp
    7aa0:	3501      	adds	r5, #1
    7aa2:	4469      	add	r1, sp
    7aa4:	6063      	str	r3, [r4, #4]
    7aa6:	6007      	str	r7, [r0, #0]
    7aa8:	600d      	str	r5, [r1, #0]
    7aaa:	2d07      	cmp	r5, #7
    7aac:	dd01      	ble.n	7ab2 <_vfprintf_r+0x5de>
    7aae:	f000 fcdd 	bl	846c <_vfprintf_r+0xf98>
    7ab2:	2208      	movs	r2, #8
    7ab4:	4490      	add	r8, r2
    7ab6:	9813      	ldr	r0, [sp, #76]	; 0x4c
    7ab8:	9914      	ldr	r1, [sp, #80]	; 0x50
    7aba:	4a35      	ldr	r2, [pc, #212]	; (7b90 <_vfprintf_r+0x6bc>)
    7abc:	4b35      	ldr	r3, [pc, #212]	; (7b94 <_vfprintf_r+0x6c0>)
    7abe:	f00a ff37 	bl	12930 <____nedf2_from_thumb>
    7ac2:	2800      	cmp	r0, #0
    7ac4:	d100      	bne.n	7ac8 <_vfprintf_r+0x5f4>
    7ac6:	e1bc      	b.n	7e42 <_vfprintf_r+0x96e>
    7ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7aca:	4641      	mov	r1, r8
    7acc:	3301      	adds	r3, #1
    7ace:	600b      	str	r3, [r1, #0]
    7ad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7ad2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7ad4:	3b01      	subs	r3, #1
    7ad6:	604b      	str	r3, [r1, #4]
    7ad8:	19d3      	adds	r3, r2, r7
    7ada:	1e5f      	subs	r7, r3, #1
    7adc:	24d0      	movs	r4, #208	; 0xd0
    7ade:	4b25      	ldr	r3, [pc, #148]	; (7b74 <_vfprintf_r+0x6a0>)
    7ae0:	00e4      	lsls	r4, r4, #3
    7ae2:	446b      	add	r3, sp
    7ae4:	3501      	adds	r5, #1
    7ae6:	446c      	add	r4, sp
    7ae8:	601f      	str	r7, [r3, #0]
    7aea:	6025      	str	r5, [r4, #0]
    7aec:	2d07      	cmp	r5, #7
    7aee:	dd01      	ble.n	7af4 <_vfprintf_r+0x620>
    7af0:	f000 fd53 	bl	859a <_vfprintf_r+0x10c6>
    7af4:	2008      	movs	r0, #8
    7af6:	4480      	add	r8, r0
    7af8:	980e      	ldr	r0, [sp, #56]	; 0x38
    7afa:	4b27      	ldr	r3, [pc, #156]	; (7b98 <_vfprintf_r+0x6c4>)
    7afc:	491d      	ldr	r1, [pc, #116]	; (7b74 <_vfprintf_r+0x6a0>)
    7afe:	22d0      	movs	r2, #208	; 0xd0
    7b00:	00d2      	lsls	r2, r2, #3
    7b02:	4644      	mov	r4, r8
    7b04:	446b      	add	r3, sp
    7b06:	183f      	adds	r7, r7, r0
    7b08:	4469      	add	r1, sp
    7b0a:	3501      	adds	r5, #1
    7b0c:	446a      	add	r2, sp
    7b0e:	6023      	str	r3, [r4, #0]
    7b10:	6060      	str	r0, [r4, #4]
    7b12:	600f      	str	r7, [r1, #0]
    7b14:	6015      	str	r5, [r2, #0]
    7b16:	2d07      	cmp	r5, #7
    7b18:	dd00      	ble.n	7b1c <_vfprintf_r+0x648>
    7b1a:	e1fc      	b.n	7f16 <_vfprintf_r+0xa42>
    7b1c:	4642      	mov	r2, r8
    7b1e:	e6c9      	b.n	78b4 <_vfprintf_r+0x3e0>
    7b20:	9a07      	ldr	r2, [sp, #28]
    7b22:	1aa6      	subs	r6, r4, r2
    7b24:	e573      	b.n	760e <_vfprintf_r+0x13a>
    7b26:	4914      	ldr	r1, [pc, #80]	; (7b78 <_vfprintf_r+0x6a4>)
    7b28:	4648      	mov	r0, r9
    7b2a:	4469      	add	r1, sp
    7b2c:	f7ff fcc2 	bl	74b4 <__sprint>
    7b30:	2800      	cmp	r0, #0
    7b32:	d100      	bne.n	7b36 <_vfprintf_r+0x662>
    7b34:	e719      	b.n	796a <_vfprintf_r+0x496>
    7b36:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7b38:	2b00      	cmp	r3, #0
    7b3a:	d003      	beq.n	7b44 <_vfprintf_r+0x670>
    7b3c:	9805      	ldr	r0, [sp, #20]
    7b3e:	9912      	ldr	r1, [sp, #72]	; 0x48
    7b40:	f002 fd4a 	bl	a5d8 <_free_r>
    7b44:	464c      	mov	r4, r9
    7b46:	89a3      	ldrh	r3, [r4, #12]
    7b48:	0658      	lsls	r0, r3, #25
    7b4a:	d400      	bmi.n	7b4e <_vfprintf_r+0x67a>
    7b4c:	e527      	b.n	759e <_vfprintf_r+0xca>
    7b4e:	2101      	movs	r1, #1
    7b50:	4249      	negs	r1, r1
    7b52:	910a      	str	r1, [sp, #40]	; 0x28
    7b54:	e523      	b.n	759e <_vfprintf_r+0xca>
    7b56:	f002 fc37 	bl	a3c8 <__sinit>
    7b5a:	e4d2      	b.n	7502 <_vfprintf_r+0x2e>
    7b5c:	4c07      	ldr	r4, [pc, #28]	; (7b7c <_vfprintf_r+0x6a8>)
    7b5e:	446c      	add	r4, sp
    7b60:	46a0      	mov	r8, r4
    7b62:	e713      	b.n	798c <_vfprintf_r+0x4b8>
    7b64:	4648      	mov	r0, r9
    7b66:	f001 fbdd 	bl	9324 <__swsetup>
    7b6a:	2800      	cmp	r0, #0
    7b6c:	d1ef      	bne.n	7b4e <_vfprintf_r+0x67a>
    7b6e:	464c      	mov	r4, r9
    7b70:	89a2      	ldrh	r2, [r4, #12]
    7b72:	e4cf      	b.n	7514 <_vfprintf_r+0x40>
    7b74:	00000684 	.word	0x00000684
    7b78:	0000067c 	.word	0x0000067c
    7b7c:	00000614 	.word	0x00000614
    7b80:	00012be8 	.word	0x00012be8
    7b84:	000006b3 	.word	0x000006b3
    7b88:	00012bd8 	.word	0x00012bd8
    7b8c:	000006b1 	.word	0x000006b1
	...
    7b98:	00000699 	.word	0x00000699
    7b9c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    7b9e:	9914      	ldr	r1, [sp, #80]	; 0x50
    7ba0:	4be5      	ldr	r3, [pc, #916]	; (7f38 <_vfprintf_r+0xa64>)
    7ba2:	4ae4      	ldr	r2, [pc, #912]	; (7f34 <_vfprintf_r+0xa60>)
    7ba4:	f00a fea8 	bl	128f8 <____eqdf2_from_thumb>
    7ba8:	2800      	cmp	r0, #0
    7baa:	d000      	beq.n	7bae <_vfprintf_r+0x6da>
    7bac:	e0f9      	b.n	7da2 <_vfprintf_r+0x8ce>
    7bae:	4be3      	ldr	r3, [pc, #908]	; (7f3c <_vfprintf_r+0xa68>)
    7bb0:	48e3      	ldr	r0, [pc, #908]	; (7f40 <_vfprintf_r+0xa6c>)
    7bb2:	21d0      	movs	r1, #208	; 0xd0
    7bb4:	4644      	mov	r4, r8
    7bb6:	00c9      	lsls	r1, r1, #3
    7bb8:	6023      	str	r3, [r4, #0]
    7bba:	3701      	adds	r7, #1
    7bbc:	2301      	movs	r3, #1
    7bbe:	4468      	add	r0, sp
    7bc0:	3501      	adds	r5, #1
    7bc2:	4469      	add	r1, sp
    7bc4:	6063      	str	r3, [r4, #4]
    7bc6:	6007      	str	r7, [r0, #0]
    7bc8:	600d      	str	r5, [r1, #0]
    7bca:	2d07      	cmp	r5, #7
    7bcc:	dd01      	ble.n	7bd2 <_vfprintf_r+0x6fe>
    7bce:	f000 fcbe 	bl	854e <_vfprintf_r+0x107a>
    7bd2:	4642      	mov	r2, r8
    7bd4:	3208      	adds	r2, #8
    7bd6:	4cdb      	ldr	r4, [pc, #876]	; (7f44 <_vfprintf_r+0xa70>)
    7bd8:	446c      	add	r4, sp
    7bda:	6823      	ldr	r3, [r4, #0]
    7bdc:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7bde:	4298      	cmp	r0, r3
    7be0:	dc00      	bgt.n	7be4 <_vfprintf_r+0x710>
    7be2:	e1c5      	b.n	7f70 <_vfprintf_r+0xa9c>
    7be4:	20d0      	movs	r0, #208	; 0xd0
    7be6:	00c0      	lsls	r0, r0, #3
    7be8:	4468      	add	r0, sp
    7bea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7bec:	6805      	ldr	r5, [r0, #0]
    7bee:	4cd4      	ldr	r4, [pc, #848]	; (7f40 <_vfprintf_r+0xa6c>)
    7bf0:	6013      	str	r3, [r2, #0]
    7bf2:	3701      	adds	r7, #1
    7bf4:	2301      	movs	r3, #1
    7bf6:	446c      	add	r4, sp
    7bf8:	3501      	adds	r5, #1
    7bfa:	6053      	str	r3, [r2, #4]
    7bfc:	6027      	str	r7, [r4, #0]
    7bfe:	6005      	str	r5, [r0, #0]
    7c00:	2d07      	cmp	r5, #7
    7c02:	dd00      	ble.n	7c06 <_vfprintf_r+0x732>
    7c04:	e384      	b.n	8310 <_vfprintf_r+0xe3c>
    7c06:	3208      	adds	r2, #8
    7c08:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    7c0a:	3c01      	subs	r4, #1
    7c0c:	2c00      	cmp	r4, #0
    7c0e:	dc00      	bgt.n	7c12 <_vfprintf_r+0x73e>
    7c10:	e651      	b.n	78b6 <_vfprintf_r+0x3e2>
    7c12:	2c10      	cmp	r4, #16
    7c14:	dc01      	bgt.n	7c1a <_vfprintf_r+0x746>
    7c16:	f000 fc3e 	bl	8496 <_vfprintf_r+0xfc2>
    7c1a:	23d0      	movs	r3, #208	; 0xd0
    7c1c:	00db      	lsls	r3, r3, #3
    7c1e:	446b      	add	r3, sp
    7c20:	681d      	ldr	r5, [r3, #0]
    7c22:	4ec9      	ldr	r6, [pc, #804]	; (7f48 <_vfprintf_r+0xa74>)
    7c24:	e005      	b.n	7c32 <_vfprintf_r+0x75e>
    7c26:	3208      	adds	r2, #8
    7c28:	3c10      	subs	r4, #16
    7c2a:	2c10      	cmp	r4, #16
    7c2c:	dc01      	bgt.n	7c32 <_vfprintf_r+0x75e>
    7c2e:	f000 fc37 	bl	84a0 <_vfprintf_r+0xfcc>
    7c32:	48c3      	ldr	r0, [pc, #780]	; (7f40 <_vfprintf_r+0xa6c>)
    7c34:	21d0      	movs	r1, #208	; 0xd0
    7c36:	00c9      	lsls	r1, r1, #3
    7c38:	2310      	movs	r3, #16
    7c3a:	3710      	adds	r7, #16
    7c3c:	4468      	add	r0, sp
    7c3e:	3501      	adds	r5, #1
    7c40:	4469      	add	r1, sp
    7c42:	6016      	str	r6, [r2, #0]
    7c44:	6053      	str	r3, [r2, #4]
    7c46:	6007      	str	r7, [r0, #0]
    7c48:	600d      	str	r5, [r1, #0]
    7c4a:	2d07      	cmp	r5, #7
    7c4c:	ddeb      	ble.n	7c26 <_vfprintf_r+0x752>
    7c4e:	49bf      	ldr	r1, [pc, #764]	; (7f4c <_vfprintf_r+0xa78>)
    7c50:	4648      	mov	r0, r9
    7c52:	4469      	add	r1, sp
    7c54:	f7ff fc2e 	bl	74b4 <__sprint>
    7c58:	2800      	cmp	r0, #0
    7c5a:	d000      	beq.n	7c5e <_vfprintf_r+0x78a>
    7c5c:	e76b      	b.n	7b36 <_vfprintf_r+0x662>
    7c5e:	4bb8      	ldr	r3, [pc, #736]	; (7f40 <_vfprintf_r+0xa6c>)
    7c60:	20d0      	movs	r0, #208	; 0xd0
    7c62:	00c0      	lsls	r0, r0, #3
    7c64:	4aba      	ldr	r2, [pc, #744]	; (7f50 <_vfprintf_r+0xa7c>)
    7c66:	446b      	add	r3, sp
    7c68:	4468      	add	r0, sp
    7c6a:	681f      	ldr	r7, [r3, #0]
    7c6c:	6805      	ldr	r5, [r0, #0]
    7c6e:	446a      	add	r2, sp
    7c70:	e7da      	b.n	7c28 <_vfprintf_r+0x754>
    7c72:	2301      	movs	r3, #1
    7c74:	425b      	negs	r3, r3
    7c76:	930a      	str	r3, [sp, #40]	; 0x28
    7c78:	89a3      	ldrh	r3, [r4, #12]
    7c7a:	065c      	lsls	r4, r3, #25
    7c7c:	d500      	bpl.n	7c80 <_vfprintf_r+0x7ac>
    7c7e:	e488      	b.n	7592 <_vfprintf_r+0xbe>
    7c80:	e48d      	b.n	759e <_vfprintf_r+0xca>
    7c82:	49b2      	ldr	r1, [pc, #712]	; (7f4c <_vfprintf_r+0xa78>)
    7c84:	4648      	mov	r0, r9
    7c86:	4469      	add	r1, sp
    7c88:	f7ff fc14 	bl	74b4 <__sprint>
    7c8c:	2800      	cmp	r0, #0
    7c8e:	d000      	beq.n	7c92 <_vfprintf_r+0x7be>
    7c90:	e751      	b.n	7b36 <_vfprintf_r+0x662>
    7c92:	48ab      	ldr	r0, [pc, #684]	; (7f40 <_vfprintf_r+0xa6c>)
    7c94:	4aae      	ldr	r2, [pc, #696]	; (7f50 <_vfprintf_r+0xa7c>)
    7c96:	4468      	add	r0, sp
    7c98:	6807      	ldr	r7, [r0, #0]
    7c9a:	446a      	add	r2, sp
    7c9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7c9e:	2101      	movs	r1, #1
    7ca0:	420b      	tst	r3, r1
    7ca2:	d100      	bne.n	7ca6 <_vfprintf_r+0x7d2>
    7ca4:	e607      	b.n	78b6 <_vfprintf_r+0x3e2>
    7ca6:	20d0      	movs	r0, #208	; 0xd0
    7ca8:	00c0      	lsls	r0, r0, #3
    7caa:	4468      	add	r0, sp
    7cac:	6805      	ldr	r5, [r0, #0]
    7cae:	4ca4      	ldr	r4, [pc, #656]	; (7f40 <_vfprintf_r+0xa6c>)
    7cb0:	4ba8      	ldr	r3, [pc, #672]	; (7f54 <_vfprintf_r+0xa80>)
    7cb2:	3701      	adds	r7, #1
    7cb4:	446c      	add	r4, sp
    7cb6:	3501      	adds	r5, #1
    7cb8:	6013      	str	r3, [r2, #0]
    7cba:	6051      	str	r1, [r2, #4]
    7cbc:	6027      	str	r7, [r4, #0]
    7cbe:	6005      	str	r5, [r0, #0]
    7cc0:	2d07      	cmp	r5, #7
    7cc2:	dc00      	bgt.n	7cc6 <_vfprintf_r+0x7f2>
    7cc4:	e5f6      	b.n	78b4 <_vfprintf_r+0x3e0>
    7cc6:	49a1      	ldr	r1, [pc, #644]	; (7f4c <_vfprintf_r+0xa78>)
    7cc8:	4648      	mov	r0, r9
    7cca:	4469      	add	r1, sp
    7ccc:	f7ff fbf2 	bl	74b4 <__sprint>
    7cd0:	2800      	cmp	r0, #0
    7cd2:	d000      	beq.n	7cd6 <_vfprintf_r+0x802>
    7cd4:	e72f      	b.n	7b36 <_vfprintf_r+0x662>
    7cd6:	499a      	ldr	r1, [pc, #616]	; (7f40 <_vfprintf_r+0xa6c>)
    7cd8:	4a9d      	ldr	r2, [pc, #628]	; (7f50 <_vfprintf_r+0xa7c>)
    7cda:	4469      	add	r1, sp
    7cdc:	680f      	ldr	r7, [r1, #0]
    7cde:	446a      	add	r2, sp
    7ce0:	e5e9      	b.n	78b6 <_vfprintf_r+0x3e2>
    7ce2:	499a      	ldr	r1, [pc, #616]	; (7f4c <_vfprintf_r+0xa78>)
    7ce4:	4648      	mov	r0, r9
    7ce6:	4469      	add	r1, sp
    7ce8:	f7ff fbe4 	bl	74b4 <__sprint>
    7cec:	2800      	cmp	r0, #0
    7cee:	d000      	beq.n	7cf2 <_vfprintf_r+0x81e>
    7cf0:	e721      	b.n	7b36 <_vfprintf_r+0x662>
    7cf2:	4893      	ldr	r0, [pc, #588]	; (7f40 <_vfprintf_r+0xa6c>)
    7cf4:	21d0      	movs	r1, #208	; 0xd0
    7cf6:	4c96      	ldr	r4, [pc, #600]	; (7f50 <_vfprintf_r+0xa7c>)
    7cf8:	00c9      	lsls	r1, r1, #3
    7cfa:	4468      	add	r0, sp
    7cfc:	4469      	add	r1, sp
    7cfe:	446c      	add	r4, sp
    7d00:	6807      	ldr	r7, [r0, #0]
    7d02:	680d      	ldr	r5, [r1, #0]
    7d04:	46a0      	mov	r8, r4
    7d06:	e664      	b.n	79d2 <_vfprintf_r+0x4fe>
    7d08:	4990      	ldr	r1, [pc, #576]	; (7f4c <_vfprintf_r+0xa78>)
    7d0a:	4648      	mov	r0, r9
    7d0c:	4469      	add	r1, sp
    7d0e:	f7ff fbd1 	bl	74b4 <__sprint>
    7d12:	2800      	cmp	r0, #0
    7d14:	d000      	beq.n	7d18 <_vfprintf_r+0x844>
    7d16:	e715      	b.n	7b44 <_vfprintf_r+0x670>
    7d18:	498d      	ldr	r1, [pc, #564]	; (7f50 <_vfprintf_r+0xa7c>)
    7d1a:	4469      	add	r1, sp
    7d1c:	4688      	mov	r8, r1
    7d1e:	e48f      	b.n	7640 <_vfprintf_r+0x16c>
    7d20:	498a      	ldr	r1, [pc, #552]	; (7f4c <_vfprintf_r+0xa78>)
    7d22:	4648      	mov	r0, r9
    7d24:	4469      	add	r1, sp
    7d26:	f7ff fbc5 	bl	74b4 <__sprint>
    7d2a:	2800      	cmp	r0, #0
    7d2c:	d000      	beq.n	7d30 <_vfprintf_r+0x85c>
    7d2e:	e702      	b.n	7b36 <_vfprintf_r+0x662>
    7d30:	4b83      	ldr	r3, [pc, #524]	; (7f40 <_vfprintf_r+0xa6c>)
    7d32:	24d0      	movs	r4, #208	; 0xd0
    7d34:	4a86      	ldr	r2, [pc, #536]	; (7f50 <_vfprintf_r+0xa7c>)
    7d36:	00e4      	lsls	r4, r4, #3
    7d38:	446b      	add	r3, sp
    7d3a:	446c      	add	r4, sp
    7d3c:	446a      	add	r2, sp
    7d3e:	681f      	ldr	r7, [r3, #0]
    7d40:	6825      	ldr	r5, [r4, #0]
    7d42:	4690      	mov	r8, r2
    7d44:	e5a1      	b.n	788a <_vfprintf_r+0x3b6>
    7d46:	4981      	ldr	r1, [pc, #516]	; (7f4c <_vfprintf_r+0xa78>)
    7d48:	4648      	mov	r0, r9
    7d4a:	4469      	add	r1, sp
    7d4c:	f7ff fbb2 	bl	74b4 <__sprint>
    7d50:	2800      	cmp	r0, #0
    7d52:	d000      	beq.n	7d56 <_vfprintf_r+0x882>
    7d54:	e6ef      	b.n	7b36 <_vfprintf_r+0x662>
    7d56:	4c7a      	ldr	r4, [pc, #488]	; (7f40 <_vfprintf_r+0xa6c>)
    7d58:	20d0      	movs	r0, #208	; 0xd0
    7d5a:	4b7d      	ldr	r3, [pc, #500]	; (7f50 <_vfprintf_r+0xa7c>)
    7d5c:	00c0      	lsls	r0, r0, #3
    7d5e:	446c      	add	r4, sp
    7d60:	4468      	add	r0, sp
    7d62:	446b      	add	r3, sp
    7d64:	6827      	ldr	r7, [r4, #0]
    7d66:	6805      	ldr	r5, [r0, #0]
    7d68:	4698      	mov	r8, r3
    7d6a:	e632      	b.n	79d2 <_vfprintf_r+0x4fe>
    7d6c:	4874      	ldr	r0, [pc, #464]	; (7f40 <_vfprintf_r+0xa6c>)
    7d6e:	21d0      	movs	r1, #208	; 0xd0
    7d70:	00c9      	lsls	r1, r1, #3
    7d72:	4468      	add	r0, sp
    7d74:	4469      	add	r1, sp
    7d76:	6807      	ldr	r7, [r0, #0]
    7d78:	680d      	ldr	r5, [r1, #0]
    7d7a:	e611      	b.n	79a0 <_vfprintf_r+0x4cc>
    7d7c:	4973      	ldr	r1, [pc, #460]	; (7f4c <_vfprintf_r+0xa78>)
    7d7e:	4648      	mov	r0, r9
    7d80:	4469      	add	r1, sp
    7d82:	f7ff fb97 	bl	74b4 <__sprint>
    7d86:	2800      	cmp	r0, #0
    7d88:	d000      	beq.n	7d8c <_vfprintf_r+0x8b8>
    7d8a:	e6d4      	b.n	7b36 <_vfprintf_r+0x662>
    7d8c:	496c      	ldr	r1, [pc, #432]	; (7f40 <_vfprintf_r+0xa6c>)
    7d8e:	22d0      	movs	r2, #208	; 0xd0
    7d90:	486f      	ldr	r0, [pc, #444]	; (7f50 <_vfprintf_r+0xa7c>)
    7d92:	00d2      	lsls	r2, r2, #3
    7d94:	4469      	add	r1, sp
    7d96:	446a      	add	r2, sp
    7d98:	4468      	add	r0, sp
    7d9a:	680f      	ldr	r7, [r1, #0]
    7d9c:	6815      	ldr	r5, [r2, #0]
    7d9e:	4680      	mov	r8, r0
    7da0:	e5fe      	b.n	79a0 <_vfprintf_r+0x4cc>
    7da2:	4968      	ldr	r1, [pc, #416]	; (7f44 <_vfprintf_r+0xa70>)
    7da4:	4469      	add	r1, sp
    7da6:	6808      	ldr	r0, [r1, #0]
    7da8:	2800      	cmp	r0, #0
    7daa:	dc01      	bgt.n	7db0 <_vfprintf_r+0x8dc>
    7dac:	f000 fc2b 	bl	8606 <_vfprintf_r+0x1132>
    7db0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7db2:	4281      	cmp	r1, r0
    7db4:	dc77      	bgt.n	7ea6 <_vfprintf_r+0x9d2>
    7db6:	4643      	mov	r3, r8
    7db8:	19cf      	adds	r7, r1, r7
    7dba:	6059      	str	r1, [r3, #4]
    7dbc:	4c60      	ldr	r4, [pc, #384]	; (7f40 <_vfprintf_r+0xa6c>)
    7dbe:	21d0      	movs	r1, #208	; 0xd0
    7dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7dc2:	00c9      	lsls	r1, r1, #3
    7dc4:	446c      	add	r4, sp
    7dc6:	3501      	adds	r5, #1
    7dc8:	4469      	add	r1, sp
    7dca:	601a      	str	r2, [r3, #0]
    7dcc:	6027      	str	r7, [r4, #0]
    7dce:	600d      	str	r5, [r1, #0]
    7dd0:	2d07      	cmp	r5, #7
    7dd2:	dd01      	ble.n	7dd8 <_vfprintf_r+0x904>
    7dd4:	f000 fd88 	bl	88e8 <_vfprintf_r+0x1414>
    7dd8:	4642      	mov	r2, r8
    7dda:	3208      	adds	r2, #8
    7ddc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7dde:	1a44      	subs	r4, r0, r1
    7de0:	2c00      	cmp	r4, #0
    7de2:	dc00      	bgt.n	7de6 <_vfprintf_r+0x912>
    7de4:	e75a      	b.n	7c9c <_vfprintf_r+0x7c8>
    7de6:	2c10      	cmp	r4, #16
    7de8:	dc00      	bgt.n	7dec <_vfprintf_r+0x918>
    7dea:	e3eb      	b.n	85c4 <_vfprintf_r+0x10f0>
    7dec:	23d0      	movs	r3, #208	; 0xd0
    7dee:	00db      	lsls	r3, r3, #3
    7df0:	446b      	add	r3, sp
    7df2:	681d      	ldr	r5, [r3, #0]
    7df4:	4e54      	ldr	r6, [pc, #336]	; (7f48 <_vfprintf_r+0xa74>)
    7df6:	e004      	b.n	7e02 <_vfprintf_r+0x92e>
    7df8:	3208      	adds	r2, #8
    7dfa:	3c10      	subs	r4, #16
    7dfc:	2c10      	cmp	r4, #16
    7dfe:	dc00      	bgt.n	7e02 <_vfprintf_r+0x92e>
    7e00:	e3e5      	b.n	85ce <_vfprintf_r+0x10fa>
    7e02:	484f      	ldr	r0, [pc, #316]	; (7f40 <_vfprintf_r+0xa6c>)
    7e04:	21d0      	movs	r1, #208	; 0xd0
    7e06:	00c9      	lsls	r1, r1, #3
    7e08:	2310      	movs	r3, #16
    7e0a:	3710      	adds	r7, #16
    7e0c:	4468      	add	r0, sp
    7e0e:	3501      	adds	r5, #1
    7e10:	4469      	add	r1, sp
    7e12:	6016      	str	r6, [r2, #0]
    7e14:	6053      	str	r3, [r2, #4]
    7e16:	6007      	str	r7, [r0, #0]
    7e18:	600d      	str	r5, [r1, #0]
    7e1a:	2d07      	cmp	r5, #7
    7e1c:	ddec      	ble.n	7df8 <_vfprintf_r+0x924>
    7e1e:	494b      	ldr	r1, [pc, #300]	; (7f4c <_vfprintf_r+0xa78>)
    7e20:	4648      	mov	r0, r9
    7e22:	4469      	add	r1, sp
    7e24:	f7ff fb46 	bl	74b4 <__sprint>
    7e28:	2800      	cmp	r0, #0
    7e2a:	d000      	beq.n	7e2e <_vfprintf_r+0x95a>
    7e2c:	e683      	b.n	7b36 <_vfprintf_r+0x662>
    7e2e:	4b44      	ldr	r3, [pc, #272]	; (7f40 <_vfprintf_r+0xa6c>)
    7e30:	20d0      	movs	r0, #208	; 0xd0
    7e32:	00c0      	lsls	r0, r0, #3
    7e34:	4a46      	ldr	r2, [pc, #280]	; (7f50 <_vfprintf_r+0xa7c>)
    7e36:	446b      	add	r3, sp
    7e38:	4468      	add	r0, sp
    7e3a:	681f      	ldr	r7, [r3, #0]
    7e3c:	6805      	ldr	r5, [r0, #0]
    7e3e:	446a      	add	r2, sp
    7e40:	e7db      	b.n	7dfa <_vfprintf_r+0x926>
    7e42:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    7e44:	3c01      	subs	r4, #1
    7e46:	2c00      	cmp	r4, #0
    7e48:	dc00      	bgt.n	7e4c <_vfprintf_r+0x978>
    7e4a:	e655      	b.n	7af8 <_vfprintf_r+0x624>
    7e4c:	2c10      	cmp	r4, #16
    7e4e:	dc00      	bgt.n	7e52 <_vfprintf_r+0x97e>
    7e50:	e2e3      	b.n	841a <_vfprintf_r+0xf46>
    7e52:	4e3d      	ldr	r6, [pc, #244]	; (7f48 <_vfprintf_r+0xa74>)
    7e54:	e005      	b.n	7e62 <_vfprintf_r+0x98e>
    7e56:	2308      	movs	r3, #8
    7e58:	4498      	add	r8, r3
    7e5a:	3c10      	subs	r4, #16
    7e5c:	2c10      	cmp	r4, #16
    7e5e:	dc00      	bgt.n	7e62 <_vfprintf_r+0x98e>
    7e60:	e2dc      	b.n	841c <_vfprintf_r+0xf48>
    7e62:	4937      	ldr	r1, [pc, #220]	; (7f40 <_vfprintf_r+0xa6c>)
    7e64:	22d0      	movs	r2, #208	; 0xd0
    7e66:	00d2      	lsls	r2, r2, #3
    7e68:	4640      	mov	r0, r8
    7e6a:	2310      	movs	r3, #16
    7e6c:	3710      	adds	r7, #16
    7e6e:	4469      	add	r1, sp
    7e70:	3501      	adds	r5, #1
    7e72:	446a      	add	r2, sp
    7e74:	6006      	str	r6, [r0, #0]
    7e76:	6043      	str	r3, [r0, #4]
    7e78:	600f      	str	r7, [r1, #0]
    7e7a:	6015      	str	r5, [r2, #0]
    7e7c:	2d07      	cmp	r5, #7
    7e7e:	ddea      	ble.n	7e56 <_vfprintf_r+0x982>
    7e80:	4932      	ldr	r1, [pc, #200]	; (7f4c <_vfprintf_r+0xa78>)
    7e82:	4648      	mov	r0, r9
    7e84:	4469      	add	r1, sp
    7e86:	f7ff fb15 	bl	74b4 <__sprint>
    7e8a:	2800      	cmp	r0, #0
    7e8c:	d000      	beq.n	7e90 <_vfprintf_r+0x9bc>
    7e8e:	e652      	b.n	7b36 <_vfprintf_r+0x662>
    7e90:	492b      	ldr	r1, [pc, #172]	; (7f40 <_vfprintf_r+0xa6c>)
    7e92:	22d0      	movs	r2, #208	; 0xd0
    7e94:	482e      	ldr	r0, [pc, #184]	; (7f50 <_vfprintf_r+0xa7c>)
    7e96:	00d2      	lsls	r2, r2, #3
    7e98:	4469      	add	r1, sp
    7e9a:	446a      	add	r2, sp
    7e9c:	4468      	add	r0, sp
    7e9e:	680f      	ldr	r7, [r1, #0]
    7ea0:	6815      	ldr	r5, [r2, #0]
    7ea2:	4680      	mov	r8, r0
    7ea4:	e7d9      	b.n	7e5a <_vfprintf_r+0x986>
    7ea6:	4c26      	ldr	r4, [pc, #152]	; (7f40 <_vfprintf_r+0xa6c>)
    7ea8:	21d0      	movs	r1, #208	; 0xd0
    7eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7eac:	00c9      	lsls	r1, r1, #3
    7eae:	4643      	mov	r3, r8
    7eb0:	183f      	adds	r7, r7, r0
    7eb2:	446c      	add	r4, sp
    7eb4:	3501      	adds	r5, #1
    7eb6:	4469      	add	r1, sp
    7eb8:	601a      	str	r2, [r3, #0]
    7eba:	6058      	str	r0, [r3, #4]
    7ebc:	6027      	str	r7, [r4, #0]
    7ebe:	600d      	str	r5, [r1, #0]
    7ec0:	2d07      	cmp	r5, #7
    7ec2:	dd01      	ble.n	7ec8 <_vfprintf_r+0x9f4>
    7ec4:	f000 fcf6 	bl	88b4 <_vfprintf_r+0x13e0>
    7ec8:	4642      	mov	r2, r8
    7eca:	3208      	adds	r2, #8
    7ecc:	4b21      	ldr	r3, [pc, #132]	; (7f54 <_vfprintf_r+0xa80>)
    7ece:	6013      	str	r3, [r2, #0]
    7ed0:	2301      	movs	r3, #1
    7ed2:	6053      	str	r3, [r2, #4]
    7ed4:	21d0      	movs	r1, #208	; 0xd0
    7ed6:	4b1a      	ldr	r3, [pc, #104]	; (7f40 <_vfprintf_r+0xa6c>)
    7ed8:	00c9      	lsls	r1, r1, #3
    7eda:	3701      	adds	r7, #1
    7edc:	446b      	add	r3, sp
    7ede:	3501      	adds	r5, #1
    7ee0:	4469      	add	r1, sp
    7ee2:	1c04      	adds	r4, r0, #0
    7ee4:	601f      	str	r7, [r3, #0]
    7ee6:	600d      	str	r5, [r1, #0]
    7ee8:	2d07      	cmp	r5, #7
    7eea:	dd01      	ble.n	7ef0 <_vfprintf_r+0xa1c>
    7eec:	f000 fccb 	bl	8886 <_vfprintf_r+0x13b2>
    7ef0:	3208      	adds	r2, #8
    7ef2:	9909      	ldr	r1, [sp, #36]	; 0x24
    7ef4:	1863      	adds	r3, r4, r1
    7ef6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    7ef8:	6013      	str	r3, [r2, #0]
    7efa:	21d0      	movs	r1, #208	; 0xd0
    7efc:	1a23      	subs	r3, r4, r0
    7efe:	4810      	ldr	r0, [pc, #64]	; (7f40 <_vfprintf_r+0xa6c>)
    7f00:	00c9      	lsls	r1, r1, #3
    7f02:	18ff      	adds	r7, r7, r3
    7f04:	4468      	add	r0, sp
    7f06:	3501      	adds	r5, #1
    7f08:	4469      	add	r1, sp
    7f0a:	6053      	str	r3, [r2, #4]
    7f0c:	6007      	str	r7, [r0, #0]
    7f0e:	600d      	str	r5, [r1, #0]
    7f10:	2d07      	cmp	r5, #7
    7f12:	dc00      	bgt.n	7f16 <_vfprintf_r+0xa42>
    7f14:	e4ce      	b.n	78b4 <_vfprintf_r+0x3e0>
    7f16:	490d      	ldr	r1, [pc, #52]	; (7f4c <_vfprintf_r+0xa78>)
    7f18:	4648      	mov	r0, r9
    7f1a:	4469      	add	r1, sp
    7f1c:	f7ff faca 	bl	74b4 <__sprint>
    7f20:	2800      	cmp	r0, #0
    7f22:	d000      	beq.n	7f26 <_vfprintf_r+0xa52>
    7f24:	e607      	b.n	7b36 <_vfprintf_r+0x662>
    7f26:	4b06      	ldr	r3, [pc, #24]	; (7f40 <_vfprintf_r+0xa6c>)
    7f28:	4a09      	ldr	r2, [pc, #36]	; (7f50 <_vfprintf_r+0xa7c>)
    7f2a:	446b      	add	r3, sp
    7f2c:	681f      	ldr	r7, [r3, #0]
    7f2e:	446a      	add	r2, sp
    7f30:	e4c1      	b.n	78b6 <_vfprintf_r+0x3e2>
    7f32:	46c0      	nop			; (mov r8, r8)
	...
    7f3c:	00012a64 	.word	0x00012a64
    7f40:	00000684 	.word	0x00000684
    7f44:	000006ac 	.word	0x000006ac
    7f48:	00012bd8 	.word	0x00012bd8
    7f4c:	0000067c 	.word	0x0000067c
    7f50:	00000614 	.word	0x00000614
    7f54:	00012a68 	.word	0x00012a68
    7f58:	49e3      	ldr	r1, [pc, #908]	; (82e8 <_vfprintf_r+0xe14>)
    7f5a:	4469      	add	r1, sp
    7f5c:	680b      	ldr	r3, [r1, #0]
    7f5e:	2b00      	cmp	r3, #0
    7f60:	d000      	beq.n	7f64 <_vfprintf_r+0xa90>
    7f62:	e1e4      	b.n	832e <_vfprintf_r+0xe5a>
    7f64:	22d0      	movs	r2, #208	; 0xd0
    7f66:	00d2      	lsls	r2, r2, #3
    7f68:	2300      	movs	r3, #0
    7f6a:	446a      	add	r2, sp
    7f6c:	6013      	str	r3, [r2, #0]
    7f6e:	e5e9      	b.n	7b44 <_vfprintf_r+0x670>
    7f70:	9915      	ldr	r1, [sp, #84]	; 0x54
    7f72:	07c9      	lsls	r1, r1, #31
    7f74:	d400      	bmi.n	7f78 <_vfprintf_r+0xaa4>
    7f76:	e49e      	b.n	78b6 <_vfprintf_r+0x3e2>
    7f78:	e634      	b.n	7be4 <_vfprintf_r+0x710>
    7f7a:	9c15      	ldr	r4, [sp, #84]	; 0x54
    7f7c:	2310      	movs	r3, #16
    7f7e:	431c      	orrs	r4, r3
    7f80:	9415      	str	r4, [sp, #84]	; 0x54
    7f82:	9815      	ldr	r0, [sp, #84]	; 0x54
    7f84:	06c0      	lsls	r0, r0, #27
    7f86:	d500      	bpl.n	7f8a <_vfprintf_r+0xab6>
    7f88:	e2a9      	b.n	84de <_vfprintf_r+0x100a>
    7f8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7f8c:	065b      	lsls	r3, r3, #25
    7f8e:	d400      	bmi.n	7f92 <_vfprintf_r+0xabe>
    7f90:	e2a5      	b.n	84de <_vfprintf_r+0x100a>
    7f92:	4654      	mov	r4, sl
    7f94:	3404      	adds	r4, #4
    7f96:	4650      	mov	r0, sl
    7f98:	9416      	str	r4, [sp, #88]	; 0x58
    7f9a:	8804      	ldrh	r4, [r0, #0]
    7f9c:	2201      	movs	r2, #1
    7f9e:	49d3      	ldr	r1, [pc, #844]	; (82ec <_vfprintf_r+0xe18>)
    7fa0:	2300      	movs	r3, #0
    7fa2:	4469      	add	r1, sp
    7fa4:	700b      	strb	r3, [r1, #0]
    7fa6:	2e00      	cmp	r6, #0
    7fa8:	db03      	blt.n	7fb2 <_vfprintf_r+0xade>
    7faa:	9815      	ldr	r0, [sp, #84]	; 0x54
    7fac:	2380      	movs	r3, #128	; 0x80
    7fae:	4398      	bics	r0, r3
    7fb0:	9015      	str	r0, [sp, #84]	; 0x54
    7fb2:	2c00      	cmp	r4, #0
    7fb4:	d000      	beq.n	7fb8 <_vfprintf_r+0xae4>
    7fb6:	e1cf      	b.n	8358 <_vfprintf_r+0xe84>
    7fb8:	2e00      	cmp	r6, #0
    7fba:	d000      	beq.n	7fbe <_vfprintf_r+0xaea>
    7fbc:	e1cc      	b.n	8358 <_vfprintf_r+0xe84>
    7fbe:	2a00      	cmp	r2, #0
    7fc0:	d100      	bne.n	7fc4 <_vfprintf_r+0xaf0>
    7fc2:	e2b9      	b.n	8538 <_vfprintf_r+0x1064>
    7fc4:	23b7      	movs	r3, #183	; 0xb7
    7fc6:	00db      	lsls	r3, r3, #3
    7fc8:	446b      	add	r3, sp
    7fca:	4dc9      	ldr	r5, [pc, #804]	; (82f0 <_vfprintf_r+0xe1c>)
    7fcc:	9309      	str	r3, [sp, #36]	; 0x24
    7fce:	446d      	add	r5, sp
    7fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7fd2:	24ae      	movs	r4, #174	; 0xae
    7fd4:	1aab      	subs	r3, r5, r2
    7fd6:	0064      	lsls	r4, r4, #1
    7fd8:	18e4      	adds	r4, r4, r3
    7fda:	46b2      	mov	sl, r6
    7fdc:	46a3      	mov	fp, r4
    7fde:	45a2      	cmp	sl, r4
    7fe0:	da00      	bge.n	7fe4 <_vfprintf_r+0xb10>
    7fe2:	46a2      	mov	sl, r4
    7fe4:	48c3      	ldr	r0, [pc, #780]	; (82f4 <_vfprintf_r+0xe20>)
    7fe6:	4468      	add	r0, sp
    7fe8:	9610      	str	r6, [sp, #64]	; 0x40
    7fea:	9004      	str	r0, [sp, #16]
    7fec:	48bf      	ldr	r0, [pc, #764]	; (82ec <_vfprintf_r+0xe18>)
    7fee:	4468      	add	r0, sp
    7ff0:	7803      	ldrb	r3, [r0, #0]
    7ff2:	2b00      	cmp	r3, #0
    7ff4:	d101      	bne.n	7ffa <_vfprintf_r+0xb26>
    7ff6:	f7ff fb5c 	bl	76b2 <_vfprintf_r+0x1de>
    7ffa:	2101      	movs	r1, #1
    7ffc:	448a      	add	sl, r1
    7ffe:	f7ff fb5d 	bl	76bc <_vfprintf_r+0x1e8>
    8002:	9815      	ldr	r0, [sp, #84]	; 0x54
    8004:	2310      	movs	r3, #16
    8006:	4318      	orrs	r0, r3
    8008:	9015      	str	r0, [sp, #84]	; 0x54
    800a:	9915      	ldr	r1, [sp, #84]	; 0x54
    800c:	06c9      	lsls	r1, r1, #27
    800e:	d500      	bpl.n	8012 <_vfprintf_r+0xb3e>
    8010:	e26e      	b.n	84f0 <_vfprintf_r+0x101c>
    8012:	9c15      	ldr	r4, [sp, #84]	; 0x54
    8014:	0664      	lsls	r4, r4, #25
    8016:	d400      	bmi.n	801a <_vfprintf_r+0xb46>
    8018:	e26a      	b.n	84f0 <_vfprintf_r+0x101c>
    801a:	4651      	mov	r1, sl
    801c:	4650      	mov	r0, sl
    801e:	880c      	ldrh	r4, [r1, #0]
    8020:	3004      	adds	r0, #4
    8022:	2200      	movs	r2, #0
    8024:	9016      	str	r0, [sp, #88]	; 0x58
    8026:	e7ba      	b.n	7f9e <_vfprintf_r+0xaca>
    8028:	9915      	ldr	r1, [sp, #84]	; 0x54
    802a:	2310      	movs	r3, #16
    802c:	4319      	orrs	r1, r3
    802e:	9115      	str	r1, [sp, #84]	; 0x54
    8030:	9a15      	ldr	r2, [sp, #84]	; 0x54
    8032:	06d2      	lsls	r2, r2, #27
    8034:	d400      	bmi.n	8038 <_vfprintf_r+0xb64>
    8036:	e2a4      	b.n	8582 <_vfprintf_r+0x10ae>
    8038:	4653      	mov	r3, sl
    803a:	3304      	adds	r3, #4
    803c:	4650      	mov	r0, sl
    803e:	9316      	str	r3, [sp, #88]	; 0x58
    8040:	6804      	ldr	r4, [r0, #0]
    8042:	2c00      	cmp	r4, #0
    8044:	da00      	bge.n	8048 <_vfprintf_r+0xb74>
    8046:	e17c      	b.n	8342 <_vfprintf_r+0xe6e>
    8048:	2201      	movs	r2, #1
    804a:	e7ac      	b.n	7fa6 <_vfprintf_r+0xad2>
    804c:	4249      	negs	r1, r1
    804e:	910b      	str	r1, [sp, #44]	; 0x2c
    8050:	469a      	mov	sl, r3
    8052:	2304      	movs	r3, #4
    8054:	9a15      	ldr	r2, [sp, #84]	; 0x54
    8056:	431a      	orrs	r2, r3
    8058:	9215      	str	r2, [sp, #84]	; 0x54
    805a:	9b07      	ldr	r3, [sp, #28]
    805c:	781a      	ldrb	r2, [r3, #0]
    805e:	f7ff fb05 	bl	766c <_vfprintf_r+0x198>
    8062:	4ca2      	ldr	r4, [pc, #648]	; (82ec <_vfprintf_r+0xe18>)
    8064:	2300      	movs	r3, #0
    8066:	446c      	add	r4, sp
    8068:	7023      	strb	r3, [r4, #0]
    806a:	4651      	mov	r1, sl
    806c:	4650      	mov	r0, sl
    806e:	6809      	ldr	r1, [r1, #0]
    8070:	3004      	adds	r0, #4
    8072:	9016      	str	r0, [sp, #88]	; 0x58
    8074:	9109      	str	r1, [sp, #36]	; 0x24
    8076:	2900      	cmp	r1, #0
    8078:	d101      	bne.n	807e <_vfprintf_r+0xbaa>
    807a:	f000 fcc0 	bl	89fe <_vfprintf_r+0x152a>
    807e:	9a08      	ldr	r2, [sp, #32]
    8080:	2a53      	cmp	r2, #83	; 0x53
    8082:	d100      	bne.n	8086 <_vfprintf_r+0xbb2>
    8084:	e392      	b.n	87ac <_vfprintf_r+0x12d8>
    8086:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8088:	06db      	lsls	r3, r3, #27
    808a:	d500      	bpl.n	808e <_vfprintf_r+0xbba>
    808c:	e38e      	b.n	87ac <_vfprintf_r+0x12d8>
    808e:	2e00      	cmp	r6, #0
    8090:	da01      	bge.n	8096 <_vfprintf_r+0xbc2>
    8092:	f000 fdfd 	bl	8c90 <_vfprintf_r+0x17bc>
    8096:	9809      	ldr	r0, [sp, #36]	; 0x24
    8098:	2100      	movs	r1, #0
    809a:	1c32      	adds	r2, r6, #0
    809c:	f003 f888 	bl	b1b0 <memchr>
    80a0:	2800      	cmp	r0, #0
    80a2:	d101      	bne.n	80a8 <_vfprintf_r+0xbd4>
    80a4:	f000 fe49 	bl	8d3a <_vfprintf_r+0x1866>
    80a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    80aa:	1ac3      	subs	r3, r0, r3
    80ac:	469b      	mov	fp, r3
    80ae:	455e      	cmp	r6, fp
    80b0:	da01      	bge.n	80b6 <_vfprintf_r+0xbe2>
    80b2:	f000 fdb9 	bl	8c28 <_vfprintf_r+0x1754>
    80b6:	2b00      	cmp	r3, #0
    80b8:	469a      	mov	sl, r3
    80ba:	da01      	bge.n	80c0 <_vfprintf_r+0xbec>
    80bc:	2400      	movs	r4, #0
    80be:	46a2      	mov	sl, r4
    80c0:	498c      	ldr	r1, [pc, #560]	; (82f4 <_vfprintf_r+0xe20>)
    80c2:	2000      	movs	r0, #0
    80c4:	4469      	add	r1, sp
    80c6:	9010      	str	r0, [sp, #64]	; 0x40
    80c8:	9104      	str	r1, [sp, #16]
    80ca:	e78f      	b.n	7fec <_vfprintf_r+0xb18>
    80cc:	9815      	ldr	r0, [sp, #84]	; 0x54
    80ce:	2310      	movs	r3, #16
    80d0:	4318      	orrs	r0, r3
    80d2:	9015      	str	r0, [sp, #84]	; 0x54
    80d4:	9907      	ldr	r1, [sp, #28]
    80d6:	780a      	ldrb	r2, [r1, #0]
    80d8:	f7ff fac8 	bl	766c <_vfprintf_r+0x198>
    80dc:	1c73      	adds	r3, r6, #1
    80de:	d101      	bne.n	80e4 <_vfprintf_r+0xc10>
    80e0:	f000 fc5a 	bl	8998 <_vfprintf_r+0x14c4>
    80e4:	9c08      	ldr	r4, [sp, #32]
    80e6:	2c67      	cmp	r4, #103	; 0x67
    80e8:	d101      	bne.n	80ee <_vfprintf_r+0xc1a>
    80ea:	f000 fc10 	bl	890e <_vfprintf_r+0x143a>
    80ee:	2c47      	cmp	r4, #71	; 0x47
    80f0:	d101      	bne.n	80f6 <_vfprintf_r+0xc22>
    80f2:	f000 fc0c 	bl	890e <_vfprintf_r+0x143a>
    80f6:	9815      	ldr	r0, [sp, #84]	; 0x54
    80f8:	0700      	lsls	r0, r0, #28
    80fa:	d400      	bmi.n	80fe <_vfprintf_r+0xc2a>
    80fc:	e32e      	b.n	875c <_vfprintf_r+0x1288>
    80fe:	4653      	mov	r3, sl
    8100:	681a      	ldr	r2, [r3, #0]
    8102:	685b      	ldr	r3, [r3, #4]
    8104:	4651      	mov	r1, sl
    8106:	3108      	adds	r1, #8
    8108:	9213      	str	r2, [sp, #76]	; 0x4c
    810a:	9314      	str	r3, [sp, #80]	; 0x50
    810c:	9116      	str	r1, [sp, #88]	; 0x58
    810e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8110:	9914      	ldr	r1, [sp, #80]	; 0x50
    8112:	f003 ff6d 	bl	bff0 <isinf>
    8116:	2800      	cmp	r0, #0
    8118:	d101      	bne.n	811e <_vfprintf_r+0xc4a>
    811a:	f000 fc1c 	bl	8956 <_vfprintf_r+0x1482>
    811e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8120:	9914      	ldr	r1, [sp, #80]	; 0x50
    8122:	4a75      	ldr	r2, [pc, #468]	; (82f8 <_vfprintf_r+0xe24>)
    8124:	4b75      	ldr	r3, [pc, #468]	; (82fc <_vfprintf_r+0xe28>)
    8126:	f00a fbdf 	bl	128e8 <____ltdf2_from_thumb>
    812a:	2800      	cmp	r0, #0
    812c:	da01      	bge.n	8132 <_vfprintf_r+0xc5e>
    812e:	f000 fc71 	bl	8a14 <_vfprintf_r+0x1540>
    8132:	9b08      	ldr	r3, [sp, #32]
    8134:	3b45      	subs	r3, #69	; 0x45
    8136:	2b02      	cmp	r3, #2
    8138:	d900      	bls.n	813c <_vfprintf_r+0xc68>
    813a:	e3ef      	b.n	891c <_vfprintf_r+0x1448>
    813c:	496d      	ldr	r1, [pc, #436]	; (82f4 <_vfprintf_r+0xe20>)
    813e:	2003      	movs	r0, #3
    8140:	4b6f      	ldr	r3, [pc, #444]	; (8300 <_vfprintf_r+0xe2c>)
    8142:	2400      	movs	r4, #0
    8144:	4469      	add	r1, sp
    8146:	4683      	mov	fp, r0
    8148:	4682      	mov	sl, r0
    814a:	9309      	str	r3, [sp, #36]	; 0x24
    814c:	9410      	str	r4, [sp, #64]	; 0x40
    814e:	9104      	str	r1, [sp, #16]
    8150:	e74c      	b.n	7fec <_vfprintf_r+0xb18>
    8152:	9a08      	ldr	r2, [sp, #32]
    8154:	2a43      	cmp	r2, #67	; 0x43
    8156:	d100      	bne.n	815a <_vfprintf_r+0xc86>
    8158:	e2d7      	b.n	870a <_vfprintf_r+0x1236>
    815a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    815c:	06db      	lsls	r3, r3, #27
    815e:	d500      	bpl.n	8162 <_vfprintf_r+0xc8e>
    8160:	e2d3      	b.n	870a <_vfprintf_r+0x1236>
    8162:	4d63      	ldr	r5, [pc, #396]	; (82f0 <_vfprintf_r+0xe1c>)
    8164:	4652      	mov	r2, sl
    8166:	6813      	ldr	r3, [r2, #0]
    8168:	4651      	mov	r1, sl
    816a:	3104      	adds	r1, #4
    816c:	446d      	add	r5, sp
    816e:	9116      	str	r1, [sp, #88]	; 0x58
    8170:	702b      	strb	r3, [r5, #0]
    8172:	2301      	movs	r3, #1
    8174:	469b      	mov	fp, r3
    8176:	4c5d      	ldr	r4, [pc, #372]	; (82ec <_vfprintf_r+0xe18>)
    8178:	2300      	movs	r3, #0
    817a:	446c      	add	r4, sp
    817c:	4658      	mov	r0, fp
    817e:	7023      	strb	r3, [r4, #0]
    8180:	2800      	cmp	r0, #0
    8182:	4682      	mov	sl, r0
    8184:	da00      	bge.n	8188 <_vfprintf_r+0xcb4>
    8186:	e0e3      	b.n	8350 <_vfprintf_r+0xe7c>
    8188:	9509      	str	r5, [sp, #36]	; 0x24
    818a:	f7ff fa8d 	bl	76a8 <_vfprintf_r+0x1d4>
    818e:	4b5d      	ldr	r3, [pc, #372]	; (8304 <_vfprintf_r+0xe30>)
    8190:	9311      	str	r3, [sp, #68]	; 0x44
    8192:	9c15      	ldr	r4, [sp, #84]	; 0x54
    8194:	06e4      	lsls	r4, r4, #27
    8196:	d400      	bmi.n	819a <_vfprintf_r+0xcc6>
    8198:	e1e9      	b.n	856e <_vfprintf_r+0x109a>
    819a:	4650      	mov	r0, sl
    819c:	3004      	adds	r0, #4
    819e:	4651      	mov	r1, sl
    81a0:	9016      	str	r0, [sp, #88]	; 0x58
    81a2:	680c      	ldr	r4, [r1, #0]
    81a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    81a6:	07db      	lsls	r3, r3, #31
    81a8:	d400      	bmi.n	81ac <_vfprintf_r+0xcd8>
    81aa:	e19f      	b.n	84ec <_vfprintf_r+0x1018>
    81ac:	2c00      	cmp	r4, #0
    81ae:	d100      	bne.n	81b2 <_vfprintf_r+0xcde>
    81b0:	e19c      	b.n	84ec <_vfprintf_r+0x1018>
    81b2:	9815      	ldr	r0, [sp, #84]	; 0x54
    81b4:	2302      	movs	r3, #2
    81b6:	4318      	orrs	r0, r3
    81b8:	2202      	movs	r2, #2
    81ba:	9015      	str	r0, [sp, #84]	; 0x54
    81bc:	e6ef      	b.n	7f9e <_vfprintf_r+0xaca>
    81be:	2200      	movs	r2, #0
    81c0:	0093      	lsls	r3, r2, #2
    81c2:	9807      	ldr	r0, [sp, #28]
    81c4:	189b      	adds	r3, r3, r2
    81c6:	9c08      	ldr	r4, [sp, #32]
    81c8:	7800      	ldrb	r0, [r0, #0]
    81ca:	005b      	lsls	r3, r3, #1
    81cc:	18e3      	adds	r3, r4, r3
    81ce:	9907      	ldr	r1, [sp, #28]
    81d0:	1c1a      	adds	r2, r3, #0
    81d2:	1c03      	adds	r3, r0, #0
    81d4:	3101      	adds	r1, #1
    81d6:	3b30      	subs	r3, #48	; 0x30
    81d8:	3a30      	subs	r2, #48	; 0x30
    81da:	9008      	str	r0, [sp, #32]
    81dc:	9107      	str	r1, [sp, #28]
    81de:	2b09      	cmp	r3, #9
    81e0:	d9ee      	bls.n	81c0 <_vfprintf_r+0xcec>
    81e2:	920b      	str	r2, [sp, #44]	; 0x2c
    81e4:	f7ff fa46 	bl	7674 <_vfprintf_r+0x1a0>
    81e8:	2380      	movs	r3, #128	; 0x80
    81ea:	e733      	b.n	8054 <_vfprintf_r+0xb80>
    81ec:	9907      	ldr	r1, [sp, #28]
    81ee:	780b      	ldrb	r3, [r1, #0]
    81f0:	3101      	adds	r1, #1
    81f2:	9107      	str	r1, [sp, #28]
    81f4:	2b2a      	cmp	r3, #42	; 0x2a
    81f6:	d101      	bne.n	81fc <_vfprintf_r+0xd28>
    81f8:	f000 fe42 	bl	8e80 <_vfprintf_r+0x19ac>
    81fc:	9308      	str	r3, [sp, #32]
    81fe:	3b30      	subs	r3, #48	; 0x30
    8200:	2b09      	cmp	r3, #9
    8202:	d901      	bls.n	8208 <_vfprintf_r+0xd34>
    8204:	f000 fd1d 	bl	8c42 <_vfprintf_r+0x176e>
    8208:	2200      	movs	r2, #0
    820a:	0093      	lsls	r3, r2, #2
    820c:	9807      	ldr	r0, [sp, #28]
    820e:	189b      	adds	r3, r3, r2
    8210:	9c08      	ldr	r4, [sp, #32]
    8212:	7800      	ldrb	r0, [r0, #0]
    8214:	005b      	lsls	r3, r3, #1
    8216:	191b      	adds	r3, r3, r4
    8218:	9907      	ldr	r1, [sp, #28]
    821a:	1c1a      	adds	r2, r3, #0
    821c:	1c03      	adds	r3, r0, #0
    821e:	3101      	adds	r1, #1
    8220:	3b30      	subs	r3, #48	; 0x30
    8222:	3a30      	subs	r2, #48	; 0x30
    8224:	9008      	str	r0, [sp, #32]
    8226:	9107      	str	r1, [sp, #28]
    8228:	2b09      	cmp	r3, #9
    822a:	d9ee      	bls.n	820a <_vfprintf_r+0xd36>
    822c:	1e16      	subs	r6, r2, #0
    822e:	db01      	blt.n	8234 <_vfprintf_r+0xd60>
    8230:	f7ff fa20 	bl	7674 <_vfprintf_r+0x1a0>
    8234:	2601      	movs	r6, #1
    8236:	4276      	negs	r6, r6
    8238:	f7ff fa1c 	bl	7674 <_vfprintf_r+0x1a0>
    823c:	4a2b      	ldr	r2, [pc, #172]	; (82ec <_vfprintf_r+0xe18>)
    823e:	446a      	add	r2, sp
    8240:	7813      	ldrb	r3, [r2, #0]
    8242:	2b00      	cmp	r3, #0
    8244:	d000      	beq.n	8248 <_vfprintf_r+0xd74>
    8246:	e29f      	b.n	8788 <_vfprintf_r+0x12b4>
    8248:	2320      	movs	r3, #32
    824a:	7013      	strb	r3, [r2, #0]
    824c:	9b07      	ldr	r3, [sp, #28]
    824e:	781a      	ldrb	r2, [r3, #0]
    8250:	f7ff fa0c 	bl	766c <_vfprintf_r+0x198>
    8254:	4651      	mov	r1, sl
    8256:	6809      	ldr	r1, [r1, #0]
    8258:	4653      	mov	r3, sl
    825a:	3304      	adds	r3, #4
    825c:	910b      	str	r1, [sp, #44]	; 0x2c
    825e:	2900      	cmp	r1, #0
    8260:	da00      	bge.n	8264 <_vfprintf_r+0xd90>
    8262:	e6f3      	b.n	804c <_vfprintf_r+0xb78>
    8264:	469a      	mov	sl, r3
    8266:	9b07      	ldr	r3, [sp, #28]
    8268:	781a      	ldrb	r2, [r3, #0]
    826a:	f7ff f9ff 	bl	766c <_vfprintf_r+0x198>
    826e:	4c1f      	ldr	r4, [pc, #124]	; (82ec <_vfprintf_r+0xe18>)
    8270:	232b      	movs	r3, #43	; 0x2b
    8272:	446c      	add	r4, sp
    8274:	7023      	strb	r3, [r4, #0]
    8276:	9807      	ldr	r0, [sp, #28]
    8278:	7802      	ldrb	r2, [r0, #0]
    827a:	f7ff f9f7 	bl	766c <_vfprintf_r+0x198>
    827e:	2301      	movs	r3, #1
    8280:	9c15      	ldr	r4, [sp, #84]	; 0x54
    8282:	431c      	orrs	r4, r3
    8284:	9415      	str	r4, [sp, #84]	; 0x54
    8286:	9807      	ldr	r0, [sp, #28]
    8288:	7802      	ldrb	r2, [r0, #0]
    828a:	f7ff f9ef 	bl	766c <_vfprintf_r+0x198>
    828e:	491e      	ldr	r1, [pc, #120]	; (8308 <_vfprintf_r+0xe34>)
    8290:	9111      	str	r1, [sp, #68]	; 0x44
    8292:	e77e      	b.n	8192 <_vfprintf_r+0xcbe>
    8294:	9915      	ldr	r1, [sp, #84]	; 0x54
    8296:	06c9      	lsls	r1, r1, #27
    8298:	d400      	bmi.n	829c <_vfprintf_r+0xdc8>
    829a:	e279      	b.n	8790 <_vfprintf_r+0x12bc>
    829c:	4654      	mov	r4, sl
    829e:	4652      	mov	r2, sl
    82a0:	6823      	ldr	r3, [r4, #0]
    82a2:	980a      	ldr	r0, [sp, #40]	; 0x28
    82a4:	3204      	adds	r2, #4
    82a6:	9216      	str	r2, [sp, #88]	; 0x58
    82a8:	6018      	str	r0, [r3, #0]
    82aa:	f7ff fb6f 	bl	798c <_vfprintf_r+0x4b8>
    82ae:	9907      	ldr	r1, [sp, #28]
    82b0:	780a      	ldrb	r2, [r1, #0]
    82b2:	2a6c      	cmp	r2, #108	; 0x6c
    82b4:	d100      	bne.n	82b8 <_vfprintf_r+0xde4>
    82b6:	e366      	b.n	8986 <_vfprintf_r+0x14b2>
    82b8:	9c15      	ldr	r4, [sp, #84]	; 0x54
    82ba:	2310      	movs	r3, #16
    82bc:	431c      	orrs	r4, r3
    82be:	9415      	str	r4, [sp, #84]	; 0x54
    82c0:	f7ff f9d4 	bl	766c <_vfprintf_r+0x198>
    82c4:	2308      	movs	r3, #8
    82c6:	e6c5      	b.n	8054 <_vfprintf_r+0xb80>
    82c8:	9915      	ldr	r1, [sp, #84]	; 0x54
    82ca:	4654      	mov	r4, sl
    82cc:	3404      	adds	r4, #4
    82ce:	2302      	movs	r3, #2
    82d0:	4650      	mov	r0, sl
    82d2:	4319      	orrs	r1, r3
    82d4:	2278      	movs	r2, #120	; 0x78
    82d6:	9416      	str	r4, [sp, #88]	; 0x58
    82d8:	4b0b      	ldr	r3, [pc, #44]	; (8308 <_vfprintf_r+0xe34>)
    82da:	6804      	ldr	r4, [r0, #0]
    82dc:	9208      	str	r2, [sp, #32]
    82de:	2202      	movs	r2, #2
    82e0:	9115      	str	r1, [sp, #84]	; 0x54
    82e2:	9311      	str	r3, [sp, #68]	; 0x44
    82e4:	e65b      	b.n	7f9e <_vfprintf_r+0xaca>
    82e6:	46c0      	nop			; (mov r8, r8)
    82e8:	00000684 	.word	0x00000684
    82ec:	000006b3 	.word	0x000006b3
    82f0:	0000045c 	.word	0x0000045c
    82f4:	0000067c 	.word	0x0000067c
	...
    8300:	00012a24 	.word	0x00012a24
    8304:	00012a30 	.word	0x00012a30
    8308:	00012a10 	.word	0x00012a10
    830c:	2340      	movs	r3, #64	; 0x40
    830e:	e7b7      	b.n	8280 <_vfprintf_r+0xdac>
    8310:	49d7      	ldr	r1, [pc, #860]	; (8670 <_vfprintf_r+0x119c>)
    8312:	4648      	mov	r0, r9
    8314:	4469      	add	r1, sp
    8316:	f7ff f8cd 	bl	74b4 <__sprint>
    831a:	2800      	cmp	r0, #0
    831c:	d001      	beq.n	8322 <_vfprintf_r+0xe4e>
    831e:	f7ff fc0a 	bl	7b36 <_vfprintf_r+0x662>
    8322:	49d4      	ldr	r1, [pc, #848]	; (8674 <_vfprintf_r+0x11a0>)
    8324:	4ad4      	ldr	r2, [pc, #848]	; (8678 <_vfprintf_r+0x11a4>)
    8326:	4469      	add	r1, sp
    8328:	680f      	ldr	r7, [r1, #0]
    832a:	446a      	add	r2, sp
    832c:	e46c      	b.n	7c08 <_vfprintf_r+0x734>
    832e:	49d0      	ldr	r1, [pc, #832]	; (8670 <_vfprintf_r+0x119c>)
    8330:	4648      	mov	r0, r9
    8332:	4469      	add	r1, sp
    8334:	f7ff f8be 	bl	74b4 <__sprint>
    8338:	2800      	cmp	r0, #0
    833a:	d001      	beq.n	8340 <_vfprintf_r+0xe6c>
    833c:	f7ff fc02 	bl	7b44 <_vfprintf_r+0x670>
    8340:	e610      	b.n	7f64 <_vfprintf_r+0xa90>
    8342:	4ace      	ldr	r2, [pc, #824]	; (867c <_vfprintf_r+0x11a8>)
    8344:	232d      	movs	r3, #45	; 0x2d
    8346:	446a      	add	r2, sp
    8348:	7013      	strb	r3, [r2, #0]
    834a:	4264      	negs	r4, r4
    834c:	2201      	movs	r2, #1
    834e:	e62a      	b.n	7fa6 <_vfprintf_r+0xad2>
    8350:	469a      	mov	sl, r3
    8352:	9509      	str	r5, [sp, #36]	; 0x24
    8354:	f7ff f9a8 	bl	76a8 <_vfprintf_r+0x1d4>
    8358:	2a01      	cmp	r2, #1
    835a:	d041      	beq.n	83e0 <_vfprintf_r+0xf0c>
    835c:	2a01      	cmp	r2, #1
    835e:	d310      	bcc.n	8382 <_vfprintf_r+0xeae>
    8360:	2a02      	cmp	r2, #2
    8362:	d02a      	beq.n	83ba <_vfprintf_r+0xee6>
    8364:	4cc6      	ldr	r4, [pc, #792]	; (8680 <_vfprintf_r+0x11ac>)
    8366:	1c20      	adds	r0, r4, #0
    8368:	f003 ff02 	bl	c170 <strlen>
    836c:	46b2      	mov	sl, r6
    836e:	4683      	mov	fp, r0
    8370:	4582      	cmp	sl, r0
    8372:	da00      	bge.n	8376 <_vfprintf_r+0xea2>
    8374:	4682      	mov	sl, r0
    8376:	4abe      	ldr	r2, [pc, #760]	; (8670 <_vfprintf_r+0x119c>)
    8378:	446a      	add	r2, sp
    837a:	9610      	str	r6, [sp, #64]	; 0x40
    837c:	9409      	str	r4, [sp, #36]	; 0x24
    837e:	9204      	str	r2, [sp, #16]
    8380:	e634      	b.n	7fec <_vfprintf_r+0xb18>
    8382:	22b7      	movs	r2, #183	; 0xb7
    8384:	00d2      	lsls	r2, r2, #3
    8386:	446a      	add	r2, sp
    8388:	9209      	str	r2, [sp, #36]	; 0x24
    838a:	2207      	movs	r2, #7
    838c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    838e:	3b01      	subs	r3, #1
    8390:	9309      	str	r3, [sp, #36]	; 0x24
    8392:	1c23      	adds	r3, r4, #0
    8394:	4013      	ands	r3, r2
    8396:	9809      	ldr	r0, [sp, #36]	; 0x24
    8398:	3330      	adds	r3, #48	; 0x30
    839a:	08e4      	lsrs	r4, r4, #3
    839c:	7003      	strb	r3, [r0, #0]
    839e:	2c00      	cmp	r4, #0
    83a0:	d1f4      	bne.n	838c <_vfprintf_r+0xeb8>
    83a2:	9915      	ldr	r1, [sp, #84]	; 0x54
    83a4:	07c9      	lsls	r1, r1, #31
    83a6:	d518      	bpl.n	83da <_vfprintf_r+0xf06>
    83a8:	2b30      	cmp	r3, #48	; 0x30
    83aa:	d016      	beq.n	83da <_vfprintf_r+0xf06>
    83ac:	4db5      	ldr	r5, [pc, #724]	; (8684 <_vfprintf_r+0x11b0>)
    83ae:	3801      	subs	r0, #1
    83b0:	2330      	movs	r3, #48	; 0x30
    83b2:	446d      	add	r5, sp
    83b4:	9009      	str	r0, [sp, #36]	; 0x24
    83b6:	7003      	strb	r3, [r0, #0]
    83b8:	e60a      	b.n	7fd0 <_vfprintf_r+0xafc>
    83ba:	23b7      	movs	r3, #183	; 0xb7
    83bc:	00db      	lsls	r3, r3, #3
    83be:	446b      	add	r3, sp
    83c0:	9309      	str	r3, [sp, #36]	; 0x24
    83c2:	220f      	movs	r2, #15
    83c4:	9809      	ldr	r0, [sp, #36]	; 0x24
    83c6:	3801      	subs	r0, #1
    83c8:	9009      	str	r0, [sp, #36]	; 0x24
    83ca:	1c23      	adds	r3, r4, #0
    83cc:	9911      	ldr	r1, [sp, #68]	; 0x44
    83ce:	4013      	ands	r3, r2
    83d0:	5ccb      	ldrb	r3, [r1, r3]
    83d2:	0924      	lsrs	r4, r4, #4
    83d4:	7003      	strb	r3, [r0, #0]
    83d6:	2c00      	cmp	r4, #0
    83d8:	d1f4      	bne.n	83c4 <_vfprintf_r+0xef0>
    83da:	4daa      	ldr	r5, [pc, #680]	; (8684 <_vfprintf_r+0x11b0>)
    83dc:	446d      	add	r5, sp
    83de:	e5f7      	b.n	7fd0 <_vfprintf_r+0xafc>
    83e0:	2c09      	cmp	r4, #9
    83e2:	d800      	bhi.n	83e6 <_vfprintf_r+0xf12>
    83e4:	e312      	b.n	8a0c <_vfprintf_r+0x1538>
    83e6:	25b7      	movs	r5, #183	; 0xb7
    83e8:	00ed      	lsls	r5, r5, #3
    83ea:	446d      	add	r5, sp
    83ec:	1c20      	adds	r0, r4, #0
    83ee:	210a      	movs	r1, #10
    83f0:	f004 f80c 	bl	c40c <__umodsi3>
    83f4:	3d01      	subs	r5, #1
    83f6:	3030      	adds	r0, #48	; 0x30
    83f8:	7028      	strb	r0, [r5, #0]
    83fa:	210a      	movs	r1, #10
    83fc:	1c20      	adds	r0, r4, #0
    83fe:	f003 ff6d 	bl	c2dc <__aeabi_uidiv>
    8402:	1c04      	adds	r4, r0, #0
    8404:	2809      	cmp	r0, #9
    8406:	d8f1      	bhi.n	83ec <_vfprintf_r+0xf18>
    8408:	3d01      	subs	r5, #1
    840a:	9509      	str	r5, [sp, #36]	; 0x24
    840c:	4d9d      	ldr	r5, [pc, #628]	; (8684 <_vfprintf_r+0x11b0>)
    840e:	1c23      	adds	r3, r4, #0
    8410:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8412:	3330      	adds	r3, #48	; 0x30
    8414:	446d      	add	r5, sp
    8416:	7013      	strb	r3, [r2, #0]
    8418:	e5da      	b.n	7fd0 <_vfprintf_r+0xafc>
    841a:	4e9b      	ldr	r6, [pc, #620]	; (8688 <_vfprintf_r+0x11b4>)
    841c:	4643      	mov	r3, r8
    841e:	193f      	adds	r7, r7, r4
    8420:	605c      	str	r4, [r3, #4]
    8422:	20d0      	movs	r0, #208	; 0xd0
    8424:	4c93      	ldr	r4, [pc, #588]	; (8674 <_vfprintf_r+0x11a0>)
    8426:	00c0      	lsls	r0, r0, #3
    8428:	446c      	add	r4, sp
    842a:	3501      	adds	r5, #1
    842c:	4468      	add	r0, sp
    842e:	601e      	str	r6, [r3, #0]
    8430:	6027      	str	r7, [r4, #0]
    8432:	6005      	str	r5, [r0, #0]
    8434:	2d07      	cmp	r5, #7
    8436:	dd00      	ble.n	843a <_vfprintf_r+0xf66>
    8438:	e152      	b.n	86e0 <_vfprintf_r+0x120c>
    843a:	2108      	movs	r1, #8
    843c:	4488      	add	r8, r1
    843e:	f7ff fb5b 	bl	7af8 <_vfprintf_r+0x624>
    8442:	498b      	ldr	r1, [pc, #556]	; (8670 <_vfprintf_r+0x119c>)
    8444:	4648      	mov	r0, r9
    8446:	4469      	add	r1, sp
    8448:	f7ff f834 	bl	74b4 <__sprint>
    844c:	2800      	cmp	r0, #0
    844e:	d001      	beq.n	8454 <_vfprintf_r+0xf80>
    8450:	f7ff fb71 	bl	7b36 <_vfprintf_r+0x662>
    8454:	4887      	ldr	r0, [pc, #540]	; (8674 <_vfprintf_r+0x11a0>)
    8456:	21d0      	movs	r1, #208	; 0xd0
    8458:	4c87      	ldr	r4, [pc, #540]	; (8678 <_vfprintf_r+0x11a4>)
    845a:	00c9      	lsls	r1, r1, #3
    845c:	4468      	add	r0, sp
    845e:	4469      	add	r1, sp
    8460:	446c      	add	r4, sp
    8462:	6807      	ldr	r7, [r0, #0]
    8464:	680d      	ldr	r5, [r1, #0]
    8466:	46a0      	mov	r8, r4
    8468:	f7ff fab7 	bl	79da <_vfprintf_r+0x506>
    846c:	4980      	ldr	r1, [pc, #512]	; (8670 <_vfprintf_r+0x119c>)
    846e:	4648      	mov	r0, r9
    8470:	4469      	add	r1, sp
    8472:	f7ff f81f 	bl	74b4 <__sprint>
    8476:	2800      	cmp	r0, #0
    8478:	d001      	beq.n	847e <_vfprintf_r+0xfaa>
    847a:	f7ff fb5c 	bl	7b36 <_vfprintf_r+0x662>
    847e:	4c7d      	ldr	r4, [pc, #500]	; (8674 <_vfprintf_r+0x11a0>)
    8480:	20d0      	movs	r0, #208	; 0xd0
    8482:	4b7d      	ldr	r3, [pc, #500]	; (8678 <_vfprintf_r+0x11a4>)
    8484:	00c0      	lsls	r0, r0, #3
    8486:	446c      	add	r4, sp
    8488:	4468      	add	r0, sp
    848a:	446b      	add	r3, sp
    848c:	6827      	ldr	r7, [r4, #0]
    848e:	6805      	ldr	r5, [r0, #0]
    8490:	4698      	mov	r8, r3
    8492:	f7ff fb10 	bl	7ab6 <_vfprintf_r+0x5e2>
    8496:	21d0      	movs	r1, #208	; 0xd0
    8498:	00c9      	lsls	r1, r1, #3
    849a:	4469      	add	r1, sp
    849c:	680d      	ldr	r5, [r1, #0]
    849e:	4e7a      	ldr	r6, [pc, #488]	; (8688 <_vfprintf_r+0x11b4>)
    84a0:	193f      	adds	r7, r7, r4
    84a2:	6054      	str	r4, [r2, #4]
    84a4:	4b73      	ldr	r3, [pc, #460]	; (8674 <_vfprintf_r+0x11a0>)
    84a6:	24d0      	movs	r4, #208	; 0xd0
    84a8:	00e4      	lsls	r4, r4, #3
    84aa:	446b      	add	r3, sp
    84ac:	3501      	adds	r5, #1
    84ae:	446c      	add	r4, sp
    84b0:	6016      	str	r6, [r2, #0]
    84b2:	601f      	str	r7, [r3, #0]
    84b4:	6025      	str	r5, [r4, #0]
    84b6:	2d07      	cmp	r5, #7
    84b8:	dc01      	bgt.n	84be <_vfprintf_r+0xfea>
    84ba:	f7ff f9fb 	bl	78b4 <_vfprintf_r+0x3e0>
    84be:	496c      	ldr	r1, [pc, #432]	; (8670 <_vfprintf_r+0x119c>)
    84c0:	4648      	mov	r0, r9
    84c2:	4469      	add	r1, sp
    84c4:	f7fe fff6 	bl	74b4 <__sprint>
    84c8:	2800      	cmp	r0, #0
    84ca:	d001      	beq.n	84d0 <_vfprintf_r+0xffc>
    84cc:	f7ff fb33 	bl	7b36 <_vfprintf_r+0x662>
    84d0:	4868      	ldr	r0, [pc, #416]	; (8674 <_vfprintf_r+0x11a0>)
    84d2:	4a69      	ldr	r2, [pc, #420]	; (8678 <_vfprintf_r+0x11a4>)
    84d4:	4468      	add	r0, sp
    84d6:	6807      	ldr	r7, [r0, #0]
    84d8:	446a      	add	r2, sp
    84da:	f7ff f9ec 	bl	78b6 <_vfprintf_r+0x3e2>
    84de:	4651      	mov	r1, sl
    84e0:	3104      	adds	r1, #4
    84e2:	9116      	str	r1, [sp, #88]	; 0x58
    84e4:	4652      	mov	r2, sl
    84e6:	6814      	ldr	r4, [r2, #0]
    84e8:	2201      	movs	r2, #1
    84ea:	e558      	b.n	7f9e <_vfprintf_r+0xaca>
    84ec:	2202      	movs	r2, #2
    84ee:	e556      	b.n	7f9e <_vfprintf_r+0xaca>
    84f0:	4652      	mov	r2, sl
    84f2:	3204      	adds	r2, #4
    84f4:	9216      	str	r2, [sp, #88]	; 0x58
    84f6:	4653      	mov	r3, sl
    84f8:	681c      	ldr	r4, [r3, #0]
    84fa:	2200      	movs	r2, #0
    84fc:	e54f      	b.n	7f9e <_vfprintf_r+0xaca>
    84fe:	9815      	ldr	r0, [sp, #84]	; 0x54
    8500:	2301      	movs	r3, #1
    8502:	4218      	tst	r0, r3
    8504:	d001      	beq.n	850a <_vfprintf_r+0x1036>
    8506:	f7ff fabb 	bl	7a80 <_vfprintf_r+0x5ac>
    850a:	4641      	mov	r1, r8
    850c:	604b      	str	r3, [r1, #4]
    850e:	4a59      	ldr	r2, [pc, #356]	; (8674 <_vfprintf_r+0x11a0>)
    8510:	23d0      	movs	r3, #208	; 0xd0
    8512:	9809      	ldr	r0, [sp, #36]	; 0x24
    8514:	00db      	lsls	r3, r3, #3
    8516:	3701      	adds	r7, #1
    8518:	446a      	add	r2, sp
    851a:	3501      	adds	r5, #1
    851c:	446b      	add	r3, sp
    851e:	6008      	str	r0, [r1, #0]
    8520:	6017      	str	r7, [r2, #0]
    8522:	601d      	str	r5, [r3, #0]
    8524:	2d07      	cmp	r5, #7
    8526:	dd00      	ble.n	852a <_vfprintf_r+0x1056>
    8528:	e239      	b.n	899e <_vfprintf_r+0x14ca>
    852a:	2408      	movs	r4, #8
    852c:	44a0      	add	r8, r4
    852e:	f7ff fae3 	bl	7af8 <_vfprintf_r+0x624>
    8532:	4e55      	ldr	r6, [pc, #340]	; (8688 <_vfprintf_r+0x11b4>)
    8534:	f7ff fa86 	bl	7a44 <_vfprintf_r+0x570>
    8538:	9c15      	ldr	r4, [sp, #84]	; 0x54
    853a:	07e4      	lsls	r4, r4, #31
    853c:	d500      	bpl.n	8540 <_vfprintf_r+0x106c>
    853e:	e0fe      	b.n	873e <_vfprintf_r+0x126a>
    8540:	20b7      	movs	r0, #183	; 0xb7
    8542:	4d50      	ldr	r5, [pc, #320]	; (8684 <_vfprintf_r+0x11b0>)
    8544:	00c0      	lsls	r0, r0, #3
    8546:	4468      	add	r0, sp
    8548:	446d      	add	r5, sp
    854a:	9009      	str	r0, [sp, #36]	; 0x24
    854c:	e540      	b.n	7fd0 <_vfprintf_r+0xafc>
    854e:	4948      	ldr	r1, [pc, #288]	; (8670 <_vfprintf_r+0x119c>)
    8550:	4648      	mov	r0, r9
    8552:	4469      	add	r1, sp
    8554:	f7fe ffae 	bl	74b4 <__sprint>
    8558:	2800      	cmp	r0, #0
    855a:	d001      	beq.n	8560 <_vfprintf_r+0x108c>
    855c:	f7ff faeb 	bl	7b36 <_vfprintf_r+0x662>
    8560:	4b44      	ldr	r3, [pc, #272]	; (8674 <_vfprintf_r+0x11a0>)
    8562:	4a45      	ldr	r2, [pc, #276]	; (8678 <_vfprintf_r+0x11a4>)
    8564:	446b      	add	r3, sp
    8566:	681f      	ldr	r7, [r3, #0]
    8568:	446a      	add	r2, sp
    856a:	f7ff fb34 	bl	7bd6 <_vfprintf_r+0x702>
    856e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    8570:	0652      	lsls	r2, r2, #25
    8572:	d400      	bmi.n	8576 <_vfprintf_r+0x10a2>
    8574:	e0ec      	b.n	8750 <_vfprintf_r+0x127c>
    8576:	4650      	mov	r0, sl
    8578:	4653      	mov	r3, sl
    857a:	8804      	ldrh	r4, [r0, #0]
    857c:	3304      	adds	r3, #4
    857e:	9316      	str	r3, [sp, #88]	; 0x58
    8580:	e610      	b.n	81a4 <_vfprintf_r+0xcd0>
    8582:	9915      	ldr	r1, [sp, #84]	; 0x54
    8584:	0649      	lsls	r1, r1, #25
    8586:	d400      	bmi.n	858a <_vfprintf_r+0x10b6>
    8588:	e0f1      	b.n	876e <_vfprintf_r+0x129a>
    858a:	4654      	mov	r4, sl
    858c:	6823      	ldr	r3, [r4, #0]
    858e:	4652      	mov	r2, sl
    8590:	041b      	lsls	r3, r3, #16
    8592:	3204      	adds	r2, #4
    8594:	141c      	asrs	r4, r3, #16
    8596:	9216      	str	r2, [sp, #88]	; 0x58
    8598:	e553      	b.n	8042 <_vfprintf_r+0xb6e>
    859a:	4935      	ldr	r1, [pc, #212]	; (8670 <_vfprintf_r+0x119c>)
    859c:	4648      	mov	r0, r9
    859e:	4469      	add	r1, sp
    85a0:	f7fe ff88 	bl	74b4 <__sprint>
    85a4:	2800      	cmp	r0, #0
    85a6:	d001      	beq.n	85ac <_vfprintf_r+0x10d8>
    85a8:	f7ff fac5 	bl	7b36 <_vfprintf_r+0x662>
    85ac:	4a31      	ldr	r2, [pc, #196]	; (8674 <_vfprintf_r+0x11a0>)
    85ae:	23d0      	movs	r3, #208	; 0xd0
    85b0:	4931      	ldr	r1, [pc, #196]	; (8678 <_vfprintf_r+0x11a4>)
    85b2:	00db      	lsls	r3, r3, #3
    85b4:	446a      	add	r2, sp
    85b6:	446b      	add	r3, sp
    85b8:	4469      	add	r1, sp
    85ba:	6817      	ldr	r7, [r2, #0]
    85bc:	681d      	ldr	r5, [r3, #0]
    85be:	4688      	mov	r8, r1
    85c0:	f7ff fa9a 	bl	7af8 <_vfprintf_r+0x624>
    85c4:	21d0      	movs	r1, #208	; 0xd0
    85c6:	00c9      	lsls	r1, r1, #3
    85c8:	4469      	add	r1, sp
    85ca:	680d      	ldr	r5, [r1, #0]
    85cc:	4e2e      	ldr	r6, [pc, #184]	; (8688 <_vfprintf_r+0x11b4>)
    85ce:	193f      	adds	r7, r7, r4
    85d0:	6054      	str	r4, [r2, #4]
    85d2:	4b28      	ldr	r3, [pc, #160]	; (8674 <_vfprintf_r+0x11a0>)
    85d4:	24d0      	movs	r4, #208	; 0xd0
    85d6:	00e4      	lsls	r4, r4, #3
    85d8:	446b      	add	r3, sp
    85da:	3501      	adds	r5, #1
    85dc:	446c      	add	r4, sp
    85de:	6016      	str	r6, [r2, #0]
    85e0:	601f      	str	r7, [r3, #0]
    85e2:	6025      	str	r5, [r4, #0]
    85e4:	2d07      	cmp	r5, #7
    85e6:	dd01      	ble.n	85ec <_vfprintf_r+0x1118>
    85e8:	f7ff fb4b 	bl	7c82 <_vfprintf_r+0x7ae>
    85ec:	3208      	adds	r2, #8
    85ee:	f7ff fb55 	bl	7c9c <_vfprintf_r+0x7c8>
    85f2:	4b20      	ldr	r3, [pc, #128]	; (8674 <_vfprintf_r+0x11a0>)
    85f4:	20d0      	movs	r0, #208	; 0xd0
    85f6:	00c0      	lsls	r0, r0, #3
    85f8:	446b      	add	r3, sp
    85fa:	4468      	add	r0, sp
    85fc:	681f      	ldr	r7, [r3, #0]
    85fe:	6805      	ldr	r5, [r0, #0]
    8600:	4e22      	ldr	r6, [pc, #136]	; (868c <_vfprintf_r+0x11b8>)
    8602:	f7ff f89d 	bl	7740 <_vfprintf_r+0x26c>
    8606:	4b22      	ldr	r3, [pc, #136]	; (8690 <_vfprintf_r+0x11bc>)
    8608:	4642      	mov	r2, r8
    860a:	6013      	str	r3, [r2, #0]
    860c:	2301      	movs	r3, #1
    860e:	6053      	str	r3, [r2, #4]
    8610:	24d0      	movs	r4, #208	; 0xd0
    8612:	4b18      	ldr	r3, [pc, #96]	; (8674 <_vfprintf_r+0x11a0>)
    8614:	00e4      	lsls	r4, r4, #3
    8616:	3701      	adds	r7, #1
    8618:	446b      	add	r3, sp
    861a:	3501      	adds	r5, #1
    861c:	446c      	add	r4, sp
    861e:	601f      	str	r7, [r3, #0]
    8620:	6025      	str	r5, [r4, #0]
    8622:	2d07      	cmp	r5, #7
    8624:	dd00      	ble.n	8628 <_vfprintf_r+0x1154>
    8626:	e1cf      	b.n	89c8 <_vfprintf_r+0x14f4>
    8628:	3208      	adds	r2, #8
    862a:	2800      	cmp	r0, #0
    862c:	d104      	bne.n	8638 <_vfprintf_r+0x1164>
    862e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8630:	2b00      	cmp	r3, #0
    8632:	d101      	bne.n	8638 <_vfprintf_r+0x1164>
    8634:	f7ff f93f 	bl	78b6 <_vfprintf_r+0x3e2>
    8638:	2301      	movs	r3, #1
    863a:	6053      	str	r3, [r2, #4]
    863c:	23d0      	movs	r3, #208	; 0xd0
    863e:	00db      	lsls	r3, r3, #3
    8640:	446b      	add	r3, sp
    8642:	681d      	ldr	r5, [r3, #0]
    8644:	490b      	ldr	r1, [pc, #44]	; (8674 <_vfprintf_r+0x11a0>)
    8646:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    8648:	3701      	adds	r7, #1
    864a:	4469      	add	r1, sp
    864c:	3501      	adds	r5, #1
    864e:	6014      	str	r4, [r2, #0]
    8650:	600f      	str	r7, [r1, #0]
    8652:	601d      	str	r5, [r3, #0]
    8654:	2d07      	cmp	r5, #7
    8656:	dd00      	ble.n	865a <_vfprintf_r+0x1186>
    8658:	e1e2      	b.n	8a20 <_vfprintf_r+0x154c>
    865a:	3208      	adds	r2, #8
    865c:	4244      	negs	r4, r0
    865e:	2c00      	cmp	r4, #0
    8660:	dc00      	bgt.n	8664 <_vfprintf_r+0x1190>
    8662:	e0ef      	b.n	8844 <_vfprintf_r+0x1370>
    8664:	2c10      	cmp	r4, #16
    8666:	dc00      	bgt.n	866a <_vfprintf_r+0x1196>
    8668:	e164      	b.n	8934 <_vfprintf_r+0x1460>
    866a:	4e07      	ldr	r6, [pc, #28]	; (8688 <_vfprintf_r+0x11b4>)
    866c:	e017      	b.n	869e <_vfprintf_r+0x11ca>
    866e:	46c0      	nop			; (mov r8, r8)
    8670:	0000067c 	.word	0x0000067c
    8674:	00000684 	.word	0x00000684
    8678:	00000614 	.word	0x00000614
    867c:	000006b3 	.word	0x000006b3
    8680:	00012a44 	.word	0x00012a44
    8684:	0000045c 	.word	0x0000045c
    8688:	00012bd8 	.word	0x00012bd8
    868c:	00012be8 	.word	0x00012be8
    8690:	00012a64 	.word	0x00012a64
    8694:	3208      	adds	r2, #8
    8696:	3c10      	subs	r4, #16
    8698:	2c10      	cmp	r4, #16
    869a:	dc00      	bgt.n	869e <_vfprintf_r+0x11ca>
    869c:	e14b      	b.n	8936 <_vfprintf_r+0x1462>
    869e:	2310      	movs	r3, #16
    86a0:	6053      	str	r3, [r2, #4]
    86a2:	20d0      	movs	r0, #208	; 0xd0
    86a4:	4be9      	ldr	r3, [pc, #932]	; (8a4c <_vfprintf_r+0x1578>)
    86a6:	00c0      	lsls	r0, r0, #3
    86a8:	3710      	adds	r7, #16
    86aa:	446b      	add	r3, sp
    86ac:	3501      	adds	r5, #1
    86ae:	4468      	add	r0, sp
    86b0:	6016      	str	r6, [r2, #0]
    86b2:	601f      	str	r7, [r3, #0]
    86b4:	6005      	str	r5, [r0, #0]
    86b6:	2d07      	cmp	r5, #7
    86b8:	ddec      	ble.n	8694 <_vfprintf_r+0x11c0>
    86ba:	49e5      	ldr	r1, [pc, #916]	; (8a50 <_vfprintf_r+0x157c>)
    86bc:	4648      	mov	r0, r9
    86be:	4469      	add	r1, sp
    86c0:	f7fe fef8 	bl	74b4 <__sprint>
    86c4:	2800      	cmp	r0, #0
    86c6:	d001      	beq.n	86cc <_vfprintf_r+0x11f8>
    86c8:	f7ff fa35 	bl	7b36 <_vfprintf_r+0x662>
    86cc:	49df      	ldr	r1, [pc, #892]	; (8a4c <_vfprintf_r+0x1578>)
    86ce:	23d0      	movs	r3, #208	; 0xd0
    86d0:	00db      	lsls	r3, r3, #3
    86d2:	4ae0      	ldr	r2, [pc, #896]	; (8a54 <_vfprintf_r+0x1580>)
    86d4:	4469      	add	r1, sp
    86d6:	446b      	add	r3, sp
    86d8:	680f      	ldr	r7, [r1, #0]
    86da:	681d      	ldr	r5, [r3, #0]
    86dc:	446a      	add	r2, sp
    86de:	e7da      	b.n	8696 <_vfprintf_r+0x11c2>
    86e0:	49db      	ldr	r1, [pc, #876]	; (8a50 <_vfprintf_r+0x157c>)
    86e2:	4648      	mov	r0, r9
    86e4:	4469      	add	r1, sp
    86e6:	f7fe fee5 	bl	74b4 <__sprint>
    86ea:	2800      	cmp	r0, #0
    86ec:	d001      	beq.n	86f2 <_vfprintf_r+0x121e>
    86ee:	f7ff fa22 	bl	7b36 <_vfprintf_r+0x662>
    86f2:	4bd6      	ldr	r3, [pc, #856]	; (8a4c <_vfprintf_r+0x1578>)
    86f4:	24d0      	movs	r4, #208	; 0xd0
    86f6:	4ad7      	ldr	r2, [pc, #860]	; (8a54 <_vfprintf_r+0x1580>)
    86f8:	00e4      	lsls	r4, r4, #3
    86fa:	446b      	add	r3, sp
    86fc:	446c      	add	r4, sp
    86fe:	446a      	add	r2, sp
    8700:	681f      	ldr	r7, [r3, #0]
    8702:	6825      	ldr	r5, [r4, #0]
    8704:	4690      	mov	r8, r2
    8706:	f7ff f9f7 	bl	7af8 <_vfprintf_r+0x624>
    870a:	24d2      	movs	r4, #210	; 0xd2
    870c:	00e4      	lsls	r4, r4, #3
    870e:	446c      	add	r4, sp
    8710:	4dd1      	ldr	r5, [pc, #836]	; (8a58 <_vfprintf_r+0x1584>)
    8712:	2100      	movs	r1, #0
    8714:	2208      	movs	r2, #8
    8716:	1c20      	adds	r0, r4, #0
    8718:	f002 fde2 	bl	b2e0 <memset>
    871c:	446d      	add	r5, sp
    871e:	4650      	mov	r0, sl
    8720:	6802      	ldr	r2, [r0, #0]
    8722:	1c29      	adds	r1, r5, #0
    8724:	9805      	ldr	r0, [sp, #20]
    8726:	1c23      	adds	r3, r4, #0
    8728:	f000 fbf4 	bl	8f14 <_wcrtomb_r>
    872c:	1c01      	adds	r1, r0, #0
    872e:	4683      	mov	fp, r0
    8730:	3101      	adds	r1, #1
    8732:	d100      	bne.n	8736 <_vfprintf_r+0x1262>
    8734:	e33d      	b.n	8db2 <_vfprintf_r+0x18de>
    8736:	4652      	mov	r2, sl
    8738:	3204      	adds	r2, #4
    873a:	9216      	str	r2, [sp, #88]	; 0x58
    873c:	e51b      	b.n	8176 <_vfprintf_r+0xca2>
    873e:	4dc6      	ldr	r5, [pc, #792]	; (8a58 <_vfprintf_r+0x1584>)
    8740:	49c6      	ldr	r1, [pc, #792]	; (8a5c <_vfprintf_r+0x1588>)
    8742:	4bc7      	ldr	r3, [pc, #796]	; (8a60 <_vfprintf_r+0x158c>)
    8744:	446d      	add	r5, sp
    8746:	2230      	movs	r2, #48	; 0x30
    8748:	4469      	add	r1, sp
    874a:	54ea      	strb	r2, [r5, r3]
    874c:	9109      	str	r1, [sp, #36]	; 0x24
    874e:	e43f      	b.n	7fd0 <_vfprintf_r+0xafc>
    8750:	4652      	mov	r2, sl
    8752:	4651      	mov	r1, sl
    8754:	6814      	ldr	r4, [r2, #0]
    8756:	3104      	adds	r1, #4
    8758:	9116      	str	r1, [sp, #88]	; 0x58
    875a:	e523      	b.n	81a4 <_vfprintf_r+0xcd0>
    875c:	4651      	mov	r1, sl
    875e:	4654      	mov	r4, sl
    8760:	6808      	ldr	r0, [r1, #0]
    8762:	6849      	ldr	r1, [r1, #4]
    8764:	3408      	adds	r4, #8
    8766:	9416      	str	r4, [sp, #88]	; 0x58
    8768:	9013      	str	r0, [sp, #76]	; 0x4c
    876a:	9114      	str	r1, [sp, #80]	; 0x50
    876c:	e4cf      	b.n	810e <_vfprintf_r+0xc3a>
    876e:	4651      	mov	r1, sl
    8770:	4650      	mov	r0, sl
    8772:	680c      	ldr	r4, [r1, #0]
    8774:	3004      	adds	r0, #4
    8776:	9016      	str	r0, [sp, #88]	; 0x58
    8778:	e463      	b.n	8042 <_vfprintf_r+0xb6e>
    877a:	21d0      	movs	r1, #208	; 0xd0
    877c:	00c9      	lsls	r1, r1, #3
    877e:	4469      	add	r1, sp
    8780:	680d      	ldr	r5, [r1, #0]
    8782:	4eb8      	ldr	r6, [pc, #736]	; (8a64 <_vfprintf_r+0x1590>)
    8784:	f7ff f8cf 	bl	7926 <_vfprintf_r+0x452>
    8788:	9c07      	ldr	r4, [sp, #28]
    878a:	7822      	ldrb	r2, [r4, #0]
    878c:	f7fe ff6e 	bl	766c <_vfprintf_r+0x198>
    8790:	9915      	ldr	r1, [sp, #84]	; 0x54
    8792:	0649      	lsls	r1, r1, #25
    8794:	d400      	bmi.n	8798 <_vfprintf_r+0x12c4>
    8796:	e129      	b.n	89ec <_vfprintf_r+0x1518>
    8798:	4654      	mov	r4, sl
    879a:	4668      	mov	r0, sp
    879c:	4652      	mov	r2, sl
    879e:	6823      	ldr	r3, [r4, #0]
    87a0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    87a2:	3204      	adds	r2, #4
    87a4:	9216      	str	r2, [sp, #88]	; 0x58
    87a6:	8018      	strh	r0, [r3, #0]
    87a8:	f7ff f8f0 	bl	798c <_vfprintf_r+0x4b8>
    87ac:	20d5      	movs	r0, #213	; 0xd5
    87ae:	27d1      	movs	r7, #209	; 0xd1
    87b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    87b2:	00c0      	lsls	r0, r0, #3
    87b4:	00ff      	lsls	r7, r7, #3
    87b6:	4468      	add	r0, sp
    87b8:	446f      	add	r7, sp
    87ba:	6004      	str	r4, [r0, #0]
    87bc:	2100      	movs	r1, #0
    87be:	1c38      	adds	r0, r7, #0
    87c0:	2208      	movs	r2, #8
    87c2:	f002 fd8d 	bl	b2e0 <memset>
    87c6:	2e00      	cmp	r6, #0
    87c8:	da00      	bge.n	87cc <_vfprintf_r+0x12f8>
    87ca:	e2df      	b.n	8d8c <_vfprintf_r+0x18b8>
    87cc:	4aa2      	ldr	r2, [pc, #648]	; (8a58 <_vfprintf_r+0x1584>)
    87ce:	2100      	movs	r1, #0
    87d0:	446a      	add	r2, sp
    87d2:	468b      	mov	fp, r1
    87d4:	2400      	movs	r4, #0
    87d6:	4692      	mov	sl, r2
    87d8:	e000      	b.n	87dc <_vfprintf_r+0x1308>
    87da:	4683      	mov	fp, r0
    87dc:	20d5      	movs	r0, #213	; 0xd5
    87de:	00c0      	lsls	r0, r0, #3
    87e0:	4468      	add	r0, sp
    87e2:	6803      	ldr	r3, [r0, #0]
    87e4:	58e2      	ldr	r2, [r4, r3]
    87e6:	2a00      	cmp	r2, #0
    87e8:	d00e      	beq.n	8808 <_vfprintf_r+0x1334>
    87ea:	4651      	mov	r1, sl
    87ec:	9805      	ldr	r0, [sp, #20]
    87ee:	1c3b      	adds	r3, r7, #0
    87f0:	f000 fb90 	bl	8f14 <_wcrtomb_r>
    87f4:	1c41      	adds	r1, r0, #1
    87f6:	d100      	bne.n	87fa <_vfprintf_r+0x1326>
    87f8:	e2db      	b.n	8db2 <_vfprintf_r+0x18de>
    87fa:	4458      	add	r0, fp
    87fc:	4286      	cmp	r6, r0
    87fe:	db03      	blt.n	8808 <_vfprintf_r+0x1334>
    8800:	3404      	adds	r4, #4
    8802:	4286      	cmp	r6, r0
    8804:	d1e9      	bne.n	87da <_vfprintf_r+0x1306>
    8806:	46b3      	mov	fp, r6
    8808:	465b      	mov	r3, fp
    880a:	2b00      	cmp	r3, #0
    880c:	d000      	beq.n	8810 <_vfprintf_r+0x133c>
    880e:	e1e0      	b.n	8bd2 <_vfprintf_r+0x16fe>
    8810:	488f      	ldr	r0, [pc, #572]	; (8a50 <_vfprintf_r+0x157c>)
    8812:	2400      	movs	r4, #0
    8814:	4468      	add	r0, sp
    8816:	46a2      	mov	sl, r4
    8818:	9410      	str	r4, [sp, #64]	; 0x40
    881a:	9004      	str	r0, [sp, #16]
    881c:	f7ff fbe6 	bl	7fec <_vfprintf_r+0xb18>
    8820:	498b      	ldr	r1, [pc, #556]	; (8a50 <_vfprintf_r+0x157c>)
    8822:	4648      	mov	r0, r9
    8824:	4469      	add	r1, sp
    8826:	f7fe fe45 	bl	74b4 <__sprint>
    882a:	2800      	cmp	r0, #0
    882c:	d001      	beq.n	8832 <_vfprintf_r+0x135e>
    882e:	f7ff f982 	bl	7b36 <_vfprintf_r+0x662>
    8832:	4986      	ldr	r1, [pc, #536]	; (8a4c <_vfprintf_r+0x1578>)
    8834:	23d0      	movs	r3, #208	; 0xd0
    8836:	00db      	lsls	r3, r3, #3
    8838:	4a86      	ldr	r2, [pc, #536]	; (8a54 <_vfprintf_r+0x1580>)
    883a:	4469      	add	r1, sp
    883c:	446b      	add	r3, sp
    883e:	680f      	ldr	r7, [r1, #0]
    8840:	681d      	ldr	r5, [r3, #0]
    8842:	446a      	add	r2, sp
    8844:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8846:	4981      	ldr	r1, [pc, #516]	; (8a4c <_vfprintf_r+0x1578>)
    8848:	23d0      	movs	r3, #208	; 0xd0
    884a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    884c:	00db      	lsls	r3, r3, #3
    884e:	19c7      	adds	r7, r0, r7
    8850:	4469      	add	r1, sp
    8852:	3501      	adds	r5, #1
    8854:	446b      	add	r3, sp
    8856:	6014      	str	r4, [r2, #0]
    8858:	6050      	str	r0, [r2, #4]
    885a:	600f      	str	r7, [r1, #0]
    885c:	601d      	str	r5, [r3, #0]
    885e:	2d07      	cmp	r5, #7
    8860:	dc01      	bgt.n	8866 <_vfprintf_r+0x1392>
    8862:	f7ff f827 	bl	78b4 <_vfprintf_r+0x3e0>
    8866:	497a      	ldr	r1, [pc, #488]	; (8a50 <_vfprintf_r+0x157c>)
    8868:	4648      	mov	r0, r9
    886a:	4469      	add	r1, sp
    886c:	f7fe fe22 	bl	74b4 <__sprint>
    8870:	2800      	cmp	r0, #0
    8872:	d001      	beq.n	8878 <_vfprintf_r+0x13a4>
    8874:	f7ff f95f 	bl	7b36 <_vfprintf_r+0x662>
    8878:	4c74      	ldr	r4, [pc, #464]	; (8a4c <_vfprintf_r+0x1578>)
    887a:	4a76      	ldr	r2, [pc, #472]	; (8a54 <_vfprintf_r+0x1580>)
    887c:	446c      	add	r4, sp
    887e:	6827      	ldr	r7, [r4, #0]
    8880:	446a      	add	r2, sp
    8882:	f7ff f818 	bl	78b6 <_vfprintf_r+0x3e2>
    8886:	4972      	ldr	r1, [pc, #456]	; (8a50 <_vfprintf_r+0x157c>)
    8888:	4648      	mov	r0, r9
    888a:	4469      	add	r1, sp
    888c:	f7fe fe12 	bl	74b4 <__sprint>
    8890:	2800      	cmp	r0, #0
    8892:	d001      	beq.n	8898 <_vfprintf_r+0x13c4>
    8894:	f7ff f94f 	bl	7b36 <_vfprintf_r+0x662>
    8898:	4b6c      	ldr	r3, [pc, #432]	; (8a4c <_vfprintf_r+0x1578>)
    889a:	20d0      	movs	r0, #208	; 0xd0
    889c:	4972      	ldr	r1, [pc, #456]	; (8a68 <_vfprintf_r+0x1594>)
    889e:	00c0      	lsls	r0, r0, #3
    88a0:	4468      	add	r0, sp
    88a2:	4a6c      	ldr	r2, [pc, #432]	; (8a54 <_vfprintf_r+0x1580>)
    88a4:	446b      	add	r3, sp
    88a6:	4469      	add	r1, sp
    88a8:	6805      	ldr	r5, [r0, #0]
    88aa:	681f      	ldr	r7, [r3, #0]
    88ac:	6808      	ldr	r0, [r1, #0]
    88ae:	446a      	add	r2, sp
    88b0:	f7ff fb1f 	bl	7ef2 <_vfprintf_r+0xa1e>
    88b4:	4966      	ldr	r1, [pc, #408]	; (8a50 <_vfprintf_r+0x157c>)
    88b6:	4648      	mov	r0, r9
    88b8:	4469      	add	r1, sp
    88ba:	f7fe fdfb 	bl	74b4 <__sprint>
    88be:	2800      	cmp	r0, #0
    88c0:	d001      	beq.n	88c6 <_vfprintf_r+0x13f2>
    88c2:	f7ff f938 	bl	7b36 <_vfprintf_r+0x662>
    88c6:	4b61      	ldr	r3, [pc, #388]	; (8a4c <_vfprintf_r+0x1578>)
    88c8:	24d0      	movs	r4, #208	; 0xd0
    88ca:	4967      	ldr	r1, [pc, #412]	; (8a68 <_vfprintf_r+0x1594>)
    88cc:	00e4      	lsls	r4, r4, #3
    88ce:	4a61      	ldr	r2, [pc, #388]	; (8a54 <_vfprintf_r+0x1580>)
    88d0:	446b      	add	r3, sp
    88d2:	446c      	add	r4, sp
    88d4:	4469      	add	r1, sp
    88d6:	681f      	ldr	r7, [r3, #0]
    88d8:	6825      	ldr	r5, [r4, #0]
    88da:	6808      	ldr	r0, [r1, #0]
    88dc:	446a      	add	r2, sp
    88de:	f7ff faf5 	bl	7ecc <_vfprintf_r+0x9f8>
    88e2:	4e62      	ldr	r6, [pc, #392]	; (8a6c <_vfprintf_r+0x1598>)
    88e4:	f7fe ffb9 	bl	785a <_vfprintf_r+0x386>
    88e8:	4959      	ldr	r1, [pc, #356]	; (8a50 <_vfprintf_r+0x157c>)
    88ea:	4648      	mov	r0, r9
    88ec:	4469      	add	r1, sp
    88ee:	f7fe fde1 	bl	74b4 <__sprint>
    88f2:	2800      	cmp	r0, #0
    88f4:	d001      	beq.n	88fa <_vfprintf_r+0x1426>
    88f6:	f7ff f91e 	bl	7b36 <_vfprintf_r+0x662>
    88fa:	4b54      	ldr	r3, [pc, #336]	; (8a4c <_vfprintf_r+0x1578>)
    88fc:	4c5a      	ldr	r4, [pc, #360]	; (8a68 <_vfprintf_r+0x1594>)
    88fe:	4a55      	ldr	r2, [pc, #340]	; (8a54 <_vfprintf_r+0x1580>)
    8900:	446b      	add	r3, sp
    8902:	446c      	add	r4, sp
    8904:	681f      	ldr	r7, [r3, #0]
    8906:	6820      	ldr	r0, [r4, #0]
    8908:	446a      	add	r2, sp
    890a:	f7ff fa67 	bl	7ddc <_vfprintf_r+0x908>
    890e:	2e00      	cmp	r6, #0
    8910:	d001      	beq.n	8916 <_vfprintf_r+0x1442>
    8912:	f7ff fbf0 	bl	80f6 <_vfprintf_r+0xc22>
    8916:	2601      	movs	r6, #1
    8918:	f7ff fbed 	bl	80f6 <_vfprintf_r+0xc22>
    891c:	4954      	ldr	r1, [pc, #336]	; (8a70 <_vfprintf_r+0x159c>)
    891e:	4c4c      	ldr	r4, [pc, #304]	; (8a50 <_vfprintf_r+0x157c>)
    8920:	2303      	movs	r3, #3
    8922:	2200      	movs	r2, #0
    8924:	446c      	add	r4, sp
    8926:	469b      	mov	fp, r3
    8928:	469a      	mov	sl, r3
    892a:	9109      	str	r1, [sp, #36]	; 0x24
    892c:	9210      	str	r2, [sp, #64]	; 0x40
    892e:	9404      	str	r4, [sp, #16]
    8930:	f7ff fb5c 	bl	7fec <_vfprintf_r+0xb18>
    8934:	4e4d      	ldr	r6, [pc, #308]	; (8a6c <_vfprintf_r+0x1598>)
    8936:	193f      	adds	r7, r7, r4
    8938:	6054      	str	r4, [r2, #4]
    893a:	20d0      	movs	r0, #208	; 0xd0
    893c:	4c43      	ldr	r4, [pc, #268]	; (8a4c <_vfprintf_r+0x1578>)
    893e:	00c0      	lsls	r0, r0, #3
    8940:	446c      	add	r4, sp
    8942:	3501      	adds	r5, #1
    8944:	4468      	add	r0, sp
    8946:	6016      	str	r6, [r2, #0]
    8948:	6027      	str	r7, [r4, #0]
    894a:	6005      	str	r5, [r0, #0]
    894c:	2d07      	cmp	r5, #7
    894e:	dd00      	ble.n	8952 <_vfprintf_r+0x147e>
    8950:	e766      	b.n	8820 <_vfprintf_r+0x134c>
    8952:	3208      	adds	r2, #8
    8954:	e776      	b.n	8844 <_vfprintf_r+0x1370>
    8956:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8958:	9914      	ldr	r1, [sp, #80]	; 0x50
    895a:	f003 fb5b 	bl	c014 <isnan>
    895e:	2800      	cmp	r0, #0
    8960:	d100      	bne.n	8964 <_vfprintf_r+0x1490>
    8962:	e08d      	b.n	8a80 <_vfprintf_r+0x15ac>
    8964:	9b08      	ldr	r3, [sp, #32]
    8966:	3b45      	subs	r3, #69	; 0x45
    8968:	2b02      	cmp	r3, #2
    896a:	d900      	bls.n	896e <_vfprintf_r+0x149a>
    896c:	e1a8      	b.n	8cc0 <_vfprintf_r+0x17ec>
    896e:	4838      	ldr	r0, [pc, #224]	; (8a50 <_vfprintf_r+0x157c>)
    8970:	2403      	movs	r4, #3
    8972:	4a40      	ldr	r2, [pc, #256]	; (8a74 <_vfprintf_r+0x15a0>)
    8974:	2300      	movs	r3, #0
    8976:	4468      	add	r0, sp
    8978:	46a3      	mov	fp, r4
    897a:	46a2      	mov	sl, r4
    897c:	9209      	str	r2, [sp, #36]	; 0x24
    897e:	9310      	str	r3, [sp, #64]	; 0x40
    8980:	9004      	str	r0, [sp, #16]
    8982:	f7ff fb33 	bl	7fec <_vfprintf_r+0xb18>
    8986:	9a15      	ldr	r2, [sp, #84]	; 0x54
    8988:	2310      	movs	r3, #16
    898a:	3101      	adds	r1, #1
    898c:	431a      	orrs	r2, r3
    898e:	9107      	str	r1, [sp, #28]
    8990:	9215      	str	r2, [sp, #84]	; 0x54
    8992:	780a      	ldrb	r2, [r1, #0]
    8994:	f7fe fe6a 	bl	766c <_vfprintf_r+0x198>
    8998:	2606      	movs	r6, #6
    899a:	f7ff fbac 	bl	80f6 <_vfprintf_r+0xc22>
    899e:	492c      	ldr	r1, [pc, #176]	; (8a50 <_vfprintf_r+0x157c>)
    89a0:	4648      	mov	r0, r9
    89a2:	4469      	add	r1, sp
    89a4:	f7fe fd86 	bl	74b4 <__sprint>
    89a8:	2800      	cmp	r0, #0
    89aa:	d001      	beq.n	89b0 <_vfprintf_r+0x14dc>
    89ac:	f7ff f8c3 	bl	7b36 <_vfprintf_r+0x662>
    89b0:	4926      	ldr	r1, [pc, #152]	; (8a4c <_vfprintf_r+0x1578>)
    89b2:	22d0      	movs	r2, #208	; 0xd0
    89b4:	4827      	ldr	r0, [pc, #156]	; (8a54 <_vfprintf_r+0x1580>)
    89b6:	00d2      	lsls	r2, r2, #3
    89b8:	4469      	add	r1, sp
    89ba:	446a      	add	r2, sp
    89bc:	4468      	add	r0, sp
    89be:	680f      	ldr	r7, [r1, #0]
    89c0:	6815      	ldr	r5, [r2, #0]
    89c2:	4680      	mov	r8, r0
    89c4:	f7ff f898 	bl	7af8 <_vfprintf_r+0x624>
    89c8:	4921      	ldr	r1, [pc, #132]	; (8a50 <_vfprintf_r+0x157c>)
    89ca:	4648      	mov	r0, r9
    89cc:	4469      	add	r1, sp
    89ce:	f7fe fd71 	bl	74b4 <__sprint>
    89d2:	2800      	cmp	r0, #0
    89d4:	d001      	beq.n	89da <_vfprintf_r+0x1506>
    89d6:	f7ff f8ae 	bl	7b36 <_vfprintf_r+0x662>
    89da:	481c      	ldr	r0, [pc, #112]	; (8a4c <_vfprintf_r+0x1578>)
    89dc:	4922      	ldr	r1, [pc, #136]	; (8a68 <_vfprintf_r+0x1594>)
    89de:	4468      	add	r0, sp
    89e0:	4a1c      	ldr	r2, [pc, #112]	; (8a54 <_vfprintf_r+0x1580>)
    89e2:	4469      	add	r1, sp
    89e4:	6807      	ldr	r7, [r0, #0]
    89e6:	6808      	ldr	r0, [r1, #0]
    89e8:	446a      	add	r2, sp
    89ea:	e61e      	b.n	862a <_vfprintf_r+0x1156>
    89ec:	4652      	mov	r2, sl
    89ee:	4651      	mov	r1, sl
    89f0:	6813      	ldr	r3, [r2, #0]
    89f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    89f4:	3104      	adds	r1, #4
    89f6:	9116      	str	r1, [sp, #88]	; 0x58
    89f8:	601c      	str	r4, [r3, #0]
    89fa:	f7fe ffc7 	bl	798c <_vfprintf_r+0x4b8>
    89fe:	2406      	movs	r4, #6
    8a00:	4b1d      	ldr	r3, [pc, #116]	; (8a78 <_vfprintf_r+0x15a4>)
    8a02:	46a3      	mov	fp, r4
    8a04:	46a2      	mov	sl, r4
    8a06:	9309      	str	r3, [sp, #36]	; 0x24
    8a08:	f7fe fe4e 	bl	76a8 <_vfprintf_r+0x1d4>
    8a0c:	4913      	ldr	r1, [pc, #76]	; (8a5c <_vfprintf_r+0x1588>)
    8a0e:	4469      	add	r1, sp
    8a10:	9109      	str	r1, [sp, #36]	; 0x24
    8a12:	e4fb      	b.n	840c <_vfprintf_r+0xf38>
    8a14:	4a19      	ldr	r2, [pc, #100]	; (8a7c <_vfprintf_r+0x15a8>)
    8a16:	232d      	movs	r3, #45	; 0x2d
    8a18:	446a      	add	r2, sp
    8a1a:	7013      	strb	r3, [r2, #0]
    8a1c:	f7ff fb89 	bl	8132 <_vfprintf_r+0xc5e>
    8a20:	490b      	ldr	r1, [pc, #44]	; (8a50 <_vfprintf_r+0x157c>)
    8a22:	4648      	mov	r0, r9
    8a24:	4469      	add	r1, sp
    8a26:	f7fe fd45 	bl	74b4 <__sprint>
    8a2a:	2800      	cmp	r0, #0
    8a2c:	d001      	beq.n	8a32 <_vfprintf_r+0x155e>
    8a2e:	f7ff f882 	bl	7b36 <_vfprintf_r+0x662>
    8a32:	4c06      	ldr	r4, [pc, #24]	; (8a4c <_vfprintf_r+0x1578>)
    8a34:	20d0      	movs	r0, #208	; 0xd0
    8a36:	490c      	ldr	r1, [pc, #48]	; (8a68 <_vfprintf_r+0x1594>)
    8a38:	00c0      	lsls	r0, r0, #3
    8a3a:	4468      	add	r0, sp
    8a3c:	4a05      	ldr	r2, [pc, #20]	; (8a54 <_vfprintf_r+0x1580>)
    8a3e:	446c      	add	r4, sp
    8a40:	4469      	add	r1, sp
    8a42:	6805      	ldr	r5, [r0, #0]
    8a44:	6827      	ldr	r7, [r4, #0]
    8a46:	6808      	ldr	r0, [r1, #0]
    8a48:	446a      	add	r2, sp
    8a4a:	e607      	b.n	865c <_vfprintf_r+0x1188>
    8a4c:	00000684 	.word	0x00000684
    8a50:	0000067c 	.word	0x0000067c
    8a54:	00000614 	.word	0x00000614
    8a58:	0000045c 	.word	0x0000045c
    8a5c:	000005b7 	.word	0x000005b7
    8a60:	0000015b 	.word	0x0000015b
    8a64:	00012be8 	.word	0x00012be8
    8a68:	000006ac 	.word	0x000006ac
    8a6c:	00012bd8 	.word	0x00012bd8
    8a70:	00012a60 	.word	0x00012a60
    8a74:	00012a28 	.word	0x00012a28
    8a78:	00012a6c 	.word	0x00012a6c
    8a7c:	000006b3 	.word	0x000006b3
    8a80:	9815      	ldr	r0, [sp, #84]	; 0x54
    8a82:	2380      	movs	r3, #128	; 0x80
    8a84:	005b      	lsls	r3, r3, #1
    8a86:	9908      	ldr	r1, [sp, #32]
    8a88:	4318      	orrs	r0, r3
    8a8a:	9015      	str	r0, [sp, #84]	; 0x54
    8a8c:	2966      	cmp	r1, #102	; 0x66
    8a8e:	d100      	bne.n	8a92 <_vfprintf_r+0x15be>
    8a90:	e179      	b.n	8d86 <_vfprintf_r+0x18b2>
    8a92:	9a08      	ldr	r2, [sp, #32]
    8a94:	2a65      	cmp	r2, #101	; 0x65
    8a96:	d100      	bne.n	8a9a <_vfprintf_r+0x15c6>
    8a98:	e171      	b.n	8d7e <_vfprintf_r+0x18aa>
    8a9a:	2a45      	cmp	r2, #69	; 0x45
    8a9c:	d100      	bne.n	8aa0 <_vfprintf_r+0x15cc>
    8a9e:	e16e      	b.n	8d7e <_vfprintf_r+0x18aa>
    8aa0:	46b2      	mov	sl, r6
    8aa2:	2702      	movs	r7, #2
    8aa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8aa6:	9c14      	ldr	r4, [sp, #80]	; 0x50
    8aa8:	2b00      	cmp	r3, #0
    8aaa:	da00      	bge.n	8aae <_vfprintf_r+0x15da>
    8aac:	e10a      	b.n	8cc4 <_vfprintf_r+0x17f0>
    8aae:	2000      	movs	r0, #0
    8ab0:	900d      	str	r0, [sp, #52]	; 0x34
    8ab2:	1c25      	adds	r5, r4, #0
    8ab4:	1c1c      	adds	r4, r3, #0
    8ab6:	4bce      	ldr	r3, [pc, #824]	; (8df0 <_vfprintf_r+0x191c>)
    8ab8:	446b      	add	r3, sp
    8aba:	9301      	str	r3, [sp, #4]
    8abc:	4bcd      	ldr	r3, [pc, #820]	; (8df4 <_vfprintf_r+0x1920>)
    8abe:	446b      	add	r3, sp
    8ac0:	9302      	str	r3, [sp, #8]
    8ac2:	23d4      	movs	r3, #212	; 0xd4
    8ac4:	00db      	lsls	r3, r3, #3
    8ac6:	4651      	mov	r1, sl
    8ac8:	446b      	add	r3, sp
    8aca:	9100      	str	r1, [sp, #0]
    8acc:	9303      	str	r3, [sp, #12]
    8ace:	1c2a      	adds	r2, r5, #0
    8ad0:	9805      	ldr	r0, [sp, #20]
    8ad2:	1c21      	adds	r1, r4, #0
    8ad4:	1c3b      	adds	r3, r7, #0
    8ad6:	f000 fd1d 	bl	9514 <_dtoa_r>
    8ada:	9a08      	ldr	r2, [sp, #32]
    8adc:	9009      	str	r0, [sp, #36]	; 0x24
    8ade:	2a67      	cmp	r2, #103	; 0x67
    8ae0:	d100      	bne.n	8ae4 <_vfprintf_r+0x1610>
    8ae2:	e0cc      	b.n	8c7e <_vfprintf_r+0x17aa>
    8ae4:	2a47      	cmp	r2, #71	; 0x47
    8ae6:	d100      	bne.n	8aea <_vfprintf_r+0x1616>
    8ae8:	e0c9      	b.n	8c7e <_vfprintf_r+0x17aa>
    8aea:	9f09      	ldr	r7, [sp, #36]	; 0x24
    8aec:	9808      	ldr	r0, [sp, #32]
    8aee:	4457      	add	r7, sl
    8af0:	2866      	cmp	r0, #102	; 0x66
    8af2:	d100      	bne.n	8af6 <_vfprintf_r+0x1622>
    8af4:	e101      	b.n	8cfa <_vfprintf_r+0x1826>
    8af6:	1c20      	adds	r0, r4, #0
    8af8:	1c29      	adds	r1, r5, #0
    8afa:	4abf      	ldr	r2, [pc, #764]	; (8df8 <_vfprintf_r+0x1924>)
    8afc:	4bbf      	ldr	r3, [pc, #764]	; (8dfc <_vfprintf_r+0x1928>)
    8afe:	f009 fefb 	bl	128f8 <____eqdf2_from_thumb>
    8b02:	2800      	cmp	r0, #0
    8b04:	d000      	beq.n	8b08 <_vfprintf_r+0x1634>
    8b06:	e0e6      	b.n	8cd6 <_vfprintf_r+0x1802>
    8b08:	22d4      	movs	r2, #212	; 0xd4
    8b0a:	00d2      	lsls	r2, r2, #3
    8b0c:	446a      	add	r2, sp
    8b0e:	6017      	str	r7, [r2, #0]
    8b10:	1c3b      	adds	r3, r7, #0
    8b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8b14:	1a9f      	subs	r7, r3, r2
    8b16:	9b08      	ldr	r3, [sp, #32]
    8b18:	2b67      	cmp	r3, #103	; 0x67
    8b1a:	d100      	bne.n	8b1e <_vfprintf_r+0x164a>
    8b1c:	e094      	b.n	8c48 <_vfprintf_r+0x1774>
    8b1e:	2b47      	cmp	r3, #71	; 0x47
    8b20:	d100      	bne.n	8b24 <_vfprintf_r+0x1650>
    8b22:	e091      	b.n	8c48 <_vfprintf_r+0x1774>
    8b24:	9c08      	ldr	r4, [sp, #32]
    8b26:	2c65      	cmp	r4, #101	; 0x65
    8b28:	dd00      	ble.n	8b2c <_vfprintf_r+0x1658>
    8b2a:	e0ff      	b.n	8d2c <_vfprintf_r+0x1858>
    8b2c:	49b0      	ldr	r1, [pc, #704]	; (8df0 <_vfprintf_r+0x191c>)
    8b2e:	4469      	add	r1, sp
    8b30:	0623      	lsls	r3, r4, #24
    8b32:	6808      	ldr	r0, [r1, #0]
    8b34:	0e1b      	lsrs	r3, r3, #24
    8b36:	4aae      	ldr	r2, [pc, #696]	; (8df0 <_vfprintf_r+0x191c>)
    8b38:	4eb1      	ldr	r6, [pc, #708]	; (8e00 <_vfprintf_r+0x192c>)
    8b3a:	3801      	subs	r0, #1
    8b3c:	446a      	add	r2, sp
    8b3e:	446e      	add	r6, sp
    8b40:	1c04      	adds	r4, r0, #0
    8b42:	6010      	str	r0, [r2, #0]
    8b44:	7033      	strb	r3, [r6, #0]
    8b46:	2800      	cmp	r0, #0
    8b48:	da00      	bge.n	8b4c <_vfprintf_r+0x1678>
    8b4a:	e0eb      	b.n	8d24 <_vfprintf_r+0x1850>
    8b4c:	232b      	movs	r3, #43	; 0x2b
    8b4e:	7073      	strb	r3, [r6, #1]
    8b50:	2c09      	cmp	r4, #9
    8b52:	dc00      	bgt.n	8b56 <_vfprintf_r+0x1682>
    8b54:	e0db      	b.n	8d0e <_vfprintf_r+0x183a>
    8b56:	4bab      	ldr	r3, [pc, #684]	; (8e04 <_vfprintf_r+0x1930>)
    8b58:	446b      	add	r3, sp
    8b5a:	9304      	str	r3, [sp, #16]
    8b5c:	1c1d      	adds	r5, r3, #0
    8b5e:	1c20      	adds	r0, r4, #0
    8b60:	210a      	movs	r1, #10
    8b62:	f003 fcb7 	bl	c4d4 <__modsi3>
    8b66:	3d01      	subs	r5, #1
    8b68:	3030      	adds	r0, #48	; 0x30
    8b6a:	7028      	strb	r0, [r5, #0]
    8b6c:	210a      	movs	r1, #10
    8b6e:	1c20      	adds	r0, r4, #0
    8b70:	f003 fbfa 	bl	c368 <__aeabi_idiv>
    8b74:	1c04      	adds	r4, r0, #0
    8b76:	2809      	cmp	r0, #9
    8b78:	dcf1      	bgt.n	8b5e <_vfprintf_r+0x168a>
    8b7a:	1c03      	adds	r3, r0, #0
    8b7c:	1e6a      	subs	r2, r5, #1
    8b7e:	3330      	adds	r3, #48	; 0x30
    8b80:	7013      	strb	r3, [r2, #0]
    8b82:	9c04      	ldr	r4, [sp, #16]
    8b84:	42a2      	cmp	r2, r4
    8b86:	d300      	bcc.n	8b8a <_vfprintf_r+0x16b6>
    8b88:	e11b      	b.n	8dc2 <_vfprintf_r+0x18ee>
    8b8a:	499f      	ldr	r1, [pc, #636]	; (8e08 <_vfprintf_r+0x1934>)
    8b8c:	4469      	add	r1, sp
    8b8e:	7813      	ldrb	r3, [r2, #0]
    8b90:	700b      	strb	r3, [r1, #0]
    8b92:	9804      	ldr	r0, [sp, #16]
    8b94:	3201      	adds	r2, #1
    8b96:	3101      	adds	r1, #1
    8b98:	4282      	cmp	r2, r0
    8b9a:	d3f8      	bcc.n	8b8e <_vfprintf_r+0x16ba>
    8b9c:	1b89      	subs	r1, r1, r6
    8b9e:	910e      	str	r1, [sp, #56]	; 0x38
    8ba0:	19c9      	adds	r1, r1, r7
    8ba2:	468b      	mov	fp, r1
    8ba4:	2f01      	cmp	r7, #1
    8ba6:	dc00      	bgt.n	8baa <_vfprintf_r+0x16d6>
    8ba8:	e0de      	b.n	8d68 <_vfprintf_r+0x1894>
    8baa:	2001      	movs	r0, #1
    8bac:	4458      	add	r0, fp
    8bae:	4682      	mov	sl, r0
    8bb0:	4683      	mov	fp, r0
    8bb2:	2800      	cmp	r0, #0
    8bb4:	da00      	bge.n	8bb8 <_vfprintf_r+0x16e4>
    8bb6:	e155      	b.n	8e64 <_vfprintf_r+0x1990>
    8bb8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    8bba:	2c00      	cmp	r4, #0
    8bbc:	d177      	bne.n	8cae <_vfprintf_r+0x17da>
    8bbe:	4658      	mov	r0, fp
    8bc0:	2800      	cmp	r0, #0
    8bc2:	4682      	mov	sl, r0
    8bc4:	da00      	bge.n	8bc8 <_vfprintf_r+0x16f4>
    8bc6:	e147      	b.n	8e58 <_vfprintf_r+0x1984>
    8bc8:	2200      	movs	r2, #0
    8bca:	970f      	str	r7, [sp, #60]	; 0x3c
    8bcc:	9210      	str	r2, [sp, #64]	; 0x40
    8bce:	f7ff fa0d 	bl	7fec <_vfprintf_r+0xb18>
    8bd2:	4659      	mov	r1, fp
    8bd4:	3101      	adds	r1, #1
    8bd6:	9805      	ldr	r0, [sp, #20]
    8bd8:	f002 f84e 	bl	ac78 <_malloc_r>
    8bdc:	2800      	cmp	r0, #0
    8bde:	d100      	bne.n	8be2 <_vfprintf_r+0x170e>
    8be0:	e0fe      	b.n	8de0 <_vfprintf_r+0x190c>
    8be2:	9012      	str	r0, [sp, #72]	; 0x48
    8be4:	2100      	movs	r1, #0
    8be6:	2208      	movs	r2, #8
    8be8:	1c38      	adds	r0, r7, #0
    8bea:	f002 fb79 	bl	b2e0 <memset>
    8bee:	22d5      	movs	r2, #213	; 0xd5
    8bf0:	00d2      	lsls	r2, r2, #3
    8bf2:	9805      	ldr	r0, [sp, #20]
    8bf4:	9912      	ldr	r1, [sp, #72]	; 0x48
    8bf6:	446a      	add	r2, sp
    8bf8:	465b      	mov	r3, fp
    8bfa:	9700      	str	r7, [sp, #0]
    8bfc:	f000 f9b4 	bl	8f68 <_wcsrtombs_r>
    8c00:	4583      	cmp	fp, r0
    8c02:	d000      	beq.n	8c06 <_vfprintf_r+0x1732>
    8c04:	e134      	b.n	8e70 <_vfprintf_r+0x199c>
    8c06:	9912      	ldr	r1, [sp, #72]	; 0x48
    8c08:	2300      	movs	r3, #0
    8c0a:	465a      	mov	r2, fp
    8c0c:	548b      	strb	r3, [r1, r2]
    8c0e:	2a00      	cmp	r2, #0
    8c10:	4692      	mov	sl, r2
    8c12:	da00      	bge.n	8c16 <_vfprintf_r+0x1742>
    8c14:	469a      	mov	sl, r3
    8c16:	487b      	ldr	r0, [pc, #492]	; (8e04 <_vfprintf_r+0x1930>)
    8c18:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c1a:	2400      	movs	r4, #0
    8c1c:	4468      	add	r0, sp
    8c1e:	9309      	str	r3, [sp, #36]	; 0x24
    8c20:	9410      	str	r4, [sp, #64]	; 0x40
    8c22:	9004      	str	r0, [sp, #16]
    8c24:	f7ff f9e2 	bl	7fec <_vfprintf_r+0xb18>
    8c28:	2e00      	cmp	r6, #0
    8c2a:	46b2      	mov	sl, r6
    8c2c:	da01      	bge.n	8c32 <_vfprintf_r+0x175e>
    8c2e:	2200      	movs	r2, #0
    8c30:	4692      	mov	sl, r2
    8c32:	4c74      	ldr	r4, [pc, #464]	; (8e04 <_vfprintf_r+0x1930>)
    8c34:	2300      	movs	r3, #0
    8c36:	446c      	add	r4, sp
    8c38:	46b3      	mov	fp, r6
    8c3a:	9310      	str	r3, [sp, #64]	; 0x40
    8c3c:	9404      	str	r4, [sp, #16]
    8c3e:	f7ff f9d5 	bl	7fec <_vfprintf_r+0xb18>
    8c42:	2600      	movs	r6, #0
    8c44:	f7fe fd16 	bl	7674 <_vfprintf_r+0x1a0>
    8c48:	4c69      	ldr	r4, [pc, #420]	; (8df0 <_vfprintf_r+0x191c>)
    8c4a:	446c      	add	r4, sp
    8c4c:	6820      	ldr	r0, [r4, #0]
    8c4e:	1d01      	adds	r1, r0, #4
    8c50:	dc00      	bgt.n	8c54 <_vfprintf_r+0x1780>
    8c52:	e081      	b.n	8d58 <_vfprintf_r+0x1884>
    8c54:	4286      	cmp	r6, r0
    8c56:	db7f      	blt.n	8d58 <_vfprintf_r+0x1884>
    8c58:	2367      	movs	r3, #103	; 0x67
    8c5a:	9308      	str	r3, [sp, #32]
    8c5c:	4683      	mov	fp, r0
    8c5e:	455f      	cmp	r7, fp
    8c60:	dc6e      	bgt.n	8d40 <_vfprintf_r+0x186c>
    8c62:	9815      	ldr	r0, [sp, #84]	; 0x54
    8c64:	07c0      	lsls	r0, r0, #31
    8c66:	d500      	bpl.n	8c6a <_vfprintf_r+0x1796>
    8c68:	e0ae      	b.n	8dc8 <_vfprintf_r+0x18f4>
    8c6a:	4659      	mov	r1, fp
    8c6c:	2900      	cmp	r1, #0
    8c6e:	468a      	mov	sl, r1
    8c70:	da01      	bge.n	8c76 <_vfprintf_r+0x17a2>
    8c72:	2200      	movs	r2, #0
    8c74:	4692      	mov	sl, r2
    8c76:	4b63      	ldr	r3, [pc, #396]	; (8e04 <_vfprintf_r+0x1930>)
    8c78:	446b      	add	r3, sp
    8c7a:	9304      	str	r3, [sp, #16]
    8c7c:	e79c      	b.n	8bb8 <_vfprintf_r+0x16e4>
    8c7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8c80:	07db      	lsls	r3, r3, #31
    8c82:	d500      	bpl.n	8c86 <_vfprintf_r+0x17b2>
    8c84:	e731      	b.n	8aea <_vfprintf_r+0x1616>
    8c86:	21d4      	movs	r1, #212	; 0xd4
    8c88:	00c9      	lsls	r1, r1, #3
    8c8a:	4469      	add	r1, sp
    8c8c:	680b      	ldr	r3, [r1, #0]
    8c8e:	e740      	b.n	8b12 <_vfprintf_r+0x163e>
    8c90:	9809      	ldr	r0, [sp, #36]	; 0x24
    8c92:	f003 fa6d 	bl	c170 <strlen>
    8c96:	4682      	mov	sl, r0
    8c98:	4683      	mov	fp, r0
    8c9a:	2800      	cmp	r0, #0
    8c9c:	da00      	bge.n	8ca0 <_vfprintf_r+0x17cc>
    8c9e:	e0de      	b.n	8e5e <_vfprintf_r+0x198a>
    8ca0:	4a58      	ldr	r2, [pc, #352]	; (8e04 <_vfprintf_r+0x1930>)
    8ca2:	2100      	movs	r1, #0
    8ca4:	446a      	add	r2, sp
    8ca6:	9110      	str	r1, [sp, #64]	; 0x40
    8ca8:	9204      	str	r2, [sp, #16]
    8caa:	f7ff f99f 	bl	7fec <_vfprintf_r+0xb18>
    8cae:	4c57      	ldr	r4, [pc, #348]	; (8e0c <_vfprintf_r+0x1938>)
    8cb0:	232d      	movs	r3, #45	; 0x2d
    8cb2:	446c      	add	r4, sp
    8cb4:	2000      	movs	r0, #0
    8cb6:	7023      	strb	r3, [r4, #0]
    8cb8:	970f      	str	r7, [sp, #60]	; 0x3c
    8cba:	9010      	str	r0, [sp, #64]	; 0x40
    8cbc:	f7ff f99d 	bl	7ffa <_vfprintf_r+0xb26>
    8cc0:	4953      	ldr	r1, [pc, #332]	; (8e10 <_vfprintf_r+0x193c>)
    8cc2:	e62c      	b.n	891e <_vfprintf_r+0x144a>
    8cc4:	9914      	ldr	r1, [sp, #80]	; 0x50
    8cc6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8cc8:	2380      	movs	r3, #128	; 0x80
    8cca:	061b      	lsls	r3, r3, #24
    8ccc:	202d      	movs	r0, #45	; 0x2d
    8cce:	18d4      	adds	r4, r2, r3
    8cd0:	1c0d      	adds	r5, r1, #0
    8cd2:	900d      	str	r0, [sp, #52]	; 0x34
    8cd4:	e6ef      	b.n	8ab6 <_vfprintf_r+0x15e2>
    8cd6:	24d4      	movs	r4, #212	; 0xd4
    8cd8:	00e4      	lsls	r4, r4, #3
    8cda:	446c      	add	r4, sp
    8cdc:	6823      	ldr	r3, [r4, #0]
    8cde:	429f      	cmp	r7, r3
    8ce0:	d800      	bhi.n	8ce4 <_vfprintf_r+0x1810>
    8ce2:	e716      	b.n	8b12 <_vfprintf_r+0x163e>
    8ce4:	2130      	movs	r1, #48	; 0x30
    8ce6:	1c3a      	adds	r2, r7, #0
    8ce8:	20d4      	movs	r0, #212	; 0xd4
    8cea:	00c0      	lsls	r0, r0, #3
    8cec:	7019      	strb	r1, [r3, #0]
    8cee:	4468      	add	r0, sp
    8cf0:	3301      	adds	r3, #1
    8cf2:	6003      	str	r3, [r0, #0]
    8cf4:	4293      	cmp	r3, r2
    8cf6:	d1f7      	bne.n	8ce8 <_vfprintf_r+0x1814>
    8cf8:	e70b      	b.n	8b12 <_vfprintf_r+0x163e>
    8cfa:	9909      	ldr	r1, [sp, #36]	; 0x24
    8cfc:	780b      	ldrb	r3, [r1, #0]
    8cfe:	2b30      	cmp	r3, #48	; 0x30
    8d00:	d100      	bne.n	8d04 <_vfprintf_r+0x1830>
    8d02:	e099      	b.n	8e38 <_vfprintf_r+0x1964>
    8d04:	493a      	ldr	r1, [pc, #232]	; (8df0 <_vfprintf_r+0x191c>)
    8d06:	4469      	add	r1, sp
    8d08:	6808      	ldr	r0, [r1, #0]
    8d0a:	183f      	adds	r7, r7, r0
    8d0c:	e6f3      	b.n	8af6 <_vfprintf_r+0x1622>
    8d0e:	2330      	movs	r3, #48	; 0x30
    8d10:	4940      	ldr	r1, [pc, #256]	; (8e14 <_vfprintf_r+0x1940>)
    8d12:	4a3c      	ldr	r2, [pc, #240]	; (8e04 <_vfprintf_r+0x1930>)
    8d14:	70b3      	strb	r3, [r6, #2]
    8d16:	1c23      	adds	r3, r4, #0
    8d18:	3330      	adds	r3, #48	; 0x30
    8d1a:	446a      	add	r2, sp
    8d1c:	4469      	add	r1, sp
    8d1e:	70f3      	strb	r3, [r6, #3]
    8d20:	9204      	str	r2, [sp, #16]
    8d22:	e73b      	b.n	8b9c <_vfprintf_r+0x16c8>
    8d24:	232d      	movs	r3, #45	; 0x2d
    8d26:	4244      	negs	r4, r0
    8d28:	7073      	strb	r3, [r6, #1]
    8d2a:	e711      	b.n	8b50 <_vfprintf_r+0x167c>
    8d2c:	9a08      	ldr	r2, [sp, #32]
    8d2e:	2a66      	cmp	r2, #102	; 0x66
    8d30:	d072      	beq.n	8e18 <_vfprintf_r+0x1944>
    8d32:	4c2f      	ldr	r4, [pc, #188]	; (8df0 <_vfprintf_r+0x191c>)
    8d34:	446c      	add	r4, sp
    8d36:	6820      	ldr	r0, [r4, #0]
    8d38:	e790      	b.n	8c5c <_vfprintf_r+0x1788>
    8d3a:	46b2      	mov	sl, r6
    8d3c:	46b3      	mov	fp, r6
    8d3e:	e7af      	b.n	8ca0 <_vfprintf_r+0x17cc>
    8d40:	2800      	cmp	r0, #0
    8d42:	dd4a      	ble.n	8dda <_vfprintf_r+0x1906>
    8d44:	2001      	movs	r0, #1
    8d46:	19c0      	adds	r0, r0, r7
    8d48:	4682      	mov	sl, r0
    8d4a:	4683      	mov	fp, r0
    8d4c:	2800      	cmp	r0, #0
    8d4e:	db41      	blt.n	8dd4 <_vfprintf_r+0x1900>
    8d50:	492c      	ldr	r1, [pc, #176]	; (8e04 <_vfprintf_r+0x1930>)
    8d52:	4469      	add	r1, sp
    8d54:	9104      	str	r1, [sp, #16]
    8d56:	e72f      	b.n	8bb8 <_vfprintf_r+0x16e4>
    8d58:	9a08      	ldr	r2, [sp, #32]
    8d5a:	2a67      	cmp	r2, #103	; 0x67
    8d5c:	d100      	bne.n	8d60 <_vfprintf_r+0x188c>
    8d5e:	e084      	b.n	8e6a <_vfprintf_r+0x1996>
    8d60:	2245      	movs	r2, #69	; 0x45
    8d62:	2345      	movs	r3, #69	; 0x45
    8d64:	9208      	str	r2, [sp, #32]
    8d66:	e6e6      	b.n	8b36 <_vfprintf_r+0x1662>
    8d68:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8d6a:	07db      	lsls	r3, r3, #31
    8d6c:	d500      	bpl.n	8d70 <_vfprintf_r+0x189c>
    8d6e:	e71c      	b.n	8baa <_vfprintf_r+0x16d6>
    8d70:	2900      	cmp	r1, #0
    8d72:	468a      	mov	sl, r1
    8d74:	db00      	blt.n	8d78 <_vfprintf_r+0x18a4>
    8d76:	e71f      	b.n	8bb8 <_vfprintf_r+0x16e4>
    8d78:	2400      	movs	r4, #0
    8d7a:	46a2      	mov	sl, r4
    8d7c:	e71c      	b.n	8bb8 <_vfprintf_r+0x16e4>
    8d7e:	1c73      	adds	r3, r6, #1
    8d80:	469a      	mov	sl, r3
    8d82:	2702      	movs	r7, #2
    8d84:	e68e      	b.n	8aa4 <_vfprintf_r+0x15d0>
    8d86:	46b2      	mov	sl, r6
    8d88:	2703      	movs	r7, #3
    8d8a:	e68b      	b.n	8aa4 <_vfprintf_r+0x15d0>
    8d8c:	22d5      	movs	r2, #213	; 0xd5
    8d8e:	00d2      	lsls	r2, r2, #3
    8d90:	446a      	add	r2, sp
    8d92:	9805      	ldr	r0, [sp, #20]
    8d94:	2100      	movs	r1, #0
    8d96:	2300      	movs	r3, #0
    8d98:	9700      	str	r7, [sp, #0]
    8d9a:	f000 f8e5 	bl	8f68 <_wcsrtombs_r>
    8d9e:	1c02      	adds	r2, r0, #0
    8da0:	4683      	mov	fp, r0
    8da2:	3201      	adds	r2, #1
    8da4:	d005      	beq.n	8db2 <_vfprintf_r+0x18de>
    8da6:	22d5      	movs	r2, #213	; 0xd5
    8da8:	9909      	ldr	r1, [sp, #36]	; 0x24
    8daa:	00d2      	lsls	r2, r2, #3
    8dac:	446a      	add	r2, sp
    8dae:	6011      	str	r1, [r2, #0]
    8db0:	e52a      	b.n	8808 <_vfprintf_r+0x1334>
    8db2:	464c      	mov	r4, r9
    8db4:	89a3      	ldrh	r3, [r4, #12]
    8db6:	2240      	movs	r2, #64	; 0x40
    8db8:	4313      	orrs	r3, r2
    8dba:	4648      	mov	r0, r9
    8dbc:	8183      	strh	r3, [r0, #12]
    8dbe:	f7fe fec1 	bl	7b44 <_vfprintf_r+0x670>
    8dc2:	4911      	ldr	r1, [pc, #68]	; (8e08 <_vfprintf_r+0x1934>)
    8dc4:	4469      	add	r1, sp
    8dc6:	e6e9      	b.n	8b9c <_vfprintf_r+0x16c8>
    8dc8:	2401      	movs	r4, #1
    8dca:	445c      	add	r4, fp
    8dcc:	46a2      	mov	sl, r4
    8dce:	46a3      	mov	fp, r4
    8dd0:	2c00      	cmp	r4, #0
    8dd2:	dabd      	bge.n	8d50 <_vfprintf_r+0x187c>
    8dd4:	2000      	movs	r0, #0
    8dd6:	4682      	mov	sl, r0
    8dd8:	e7ba      	b.n	8d50 <_vfprintf_r+0x187c>
    8dda:	2302      	movs	r3, #2
    8ddc:	1a18      	subs	r0, r3, r0
    8dde:	e7b2      	b.n	8d46 <_vfprintf_r+0x1872>
    8de0:	4649      	mov	r1, r9
    8de2:	898b      	ldrh	r3, [r1, #12]
    8de4:	2240      	movs	r2, #64	; 0x40
    8de6:	4313      	orrs	r3, r2
    8de8:	464a      	mov	r2, r9
    8dea:	8193      	strh	r3, [r2, #12]
    8dec:	f7fe feaa 	bl	7b44 <_vfprintf_r+0x670>
    8df0:	000006ac 	.word	0x000006ac
    8df4:	000006a4 	.word	0x000006a4
	...
    8e00:	00000699 	.word	0x00000699
    8e04:	0000067c 	.word	0x0000067c
    8e08:	0000069b 	.word	0x0000069b
    8e0c:	000006b3 	.word	0x000006b3
    8e10:	00012a2c 	.word	0x00012a2c
    8e14:	0000069d 	.word	0x0000069d
    8e18:	4b32      	ldr	r3, [pc, #200]	; (8ee4 <_vfprintf_r+0x1a10>)
    8e1a:	446b      	add	r3, sp
    8e1c:	681b      	ldr	r3, [r3, #0]
    8e1e:	469b      	mov	fp, r3
    8e20:	2b00      	cmp	r3, #0
    8e22:	dd47      	ble.n	8eb4 <_vfprintf_r+0x19e0>
    8e24:	2e00      	cmp	r6, #0
    8e26:	d13a      	bne.n	8e9e <_vfprintf_r+0x19ca>
    8e28:	9c15      	ldr	r4, [sp, #84]	; 0x54
    8e2a:	07e4      	lsls	r4, r4, #31
    8e2c:	d437      	bmi.n	8e9e <_vfprintf_r+0x19ca>
    8e2e:	482e      	ldr	r0, [pc, #184]	; (8ee8 <_vfprintf_r+0x1a14>)
    8e30:	469a      	mov	sl, r3
    8e32:	4468      	add	r0, sp
    8e34:	9004      	str	r0, [sp, #16]
    8e36:	e6bf      	b.n	8bb8 <_vfprintf_r+0x16e4>
    8e38:	1c20      	adds	r0, r4, #0
    8e3a:	1c29      	adds	r1, r5, #0
    8e3c:	4a2b      	ldr	r2, [pc, #172]	; (8eec <_vfprintf_r+0x1a18>)
    8e3e:	4b2c      	ldr	r3, [pc, #176]	; (8ef0 <_vfprintf_r+0x1a1c>)
    8e40:	f009 fd76 	bl	12930 <____nedf2_from_thumb>
    8e44:	2800      	cmp	r0, #0
    8e46:	d100      	bne.n	8e4a <_vfprintf_r+0x1976>
    8e48:	e75c      	b.n	8d04 <_vfprintf_r+0x1830>
    8e4a:	2301      	movs	r3, #1
    8e4c:	4652      	mov	r2, sl
    8e4e:	1a98      	subs	r0, r3, r2
    8e50:	4b24      	ldr	r3, [pc, #144]	; (8ee4 <_vfprintf_r+0x1a10>)
    8e52:	446b      	add	r3, sp
    8e54:	6018      	str	r0, [r3, #0]
    8e56:	e755      	b.n	8d04 <_vfprintf_r+0x1830>
    8e58:	2100      	movs	r1, #0
    8e5a:	468a      	mov	sl, r1
    8e5c:	e6b4      	b.n	8bc8 <_vfprintf_r+0x16f4>
    8e5e:	2000      	movs	r0, #0
    8e60:	4682      	mov	sl, r0
    8e62:	e71d      	b.n	8ca0 <_vfprintf_r+0x17cc>
    8e64:	2100      	movs	r1, #0
    8e66:	468a      	mov	sl, r1
    8e68:	e6a6      	b.n	8bb8 <_vfprintf_r+0x16e4>
    8e6a:	2365      	movs	r3, #101	; 0x65
    8e6c:	9308      	str	r3, [sp, #32]
    8e6e:	e662      	b.n	8b36 <_vfprintf_r+0x1662>
    8e70:	464c      	mov	r4, r9
    8e72:	89a3      	ldrh	r3, [r4, #12]
    8e74:	2240      	movs	r2, #64	; 0x40
    8e76:	4313      	orrs	r3, r2
    8e78:	4648      	mov	r0, r9
    8e7a:	8183      	strh	r3, [r0, #12]
    8e7c:	f7fe fe5e 	bl	7b3c <_vfprintf_r+0x668>
    8e80:	4652      	mov	r2, sl
    8e82:	6816      	ldr	r6, [r2, #0]
    8e84:	4653      	mov	r3, sl
    8e86:	3304      	adds	r3, #4
    8e88:	2e00      	cmp	r6, #0
    8e8a:	db01      	blt.n	8e90 <_vfprintf_r+0x19bc>
    8e8c:	f7ff f9ea 	bl	8264 <_vfprintf_r+0xd90>
    8e90:	9907      	ldr	r1, [sp, #28]
    8e92:	2601      	movs	r6, #1
    8e94:	780a      	ldrb	r2, [r1, #0]
    8e96:	469a      	mov	sl, r3
    8e98:	4276      	negs	r6, r6
    8e9a:	f7fe fbe7 	bl	766c <_vfprintf_r+0x198>
    8e9e:	465b      	mov	r3, fp
    8ea0:	3301      	adds	r3, #1
    8ea2:	18f6      	adds	r6, r6, r3
    8ea4:	46b2      	mov	sl, r6
    8ea6:	46b3      	mov	fp, r6
    8ea8:	2e00      	cmp	r6, #0
    8eaa:	db15      	blt.n	8ed8 <_vfprintf_r+0x1a04>
    8eac:	4a0e      	ldr	r2, [pc, #56]	; (8ee8 <_vfprintf_r+0x1a14>)
    8eae:	446a      	add	r2, sp
    8eb0:	9204      	str	r2, [sp, #16]
    8eb2:	e681      	b.n	8bb8 <_vfprintf_r+0x16e4>
    8eb4:	2e00      	cmp	r6, #0
    8eb6:	d109      	bne.n	8ecc <_vfprintf_r+0x19f8>
    8eb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8eba:	07db      	lsls	r3, r3, #31
    8ebc:	d406      	bmi.n	8ecc <_vfprintf_r+0x19f8>
    8ebe:	480a      	ldr	r0, [pc, #40]	; (8ee8 <_vfprintf_r+0x1a14>)
    8ec0:	2401      	movs	r4, #1
    8ec2:	4468      	add	r0, sp
    8ec4:	46a3      	mov	fp, r4
    8ec6:	46a2      	mov	sl, r4
    8ec8:	9004      	str	r0, [sp, #16]
    8eca:	e675      	b.n	8bb8 <_vfprintf_r+0x16e4>
    8ecc:	3602      	adds	r6, #2
    8ece:	46b2      	mov	sl, r6
    8ed0:	46b3      	mov	fp, r6
    8ed2:	2e00      	cmp	r6, #0
    8ed4:	db00      	blt.n	8ed8 <_vfprintf_r+0x1a04>
    8ed6:	e6ce      	b.n	8c76 <_vfprintf_r+0x17a2>
    8ed8:	4a03      	ldr	r2, [pc, #12]	; (8ee8 <_vfprintf_r+0x1a14>)
    8eda:	2100      	movs	r1, #0
    8edc:	446a      	add	r2, sp
    8ede:	468a      	mov	sl, r1
    8ee0:	9204      	str	r2, [sp, #16]
    8ee2:	e669      	b.n	8bb8 <_vfprintf_r+0x16e4>
    8ee4:	000006ac 	.word	0x000006ac
    8ee8:	0000067c 	.word	0x0000067c
	...

00008ef4 <vfprintf>:
    8ef4:	b530      	push	{r4, r5, lr}
    8ef6:	1c13      	adds	r3, r2, #0
    8ef8:	4a05      	ldr	r2, [pc, #20]	; (8f10 <vfprintf+0x1c>)
    8efa:	1c0d      	adds	r5, r1, #0
    8efc:	1c04      	adds	r4, r0, #0
    8efe:	1c21      	adds	r1, r4, #0
    8f00:	6810      	ldr	r0, [r2, #0]
    8f02:	1c2a      	adds	r2, r5, #0
    8f04:	f7fe fae6 	bl	74d4 <_vfprintf_r>
    8f08:	bc30      	pop	{r4, r5}
    8f0a:	bc02      	pop	{r1}
    8f0c:	4708      	bx	r1
    8f0e:	46c0      	nop			; (mov r8, r8)
    8f10:	40000014 	.word	0x40000014

00008f14 <_wcrtomb_r>:
    8f14:	b530      	push	{r4, r5, lr}
    8f16:	b083      	sub	sp, #12
    8f18:	1c05      	adds	r5, r0, #0
    8f1a:	1c1c      	adds	r4, r3, #0
    8f1c:	2900      	cmp	r1, #0
    8f1e:	d00d      	beq.n	8f3c <_wcrtomb_r+0x28>
    8f20:	f000 f8a4 	bl	906c <_wctomb_r>
    8f24:	1c43      	adds	r3, r0, #1
    8f26:	d105      	bne.n	8f34 <_wcrtomb_r+0x20>
    8f28:	2300      	movs	r3, #0
    8f2a:	6023      	str	r3, [r4, #0]
    8f2c:	238a      	movs	r3, #138	; 0x8a
    8f2e:	2001      	movs	r0, #1
    8f30:	602b      	str	r3, [r5, #0]
    8f32:	4240      	negs	r0, r0
    8f34:	b003      	add	sp, #12
    8f36:	bc30      	pop	{r4, r5}
    8f38:	bc02      	pop	{r1}
    8f3a:	4708      	bx	r1
    8f3c:	4669      	mov	r1, sp
    8f3e:	3102      	adds	r1, #2
    8f40:	2200      	movs	r2, #0
    8f42:	f000 f893 	bl	906c <_wctomb_r>
    8f46:	e7ed      	b.n	8f24 <_wcrtomb_r+0x10>

00008f48 <wcrtomb>:
    8f48:	b530      	push	{r4, r5, lr}
    8f4a:	1c13      	adds	r3, r2, #0
    8f4c:	4a05      	ldr	r2, [pc, #20]	; (8f64 <wcrtomb+0x1c>)
    8f4e:	1c0d      	adds	r5, r1, #0
    8f50:	1c04      	adds	r4, r0, #0
    8f52:	1c21      	adds	r1, r4, #0
    8f54:	6810      	ldr	r0, [r2, #0]
    8f56:	1c2a      	adds	r2, r5, #0
    8f58:	f7ff ffdc 	bl	8f14 <_wcrtomb_r>
    8f5c:	bc30      	pop	{r4, r5}
    8f5e:	bc02      	pop	{r1}
    8f60:	4708      	bx	r1
    8f62:	46c0      	nop			; (mov r8, r8)
    8f64:	40000014 	.word	0x40000014

00008f68 <_wcsrtombs_r>:
    8f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f6a:	465f      	mov	r7, fp
    8f6c:	4656      	mov	r6, sl
    8f6e:	464d      	mov	r5, r9
    8f70:	4644      	mov	r4, r8
    8f72:	b4f0      	push	{r4, r5, r6, r7}
    8f74:	b086      	sub	sp, #24
    8f76:	9002      	str	r0, [sp, #8]
    8f78:	468b      	mov	fp, r1
    8f7a:	9201      	str	r2, [sp, #4]
    8f7c:	1c1c      	adds	r4, r3, #0
    8f7e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    8f80:	2900      	cmp	r1, #0
    8f82:	d046      	beq.n	9012 <_wcsrtombs_r+0xaa>
    8f84:	6811      	ldr	r1, [r2, #0]
    8f86:	4688      	mov	r8, r1
    8f88:	2b00      	cmp	r3, #0
    8f8a:	d050      	beq.n	902e <_wcsrtombs_r+0xc6>
    8f8c:	465a      	mov	r2, fp
    8f8e:	9200      	str	r2, [sp, #0]
    8f90:	2500      	movs	r5, #0
    8f92:	683a      	ldr	r2, [r7, #0]
    8f94:	687b      	ldr	r3, [r7, #4]
    8f96:	4646      	mov	r6, r8
    8f98:	4669      	mov	r1, sp
    8f9a:	4691      	mov	r9, r2
    8f9c:	469a      	mov	sl, r3
    8f9e:	310e      	adds	r1, #14
    8fa0:	6832      	ldr	r2, [r6, #0]
    8fa2:	9802      	ldr	r0, [sp, #8]
    8fa4:	1c3b      	adds	r3, r7, #0
    8fa6:	f7ff ffb5 	bl	8f14 <_wcrtomb_r>
    8faa:	1c41      	adds	r1, r0, #1
    8fac:	d037      	beq.n	901e <_wcsrtombs_r+0xb6>
    8fae:	1a23      	subs	r3, r4, r0
    8fb0:	42ab      	cmp	r3, r5
    8fb2:	d320      	bcc.n	8ff6 <_wcsrtombs_r+0x8e>
    8fb4:	42a0      	cmp	r0, r4
    8fb6:	d21e      	bcs.n	8ff6 <_wcsrtombs_r+0x8e>
    8fb8:	465a      	mov	r2, fp
    8fba:	182d      	adds	r5, r5, r0
    8fbc:	2a00      	cmp	r2, #0
    8fbe:	d011      	beq.n	8fe4 <_wcsrtombs_r+0x7c>
    8fc0:	2800      	cmp	r0, #0
    8fc2:	dd0b      	ble.n	8fdc <_wcsrtombs_r+0x74>
    8fc4:	2200      	movs	r2, #0
    8fc6:	260e      	movs	r6, #14
    8fc8:	18b6      	adds	r6, r6, r2
    8fca:	4669      	mov	r1, sp
    8fcc:	5c73      	ldrb	r3, [r6, r1]
    8fce:	9e00      	ldr	r6, [sp, #0]
    8fd0:	5593      	strb	r3, [r2, r6]
    8fd2:	3201      	adds	r2, #1
    8fd4:	4290      	cmp	r0, r2
    8fd6:	d1f6      	bne.n	8fc6 <_wcsrtombs_r+0x5e>
    8fd8:	1836      	adds	r6, r6, r0
    8fda:	9600      	str	r6, [sp, #0]
    8fdc:	9901      	ldr	r1, [sp, #4]
    8fde:	680b      	ldr	r3, [r1, #0]
    8fe0:	3304      	adds	r3, #4
    8fe2:	600b      	str	r3, [r1, #0]
    8fe4:	4642      	mov	r2, r8
    8fe6:	6813      	ldr	r3, [r2, #0]
    8fe8:	2b00      	cmp	r3, #0
    8fea:	d022      	beq.n	9032 <_wcsrtombs_r+0xca>
    8fec:	42a5      	cmp	r5, r4
    8fee:	d206      	bcs.n	8ffe <_wcsrtombs_r+0x96>
    8ff0:	2604      	movs	r6, #4
    8ff2:	44b0      	add	r8, r6
    8ff4:	e7cd      	b.n	8f92 <_wcsrtombs_r+0x2a>
    8ff6:	464a      	mov	r2, r9
    8ff8:	4653      	mov	r3, sl
    8ffa:	603a      	str	r2, [r7, #0]
    8ffc:	607b      	str	r3, [r7, #4]
    8ffe:	1c28      	adds	r0, r5, #0
    9000:	b006      	add	sp, #24
    9002:	bc3c      	pop	{r2, r3, r4, r5}
    9004:	4690      	mov	r8, r2
    9006:	4699      	mov	r9, r3
    9008:	46a2      	mov	sl, r4
    900a:	46ab      	mov	fp, r5
    900c:	bcf0      	pop	{r4, r5, r6, r7}
    900e:	bc02      	pop	{r1}
    9010:	4708      	bx	r1
    9012:	9901      	ldr	r1, [sp, #4]
    9014:	6809      	ldr	r1, [r1, #0]
    9016:	2401      	movs	r4, #1
    9018:	4688      	mov	r8, r1
    901a:	4264      	negs	r4, r4
    901c:	e7b6      	b.n	8f8c <_wcsrtombs_r+0x24>
    901e:	9902      	ldr	r1, [sp, #8]
    9020:	238a      	movs	r3, #138	; 0x8a
    9022:	2501      	movs	r5, #1
    9024:	600b      	str	r3, [r1, #0]
    9026:	426d      	negs	r5, r5
    9028:	2300      	movs	r3, #0
    902a:	603b      	str	r3, [r7, #0]
    902c:	e7e7      	b.n	8ffe <_wcsrtombs_r+0x96>
    902e:	2500      	movs	r5, #0
    9030:	e7e5      	b.n	8ffe <_wcsrtombs_r+0x96>
    9032:	465e      	mov	r6, fp
    9034:	2e00      	cmp	r6, #0
    9036:	d001      	beq.n	903c <_wcsrtombs_r+0xd4>
    9038:	9901      	ldr	r1, [sp, #4]
    903a:	600b      	str	r3, [r1, #0]
    903c:	3d01      	subs	r5, #1
    903e:	603b      	str	r3, [r7, #0]
    9040:	e7dd      	b.n	8ffe <_wcsrtombs_r+0x96>
    9042:	46c0      	nop			; (mov r8, r8)

00009044 <wcsrtombs>:
    9044:	b570      	push	{r4, r5, r6, lr}
    9046:	1c16      	adds	r6, r2, #0
    9048:	4a07      	ldr	r2, [pc, #28]	; (9068 <wcsrtombs+0x24>)
    904a:	1c0d      	adds	r5, r1, #0
    904c:	b081      	sub	sp, #4
    904e:	1c04      	adds	r4, r0, #0
    9050:	1c21      	adds	r1, r4, #0
    9052:	6810      	ldr	r0, [r2, #0]
    9054:	9300      	str	r3, [sp, #0]
    9056:	1c2a      	adds	r2, r5, #0
    9058:	1c33      	adds	r3, r6, #0
    905a:	f7ff ff85 	bl	8f68 <_wcsrtombs_r>
    905e:	b001      	add	sp, #4
    9060:	bc70      	pop	{r4, r5, r6}
    9062:	bc02      	pop	{r1}
    9064:	4708      	bx	r1
    9066:	46c0      	nop			; (mov r8, r8)
    9068:	40000014 	.word	0x40000014

0000906c <_wctomb_r>:
    906c:	b5f0      	push	{r4, r5, r6, r7, lr}
    906e:	4c9e      	ldr	r4, [pc, #632]	; (92e8 <_wctomb_r+0x27c>)
    9070:	1c20      	adds	r0, r4, #0
    9072:	1c0e      	adds	r6, r1, #0
    9074:	1c15      	adds	r5, r2, #0
    9076:	1c1f      	adds	r7, r3, #0
    9078:	f003 f87a 	bl	c170 <strlen>
    907c:	2801      	cmp	r0, #1
    907e:	d91d      	bls.n	90bc <_wctomb_r+0x50>
    9080:	499a      	ldr	r1, [pc, #616]	; (92ec <_wctomb_r+0x280>)
    9082:	1c20      	adds	r0, r4, #0
    9084:	f003 f840 	bl	c108 <strcmp>
    9088:	2800      	cmp	r0, #0
    908a:	d11e      	bne.n	90ca <_wctomb_r+0x5e>
    908c:	2e00      	cmp	r6, #0
    908e:	d03b      	beq.n	9108 <_wctomb_r+0x9c>
    9090:	2d7f      	cmp	r5, #127	; 0x7f
    9092:	dd15      	ble.n	90c0 <_wctomb_r+0x54>
    9094:	1c2a      	adds	r2, r5, #0
    9096:	4b96      	ldr	r3, [pc, #600]	; (92f0 <_wctomb_r+0x284>)
    9098:	3a80      	subs	r2, #128	; 0x80
    909a:	429a      	cmp	r2, r3
    909c:	d860      	bhi.n	9160 <_wctomb_r+0xf4>
    909e:	056a      	lsls	r2, r5, #21
    90a0:	2340      	movs	r3, #64	; 0x40
    90a2:	425b      	negs	r3, r3
    90a4:	0ed2      	lsrs	r2, r2, #27
    90a6:	431a      	orrs	r2, r3
    90a8:	7032      	strb	r2, [r6, #0]
    90aa:	233f      	movs	r3, #63	; 0x3f
    90ac:	1c2a      	adds	r2, r5, #0
    90ae:	401a      	ands	r2, r3
    90b0:	2380      	movs	r3, #128	; 0x80
    90b2:	425b      	negs	r3, r3
    90b4:	431a      	orrs	r2, r3
    90b6:	2002      	movs	r0, #2
    90b8:	7072      	strb	r2, [r6, #1]
    90ba:	e003      	b.n	90c4 <_wctomb_r+0x58>
    90bc:	2e00      	cmp	r6, #0
    90be:	d023      	beq.n	9108 <_wctomb_r+0x9c>
    90c0:	7035      	strb	r5, [r6, #0]
    90c2:	2001      	movs	r0, #1
    90c4:	bcf0      	pop	{r4, r5, r6, r7}
    90c6:	bc02      	pop	{r1}
    90c8:	4708      	bx	r1
    90ca:	498a      	ldr	r1, [pc, #552]	; (92f4 <_wctomb_r+0x288>)
    90cc:	1c20      	adds	r0, r4, #0
    90ce:	f003 f81b 	bl	c108 <strcmp>
    90d2:	2800      	cmp	r0, #0
    90d4:	d11a      	bne.n	910c <_wctomb_r+0xa0>
    90d6:	2e00      	cmp	r6, #0
    90d8:	d016      	beq.n	9108 <_wctomb_r+0x9c>
    90da:	042b      	lsls	r3, r5, #16
    90dc:	0e1a      	lsrs	r2, r3, #24
    90de:	2a00      	cmp	r2, #0
    90e0:	d0ee      	beq.n	90c0 <_wctomb_r+0x54>
    90e2:	1c13      	adds	r3, r2, #0
    90e4:	337f      	adds	r3, #127	; 0x7f
    90e6:	061b      	lsls	r3, r3, #24
    90e8:	0e1b      	lsrs	r3, r3, #24
    90ea:	2b1e      	cmp	r3, #30
    90ec:	d865      	bhi.n	91ba <_wctomb_r+0x14e>
    90ee:	20c0      	movs	r0, #192	; 0xc0
    90f0:	062b      	lsls	r3, r5, #24
    90f2:	0600      	lsls	r0, r0, #24
    90f4:	0e19      	lsrs	r1, r3, #24
    90f6:	181b      	adds	r3, r3, r0
    90f8:	0e1b      	lsrs	r3, r3, #24
    90fa:	2b3e      	cmp	r3, #62	; 0x3e
    90fc:	d900      	bls.n	9100 <_wctomb_r+0x94>
    90fe:	e0af      	b.n	9260 <_wctomb_r+0x1f4>
    9100:	2002      	movs	r0, #2
    9102:	7032      	strb	r2, [r6, #0]
    9104:	7071      	strb	r1, [r6, #1]
    9106:	e7dd      	b.n	90c4 <_wctomb_r+0x58>
    9108:	2000      	movs	r0, #0
    910a:	e7db      	b.n	90c4 <_wctomb_r+0x58>
    910c:	497a      	ldr	r1, [pc, #488]	; (92f8 <_wctomb_r+0x28c>)
    910e:	1c20      	adds	r0, r4, #0
    9110:	f002 fffa 	bl	c108 <strcmp>
    9114:	2800      	cmp	r0, #0
    9116:	d10f      	bne.n	9138 <_wctomb_r+0xcc>
    9118:	2e00      	cmp	r6, #0
    911a:	d0f5      	beq.n	9108 <_wctomb_r+0x9c>
    911c:	042b      	lsls	r3, r5, #16
    911e:	0e19      	lsrs	r1, r3, #24
    9120:	2900      	cmp	r1, #0
    9122:	d0cd      	beq.n	90c0 <_wctomb_r+0x54>
    9124:	1c0b      	adds	r3, r1, #0
    9126:	335f      	adds	r3, #95	; 0x5f
    9128:	061b      	lsls	r3, r3, #24
    912a:	0e1b      	lsrs	r3, r3, #24
    912c:	2b5d      	cmp	r3, #93	; 0x5d
    912e:	d800      	bhi.n	9132 <_wctomb_r+0xc6>
    9130:	e09c      	b.n	926c <_wctomb_r+0x200>
    9132:	2001      	movs	r0, #1
    9134:	4240      	negs	r0, r0
    9136:	e7c5      	b.n	90c4 <_wctomb_r+0x58>
    9138:	4970      	ldr	r1, [pc, #448]	; (92fc <_wctomb_r+0x290>)
    913a:	1c20      	adds	r0, r4, #0
    913c:	f002 ffe4 	bl	c108 <strcmp>
    9140:	2800      	cmp	r0, #0
    9142:	d1bb      	bne.n	90bc <_wctomb_r+0x50>
    9144:	2e00      	cmp	r6, #0
    9146:	d0bc      	beq.n	90c2 <_wctomb_r+0x56>
    9148:	062b      	lsls	r3, r5, #24
    914a:	0e1c      	lsrs	r4, r3, #24
    914c:	042b      	lsls	r3, r5, #16
    914e:	0e19      	lsrs	r1, r3, #24
    9150:	2900      	cmp	r1, #0
    9152:	d139      	bne.n	91c8 <_wctomb_r+0x15c>
    9154:	683b      	ldr	r3, [r7, #0]
    9156:	2b00      	cmp	r3, #0
    9158:	d123      	bne.n	91a2 <_wctomb_r+0x136>
    915a:	2001      	movs	r0, #1
    915c:	7034      	strb	r4, [r6, #0]
    915e:	e7b1      	b.n	90c4 <_wctomb_r+0x58>
    9160:	4867      	ldr	r0, [pc, #412]	; (9300 <_wctomb_r+0x294>)
    9162:	4b68      	ldr	r3, [pc, #416]	; (9304 <_wctomb_r+0x298>)
    9164:	182a      	adds	r2, r5, r0
    9166:	429a      	cmp	r2, r3
    9168:	d962      	bls.n	9230 <_wctomb_r+0x1c4>
    916a:	4867      	ldr	r0, [pc, #412]	; (9308 <_wctomb_r+0x29c>)
    916c:	4b67      	ldr	r3, [pc, #412]	; (930c <_wctomb_r+0x2a0>)
    916e:	182a      	adds	r2, r5, r0
    9170:	429a      	cmp	r2, r3
    9172:	d83c      	bhi.n	91ee <_wctomb_r+0x182>
    9174:	02ea      	lsls	r2, r5, #11
    9176:	2310      	movs	r3, #16
    9178:	425b      	negs	r3, r3
    917a:	0f52      	lsrs	r2, r2, #29
    917c:	431a      	orrs	r2, r3
    917e:	7032      	strb	r2, [r6, #0]
    9180:	03ab      	lsls	r3, r5, #14
    9182:	2280      	movs	r2, #128	; 0x80
    9184:	4252      	negs	r2, r2
    9186:	0e9b      	lsrs	r3, r3, #26
    9188:	4313      	orrs	r3, r2
    918a:	7073      	strb	r3, [r6, #1]
    918c:	052b      	lsls	r3, r5, #20
    918e:	0e9b      	lsrs	r3, r3, #26
    9190:	1c71      	adds	r1, r6, #1
    9192:	4313      	orrs	r3, r2
    9194:	704b      	strb	r3, [r1, #1]
    9196:	233f      	movs	r3, #63	; 0x3f
    9198:	402b      	ands	r3, r5
    919a:	4313      	orrs	r3, r2
    919c:	2004      	movs	r0, #4
    919e:	708b      	strb	r3, [r1, #2]
    91a0:	e790      	b.n	90c4 <_wctomb_r+0x58>
    91a2:	231b      	movs	r3, #27
    91a4:	6039      	str	r1, [r7, #0]
    91a6:	1c72      	adds	r2, r6, #1
    91a8:	7033      	strb	r3, [r6, #0]
    91aa:	2328      	movs	r3, #40	; 0x28
    91ac:	7073      	strb	r3, [r6, #1]
    91ae:	2004      	movs	r0, #4
    91b0:	2342      	movs	r3, #66	; 0x42
    91b2:	1c96      	adds	r6, r2, #2
    91b4:	7053      	strb	r3, [r2, #1]
    91b6:	7034      	strb	r4, [r6, #0]
    91b8:	e784      	b.n	90c4 <_wctomb_r+0x58>
    91ba:	1c13      	adds	r3, r2, #0
    91bc:	3320      	adds	r3, #32
    91be:	061b      	lsls	r3, r3, #24
    91c0:	0e1b      	lsrs	r3, r3, #24
    91c2:	2b0f      	cmp	r3, #15
    91c4:	d993      	bls.n	90ee <_wctomb_r+0x82>
    91c6:	e7b4      	b.n	9132 <_wctomb_r+0xc6>
    91c8:	1c0b      	adds	r3, r1, #0
    91ca:	3b21      	subs	r3, #33	; 0x21
    91cc:	061b      	lsls	r3, r3, #24
    91ce:	0e1b      	lsrs	r3, r3, #24
    91d0:	2b5d      	cmp	r3, #93	; 0x5d
    91d2:	d8ae      	bhi.n	9132 <_wctomb_r+0xc6>
    91d4:	1c23      	adds	r3, r4, #0
    91d6:	3b21      	subs	r3, #33	; 0x21
    91d8:	061b      	lsls	r3, r3, #24
    91da:	0e1b      	lsrs	r3, r3, #24
    91dc:	2b5d      	cmp	r3, #93	; 0x5d
    91de:	d8a8      	bhi.n	9132 <_wctomb_r+0xc6>
    91e0:	683b      	ldr	r3, [r7, #0]
    91e2:	2b00      	cmp	r3, #0
    91e4:	d04f      	beq.n	9286 <_wctomb_r+0x21a>
    91e6:	2002      	movs	r0, #2
    91e8:	7031      	strb	r1, [r6, #0]
    91ea:	7074      	strb	r4, [r6, #1]
    91ec:	e76a      	b.n	90c4 <_wctomb_r+0x58>
    91ee:	4b48      	ldr	r3, [pc, #288]	; (9310 <_wctomb_r+0x2a4>)
    91f0:	18ea      	adds	r2, r5, r3
    91f2:	4b48      	ldr	r3, [pc, #288]	; (9314 <_wctomb_r+0x2a8>)
    91f4:	429a      	cmp	r2, r3
    91f6:	d852      	bhi.n	929e <_wctomb_r+0x232>
    91f8:	01aa      	lsls	r2, r5, #6
    91fa:	2308      	movs	r3, #8
    91fc:	425b      	negs	r3, r3
    91fe:	0f92      	lsrs	r2, r2, #30
    9200:	431a      	orrs	r2, r3
    9202:	7032      	strb	r2, [r6, #0]
    9204:	022b      	lsls	r3, r5, #8
    9206:	2280      	movs	r2, #128	; 0x80
    9208:	4252      	negs	r2, r2
    920a:	0e9b      	lsrs	r3, r3, #26
    920c:	4313      	orrs	r3, r2
    920e:	7073      	strb	r3, [r6, #1]
    9210:	03ab      	lsls	r3, r5, #14
    9212:	0e9b      	lsrs	r3, r3, #26
    9214:	1c71      	adds	r1, r6, #1
    9216:	4313      	orrs	r3, r2
    9218:	704b      	strb	r3, [r1, #1]
    921a:	052b      	lsls	r3, r5, #20
    921c:	0e9b      	lsrs	r3, r3, #26
    921e:	1c48      	adds	r0, r1, #1
    9220:	4313      	orrs	r3, r2
    9222:	7043      	strb	r3, [r0, #1]
    9224:	233f      	movs	r3, #63	; 0x3f
    9226:	402b      	ands	r3, r5
    9228:	4313      	orrs	r3, r2
    922a:	7083      	strb	r3, [r0, #2]
    922c:	2005      	movs	r0, #5
    922e:	e749      	b.n	90c4 <_wctomb_r+0x58>
    9230:	4b39      	ldr	r3, [pc, #228]	; (9318 <_wctomb_r+0x2ac>)
    9232:	18ea      	adds	r2, r5, r3
    9234:	4b39      	ldr	r3, [pc, #228]	; (931c <_wctomb_r+0x2b0>)
    9236:	429a      	cmp	r2, r3
    9238:	d800      	bhi.n	923c <_wctomb_r+0x1d0>
    923a:	e77a      	b.n	9132 <_wctomb_r+0xc6>
    923c:	042a      	lsls	r2, r5, #16
    923e:	2320      	movs	r3, #32
    9240:	425b      	negs	r3, r3
    9242:	0f12      	lsrs	r2, r2, #28
    9244:	431a      	orrs	r2, r3
    9246:	7032      	strb	r2, [r6, #0]
    9248:	052b      	lsls	r3, r5, #20
    924a:	2280      	movs	r2, #128	; 0x80
    924c:	4252      	negs	r2, r2
    924e:	0e9b      	lsrs	r3, r3, #26
    9250:	4313      	orrs	r3, r2
    9252:	7073      	strb	r3, [r6, #1]
    9254:	233f      	movs	r3, #63	; 0x3f
    9256:	402b      	ands	r3, r5
    9258:	4313      	orrs	r3, r2
    925a:	2003      	movs	r0, #3
    925c:	70b3      	strb	r3, [r6, #2]
    925e:	e731      	b.n	90c4 <_wctomb_r+0x58>
    9260:	2380      	movs	r3, #128	; 0x80
    9262:	404b      	eors	r3, r1
    9264:	2b7c      	cmp	r3, #124	; 0x7c
    9266:	d800      	bhi.n	926a <_wctomb_r+0x1fe>
    9268:	e74a      	b.n	9100 <_wctomb_r+0x94>
    926a:	e762      	b.n	9132 <_wctomb_r+0xc6>
    926c:	20be      	movs	r0, #190	; 0xbe
    926e:	062b      	lsls	r3, r5, #24
    9270:	05c0      	lsls	r0, r0, #23
    9272:	0e1a      	lsrs	r2, r3, #24
    9274:	181b      	adds	r3, r3, r0
    9276:	0e1b      	lsrs	r3, r3, #24
    9278:	2b5d      	cmp	r3, #93	; 0x5d
    927a:	d900      	bls.n	927e <_wctomb_r+0x212>
    927c:	e759      	b.n	9132 <_wctomb_r+0xc6>
    927e:	2002      	movs	r0, #2
    9280:	7031      	strb	r1, [r6, #0]
    9282:	7072      	strb	r2, [r6, #1]
    9284:	e71e      	b.n	90c4 <_wctomb_r+0x58>
    9286:	2301      	movs	r3, #1
    9288:	603b      	str	r3, [r7, #0]
    928a:	231b      	movs	r3, #27
    928c:	7033      	strb	r3, [r6, #0]
    928e:	1c72      	adds	r2, r6, #1
    9290:	2324      	movs	r3, #36	; 0x24
    9292:	7073      	strb	r3, [r6, #1]
    9294:	2005      	movs	r0, #5
    9296:	2342      	movs	r3, #66	; 0x42
    9298:	1c96      	adds	r6, r2, #2
    929a:	7053      	strb	r3, [r2, #1]
    929c:	e7a4      	b.n	91e8 <_wctomb_r+0x17c>
    929e:	4b20      	ldr	r3, [pc, #128]	; (9320 <_wctomb_r+0x2b4>)
    92a0:	429d      	cmp	r5, r3
    92a2:	dc00      	bgt.n	92a6 <_wctomb_r+0x23a>
    92a4:	e745      	b.n	9132 <_wctomb_r+0xc6>
    92a6:	006a      	lsls	r2, r5, #1
    92a8:	2304      	movs	r3, #4
    92aa:	425b      	negs	r3, r3
    92ac:	0fd2      	lsrs	r2, r2, #31
    92ae:	431a      	orrs	r2, r3
    92b0:	7032      	strb	r2, [r6, #0]
    92b2:	00ab      	lsls	r3, r5, #2
    92b4:	2280      	movs	r2, #128	; 0x80
    92b6:	4252      	negs	r2, r2
    92b8:	0e9b      	lsrs	r3, r3, #26
    92ba:	4313      	orrs	r3, r2
    92bc:	7073      	strb	r3, [r6, #1]
    92be:	022b      	lsls	r3, r5, #8
    92c0:	0e9b      	lsrs	r3, r3, #26
    92c2:	1c71      	adds	r1, r6, #1
    92c4:	4313      	orrs	r3, r2
    92c6:	704b      	strb	r3, [r1, #1]
    92c8:	03ab      	lsls	r3, r5, #14
    92ca:	0e9b      	lsrs	r3, r3, #26
    92cc:	1c48      	adds	r0, r1, #1
    92ce:	4313      	orrs	r3, r2
    92d0:	7043      	strb	r3, [r0, #1]
    92d2:	052b      	lsls	r3, r5, #20
    92d4:	0e9b      	lsrs	r3, r3, #26
    92d6:	1c41      	adds	r1, r0, #1
    92d8:	4313      	orrs	r3, r2
    92da:	704b      	strb	r3, [r1, #1]
    92dc:	233f      	movs	r3, #63	; 0x3f
    92de:	402b      	ands	r3, r5
    92e0:	4313      	orrs	r3, r2
    92e2:	2006      	movs	r0, #6
    92e4:	708b      	strb	r3, [r1, #2]
    92e6:	e6ed      	b.n	90c4 <_wctomb_r+0x58>
    92e8:	4000041c 	.word	0x4000041c
    92ec:	00012bf8 	.word	0x00012bf8
    92f0:	0000077f 	.word	0x0000077f
    92f4:	00012c00 	.word	0x00012c00
    92f8:	00012c08 	.word	0x00012c08
    92fc:	00012c10 	.word	0x00012c10
    9300:	fffff800 	.word	0xfffff800
    9304:	0000f7ff 	.word	0x0000f7ff
    9308:	ffff0000 	.word	0xffff0000
    930c:	001effff 	.word	0x001effff
    9310:	ffe00000 	.word	0xffe00000
    9314:	03dfffff 	.word	0x03dfffff
    9318:	ffff2800 	.word	0xffff2800
    931c:	000007ff 	.word	0x000007ff
    9320:	03ffffff 	.word	0x03ffffff

00009324 <__swsetup>:
    9324:	b570      	push	{r4, r5, r6, lr}
    9326:	4d26      	ldr	r5, [pc, #152]	; (93c0 <__swsetup+0x9c>)
    9328:	1c04      	adds	r4, r0, #0
    932a:	6828      	ldr	r0, [r5, #0]
    932c:	2800      	cmp	r0, #0
    932e:	d002      	beq.n	9336 <__swsetup+0x12>
    9330:	6b83      	ldr	r3, [r0, #56]	; 0x38
    9332:	2b00      	cmp	r3, #0
    9334:	d01b      	beq.n	936e <__swsetup+0x4a>
    9336:	89a2      	ldrh	r2, [r4, #12]
    9338:	2308      	movs	r3, #8
    933a:	1c16      	adds	r6, r2, #0
    933c:	401e      	ands	r6, r3
    933e:	d01d      	beq.n	937c <__swsetup+0x58>
    9340:	6921      	ldr	r1, [r4, #16]
    9342:	2900      	cmp	r1, #0
    9344:	d016      	beq.n	9374 <__swsetup+0x50>
    9346:	89a3      	ldrh	r3, [r4, #12]
    9348:	07da      	lsls	r2, r3, #31
    934a:	d405      	bmi.n	9358 <__swsetup+0x34>
    934c:	079a      	lsls	r2, r3, #30
    934e:	d50c      	bpl.n	936a <__swsetup+0x46>
    9350:	2300      	movs	r3, #0
    9352:	2000      	movs	r0, #0
    9354:	60a3      	str	r3, [r4, #8]
    9356:	e005      	b.n	9364 <__swsetup+0x40>
    9358:	2300      	movs	r3, #0
    935a:	60a3      	str	r3, [r4, #8]
    935c:	6963      	ldr	r3, [r4, #20]
    935e:	425b      	negs	r3, r3
    9360:	61a3      	str	r3, [r4, #24]
    9362:	2000      	movs	r0, #0
    9364:	bc70      	pop	{r4, r5, r6}
    9366:	bc02      	pop	{r1}
    9368:	4708      	bx	r1
    936a:	6963      	ldr	r3, [r4, #20]
    936c:	e7f1      	b.n	9352 <__swsetup+0x2e>
    936e:	f001 f82b 	bl	a3c8 <__sinit>
    9372:	e7e0      	b.n	9336 <__swsetup+0x12>
    9374:	1c20      	adds	r0, r4, #0
    9376:	f001 fc11 	bl	ab9c <__smakebuf>
    937a:	e7e4      	b.n	9346 <__swsetup+0x22>
    937c:	06d3      	lsls	r3, r2, #27
    937e:	d51b      	bpl.n	93b8 <__swsetup+0x94>
    9380:	0753      	lsls	r3, r2, #29
    9382:	d517      	bpl.n	93b4 <__swsetup+0x90>
    9384:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9386:	2900      	cmp	r1, #0
    9388:	d008      	beq.n	939c <__swsetup+0x78>
    938a:	1c23      	adds	r3, r4, #0
    938c:	3340      	adds	r3, #64	; 0x40
    938e:	4299      	cmp	r1, r3
    9390:	d003      	beq.n	939a <__swsetup+0x76>
    9392:	6828      	ldr	r0, [r5, #0]
    9394:	f001 f920 	bl	a5d8 <_free_r>
    9398:	89a2      	ldrh	r2, [r4, #12]
    939a:	6326      	str	r6, [r4, #48]	; 0x30
    939c:	2324      	movs	r3, #36	; 0x24
    939e:	439a      	bics	r2, r3
    93a0:	81a2      	strh	r2, [r4, #12]
    93a2:	6921      	ldr	r1, [r4, #16]
    93a4:	2300      	movs	r3, #0
    93a6:	6063      	str	r3, [r4, #4]
    93a8:	6021      	str	r1, [r4, #0]
    93aa:	89a2      	ldrh	r2, [r4, #12]
    93ac:	2308      	movs	r3, #8
    93ae:	4313      	orrs	r3, r2
    93b0:	81a3      	strh	r3, [r4, #12]
    93b2:	e7c6      	b.n	9342 <__swsetup+0x1e>
    93b4:	6921      	ldr	r1, [r4, #16]
    93b6:	e7f9      	b.n	93ac <__swsetup+0x88>
    93b8:	2001      	movs	r0, #1
    93ba:	4240      	negs	r0, r0
    93bc:	e7d2      	b.n	9364 <__swsetup+0x40>
    93be:	46c0      	nop			; (mov r8, r8)
    93c0:	40000014 	.word	0x40000014

000093c4 <quorem>:
    93c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    93c6:	465f      	mov	r7, fp
    93c8:	4656      	mov	r6, sl
    93ca:	464d      	mov	r5, r9
    93cc:	4644      	mov	r4, r8
    93ce:	b4f0      	push	{r4, r5, r6, r7}
    93d0:	690a      	ldr	r2, [r1, #16]
    93d2:	6903      	ldr	r3, [r0, #16]
    93d4:	b085      	sub	sp, #20
    93d6:	9001      	str	r0, [sp, #4]
    93d8:	9100      	str	r1, [sp, #0]
    93da:	429a      	cmp	r2, r3
    93dc:	dd00      	ble.n	93e0 <quorem+0x1c>
    93de:	e095      	b.n	950c <quorem+0x148>
    93e0:	3a01      	subs	r2, #1
    93e2:	0093      	lsls	r3, r2, #2
    93e4:	4690      	mov	r8, r2
    93e6:	9a01      	ldr	r2, [sp, #4]
    93e8:	9f00      	ldr	r7, [sp, #0]
    93ea:	3214      	adds	r2, #20
    93ec:	4692      	mov	sl, r2
    93ee:	3714      	adds	r7, #20
    93f0:	18f9      	adds	r1, r7, r3
    93f2:	4453      	add	r3, sl
    93f4:	9304      	str	r3, [sp, #16]
    93f6:	4689      	mov	r9, r1
    93f8:	681b      	ldr	r3, [r3, #0]
    93fa:	6809      	ldr	r1, [r1, #0]
    93fc:	1c18      	adds	r0, r3, #0
    93fe:	3101      	adds	r1, #1
    9400:	9302      	str	r3, [sp, #8]
    9402:	f002 ff6b 	bl	c2dc <__aeabi_uidiv>
    9406:	4683      	mov	fp, r0
    9408:	2800      	cmp	r0, #0
    940a:	d143      	bne.n	9494 <quorem+0xd0>
    940c:	9801      	ldr	r0, [sp, #4]
    940e:	9900      	ldr	r1, [sp, #0]
    9410:	f002 f800 	bl	b414 <__mcmp>
    9414:	2800      	cmp	r0, #0
    9416:	db26      	blt.n	9466 <quorem+0xa2>
    9418:	2301      	movs	r3, #1
    941a:	2600      	movs	r6, #0
    941c:	4d3c      	ldr	r5, [pc, #240]	; (9510 <quorem+0x14c>)
    941e:	449b      	add	fp, r3
    9420:	4654      	mov	r4, sl
    9422:	46b4      	mov	ip, r6
    9424:	cf04      	ldmia	r7!, {r2}
    9426:	1c11      	adds	r1, r2, #0
    9428:	4029      	ands	r1, r5
    942a:	4461      	add	r1, ip
    942c:	0c0b      	lsrs	r3, r1, #16
    942e:	0c12      	lsrs	r2, r2, #16
    9430:	18d2      	adds	r2, r2, r3
    9432:	0c13      	lsrs	r3, r2, #16
    9434:	469c      	mov	ip, r3
    9436:	6823      	ldr	r3, [r4, #0]
    9438:	1c18      	adds	r0, r3, #0
    943a:	4028      	ands	r0, r5
    943c:	4029      	ands	r1, r5
    943e:	1a40      	subs	r0, r0, r1
    9440:	1980      	adds	r0, r0, r6
    9442:	402a      	ands	r2, r5
    9444:	0c1b      	lsrs	r3, r3, #16
    9446:	1a9b      	subs	r3, r3, r2
    9448:	1402      	asrs	r2, r0, #16
    944a:	189b      	adds	r3, r3, r2
    944c:	8063      	strh	r3, [r4, #2]
    944e:	8020      	strh	r0, [r4, #0]
    9450:	141e      	asrs	r6, r3, #16
    9452:	3404      	adds	r4, #4
    9454:	45b9      	cmp	r9, r7
    9456:	d2e5      	bcs.n	9424 <quorem+0x60>
    9458:	4641      	mov	r1, r8
    945a:	008b      	lsls	r3, r1, #2
    945c:	4651      	mov	r1, sl
    945e:	18ca      	adds	r2, r1, r3
    9460:	6813      	ldr	r3, [r2, #0]
    9462:	2b00      	cmp	r3, #0
    9464:	d00f      	beq.n	9486 <quorem+0xc2>
    9466:	4658      	mov	r0, fp
    9468:	b005      	add	sp, #20
    946a:	bc3c      	pop	{r2, r3, r4, r5}
    946c:	4690      	mov	r8, r2
    946e:	4699      	mov	r9, r3
    9470:	46a2      	mov	sl, r4
    9472:	46ab      	mov	fp, r5
    9474:	bcf0      	pop	{r4, r5, r6, r7}
    9476:	bc02      	pop	{r1}
    9478:	4708      	bx	r1
    947a:	6813      	ldr	r3, [r2, #0]
    947c:	2b00      	cmp	r3, #0
    947e:	d105      	bne.n	948c <quorem+0xc8>
    9480:	2301      	movs	r3, #1
    9482:	425b      	negs	r3, r3
    9484:	4498      	add	r8, r3
    9486:	3a04      	subs	r2, #4
    9488:	4592      	cmp	sl, r2
    948a:	d3f6      	bcc.n	947a <quorem+0xb6>
    948c:	9a01      	ldr	r2, [sp, #4]
    948e:	4641      	mov	r1, r8
    9490:	6111      	str	r1, [r2, #16]
    9492:	e7e8      	b.n	9466 <quorem+0xa2>
    9494:	2100      	movs	r1, #0
    9496:	9103      	str	r1, [sp, #12]
    9498:	4e1d      	ldr	r6, [pc, #116]	; (9510 <quorem+0x14c>)
    949a:	4654      	mov	r4, sl
    949c:	1c3d      	adds	r5, r7, #0
    949e:	468c      	mov	ip, r1
    94a0:	cd08      	ldmia	r5!, {r3}
    94a2:	1c1a      	adds	r2, r3, #0
    94a4:	4032      	ands	r2, r6
    94a6:	1c11      	adds	r1, r2, #0
    94a8:	465a      	mov	r2, fp
    94aa:	434a      	muls	r2, r1
    94ac:	0c1b      	lsrs	r3, r3, #16
    94ae:	4659      	mov	r1, fp
    94b0:	4359      	muls	r1, r3
    94b2:	4462      	add	r2, ip
    94b4:	0c13      	lsrs	r3, r2, #16
    94b6:	18c9      	adds	r1, r1, r3
    94b8:	0c0b      	lsrs	r3, r1, #16
    94ba:	469c      	mov	ip, r3
    94bc:	6823      	ldr	r3, [r4, #0]
    94be:	1c18      	adds	r0, r3, #0
    94c0:	4032      	ands	r2, r6
    94c2:	4030      	ands	r0, r6
    94c4:	1a80      	subs	r0, r0, r2
    94c6:	9a03      	ldr	r2, [sp, #12]
    94c8:	4031      	ands	r1, r6
    94ca:	1880      	adds	r0, r0, r2
    94cc:	0c1b      	lsrs	r3, r3, #16
    94ce:	1a5b      	subs	r3, r3, r1
    94d0:	1402      	asrs	r2, r0, #16
    94d2:	189b      	adds	r3, r3, r2
    94d4:	1419      	asrs	r1, r3, #16
    94d6:	8063      	strh	r3, [r4, #2]
    94d8:	8020      	strh	r0, [r4, #0]
    94da:	9103      	str	r1, [sp, #12]
    94dc:	3404      	adds	r4, #4
    94de:	45a9      	cmp	r9, r5
    94e0:	d2de      	bcs.n	94a0 <quorem+0xdc>
    94e2:	9a02      	ldr	r2, [sp, #8]
    94e4:	2a00      	cmp	r2, #0
    94e6:	d191      	bne.n	940c <quorem+0x48>
    94e8:	9a04      	ldr	r2, [sp, #16]
    94ea:	3a04      	subs	r2, #4
    94ec:	4592      	cmp	sl, r2
    94ee:	d306      	bcc.n	94fe <quorem+0x13a>
    94f0:	e008      	b.n	9504 <quorem+0x140>
    94f2:	2301      	movs	r3, #1
    94f4:	425b      	negs	r3, r3
    94f6:	3a04      	subs	r2, #4
    94f8:	4498      	add	r8, r3
    94fa:	4592      	cmp	sl, r2
    94fc:	d202      	bcs.n	9504 <quorem+0x140>
    94fe:	6813      	ldr	r3, [r2, #0]
    9500:	2b00      	cmp	r3, #0
    9502:	d0f6      	beq.n	94f2 <quorem+0x12e>
    9504:	9a01      	ldr	r2, [sp, #4]
    9506:	4641      	mov	r1, r8
    9508:	6111      	str	r1, [r2, #16]
    950a:	e77f      	b.n	940c <quorem+0x48>
    950c:	2000      	movs	r0, #0
    950e:	e7ab      	b.n	9468 <quorem+0xa4>
    9510:	0000ffff 	.word	0x0000ffff

00009514 <_dtoa_r>:
    9514:	b5f0      	push	{r4, r5, r6, r7, lr}
    9516:	465f      	mov	r7, fp
    9518:	4656      	mov	r6, sl
    951a:	464d      	mov	r5, r9
    951c:	4644      	mov	r4, r8
    951e:	b4f0      	push	{r4, r5, r6, r7}
    9520:	1c0e      	adds	r6, r1, #0
    9522:	6c01      	ldr	r1, [r0, #64]	; 0x40
    9524:	b0a0      	sub	sp, #128	; 0x80
    9526:	4683      	mov	fp, r0
    9528:	9301      	str	r3, [sp, #4]
    952a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
    952c:	1c17      	adds	r7, r2, #0
    952e:	2900      	cmp	r1, #0
    9530:	d00a      	beq.n	9548 <_dtoa_r+0x34>
    9532:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9534:	604b      	str	r3, [r1, #4]
    9536:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9538:	2301      	movs	r3, #1
    953a:	4093      	lsls	r3, r2
    953c:	608b      	str	r3, [r1, #8]
    953e:	f001 ff03 	bl	b348 <_Bfree>
    9542:	2300      	movs	r3, #0
    9544:	4659      	mov	r1, fp
    9546:	640b      	str	r3, [r1, #64]	; 0x40
    9548:	1e32      	subs	r2, r6, #0
    954a:	da00      	bge.n	954e <_dtoa_r+0x3a>
    954c:	e0a5      	b.n	969a <_dtoa_r+0x186>
    954e:	2300      	movs	r3, #0
    9550:	6023      	str	r3, [r4, #0]
    9552:	4ac5      	ldr	r2, [pc, #788]	; (9868 <_dtoa_r+0x354>)
    9554:	1c33      	adds	r3, r6, #0
    9556:	4013      	ands	r3, r2
    9558:	1c34      	adds	r4, r6, #0
    955a:	4293      	cmp	r3, r2
    955c:	d100      	bne.n	9560 <_dtoa_r+0x4c>
    955e:	e08b      	b.n	9678 <_dtoa_r+0x164>
    9560:	1c30      	adds	r0, r6, #0
    9562:	1c39      	adds	r1, r7, #0
    9564:	4ac1      	ldr	r2, [pc, #772]	; (986c <_dtoa_r+0x358>)
    9566:	4bc2      	ldr	r3, [pc, #776]	; (9870 <_dtoa_r+0x35c>)
    9568:	9602      	str	r6, [sp, #8]
    956a:	9703      	str	r7, [sp, #12]
    956c:	f009 f9e0 	bl	12930 <____nedf2_from_thumb>
    9570:	2800      	cmp	r0, #0
    9572:	d113      	bne.n	959c <_dtoa_r+0x88>
    9574:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
    9576:	992c      	ldr	r1, [sp, #176]	; 0xb0
    9578:	2301      	movs	r3, #1
    957a:	602b      	str	r3, [r5, #0]
    957c:	2900      	cmp	r1, #0
    957e:	d100      	bne.n	9582 <_dtoa_r+0x6e>
    9580:	e36a      	b.n	9c58 <_dtoa_r+0x744>
    9582:	4bbc      	ldr	r3, [pc, #752]	; (9874 <_dtoa_r+0x360>)
    9584:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    9586:	6013      	str	r3, [r2, #0]
    9588:	1e58      	subs	r0, r3, #1
    958a:	b020      	add	sp, #128	; 0x80
    958c:	bc3c      	pop	{r2, r3, r4, r5}
    958e:	4690      	mov	r8, r2
    9590:	4699      	mov	r9, r3
    9592:	46a2      	mov	sl, r4
    9594:	46ab      	mov	fp, r5
    9596:	bcf0      	pop	{r4, r5, r6, r7}
    9598:	bc02      	pop	{r1}
    959a:	4708      	bx	r1
    959c:	ab1f      	add	r3, sp, #124	; 0x7c
    959e:	9300      	str	r3, [sp, #0]
    95a0:	4658      	mov	r0, fp
    95a2:	ab1e      	add	r3, sp, #120	; 0x78
    95a4:	9902      	ldr	r1, [sp, #8]
    95a6:	9a03      	ldr	r2, [sp, #12]
    95a8:	f002 f858 	bl	b65c <_d2b>
    95ac:	0073      	lsls	r3, r6, #1
    95ae:	0d5d      	lsrs	r5, r3, #21
    95b0:	9010      	str	r0, [sp, #64]	; 0x40
    95b2:	2d00      	cmp	r5, #0
    95b4:	d100      	bne.n	95b8 <_dtoa_r+0xa4>
    95b6:	e07f      	b.n	96b8 <_dtoa_r+0x1a4>
    95b8:	9802      	ldr	r0, [sp, #8]
    95ba:	9903      	ldr	r1, [sp, #12]
    95bc:	4bae      	ldr	r3, [pc, #696]	; (9878 <_dtoa_r+0x364>)
    95be:	4003      	ands	r3, r0
    95c0:	1c18      	adds	r0, r3, #0
    95c2:	4bae      	ldr	r3, [pc, #696]	; (987c <_dtoa_r+0x368>)
    95c4:	4aae      	ldr	r2, [pc, #696]	; (9880 <_dtoa_r+0x36c>)
    95c6:	195b      	adds	r3, r3, r5
    95c8:	2400      	movs	r4, #0
    95ca:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
    95cc:	940f      	str	r4, [sp, #60]	; 0x3c
    95ce:	4310      	orrs	r0, r2
    95d0:	4698      	mov	r8, r3
    95d2:	46aa      	mov	sl, r5
    95d4:	4aab      	ldr	r2, [pc, #684]	; (9884 <_dtoa_r+0x370>)
    95d6:	4bac      	ldr	r3, [pc, #688]	; (9888 <_dtoa_r+0x374>)
    95d8:	f009 f9ae 	bl	12938 <____subdf3_from_thumb>
    95dc:	4aab      	ldr	r2, [pc, #684]	; (988c <_dtoa_r+0x378>)
    95de:	4bac      	ldr	r3, [pc, #688]	; (9890 <_dtoa_r+0x37c>)
    95e0:	f009 f99e 	bl	12920 <____muldf3_from_thumb>
    95e4:	4aab      	ldr	r2, [pc, #684]	; (9894 <_dtoa_r+0x380>)
    95e6:	4bac      	ldr	r3, [pc, #688]	; (9898 <_dtoa_r+0x384>)
    95e8:	f009 f99e 	bl	12928 <____adddf3_from_thumb>
    95ec:	1c04      	adds	r4, r0, #0
    95ee:	4640      	mov	r0, r8
    95f0:	1c0d      	adds	r5, r1, #0
    95f2:	f009 f971 	bl	128d8 <____floatsidf_from_thumb>
    95f6:	4aa9      	ldr	r2, [pc, #676]	; (989c <_dtoa_r+0x388>)
    95f8:	4ba9      	ldr	r3, [pc, #676]	; (98a0 <_dtoa_r+0x38c>)
    95fa:	f009 f991 	bl	12920 <____muldf3_from_thumb>
    95fe:	1c02      	adds	r2, r0, #0
    9600:	1c0b      	adds	r3, r1, #0
    9602:	1c20      	adds	r0, r4, #0
    9604:	1c29      	adds	r1, r5, #0
    9606:	f009 f98f 	bl	12928 <____adddf3_from_thumb>
    960a:	1c04      	adds	r4, r0, #0
    960c:	1c0d      	adds	r5, r1, #0
    960e:	f009 f997 	bl	12940 <____fixdfsi_from_thumb>
    9612:	1c29      	adds	r1, r5, #0
    9614:	900b      	str	r0, [sp, #44]	; 0x2c
    9616:	4a95      	ldr	r2, [pc, #596]	; (986c <_dtoa_r+0x358>)
    9618:	4b95      	ldr	r3, [pc, #596]	; (9870 <_dtoa_r+0x35c>)
    961a:	1c20      	adds	r0, r4, #0
    961c:	f009 f964 	bl	128e8 <____ltdf2_from_thumb>
    9620:	2800      	cmp	r0, #0
    9622:	da01      	bge.n	9628 <_dtoa_r+0x114>
    9624:	f000 fbf9 	bl	9e1a <_dtoa_r+0x906>
    9628:	990b      	ldr	r1, [sp, #44]	; 0x2c
    962a:	2916      	cmp	r1, #22
    962c:	d800      	bhi.n	9630 <_dtoa_r+0x11c>
    962e:	e1c4      	b.n	99ba <_dtoa_r+0x4a6>
    9630:	2201      	movs	r2, #1
    9632:	920c      	str	r2, [sp, #48]	; 0x30
    9634:	4654      	mov	r4, sl
    9636:	4645      	mov	r5, r8
    9638:	1b63      	subs	r3, r4, r5
    963a:	1e5a      	subs	r2, r3, #1
    963c:	d501      	bpl.n	9642 <_dtoa_r+0x12e>
    963e:	f000 fbe6 	bl	9e0e <_dtoa_r+0x8fa>
    9642:	2100      	movs	r1, #0
    9644:	9107      	str	r1, [sp, #28]
    9646:	4691      	mov	r9, r2
    9648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    964a:	2b00      	cmp	r3, #0
    964c:	da01      	bge.n	9652 <_dtoa_r+0x13e>
    964e:	f000 fbf6 	bl	9e3e <_dtoa_r+0x92a>
    9652:	2400      	movs	r4, #0
    9654:	930e      	str	r3, [sp, #56]	; 0x38
    9656:	9408      	str	r4, [sp, #32]
    9658:	4499      	add	r9, r3
    965a:	9c01      	ldr	r4, [sp, #4]
    965c:	2c09      	cmp	r4, #9
    965e:	d84e      	bhi.n	96fe <_dtoa_r+0x1ea>
    9660:	2c05      	cmp	r4, #5
    9662:	dd00      	ble.n	9666 <_dtoa_r+0x152>
    9664:	e2c4      	b.n	9bf0 <_dtoa_r+0x6dc>
    9666:	2501      	movs	r5, #1
    9668:	9901      	ldr	r1, [sp, #4]
    966a:	2905      	cmp	r1, #5
    966c:	d900      	bls.n	9670 <_dtoa_r+0x15c>
    966e:	e2a7      	b.n	9bc0 <_dtoa_r+0x6ac>
    9670:	4a8c      	ldr	r2, [pc, #560]	; (98a4 <_dtoa_r+0x390>)
    9672:	008b      	lsls	r3, r1, #2
    9674:	589b      	ldr	r3, [r3, r2]
    9676:	469f      	mov	pc, r3
    9678:	4b8b      	ldr	r3, [pc, #556]	; (98a8 <_dtoa_r+0x394>)
    967a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    967c:	6013      	str	r3, [r2, #0]
    967e:	2f00      	cmp	r7, #0
    9680:	d011      	beq.n	96a6 <_dtoa_r+0x192>
    9682:	488a      	ldr	r0, [pc, #552]	; (98ac <_dtoa_r+0x398>)
    9684:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    9686:	2b00      	cmp	r3, #0
    9688:	d100      	bne.n	968c <_dtoa_r+0x178>
    968a:	e77e      	b.n	958a <_dtoa_r+0x76>
    968c:	78c3      	ldrb	r3, [r0, #3]
    968e:	1cc2      	adds	r2, r0, #3
    9690:	2b00      	cmp	r3, #0
    9692:	d10d      	bne.n	96b0 <_dtoa_r+0x19c>
    9694:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    9696:	6022      	str	r2, [r4, #0]
    9698:	e777      	b.n	958a <_dtoa_r+0x76>
    969a:	2301      	movs	r3, #1
    969c:	6023      	str	r3, [r4, #0]
    969e:	4b84      	ldr	r3, [pc, #528]	; (98b0 <_dtoa_r+0x39c>)
    96a0:	1c16      	adds	r6, r2, #0
    96a2:	401e      	ands	r6, r3
    96a4:	e755      	b.n	9552 <_dtoa_r+0x3e>
    96a6:	4b74      	ldr	r3, [pc, #464]	; (9878 <_dtoa_r+0x364>)
    96a8:	421e      	tst	r6, r3
    96aa:	d1ea      	bne.n	9682 <_dtoa_r+0x16e>
    96ac:	4881      	ldr	r0, [pc, #516]	; (98b4 <_dtoa_r+0x3a0>)
    96ae:	e7e9      	b.n	9684 <_dtoa_r+0x170>
    96b0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    96b2:	3205      	adds	r2, #5
    96b4:	6022      	str	r2, [r4, #0]
    96b6:	e768      	b.n	958a <_dtoa_r+0x76>
    96b8:	991f      	ldr	r1, [sp, #124]	; 0x7c
    96ba:	4a7f      	ldr	r2, [pc, #508]	; (98b8 <_dtoa_r+0x3a4>)
    96bc:	468a      	mov	sl, r1
    96be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    96c0:	4452      	add	r2, sl
    96c2:	18d5      	adds	r5, r2, r3
    96c4:	2d20      	cmp	r5, #32
    96c6:	dc00      	bgt.n	96ca <_dtoa_r+0x1b6>
    96c8:	e275      	b.n	9bb6 <_dtoa_r+0x6a2>
    96ca:	2240      	movs	r2, #64	; 0x40
    96cc:	1b52      	subs	r2, r2, r5
    96ce:	4094      	lsls	r4, r2
    96d0:	1c2b      	adds	r3, r5, #0
    96d2:	1c22      	adds	r2, r4, #0
    96d4:	3b20      	subs	r3, #32
    96d6:	1c3c      	adds	r4, r7, #0
    96d8:	40dc      	lsrs	r4, r3
    96da:	1c23      	adds	r3, r4, #0
    96dc:	1c14      	adds	r4, r2, #0
    96de:	431c      	orrs	r4, r3
    96e0:	1c20      	adds	r0, r4, #0
    96e2:	f009 f8f9 	bl	128d8 <____floatsidf_from_thumb>
    96e6:	2c00      	cmp	r4, #0
    96e8:	da01      	bge.n	96ee <_dtoa_r+0x1da>
    96ea:	f000 fc77 	bl	9fdc <_dtoa_r+0xac8>
    96ee:	4b73      	ldr	r3, [pc, #460]	; (98bc <_dtoa_r+0x3a8>)
    96f0:	4a73      	ldr	r2, [pc, #460]	; (98c0 <_dtoa_r+0x3ac>)
    96f2:	195b      	adds	r3, r3, r5
    96f4:	2401      	movs	r4, #1
    96f6:	1880      	adds	r0, r0, r2
    96f8:	4698      	mov	r8, r3
    96fa:	940f      	str	r4, [sp, #60]	; 0x3c
    96fc:	e76a      	b.n	95d4 <_dtoa_r+0xc0>
    96fe:	2400      	movs	r4, #0
    9700:	9401      	str	r4, [sp, #4]
    9702:	2501      	movs	r5, #1
    9704:	2201      	movs	r2, #1
    9706:	4252      	negs	r2, r2
    9708:	2100      	movs	r1, #0
    970a:	2301      	movs	r3, #1
    970c:	9129      	str	r1, [sp, #164]	; 0xa4
    970e:	920a      	str	r2, [sp, #40]	; 0x28
    9710:	9209      	str	r2, [sp, #36]	; 0x24
    9712:	930d      	str	r3, [sp, #52]	; 0x34
    9714:	1c14      	adds	r4, r2, #0
    9716:	2300      	movs	r3, #0
    9718:	465a      	mov	r2, fp
    971a:	6453      	str	r3, [r2, #68]	; 0x44
    971c:	465b      	mov	r3, fp
    971e:	6c59      	ldr	r1, [r3, #68]	; 0x44
    9720:	4658      	mov	r0, fp
    9722:	f001 ff6d 	bl	b600 <_Balloc>
    9726:	4659      	mov	r1, fp
    9728:	9018      	str	r0, [sp, #96]	; 0x60
    972a:	6408      	str	r0, [r1, #64]	; 0x40
    972c:	2c0e      	cmp	r4, #14
    972e:	d900      	bls.n	9732 <_dtoa_r+0x21e>
    9730:	e07f      	b.n	9832 <_dtoa_r+0x31e>
    9732:	2d00      	cmp	r5, #0
    9734:	d100      	bne.n	9738 <_dtoa_r+0x224>
    9736:	e07c      	b.n	9832 <_dtoa_r+0x31e>
    9738:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    973a:	2a00      	cmp	r2, #0
    973c:	dc00      	bgt.n	9740 <_dtoa_r+0x22c>
    973e:	e305      	b.n	9d4c <_dtoa_r+0x838>
    9740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9742:	210f      	movs	r1, #15
    9744:	4a5f      	ldr	r2, [pc, #380]	; (98c4 <_dtoa_r+0x3b0>)
    9746:	400b      	ands	r3, r1
    9748:	00db      	lsls	r3, r3, #3
    974a:	189b      	adds	r3, r3, r2
    974c:	681c      	ldr	r4, [r3, #0]
    974e:	685d      	ldr	r5, [r3, #4]
    9750:	9414      	str	r4, [sp, #80]	; 0x50
    9752:	9515      	str	r5, [sp, #84]	; 0x54
    9754:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9756:	112c      	asrs	r4, r5, #4
    9758:	06e2      	lsls	r2, r4, #27
    975a:	d501      	bpl.n	9760 <_dtoa_r+0x24c>
    975c:	f000 fc6b 	bl	a036 <_dtoa_r+0xb22>
    9760:	2302      	movs	r3, #2
    9762:	469a      	mov	sl, r3
    9764:	2c00      	cmp	r4, #0
    9766:	d013      	beq.n	9790 <_dtoa_r+0x27c>
    9768:	2101      	movs	r1, #1
    976a:	4d57      	ldr	r5, [pc, #348]	; (98c8 <_dtoa_r+0x3b4>)
    976c:	4688      	mov	r8, r1
    976e:	4642      	mov	r2, r8
    9770:	4214      	tst	r4, r2
    9772:	d009      	beq.n	9788 <_dtoa_r+0x274>
    9774:	2301      	movs	r3, #1
    9776:	9814      	ldr	r0, [sp, #80]	; 0x50
    9778:	9915      	ldr	r1, [sp, #84]	; 0x54
    977a:	449a      	add	sl, r3
    977c:	682a      	ldr	r2, [r5, #0]
    977e:	686b      	ldr	r3, [r5, #4]
    9780:	f009 f8ce 	bl	12920 <____muldf3_from_thumb>
    9784:	9014      	str	r0, [sp, #80]	; 0x50
    9786:	9115      	str	r1, [sp, #84]	; 0x54
    9788:	1064      	asrs	r4, r4, #1
    978a:	3508      	adds	r5, #8
    978c:	2c00      	cmp	r4, #0
    978e:	d1ee      	bne.n	976e <_dtoa_r+0x25a>
    9790:	1c30      	adds	r0, r6, #0
    9792:	1c39      	adds	r1, r7, #0
    9794:	9a14      	ldr	r2, [sp, #80]	; 0x50
    9796:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9798:	f009 f8aa 	bl	128f0 <____divdf3_from_thumb>
    979c:	1c06      	adds	r6, r0, #0
    979e:	1c0f      	adds	r7, r1, #0
    97a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    97a2:	2d00      	cmp	r5, #0
    97a4:	d009      	beq.n	97ba <_dtoa_r+0x2a6>
    97a6:	1c30      	adds	r0, r6, #0
    97a8:	1c39      	adds	r1, r7, #0
    97aa:	4a48      	ldr	r2, [pc, #288]	; (98cc <_dtoa_r+0x3b8>)
    97ac:	4b48      	ldr	r3, [pc, #288]	; (98d0 <_dtoa_r+0x3bc>)
    97ae:	f009 f89b 	bl	128e8 <____ltdf2_from_thumb>
    97b2:	2800      	cmp	r0, #0
    97b4:	da01      	bge.n	97ba <_dtoa_r+0x2a6>
    97b6:	f000 fd2b 	bl	a210 <_dtoa_r+0xcfc>
    97ba:	4650      	mov	r0, sl
    97bc:	9616      	str	r6, [sp, #88]	; 0x58
    97be:	9717      	str	r7, [sp, #92]	; 0x5c
    97c0:	f009 f88a 	bl	128d8 <____floatsidf_from_thumb>
    97c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    97c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    97c8:	f009 f8aa 	bl	12920 <____muldf3_from_thumb>
    97cc:	4a41      	ldr	r2, [pc, #260]	; (98d4 <_dtoa_r+0x3c0>)
    97ce:	4b42      	ldr	r3, [pc, #264]	; (98d8 <_dtoa_r+0x3c4>)
    97d0:	f009 f8aa 	bl	12928 <____adddf3_from_thumb>
    97d4:	4b41      	ldr	r3, [pc, #260]	; (98dc <_dtoa_r+0x3c8>)
    97d6:	1c0d      	adds	r5, r1, #0
    97d8:	9909      	ldr	r1, [sp, #36]	; 0x24
    97da:	18c4      	adds	r4, r0, r3
    97dc:	2900      	cmp	r1, #0
    97de:	d000      	beq.n	97e2 <_dtoa_r+0x2ce>
    97e0:	e360      	b.n	9ea4 <_dtoa_r+0x990>
    97e2:	4a3f      	ldr	r2, [pc, #252]	; (98e0 <_dtoa_r+0x3cc>)
    97e4:	4b3f      	ldr	r3, [pc, #252]	; (98e4 <_dtoa_r+0x3d0>)
    97e6:	9816      	ldr	r0, [sp, #88]	; 0x58
    97e8:	9917      	ldr	r1, [sp, #92]	; 0x5c
    97ea:	f009 f8a5 	bl	12938 <____subdf3_from_thumb>
    97ee:	1c22      	adds	r2, r4, #0
    97f0:	1c2b      	adds	r3, r5, #0
    97f2:	1c06      	adds	r6, r0, #0
    97f4:	1c0f      	adds	r7, r1, #0
    97f6:	f009 f8ab 	bl	12950 <____gtdf2_from_thumb>
    97fa:	2800      	cmp	r0, #0
    97fc:	dd01      	ble.n	9802 <_dtoa_r+0x2ee>
    97fe:	f000 fc66 	bl	a0ce <_dtoa_r+0xbba>
    9802:	2180      	movs	r1, #128	; 0x80
    9804:	0609      	lsls	r1, r1, #24
    9806:	1862      	adds	r2, r4, r1
    9808:	1c2b      	adds	r3, r5, #0
    980a:	1c30      	adds	r0, r6, #0
    980c:	1c39      	adds	r1, r7, #0
    980e:	f009 f86b 	bl	128e8 <____ltdf2_from_thumb>
    9812:	2800      	cmp	r0, #0
    9814:	da0b      	bge.n	982e <_dtoa_r+0x31a>
    9816:	2400      	movs	r4, #0
    9818:	9412      	str	r4, [sp, #72]	; 0x48
    981a:	9413      	str	r4, [sp, #76]	; 0x4c
    981c:	9d29      	ldr	r5, [sp, #164]	; 0xa4
    981e:	9912      	ldr	r1, [sp, #72]	; 0x48
    9820:	9f18      	ldr	r7, [sp, #96]	; 0x60
    9822:	43ed      	mvns	r5, r5
    9824:	2200      	movs	r2, #0
    9826:	468a      	mov	sl, r1
    9828:	950b      	str	r5, [sp, #44]	; 0x2c
    982a:	9211      	str	r2, [sp, #68]	; 0x44
    982c:	e24c      	b.n	9cc8 <_dtoa_r+0x7b4>
    982e:	9e02      	ldr	r6, [sp, #8]
    9830:	9f03      	ldr	r7, [sp, #12]
    9832:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9834:	2b00      	cmp	r3, #0
    9836:	da00      	bge.n	983a <_dtoa_r+0x326>
    9838:	e0cf      	b.n	99da <_dtoa_r+0x4c6>
    983a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    983c:	2d0e      	cmp	r5, #14
    983e:	dd00      	ble.n	9842 <_dtoa_r+0x32e>
    9840:	e0cb      	b.n	99da <_dtoa_r+0x4c6>
    9842:	4a20      	ldr	r2, [pc, #128]	; (98c4 <_dtoa_r+0x3b0>)
    9844:	00eb      	lsls	r3, r5, #3
    9846:	189b      	adds	r3, r3, r2
    9848:	6819      	ldr	r1, [r3, #0]
    984a:	685a      	ldr	r2, [r3, #4]
    984c:	911b      	str	r1, [sp, #108]	; 0x6c
    984e:	921c      	str	r2, [sp, #112]	; 0x70
    9850:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    9852:	2a00      	cmp	r2, #0
    9854:	da01      	bge.n	985a <_dtoa_r+0x346>
    9856:	f000 fc22 	bl	a09e <_dtoa_r+0xb8a>
    985a:	1c3d      	adds	r5, r7, #0
    985c:	9909      	ldr	r1, [sp, #36]	; 0x24
    985e:	9f18      	ldr	r7, [sp, #96]	; 0x60
    9860:	19c9      	adds	r1, r1, r7
    9862:	1c34      	adds	r4, r6, #0
    9864:	4688      	mov	r8, r1
    9866:	e04b      	b.n	9900 <_dtoa_r+0x3ec>
    9868:	7ff00000 	.word	0x7ff00000
	...
    9874:	00012c29 	.word	0x00012c29
    9878:	000fffff 	.word	0x000fffff
    987c:	fffffc01 	.word	0xfffffc01
    9880:	3ff00000 	.word	0x3ff00000
    9884:	3ff80000 	.word	0x3ff80000
    9888:	00000000 	.word	0x00000000
    988c:	3fd287a7 	.word	0x3fd287a7
    9890:	636f4361 	.word	0x636f4361
    9894:	3fc68a28 	.word	0x3fc68a28
    9898:	8b60c8b3 	.word	0x8b60c8b3
    989c:	3fd34413 	.word	0x3fd34413
    98a0:	509f79fb 	.word	0x509f79fb
    98a4:	00012c2c 	.word	0x00012c2c
    98a8:	0000270f 	.word	0x0000270f
    98ac:	00012c24 	.word	0x00012c24
    98b0:	7fffffff 	.word	0x7fffffff
    98b4:	00012c18 	.word	0x00012c18
    98b8:	00000432 	.word	0x00000432
    98bc:	fffffbcd 	.word	0xfffffbcd
    98c0:	fe100000 	.word	0xfe100000
    98c4:	00012c98 	.word	0x00012c98
    98c8:	00012d60 	.word	0x00012d60
    98cc:	3ff00000 	.word	0x3ff00000
    98d0:	00000000 	.word	0x00000000
    98d4:	401c0000 	.word	0x401c0000
    98d8:	00000000 	.word	0x00000000
    98dc:	fcc00000 	.word	0xfcc00000
    98e0:	40140000 	.word	0x40140000
    98e4:	00000000 	.word	0x00000000
    98e8:	4bc9      	ldr	r3, [pc, #804]	; (9c10 <_dtoa_r+0x6fc>)
    98ea:	4ac8      	ldr	r2, [pc, #800]	; (9c0c <_dtoa_r+0x6f8>)
    98ec:	f009 f818 	bl	12920 <____muldf3_from_thumb>
    98f0:	4ac8      	ldr	r2, [pc, #800]	; (9c14 <_dtoa_r+0x700>)
    98f2:	4bc9      	ldr	r3, [pc, #804]	; (9c18 <_dtoa_r+0x704>)
    98f4:	1c04      	adds	r4, r0, #0
    98f6:	1c0d      	adds	r5, r1, #0
    98f8:	f009 f81a 	bl	12930 <____nedf2_from_thumb>
    98fc:	2800      	cmp	r0, #0
    98fe:	d04b      	beq.n	9998 <_dtoa_r+0x484>
    9900:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9902:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    9904:	1c20      	adds	r0, r4, #0
    9906:	1c29      	adds	r1, r5, #0
    9908:	f008 fff2 	bl	128f0 <____divdf3_from_thumb>
    990c:	f009 f818 	bl	12940 <____fixdfsi_from_thumb>
    9910:	1c06      	adds	r6, r0, #0
    9912:	f008 ffe1 	bl	128d8 <____floatsidf_from_thumb>
    9916:	1c02      	adds	r2, r0, #0
    9918:	1c0b      	adds	r3, r1, #0
    991a:	981b      	ldr	r0, [sp, #108]	; 0x6c
    991c:	991c      	ldr	r1, [sp, #112]	; 0x70
    991e:	f008 ffff 	bl	12920 <____muldf3_from_thumb>
    9922:	1c0b      	adds	r3, r1, #0
    9924:	1c02      	adds	r2, r0, #0
    9926:	1c29      	adds	r1, r5, #0
    9928:	1c20      	adds	r0, r4, #0
    992a:	f009 f805 	bl	12938 <____subdf3_from_thumb>
    992e:	1c33      	adds	r3, r6, #0
    9930:	3330      	adds	r3, #48	; 0x30
    9932:	703b      	strb	r3, [r7, #0]
    9934:	3701      	adds	r7, #1
    9936:	1c04      	adds	r4, r0, #0
    9938:	1c0d      	adds	r5, r1, #0
    993a:	4547      	cmp	r7, r8
    993c:	d1d4      	bne.n	98e8 <_dtoa_r+0x3d4>
    993e:	1c22      	adds	r2, r4, #0
    9940:	1c2b      	adds	r3, r5, #0
    9942:	f008 fff1 	bl	12928 <____adddf3_from_thumb>
    9946:	1c04      	adds	r4, r0, #0
    9948:	1c0d      	adds	r5, r1, #0
    994a:	1c22      	adds	r2, r4, #0
    994c:	981b      	ldr	r0, [sp, #108]	; 0x6c
    994e:	991c      	ldr	r1, [sp, #112]	; 0x70
    9950:	1c2b      	adds	r3, r5, #0
    9952:	f008 ffc9 	bl	128e8 <____ltdf2_from_thumb>
    9956:	2800      	cmp	r0, #0
    9958:	db09      	blt.n	996e <_dtoa_r+0x45a>
    995a:	981b      	ldr	r0, [sp, #108]	; 0x6c
    995c:	991c      	ldr	r1, [sp, #112]	; 0x70
    995e:	1c22      	adds	r2, r4, #0
    9960:	1c2b      	adds	r3, r5, #0
    9962:	f008 ffc9 	bl	128f8 <____eqdf2_from_thumb>
    9966:	2800      	cmp	r0, #0
    9968:	d116      	bne.n	9998 <_dtoa_r+0x484>
    996a:	07f3      	lsls	r3, r6, #31
    996c:	d514      	bpl.n	9998 <_dtoa_r+0x484>
    996e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9970:	911d      	str	r1, [sp, #116]	; 0x74
    9972:	1c3a      	adds	r2, r7, #0
    9974:	3a01      	subs	r2, #1
    9976:	7813      	ldrb	r3, [r2, #0]
    9978:	2b39      	cmp	r3, #57	; 0x39
    997a:	d108      	bne.n	998e <_dtoa_r+0x47a>
    997c:	9c18      	ldr	r4, [sp, #96]	; 0x60
    997e:	4294      	cmp	r4, r2
    9980:	d1f8      	bne.n	9974 <_dtoa_r+0x460>
    9982:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    9984:	2330      	movs	r3, #48	; 0x30
    9986:	3501      	adds	r5, #1
    9988:	951d      	str	r5, [sp, #116]	; 0x74
    998a:	7023      	strb	r3, [r4, #0]
    998c:	7813      	ldrb	r3, [r2, #0]
    998e:	3301      	adds	r3, #1
    9990:	7013      	strb	r3, [r2, #0]
    9992:	1c57      	adds	r7, r2, #1
    9994:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    9996:	920b      	str	r2, [sp, #44]	; 0x2c
    9998:	4658      	mov	r0, fp
    999a:	9910      	ldr	r1, [sp, #64]	; 0x40
    999c:	f001 fcd4 	bl	b348 <_Bfree>
    99a0:	2300      	movs	r3, #0
    99a2:	703b      	strb	r3, [r7, #0]
    99a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    99a6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    99a8:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
    99aa:	3301      	adds	r3, #1
    99ac:	6023      	str	r3, [r4, #0]
    99ae:	2d00      	cmp	r5, #0
    99b0:	d100      	bne.n	99b4 <_dtoa_r+0x4a0>
    99b2:	e33d      	b.n	a030 <_dtoa_r+0xb1c>
    99b4:	9818      	ldr	r0, [sp, #96]	; 0x60
    99b6:	602f      	str	r7, [r5, #0]
    99b8:	e5e7      	b.n	958a <_dtoa_r+0x76>
    99ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    99bc:	4b97      	ldr	r3, [pc, #604]	; (9c1c <_dtoa_r+0x708>)
    99be:	00e2      	lsls	r2, r4, #3
    99c0:	18d2      	adds	r2, r2, r3
    99c2:	9802      	ldr	r0, [sp, #8]
    99c4:	9903      	ldr	r1, [sp, #12]
    99c6:	6853      	ldr	r3, [r2, #4]
    99c8:	6812      	ldr	r2, [r2, #0]
    99ca:	f008 ff8d 	bl	128e8 <____ltdf2_from_thumb>
    99ce:	2800      	cmp	r0, #0
    99d0:	da00      	bge.n	99d4 <_dtoa_r+0x4c0>
    99d2:	e0ea      	b.n	9baa <_dtoa_r+0x696>
    99d4:	2500      	movs	r5, #0
    99d6:	950c      	str	r5, [sp, #48]	; 0x30
    99d8:	e62c      	b.n	9634 <_dtoa_r+0x120>
    99da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    99dc:	2c00      	cmp	r4, #0
    99de:	d000      	beq.n	99e2 <_dtoa_r+0x4ce>
    99e0:	e11e      	b.n	9c20 <_dtoa_r+0x70c>
    99e2:	9908      	ldr	r1, [sp, #32]
    99e4:	2200      	movs	r2, #0
    99e6:	9d07      	ldr	r5, [sp, #28]
    99e8:	9212      	str	r2, [sp, #72]	; 0x48
    99ea:	4688      	mov	r8, r1
    99ec:	2d00      	cmp	r5, #0
    99ee:	dd0d      	ble.n	9a0c <_dtoa_r+0x4f8>
    99f0:	4649      	mov	r1, r9
    99f2:	2900      	cmp	r1, #0
    99f4:	dd0a      	ble.n	9a0c <_dtoa_r+0x4f8>
    99f6:	1c2b      	adds	r3, r5, #0
    99f8:	454d      	cmp	r5, r9
    99fa:	dd00      	ble.n	99fe <_dtoa_r+0x4ea>
    99fc:	e17a      	b.n	9cf4 <_dtoa_r+0x7e0>
    99fe:	9a07      	ldr	r2, [sp, #28]
    9a00:	464c      	mov	r4, r9
    9a02:	1ad2      	subs	r2, r2, r3
    9a04:	1ae4      	subs	r4, r4, r3
    9a06:	9207      	str	r2, [sp, #28]
    9a08:	1aed      	subs	r5, r5, r3
    9a0a:	46a1      	mov	r9, r4
    9a0c:	9908      	ldr	r1, [sp, #32]
    9a0e:	2900      	cmp	r1, #0
    9a10:	dd1d      	ble.n	9a4e <_dtoa_r+0x53a>
    9a12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9a14:	2a00      	cmp	r2, #0
    9a16:	d100      	bne.n	9a1a <_dtoa_r+0x506>
    9a18:	e23d      	b.n	9e96 <_dtoa_r+0x982>
    9a1a:	4643      	mov	r3, r8
    9a1c:	2b00      	cmp	r3, #0
    9a1e:	dd10      	ble.n	9a42 <_dtoa_r+0x52e>
    9a20:	9912      	ldr	r1, [sp, #72]	; 0x48
    9a22:	4642      	mov	r2, r8
    9a24:	4658      	mov	r0, fp
    9a26:	f002 f85b 	bl	bae0 <_pow5mult>
    9a2a:	9012      	str	r0, [sp, #72]	; 0x48
    9a2c:	9912      	ldr	r1, [sp, #72]	; 0x48
    9a2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9a30:	4658      	mov	r0, fp
    9a32:	f001 ff53 	bl	b8dc <_multiply>
    9a36:	9910      	ldr	r1, [sp, #64]	; 0x40
    9a38:	1c04      	adds	r4, r0, #0
    9a3a:	4658      	mov	r0, fp
    9a3c:	f001 fc84 	bl	b348 <_Bfree>
    9a40:	9410      	str	r4, [sp, #64]	; 0x40
    9a42:	9c08      	ldr	r4, [sp, #32]
    9a44:	4641      	mov	r1, r8
    9a46:	1a62      	subs	r2, r4, r1
    9a48:	2a00      	cmp	r2, #0
    9a4a:	d000      	beq.n	9a4e <_dtoa_r+0x53a>
    9a4c:	e16d      	b.n	9d2a <_dtoa_r+0x816>
    9a4e:	4658      	mov	r0, fp
    9a50:	2101      	movs	r1, #1
    9a52:	f001 ffeb 	bl	ba2c <_i2b>
    9a56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9a58:	9013      	str	r0, [sp, #76]	; 0x4c
    9a5a:	2a00      	cmp	r2, #0
    9a5c:	dd04      	ble.n	9a68 <_dtoa_r+0x554>
    9a5e:	4658      	mov	r0, fp
    9a60:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9a62:	f002 f83d 	bl	bae0 <_pow5mult>
    9a66:	9013      	str	r0, [sp, #76]	; 0x4c
    9a68:	9b01      	ldr	r3, [sp, #4]
    9a6a:	2b01      	cmp	r3, #1
    9a6c:	dc00      	bgt.n	9a70 <_dtoa_r+0x55c>
    9a6e:	e14a      	b.n	9d06 <_dtoa_r+0x7f2>
    9a70:	2400      	movs	r4, #0
    9a72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9a74:	2a00      	cmp	r2, #0
    9a76:	d000      	beq.n	9a7a <_dtoa_r+0x566>
    9a78:	e203      	b.n	9e82 <_dtoa_r+0x96e>
    9a7a:	2301      	movs	r3, #1
    9a7c:	4649      	mov	r1, r9
    9a7e:	18ca      	adds	r2, r1, r3
    9a80:	231f      	movs	r3, #31
    9a82:	401a      	ands	r2, r3
    9a84:	d000      	beq.n	9a88 <_dtoa_r+0x574>
    9a86:	e0b8      	b.n	9bfa <_dtoa_r+0x6e6>
    9a88:	221c      	movs	r2, #28
    9a8a:	9b07      	ldr	r3, [sp, #28]
    9a8c:	189b      	adds	r3, r3, r2
    9a8e:	9307      	str	r3, [sp, #28]
    9a90:	18ad      	adds	r5, r5, r2
    9a92:	4491      	add	r9, r2
    9a94:	9907      	ldr	r1, [sp, #28]
    9a96:	2900      	cmp	r1, #0
    9a98:	dd05      	ble.n	9aa6 <_dtoa_r+0x592>
    9a9a:	4658      	mov	r0, fp
    9a9c:	9910      	ldr	r1, [sp, #64]	; 0x40
    9a9e:	9a07      	ldr	r2, [sp, #28]
    9aa0:	f001 fec4 	bl	b82c <_lshift>
    9aa4:	9010      	str	r0, [sp, #64]	; 0x40
    9aa6:	464a      	mov	r2, r9
    9aa8:	2a00      	cmp	r2, #0
    9aaa:	dd04      	ble.n	9ab6 <_dtoa_r+0x5a2>
    9aac:	4658      	mov	r0, fp
    9aae:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9ab0:	f001 febc 	bl	b82c <_lshift>
    9ab4:	9013      	str	r0, [sp, #76]	; 0x4c
    9ab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9ab8:	2b00      	cmp	r3, #0
    9aba:	d000      	beq.n	9abe <_dtoa_r+0x5aa>
    9abc:	e1c9      	b.n	9e52 <_dtoa_r+0x93e>
    9abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9ac0:	2a00      	cmp	r2, #0
    9ac2:	dc00      	bgt.n	9ac6 <_dtoa_r+0x5b2>
    9ac4:	e290      	b.n	9fe8 <_dtoa_r+0xad4>
    9ac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9ac8:	2b00      	cmp	r3, #0
    9aca:	d100      	bne.n	9ace <_dtoa_r+0x5ba>
    9acc:	e0c6      	b.n	9c5c <_dtoa_r+0x748>
    9ace:	2d00      	cmp	r5, #0
    9ad0:	dd05      	ble.n	9ade <_dtoa_r+0x5ca>
    9ad2:	4658      	mov	r0, fp
    9ad4:	9912      	ldr	r1, [sp, #72]	; 0x48
    9ad6:	1c2a      	adds	r2, r5, #0
    9ad8:	f001 fea8 	bl	b82c <_lshift>
    9adc:	9012      	str	r0, [sp, #72]	; 0x48
    9ade:	2c00      	cmp	r4, #0
    9ae0:	d000      	beq.n	9ae4 <_dtoa_r+0x5d0>
    9ae2:	e2f8      	b.n	a0d6 <_dtoa_r+0xbc2>
    9ae4:	9c12      	ldr	r4, [sp, #72]	; 0x48
    9ae6:	46a2      	mov	sl, r4
    9ae8:	2301      	movs	r3, #1
    9aea:	9912      	ldr	r1, [sp, #72]	; 0x48
    9aec:	403b      	ands	r3, r7
    9aee:	9306      	str	r3, [sp, #24]
    9af0:	9111      	str	r1, [sp, #68]	; 0x44
    9af2:	9f18      	ldr	r7, [sp, #96]	; 0x60
    9af4:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9af6:	9810      	ldr	r0, [sp, #64]	; 0x40
    9af8:	f7ff fc64 	bl	93c4 <quorem>
    9afc:	2230      	movs	r2, #48	; 0x30
    9afe:	4681      	mov	r9, r0
    9b00:	444a      	add	r2, r9
    9b02:	9911      	ldr	r1, [sp, #68]	; 0x44
    9b04:	9810      	ldr	r0, [sp, #64]	; 0x40
    9b06:	4690      	mov	r8, r2
    9b08:	f001 fc84 	bl	b414 <__mcmp>
    9b0c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9b0e:	1c06      	adds	r6, r0, #0
    9b10:	4652      	mov	r2, sl
    9b12:	4658      	mov	r0, fp
    9b14:	f001 fe16 	bl	b744 <__mdiff>
    9b18:	68c3      	ldr	r3, [r0, #12]
    9b1a:	1c04      	adds	r4, r0, #0
    9b1c:	2b00      	cmp	r3, #0
    9b1e:	d000      	beq.n	9b22 <_dtoa_r+0x60e>
    9b20:	e166      	b.n	9df0 <_dtoa_r+0x8dc>
    9b22:	1c21      	adds	r1, r4, #0
    9b24:	9810      	ldr	r0, [sp, #64]	; 0x40
    9b26:	f001 fc75 	bl	b414 <__mcmp>
    9b2a:	1c21      	adds	r1, r4, #0
    9b2c:	1c05      	adds	r5, r0, #0
    9b2e:	4658      	mov	r0, fp
    9b30:	f001 fc0a 	bl	b348 <_Bfree>
    9b34:	2d00      	cmp	r5, #0
    9b36:	d106      	bne.n	9b46 <_dtoa_r+0x632>
    9b38:	9b01      	ldr	r3, [sp, #4]
    9b3a:	2b00      	cmp	r3, #0
    9b3c:	d103      	bne.n	9b46 <_dtoa_r+0x632>
    9b3e:	9c06      	ldr	r4, [sp, #24]
    9b40:	2c00      	cmp	r4, #0
    9b42:	d100      	bne.n	9b46 <_dtoa_r+0x632>
    9b44:	e3a3      	b.n	a28e <_dtoa_r+0xd7a>
    9b46:	2e00      	cmp	r6, #0
    9b48:	da00      	bge.n	9b4c <_dtoa_r+0x638>
    9b4a:	e290      	b.n	a06e <_dtoa_r+0xb5a>
    9b4c:	2e00      	cmp	r6, #0
    9b4e:	d106      	bne.n	9b5e <_dtoa_r+0x64a>
    9b50:	9b01      	ldr	r3, [sp, #4]
    9b52:	2b00      	cmp	r3, #0
    9b54:	d103      	bne.n	9b5e <_dtoa_r+0x64a>
    9b56:	9c06      	ldr	r4, [sp, #24]
    9b58:	2c00      	cmp	r4, #0
    9b5a:	d100      	bne.n	9b5e <_dtoa_r+0x64a>
    9b5c:	e287      	b.n	a06e <_dtoa_r+0xb5a>
    9b5e:	2d00      	cmp	r5, #0
    9b60:	dd00      	ble.n	9b64 <_dtoa_r+0x650>
    9b62:	e339      	b.n	a1d8 <_dtoa_r+0xcc4>
    9b64:	4645      	mov	r5, r8
    9b66:	703d      	strb	r5, [r7, #0]
    9b68:	9918      	ldr	r1, [sp, #96]	; 0x60
    9b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9b6c:	3701      	adds	r7, #1
    9b6e:	188b      	adds	r3, r1, r2
    9b70:	429f      	cmp	r7, r3
    9b72:	d100      	bne.n	9b76 <_dtoa_r+0x662>
    9b74:	e08d      	b.n	9c92 <_dtoa_r+0x77e>
    9b76:	2300      	movs	r3, #0
    9b78:	4658      	mov	r0, fp
    9b7a:	9910      	ldr	r1, [sp, #64]	; 0x40
    9b7c:	220a      	movs	r2, #10
    9b7e:	f001 ff61 	bl	ba44 <_multadd>
    9b82:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9b84:	9010      	str	r0, [sp, #64]	; 0x40
    9b86:	4553      	cmp	r3, sl
    9b88:	d100      	bne.n	9b8c <_dtoa_r+0x678>
    9b8a:	e137      	b.n	9dfc <_dtoa_r+0x8e8>
    9b8c:	9911      	ldr	r1, [sp, #68]	; 0x44
    9b8e:	220a      	movs	r2, #10
    9b90:	2300      	movs	r3, #0
    9b92:	4658      	mov	r0, fp
    9b94:	f001 ff56 	bl	ba44 <_multadd>
    9b98:	4651      	mov	r1, sl
    9b9a:	9011      	str	r0, [sp, #68]	; 0x44
    9b9c:	220a      	movs	r2, #10
    9b9e:	4658      	mov	r0, fp
    9ba0:	2300      	movs	r3, #0
    9ba2:	f001 ff4f 	bl	ba44 <_multadd>
    9ba6:	4682      	mov	sl, r0
    9ba8:	e7a4      	b.n	9af4 <_dtoa_r+0x5e0>
    9baa:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9bac:	2200      	movs	r2, #0
    9bae:	3901      	subs	r1, #1
    9bb0:	910b      	str	r1, [sp, #44]	; 0x2c
    9bb2:	920c      	str	r2, [sp, #48]	; 0x30
    9bb4:	e53e      	b.n	9634 <_dtoa_r+0x120>
    9bb6:	2320      	movs	r3, #32
    9bb8:	1b5b      	subs	r3, r3, r5
    9bba:	1c3c      	adds	r4, r7, #0
    9bbc:	409c      	lsls	r4, r3
    9bbe:	e58f      	b.n	96e0 <_dtoa_r+0x1cc>
    9bc0:	2101      	movs	r1, #1
    9bc2:	4249      	negs	r1, r1
    9bc4:	2201      	movs	r2, #1
    9bc6:	910a      	str	r1, [sp, #40]	; 0x28
    9bc8:	9109      	str	r1, [sp, #36]	; 0x24
    9bca:	920d      	str	r2, [sp, #52]	; 0x34
    9bcc:	2300      	movs	r3, #0
    9bce:	465c      	mov	r4, fp
    9bd0:	4641      	mov	r1, r8
    9bd2:	6463      	str	r3, [r4, #68]	; 0x44
    9bd4:	2917      	cmp	r1, #23
    9bd6:	d909      	bls.n	9bec <_dtoa_r+0x6d8>
    9bd8:	2204      	movs	r2, #4
    9bda:	2100      	movs	r1, #0
    9bdc:	0052      	lsls	r2, r2, #1
    9bde:	1c13      	adds	r3, r2, #0
    9be0:	3314      	adds	r3, #20
    9be2:	3101      	adds	r1, #1
    9be4:	4543      	cmp	r3, r8
    9be6:	d9f9      	bls.n	9bdc <_dtoa_r+0x6c8>
    9be8:	465a      	mov	r2, fp
    9bea:	6451      	str	r1, [r2, #68]	; 0x44
    9bec:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9bee:	e595      	b.n	971c <_dtoa_r+0x208>
    9bf0:	9d01      	ldr	r5, [sp, #4]
    9bf2:	3d04      	subs	r5, #4
    9bf4:	9501      	str	r5, [sp, #4]
    9bf6:	2500      	movs	r5, #0
    9bf8:	e536      	b.n	9668 <_dtoa_r+0x154>
    9bfa:	2320      	movs	r3, #32
    9bfc:	1a9a      	subs	r2, r3, r2
    9bfe:	2a04      	cmp	r2, #4
    9c00:	dc7a      	bgt.n	9cf8 <_dtoa_r+0x7e4>
    9c02:	2a03      	cmp	r2, #3
    9c04:	dd00      	ble.n	9c08 <_dtoa_r+0x6f4>
    9c06:	e745      	b.n	9a94 <_dtoa_r+0x580>
    9c08:	321c      	adds	r2, #28
    9c0a:	e73e      	b.n	9a8a <_dtoa_r+0x576>
    9c0c:	40240000 	.word	0x40240000
	...
    9c1c:	00012c98 	.word	0x00012c98
    9c20:	9c01      	ldr	r4, [sp, #4]
    9c22:	2c01      	cmp	r4, #1
    9c24:	dc00      	bgt.n	9c28 <_dtoa_r+0x714>
    9c26:	e0ba      	b.n	9d9e <_dtoa_r+0x88a>
    9c28:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9c2a:	9d08      	ldr	r5, [sp, #32]
    9c2c:	3a01      	subs	r2, #1
    9c2e:	4295      	cmp	r5, r2
    9c30:	da00      	bge.n	9c34 <_dtoa_r+0x720>
    9c32:	e20e      	b.n	a052 <_dtoa_r+0xb3e>
    9c34:	1aad      	subs	r5, r5, r2
    9c36:	46a8      	mov	r8, r5
    9c38:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9c3a:	2c00      	cmp	r4, #0
    9c3c:	da00      	bge.n	9c40 <_dtoa_r+0x72c>
    9c3e:	e2d3      	b.n	a1e8 <_dtoa_r+0xcd4>
    9c40:	9d07      	ldr	r5, [sp, #28]
    9c42:	1c23      	adds	r3, r4, #0
    9c44:	9c07      	ldr	r4, [sp, #28]
    9c46:	4658      	mov	r0, fp
    9c48:	18e4      	adds	r4, r4, r3
    9c4a:	2101      	movs	r1, #1
    9c4c:	9407      	str	r4, [sp, #28]
    9c4e:	4499      	add	r9, r3
    9c50:	f001 feec 	bl	ba2c <_i2b>
    9c54:	9012      	str	r0, [sp, #72]	; 0x48
    9c56:	e6c9      	b.n	99ec <_dtoa_r+0x4d8>
    9c58:	48d4      	ldr	r0, [pc, #848]	; (9fac <_dtoa_r+0xa98>)
    9c5a:	e496      	b.n	958a <_dtoa_r+0x76>
    9c5c:	2400      	movs	r4, #0
    9c5e:	e006      	b.n	9c6e <_dtoa_r+0x75a>
    9c60:	4658      	mov	r0, fp
    9c62:	9910      	ldr	r1, [sp, #64]	; 0x40
    9c64:	220a      	movs	r2, #10
    9c66:	2300      	movs	r3, #0
    9c68:	f001 feec 	bl	ba44 <_multadd>
    9c6c:	9010      	str	r0, [sp, #64]	; 0x40
    9c6e:	9810      	ldr	r0, [sp, #64]	; 0x40
    9c70:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9c72:	f7ff fba7 	bl	93c4 <quorem>
    9c76:	9d18      	ldr	r5, [sp, #96]	; 0x60
    9c78:	3030      	adds	r0, #48	; 0x30
    9c7a:	5560      	strb	r0, [r4, r5]
    9c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9c7e:	3401      	adds	r4, #1
    9c80:	4680      	mov	r8, r0
    9c82:	42a2      	cmp	r2, r4
    9c84:	dcec      	bgt.n	9c60 <_dtoa_r+0x74c>
    9c86:	9918      	ldr	r1, [sp, #96]	; 0x60
    9c88:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9c8a:	2300      	movs	r3, #0
    9c8c:	9311      	str	r3, [sp, #68]	; 0x44
    9c8e:	190f      	adds	r7, r1, r4
    9c90:	4692      	mov	sl, r2
    9c92:	9910      	ldr	r1, [sp, #64]	; 0x40
    9c94:	4658      	mov	r0, fp
    9c96:	2201      	movs	r2, #1
    9c98:	f001 fdc8 	bl	b82c <_lshift>
    9c9c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9c9e:	9010      	str	r0, [sp, #64]	; 0x40
    9ca0:	f001 fbb8 	bl	b414 <__mcmp>
    9ca4:	2800      	cmp	r0, #0
    9ca6:	dd46      	ble.n	9d36 <_dtoa_r+0x822>
    9ca8:	1c3a      	adds	r2, r7, #0
    9caa:	3a01      	subs	r2, #1
    9cac:	7813      	ldrb	r3, [r2, #0]
    9cae:	2b39      	cmp	r3, #57	; 0x39
    9cb0:	d000      	beq.n	9cb4 <_dtoa_r+0x7a0>
    9cb2:	e1d8      	b.n	a066 <_dtoa_r+0xb52>
    9cb4:	9c18      	ldr	r4, [sp, #96]	; 0x60
    9cb6:	42a2      	cmp	r2, r4
    9cb8:	d1f7      	bne.n	9caa <_dtoa_r+0x796>
    9cba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9cbc:	2331      	movs	r3, #49	; 0x31
    9cbe:	3501      	adds	r5, #1
    9cc0:	950b      	str	r5, [sp, #44]	; 0x2c
    9cc2:	1c27      	adds	r7, r4, #0
    9cc4:	7023      	strb	r3, [r4, #0]
    9cc6:	3701      	adds	r7, #1
    9cc8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9cca:	4658      	mov	r0, fp
    9ccc:	f001 fb3c 	bl	b348 <_Bfree>
    9cd0:	4651      	mov	r1, sl
    9cd2:	2900      	cmp	r1, #0
    9cd4:	d100      	bne.n	9cd8 <_dtoa_r+0x7c4>
    9cd6:	e65f      	b.n	9998 <_dtoa_r+0x484>
    9cd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9cda:	2a00      	cmp	r2, #0
    9cdc:	d005      	beq.n	9cea <_dtoa_r+0x7d6>
    9cde:	4552      	cmp	r2, sl
    9ce0:	d003      	beq.n	9cea <_dtoa_r+0x7d6>
    9ce2:	4658      	mov	r0, fp
    9ce4:	1c11      	adds	r1, r2, #0
    9ce6:	f001 fb2f 	bl	b348 <_Bfree>
    9cea:	4658      	mov	r0, fp
    9cec:	4651      	mov	r1, sl
    9cee:	f001 fb2b 	bl	b348 <_Bfree>
    9cf2:	e651      	b.n	9998 <_dtoa_r+0x484>
    9cf4:	464b      	mov	r3, r9
    9cf6:	e682      	b.n	99fe <_dtoa_r+0x4ea>
    9cf8:	1f13      	subs	r3, r2, #4
    9cfa:	9a07      	ldr	r2, [sp, #28]
    9cfc:	18ed      	adds	r5, r5, r3
    9cfe:	18d2      	adds	r2, r2, r3
    9d00:	4499      	add	r9, r3
    9d02:	9207      	str	r2, [sp, #28]
    9d04:	e6c6      	b.n	9a94 <_dtoa_r+0x580>
    9d06:	2f00      	cmp	r7, #0
    9d08:	d000      	beq.n	9d0c <_dtoa_r+0x7f8>
    9d0a:	e6b1      	b.n	9a70 <_dtoa_r+0x55c>
    9d0c:	4ba8      	ldr	r3, [pc, #672]	; (9fb0 <_dtoa_r+0xa9c>)
    9d0e:	421e      	tst	r6, r3
    9d10:	d000      	beq.n	9d14 <_dtoa_r+0x800>
    9d12:	e6ad      	b.n	9a70 <_dtoa_r+0x55c>
    9d14:	4ba7      	ldr	r3, [pc, #668]	; (9fb4 <_dtoa_r+0xaa0>)
    9d16:	421e      	tst	r6, r3
    9d18:	d100      	bne.n	9d1c <_dtoa_r+0x808>
    9d1a:	e6a9      	b.n	9a70 <_dtoa_r+0x55c>
    9d1c:	9c07      	ldr	r4, [sp, #28]
    9d1e:	2101      	movs	r1, #1
    9d20:	3401      	adds	r4, #1
    9d22:	9407      	str	r4, [sp, #28]
    9d24:	4489      	add	r9, r1
    9d26:	2401      	movs	r4, #1
    9d28:	e6a3      	b.n	9a72 <_dtoa_r+0x55e>
    9d2a:	4658      	mov	r0, fp
    9d2c:	9910      	ldr	r1, [sp, #64]	; 0x40
    9d2e:	f001 fed7 	bl	bae0 <_pow5mult>
    9d32:	9010      	str	r0, [sp, #64]	; 0x40
    9d34:	e68b      	b.n	9a4e <_dtoa_r+0x53a>
    9d36:	2800      	cmp	r0, #0
    9d38:	d102      	bne.n	9d40 <_dtoa_r+0x82c>
    9d3a:	4643      	mov	r3, r8
    9d3c:	07db      	lsls	r3, r3, #31
    9d3e:	d4b3      	bmi.n	9ca8 <_dtoa_r+0x794>
    9d40:	3f01      	subs	r7, #1
    9d42:	783b      	ldrb	r3, [r7, #0]
    9d44:	2b30      	cmp	r3, #48	; 0x30
    9d46:	d0fb      	beq.n	9d40 <_dtoa_r+0x82c>
    9d48:	3701      	adds	r7, #1
    9d4a:	e7bd      	b.n	9cc8 <_dtoa_r+0x7b4>
    9d4c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9d4e:	426c      	negs	r4, r5
    9d50:	2c00      	cmp	r4, #0
    9d52:	d100      	bne.n	9d56 <_dtoa_r+0x842>
    9d54:	e251      	b.n	a1fa <_dtoa_r+0xce6>
    9d56:	230f      	movs	r3, #15
    9d58:	4a97      	ldr	r2, [pc, #604]	; (9fb8 <_dtoa_r+0xaa4>)
    9d5a:	4023      	ands	r3, r4
    9d5c:	00db      	lsls	r3, r3, #3
    9d5e:	189b      	adds	r3, r3, r2
    9d60:	9802      	ldr	r0, [sp, #8]
    9d62:	9903      	ldr	r1, [sp, #12]
    9d64:	681a      	ldr	r2, [r3, #0]
    9d66:	685b      	ldr	r3, [r3, #4]
    9d68:	f008 fdda 	bl	12920 <____muldf3_from_thumb>
    9d6c:	1124      	asrs	r4, r4, #4
    9d6e:	1c06      	adds	r6, r0, #0
    9d70:	1c0f      	adds	r7, r1, #0
    9d72:	2c00      	cmp	r4, #0
    9d74:	d100      	bne.n	9d78 <_dtoa_r+0x864>
    9d76:	e240      	b.n	a1fa <_dtoa_r+0xce6>
    9d78:	2202      	movs	r2, #2
    9d7a:	4d90      	ldr	r5, [pc, #576]	; (9fbc <_dtoa_r+0xaa8>)
    9d7c:	4692      	mov	sl, r2
    9d7e:	2601      	movs	r6, #1
    9d80:	4234      	tst	r4, r6
    9d82:	d005      	beq.n	9d90 <_dtoa_r+0x87c>
    9d84:	2301      	movs	r3, #1
    9d86:	449a      	add	sl, r3
    9d88:	682a      	ldr	r2, [r5, #0]
    9d8a:	686b      	ldr	r3, [r5, #4]
    9d8c:	f008 fdc8 	bl	12920 <____muldf3_from_thumb>
    9d90:	1064      	asrs	r4, r4, #1
    9d92:	3508      	adds	r5, #8
    9d94:	2c00      	cmp	r4, #0
    9d96:	d1f3      	bne.n	9d80 <_dtoa_r+0x86c>
    9d98:	1c06      	adds	r6, r0, #0
    9d9a:	1c0f      	adds	r7, r1, #0
    9d9c:	e500      	b.n	97a0 <_dtoa_r+0x28c>
    9d9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    9da0:	2d00      	cmp	r5, #0
    9da2:	d100      	bne.n	9da6 <_dtoa_r+0x892>
    9da4:	e22d      	b.n	a202 <_dtoa_r+0xcee>
    9da6:	4986      	ldr	r1, [pc, #536]	; (9fc0 <_dtoa_r+0xaac>)
    9da8:	9a08      	ldr	r2, [sp, #32]
    9daa:	9d07      	ldr	r5, [sp, #28]
    9dac:	185b      	adds	r3, r3, r1
    9dae:	4690      	mov	r8, r2
    9db0:	e748      	b.n	9c44 <_dtoa_r+0x730>
    9db2:	2400      	movs	r4, #0
    9db4:	940d      	str	r4, [sp, #52]	; 0x34
    9db6:	9929      	ldr	r1, [sp, #164]	; 0xa4
    9db8:	2900      	cmp	r1, #0
    9dba:	dc00      	bgt.n	9dbe <_dtoa_r+0x8aa>
    9dbc:	e258      	b.n	a270 <_dtoa_r+0xd5c>
    9dbe:	4688      	mov	r8, r1
    9dc0:	910a      	str	r1, [sp, #40]	; 0x28
    9dc2:	9109      	str	r1, [sp, #36]	; 0x24
    9dc4:	e702      	b.n	9bcc <_dtoa_r+0x6b8>
    9dc6:	2201      	movs	r2, #1
    9dc8:	920d      	str	r2, [sp, #52]	; 0x34
    9dca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    9dcc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    9dce:	3301      	adds	r3, #1
    9dd0:	18e4      	adds	r4, r4, r3
    9dd2:	46a0      	mov	r8, r4
    9dd4:	4641      	mov	r1, r8
    9dd6:	3c01      	subs	r4, #1
    9dd8:	940a      	str	r4, [sp, #40]	; 0x28
    9dda:	2900      	cmp	r1, #0
    9ddc:	dc00      	bgt.n	9de0 <_dtoa_r+0x8cc>
    9dde:	e243      	b.n	a268 <_dtoa_r+0xd54>
    9de0:	9109      	str	r1, [sp, #36]	; 0x24
    9de2:	e6f3      	b.n	9bcc <_dtoa_r+0x6b8>
    9de4:	2200      	movs	r2, #0
    9de6:	920d      	str	r2, [sp, #52]	; 0x34
    9de8:	e7ef      	b.n	9dca <_dtoa_r+0x8b6>
    9dea:	2301      	movs	r3, #1
    9dec:	930d      	str	r3, [sp, #52]	; 0x34
    9dee:	e7e2      	b.n	9db6 <_dtoa_r+0x8a2>
    9df0:	4658      	mov	r0, fp
    9df2:	1c21      	adds	r1, r4, #0
    9df4:	f001 faa8 	bl	b348 <_Bfree>
    9df8:	2501      	movs	r5, #1
    9dfa:	e6a4      	b.n	9b46 <_dtoa_r+0x632>
    9dfc:	4651      	mov	r1, sl
    9dfe:	4658      	mov	r0, fp
    9e00:	220a      	movs	r2, #10
    9e02:	2300      	movs	r3, #0
    9e04:	f001 fe1e 	bl	ba44 <_multadd>
    9e08:	4682      	mov	sl, r0
    9e0a:	9011      	str	r0, [sp, #68]	; 0x44
    9e0c:	e672      	b.n	9af4 <_dtoa_r+0x5e0>
    9e0e:	4252      	negs	r2, r2
    9e10:	9207      	str	r2, [sp, #28]
    9e12:	2200      	movs	r2, #0
    9e14:	4691      	mov	r9, r2
    9e16:	f7ff fc17 	bl	9648 <_dtoa_r+0x134>
    9e1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9e1c:	f008 fd5c 	bl	128d8 <____floatsidf_from_thumb>
    9e20:	1c02      	adds	r2, r0, #0
    9e22:	1c0b      	adds	r3, r1, #0
    9e24:	1c20      	adds	r0, r4, #0
    9e26:	1c29      	adds	r1, r5, #0
    9e28:	f008 fd82 	bl	12930 <____nedf2_from_thumb>
    9e2c:	2800      	cmp	r0, #0
    9e2e:	d101      	bne.n	9e34 <_dtoa_r+0x920>
    9e30:	f7ff fbfa 	bl	9628 <_dtoa_r+0x114>
    9e34:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9e36:	3d01      	subs	r5, #1
    9e38:	950b      	str	r5, [sp, #44]	; 0x2c
    9e3a:	f7ff fbf5 	bl	9628 <_dtoa_r+0x114>
    9e3e:	9d07      	ldr	r5, [sp, #28]
    9e40:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9e42:	2300      	movs	r3, #0
    9e44:	1a6d      	subs	r5, r5, r1
    9e46:	424a      	negs	r2, r1
    9e48:	9507      	str	r5, [sp, #28]
    9e4a:	9208      	str	r2, [sp, #32]
    9e4c:	930e      	str	r3, [sp, #56]	; 0x38
    9e4e:	f7ff fc04 	bl	965a <_dtoa_r+0x146>
    9e52:	9810      	ldr	r0, [sp, #64]	; 0x40
    9e54:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9e56:	f001 fadd 	bl	b414 <__mcmp>
    9e5a:	2800      	cmp	r0, #0
    9e5c:	db00      	blt.n	9e60 <_dtoa_r+0x94c>
    9e5e:	e62e      	b.n	9abe <_dtoa_r+0x5aa>
    9e60:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9e62:	3901      	subs	r1, #1
    9e64:	910b      	str	r1, [sp, #44]	; 0x2c
    9e66:	220a      	movs	r2, #10
    9e68:	4658      	mov	r0, fp
    9e6a:	9910      	ldr	r1, [sp, #64]	; 0x40
    9e6c:	2300      	movs	r3, #0
    9e6e:	f001 fde9 	bl	ba44 <_multadd>
    9e72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9e74:	9010      	str	r0, [sp, #64]	; 0x40
    9e76:	2a00      	cmp	r2, #0
    9e78:	d000      	beq.n	9e7c <_dtoa_r+0x968>
    9e7a:	e214      	b.n	a2a6 <_dtoa_r+0xd92>
    9e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e7e:	9309      	str	r3, [sp, #36]	; 0x24
    9e80:	e61d      	b.n	9abe <_dtoa_r+0x5aa>
    9e82:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9e84:	690b      	ldr	r3, [r1, #16]
    9e86:	009b      	lsls	r3, r3, #2
    9e88:	185b      	adds	r3, r3, r1
    9e8a:	6918      	ldr	r0, [r3, #16]
    9e8c:	f001 fa68 	bl	b360 <_hi0bits>
    9e90:	2320      	movs	r3, #32
    9e92:	1a1b      	subs	r3, r3, r0
    9e94:	e5f2      	b.n	9a7c <_dtoa_r+0x568>
    9e96:	4658      	mov	r0, fp
    9e98:	9910      	ldr	r1, [sp, #64]	; 0x40
    9e9a:	9a08      	ldr	r2, [sp, #32]
    9e9c:	f001 fe20 	bl	bae0 <_pow5mult>
    9ea0:	9010      	str	r0, [sp, #64]	; 0x40
    9ea2:	e5d4      	b.n	9a4e <_dtoa_r+0x53a>
    9ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9ea8:	931d      	str	r3, [sp, #116]	; 0x74
    9eaa:	4692      	mov	sl, r2
    9eac:	990d      	ldr	r1, [sp, #52]	; 0x34
    9eae:	2900      	cmp	r1, #0
    9eb0:	d100      	bne.n	9eb4 <_dtoa_r+0x9a0>
    9eb2:	e125      	b.n	a100 <_dtoa_r+0xbec>
    9eb4:	4a40      	ldr	r2, [pc, #256]	; (9fb8 <_dtoa_r+0xaa4>)
    9eb6:	4651      	mov	r1, sl
    9eb8:	00cb      	lsls	r3, r1, #3
    9eba:	189b      	adds	r3, r3, r2
    9ebc:	3b08      	subs	r3, #8
    9ebe:	681a      	ldr	r2, [r3, #0]
    9ec0:	685b      	ldr	r3, [r3, #4]
    9ec2:	4840      	ldr	r0, [pc, #256]	; (9fc4 <_dtoa_r+0xab0>)
    9ec4:	4940      	ldr	r1, [pc, #256]	; (9fc8 <_dtoa_r+0xab4>)
    9ec6:	f008 fd13 	bl	128f0 <____divdf3_from_thumb>
    9eca:	1c22      	adds	r2, r4, #0
    9ecc:	1c2b      	adds	r3, r5, #0
    9ece:	f008 fd33 	bl	12938 <____subdf3_from_thumb>
    9ed2:	1c35      	adds	r5, r6, #0
    9ed4:	9004      	str	r0, [sp, #16]
    9ed6:	9105      	str	r1, [sp, #20]
    9ed8:	1c39      	adds	r1, r7, #0
    9eda:	1c28      	adds	r0, r5, #0
    9edc:	f008 fd30 	bl	12940 <____fixdfsi_from_thumb>
    9ee0:	1c04      	adds	r4, r0, #0
    9ee2:	f008 fcf9 	bl	128d8 <____floatsidf_from_thumb>
    9ee6:	1c02      	adds	r2, r0, #0
    9ee8:	1c0b      	adds	r3, r1, #0
    9eea:	1c28      	adds	r0, r5, #0
    9eec:	1c39      	adds	r1, r7, #0
    9eee:	f008 fd23 	bl	12938 <____subdf3_from_thumb>
    9ef2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9ef4:	3430      	adds	r4, #48	; 0x30
    9ef6:	1c05      	adds	r5, r0, #0
    9ef8:	1c0e      	adds	r6, r1, #0
    9efa:	7014      	strb	r4, [r2, #0]
    9efc:	1c17      	adds	r7, r2, #0
    9efe:	9804      	ldr	r0, [sp, #16]
    9f00:	9905      	ldr	r1, [sp, #20]
    9f02:	1c2a      	adds	r2, r5, #0
    9f04:	1c33      	adds	r3, r6, #0
    9f06:	3701      	adds	r7, #1
    9f08:	f008 fd22 	bl	12950 <____gtdf2_from_thumb>
    9f0c:	2800      	cmp	r0, #0
    9f0e:	dc4a      	bgt.n	9fa6 <_dtoa_r+0xa92>
    9f10:	1c2a      	adds	r2, r5, #0
    9f12:	1c33      	adds	r3, r6, #0
    9f14:	482d      	ldr	r0, [pc, #180]	; (9fcc <_dtoa_r+0xab8>)
    9f16:	492e      	ldr	r1, [pc, #184]	; (9fd0 <_dtoa_r+0xabc>)
    9f18:	f008 fd0e 	bl	12938 <____subdf3_from_thumb>
    9f1c:	1c02      	adds	r2, r0, #0
    9f1e:	1c0b      	adds	r3, r1, #0
    9f20:	9804      	ldr	r0, [sp, #16]
    9f22:	9905      	ldr	r1, [sp, #20]
    9f24:	f008 fd14 	bl	12950 <____gtdf2_from_thumb>
    9f28:	2800      	cmp	r0, #0
    9f2a:	dd00      	ble.n	9f2e <_dtoa_r+0xa1a>
    9f2c:	e521      	b.n	9972 <_dtoa_r+0x45e>
    9f2e:	4653      	mov	r3, sl
    9f30:	2b01      	cmp	r3, #1
    9f32:	dc12      	bgt.n	9f5a <_dtoa_r+0xa46>
    9f34:	e47b      	b.n	982e <_dtoa_r+0x31a>
    9f36:	1c2a      	adds	r2, r5, #0
    9f38:	1c33      	adds	r3, r6, #0
    9f3a:	4824      	ldr	r0, [pc, #144]	; (9fcc <_dtoa_r+0xab8>)
    9f3c:	4924      	ldr	r1, [pc, #144]	; (9fd0 <_dtoa_r+0xabc>)
    9f3e:	f008 fcfb 	bl	12938 <____subdf3_from_thumb>
    9f42:	9a04      	ldr	r2, [sp, #16]
    9f44:	9b05      	ldr	r3, [sp, #20]
    9f46:	f008 fccf 	bl	128e8 <____ltdf2_from_thumb>
    9f4a:	2800      	cmp	r0, #0
    9f4c:	da00      	bge.n	9f50 <_dtoa_r+0xa3c>
    9f4e:	e510      	b.n	9972 <_dtoa_r+0x45e>
    9f50:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9f52:	4453      	add	r3, sl
    9f54:	429f      	cmp	r7, r3
    9f56:	d100      	bne.n	9f5a <_dtoa_r+0xa46>
    9f58:	e469      	b.n	982e <_dtoa_r+0x31a>
    9f5a:	9804      	ldr	r0, [sp, #16]
    9f5c:	9905      	ldr	r1, [sp, #20]
    9f5e:	4a1d      	ldr	r2, [pc, #116]	; (9fd4 <_dtoa_r+0xac0>)
    9f60:	4b1d      	ldr	r3, [pc, #116]	; (9fd8 <_dtoa_r+0xac4>)
    9f62:	f008 fcdd 	bl	12920 <____muldf3_from_thumb>
    9f66:	4a1b      	ldr	r2, [pc, #108]	; (9fd4 <_dtoa_r+0xac0>)
    9f68:	4b1b      	ldr	r3, [pc, #108]	; (9fd8 <_dtoa_r+0xac4>)
    9f6a:	9004      	str	r0, [sp, #16]
    9f6c:	9105      	str	r1, [sp, #20]
    9f6e:	1c28      	adds	r0, r5, #0
    9f70:	1c31      	adds	r1, r6, #0
    9f72:	f008 fcd5 	bl	12920 <____muldf3_from_thumb>
    9f76:	1c0e      	adds	r6, r1, #0
    9f78:	1c05      	adds	r5, r0, #0
    9f7a:	f008 fce1 	bl	12940 <____fixdfsi_from_thumb>
    9f7e:	1c04      	adds	r4, r0, #0
    9f80:	f008 fcaa 	bl	128d8 <____floatsidf_from_thumb>
    9f84:	1c02      	adds	r2, r0, #0
    9f86:	1c0b      	adds	r3, r1, #0
    9f88:	1c28      	adds	r0, r5, #0
    9f8a:	1c31      	adds	r1, r6, #0
    9f8c:	f008 fcd4 	bl	12938 <____subdf3_from_thumb>
    9f90:	3430      	adds	r4, #48	; 0x30
    9f92:	703c      	strb	r4, [r7, #0]
    9f94:	9a04      	ldr	r2, [sp, #16]
    9f96:	9b05      	ldr	r3, [sp, #20]
    9f98:	1c05      	adds	r5, r0, #0
    9f9a:	1c0e      	adds	r6, r1, #0
    9f9c:	3701      	adds	r7, #1
    9f9e:	f008 fca3 	bl	128e8 <____ltdf2_from_thumb>
    9fa2:	2800      	cmp	r0, #0
    9fa4:	dac7      	bge.n	9f36 <_dtoa_r+0xa22>
    9fa6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9fa8:	930b      	str	r3, [sp, #44]	; 0x2c
    9faa:	e4f5      	b.n	9998 <_dtoa_r+0x484>
    9fac:	00012c28 	.word	0x00012c28
    9fb0:	000fffff 	.word	0x000fffff
    9fb4:	7ff00000 	.word	0x7ff00000
    9fb8:	00012c98 	.word	0x00012c98
    9fbc:	00012d60 	.word	0x00012d60
    9fc0:	00000433 	.word	0x00000433
    9fc4:	3fe00000 	.word	0x3fe00000
    9fc8:	00000000 	.word	0x00000000
    9fcc:	3ff00000 	.word	0x3ff00000
    9fd0:	00000000 	.word	0x00000000
    9fd4:	40240000 	.word	0x40240000
    9fd8:	00000000 	.word	0x00000000
    9fdc:	4bb8      	ldr	r3, [pc, #736]	; (a2c0 <_dtoa_r+0xdac>)
    9fde:	4ab7      	ldr	r2, [pc, #732]	; (a2bc <_dtoa_r+0xda8>)
    9fe0:	f008 fca2 	bl	12928 <____adddf3_from_thumb>
    9fe4:	f7ff fb83 	bl	96ee <_dtoa_r+0x1da>
    9fe8:	9b01      	ldr	r3, [sp, #4]
    9fea:	2b02      	cmp	r3, #2
    9fec:	dc00      	bgt.n	9ff0 <_dtoa_r+0xadc>
    9fee:	e56a      	b.n	9ac6 <_dtoa_r+0x5b2>
    9ff0:	2a00      	cmp	r2, #0
    9ff2:	d001      	beq.n	9ff8 <_dtoa_r+0xae4>
    9ff4:	f7ff fc12 	bl	981c <_dtoa_r+0x308>
    9ff8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9ffa:	4658      	mov	r0, fp
    9ffc:	2205      	movs	r2, #5
    9ffe:	2300      	movs	r3, #0
    a000:	f001 fd20 	bl	ba44 <_multadd>
    a004:	9013      	str	r0, [sp, #76]	; 0x4c
    a006:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a008:	9810      	ldr	r0, [sp, #64]	; 0x40
    a00a:	f001 fa03 	bl	b414 <__mcmp>
    a00e:	2800      	cmp	r0, #0
    a010:	dc01      	bgt.n	a016 <_dtoa_r+0xb02>
    a012:	f7ff fc03 	bl	981c <_dtoa_r+0x308>
    a016:	9c18      	ldr	r4, [sp, #96]	; 0x60
    a018:	2331      	movs	r3, #49	; 0x31
    a01a:	7023      	strb	r3, [r4, #0]
    a01c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    a01e:	9912      	ldr	r1, [sp, #72]	; 0x48
    a020:	1c27      	adds	r7, r4, #0
    a022:	3501      	adds	r5, #1
    a024:	2200      	movs	r2, #0
    a026:	3701      	adds	r7, #1
    a028:	468a      	mov	sl, r1
    a02a:	950b      	str	r5, [sp, #44]	; 0x2c
    a02c:	9211      	str	r2, [sp, #68]	; 0x44
    a02e:	e64b      	b.n	9cc8 <_dtoa_r+0x7b4>
    a030:	9818      	ldr	r0, [sp, #96]	; 0x60
    a032:	f7ff faaa 	bl	958a <_dtoa_r+0x76>
    a036:	4ba3      	ldr	r3, [pc, #652]	; (a2c4 <_dtoa_r+0xdb0>)
    a038:	400c      	ands	r4, r1
    a03a:	6a1a      	ldr	r2, [r3, #32]
    a03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a03e:	9802      	ldr	r0, [sp, #8]
    a040:	9903      	ldr	r1, [sp, #12]
    a042:	f008 fc55 	bl	128f0 <____divdf3_from_thumb>
    a046:	2503      	movs	r5, #3
    a048:	1c06      	adds	r6, r0, #0
    a04a:	1c0f      	adds	r7, r1, #0
    a04c:	46aa      	mov	sl, r5
    a04e:	f7ff fb89 	bl	9764 <_dtoa_r+0x250>
    a052:	9908      	ldr	r1, [sp, #32]
    a054:	1a53      	subs	r3, r2, r1
    a056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a058:	18c9      	adds	r1, r1, r3
    a05a:	18d2      	adds	r2, r2, r3
    a05c:	2300      	movs	r3, #0
    a05e:	4698      	mov	r8, r3
    a060:	920e      	str	r2, [sp, #56]	; 0x38
    a062:	9108      	str	r1, [sp, #32]
    a064:	e5e8      	b.n	9c38 <_dtoa_r+0x724>
    a066:	3301      	adds	r3, #1
    a068:	1c57      	adds	r7, r2, #1
    a06a:	7013      	strb	r3, [r2, #0]
    a06c:	e62c      	b.n	9cc8 <_dtoa_r+0x7b4>
    a06e:	2d00      	cmp	r5, #0
    a070:	dd11      	ble.n	a096 <_dtoa_r+0xb82>
    a072:	9910      	ldr	r1, [sp, #64]	; 0x40
    a074:	4658      	mov	r0, fp
    a076:	2201      	movs	r2, #1
    a078:	f001 fbd8 	bl	b82c <_lshift>
    a07c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a07e:	9010      	str	r0, [sp, #64]	; 0x40
    a080:	f001 f9c8 	bl	b414 <__mcmp>
    a084:	2800      	cmp	r0, #0
    a086:	dc00      	bgt.n	a08a <_dtoa_r+0xb76>
    a088:	e0f9      	b.n	a27e <_dtoa_r+0xd6a>
    a08a:	2101      	movs	r1, #1
    a08c:	4488      	add	r8, r1
    a08e:	4642      	mov	r2, r8
    a090:	2a3a      	cmp	r2, #58	; 0x3a
    a092:	d100      	bne.n	a096 <_dtoa_r+0xb82>
    a094:	e0ad      	b.n	a1f2 <_dtoa_r+0xcde>
    a096:	4643      	mov	r3, r8
    a098:	703b      	strb	r3, [r7, #0]
    a09a:	3701      	adds	r7, #1
    a09c:	e614      	b.n	9cc8 <_dtoa_r+0x7b4>
    a09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a0a0:	2b00      	cmp	r3, #0
    a0a2:	dd01      	ble.n	a0a8 <_dtoa_r+0xb94>
    a0a4:	f7ff fbd9 	bl	985a <_dtoa_r+0x346>
    a0a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a0aa:	2a00      	cmp	r2, #0
    a0ac:	d001      	beq.n	a0b2 <_dtoa_r+0xb9e>
    a0ae:	f7ff fbb2 	bl	9816 <_dtoa_r+0x302>
    a0b2:	4a85      	ldr	r2, [pc, #532]	; (a2c8 <_dtoa_r+0xdb4>)
    a0b4:	4b85      	ldr	r3, [pc, #532]	; (a2cc <_dtoa_r+0xdb8>)
    a0b6:	981b      	ldr	r0, [sp, #108]	; 0x6c
    a0b8:	991c      	ldr	r1, [sp, #112]	; 0x70
    a0ba:	f008 fc31 	bl	12920 <____muldf3_from_thumb>
    a0be:	1c32      	adds	r2, r6, #0
    a0c0:	1c3b      	adds	r3, r7, #0
    a0c2:	f008 fc21 	bl	12908 <____gedf2_from_thumb>
    a0c6:	2800      	cmp	r0, #0
    a0c8:	db01      	blt.n	a0ce <_dtoa_r+0xbba>
    a0ca:	f7ff fba4 	bl	9816 <_dtoa_r+0x302>
    a0ce:	2300      	movs	r3, #0
    a0d0:	9312      	str	r3, [sp, #72]	; 0x48
    a0d2:	9313      	str	r3, [sp, #76]	; 0x4c
    a0d4:	e79f      	b.n	a016 <_dtoa_r+0xb02>
    a0d6:	9d12      	ldr	r5, [sp, #72]	; 0x48
    a0d8:	4658      	mov	r0, fp
    a0da:	6869      	ldr	r1, [r5, #4]
    a0dc:	f001 fa90 	bl	b600 <_Balloc>
    a0e0:	692a      	ldr	r2, [r5, #16]
    a0e2:	1c29      	adds	r1, r5, #0
    a0e4:	0092      	lsls	r2, r2, #2
    a0e6:	1c04      	adds	r4, r0, #0
    a0e8:	310c      	adds	r1, #12
    a0ea:	3208      	adds	r2, #8
    a0ec:	300c      	adds	r0, #12
    a0ee:	f7fd f971 	bl	73d4 <memcpy>
    a0f2:	4658      	mov	r0, fp
    a0f4:	1c21      	adds	r1, r4, #0
    a0f6:	2201      	movs	r2, #1
    a0f8:	f001 fb98 	bl	b82c <_lshift>
    a0fc:	4682      	mov	sl, r0
    a0fe:	e4f3      	b.n	9ae8 <_dtoa_r+0x5d4>
    a100:	1c20      	adds	r0, r4, #0
    a102:	4a73      	ldr	r2, [pc, #460]	; (a2d0 <_dtoa_r+0xdbc>)
    a104:	4654      	mov	r4, sl
    a106:	00e3      	lsls	r3, r4, #3
    a108:	189b      	adds	r3, r3, r2
    a10a:	3b08      	subs	r3, #8
    a10c:	681a      	ldr	r2, [r3, #0]
    a10e:	685b      	ldr	r3, [r3, #4]
    a110:	1c29      	adds	r1, r5, #0
    a112:	f008 fc05 	bl	12920 <____muldf3_from_thumb>
    a116:	1c35      	adds	r5, r6, #0
    a118:	9019      	str	r0, [sp, #100]	; 0x64
    a11a:	911a      	str	r1, [sp, #104]	; 0x68
    a11c:	1c39      	adds	r1, r7, #0
    a11e:	1c28      	adds	r0, r5, #0
    a120:	f008 fc0e 	bl	12940 <____fixdfsi_from_thumb>
    a124:	1c04      	adds	r4, r0, #0
    a126:	f008 fbd7 	bl	128d8 <____floatsidf_from_thumb>
    a12a:	1c02      	adds	r2, r0, #0
    a12c:	1c0b      	adds	r3, r1, #0
    a12e:	1c28      	adds	r0, r5, #0
    a130:	1c39      	adds	r1, r7, #0
    a132:	f008 fc01 	bl	12938 <____subdf3_from_thumb>
    a136:	1c0e      	adds	r6, r1, #0
    a138:	9918      	ldr	r1, [sp, #96]	; 0x60
    a13a:	3430      	adds	r4, #48	; 0x30
    a13c:	1c0f      	adds	r7, r1, #0
    a13e:	4652      	mov	r2, sl
    a140:	1c05      	adds	r5, r0, #0
    a142:	700c      	strb	r4, [r1, #0]
    a144:	3701      	adds	r7, #1
    a146:	2a01      	cmp	r2, #1
    a148:	d021      	beq.n	a18e <_dtoa_r+0xc7a>
    a14a:	2401      	movs	r4, #1
    a14c:	46a0      	mov	r8, r4
    a14e:	4a61      	ldr	r2, [pc, #388]	; (a2d4 <_dtoa_r+0xdc0>)
    a150:	4b61      	ldr	r3, [pc, #388]	; (a2d8 <_dtoa_r+0xdc4>)
    a152:	1c28      	adds	r0, r5, #0
    a154:	1c31      	adds	r1, r6, #0
    a156:	f008 fbe3 	bl	12920 <____muldf3_from_thumb>
    a15a:	1c0e      	adds	r6, r1, #0
    a15c:	1c05      	adds	r5, r0, #0
    a15e:	f008 fbef 	bl	12940 <____fixdfsi_from_thumb>
    a162:	1c04      	adds	r4, r0, #0
    a164:	f008 fbb8 	bl	128d8 <____floatsidf_from_thumb>
    a168:	1c02      	adds	r2, r0, #0
    a16a:	1c0b      	adds	r3, r1, #0
    a16c:	1c28      	adds	r0, r5, #0
    a16e:	1c31      	adds	r1, r6, #0
    a170:	f008 fbe2 	bl	12938 <____subdf3_from_thumb>
    a174:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a176:	2301      	movs	r3, #1
    a178:	1c0e      	adds	r6, r1, #0
    a17a:	3430      	adds	r4, #48	; 0x30
    a17c:	4641      	mov	r1, r8
    a17e:	4498      	add	r8, r3
    a180:	1c05      	adds	r5, r0, #0
    a182:	548c      	strb	r4, [r1, r2]
    a184:	45d0      	cmp	r8, sl
    a186:	d1e2      	bne.n	a14e <_dtoa_r+0xc3a>
    a188:	4644      	mov	r4, r8
    a18a:	193b      	adds	r3, r7, r4
    a18c:	1e5f      	subs	r7, r3, #1
    a18e:	4a53      	ldr	r2, [pc, #332]	; (a2dc <_dtoa_r+0xdc8>)
    a190:	4b53      	ldr	r3, [pc, #332]	; (a2e0 <_dtoa_r+0xdcc>)
    a192:	9819      	ldr	r0, [sp, #100]	; 0x64
    a194:	991a      	ldr	r1, [sp, #104]	; 0x68
    a196:	f008 fbc7 	bl	12928 <____adddf3_from_thumb>
    a19a:	1c2a      	adds	r2, r5, #0
    a19c:	1c33      	adds	r3, r6, #0
    a19e:	f008 fba3 	bl	128e8 <____ltdf2_from_thumb>
    a1a2:	2800      	cmp	r0, #0
    a1a4:	da01      	bge.n	a1aa <_dtoa_r+0xc96>
    a1a6:	f7ff fbe4 	bl	9972 <_dtoa_r+0x45e>
    a1aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
    a1ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a1ae:	484b      	ldr	r0, [pc, #300]	; (a2dc <_dtoa_r+0xdc8>)
    a1b0:	494b      	ldr	r1, [pc, #300]	; (a2e0 <_dtoa_r+0xdcc>)
    a1b2:	f008 fbc1 	bl	12938 <____subdf3_from_thumb>
    a1b6:	1c2a      	adds	r2, r5, #0
    a1b8:	1c33      	adds	r3, r6, #0
    a1ba:	f008 fbc9 	bl	12950 <____gtdf2_from_thumb>
    a1be:	2800      	cmp	r0, #0
    a1c0:	dc01      	bgt.n	a1c6 <_dtoa_r+0xcb2>
    a1c2:	f7ff fb34 	bl	982e <_dtoa_r+0x31a>
    a1c6:	3f01      	subs	r7, #1
    a1c8:	783b      	ldrb	r3, [r7, #0]
    a1ca:	2b30      	cmp	r3, #48	; 0x30
    a1cc:	d0fb      	beq.n	a1c6 <_dtoa_r+0xcb2>
    a1ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a1d0:	3701      	adds	r7, #1
    a1d2:	930b      	str	r3, [sp, #44]	; 0x2c
    a1d4:	f7ff fbe0 	bl	9998 <_dtoa_r+0x484>
    a1d8:	4644      	mov	r4, r8
    a1da:	2c39      	cmp	r4, #57	; 0x39
    a1dc:	d009      	beq.n	a1f2 <_dtoa_r+0xcde>
    a1de:	4643      	mov	r3, r8
    a1e0:	3301      	adds	r3, #1
    a1e2:	703b      	strb	r3, [r7, #0]
    a1e4:	3701      	adds	r7, #1
    a1e6:	e56f      	b.n	9cc8 <_dtoa_r+0x7b4>
    a1e8:	9907      	ldr	r1, [sp, #28]
    a1ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a1ec:	2300      	movs	r3, #0
    a1ee:	1a8d      	subs	r5, r1, r2
    a1f0:	e528      	b.n	9c44 <_dtoa_r+0x730>
    a1f2:	2339      	movs	r3, #57	; 0x39
    a1f4:	703b      	strb	r3, [r7, #0]
    a1f6:	3701      	adds	r7, #1
    a1f8:	e556      	b.n	9ca8 <_dtoa_r+0x794>
    a1fa:	2402      	movs	r4, #2
    a1fc:	46a2      	mov	sl, r4
    a1fe:	f7ff facf 	bl	97a0 <_dtoa_r+0x28c>
    a202:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    a204:	9c08      	ldr	r4, [sp, #32]
    a206:	2336      	movs	r3, #54	; 0x36
    a208:	9d07      	ldr	r5, [sp, #28]
    a20a:	1a9b      	subs	r3, r3, r2
    a20c:	46a0      	mov	r8, r4
    a20e:	e519      	b.n	9c44 <_dtoa_r+0x730>
    a210:	9909      	ldr	r1, [sp, #36]	; 0x24
    a212:	2900      	cmp	r1, #0
    a214:	dc01      	bgt.n	a21a <_dtoa_r+0xd06>
    a216:	f7ff fad0 	bl	97ba <_dtoa_r+0x2a6>
    a21a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a21c:	2a00      	cmp	r2, #0
    a21e:	dc01      	bgt.n	a224 <_dtoa_r+0xd10>
    a220:	f7ff fb05 	bl	982e <_dtoa_r+0x31a>
    a224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a226:	3b01      	subs	r3, #1
    a228:	931d      	str	r3, [sp, #116]	; 0x74
    a22a:	1c30      	adds	r0, r6, #0
    a22c:	4a29      	ldr	r2, [pc, #164]	; (a2d4 <_dtoa_r+0xdc0>)
    a22e:	4b2a      	ldr	r3, [pc, #168]	; (a2d8 <_dtoa_r+0xdc4>)
    a230:	1c39      	adds	r1, r7, #0
    a232:	f008 fb75 	bl	12920 <____muldf3_from_thumb>
    a236:	1c04      	adds	r4, r0, #0
    a238:	1c06      	adds	r6, r0, #0
    a23a:	4650      	mov	r0, sl
    a23c:	3001      	adds	r0, #1
    a23e:	1c0d      	adds	r5, r1, #0
    a240:	1c0f      	adds	r7, r1, #0
    a242:	f008 fb49 	bl	128d8 <____floatsidf_from_thumb>
    a246:	1c02      	adds	r2, r0, #0
    a248:	1c0b      	adds	r3, r1, #0
    a24a:	1c20      	adds	r0, r4, #0
    a24c:	1c29      	adds	r1, r5, #0
    a24e:	f008 fb67 	bl	12920 <____muldf3_from_thumb>
    a252:	4a24      	ldr	r2, [pc, #144]	; (a2e4 <_dtoa_r+0xdd0>)
    a254:	4b24      	ldr	r3, [pc, #144]	; (a2e8 <_dtoa_r+0xdd4>)
    a256:	f008 fb67 	bl	12928 <____adddf3_from_thumb>
    a25a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a25c:	1c0d      	adds	r5, r1, #0
    a25e:	4923      	ldr	r1, [pc, #140]	; (a2ec <_dtoa_r+0xdd8>)
    a260:	1c04      	adds	r4, r0, #0
    a262:	1864      	adds	r4, r4, r1
    a264:	4692      	mov	sl, r2
    a266:	e621      	b.n	9eac <_dtoa_r+0x998>
    a268:	4644      	mov	r4, r8
    a26a:	9109      	str	r1, [sp, #36]	; 0x24
    a26c:	f7ff fa53 	bl	9716 <_dtoa_r+0x202>
    a270:	2101      	movs	r1, #1
    a272:	2401      	movs	r4, #1
    a274:	9129      	str	r1, [sp, #164]	; 0xa4
    a276:	9109      	str	r1, [sp, #36]	; 0x24
    a278:	910a      	str	r1, [sp, #40]	; 0x28
    a27a:	f7ff fa4c 	bl	9716 <_dtoa_r+0x202>
    a27e:	2800      	cmp	r0, #0
    a280:	d000      	beq.n	a284 <_dtoa_r+0xd70>
    a282:	e708      	b.n	a096 <_dtoa_r+0xb82>
    a284:	4645      	mov	r5, r8
    a286:	07ed      	lsls	r5, r5, #31
    a288:	d400      	bmi.n	a28c <_dtoa_r+0xd78>
    a28a:	e704      	b.n	a096 <_dtoa_r+0xb82>
    a28c:	e6fd      	b.n	a08a <_dtoa_r+0xb76>
    a28e:	4645      	mov	r5, r8
    a290:	2d39      	cmp	r5, #57	; 0x39
    a292:	d0ae      	beq.n	a1f2 <_dtoa_r+0xcde>
    a294:	2e00      	cmp	r6, #0
    a296:	dd02      	ble.n	a29e <_dtoa_r+0xd8a>
    a298:	2131      	movs	r1, #49	; 0x31
    a29a:	4449      	add	r1, r9
    a29c:	4688      	mov	r8, r1
    a29e:	4642      	mov	r2, r8
    a2a0:	703a      	strb	r2, [r7, #0]
    a2a2:	3701      	adds	r7, #1
    a2a4:	e510      	b.n	9cc8 <_dtoa_r+0x7b4>
    a2a6:	9912      	ldr	r1, [sp, #72]	; 0x48
    a2a8:	4658      	mov	r0, fp
    a2aa:	220a      	movs	r2, #10
    a2ac:	2300      	movs	r3, #0
    a2ae:	f001 fbc9 	bl	ba44 <_multadd>
    a2b2:	990a      	ldr	r1, [sp, #40]	; 0x28
    a2b4:	9012      	str	r0, [sp, #72]	; 0x48
    a2b6:	9109      	str	r1, [sp, #36]	; 0x24
    a2b8:	f7ff fc01 	bl	9abe <_dtoa_r+0x5aa>
    a2bc:	41f00000 	.word	0x41f00000
    a2c0:	00000000 	.word	0x00000000
    a2c4:	00012d60 	.word	0x00012d60
    a2c8:	40140000 	.word	0x40140000
    a2cc:	00000000 	.word	0x00000000
    a2d0:	00012c98 	.word	0x00012c98
    a2d4:	40240000 	.word	0x40240000
    a2d8:	00000000 	.word	0x00000000
    a2dc:	3fe00000 	.word	0x3fe00000
    a2e0:	00000000 	.word	0x00000000
    a2e4:	401c0000 	.word	0x401c0000
    a2e8:	00000000 	.word	0x00000000
    a2ec:	fcc00000 	.word	0xfcc00000

0000a2f0 <fflush>:
    a2f0:	b570      	push	{r4, r5, r6, lr}
    a2f2:	1c06      	adds	r6, r0, #0
    a2f4:	2800      	cmp	r0, #0
    a2f6:	d034      	beq.n	a362 <fflush+0x72>
    a2f8:	4b1d      	ldr	r3, [pc, #116]	; (a370 <fflush+0x80>)
    a2fa:	6818      	ldr	r0, [r3, #0]
    a2fc:	2800      	cmp	r0, #0
    a2fe:	d002      	beq.n	a306 <fflush+0x16>
    a300:	6b83      	ldr	r3, [r0, #56]	; 0x38
    a302:	2b00      	cmp	r3, #0
    a304:	d02a      	beq.n	a35c <fflush+0x6c>
    a306:	230c      	movs	r3, #12
    a308:	5ef2      	ldrsh	r2, [r6, r3]
    a30a:	0713      	lsls	r3, r2, #28
    a30c:	d520      	bpl.n	a350 <fflush+0x60>
    a30e:	6935      	ldr	r5, [r6, #16]
    a310:	2d00      	cmp	r5, #0
    a312:	d01d      	beq.n	a350 <fflush+0x60>
    a314:	6833      	ldr	r3, [r6, #0]
    a316:	1b5c      	subs	r4, r3, r5
    a318:	2303      	movs	r3, #3
    a31a:	6035      	str	r5, [r6, #0]
    a31c:	421a      	tst	r2, r3
    a31e:	d01b      	beq.n	a358 <fflush+0x68>
    a320:	2300      	movs	r3, #0
    a322:	60b3      	str	r3, [r6, #8]
    a324:	2c00      	cmp	r4, #0
    a326:	dc04      	bgt.n	a332 <fflush+0x42>
    a328:	e012      	b.n	a350 <fflush+0x60>
    a32a:	1a24      	subs	r4, r4, r0
    a32c:	2c00      	cmp	r4, #0
    a32e:	dd0f      	ble.n	a350 <fflush+0x60>
    a330:	182d      	adds	r5, r5, r0
    a332:	69f0      	ldr	r0, [r6, #28]
    a334:	6a73      	ldr	r3, [r6, #36]	; 0x24
    a336:	1c29      	adds	r1, r5, #0
    a338:	1c22      	adds	r2, r4, #0
    a33a:	f000 f81f 	bl	a37c <fflush+0x8c>
    a33e:	2800      	cmp	r0, #0
    a340:	dcf3      	bgt.n	a32a <fflush+0x3a>
    a342:	89b3      	ldrh	r3, [r6, #12]
    a344:	2240      	movs	r2, #64	; 0x40
    a346:	2001      	movs	r0, #1
    a348:	4313      	orrs	r3, r2
    a34a:	4240      	negs	r0, r0
    a34c:	81b3      	strh	r3, [r6, #12]
    a34e:	e000      	b.n	a352 <fflush+0x62>
    a350:	2000      	movs	r0, #0
    a352:	bc70      	pop	{r4, r5, r6}
    a354:	bc02      	pop	{r1}
    a356:	4708      	bx	r1
    a358:	6973      	ldr	r3, [r6, #20]
    a35a:	e7e2      	b.n	a322 <fflush+0x32>
    a35c:	f000 f834 	bl	a3c8 <__sinit>
    a360:	e7d1      	b.n	a306 <fflush+0x16>
    a362:	4b04      	ldr	r3, [pc, #16]	; (a374 <fflush+0x84>)
    a364:	4904      	ldr	r1, [pc, #16]	; (a378 <fflush+0x88>)
    a366:	6818      	ldr	r0, [r3, #0]
    a368:	f000 fb9e 	bl	aaa8 <_fwalk>
    a36c:	e7f1      	b.n	a352 <fflush+0x62>
    a36e:	46c0      	nop			; (mov r8, r8)
    a370:	40000014 	.word	0x40000014
    a374:	00012c44 	.word	0x00012c44
    a378:	0000a2f1 	.word	0x0000a2f1
    a37c:	4718      	bx	r3
    a37e:	46c0      	nop			; (mov r8, r8)

0000a380 <std>:
    a380:	2300      	movs	r3, #0
    a382:	6003      	str	r3, [r0, #0]
    a384:	6043      	str	r3, [r0, #4]
    a386:	6083      	str	r3, [r0, #8]
    a388:	6103      	str	r3, [r0, #16]
    a38a:	6143      	str	r3, [r0, #20]
    a38c:	6183      	str	r3, [r0, #24]
    a38e:	4b06      	ldr	r3, [pc, #24]	; (a3a8 <std+0x28>)
    a390:	6203      	str	r3, [r0, #32]
    a392:	4b06      	ldr	r3, [pc, #24]	; (a3ac <std+0x2c>)
    a394:	6243      	str	r3, [r0, #36]	; 0x24
    a396:	4b06      	ldr	r3, [pc, #24]	; (a3b0 <std+0x30>)
    a398:	6283      	str	r3, [r0, #40]	; 0x28
    a39a:	4b06      	ldr	r3, [pc, #24]	; (a3b4 <std+0x34>)
    a39c:	8181      	strh	r1, [r0, #12]
    a39e:	81c2      	strh	r2, [r0, #14]
    a3a0:	61c0      	str	r0, [r0, #28]
    a3a2:	62c3      	str	r3, [r0, #44]	; 0x2c
    a3a4:	4770      	bx	lr
    a3a6:	46c0      	nop			; (mov r8, r8)
    a3a8:	0000c0d1 	.word	0x0000c0d1
    a3ac:	0000c089 	.word	0x0000c089
    a3b0:	0000c049 	.word	0x0000c049
    a3b4:	0000c031 	.word	0x0000c031

0000a3b8 <__sfp_lock_acquire>:
    a3b8:	4770      	bx	lr
    a3ba:	46c0      	nop			; (mov r8, r8)

0000a3bc <__sfp_lock_release>:
    a3bc:	4770      	bx	lr
    a3be:	46c0      	nop			; (mov r8, r8)

0000a3c0 <__sinit_lock_acquire>:
    a3c0:	4770      	bx	lr
    a3c2:	46c0      	nop			; (mov r8, r8)

0000a3c4 <__sinit_lock_release>:
    a3c4:	4770      	bx	lr
    a3c6:	46c0      	nop			; (mov r8, r8)

0000a3c8 <__sinit>:
    a3c8:	b510      	push	{r4, lr}
    a3ca:	6b82      	ldr	r2, [r0, #56]	; 0x38
    a3cc:	1c04      	adds	r4, r0, #0
    a3ce:	2a00      	cmp	r2, #0
    a3d0:	d122      	bne.n	a418 <__sinit+0x50>
    a3d2:	4b13      	ldr	r3, [pc, #76]	; (a420 <__sinit+0x58>)
    a3d4:	63c3      	str	r3, [r0, #60]	; 0x3c
    a3d6:	2301      	movs	r3, #1
    a3d8:	6383      	str	r3, [r0, #56]	; 0x38
    a3da:	23b8      	movs	r3, #184	; 0xb8
    a3dc:	009b      	lsls	r3, r3, #2
    a3de:	50c2      	str	r2, [r0, r3]
    a3e0:	23b9      	movs	r3, #185	; 0xb9
    a3e2:	009b      	lsls	r3, r3, #2
    a3e4:	2203      	movs	r2, #3
    a3e6:	21bb      	movs	r1, #187	; 0xbb
    a3e8:	50c2      	str	r2, [r0, r3]
    a3ea:	0089      	lsls	r1, r1, #2
    a3ec:	23ba      	movs	r3, #186	; 0xba
    a3ee:	1842      	adds	r2, r0, r1
    a3f0:	009b      	lsls	r3, r3, #2
    a3f2:	50c2      	str	r2, [r0, r3]
    a3f4:	2104      	movs	r1, #4
    a3f6:	6840      	ldr	r0, [r0, #4]
    a3f8:	2200      	movs	r2, #0
    a3fa:	1c23      	adds	r3, r4, #0
    a3fc:	f7ff ffc0 	bl	a380 <std>
    a400:	68a0      	ldr	r0, [r4, #8]
    a402:	2109      	movs	r1, #9
    a404:	2201      	movs	r2, #1
    a406:	1c23      	adds	r3, r4, #0
    a408:	f7ff ffba 	bl	a380 <std>
    a40c:	68e0      	ldr	r0, [r4, #12]
    a40e:	210a      	movs	r1, #10
    a410:	2202      	movs	r2, #2
    a412:	1c23      	adds	r3, r4, #0
    a414:	f7ff ffb4 	bl	a380 <std>
    a418:	bc10      	pop	{r4}
    a41a:	bc01      	pop	{r0}
    a41c:	4700      	bx	r0
    a41e:	46c0      	nop			; (mov r8, r8)
    a420:	0000a45d 	.word	0x0000a45d

0000a424 <__fp_lock>:
    a424:	2000      	movs	r0, #0
    a426:	4770      	bx	lr

0000a428 <__fp_unlock>:
    a428:	2000      	movs	r0, #0
    a42a:	4770      	bx	lr

0000a42c <__fp_unlock_all>:
    a42c:	b500      	push	{lr}
    a42e:	4b03      	ldr	r3, [pc, #12]	; (a43c <__fp_unlock_all+0x10>)
    a430:	4903      	ldr	r1, [pc, #12]	; (a440 <__fp_unlock_all+0x14>)
    a432:	6818      	ldr	r0, [r3, #0]
    a434:	f000 fb38 	bl	aaa8 <_fwalk>
    a438:	bc01      	pop	{r0}
    a43a:	4700      	bx	r0
    a43c:	40000014 	.word	0x40000014
    a440:	0000a429 	.word	0x0000a429

0000a444 <__fp_lock_all>:
    a444:	b500      	push	{lr}
    a446:	4b03      	ldr	r3, [pc, #12]	; (a454 <__fp_lock_all+0x10>)
    a448:	4903      	ldr	r1, [pc, #12]	; (a458 <__fp_lock_all+0x14>)
    a44a:	6818      	ldr	r0, [r3, #0]
    a44c:	f000 fb2c 	bl	aaa8 <_fwalk>
    a450:	bc01      	pop	{r0}
    a452:	4700      	bx	r0
    a454:	40000014 	.word	0x40000014
    a458:	0000a425 	.word	0x0000a425

0000a45c <_cleanup_r>:
    a45c:	b500      	push	{lr}
    a45e:	4902      	ldr	r1, [pc, #8]	; (a468 <_cleanup_r+0xc>)
    a460:	f000 fb22 	bl	aaa8 <_fwalk>
    a464:	bc01      	pop	{r0}
    a466:	4700      	bx	r0
    a468:	0000c2c5 	.word	0x0000c2c5

0000a46c <_cleanup>:
    a46c:	b500      	push	{lr}
    a46e:	4b03      	ldr	r3, [pc, #12]	; (a47c <_cleanup+0x10>)
    a470:	6818      	ldr	r0, [r3, #0]
    a472:	f7ff fff3 	bl	a45c <_cleanup_r>
    a476:	bc01      	pop	{r0}
    a478:	4700      	bx	r0
    a47a:	46c0      	nop			; (mov r8, r8)
    a47c:	00012c44 	.word	0x00012c44

0000a480 <__sfmoreglue>:
    a480:	b570      	push	{r4, r5, r6, lr}
    a482:	235c      	movs	r3, #92	; 0x5c
    a484:	1c0e      	adds	r6, r1, #0
    a486:	435e      	muls	r6, r3
    a488:	1c0d      	adds	r5, r1, #0
    a48a:	1c31      	adds	r1, r6, #0
    a48c:	310c      	adds	r1, #12
    a48e:	f000 fbf3 	bl	ac78 <_malloc_r>
    a492:	2800      	cmp	r0, #0
    a494:	d00d      	beq.n	a4b2 <__sfmoreglue+0x32>
    a496:	1c04      	adds	r4, r0, #0
    a498:	2300      	movs	r3, #0
    a49a:	300c      	adds	r0, #12
    a49c:	6023      	str	r3, [r4, #0]
    a49e:	6065      	str	r5, [r4, #4]
    a4a0:	60a0      	str	r0, [r4, #8]
    a4a2:	2100      	movs	r1, #0
    a4a4:	1c32      	adds	r2, r6, #0
    a4a6:	f000 ff1b 	bl	b2e0 <memset>
    a4aa:	1c20      	adds	r0, r4, #0
    a4ac:	bc70      	pop	{r4, r5, r6}
    a4ae:	bc02      	pop	{r1}
    a4b0:	4708      	bx	r1
    a4b2:	2400      	movs	r4, #0
    a4b4:	e7f9      	b.n	a4aa <__sfmoreglue+0x2a>
    a4b6:	46c0      	nop			; (mov r8, r8)

0000a4b8 <__sfp>:
    a4b8:	b530      	push	{r4, r5, lr}
    a4ba:	4b1e      	ldr	r3, [pc, #120]	; (a534 <__sfp+0x7c>)
    a4bc:	681c      	ldr	r4, [r3, #0]
    a4be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a4c0:	1c05      	adds	r5, r0, #0
    a4c2:	2b00      	cmp	r3, #0
    a4c4:	d026      	beq.n	a514 <__sfp+0x5c>
    a4c6:	21b8      	movs	r1, #184	; 0xb8
    a4c8:	0089      	lsls	r1, r1, #2
    a4ca:	1864      	adds	r4, r4, r1
    a4cc:	6863      	ldr	r3, [r4, #4]
    a4ce:	68a0      	ldr	r0, [r4, #8]
    a4d0:	1e5a      	subs	r2, r3, #1
    a4d2:	d503      	bpl.n	a4dc <__sfp+0x24>
    a4d4:	e019      	b.n	a50a <__sfp+0x52>
    a4d6:	3a01      	subs	r2, #1
    a4d8:	d317      	bcc.n	a50a <__sfp+0x52>
    a4da:	305c      	adds	r0, #92	; 0x5c
    a4dc:	210c      	movs	r1, #12
    a4de:	5e43      	ldrsh	r3, [r0, r1]
    a4e0:	2b00      	cmp	r3, #0
    a4e2:	d1f8      	bne.n	a4d6 <__sfp+0x1e>
    a4e4:	2301      	movs	r3, #1
    a4e6:	425b      	negs	r3, r3
    a4e8:	81c3      	strh	r3, [r0, #14]
    a4ea:	2301      	movs	r3, #1
    a4ec:	8183      	strh	r3, [r0, #12]
    a4ee:	2300      	movs	r3, #0
    a4f0:	6003      	str	r3, [r0, #0]
    a4f2:	6083      	str	r3, [r0, #8]
    a4f4:	6043      	str	r3, [r0, #4]
    a4f6:	6103      	str	r3, [r0, #16]
    a4f8:	6143      	str	r3, [r0, #20]
    a4fa:	6183      	str	r3, [r0, #24]
    a4fc:	6303      	str	r3, [r0, #48]	; 0x30
    a4fe:	6343      	str	r3, [r0, #52]	; 0x34
    a500:	6443      	str	r3, [r0, #68]	; 0x44
    a502:	6483      	str	r3, [r0, #72]	; 0x48
    a504:	bc30      	pop	{r4, r5}
    a506:	bc02      	pop	{r1}
    a508:	4708      	bx	r1
    a50a:	6820      	ldr	r0, [r4, #0]
    a50c:	2800      	cmp	r0, #0
    a50e:	d005      	beq.n	a51c <__sfp+0x64>
    a510:	1c04      	adds	r4, r0, #0
    a512:	e7db      	b.n	a4cc <__sfp+0x14>
    a514:	1c20      	adds	r0, r4, #0
    a516:	f7ff ff57 	bl	a3c8 <__sinit>
    a51a:	e7d4      	b.n	a4c6 <__sfp+0xe>
    a51c:	1c28      	adds	r0, r5, #0
    a51e:	2104      	movs	r1, #4
    a520:	f7ff ffae 	bl	a480 <__sfmoreglue>
    a524:	6020      	str	r0, [r4, #0]
    a526:	2800      	cmp	r0, #0
    a528:	d1f2      	bne.n	a510 <__sfp+0x58>
    a52a:	230c      	movs	r3, #12
    a52c:	2000      	movs	r0, #0
    a52e:	602b      	str	r3, [r5, #0]
    a530:	e7e8      	b.n	a504 <__sfp+0x4c>
    a532:	46c0      	nop			; (mov r8, r8)
    a534:	00012c44 	.word	0x00012c44

0000a538 <_malloc_trim_r>:
    a538:	b5f0      	push	{r4, r5, r6, r7, lr}
    a53a:	1c0c      	adds	r4, r1, #0
    a53c:	1c06      	adds	r6, r0, #0
    a53e:	f000 feff 	bl	b340 <__malloc_lock>
    a542:	4f21      	ldr	r7, [pc, #132]	; (a5c8 <_malloc_trim_r+0x90>)
    a544:	68bb      	ldr	r3, [r7, #8]
    a546:	685a      	ldr	r2, [r3, #4]
    a548:	2303      	movs	r3, #3
    a54a:	1c15      	adds	r5, r2, #0
    a54c:	439d      	bics	r5, r3
    a54e:	4b1f      	ldr	r3, [pc, #124]	; (a5cc <_malloc_trim_r+0x94>)
    a550:	1b2c      	subs	r4, r5, r4
    a552:	18e4      	adds	r4, r4, r3
    a554:	0b24      	lsrs	r4, r4, #12
    a556:	3c01      	subs	r4, #1
    a558:	0324      	lsls	r4, r4, #12
    a55a:	3310      	adds	r3, #16
    a55c:	429c      	cmp	r4, r3
    a55e:	dd07      	ble.n	a570 <_malloc_trim_r+0x38>
    a560:	1c30      	adds	r0, r6, #0
    a562:	2100      	movs	r1, #0
    a564:	f008 f9f0 	bl	12948 <___sbrk_r_from_thumb>
    a568:	68bb      	ldr	r3, [r7, #8]
    a56a:	18eb      	adds	r3, r5, r3
    a56c:	4298      	cmp	r0, r3
    a56e:	d006      	beq.n	a57e <_malloc_trim_r+0x46>
    a570:	1c30      	adds	r0, r6, #0
    a572:	f000 fee7 	bl	b344 <__malloc_unlock>
    a576:	2000      	movs	r0, #0
    a578:	bcf0      	pop	{r4, r5, r6, r7}
    a57a:	bc02      	pop	{r1}
    a57c:	4708      	bx	r1
    a57e:	4261      	negs	r1, r4
    a580:	1c30      	adds	r0, r6, #0
    a582:	f008 f9e1 	bl	12948 <___sbrk_r_from_thumb>
    a586:	3001      	adds	r0, #1
    a588:	d00d      	beq.n	a5a6 <_malloc_trim_r+0x6e>
    a58a:	2201      	movs	r2, #1
    a58c:	1b2b      	subs	r3, r5, r4
    a58e:	4313      	orrs	r3, r2
    a590:	68b9      	ldr	r1, [r7, #8]
    a592:	4a0f      	ldr	r2, [pc, #60]	; (a5d0 <_malloc_trim_r+0x98>)
    a594:	604b      	str	r3, [r1, #4]
    a596:	6813      	ldr	r3, [r2, #0]
    a598:	1b1b      	subs	r3, r3, r4
    a59a:	1c30      	adds	r0, r6, #0
    a59c:	6013      	str	r3, [r2, #0]
    a59e:	f000 fed1 	bl	b344 <__malloc_unlock>
    a5a2:	2001      	movs	r0, #1
    a5a4:	e7e8      	b.n	a578 <_malloc_trim_r+0x40>
    a5a6:	2100      	movs	r1, #0
    a5a8:	1c30      	adds	r0, r6, #0
    a5aa:	f008 f9cd 	bl	12948 <___sbrk_r_from_thumb>
    a5ae:	68bc      	ldr	r4, [r7, #8]
    a5b0:	1b01      	subs	r1, r0, r4
    a5b2:	290f      	cmp	r1, #15
    a5b4:	dddc      	ble.n	a570 <_malloc_trim_r+0x38>
    a5b6:	4b07      	ldr	r3, [pc, #28]	; (a5d4 <_malloc_trim_r+0x9c>)
    a5b8:	681b      	ldr	r3, [r3, #0]
    a5ba:	4a05      	ldr	r2, [pc, #20]	; (a5d0 <_malloc_trim_r+0x98>)
    a5bc:	1ac3      	subs	r3, r0, r3
    a5be:	6013      	str	r3, [r2, #0]
    a5c0:	2301      	movs	r3, #1
    a5c2:	430b      	orrs	r3, r1
    a5c4:	6063      	str	r3, [r4, #4]
    a5c6:	e7d3      	b.n	a570 <_malloc_trim_r+0x38>
    a5c8:	40000428 	.word	0x40000428
    a5cc:	00000fef 	.word	0x00000fef
    a5d0:	40000e70 	.word	0x40000e70
    a5d4:	40000834 	.word	0x40000834

0000a5d8 <_free_r>:
    a5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5da:	4657      	mov	r7, sl
    a5dc:	4646      	mov	r6, r8
    a5de:	b4c0      	push	{r6, r7}
    a5e0:	4680      	mov	r8, r0
    a5e2:	1c0c      	adds	r4, r1, #0
    a5e4:	2900      	cmp	r1, #0
    a5e6:	d031      	beq.n	a64c <_free_r+0x74>
    a5e8:	1c25      	adds	r5, r4, #0
    a5ea:	3d08      	subs	r5, #8
    a5ec:	f000 fea8 	bl	b340 <__malloc_lock>
    a5f0:	686c      	ldr	r4, [r5, #4]
    a5f2:	2701      	movs	r7, #1
    a5f4:	1c21      	adds	r1, r4, #0
    a5f6:	43b9      	bics	r1, r7
    a5f8:	1868      	adds	r0, r5, r1
    a5fa:	6843      	ldr	r3, [r0, #4]
    a5fc:	2203      	movs	r2, #3
    a5fe:	1c1e      	adds	r6, r3, #0
    a600:	4396      	bics	r6, r2
    a602:	4a62      	ldr	r2, [pc, #392]	; (a78c <_free_r+0x1b4>)
    a604:	6893      	ldr	r3, [r2, #8]
    a606:	4694      	mov	ip, r2
    a608:	4692      	mov	sl, r2
    a60a:	4298      	cmp	r0, r3
    a60c:	d066      	beq.n	a6dc <_free_r+0x104>
    a60e:	6046      	str	r6, [r0, #4]
    a610:	423c      	tst	r4, r7
    a612:	d10b      	bne.n	a62c <_free_r+0x54>
    a614:	682b      	ldr	r3, [r5, #0]
    a616:	1aed      	subs	r5, r5, r3
    a618:	18c9      	adds	r1, r1, r3
    a61a:	68aa      	ldr	r2, [r5, #8]
    a61c:	4663      	mov	r3, ip
    a61e:	3308      	adds	r3, #8
    a620:	429a      	cmp	r2, r3
    a622:	d100      	bne.n	a626 <_free_r+0x4e>
    a624:	e07b      	b.n	a71e <_free_r+0x146>
    a626:	68eb      	ldr	r3, [r5, #12]
    a628:	60d3      	str	r3, [r2, #12]
    a62a:	609a      	str	r2, [r3, #8]
    a62c:	2400      	movs	r4, #0
    a62e:	1983      	adds	r3, r0, r6
    a630:	685b      	ldr	r3, [r3, #4]
    a632:	2701      	movs	r7, #1
    a634:	423b      	tst	r3, r7
    a636:	d00f      	beq.n	a658 <_free_r+0x80>
    a638:	2001      	movs	r0, #1
    a63a:	1c0b      	adds	r3, r1, #0
    a63c:	4303      	orrs	r3, r0
    a63e:	606b      	str	r3, [r5, #4]
    a640:	5149      	str	r1, [r1, r5]
    a642:	2c00      	cmp	r4, #0
    a644:	d01a      	beq.n	a67c <_free_r+0xa4>
    a646:	4640      	mov	r0, r8
    a648:	f000 fe7c 	bl	b344 <__malloc_unlock>
    a64c:	bc0c      	pop	{r2, r3}
    a64e:	4690      	mov	r8, r2
    a650:	469a      	mov	sl, r3
    a652:	bcf0      	pop	{r4, r5, r6, r7}
    a654:	bc01      	pop	{r0}
    a656:	4700      	bx	r0
    a658:	1989      	adds	r1, r1, r6
    a65a:	2c00      	cmp	r4, #0
    a65c:	d129      	bne.n	a6b2 <_free_r+0xda>
    a65e:	4653      	mov	r3, sl
    a660:	6882      	ldr	r2, [r0, #8]
    a662:	3308      	adds	r3, #8
    a664:	429a      	cmp	r2, r3
    a666:	d062      	beq.n	a72e <_free_r+0x156>
    a668:	68c3      	ldr	r3, [r0, #12]
    a66a:	2001      	movs	r0, #1
    a66c:	60d3      	str	r3, [r2, #12]
    a66e:	609a      	str	r2, [r3, #8]
    a670:	1c0b      	adds	r3, r1, #0
    a672:	4303      	orrs	r3, r0
    a674:	606b      	str	r3, [r5, #4]
    a676:	5149      	str	r1, [r1, r5]
    a678:	2c00      	cmp	r4, #0
    a67a:	d1e4      	bne.n	a646 <_free_r+0x6e>
    a67c:	4b44      	ldr	r3, [pc, #272]	; (a790 <_free_r+0x1b8>)
    a67e:	4299      	cmp	r1, r3
    a680:	d919      	bls.n	a6b6 <_free_r+0xde>
    a682:	0a4a      	lsrs	r2, r1, #9
    a684:	2a00      	cmp	r2, #0
    a686:	d142      	bne.n	a70e <_free_r+0x136>
    a688:	08cb      	lsrs	r3, r1, #3
    a68a:	00da      	lsls	r2, r3, #3
    a68c:	4650      	mov	r0, sl
    a68e:	1814      	adds	r4, r2, r0
    a690:	68a0      	ldr	r0, [r4, #8]
    a692:	4284      	cmp	r4, r0
    a694:	d054      	beq.n	a740 <_free_r+0x168>
    a696:	6843      	ldr	r3, [r0, #4]
    a698:	2203      	movs	r2, #3
    a69a:	4393      	bics	r3, r2
    a69c:	4299      	cmp	r1, r3
    a69e:	d202      	bcs.n	a6a6 <_free_r+0xce>
    a6a0:	6880      	ldr	r0, [r0, #8]
    a6a2:	4284      	cmp	r4, r0
    a6a4:	d1f7      	bne.n	a696 <_free_r+0xbe>
    a6a6:	68c4      	ldr	r4, [r0, #12]
    a6a8:	60ec      	str	r4, [r5, #12]
    a6aa:	60a8      	str	r0, [r5, #8]
    a6ac:	60c5      	str	r5, [r0, #12]
    a6ae:	60a5      	str	r5, [r4, #8]
    a6b0:	e7c9      	b.n	a646 <_free_r+0x6e>
    a6b2:	6882      	ldr	r2, [r0, #8]
    a6b4:	e7d8      	b.n	a668 <_free_r+0x90>
    a6b6:	08c9      	lsrs	r1, r1, #3
    a6b8:	1c0a      	adds	r2, r1, #0
    a6ba:	2900      	cmp	r1, #0
    a6bc:	db35      	blt.n	a72a <_free_r+0x152>
    a6be:	1092      	asrs	r2, r2, #2
    a6c0:	4090      	lsls	r0, r2
    a6c2:	1c02      	adds	r2, r0, #0
    a6c4:	4660      	mov	r0, ip
    a6c6:	6843      	ldr	r3, [r0, #4]
    a6c8:	4313      	orrs	r3, r2
    a6ca:	6043      	str	r3, [r0, #4]
    a6cc:	00cb      	lsls	r3, r1, #3
    a6ce:	4453      	add	r3, sl
    a6d0:	689a      	ldr	r2, [r3, #8]
    a6d2:	60eb      	str	r3, [r5, #12]
    a6d4:	60aa      	str	r2, [r5, #8]
    a6d6:	60d5      	str	r5, [r2, #12]
    a6d8:	609d      	str	r5, [r3, #8]
    a6da:	e7b4      	b.n	a646 <_free_r+0x6e>
    a6dc:	1989      	adds	r1, r1, r6
    a6de:	423c      	tst	r4, r7
    a6e0:	d106      	bne.n	a6f0 <_free_r+0x118>
    a6e2:	682b      	ldr	r3, [r5, #0]
    a6e4:	1aed      	subs	r5, r5, r3
    a6e6:	68ea      	ldr	r2, [r5, #12]
    a6e8:	18c9      	adds	r1, r1, r3
    a6ea:	68ab      	ldr	r3, [r5, #8]
    a6ec:	60da      	str	r2, [r3, #12]
    a6ee:	6093      	str	r3, [r2, #8]
    a6f0:	1c0b      	adds	r3, r1, #0
    a6f2:	433b      	orrs	r3, r7
    a6f4:	606b      	str	r3, [r5, #4]
    a6f6:	4663      	mov	r3, ip
    a6f8:	609d      	str	r5, [r3, #8]
    a6fa:	4b26      	ldr	r3, [pc, #152]	; (a794 <_free_r+0x1bc>)
    a6fc:	681b      	ldr	r3, [r3, #0]
    a6fe:	4299      	cmp	r1, r3
    a700:	d3a1      	bcc.n	a646 <_free_r+0x6e>
    a702:	4b25      	ldr	r3, [pc, #148]	; (a798 <_free_r+0x1c0>)
    a704:	4640      	mov	r0, r8
    a706:	6819      	ldr	r1, [r3, #0]
    a708:	f7ff ff16 	bl	a538 <_malloc_trim_r>
    a70c:	e79b      	b.n	a646 <_free_r+0x6e>
    a70e:	2a04      	cmp	r2, #4
    a710:	d907      	bls.n	a722 <_free_r+0x14a>
    a712:	2a14      	cmp	r2, #20
    a714:	d81e      	bhi.n	a754 <_free_r+0x17c>
    a716:	1c13      	adds	r3, r2, #0
    a718:	335b      	adds	r3, #91	; 0x5b
    a71a:	00da      	lsls	r2, r3, #3
    a71c:	e7b6      	b.n	a68c <_free_r+0xb4>
    a71e:	2401      	movs	r4, #1
    a720:	e785      	b.n	a62e <_free_r+0x56>
    a722:	098b      	lsrs	r3, r1, #6
    a724:	3338      	adds	r3, #56	; 0x38
    a726:	00da      	lsls	r2, r3, #3
    a728:	e7b0      	b.n	a68c <_free_r+0xb4>
    a72a:	1cca      	adds	r2, r1, #3
    a72c:	e7c7      	b.n	a6be <_free_r+0xe6>
    a72e:	1c0b      	adds	r3, r1, #0
    a730:	433b      	orrs	r3, r7
    a732:	60d5      	str	r5, [r2, #12]
    a734:	6095      	str	r5, [r2, #8]
    a736:	60ea      	str	r2, [r5, #12]
    a738:	60aa      	str	r2, [r5, #8]
    a73a:	606b      	str	r3, [r5, #4]
    a73c:	5149      	str	r1, [r1, r5]
    a73e:	e782      	b.n	a646 <_free_r+0x6e>
    a740:	2b00      	cmp	r3, #0
    a742:	db15      	blt.n	a770 <_free_r+0x198>
    a744:	109b      	asrs	r3, r3, #2
    a746:	4661      	mov	r1, ip
    a748:	2201      	movs	r2, #1
    a74a:	409a      	lsls	r2, r3
    a74c:	684b      	ldr	r3, [r1, #4]
    a74e:	4313      	orrs	r3, r2
    a750:	604b      	str	r3, [r1, #4]
    a752:	e7a9      	b.n	a6a8 <_free_r+0xd0>
    a754:	2a54      	cmp	r2, #84	; 0x54
    a756:	d803      	bhi.n	a760 <_free_r+0x188>
    a758:	0b0b      	lsrs	r3, r1, #12
    a75a:	336e      	adds	r3, #110	; 0x6e
    a75c:	00da      	lsls	r2, r3, #3
    a75e:	e795      	b.n	a68c <_free_r+0xb4>
    a760:	23aa      	movs	r3, #170	; 0xaa
    a762:	005b      	lsls	r3, r3, #1
    a764:	429a      	cmp	r2, r3
    a766:	d805      	bhi.n	a774 <_free_r+0x19c>
    a768:	0bcb      	lsrs	r3, r1, #15
    a76a:	3377      	adds	r3, #119	; 0x77
    a76c:	00da      	lsls	r2, r3, #3
    a76e:	e78d      	b.n	a68c <_free_r+0xb4>
    a770:	3303      	adds	r3, #3
    a772:	e7e7      	b.n	a744 <_free_r+0x16c>
    a774:	4b09      	ldr	r3, [pc, #36]	; (a79c <_free_r+0x1c4>)
    a776:	429a      	cmp	r2, r3
    a778:	d903      	bls.n	a782 <_free_r+0x1aa>
    a77a:	22fc      	movs	r2, #252	; 0xfc
    a77c:	237e      	movs	r3, #126	; 0x7e
    a77e:	0092      	lsls	r2, r2, #2
    a780:	e784      	b.n	a68c <_free_r+0xb4>
    a782:	0c8b      	lsrs	r3, r1, #18
    a784:	337c      	adds	r3, #124	; 0x7c
    a786:	00da      	lsls	r2, r3, #3
    a788:	e780      	b.n	a68c <_free_r+0xb4>
    a78a:	46c0      	nop			; (mov r8, r8)
    a78c:	40000428 	.word	0x40000428
    a790:	000001ff 	.word	0x000001ff
    a794:	40000830 	.word	0x40000830
    a798:	40000e64 	.word	0x40000e64
    a79c:	00000554 	.word	0x00000554

0000a7a0 <__sfvwrite>:
    a7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7a2:	465f      	mov	r7, fp
    a7a4:	4656      	mov	r6, sl
    a7a6:	464d      	mov	r5, r9
    a7a8:	4644      	mov	r4, r8
    a7aa:	b4f0      	push	{r4, r5, r6, r7}
    a7ac:	688b      	ldr	r3, [r1, #8]
    a7ae:	b082      	sub	sp, #8
    a7b0:	1c06      	adds	r6, r0, #0
    a7b2:	4689      	mov	r9, r1
    a7b4:	2b00      	cmp	r3, #0
    a7b6:	d02d      	beq.n	a814 <__sfvwrite+0x74>
    a7b8:	8981      	ldrh	r1, [r0, #12]
    a7ba:	070a      	lsls	r2, r1, #28
    a7bc:	d400      	bmi.n	a7c0 <__sfvwrite+0x20>
    a7be:	e12e      	b.n	aa1e <__sfvwrite+0x27e>
    a7c0:	6903      	ldr	r3, [r0, #16]
    a7c2:	2b00      	cmp	r3, #0
    a7c4:	d100      	bne.n	a7c8 <__sfvwrite+0x28>
    a7c6:	e12a      	b.n	aa1e <__sfvwrite+0x27e>
    a7c8:	464b      	mov	r3, r9
    a7ca:	681b      	ldr	r3, [r3, #0]
    a7cc:	469a      	mov	sl, r3
    a7ce:	078a      	lsls	r2, r1, #30
    a7d0:	d52a      	bpl.n	a828 <__sfvwrite+0x88>
    a7d2:	2400      	movs	r4, #0
    a7d4:	2500      	movs	r5, #0
    a7d6:	2c00      	cmp	r4, #0
    a7d8:	d016      	beq.n	a808 <__sfvwrite+0x68>
    a7da:	2380      	movs	r3, #128	; 0x80
    a7dc:	00db      	lsls	r3, r3, #3
    a7de:	69f0      	ldr	r0, [r6, #28]
    a7e0:	1c22      	adds	r2, r4, #0
    a7e2:	429c      	cmp	r4, r3
    a7e4:	d900      	bls.n	a7e8 <__sfvwrite+0x48>
    a7e6:	1c1a      	adds	r2, r3, #0
    a7e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
    a7ea:	1c29      	adds	r1, r5, #0
    a7ec:	f000 f922 	bl	aa34 <__sfvwrite+0x294>
    a7f0:	2800      	cmp	r0, #0
    a7f2:	dd5b      	ble.n	a8ac <__sfvwrite+0x10c>
    a7f4:	464a      	mov	r2, r9
    a7f6:	6893      	ldr	r3, [r2, #8]
    a7f8:	1a1b      	subs	r3, r3, r0
    a7fa:	6093      	str	r3, [r2, #8]
    a7fc:	2b00      	cmp	r3, #0
    a7fe:	d009      	beq.n	a814 <__sfvwrite+0x74>
    a800:	1a24      	subs	r4, r4, r0
    a802:	182d      	adds	r5, r5, r0
    a804:	2c00      	cmp	r4, #0
    a806:	d1e8      	bne.n	a7da <__sfvwrite+0x3a>
    a808:	4653      	mov	r3, sl
    a80a:	2208      	movs	r2, #8
    a80c:	681d      	ldr	r5, [r3, #0]
    a80e:	685c      	ldr	r4, [r3, #4]
    a810:	4492      	add	sl, r2
    a812:	e7e0      	b.n	a7d6 <__sfvwrite+0x36>
    a814:	2000      	movs	r0, #0
    a816:	b002      	add	sp, #8
    a818:	bc3c      	pop	{r2, r3, r4, r5}
    a81a:	4690      	mov	r8, r2
    a81c:	4699      	mov	r9, r3
    a81e:	46a2      	mov	sl, r4
    a820:	46ab      	mov	fp, r5
    a822:	bcf0      	pop	{r4, r5, r6, r7}
    a824:	bc02      	pop	{r1}
    a826:	4708      	bx	r1
    a828:	07cb      	lsls	r3, r1, #31
    a82a:	d546      	bpl.n	a8ba <__sfvwrite+0x11a>
    a82c:	2700      	movs	r7, #0
    a82e:	9701      	str	r7, [sp, #4]
    a830:	46bb      	mov	fp, r7
    a832:	46b8      	mov	r8, r7
    a834:	2f00      	cmp	r7, #0
    a836:	d02a      	beq.n	a88e <__sfvwrite+0xee>
    a838:	9b01      	ldr	r3, [sp, #4]
    a83a:	2b00      	cmp	r3, #0
    a83c:	d100      	bne.n	a840 <__sfvwrite+0xa0>
    a83e:	e09d      	b.n	a97c <__sfvwrite+0x1dc>
    a840:	1c3d      	adds	r5, r7, #0
    a842:	4547      	cmp	r7, r8
    a844:	d900      	bls.n	a848 <__sfvwrite+0xa8>
    a846:	4645      	mov	r5, r8
    a848:	6830      	ldr	r0, [r6, #0]
    a84a:	6933      	ldr	r3, [r6, #16]
    a84c:	68b1      	ldr	r1, [r6, #8]
    a84e:	6972      	ldr	r2, [r6, #20]
    a850:	4298      	cmp	r0, r3
    a852:	d903      	bls.n	a85c <__sfvwrite+0xbc>
    a854:	188c      	adds	r4, r1, r2
    a856:	42a5      	cmp	r5, r4
    a858:	dd00      	ble.n	a85c <__sfvwrite+0xbc>
    a85a:	e0ab      	b.n	a9b4 <__sfvwrite+0x214>
    a85c:	4295      	cmp	r5, r2
    a85e:	db75      	blt.n	a94c <__sfvwrite+0x1ac>
    a860:	69f0      	ldr	r0, [r6, #28]
    a862:	6a73      	ldr	r3, [r6, #36]	; 0x24
    a864:	4659      	mov	r1, fp
    a866:	f000 f8e5 	bl	aa34 <__sfvwrite+0x294>
    a86a:	1c04      	adds	r4, r0, #0
    a86c:	2800      	cmp	r0, #0
    a86e:	dd1d      	ble.n	a8ac <__sfvwrite+0x10c>
    a870:	4642      	mov	r2, r8
    a872:	1b12      	subs	r2, r2, r4
    a874:	4690      	mov	r8, r2
    a876:	2a00      	cmp	r2, #0
    a878:	d078      	beq.n	a96c <__sfvwrite+0x1cc>
    a87a:	464a      	mov	r2, r9
    a87c:	6893      	ldr	r3, [r2, #8]
    a87e:	1b1b      	subs	r3, r3, r4
    a880:	6093      	str	r3, [r2, #8]
    a882:	2b00      	cmp	r3, #0
    a884:	d0c6      	beq.n	a814 <__sfvwrite+0x74>
    a886:	1b3f      	subs	r7, r7, r4
    a888:	44a3      	add	fp, r4
    a88a:	2f00      	cmp	r7, #0
    a88c:	d1d4      	bne.n	a838 <__sfvwrite+0x98>
    a88e:	4653      	mov	r3, sl
    a890:	681b      	ldr	r3, [r3, #0]
    a892:	4652      	mov	r2, sl
    a894:	469b      	mov	fp, r3
    a896:	6857      	ldr	r7, [r2, #4]
    a898:	2308      	movs	r3, #8
    a89a:	2200      	movs	r2, #0
    a89c:	449a      	add	sl, r3
    a89e:	9201      	str	r2, [sp, #4]
    a8a0:	e7c8      	b.n	a834 <__sfvwrite+0x94>
    a8a2:	9a00      	ldr	r2, [sp, #0]
    a8a4:	6931      	ldr	r1, [r6, #16]
    a8a6:	6810      	ldr	r0, [r2, #0]
    a8a8:	f7ff fe96 	bl	a5d8 <_free_r>
    a8ac:	89b3      	ldrh	r3, [r6, #12]
    a8ae:	2240      	movs	r2, #64	; 0x40
    a8b0:	4313      	orrs	r3, r2
    a8b2:	81b3      	strh	r3, [r6, #12]
    a8b4:	2001      	movs	r0, #1
    a8b6:	4240      	negs	r0, r0
    a8b8:	e7ad      	b.n	a816 <__sfvwrite+0x76>
    a8ba:	4b5d      	ldr	r3, [pc, #372]	; (aa30 <__sfvwrite+0x290>)
    a8bc:	2700      	movs	r7, #0
    a8be:	9300      	str	r3, [sp, #0]
    a8c0:	46bb      	mov	fp, r7
    a8c2:	2f00      	cmp	r7, #0
    a8c4:	d025      	beq.n	a912 <__sfvwrite+0x172>
    a8c6:	68b4      	ldr	r4, [r6, #8]
    a8c8:	058b      	lsls	r3, r1, #22
    a8ca:	d52a      	bpl.n	a922 <__sfvwrite+0x182>
    a8cc:	1c22      	adds	r2, r4, #0
    a8ce:	42a7      	cmp	r7, r4
    a8d0:	d902      	bls.n	a8d8 <__sfvwrite+0x138>
    a8d2:	060b      	lsls	r3, r1, #24
    a8d4:	d500      	bpl.n	a8d8 <__sfvwrite+0x138>
    a8d6:	e089      	b.n	a9ec <__sfvwrite+0x24c>
    a8d8:	4297      	cmp	r7, r2
    a8da:	d201      	bcs.n	a8e0 <__sfvwrite+0x140>
    a8dc:	1c3a      	adds	r2, r7, #0
    a8de:	1c3c      	adds	r4, r7, #0
    a8e0:	6830      	ldr	r0, [r6, #0]
    a8e2:	4659      	mov	r1, fp
    a8e4:	f000 fcbe 	bl	b264 <memmove>
    a8e8:	68b3      	ldr	r3, [r6, #8]
    a8ea:	1b1b      	subs	r3, r3, r4
    a8ec:	60b3      	str	r3, [r6, #8]
    a8ee:	6833      	ldr	r3, [r6, #0]
    a8f0:	191b      	adds	r3, r3, r4
    a8f2:	6033      	str	r3, [r6, #0]
    a8f4:	1c3d      	adds	r5, r7, #0
    a8f6:	46b8      	mov	r8, r7
    a8f8:	1c3c      	adds	r4, r7, #0
    a8fa:	464a      	mov	r2, r9
    a8fc:	6893      	ldr	r3, [r2, #8]
    a8fe:	1b1b      	subs	r3, r3, r4
    a900:	6093      	str	r3, [r2, #8]
    a902:	2b00      	cmp	r3, #0
    a904:	d100      	bne.n	a908 <__sfvwrite+0x168>
    a906:	e785      	b.n	a814 <__sfvwrite+0x74>
    a908:	1b7f      	subs	r7, r7, r5
    a90a:	44c3      	add	fp, r8
    a90c:	89b1      	ldrh	r1, [r6, #12]
    a90e:	2f00      	cmp	r7, #0
    a910:	d1d9      	bne.n	a8c6 <__sfvwrite+0x126>
    a912:	4652      	mov	r2, sl
    a914:	6812      	ldr	r2, [r2, #0]
    a916:	4653      	mov	r3, sl
    a918:	4693      	mov	fp, r2
    a91a:	685f      	ldr	r7, [r3, #4]
    a91c:	2208      	movs	r2, #8
    a91e:	4492      	add	sl, r2
    a920:	e7cf      	b.n	a8c2 <__sfvwrite+0x122>
    a922:	6830      	ldr	r0, [r6, #0]
    a924:	6933      	ldr	r3, [r6, #16]
    a926:	4298      	cmp	r0, r3
    a928:	d902      	bls.n	a930 <__sfvwrite+0x190>
    a92a:	1c25      	adds	r5, r4, #0
    a92c:	42af      	cmp	r7, r5
    a92e:	d84f      	bhi.n	a9d0 <__sfvwrite+0x230>
    a930:	6972      	ldr	r2, [r6, #20]
    a932:	4297      	cmp	r7, r2
    a934:	d330      	bcc.n	a998 <__sfvwrite+0x1f8>
    a936:	69f0      	ldr	r0, [r6, #28]
    a938:	6a73      	ldr	r3, [r6, #36]	; 0x24
    a93a:	4659      	mov	r1, fp
    a93c:	f000 f87a 	bl	aa34 <__sfvwrite+0x294>
    a940:	1c04      	adds	r4, r0, #0
    a942:	2800      	cmp	r0, #0
    a944:	ddb2      	ble.n	a8ac <__sfvwrite+0x10c>
    a946:	1c05      	adds	r5, r0, #0
    a948:	4680      	mov	r8, r0
    a94a:	e7d6      	b.n	a8fa <__sfvwrite+0x15a>
    a94c:	1c2a      	adds	r2, r5, #0
    a94e:	4659      	mov	r1, fp
    a950:	f000 fc88 	bl	b264 <memmove>
    a954:	68b3      	ldr	r3, [r6, #8]
    a956:	1b5b      	subs	r3, r3, r5
    a958:	60b3      	str	r3, [r6, #8]
    a95a:	6833      	ldr	r3, [r6, #0]
    a95c:	4642      	mov	r2, r8
    a95e:	1c2c      	adds	r4, r5, #0
    a960:	195b      	adds	r3, r3, r5
    a962:	1b12      	subs	r2, r2, r4
    a964:	6033      	str	r3, [r6, #0]
    a966:	4690      	mov	r8, r2
    a968:	2a00      	cmp	r2, #0
    a96a:	d186      	bne.n	a87a <__sfvwrite+0xda>
    a96c:	1c30      	adds	r0, r6, #0
    a96e:	f7ff fcbf 	bl	a2f0 <fflush>
    a972:	2800      	cmp	r0, #0
    a974:	d19a      	bne.n	a8ac <__sfvwrite+0x10c>
    a976:	2300      	movs	r3, #0
    a978:	9301      	str	r3, [sp, #4]
    a97a:	e77e      	b.n	a87a <__sfvwrite+0xda>
    a97c:	4658      	mov	r0, fp
    a97e:	210a      	movs	r1, #10
    a980:	1c3a      	adds	r2, r7, #0
    a982:	f000 fc15 	bl	b1b0 <memchr>
    a986:	2800      	cmp	r0, #0
    a988:	d044      	beq.n	aa14 <__sfvwrite+0x274>
    a98a:	465a      	mov	r2, fp
    a98c:	1a83      	subs	r3, r0, r2
    a98e:	3301      	adds	r3, #1
    a990:	4698      	mov	r8, r3
    a992:	2301      	movs	r3, #1
    a994:	9301      	str	r3, [sp, #4]
    a996:	e753      	b.n	a840 <__sfvwrite+0xa0>
    a998:	4659      	mov	r1, fp
    a99a:	1c3a      	adds	r2, r7, #0
    a99c:	f000 fc62 	bl	b264 <memmove>
    a9a0:	68b3      	ldr	r3, [r6, #8]
    a9a2:	1bdb      	subs	r3, r3, r7
    a9a4:	60b3      	str	r3, [r6, #8]
    a9a6:	6833      	ldr	r3, [r6, #0]
    a9a8:	1c3c      	adds	r4, r7, #0
    a9aa:	19db      	adds	r3, r3, r7
    a9ac:	1c3d      	adds	r5, r7, #0
    a9ae:	46b8      	mov	r8, r7
    a9b0:	6033      	str	r3, [r6, #0]
    a9b2:	e7a2      	b.n	a8fa <__sfvwrite+0x15a>
    a9b4:	4659      	mov	r1, fp
    a9b6:	1c22      	adds	r2, r4, #0
    a9b8:	f000 fc54 	bl	b264 <memmove>
    a9bc:	6833      	ldr	r3, [r6, #0]
    a9be:	191b      	adds	r3, r3, r4
    a9c0:	6033      	str	r3, [r6, #0]
    a9c2:	1c30      	adds	r0, r6, #0
    a9c4:	f7ff fc94 	bl	a2f0 <fflush>
    a9c8:	2800      	cmp	r0, #0
    a9ca:	d100      	bne.n	a9ce <__sfvwrite+0x22e>
    a9cc:	e750      	b.n	a870 <__sfvwrite+0xd0>
    a9ce:	e76d      	b.n	a8ac <__sfvwrite+0x10c>
    a9d0:	4659      	mov	r1, fp
    a9d2:	1c22      	adds	r2, r4, #0
    a9d4:	f000 fc46 	bl	b264 <memmove>
    a9d8:	6833      	ldr	r3, [r6, #0]
    a9da:	191b      	adds	r3, r3, r4
    a9dc:	6033      	str	r3, [r6, #0]
    a9de:	1c30      	adds	r0, r6, #0
    a9e0:	46a0      	mov	r8, r4
    a9e2:	f7ff fc85 	bl	a2f0 <fflush>
    a9e6:	2800      	cmp	r0, #0
    a9e8:	d087      	beq.n	a8fa <__sfvwrite+0x15a>
    a9ea:	e75f      	b.n	a8ac <__sfvwrite+0x10c>
    a9ec:	6931      	ldr	r1, [r6, #16]
    a9ee:	6833      	ldr	r3, [r6, #0]
    a9f0:	9a00      	ldr	r2, [sp, #0]
    a9f2:	1a5c      	subs	r4, r3, r1
    a9f4:	193d      	adds	r5, r7, r4
    a9f6:	6810      	ldr	r0, [r2, #0]
    a9f8:	1c2a      	adds	r2, r5, #0
    a9fa:	f001 f90d 	bl	bc18 <_realloc_r>
    a9fe:	2800      	cmp	r0, #0
    aa00:	d100      	bne.n	aa04 <__sfvwrite+0x264>
    aa02:	e74e      	b.n	a8a2 <__sfvwrite+0x102>
    aa04:	1903      	adds	r3, r0, r4
    aa06:	1c3a      	adds	r2, r7, #0
    aa08:	1c3c      	adds	r4, r7, #0
    aa0a:	6130      	str	r0, [r6, #16]
    aa0c:	6033      	str	r3, [r6, #0]
    aa0e:	6175      	str	r5, [r6, #20]
    aa10:	60b7      	str	r7, [r6, #8]
    aa12:	e761      	b.n	a8d8 <__sfvwrite+0x138>
    aa14:	1c7a      	adds	r2, r7, #1
    aa16:	2301      	movs	r3, #1
    aa18:	4690      	mov	r8, r2
    aa1a:	9301      	str	r3, [sp, #4]
    aa1c:	e710      	b.n	a840 <__sfvwrite+0xa0>
    aa1e:	1c30      	adds	r0, r6, #0
    aa20:	f7fe fc80 	bl	9324 <__swsetup>
    aa24:	2800      	cmp	r0, #0
    aa26:	d000      	beq.n	aa2a <__sfvwrite+0x28a>
    aa28:	e744      	b.n	a8b4 <__sfvwrite+0x114>
    aa2a:	89b1      	ldrh	r1, [r6, #12]
    aa2c:	e6cc      	b.n	a7c8 <__sfvwrite+0x28>
    aa2e:	46c0      	nop			; (mov r8, r8)
    aa30:	40000014 	.word	0x40000014
    aa34:	4718      	bx	r3
    aa36:	46c0      	nop			; (mov r8, r8)

0000aa38 <_fwalk_reent>:
    aa38:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa3a:	4657      	mov	r7, sl
    aa3c:	4646      	mov	r6, r8
    aa3e:	b4c0      	push	{r6, r7}
    aa40:	1c07      	adds	r7, r0, #0
    aa42:	4688      	mov	r8, r1
    aa44:	f7ff fcb8 	bl	a3b8 <__sfp_lock_acquire>
    aa48:	22b8      	movs	r2, #184	; 0xb8
    aa4a:	0092      	lsls	r2, r2, #2
    aa4c:	18be      	adds	r6, r7, r2
    aa4e:	2e00      	cmp	r6, #0
    aa50:	d026      	beq.n	aaa0 <_fwalk_reent+0x68>
    aa52:	2200      	movs	r2, #0
    aa54:	4692      	mov	sl, r2
    aa56:	6873      	ldr	r3, [r6, #4]
    aa58:	68b2      	ldr	r2, [r6, #8]
    aa5a:	1e5d      	subs	r5, r3, #1
    aa5c:	d414      	bmi.n	aa88 <_fwalk_reent+0x50>
    aa5e:	1c14      	adds	r4, r2, #0
    aa60:	340c      	adds	r4, #12
    aa62:	2200      	movs	r2, #0
    aa64:	5ea3      	ldrsh	r3, [r4, r2]
    aa66:	1c21      	adds	r1, r4, #0
    aa68:	390c      	subs	r1, #12
    aa6a:	2b00      	cmp	r3, #0
    aa6c:	d009      	beq.n	aa82 <_fwalk_reent+0x4a>
    aa6e:	2202      	movs	r2, #2
    aa70:	5ea3      	ldrsh	r3, [r4, r2]
    aa72:	3301      	adds	r3, #1
    aa74:	d005      	beq.n	aa82 <_fwalk_reent+0x4a>
    aa76:	1c38      	adds	r0, r7, #0
    aa78:	f000 f84b 	bl	ab12 <_fwalk+0x6a>
    aa7c:	4653      	mov	r3, sl
    aa7e:	4303      	orrs	r3, r0
    aa80:	469a      	mov	sl, r3
    aa82:	345c      	adds	r4, #92	; 0x5c
    aa84:	3d01      	subs	r5, #1
    aa86:	d2ec      	bcs.n	aa62 <_fwalk_reent+0x2a>
    aa88:	6836      	ldr	r6, [r6, #0]
    aa8a:	2e00      	cmp	r6, #0
    aa8c:	d1e3      	bne.n	aa56 <_fwalk_reent+0x1e>
    aa8e:	f7ff fc95 	bl	a3bc <__sfp_lock_release>
    aa92:	4650      	mov	r0, sl
    aa94:	bc0c      	pop	{r2, r3}
    aa96:	4690      	mov	r8, r2
    aa98:	469a      	mov	sl, r3
    aa9a:	bcf0      	pop	{r4, r5, r6, r7}
    aa9c:	bc02      	pop	{r1}
    aa9e:	4708      	bx	r1
    aaa0:	2300      	movs	r3, #0
    aaa2:	469a      	mov	sl, r3
    aaa4:	e7f3      	b.n	aa8e <_fwalk_reent+0x56>
    aaa6:	46c0      	nop			; (mov r8, r8)

0000aaa8 <_fwalk>:
    aaa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    aaaa:	4647      	mov	r7, r8
    aaac:	b480      	push	{r7}
    aaae:	1c04      	adds	r4, r0, #0
    aab0:	1c0f      	adds	r7, r1, #0
    aab2:	f7ff fc81 	bl	a3b8 <__sfp_lock_acquire>
    aab6:	22b8      	movs	r2, #184	; 0xb8
    aab8:	0092      	lsls	r2, r2, #2
    aaba:	18a6      	adds	r6, r4, r2
    aabc:	2e00      	cmp	r6, #0
    aabe:	d024      	beq.n	ab0a <_fwalk+0x62>
    aac0:	2200      	movs	r2, #0
    aac2:	4690      	mov	r8, r2
    aac4:	6873      	ldr	r3, [r6, #4]
    aac6:	68b2      	ldr	r2, [r6, #8]
    aac8:	1e5d      	subs	r5, r3, #1
    aaca:	d413      	bmi.n	aaf4 <_fwalk+0x4c>
    aacc:	1c14      	adds	r4, r2, #0
    aace:	340c      	adds	r4, #12
    aad0:	2200      	movs	r2, #0
    aad2:	5ea3      	ldrsh	r3, [r4, r2]
    aad4:	1c20      	adds	r0, r4, #0
    aad6:	380c      	subs	r0, #12
    aad8:	2b00      	cmp	r3, #0
    aada:	d008      	beq.n	aaee <_fwalk+0x46>
    aadc:	2202      	movs	r2, #2
    aade:	5ea3      	ldrsh	r3, [r4, r2]
    aae0:	3301      	adds	r3, #1
    aae2:	d004      	beq.n	aaee <_fwalk+0x46>
    aae4:	f000 f814 	bl	ab10 <_fwalk+0x68>
    aae8:	4643      	mov	r3, r8
    aaea:	4303      	orrs	r3, r0
    aaec:	4698      	mov	r8, r3
    aaee:	345c      	adds	r4, #92	; 0x5c
    aaf0:	3d01      	subs	r5, #1
    aaf2:	d2ed      	bcs.n	aad0 <_fwalk+0x28>
    aaf4:	6836      	ldr	r6, [r6, #0]
    aaf6:	2e00      	cmp	r6, #0
    aaf8:	d1e4      	bne.n	aac4 <_fwalk+0x1c>
    aafa:	f7ff fc5f 	bl	a3bc <__sfp_lock_release>
    aafe:	4640      	mov	r0, r8
    ab00:	bc04      	pop	{r2}
    ab02:	4690      	mov	r8, r2
    ab04:	bcf0      	pop	{r4, r5, r6, r7}
    ab06:	bc02      	pop	{r1}
    ab08:	4708      	bx	r1
    ab0a:	2300      	movs	r3, #0
    ab0c:	4698      	mov	r8, r3
    ab0e:	e7f4      	b.n	aafa <_fwalk+0x52>
    ab10:	4738      	bx	r7
    ab12:	4740      	bx	r8

0000ab14 <__locale_charset>:
    ab14:	4b01      	ldr	r3, [pc, #4]	; (ab1c <__locale_charset+0x8>)
    ab16:	6818      	ldr	r0, [r3, #0]
    ab18:	4770      	bx	lr
    ab1a:	46c0      	nop			; (mov r8, r8)
    ab1c:	00012c94 	.word	0x00012c94

0000ab20 <_localeconv_r>:
    ab20:	4800      	ldr	r0, [pc, #0]	; (ab24 <_localeconv_r+0x4>)
    ab22:	4770      	bx	lr
    ab24:	00012c58 	.word	0x00012c58

0000ab28 <localeconv>:
    ab28:	b500      	push	{lr}
    ab2a:	4b03      	ldr	r3, [pc, #12]	; (ab38 <localeconv+0x10>)
    ab2c:	6818      	ldr	r0, [r3, #0]
    ab2e:	f7ff fff7 	bl	ab20 <_localeconv_r>
    ab32:	bc02      	pop	{r1}
    ab34:	4708      	bx	r1
    ab36:	46c0      	nop			; (mov r8, r8)
    ab38:	40000014 	.word	0x40000014

0000ab3c <_setlocale_r>:
    ab3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab3e:	1c06      	adds	r6, r0, #0
    ab40:	1c0f      	adds	r7, r1, #0
    ab42:	1c14      	adds	r4, r2, #0
    ab44:	2a00      	cmp	r2, #0
    ab46:	d00c      	beq.n	ab62 <_setlocale_r+0x26>
    ab48:	4d0b      	ldr	r5, [pc, #44]	; (ab78 <_setlocale_r+0x3c>)
    ab4a:	1c10      	adds	r0, r2, #0
    ab4c:	1c29      	adds	r1, r5, #0
    ab4e:	f001 fadb 	bl	c108 <strcmp>
    ab52:	2800      	cmp	r0, #0
    ab54:	d107      	bne.n	ab66 <_setlocale_r+0x2a>
    ab56:	6337      	str	r7, [r6, #48]	; 0x30
    ab58:	6374      	str	r4, [r6, #52]	; 0x34
    ab5a:	1c28      	adds	r0, r5, #0
    ab5c:	bcf0      	pop	{r4, r5, r6, r7}
    ab5e:	bc02      	pop	{r1}
    ab60:	4708      	bx	r1
    ab62:	4805      	ldr	r0, [pc, #20]	; (ab78 <_setlocale_r+0x3c>)
    ab64:	e7fa      	b.n	ab5c <_setlocale_r+0x20>
    ab66:	4905      	ldr	r1, [pc, #20]	; (ab7c <_setlocale_r+0x40>)
    ab68:	1c20      	adds	r0, r4, #0
    ab6a:	f001 facd 	bl	c108 <strcmp>
    ab6e:	2800      	cmp	r0, #0
    ab70:	d0f1      	beq.n	ab56 <_setlocale_r+0x1a>
    ab72:	2000      	movs	r0, #0
    ab74:	e7f2      	b.n	ab5c <_setlocale_r+0x20>
    ab76:	46c0      	nop			; (mov r8, r8)
    ab78:	00012c4c 	.word	0x00012c4c
    ab7c:	00012c50 	.word	0x00012c50

0000ab80 <setlocale>:
    ab80:	b510      	push	{r4, lr}
    ab82:	4b05      	ldr	r3, [pc, #20]	; (ab98 <setlocale+0x18>)
    ab84:	1c04      	adds	r4, r0, #0
    ab86:	1c0a      	adds	r2, r1, #0
    ab88:	6818      	ldr	r0, [r3, #0]
    ab8a:	1c21      	adds	r1, r4, #0
    ab8c:	f7ff ffd6 	bl	ab3c <_setlocale_r>
    ab90:	bc10      	pop	{r4}
    ab92:	bc02      	pop	{r1}
    ab94:	4708      	bx	r1
    ab96:	46c0      	nop			; (mov r8, r8)
    ab98:	40000014 	.word	0x40000014

0000ab9c <__smakebuf>:
    ab9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab9e:	8982      	ldrh	r2, [r0, #12]
    aba0:	b08f      	sub	sp, #60	; 0x3c
    aba2:	1c04      	adds	r4, r0, #0
    aba4:	0793      	lsls	r3, r2, #30
    aba6:	d440      	bmi.n	ac2a <__smakebuf+0x8e>
    aba8:	89c3      	ldrh	r3, [r0, #14]
    abaa:	041b      	lsls	r3, r3, #16
    abac:	1419      	asrs	r1, r3, #16
    abae:	2900      	cmp	r1, #0
    abb0:	db45      	blt.n	ac3e <__smakebuf+0xa2>
    abb2:	4e2e      	ldr	r6, [pc, #184]	; (ac6c <__smakebuf+0xd0>)
    abb4:	466a      	mov	r2, sp
    abb6:	6830      	ldr	r0, [r6, #0]
    abb8:	f007 fe86 	bl	128c8 <___fstat_r_from_thumb>
    abbc:	2800      	cmp	r0, #0
    abbe:	db52      	blt.n	ac66 <__smakebuf+0xca>
    abc0:	23f0      	movs	r3, #240	; 0xf0
    abc2:	9a01      	ldr	r2, [sp, #4]
    abc4:	021b      	lsls	r3, r3, #8
    abc6:	401a      	ands	r2, r3
    abc8:	2380      	movs	r3, #128	; 0x80
    abca:	019b      	lsls	r3, r3, #6
    abcc:	2700      	movs	r7, #0
    abce:	429a      	cmp	r2, r3
    abd0:	d03c      	beq.n	ac4c <__smakebuf+0xb0>
    abd2:	2380      	movs	r3, #128	; 0x80
    abd4:	021b      	lsls	r3, r3, #8
    abd6:	429a      	cmp	r2, r3
    abd8:	d03a      	beq.n	ac50 <__smakebuf+0xb4>
    abda:	89a3      	ldrh	r3, [r4, #12]
    abdc:	2280      	movs	r2, #128	; 0x80
    abde:	0112      	lsls	r2, r2, #4
    abe0:	4313      	orrs	r3, r2
    abe2:	81a3      	strh	r3, [r4, #12]
    abe4:	2580      	movs	r5, #128	; 0x80
    abe6:	00ed      	lsls	r5, r5, #3
    abe8:	6830      	ldr	r0, [r6, #0]
    abea:	1c29      	adds	r1, r5, #0
    abec:	f000 f844 	bl	ac78 <_malloc_r>
    abf0:	2800      	cmp	r0, #0
    abf2:	d016      	beq.n	ac22 <__smakebuf+0x86>
    abf4:	6832      	ldr	r2, [r6, #0]
    abf6:	4b1e      	ldr	r3, [pc, #120]	; (ac70 <__smakebuf+0xd4>)
    abf8:	63d3      	str	r3, [r2, #60]	; 0x3c
    abfa:	89a3      	ldrh	r3, [r4, #12]
    abfc:	2280      	movs	r2, #128	; 0x80
    abfe:	4313      	orrs	r3, r2
    ac00:	81a3      	strh	r3, [r4, #12]
    ac02:	6020      	str	r0, [r4, #0]
    ac04:	6120      	str	r0, [r4, #16]
    ac06:	6165      	str	r5, [r4, #20]
    ac08:	2f00      	cmp	r7, #0
    ac0a:	d014      	beq.n	ac36 <__smakebuf+0x9a>
    ac0c:	230e      	movs	r3, #14
    ac0e:	5ee0      	ldrsh	r0, [r4, r3]
    ac10:	f007 fe5e 	bl	128d0 <__isatty_from_thumb>
    ac14:	2800      	cmp	r0, #0
    ac16:	d00e      	beq.n	ac36 <__smakebuf+0x9a>
    ac18:	89a3      	ldrh	r3, [r4, #12]
    ac1a:	2201      	movs	r2, #1
    ac1c:	4313      	orrs	r3, r2
    ac1e:	81a3      	strh	r3, [r4, #12]
    ac20:	e009      	b.n	ac36 <__smakebuf+0x9a>
    ac22:	89a3      	ldrh	r3, [r4, #12]
    ac24:	2202      	movs	r2, #2
    ac26:	4313      	orrs	r3, r2
    ac28:	81a3      	strh	r3, [r4, #12]
    ac2a:	1c23      	adds	r3, r4, #0
    ac2c:	3343      	adds	r3, #67	; 0x43
    ac2e:	6023      	str	r3, [r4, #0]
    ac30:	6123      	str	r3, [r4, #16]
    ac32:	2301      	movs	r3, #1
    ac34:	6163      	str	r3, [r4, #20]
    ac36:	b00f      	add	sp, #60	; 0x3c
    ac38:	bcf0      	pop	{r4, r5, r6, r7}
    ac3a:	bc01      	pop	{r0}
    ac3c:	4700      	bx	r0
    ac3e:	4e0b      	ldr	r6, [pc, #44]	; (ac6c <__smakebuf+0xd0>)
    ac40:	2380      	movs	r3, #128	; 0x80
    ac42:	011b      	lsls	r3, r3, #4
    ac44:	4313      	orrs	r3, r2
    ac46:	2700      	movs	r7, #0
    ac48:	81a3      	strh	r3, [r4, #12]
    ac4a:	e7cb      	b.n	abe4 <__smakebuf+0x48>
    ac4c:	2701      	movs	r7, #1
    ac4e:	e7c0      	b.n	abd2 <__smakebuf+0x36>
    ac50:	4a08      	ldr	r2, [pc, #32]	; (ac74 <__smakebuf+0xd8>)
    ac52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ac54:	4293      	cmp	r3, r2
    ac56:	d1c0      	bne.n	abda <__smakebuf+0x3e>
    ac58:	89a3      	ldrh	r3, [r4, #12]
    ac5a:	2280      	movs	r2, #128	; 0x80
    ac5c:	00d2      	lsls	r2, r2, #3
    ac5e:	4313      	orrs	r3, r2
    ac60:	81a3      	strh	r3, [r4, #12]
    ac62:	64e2      	str	r2, [r4, #76]	; 0x4c
    ac64:	e7be      	b.n	abe4 <__smakebuf+0x48>
    ac66:	89a2      	ldrh	r2, [r4, #12]
    ac68:	e7ea      	b.n	ac40 <__smakebuf+0xa4>
    ac6a:	46c0      	nop			; (mov r8, r8)
    ac6c:	40000014 	.word	0x40000014
    ac70:	0000a45d 	.word	0x0000a45d
    ac74:	0000c049 	.word	0x0000c049

0000ac78 <_malloc_r>:
    ac78:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac7a:	465f      	mov	r7, fp
    ac7c:	4656      	mov	r6, sl
    ac7e:	464d      	mov	r5, r9
    ac80:	4644      	mov	r4, r8
    ac82:	b4f0      	push	{r4, r5, r6, r7}
    ac84:	1c0a      	adds	r2, r1, #0
    ac86:	320b      	adds	r2, #11
    ac88:	b082      	sub	sp, #8
    ac8a:	1c07      	adds	r7, r0, #0
    ac8c:	2a16      	cmp	r2, #22
    ac8e:	d80e      	bhi.n	acae <_malloc_r+0x36>
    ac90:	2610      	movs	r6, #16
    ac92:	42b1      	cmp	r1, r6
    ac94:	d912      	bls.n	acbc <_malloc_r+0x44>
    ac96:	230c      	movs	r3, #12
    ac98:	603b      	str	r3, [r7, #0]
    ac9a:	2000      	movs	r0, #0
    ac9c:	b002      	add	sp, #8
    ac9e:	bc3c      	pop	{r2, r3, r4, r5}
    aca0:	4690      	mov	r8, r2
    aca2:	4699      	mov	r9, r3
    aca4:	46a2      	mov	sl, r4
    aca6:	46ab      	mov	fp, r5
    aca8:	bcf0      	pop	{r4, r5, r6, r7}
    acaa:	bc02      	pop	{r1}
    acac:	4708      	bx	r1
    acae:	2307      	movs	r3, #7
    acb0:	1c16      	adds	r6, r2, #0
    acb2:	439e      	bics	r6, r3
    acb4:	2e00      	cmp	r6, #0
    acb6:	dbee      	blt.n	ac96 <_malloc_r+0x1e>
    acb8:	42b1      	cmp	r1, r6
    acba:	d8ec      	bhi.n	ac96 <_malloc_r+0x1e>
    acbc:	1c38      	adds	r0, r7, #0
    acbe:	f000 fb3f 	bl	b340 <__malloc_lock>
    acc2:	4bbb      	ldr	r3, [pc, #748]	; (afb0 <_malloc_r+0x338>)
    acc4:	429e      	cmp	r6, r3
    acc6:	d93a      	bls.n	ad3e <_malloc_r+0xc6>
    acc8:	0a72      	lsrs	r2, r6, #9
    acca:	2a00      	cmp	r2, #0
    accc:	d153      	bne.n	ad76 <_malloc_r+0xfe>
    acce:	08f5      	lsrs	r5, r6, #3
    acd0:	00eb      	lsls	r3, r5, #3
    acd2:	4ab8      	ldr	r2, [pc, #736]	; (afb4 <_malloc_r+0x33c>)
    acd4:	1898      	adds	r0, r3, r2
    acd6:	68c4      	ldr	r4, [r0, #12]
    acd8:	4694      	mov	ip, r2
    acda:	4690      	mov	r8, r2
    acdc:	42a0      	cmp	r0, r4
    acde:	d105      	bne.n	acec <_malloc_r+0x74>
    ace0:	e00c      	b.n	acfc <_malloc_r+0x84>
    ace2:	2b00      	cmp	r3, #0
    ace4:	da38      	bge.n	ad58 <_malloc_r+0xe0>
    ace6:	68e4      	ldr	r4, [r4, #12]
    ace8:	42a0      	cmp	r0, r4
    acea:	d007      	beq.n	acfc <_malloc_r+0x84>
    acec:	6862      	ldr	r2, [r4, #4]
    acee:	2303      	movs	r3, #3
    acf0:	1c11      	adds	r1, r2, #0
    acf2:	4399      	bics	r1, r3
    acf4:	1b8b      	subs	r3, r1, r6
    acf6:	2b0f      	cmp	r3, #15
    acf8:	ddf3      	ble.n	ace2 <_malloc_r+0x6a>
    acfa:	3d01      	subs	r5, #1
    acfc:	3501      	adds	r5, #1
    acfe:	46aa      	mov	sl, r5
    ad00:	2308      	movs	r3, #8
    ad02:	4463      	add	r3, ip
    ad04:	689c      	ldr	r4, [r3, #8]
    ad06:	4699      	mov	r9, r3
    ad08:	454c      	cmp	r4, r9
    ad0a:	d100      	bne.n	ad0e <_malloc_r+0x96>
    ad0c:	e0d7      	b.n	aebe <_malloc_r+0x246>
    ad0e:	6862      	ldr	r2, [r4, #4]
    ad10:	2303      	movs	r3, #3
    ad12:	1c15      	adds	r5, r2, #0
    ad14:	439d      	bics	r5, r3
    ad16:	1ba8      	subs	r0, r5, r6
    ad18:	280f      	cmp	r0, #15
    ad1a:	dd00      	ble.n	ad1e <_malloc_r+0xa6>
    ad1c:	e0a6      	b.n	ae6c <_malloc_r+0x1f4>
    ad1e:	4649      	mov	r1, r9
    ad20:	60c9      	str	r1, [r1, #12]
    ad22:	6089      	str	r1, [r1, #8]
    ad24:	2800      	cmp	r0, #0
    ad26:	db34      	blt.n	ad92 <_malloc_r+0x11a>
    ad28:	1963      	adds	r3, r4, r5
    ad2a:	685a      	ldr	r2, [r3, #4]
    ad2c:	2101      	movs	r1, #1
    ad2e:	430a      	orrs	r2, r1
    ad30:	1c38      	adds	r0, r7, #0
    ad32:	605a      	str	r2, [r3, #4]
    ad34:	f000 fb06 	bl	b344 <__malloc_unlock>
    ad38:	1c20      	adds	r0, r4, #0
    ad3a:	3008      	adds	r0, #8
    ad3c:	e7ae      	b.n	ac9c <_malloc_r+0x24>
    ad3e:	499d      	ldr	r1, [pc, #628]	; (afb4 <_malloc_r+0x33c>)
    ad40:	08f2      	lsrs	r2, r6, #3
    ad42:	468c      	mov	ip, r1
    ad44:	00d3      	lsls	r3, r2, #3
    ad46:	4463      	add	r3, ip
    ad48:	68dc      	ldr	r4, [r3, #12]
    ad4a:	4688      	mov	r8, r1
    ad4c:	42a3      	cmp	r3, r4
    ad4e:	d100      	bne.n	ad52 <_malloc_r+0xda>
    ad50:	e083      	b.n	ae5a <_malloc_r+0x1e2>
    ad52:	6861      	ldr	r1, [r4, #4]
    ad54:	2303      	movs	r3, #3
    ad56:	4399      	bics	r1, r3
    ad58:	68e2      	ldr	r2, [r4, #12]
    ad5a:	68a3      	ldr	r3, [r4, #8]
    ad5c:	1861      	adds	r1, r4, r1
    ad5e:	60da      	str	r2, [r3, #12]
    ad60:	6093      	str	r3, [r2, #8]
    ad62:	684b      	ldr	r3, [r1, #4]
    ad64:	2201      	movs	r2, #1
    ad66:	4313      	orrs	r3, r2
    ad68:	1c38      	adds	r0, r7, #0
    ad6a:	604b      	str	r3, [r1, #4]
    ad6c:	f000 faea 	bl	b344 <__malloc_unlock>
    ad70:	1c20      	adds	r0, r4, #0
    ad72:	3008      	adds	r0, #8
    ad74:	e792      	b.n	ac9c <_malloc_r+0x24>
    ad76:	2a04      	cmp	r2, #4
    ad78:	d906      	bls.n	ad88 <_malloc_r+0x110>
    ad7a:	2a14      	cmp	r2, #20
    ad7c:	d900      	bls.n	ad80 <_malloc_r+0x108>
    ad7e:	e0a2      	b.n	aec6 <_malloc_r+0x24e>
    ad80:	1c15      	adds	r5, r2, #0
    ad82:	355b      	adds	r5, #91	; 0x5b
    ad84:	00eb      	lsls	r3, r5, #3
    ad86:	e7a4      	b.n	acd2 <_malloc_r+0x5a>
    ad88:	09b3      	lsrs	r3, r6, #6
    ad8a:	1c1d      	adds	r5, r3, #0
    ad8c:	3538      	adds	r5, #56	; 0x38
    ad8e:	00eb      	lsls	r3, r5, #3
    ad90:	e79f      	b.n	acd2 <_malloc_r+0x5a>
    ad92:	4b89      	ldr	r3, [pc, #548]	; (afb8 <_malloc_r+0x340>)
    ad94:	429d      	cmp	r5, r3
    ad96:	d900      	bls.n	ad9a <_malloc_r+0x122>
    ad98:	e0ca      	b.n	af30 <_malloc_r+0x2b8>
    ad9a:	08e9      	lsrs	r1, r5, #3
    ad9c:	1c0a      	adds	r2, r1, #0
    ad9e:	2900      	cmp	r1, #0
    ada0:	da00      	bge.n	ada4 <_malloc_r+0x12c>
    ada2:	e19a      	b.n	b0da <_malloc_r+0x462>
    ada4:	1092      	asrs	r2, r2, #2
    ada6:	2301      	movs	r3, #1
    ada8:	4093      	lsls	r3, r2
    adaa:	4a82      	ldr	r2, [pc, #520]	; (afb4 <_malloc_r+0x33c>)
    adac:	6852      	ldr	r2, [r2, #4]
    adae:	1c15      	adds	r5, r2, #0
    adb0:	431d      	orrs	r5, r3
    adb2:	4a80      	ldr	r2, [pc, #512]	; (afb4 <_malloc_r+0x33c>)
    adb4:	00cb      	lsls	r3, r1, #3
    adb6:	4463      	add	r3, ip
    adb8:	6055      	str	r5, [r2, #4]
    adba:	689a      	ldr	r2, [r3, #8]
    adbc:	60e3      	str	r3, [r4, #12]
    adbe:	60a2      	str	r2, [r4, #8]
    adc0:	60d4      	str	r4, [r2, #12]
    adc2:	609c      	str	r4, [r3, #8]
    adc4:	46a8      	mov	r8, r5
    adc6:	4652      	mov	r2, sl
    adc8:	2a00      	cmp	r2, #0
    adca:	da00      	bge.n	adce <_malloc_r+0x156>
    adcc:	e0ed      	b.n	afaa <_malloc_r+0x332>
    adce:	2301      	movs	r3, #1
    add0:	1092      	asrs	r2, r2, #2
    add2:	1c1d      	adds	r5, r3, #0
    add4:	4095      	lsls	r5, r2
    add6:	4545      	cmp	r5, r8
    add8:	d855      	bhi.n	ae86 <_malloc_r+0x20e>
    adda:	4642      	mov	r2, r8
    addc:	4215      	tst	r5, r2
    adde:	d10e      	bne.n	adfe <_malloc_r+0x186>
    ade0:	2303      	movs	r3, #3
    ade2:	4654      	mov	r4, sl
    ade4:	439c      	bics	r4, r3
    ade6:	1c23      	adds	r3, r4, #0
    ade8:	3304      	adds	r3, #4
    adea:	006d      	lsls	r5, r5, #1
    adec:	469a      	mov	sl, r3
    adee:	422a      	tst	r2, r5
    adf0:	d105      	bne.n	adfe <_malloc_r+0x186>
    adf2:	2104      	movs	r1, #4
    adf4:	006d      	lsls	r5, r5, #1
    adf6:	4642      	mov	r2, r8
    adf8:	448a      	add	sl, r1
    adfa:	422a      	tst	r2, r5
    adfc:	d0f9      	beq.n	adf2 <_malloc_r+0x17a>
    adfe:	4654      	mov	r4, sl
    ae00:	00e3      	lsls	r3, r4, #3
    ae02:	4463      	add	r3, ip
    ae04:	9301      	str	r3, [sp, #4]
    ae06:	46d3      	mov	fp, sl
    ae08:	1c19      	adds	r1, r3, #0
    ae0a:	2203      	movs	r2, #3
    ae0c:	68cc      	ldr	r4, [r1, #12]
    ae0e:	42a1      	cmp	r1, r4
    ae10:	d107      	bne.n	ae22 <_malloc_r+0x1aa>
    ae12:	e0aa      	b.n	af6a <_malloc_r+0x2f2>
    ae14:	2800      	cmp	r0, #0
    ae16:	db00      	blt.n	ae1a <_malloc_r+0x1a2>
    ae18:	e0af      	b.n	af7a <_malloc_r+0x302>
    ae1a:	68e4      	ldr	r4, [r4, #12]
    ae1c:	42a1      	cmp	r1, r4
    ae1e:	d100      	bne.n	ae22 <_malloc_r+0x1aa>
    ae20:	e0a3      	b.n	af6a <_malloc_r+0x2f2>
    ae22:	6863      	ldr	r3, [r4, #4]
    ae24:	4393      	bics	r3, r2
    ae26:	1b98      	subs	r0, r3, r6
    ae28:	280f      	cmp	r0, #15
    ae2a:	ddf3      	ble.n	ae14 <_malloc_r+0x19c>
    ae2c:	2301      	movs	r3, #1
    ae2e:	4333      	orrs	r3, r6
    ae30:	68e1      	ldr	r1, [r4, #12]
    ae32:	6063      	str	r3, [r4, #4]
    ae34:	68a3      	ldr	r3, [r4, #8]
    ae36:	19a2      	adds	r2, r4, r6
    ae38:	464d      	mov	r5, r9
    ae3a:	60d9      	str	r1, [r3, #12]
    ae3c:	608b      	str	r3, [r1, #8]
    ae3e:	60ea      	str	r2, [r5, #12]
    ae40:	60aa      	str	r2, [r5, #8]
    ae42:	2301      	movs	r3, #1
    ae44:	60d5      	str	r5, [r2, #12]
    ae46:	6095      	str	r5, [r2, #8]
    ae48:	4303      	orrs	r3, r0
    ae4a:	5010      	str	r0, [r2, r0]
    ae4c:	6053      	str	r3, [r2, #4]
    ae4e:	1c38      	adds	r0, r7, #0
    ae50:	f000 fa78 	bl	b344 <__malloc_unlock>
    ae54:	1c20      	adds	r0, r4, #0
    ae56:	3008      	adds	r0, #8
    ae58:	e720      	b.n	ac9c <_malloc_r+0x24>
    ae5a:	1c23      	adds	r3, r4, #0
    ae5c:	3308      	adds	r3, #8
    ae5e:	68dc      	ldr	r4, [r3, #12]
    ae60:	42a3      	cmp	r3, r4
    ae62:	d000      	beq.n	ae66 <_malloc_r+0x1ee>
    ae64:	e775      	b.n	ad52 <_malloc_r+0xda>
    ae66:	3202      	adds	r2, #2
    ae68:	4692      	mov	sl, r2
    ae6a:	e749      	b.n	ad00 <_malloc_r+0x88>
    ae6c:	2101      	movs	r1, #1
    ae6e:	1c33      	adds	r3, r6, #0
    ae70:	430b      	orrs	r3, r1
    ae72:	6063      	str	r3, [r4, #4]
    ae74:	1c03      	adds	r3, r0, #0
    ae76:	19a2      	adds	r2, r4, r6
    ae78:	464d      	mov	r5, r9
    ae7a:	430b      	orrs	r3, r1
    ae7c:	60ea      	str	r2, [r5, #12]
    ae7e:	60aa      	str	r2, [r5, #8]
    ae80:	60d5      	str	r5, [r2, #12]
    ae82:	6095      	str	r5, [r2, #8]
    ae84:	e7e1      	b.n	ae4a <_malloc_r+0x1d2>
    ae86:	4a4b      	ldr	r2, [pc, #300]	; (afb4 <_malloc_r+0x33c>)
    ae88:	6894      	ldr	r4, [r2, #8]
    ae8a:	6862      	ldr	r2, [r4, #4]
    ae8c:	2303      	movs	r3, #3
    ae8e:	439a      	bics	r2, r3
    ae90:	4691      	mov	r9, r2
    ae92:	9400      	str	r4, [sp, #0]
    ae94:	45b1      	cmp	r9, r6
    ae96:	d31d      	bcc.n	aed4 <_malloc_r+0x25c>
    ae98:	1b90      	subs	r0, r2, r6
    ae9a:	280f      	cmp	r0, #15
    ae9c:	dd1a      	ble.n	aed4 <_malloc_r+0x25c>
    ae9e:	2101      	movs	r1, #1
    aea0:	1c33      	adds	r3, r6, #0
    aea2:	430b      	orrs	r3, r1
    aea4:	6063      	str	r3, [r4, #4]
    aea6:	4b43      	ldr	r3, [pc, #268]	; (afb4 <_malloc_r+0x33c>)
    aea8:	19a2      	adds	r2, r4, r6
    aeaa:	609a      	str	r2, [r3, #8]
    aeac:	1c03      	adds	r3, r0, #0
    aeae:	430b      	orrs	r3, r1
    aeb0:	1c38      	adds	r0, r7, #0
    aeb2:	6053      	str	r3, [r2, #4]
    aeb4:	f000 fa46 	bl	b344 <__malloc_unlock>
    aeb8:	1c20      	adds	r0, r4, #0
    aeba:	3008      	adds	r0, #8
    aebc:	e6ee      	b.n	ac9c <_malloc_r+0x24>
    aebe:	4c3d      	ldr	r4, [pc, #244]	; (afb4 <_malloc_r+0x33c>)
    aec0:	6864      	ldr	r4, [r4, #4]
    aec2:	46a0      	mov	r8, r4
    aec4:	e77f      	b.n	adc6 <_malloc_r+0x14e>
    aec6:	2a54      	cmp	r2, #84	; 0x54
    aec8:	d866      	bhi.n	af98 <_malloc_r+0x320>
    aeca:	0b33      	lsrs	r3, r6, #12
    aecc:	1c1d      	adds	r5, r3, #0
    aece:	356e      	adds	r5, #110	; 0x6e
    aed0:	00eb      	lsls	r3, r5, #3
    aed2:	e6fe      	b.n	acd2 <_malloc_r+0x5a>
    aed4:	4b39      	ldr	r3, [pc, #228]	; (afbc <_malloc_r+0x344>)
    aed6:	681b      	ldr	r3, [r3, #0]
    aed8:	3310      	adds	r3, #16
    aeda:	18f5      	adds	r5, r6, r3
    aedc:	4b38      	ldr	r3, [pc, #224]	; (afc0 <_malloc_r+0x348>)
    aede:	469a      	mov	sl, r3
    aee0:	681b      	ldr	r3, [r3, #0]
    aee2:	3301      	adds	r3, #1
    aee4:	d004      	beq.n	aef0 <_malloc_r+0x278>
    aee6:	4937      	ldr	r1, [pc, #220]	; (afc4 <_malloc_r+0x34c>)
    aee8:	4b37      	ldr	r3, [pc, #220]	; (afc8 <_malloc_r+0x350>)
    aeea:	186a      	adds	r2, r5, r1
    aeec:	1c15      	adds	r5, r2, #0
    aeee:	401d      	ands	r5, r3
    aef0:	1c38      	adds	r0, r7, #0
    aef2:	1c29      	adds	r1, r5, #0
    aef4:	f007 fd28 	bl	12948 <___sbrk_r_from_thumb>
    aef8:	1c42      	adds	r2, r0, #1
    aefa:	d100      	bne.n	aefe <_malloc_r+0x286>
    aefc:	e0cb      	b.n	b096 <_malloc_r+0x41e>
    aefe:	464b      	mov	r3, r9
    af00:	18e2      	adds	r2, r4, r3
    af02:	4680      	mov	r8, r0
    af04:	4542      	cmp	r2, r8
    af06:	d961      	bls.n	afcc <_malloc_r+0x354>
    af08:	492a      	ldr	r1, [pc, #168]	; (afb4 <_malloc_r+0x33c>)
    af0a:	428c      	cmp	r4, r1
    af0c:	d100      	bne.n	af10 <_malloc_r+0x298>
    af0e:	e121      	b.n	b154 <_malloc_r+0x4dc>
    af10:	4928      	ldr	r1, [pc, #160]	; (afb4 <_malloc_r+0x33c>)
    af12:	688c      	ldr	r4, [r1, #8]
    af14:	6862      	ldr	r2, [r4, #4]
    af16:	2303      	movs	r3, #3
    af18:	439a      	bics	r2, r3
    af1a:	1c13      	adds	r3, r2, #0
    af1c:	429e      	cmp	r6, r3
    af1e:	d802      	bhi.n	af26 <_malloc_r+0x2ae>
    af20:	1b90      	subs	r0, r2, r6
    af22:	280f      	cmp	r0, #15
    af24:	dcbb      	bgt.n	ae9e <_malloc_r+0x226>
    af26:	1c38      	adds	r0, r7, #0
    af28:	f000 fa0c 	bl	b344 <__malloc_unlock>
    af2c:	2000      	movs	r0, #0
    af2e:	e6b5      	b.n	ac9c <_malloc_r+0x24>
    af30:	0a6a      	lsrs	r2, r5, #9
    af32:	2a00      	cmp	r2, #0
    af34:	d000      	beq.n	af38 <_malloc_r+0x2c0>
    af36:	e084      	b.n	b042 <_malloc_r+0x3ca>
    af38:	08eb      	lsrs	r3, r5, #3
    af3a:	00da      	lsls	r2, r3, #3
    af3c:	4661      	mov	r1, ip
    af3e:	1850      	adds	r0, r2, r1
    af40:	6881      	ldr	r1, [r0, #8]
    af42:	4288      	cmp	r0, r1
    af44:	d100      	bne.n	af48 <_malloc_r+0x2d0>
    af46:	e0cf      	b.n	b0e8 <_malloc_r+0x470>
    af48:	684b      	ldr	r3, [r1, #4]
    af4a:	2203      	movs	r2, #3
    af4c:	4393      	bics	r3, r2
    af4e:	429d      	cmp	r5, r3
    af50:	d202      	bcs.n	af58 <_malloc_r+0x2e0>
    af52:	6889      	ldr	r1, [r1, #8]
    af54:	4288      	cmp	r0, r1
    af56:	d1f7      	bne.n	af48 <_malloc_r+0x2d0>
    af58:	68c8      	ldr	r0, [r1, #12]
    af5a:	60a1      	str	r1, [r4, #8]
    af5c:	60e0      	str	r0, [r4, #12]
    af5e:	60cc      	str	r4, [r1, #12]
    af60:	4914      	ldr	r1, [pc, #80]	; (afb4 <_malloc_r+0x33c>)
    af62:	6849      	ldr	r1, [r1, #4]
    af64:	4688      	mov	r8, r1
    af66:	6084      	str	r4, [r0, #8]
    af68:	e72d      	b.n	adc6 <_malloc_r+0x14e>
    af6a:	2301      	movs	r3, #1
    af6c:	449b      	add	fp, r3
    af6e:	465c      	mov	r4, fp
    af70:	4214      	tst	r4, r2
    af72:	d100      	bne.n	af76 <_malloc_r+0x2fe>
    af74:	e0cd      	b.n	b112 <_malloc_r+0x49a>
    af76:	3108      	adds	r1, #8
    af78:	e748      	b.n	ae0c <_malloc_r+0x194>
    af7a:	18e2      	adds	r2, r4, r3
    af7c:	6853      	ldr	r3, [r2, #4]
    af7e:	2101      	movs	r1, #1
    af80:	430b      	orrs	r3, r1
    af82:	6053      	str	r3, [r2, #4]
    af84:	68e2      	ldr	r2, [r4, #12]
    af86:	68a3      	ldr	r3, [r4, #8]
    af88:	1c38      	adds	r0, r7, #0
    af8a:	60da      	str	r2, [r3, #12]
    af8c:	6093      	str	r3, [r2, #8]
    af8e:	f000 f9d9 	bl	b344 <__malloc_unlock>
    af92:	1c20      	adds	r0, r4, #0
    af94:	3008      	adds	r0, #8
    af96:	e681      	b.n	ac9c <_malloc_r+0x24>
    af98:	23aa      	movs	r3, #170	; 0xaa
    af9a:	005b      	lsls	r3, r3, #1
    af9c:	429a      	cmp	r2, r3
    af9e:	d86e      	bhi.n	b07e <_malloc_r+0x406>
    afa0:	0bf3      	lsrs	r3, r6, #15
    afa2:	1c1d      	adds	r5, r3, #0
    afa4:	3577      	adds	r5, #119	; 0x77
    afa6:	00eb      	lsls	r3, r5, #3
    afa8:	e693      	b.n	acd2 <_malloc_r+0x5a>
    afaa:	3203      	adds	r2, #3
    afac:	e70f      	b.n	adce <_malloc_r+0x156>
    afae:	46c0      	nop			; (mov r8, r8)
    afb0:	000001f7 	.word	0x000001f7
    afb4:	40000428 	.word	0x40000428
    afb8:	000001ff 	.word	0x000001ff
    afbc:	40000e64 	.word	0x40000e64
    afc0:	40000834 	.word	0x40000834
    afc4:	00000fff 	.word	0x00000fff
    afc8:	fffff000 	.word	0xfffff000
    afcc:	4b72      	ldr	r3, [pc, #456]	; (b198 <_malloc_r+0x520>)
    afce:	469b      	mov	fp, r3
    afd0:	681b      	ldr	r3, [r3, #0]
    afd2:	465c      	mov	r4, fp
    afd4:	18e9      	adds	r1, r5, r3
    afd6:	6021      	str	r1, [r4, #0]
    afd8:	4542      	cmp	r2, r8
    afda:	d038      	beq.n	b04e <_malloc_r+0x3d6>
    afdc:	4654      	mov	r4, sl
    afde:	6823      	ldr	r3, [r4, #0]
    afe0:	3301      	adds	r3, #1
    afe2:	d100      	bne.n	afe6 <_malloc_r+0x36e>
    afe4:	e08a      	b.n	b0fc <_malloc_r+0x484>
    afe6:	1a83      	subs	r3, r0, r2
    afe8:	18cb      	adds	r3, r1, r3
    afea:	4659      	mov	r1, fp
    afec:	600b      	str	r3, [r1, #0]
    afee:	2307      	movs	r3, #7
    aff0:	1c02      	adds	r2, r0, #0
    aff2:	401a      	ands	r2, r3
    aff4:	d14a      	bne.n	b08c <_malloc_r+0x414>
    aff6:	2100      	movs	r1, #0
    aff8:	4643      	mov	r3, r8
    affa:	195a      	adds	r2, r3, r5
    affc:	4b67      	ldr	r3, [pc, #412]	; (b19c <_malloc_r+0x524>)
    affe:	401a      	ands	r2, r3
    b000:	2380      	movs	r3, #128	; 0x80
    b002:	015b      	lsls	r3, r3, #5
    b004:	1a9b      	subs	r3, r3, r2
    b006:	18cc      	adds	r4, r1, r3
    b008:	1c38      	adds	r0, r7, #0
    b00a:	1c21      	adds	r1, r4, #0
    b00c:	f007 fc9c 	bl	12948 <___sbrk_r_from_thumb>
    b010:	1c45      	adds	r5, r0, #1
    b012:	d075      	beq.n	b100 <_malloc_r+0x488>
    b014:	4641      	mov	r1, r8
    b016:	1a43      	subs	r3, r0, r1
    b018:	18e3      	adds	r3, r4, r3
    b01a:	2201      	movs	r2, #1
    b01c:	1c18      	adds	r0, r3, #0
    b01e:	4310      	orrs	r0, r2
    b020:	465a      	mov	r2, fp
    b022:	6813      	ldr	r3, [r2, #0]
    b024:	18e3      	adds	r3, r4, r3
    b026:	6013      	str	r3, [r2, #0]
    b028:	9d00      	ldr	r5, [sp, #0]
    b02a:	4b5d      	ldr	r3, [pc, #372]	; (b1a0 <_malloc_r+0x528>)
    b02c:	4644      	mov	r4, r8
    b02e:	609c      	str	r4, [r3, #8]
    b030:	6060      	str	r0, [r4, #4]
    b032:	429d      	cmp	r5, r3
    b034:	d015      	beq.n	b062 <_malloc_r+0x3ea>
    b036:	4649      	mov	r1, r9
    b038:	290f      	cmp	r1, #15
    b03a:	d82f      	bhi.n	b09c <_malloc_r+0x424>
    b03c:	2301      	movs	r3, #1
    b03e:	6063      	str	r3, [r4, #4]
    b040:	e768      	b.n	af14 <_malloc_r+0x29c>
    b042:	2a04      	cmp	r2, #4
    b044:	d843      	bhi.n	b0ce <_malloc_r+0x456>
    b046:	09ab      	lsrs	r3, r5, #6
    b048:	3338      	adds	r3, #56	; 0x38
    b04a:	00da      	lsls	r2, r3, #3
    b04c:	e776      	b.n	af3c <_malloc_r+0x2c4>
    b04e:	4b53      	ldr	r3, [pc, #332]	; (b19c <_malloc_r+0x524>)
    b050:	4218      	tst	r0, r3
    b052:	d1c3      	bne.n	afdc <_malloc_r+0x364>
    b054:	4952      	ldr	r1, [pc, #328]	; (b1a0 <_malloc_r+0x528>)
    b056:	464a      	mov	r2, r9
    b058:	18ab      	adds	r3, r5, r2
    b05a:	688c      	ldr	r4, [r1, #8]
    b05c:	2201      	movs	r2, #1
    b05e:	4313      	orrs	r3, r2
    b060:	6063      	str	r3, [r4, #4]
    b062:	4950      	ldr	r1, [pc, #320]	; (b1a4 <_malloc_r+0x52c>)
    b064:	465b      	mov	r3, fp
    b066:	681a      	ldr	r2, [r3, #0]
    b068:	680b      	ldr	r3, [r1, #0]
    b06a:	429a      	cmp	r2, r3
    b06c:	d900      	bls.n	b070 <_malloc_r+0x3f8>
    b06e:	600a      	str	r2, [r1, #0]
    b070:	494d      	ldr	r1, [pc, #308]	; (b1a8 <_malloc_r+0x530>)
    b072:	680b      	ldr	r3, [r1, #0]
    b074:	429a      	cmp	r2, r3
    b076:	d800      	bhi.n	b07a <_malloc_r+0x402>
    b078:	e74c      	b.n	af14 <_malloc_r+0x29c>
    b07a:	600a      	str	r2, [r1, #0]
    b07c:	e74a      	b.n	af14 <_malloc_r+0x29c>
    b07e:	4b4b      	ldr	r3, [pc, #300]	; (b1ac <_malloc_r+0x534>)
    b080:	429a      	cmp	r2, r3
    b082:	d92c      	bls.n	b0de <_malloc_r+0x466>
    b084:	23fc      	movs	r3, #252	; 0xfc
    b086:	257e      	movs	r5, #126	; 0x7e
    b088:	009b      	lsls	r3, r3, #2
    b08a:	e622      	b.n	acd2 <_malloc_r+0x5a>
    b08c:	2308      	movs	r3, #8
    b08e:	1a99      	subs	r1, r3, r2
    b090:	1840      	adds	r0, r0, r1
    b092:	4680      	mov	r8, r0
    b094:	e7b0      	b.n	aff8 <_malloc_r+0x380>
    b096:	4d42      	ldr	r5, [pc, #264]	; (b1a0 <_malloc_r+0x528>)
    b098:	68ac      	ldr	r4, [r5, #8]
    b09a:	e73b      	b.n	af14 <_malloc_r+0x29c>
    b09c:	9a00      	ldr	r2, [sp, #0]
    b09e:	4649      	mov	r1, r9
    b0a0:	2307      	movs	r3, #7
    b0a2:	390c      	subs	r1, #12
    b0a4:	4399      	bics	r1, r3
    b0a6:	6853      	ldr	r3, [r2, #4]
    b0a8:	2201      	movs	r2, #1
    b0aa:	4013      	ands	r3, r2
    b0ac:	9d00      	ldr	r5, [sp, #0]
    b0ae:	430b      	orrs	r3, r1
    b0b0:	606b      	str	r3, [r5, #4]
    b0b2:	186a      	adds	r2, r5, r1
    b0b4:	2305      	movs	r3, #5
    b0b6:	6053      	str	r3, [r2, #4]
    b0b8:	6093      	str	r3, [r2, #8]
    b0ba:	290f      	cmp	r1, #15
    b0bc:	d9d1      	bls.n	b062 <_malloc_r+0x3ea>
    b0be:	1c29      	adds	r1, r5, #0
    b0c0:	3108      	adds	r1, #8
    b0c2:	1c38      	adds	r0, r7, #0
    b0c4:	f7ff fa88 	bl	a5d8 <_free_r>
    b0c8:	4935      	ldr	r1, [pc, #212]	; (b1a0 <_malloc_r+0x528>)
    b0ca:	688c      	ldr	r4, [r1, #8]
    b0cc:	e7c9      	b.n	b062 <_malloc_r+0x3ea>
    b0ce:	2a14      	cmp	r2, #20
    b0d0:	d819      	bhi.n	b106 <_malloc_r+0x48e>
    b0d2:	1c13      	adds	r3, r2, #0
    b0d4:	335b      	adds	r3, #91	; 0x5b
    b0d6:	00da      	lsls	r2, r3, #3
    b0d8:	e730      	b.n	af3c <_malloc_r+0x2c4>
    b0da:	1cca      	adds	r2, r1, #3
    b0dc:	e662      	b.n	ada4 <_malloc_r+0x12c>
    b0de:	0cb3      	lsrs	r3, r6, #18
    b0e0:	1c1d      	adds	r5, r3, #0
    b0e2:	357c      	adds	r5, #124	; 0x7c
    b0e4:	00eb      	lsls	r3, r5, #3
    b0e6:	e5f4      	b.n	acd2 <_malloc_r+0x5a>
    b0e8:	2b00      	cmp	r3, #0
    b0ea:	db47      	blt.n	b17c <_malloc_r+0x504>
    b0ec:	109b      	asrs	r3, r3, #2
    b0ee:	4645      	mov	r5, r8
    b0f0:	2201      	movs	r2, #1
    b0f2:	409a      	lsls	r2, r3
    b0f4:	686b      	ldr	r3, [r5, #4]
    b0f6:	4313      	orrs	r3, r2
    b0f8:	606b      	str	r3, [r5, #4]
    b0fa:	e72e      	b.n	af5a <_malloc_r+0x2e2>
    b0fc:	6020      	str	r0, [r4, #0]
    b0fe:	e776      	b.n	afee <_malloc_r+0x376>
    b100:	2400      	movs	r4, #0
    b102:	2001      	movs	r0, #1
    b104:	e78c      	b.n	b020 <_malloc_r+0x3a8>
    b106:	2a54      	cmp	r2, #84	; 0x54
    b108:	d82a      	bhi.n	b160 <_malloc_r+0x4e8>
    b10a:	0b2b      	lsrs	r3, r5, #12
    b10c:	336e      	adds	r3, #110	; 0x6e
    b10e:	00da      	lsls	r2, r3, #3
    b110:	e714      	b.n	af3c <_malloc_r+0x2c4>
    b112:	9901      	ldr	r1, [sp, #4]
    b114:	4650      	mov	r0, sl
    b116:	2403      	movs	r4, #3
    b118:	e000      	b.n	b11c <_malloc_r+0x4a4>
    b11a:	3801      	subs	r0, #1
    b11c:	4220      	tst	r0, r4
    b11e:	d027      	beq.n	b170 <_malloc_r+0x4f8>
    b120:	1c0b      	adds	r3, r1, #0
    b122:	680a      	ldr	r2, [r1, #0]
    b124:	3b08      	subs	r3, #8
    b126:	1c19      	adds	r1, r3, #0
    b128:	429a      	cmp	r2, r3
    b12a:	d0f6      	beq.n	b11a <_malloc_r+0x4a2>
    b12c:	006d      	lsls	r5, r5, #1
    b12e:	4545      	cmp	r5, r8
    b130:	d900      	bls.n	b134 <_malloc_r+0x4bc>
    b132:	e6a8      	b.n	ae86 <_malloc_r+0x20e>
    b134:	2d00      	cmp	r5, #0
    b136:	d100      	bne.n	b13a <_malloc_r+0x4c2>
    b138:	e6a5      	b.n	ae86 <_malloc_r+0x20e>
    b13a:	4641      	mov	r1, r8
    b13c:	420d      	tst	r5, r1
    b13e:	d001      	beq.n	b144 <_malloc_r+0x4cc>
    b140:	46da      	mov	sl, fp
    b142:	e65c      	b.n	adfe <_malloc_r+0x186>
    b144:	2204      	movs	r2, #4
    b146:	006d      	lsls	r5, r5, #1
    b148:	4643      	mov	r3, r8
    b14a:	4493      	add	fp, r2
    b14c:	422b      	tst	r3, r5
    b14e:	d0f9      	beq.n	b144 <_malloc_r+0x4cc>
    b150:	46da      	mov	sl, fp
    b152:	e654      	b.n	adfe <_malloc_r+0x186>
    b154:	4c10      	ldr	r4, [pc, #64]	; (b198 <_malloc_r+0x520>)
    b156:	6823      	ldr	r3, [r4, #0]
    b158:	46a3      	mov	fp, r4
    b15a:	18e9      	adds	r1, r5, r3
    b15c:	6021      	str	r1, [r4, #0]
    b15e:	e73d      	b.n	afdc <_malloc_r+0x364>
    b160:	23aa      	movs	r3, #170	; 0xaa
    b162:	005b      	lsls	r3, r3, #1
    b164:	429a      	cmp	r2, r3
    b166:	d80b      	bhi.n	b180 <_malloc_r+0x508>
    b168:	0beb      	lsrs	r3, r5, #15
    b16a:	3377      	adds	r3, #119	; 0x77
    b16c:	00da      	lsls	r2, r3, #3
    b16e:	e6e5      	b.n	af3c <_malloc_r+0x2c4>
    b170:	4644      	mov	r4, r8
    b172:	43ac      	bics	r4, r5
    b174:	490a      	ldr	r1, [pc, #40]	; (b1a0 <_malloc_r+0x528>)
    b176:	46a0      	mov	r8, r4
    b178:	604c      	str	r4, [r1, #4]
    b17a:	e7d7      	b.n	b12c <_malloc_r+0x4b4>
    b17c:	3303      	adds	r3, #3
    b17e:	e7b5      	b.n	b0ec <_malloc_r+0x474>
    b180:	4b0a      	ldr	r3, [pc, #40]	; (b1ac <_malloc_r+0x534>)
    b182:	429a      	cmp	r2, r3
    b184:	d903      	bls.n	b18e <_malloc_r+0x516>
    b186:	22fc      	movs	r2, #252	; 0xfc
    b188:	237e      	movs	r3, #126	; 0x7e
    b18a:	0092      	lsls	r2, r2, #2
    b18c:	e6d6      	b.n	af3c <_malloc_r+0x2c4>
    b18e:	0cab      	lsrs	r3, r5, #18
    b190:	337c      	adds	r3, #124	; 0x7c
    b192:	00da      	lsls	r2, r3, #3
    b194:	e6d2      	b.n	af3c <_malloc_r+0x2c4>
    b196:	46c0      	nop			; (mov r8, r8)
    b198:	40000e70 	.word	0x40000e70
    b19c:	00000fff 	.word	0x00000fff
    b1a0:	40000428 	.word	0x40000428
    b1a4:	40000e68 	.word	0x40000e68
    b1a8:	40000e6c 	.word	0x40000e6c
    b1ac:	00000554 	.word	0x00000554

0000b1b0 <memchr>:
    b1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1b2:	4657      	mov	r7, sl
    b1b4:	464e      	mov	r6, r9
    b1b6:	4645      	mov	r5, r8
    b1b8:	b4e0      	push	{r5, r6, r7}
    b1ba:	23ff      	movs	r3, #255	; 0xff
    b1bc:	1c04      	adds	r4, r0, #0
    b1be:	1c17      	adds	r7, r2, #0
    b1c0:	4019      	ands	r1, r3
    b1c2:	2a03      	cmp	r2, #3
    b1c4:	d902      	bls.n	b1cc <memchr+0x1c>
    b1c6:	2303      	movs	r3, #3
    b1c8:	4218      	tst	r0, r3
    b1ca:	d00f      	beq.n	b1ec <memchr+0x3c>
    b1cc:	1e7a      	subs	r2, r7, #1
    b1ce:	d203      	bcs.n	b1d8 <memchr+0x28>
    b1d0:	e03f      	b.n	b252 <memchr+0xa2>
    b1d2:	3a01      	subs	r2, #1
    b1d4:	d33d      	bcc.n	b252 <memchr+0xa2>
    b1d6:	3001      	adds	r0, #1
    b1d8:	7803      	ldrb	r3, [r0, #0]
    b1da:	4299      	cmp	r1, r3
    b1dc:	d1f9      	bne.n	b1d2 <memchr+0x22>
    b1de:	bc1c      	pop	{r2, r3, r4}
    b1e0:	4690      	mov	r8, r2
    b1e2:	4699      	mov	r9, r3
    b1e4:	46a2      	mov	sl, r4
    b1e6:	bcf0      	pop	{r4, r5, r6, r7}
    b1e8:	bc02      	pop	{r1}
    b1ea:	4708      	bx	r1
    b1ec:	2200      	movs	r2, #0
    b1ee:	4690      	mov	r8, r2
    b1f0:	4640      	mov	r0, r8
    b1f2:	0203      	lsls	r3, r0, #8
    b1f4:	185b      	adds	r3, r3, r1
    b1f6:	3201      	adds	r2, #1
    b1f8:	4698      	mov	r8, r3
    b1fa:	2a04      	cmp	r2, #4
    b1fc:	d1f8      	bne.n	b1f0 <memchr+0x40>
    b1fe:	4b17      	ldr	r3, [pc, #92]	; (b25c <memchr+0xac>)
    b200:	1ce2      	adds	r2, r4, #3
    b202:	1c20      	adds	r0, r4, #0
    b204:	1ca5      	adds	r5, r4, #2
    b206:	4691      	mov	r9, r2
    b208:	3401      	adds	r4, #1
    b20a:	469a      	mov	sl, r3
    b20c:	6802      	ldr	r2, [r0, #0]
    b20e:	4646      	mov	r6, r8
    b210:	4b13      	ldr	r3, [pc, #76]	; (b260 <memchr+0xb0>)
    b212:	4072      	eors	r2, r6
    b214:	189b      	adds	r3, r3, r2
    b216:	4656      	mov	r6, sl
    b218:	4033      	ands	r3, r6
    b21a:	4393      	bics	r3, r2
    b21c:	d010      	beq.n	b240 <memchr+0x90>
    b21e:	7803      	ldrb	r3, [r0, #0]
    b220:	4684      	mov	ip, r0
    b222:	4299      	cmp	r1, r3
    b224:	d017      	beq.n	b256 <memchr+0xa6>
    b226:	7823      	ldrb	r3, [r4, #0]
    b228:	46a4      	mov	ip, r4
    b22a:	4299      	cmp	r1, r3
    b22c:	d013      	beq.n	b256 <memchr+0xa6>
    b22e:	782b      	ldrb	r3, [r5, #0]
    b230:	46ac      	mov	ip, r5
    b232:	4299      	cmp	r1, r3
    b234:	d00f      	beq.n	b256 <memchr+0xa6>
    b236:	464a      	mov	r2, r9
    b238:	7813      	ldrb	r3, [r2, #0]
    b23a:	46cc      	mov	ip, r9
    b23c:	4299      	cmp	r1, r3
    b23e:	d00a      	beq.n	b256 <memchr+0xa6>
    b240:	2304      	movs	r3, #4
    b242:	3f04      	subs	r7, #4
    b244:	3004      	adds	r0, #4
    b246:	4499      	add	r9, r3
    b248:	3504      	adds	r5, #4
    b24a:	3404      	adds	r4, #4
    b24c:	2f03      	cmp	r7, #3
    b24e:	d8dd      	bhi.n	b20c <memchr+0x5c>
    b250:	e7bc      	b.n	b1cc <memchr+0x1c>
    b252:	2000      	movs	r0, #0
    b254:	e7c3      	b.n	b1de <memchr+0x2e>
    b256:	4660      	mov	r0, ip
    b258:	e7c1      	b.n	b1de <memchr+0x2e>
    b25a:	46c0      	nop			; (mov r8, r8)
    b25c:	80808080 	.word	0x80808080
    b260:	fefefeff 	.word	0xfefefeff

0000b264 <memmove>:
    b264:	b5f0      	push	{r4, r5, r6, r7, lr}
    b266:	1c07      	adds	r7, r0, #0
    b268:	1c0e      	adds	r6, r1, #0
    b26a:	1c15      	adds	r5, r2, #0
    b26c:	428f      	cmp	r7, r1
    b26e:	d90f      	bls.n	b290 <memmove+0x2c>
    b270:	188c      	adds	r4, r1, r2
    b272:	42a7      	cmp	r7, r4
    b274:	d20c      	bcs.n	b290 <memmove+0x2c>
    b276:	1e51      	subs	r1, r2, #1
    b278:	d306      	bcc.n	b288 <memmove+0x24>
    b27a:	18ba      	adds	r2, r7, r2
    b27c:	3c01      	subs	r4, #1
    b27e:	7823      	ldrb	r3, [r4, #0]
    b280:	3a01      	subs	r2, #1
    b282:	7013      	strb	r3, [r2, #0]
    b284:	3901      	subs	r1, #1
    b286:	d2f9      	bcs.n	b27c <memmove+0x18>
    b288:	1c38      	adds	r0, r7, #0
    b28a:	bcf0      	pop	{r4, r5, r6, r7}
    b28c:	bc02      	pop	{r1}
    b28e:	4708      	bx	r1
    b290:	2d0f      	cmp	r5, #15
    b292:	d808      	bhi.n	b2a6 <memmove+0x42>
    b294:	1e6a      	subs	r2, r5, #1
    b296:	d3f7      	bcc.n	b288 <memmove+0x24>
    b298:	780b      	ldrb	r3, [r1, #0]
    b29a:	3101      	adds	r1, #1
    b29c:	7003      	strb	r3, [r0, #0]
    b29e:	3001      	adds	r0, #1
    b2a0:	3a01      	subs	r2, #1
    b2a2:	d2f9      	bcs.n	b298 <memmove+0x34>
    b2a4:	e7f0      	b.n	b288 <memmove+0x24>
    b2a6:	1c32      	adds	r2, r6, #0
    b2a8:	433a      	orrs	r2, r7
    b2aa:	2303      	movs	r3, #3
    b2ac:	421a      	tst	r2, r3
    b2ae:	d1f1      	bne.n	b294 <memmove+0x30>
    b2b0:	1c3a      	adds	r2, r7, #0
    b2b2:	1c31      	adds	r1, r6, #0
    b2b4:	680b      	ldr	r3, [r1, #0]
    b2b6:	6013      	str	r3, [r2, #0]
    b2b8:	684b      	ldr	r3, [r1, #4]
    b2ba:	6053      	str	r3, [r2, #4]
    b2bc:	688b      	ldr	r3, [r1, #8]
    b2be:	6093      	str	r3, [r2, #8]
    b2c0:	68cb      	ldr	r3, [r1, #12]
    b2c2:	3d10      	subs	r5, #16
    b2c4:	60d3      	str	r3, [r2, #12]
    b2c6:	3110      	adds	r1, #16
    b2c8:	3210      	adds	r2, #16
    b2ca:	2d0f      	cmp	r5, #15
    b2cc:	d8f2      	bhi.n	b2b4 <memmove+0x50>
    b2ce:	2d03      	cmp	r5, #3
    b2d0:	d904      	bls.n	b2dc <memmove+0x78>
    b2d2:	c908      	ldmia	r1!, {r3}
    b2d4:	3d04      	subs	r5, #4
    b2d6:	c208      	stmia	r2!, {r3}
    b2d8:	2d03      	cmp	r5, #3
    b2da:	d8fa      	bhi.n	b2d2 <memmove+0x6e>
    b2dc:	1c10      	adds	r0, r2, #0
    b2de:	e7d9      	b.n	b294 <memmove+0x30>

0000b2e0 <memset>:
    b2e0:	b530      	push	{r4, r5, lr}
    b2e2:	1c04      	adds	r4, r0, #0
    b2e4:	23ff      	movs	r3, #255	; 0xff
    b2e6:	1c10      	adds	r0, r2, #0
    b2e8:	1c0d      	adds	r5, r1, #0
    b2ea:	1c22      	adds	r2, r4, #0
    b2ec:	401d      	ands	r5, r3
    b2ee:	2803      	cmp	r0, #3
    b2f0:	d902      	bls.n	b2f8 <memset+0x18>
    b2f2:	2303      	movs	r3, #3
    b2f4:	421c      	tst	r4, r3
    b2f6:	d00a      	beq.n	b30e <memset+0x2e>
    b2f8:	1e43      	subs	r3, r0, #1
    b2fa:	d304      	bcc.n	b306 <memset+0x26>
    b2fc:	1c29      	adds	r1, r5, #0
    b2fe:	7011      	strb	r1, [r2, #0]
    b300:	3201      	adds	r2, #1
    b302:	3b01      	subs	r3, #1
    b304:	d2fb      	bcs.n	b2fe <memset+0x1e>
    b306:	1c20      	adds	r0, r4, #0
    b308:	bc30      	pop	{r4, r5}
    b30a:	bc02      	pop	{r1}
    b30c:	4708      	bx	r1
    b30e:	022b      	lsls	r3, r5, #8
    b310:	1c2a      	adds	r2, r5, #0
    b312:	431a      	orrs	r2, r3
    b314:	0413      	lsls	r3, r2, #16
    b316:	1c21      	adds	r1, r4, #0
    b318:	431a      	orrs	r2, r3
    b31a:	280f      	cmp	r0, #15
    b31c:	d909      	bls.n	b332 <memset+0x52>
    b31e:	3810      	subs	r0, #16
    b320:	600a      	str	r2, [r1, #0]
    b322:	604a      	str	r2, [r1, #4]
    b324:	608a      	str	r2, [r1, #8]
    b326:	60ca      	str	r2, [r1, #12]
    b328:	3110      	adds	r1, #16
    b32a:	280f      	cmp	r0, #15
    b32c:	d8f7      	bhi.n	b31e <memset+0x3e>
    b32e:	2803      	cmp	r0, #3
    b330:	d903      	bls.n	b33a <memset+0x5a>
    b332:	3804      	subs	r0, #4
    b334:	c104      	stmia	r1!, {r2}
    b336:	2803      	cmp	r0, #3
    b338:	d8fb      	bhi.n	b332 <memset+0x52>
    b33a:	1c0a      	adds	r2, r1, #0
    b33c:	e7dc      	b.n	b2f8 <memset+0x18>
    b33e:	46c0      	nop			; (mov r8, r8)

0000b340 <__malloc_lock>:
    b340:	4770      	bx	lr
    b342:	46c0      	nop			; (mov r8, r8)

0000b344 <__malloc_unlock>:
    b344:	4770      	bx	lr
    b346:	46c0      	nop			; (mov r8, r8)

0000b348 <_Bfree>:
    b348:	1c02      	adds	r2, r0, #0
    b34a:	1c08      	adds	r0, r1, #0
    b34c:	2900      	cmp	r1, #0
    b34e:	d005      	beq.n	b35c <_Bfree+0x14>
    b350:	684b      	ldr	r3, [r1, #4]
    b352:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    b354:	009b      	lsls	r3, r3, #2
    b356:	585a      	ldr	r2, [r3, r1]
    b358:	6002      	str	r2, [r0, #0]
    b35a:	5058      	str	r0, [r3, r1]
    b35c:	4770      	bx	lr
    b35e:	46c0      	nop			; (mov r8, r8)

0000b360 <_hi0bits>:
    b360:	4b10      	ldr	r3, [pc, #64]	; (b3a4 <_hi0bits+0x44>)
    b362:	4218      	tst	r0, r3
    b364:	d019      	beq.n	b39a <_hi0bits+0x3a>
    b366:	2200      	movs	r2, #0
    b368:	23ff      	movs	r3, #255	; 0xff
    b36a:	061b      	lsls	r3, r3, #24
    b36c:	4218      	tst	r0, r3
    b36e:	d101      	bne.n	b374 <_hi0bits+0x14>
    b370:	3208      	adds	r2, #8
    b372:	0200      	lsls	r0, r0, #8
    b374:	23f0      	movs	r3, #240	; 0xf0
    b376:	061b      	lsls	r3, r3, #24
    b378:	4218      	tst	r0, r3
    b37a:	d101      	bne.n	b380 <_hi0bits+0x20>
    b37c:	3204      	adds	r2, #4
    b37e:	0100      	lsls	r0, r0, #4
    b380:	23c0      	movs	r3, #192	; 0xc0
    b382:	061b      	lsls	r3, r3, #24
    b384:	4218      	tst	r0, r3
    b386:	d101      	bne.n	b38c <_hi0bits+0x2c>
    b388:	3202      	adds	r2, #2
    b38a:	0080      	lsls	r0, r0, #2
    b38c:	2800      	cmp	r0, #0
    b38e:	db02      	blt.n	b396 <_hi0bits+0x36>
    b390:	0043      	lsls	r3, r0, #1
    b392:	d505      	bpl.n	b3a0 <_hi0bits+0x40>
    b394:	3201      	adds	r2, #1
    b396:	1c10      	adds	r0, r2, #0
    b398:	4770      	bx	lr
    b39a:	0400      	lsls	r0, r0, #16
    b39c:	2210      	movs	r2, #16
    b39e:	e7e3      	b.n	b368 <_hi0bits+0x8>
    b3a0:	2220      	movs	r2, #32
    b3a2:	e7f8      	b.n	b396 <_hi0bits+0x36>
    b3a4:	ffff0000 	.word	0xffff0000

0000b3a8 <_lo0bits>:
    b3a8:	6802      	ldr	r2, [r0, #0]
    b3aa:	2307      	movs	r3, #7
    b3ac:	1c01      	adds	r1, r0, #0
    b3ae:	421a      	tst	r2, r3
    b3b0:	d007      	beq.n	b3c2 <_lo0bits+0x1a>
    b3b2:	07d3      	lsls	r3, r2, #31
    b3b4:	d423      	bmi.n	b3fe <_lo0bits+0x56>
    b3b6:	0793      	lsls	r3, r2, #30
    b3b8:	d425      	bmi.n	b406 <_lo0bits+0x5e>
    b3ba:	0893      	lsrs	r3, r2, #2
    b3bc:	6003      	str	r3, [r0, #0]
    b3be:	2002      	movs	r0, #2
    b3c0:	4770      	bx	lr
    b3c2:	4b13      	ldr	r3, [pc, #76]	; (b410 <_lo0bits+0x68>)
    b3c4:	421a      	tst	r2, r3
    b3c6:	d017      	beq.n	b3f8 <_lo0bits+0x50>
    b3c8:	2000      	movs	r0, #0
    b3ca:	23ff      	movs	r3, #255	; 0xff
    b3cc:	421a      	tst	r2, r3
    b3ce:	d101      	bne.n	b3d4 <_lo0bits+0x2c>
    b3d0:	3008      	adds	r0, #8
    b3d2:	0a12      	lsrs	r2, r2, #8
    b3d4:	230f      	movs	r3, #15
    b3d6:	421a      	tst	r2, r3
    b3d8:	d101      	bne.n	b3de <_lo0bits+0x36>
    b3da:	3004      	adds	r0, #4
    b3dc:	0912      	lsrs	r2, r2, #4
    b3de:	2303      	movs	r3, #3
    b3e0:	421a      	tst	r2, r3
    b3e2:	d101      	bne.n	b3e8 <_lo0bits+0x40>
    b3e4:	3002      	adds	r0, #2
    b3e6:	0892      	lsrs	r2, r2, #2
    b3e8:	07d3      	lsls	r3, r2, #31
    b3ea:	d403      	bmi.n	b3f4 <_lo0bits+0x4c>
    b3ec:	0852      	lsrs	r2, r2, #1
    b3ee:	2a00      	cmp	r2, #0
    b3f0:	d007      	beq.n	b402 <_lo0bits+0x5a>
    b3f2:	3001      	adds	r0, #1
    b3f4:	600a      	str	r2, [r1, #0]
    b3f6:	e7e3      	b.n	b3c0 <_lo0bits+0x18>
    b3f8:	0c12      	lsrs	r2, r2, #16
    b3fa:	2010      	movs	r0, #16
    b3fc:	e7e5      	b.n	b3ca <_lo0bits+0x22>
    b3fe:	2000      	movs	r0, #0
    b400:	e7de      	b.n	b3c0 <_lo0bits+0x18>
    b402:	2020      	movs	r0, #32
    b404:	e7dc      	b.n	b3c0 <_lo0bits+0x18>
    b406:	0853      	lsrs	r3, r2, #1
    b408:	6003      	str	r3, [r0, #0]
    b40a:	2001      	movs	r0, #1
    b40c:	e7d8      	b.n	b3c0 <_lo0bits+0x18>
    b40e:	46c0      	nop			; (mov r8, r8)
    b410:	0000ffff 	.word	0x0000ffff

0000b414 <__mcmp>:
    b414:	b530      	push	{r4, r5, lr}
    b416:	6903      	ldr	r3, [r0, #16]
    b418:	690a      	ldr	r2, [r1, #16]
    b41a:	1a9d      	subs	r5, r3, r2
    b41c:	2d00      	cmp	r5, #0
    b41e:	d10d      	bne.n	b43c <__mcmp+0x28>
    b420:	1c04      	adds	r4, r0, #0
    b422:	0093      	lsls	r3, r2, #2
    b424:	3414      	adds	r4, #20
    b426:	18e2      	adds	r2, r4, r3
    b428:	3314      	adds	r3, #20
    b42a:	18c9      	adds	r1, r1, r3
    b42c:	3a04      	subs	r2, #4
    b42e:	3904      	subs	r1, #4
    b430:	6810      	ldr	r0, [r2, #0]
    b432:	680b      	ldr	r3, [r1, #0]
    b434:	4298      	cmp	r0, r3
    b436:	d105      	bne.n	b444 <__mcmp+0x30>
    b438:	4294      	cmp	r4, r2
    b43a:	d3f7      	bcc.n	b42c <__mcmp+0x18>
    b43c:	1c28      	adds	r0, r5, #0
    b43e:	bc30      	pop	{r4, r5}
    b440:	bc02      	pop	{r1}
    b442:	4708      	bx	r1
    b444:	4298      	cmp	r0, r3
    b446:	d301      	bcc.n	b44c <__mcmp+0x38>
    b448:	2501      	movs	r5, #1
    b44a:	e7f7      	b.n	b43c <__mcmp+0x28>
    b44c:	2501      	movs	r5, #1
    b44e:	426d      	negs	r5, r5
    b450:	e7f4      	b.n	b43c <__mcmp+0x28>
    b452:	46c0      	nop			; (mov r8, r8)

0000b454 <_ulp>:
    b454:	b530      	push	{r4, r5, lr}
    b456:	4b11      	ldr	r3, [pc, #68]	; (b49c <_ulp+0x48>)
    b458:	4a11      	ldr	r2, [pc, #68]	; (b4a0 <_ulp+0x4c>)
    b45a:	4003      	ands	r3, r0
    b45c:	189b      	adds	r3, r3, r2
    b45e:	2b00      	cmp	r3, #0
    b460:	dd06      	ble.n	b470 <_ulp+0x1c>
    b462:	1c1c      	adds	r4, r3, #0
    b464:	2500      	movs	r5, #0
    b466:	1c29      	adds	r1, r5, #0
    b468:	1c20      	adds	r0, r4, #0
    b46a:	bc30      	pop	{r4, r5}
    b46c:	bc04      	pop	{r2}
    b46e:	4710      	bx	r2
    b470:	425b      	negs	r3, r3
    b472:	151a      	asrs	r2, r3, #20
    b474:	2a13      	cmp	r2, #19
    b476:	dd06      	ble.n	b486 <_ulp+0x32>
    b478:	3a14      	subs	r2, #20
    b47a:	2a1e      	cmp	r2, #30
    b47c:	dd09      	ble.n	b492 <_ulp+0x3e>
    b47e:	2201      	movs	r2, #1
    b480:	2400      	movs	r4, #0
    b482:	1c15      	adds	r5, r2, #0
    b484:	e7ef      	b.n	b466 <_ulp+0x12>
    b486:	2380      	movs	r3, #128	; 0x80
    b488:	031b      	lsls	r3, r3, #12
    b48a:	1c1c      	adds	r4, r3, #0
    b48c:	4114      	asrs	r4, r2
    b48e:	2500      	movs	r5, #0
    b490:	e7e9      	b.n	b466 <_ulp+0x12>
    b492:	231f      	movs	r3, #31
    b494:	1a9b      	subs	r3, r3, r2
    b496:	2201      	movs	r2, #1
    b498:	409a      	lsls	r2, r3
    b49a:	e7f1      	b.n	b480 <_ulp+0x2c>
    b49c:	7ff00000 	.word	0x7ff00000
    b4a0:	fcc00000 	.word	0xfcc00000

0000b4a4 <_b2d>:
    b4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4a6:	4647      	mov	r7, r8
    b4a8:	b480      	push	{r7}
    b4aa:	2200      	movs	r2, #0
    b4ac:	2300      	movs	r3, #0
    b4ae:	b082      	sub	sp, #8
    b4b0:	9200      	str	r2, [sp, #0]
    b4b2:	9301      	str	r3, [sp, #4]
    b4b4:	6903      	ldr	r3, [r0, #16]
    b4b6:	1c07      	adds	r7, r0, #0
    b4b8:	009b      	lsls	r3, r3, #2
    b4ba:	3714      	adds	r7, #20
    b4bc:	18fe      	adds	r6, r7, r3
    b4be:	1f35      	subs	r5, r6, #4
    b4c0:	682b      	ldr	r3, [r5, #0]
    b4c2:	1c18      	adds	r0, r3, #0
    b4c4:	1c0c      	adds	r4, r1, #0
    b4c6:	4698      	mov	r8, r3
    b4c8:	f7ff ff4a 	bl	b360 <_hi0bits>
    b4cc:	2320      	movs	r3, #32
    b4ce:	1a1b      	subs	r3, r3, r0
    b4d0:	6023      	str	r3, [r4, #0]
    b4d2:	280a      	cmp	r0, #10
    b4d4:	dc19      	bgt.n	b50a <_b2d+0x66>
    b4d6:	230b      	movs	r3, #11
    b4d8:	1a1a      	subs	r2, r3, r0
    b4da:	42af      	cmp	r7, r5
    b4dc:	d339      	bcc.n	b552 <_b2d+0xae>
    b4de:	2100      	movs	r1, #0
    b4e0:	4644      	mov	r4, r8
    b4e2:	4b21      	ldr	r3, [pc, #132]	; (b568 <_b2d+0xc4>)
    b4e4:	40d4      	lsrs	r4, r2
    b4e6:	1c22      	adds	r2, r4, #0
    b4e8:	431a      	orrs	r2, r3
    b4ea:	1c03      	adds	r3, r0, #0
    b4ec:	3315      	adds	r3, #21
    b4ee:	9200      	str	r2, [sp, #0]
    b4f0:	4642      	mov	r2, r8
    b4f2:	409a      	lsls	r2, r3
    b4f4:	1c13      	adds	r3, r2, #0
    b4f6:	430b      	orrs	r3, r1
    b4f8:	9301      	str	r3, [sp, #4]
    b4fa:	9800      	ldr	r0, [sp, #0]
    b4fc:	9901      	ldr	r1, [sp, #4]
    b4fe:	b002      	add	sp, #8
    b500:	bc04      	pop	{r2}
    b502:	4690      	mov	r8, r2
    b504:	bcf0      	pop	{r4, r5, r6, r7}
    b506:	bc04      	pop	{r2}
    b508:	4710      	bx	r2
    b50a:	42af      	cmp	r7, r5
    b50c:	d315      	bcc.n	b53a <_b2d+0x96>
    b50e:	380b      	subs	r0, #11
    b510:	2400      	movs	r4, #0
    b512:	2800      	cmp	r0, #0
    b514:	d017      	beq.n	b546 <_b2d+0xa2>
    b516:	2320      	movs	r3, #32
    b518:	1a1a      	subs	r2, r3, r0
    b51a:	42bd      	cmp	r5, r7
    b51c:	d81f      	bhi.n	b55e <_b2d+0xba>
    b51e:	2500      	movs	r5, #0
    b520:	1c21      	adds	r1, r4, #0
    b522:	40d1      	lsrs	r1, r2
    b524:	4643      	mov	r3, r8
    b526:	4a10      	ldr	r2, [pc, #64]	; (b568 <_b2d+0xc4>)
    b528:	4083      	lsls	r3, r0
    b52a:	4313      	orrs	r3, r2
    b52c:	4319      	orrs	r1, r3
    b52e:	1c23      	adds	r3, r4, #0
    b530:	4083      	lsls	r3, r0
    b532:	431d      	orrs	r5, r3
    b534:	9100      	str	r1, [sp, #0]
    b536:	9501      	str	r5, [sp, #4]
    b538:	e7df      	b.n	b4fa <_b2d+0x56>
    b53a:	1c35      	adds	r5, r6, #0
    b53c:	3d08      	subs	r5, #8
    b53e:	380b      	subs	r0, #11
    b540:	682c      	ldr	r4, [r5, #0]
    b542:	2800      	cmp	r0, #0
    b544:	d1e7      	bne.n	b516 <_b2d+0x72>
    b546:	4b08      	ldr	r3, [pc, #32]	; (b568 <_b2d+0xc4>)
    b548:	4642      	mov	r2, r8
    b54a:	431a      	orrs	r2, r3
    b54c:	9200      	str	r2, [sp, #0]
    b54e:	9401      	str	r4, [sp, #4]
    b550:	e7d3      	b.n	b4fa <_b2d+0x56>
    b552:	1c33      	adds	r3, r6, #0
    b554:	3b08      	subs	r3, #8
    b556:	681b      	ldr	r3, [r3, #0]
    b558:	1c19      	adds	r1, r3, #0
    b55a:	40d1      	lsrs	r1, r2
    b55c:	e7c0      	b.n	b4e0 <_b2d+0x3c>
    b55e:	1f2b      	subs	r3, r5, #4
    b560:	681b      	ldr	r3, [r3, #0]
    b562:	1c1d      	adds	r5, r3, #0
    b564:	40d5      	lsrs	r5, r2
    b566:	e7db      	b.n	b520 <_b2d+0x7c>
    b568:	3ff00000 	.word	0x3ff00000

0000b56c <_ratio>:
    b56c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b56e:	b084      	sub	sp, #16
    b570:	1c0d      	adds	r5, r1, #0
    b572:	a903      	add	r1, sp, #12
    b574:	1c04      	adds	r4, r0, #0
    b576:	f7ff ff95 	bl	b4a4 <_b2d>
    b57a:	1c06      	adds	r6, r0, #0
    b57c:	1c0f      	adds	r7, r1, #0
    b57e:	1c28      	adds	r0, r5, #0
    b580:	a902      	add	r1, sp, #8
    b582:	f7ff ff8f 	bl	b4a4 <_b2d>
    b586:	9b02      	ldr	r3, [sp, #8]
    b588:	9000      	str	r0, [sp, #0]
    b58a:	9101      	str	r1, [sp, #4]
    b58c:	9903      	ldr	r1, [sp, #12]
    b58e:	692a      	ldr	r2, [r5, #16]
    b590:	1ac9      	subs	r1, r1, r3
    b592:	6923      	ldr	r3, [r4, #16]
    b594:	1a9b      	subs	r3, r3, r2
    b596:	015b      	lsls	r3, r3, #5
    b598:	18c9      	adds	r1, r1, r3
    b59a:	2900      	cmp	r1, #0
    b59c:	dd0b      	ble.n	b5b6 <_ratio+0x4a>
    b59e:	050b      	lsls	r3, r1, #20
    b5a0:	199e      	adds	r6, r3, r6
    b5a2:	1c30      	adds	r0, r6, #0
    b5a4:	1c39      	adds	r1, r7, #0
    b5a6:	9a00      	ldr	r2, [sp, #0]
    b5a8:	9b01      	ldr	r3, [sp, #4]
    b5aa:	f007 f9a1 	bl	128f0 <____divdf3_from_thumb>
    b5ae:	b004      	add	sp, #16
    b5b0:	bcf0      	pop	{r4, r5, r6, r7}
    b5b2:	bc04      	pop	{r2}
    b5b4:	4710      	bx	r2
    b5b6:	9a00      	ldr	r2, [sp, #0]
    b5b8:	050b      	lsls	r3, r1, #20
    b5ba:	1ad3      	subs	r3, r2, r3
    b5bc:	9300      	str	r3, [sp, #0]
    b5be:	e7f0      	b.n	b5a2 <_ratio+0x36>

0000b5c0 <_mprec_log10>:
    b5c0:	b510      	push	{r4, lr}
    b5c2:	1c04      	adds	r4, r0, #0
    b5c4:	2817      	cmp	r0, #23
    b5c6:	dc07      	bgt.n	b5d8 <_mprec_log10+0x18>
    b5c8:	4a08      	ldr	r2, [pc, #32]	; (b5ec <_mprec_log10+0x2c>)
    b5ca:	00c3      	lsls	r3, r0, #3
    b5cc:	189b      	adds	r3, r3, r2
    b5ce:	6818      	ldr	r0, [r3, #0]
    b5d0:	6859      	ldr	r1, [r3, #4]
    b5d2:	bc10      	pop	{r4}
    b5d4:	bc04      	pop	{r2}
    b5d6:	4710      	bx	r2
    b5d8:	4805      	ldr	r0, [pc, #20]	; (b5f0 <_mprec_log10+0x30>)
    b5da:	4906      	ldr	r1, [pc, #24]	; (b5f4 <_mprec_log10+0x34>)
    b5dc:	4a06      	ldr	r2, [pc, #24]	; (b5f8 <_mprec_log10+0x38>)
    b5de:	4b07      	ldr	r3, [pc, #28]	; (b5fc <_mprec_log10+0x3c>)
    b5e0:	3c01      	subs	r4, #1
    b5e2:	f007 f99d 	bl	12920 <____muldf3_from_thumb>
    b5e6:	2c00      	cmp	r4, #0
    b5e8:	d1f8      	bne.n	b5dc <_mprec_log10+0x1c>
    b5ea:	e7f2      	b.n	b5d2 <_mprec_log10+0x12>
    b5ec:	00012c98 	.word	0x00012c98
    b5f0:	3ff00000 	.word	0x3ff00000
    b5f4:	00000000 	.word	0x00000000
    b5f8:	40240000 	.word	0x40240000
    b5fc:	00000000 	.word	0x00000000

0000b600 <_Balloc>:
    b600:	b5f0      	push	{r4, r5, r6, r7, lr}
    b602:	1c05      	adds	r5, r0, #0
    b604:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    b606:	1c0e      	adds	r6, r1, #0
    b608:	2800      	cmp	r0, #0
    b60a:	d00d      	beq.n	b628 <_Balloc+0x28>
    b60c:	00b3      	lsls	r3, r6, #2
    b60e:	1818      	adds	r0, r3, r0
    b610:	6804      	ldr	r4, [r0, #0]
    b612:	2c00      	cmp	r4, #0
    b614:	d012      	beq.n	b63c <_Balloc+0x3c>
    b616:	6823      	ldr	r3, [r4, #0]
    b618:	6003      	str	r3, [r0, #0]
    b61a:	2300      	movs	r3, #0
    b61c:	6123      	str	r3, [r4, #16]
    b61e:	60e3      	str	r3, [r4, #12]
    b620:	1c20      	adds	r0, r4, #0
    b622:	bcf0      	pop	{r4, r5, r6, r7}
    b624:	bc02      	pop	{r1}
    b626:	4708      	bx	r1
    b628:	1c28      	adds	r0, r5, #0
    b62a:	2104      	movs	r1, #4
    b62c:	2210      	movs	r2, #16
    b62e:	f000 fdc7 	bl	c1c0 <_calloc_r>
    b632:	64e8      	str	r0, [r5, #76]	; 0x4c
    b634:	2800      	cmp	r0, #0
    b636:	d1e9      	bne.n	b60c <_Balloc+0xc>
    b638:	2400      	movs	r4, #0
    b63a:	e7f1      	b.n	b620 <_Balloc+0x20>
    b63c:	2301      	movs	r3, #1
    b63e:	1c1f      	adds	r7, r3, #0
    b640:	40b7      	lsls	r7, r6
    b642:	00ba      	lsls	r2, r7, #2
    b644:	3214      	adds	r2, #20
    b646:	1c28      	adds	r0, r5, #0
    b648:	2101      	movs	r1, #1
    b64a:	f000 fdb9 	bl	c1c0 <_calloc_r>
    b64e:	2800      	cmp	r0, #0
    b650:	d0e6      	beq.n	b620 <_Balloc+0x20>
    b652:	1c04      	adds	r4, r0, #0
    b654:	6046      	str	r6, [r0, #4]
    b656:	6087      	str	r7, [r0, #8]
    b658:	e7df      	b.n	b61a <_Balloc+0x1a>
    b65a:	46c0      	nop			; (mov r8, r8)

0000b65c <_d2b>:
    b65c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b65e:	4657      	mov	r7, sl
    b660:	4646      	mov	r6, r8
    b662:	b4c0      	push	{r6, r7}
    b664:	1c0c      	adds	r4, r1, #0
    b666:	b082      	sub	sp, #8
    b668:	2101      	movs	r1, #1
    b66a:	469a      	mov	sl, r3
    b66c:	1c15      	adds	r5, r2, #0
    b66e:	f7ff ffc7 	bl	b600 <_Balloc>
    b672:	2114      	movs	r1, #20
    b674:	1809      	adds	r1, r1, r0
    b676:	4b2f      	ldr	r3, [pc, #188]	; (b734 <_d2b+0xd8>)
    b678:	4688      	mov	r8, r1
    b67a:	1c21      	adds	r1, r4, #0
    b67c:	4019      	ands	r1, r3
    b67e:	4b2e      	ldr	r3, [pc, #184]	; (b738 <_d2b+0xdc>)
    b680:	1c22      	adds	r2, r4, #0
    b682:	401a      	ands	r2, r3
    b684:	0d17      	lsrs	r7, r2, #20
    b686:	1c06      	adds	r6, r0, #0
    b688:	9100      	str	r1, [sp, #0]
    b68a:	2f00      	cmp	r7, #0
    b68c:	d003      	beq.n	b696 <_d2b+0x3a>
    b68e:	2380      	movs	r3, #128	; 0x80
    b690:	035b      	lsls	r3, r3, #13
    b692:	4319      	orrs	r1, r3
    b694:	9100      	str	r1, [sp, #0]
    b696:	2d00      	cmp	r5, #0
    b698:	d026      	beq.n	b6e8 <_d2b+0x8c>
    b69a:	a801      	add	r0, sp, #4
    b69c:	9501      	str	r5, [sp, #4]
    b69e:	f7ff fe83 	bl	b3a8 <_lo0bits>
    b6a2:	2800      	cmp	r0, #0
    b6a4:	d03c      	beq.n	b720 <_d2b+0xc4>
    b6a6:	9a00      	ldr	r2, [sp, #0]
    b6a8:	2320      	movs	r3, #32
    b6aa:	1a1b      	subs	r3, r3, r0
    b6ac:	409a      	lsls	r2, r3
    b6ae:	9b01      	ldr	r3, [sp, #4]
    b6b0:	431a      	orrs	r2, r3
    b6b2:	6172      	str	r2, [r6, #20]
    b6b4:	9900      	ldr	r1, [sp, #0]
    b6b6:	4642      	mov	r2, r8
    b6b8:	40c1      	lsrs	r1, r0
    b6ba:	9100      	str	r1, [sp, #0]
    b6bc:	6051      	str	r1, [r2, #4]
    b6be:	2900      	cmp	r1, #0
    b6c0:	d035      	beq.n	b72e <_d2b+0xd2>
    b6c2:	2202      	movs	r2, #2
    b6c4:	6132      	str	r2, [r6, #16]
    b6c6:	2f00      	cmp	r7, #0
    b6c8:	d119      	bne.n	b6fe <_d2b+0xa2>
    b6ca:	491c      	ldr	r1, [pc, #112]	; (b73c <_d2b+0xe0>)
    b6cc:	1843      	adds	r3, r0, r1
    b6ce:	4651      	mov	r1, sl
    b6d0:	600b      	str	r3, [r1, #0]
    b6d2:	0093      	lsls	r3, r2, #2
    b6d4:	4443      	add	r3, r8
    b6d6:	3b04      	subs	r3, #4
    b6d8:	6818      	ldr	r0, [r3, #0]
    b6da:	0154      	lsls	r4, r2, #5
    b6dc:	f7ff fe40 	bl	b360 <_hi0bits>
    b6e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b6e2:	1a24      	subs	r4, r4, r0
    b6e4:	6014      	str	r4, [r2, #0]
    b6e6:	e013      	b.n	b710 <_d2b+0xb4>
    b6e8:	4668      	mov	r0, sp
    b6ea:	f7ff fe5d 	bl	b3a8 <_lo0bits>
    b6ee:	9b00      	ldr	r3, [sp, #0]
    b6f0:	6173      	str	r3, [r6, #20]
    b6f2:	2301      	movs	r3, #1
    b6f4:	6133      	str	r3, [r6, #16]
    b6f6:	3020      	adds	r0, #32
    b6f8:	2201      	movs	r2, #1
    b6fa:	2f00      	cmp	r7, #0
    b6fc:	d0e5      	beq.n	b6ca <_d2b+0x6e>
    b6fe:	4910      	ldr	r1, [pc, #64]	; (b740 <_d2b+0xe4>)
    b700:	19c3      	adds	r3, r0, r7
    b702:	185b      	adds	r3, r3, r1
    b704:	4652      	mov	r2, sl
    b706:	6013      	str	r3, [r2, #0]
    b708:	9909      	ldr	r1, [sp, #36]	; 0x24
    b70a:	2335      	movs	r3, #53	; 0x35
    b70c:	1a1b      	subs	r3, r3, r0
    b70e:	600b      	str	r3, [r1, #0]
    b710:	1c30      	adds	r0, r6, #0
    b712:	b002      	add	sp, #8
    b714:	bc0c      	pop	{r2, r3}
    b716:	4690      	mov	r8, r2
    b718:	469a      	mov	sl, r3
    b71a:	bcf0      	pop	{r4, r5, r6, r7}
    b71c:	bc02      	pop	{r1}
    b71e:	4708      	bx	r1
    b720:	9b01      	ldr	r3, [sp, #4]
    b722:	6173      	str	r3, [r6, #20]
    b724:	9900      	ldr	r1, [sp, #0]
    b726:	4642      	mov	r2, r8
    b728:	6051      	str	r1, [r2, #4]
    b72a:	2900      	cmp	r1, #0
    b72c:	d1c9      	bne.n	b6c2 <_d2b+0x66>
    b72e:	2201      	movs	r2, #1
    b730:	6132      	str	r2, [r6, #16]
    b732:	e7c8      	b.n	b6c6 <_d2b+0x6a>
    b734:	000fffff 	.word	0x000fffff
    b738:	7fffffff 	.word	0x7fffffff
    b73c:	fffffbce 	.word	0xfffffbce
    b740:	fffffbcd 	.word	0xfffffbcd

0000b744 <__mdiff>:
    b744:	b5f0      	push	{r4, r5, r6, r7, lr}
    b746:	465f      	mov	r7, fp
    b748:	4656      	mov	r6, sl
    b74a:	464d      	mov	r5, r9
    b74c:	4644      	mov	r4, r8
    b74e:	b4f0      	push	{r4, r5, r6, r7}
    b750:	1c06      	adds	r6, r0, #0
    b752:	1c0d      	adds	r5, r1, #0
    b754:	1c08      	adds	r0, r1, #0
    b756:	1c11      	adds	r1, r2, #0
    b758:	1c17      	adds	r7, r2, #0
    b75a:	f7ff fe5b 	bl	b414 <__mcmp>
    b75e:	1c04      	adds	r4, r0, #0
    b760:	2800      	cmp	r0, #0
    b762:	d053      	beq.n	b80c <__mdiff+0xc8>
    b764:	2800      	cmp	r0, #0
    b766:	db5a      	blt.n	b81e <__mdiff+0xda>
    b768:	2400      	movs	r4, #0
    b76a:	6869      	ldr	r1, [r5, #4]
    b76c:	1c30      	adds	r0, r6, #0
    b76e:	f7ff ff47 	bl	b600 <_Balloc>
    b772:	692a      	ldr	r2, [r5, #16]
    b774:	3514      	adds	r5, #20
    b776:	0093      	lsls	r3, r2, #2
    b778:	195b      	adds	r3, r3, r5
    b77a:	469b      	mov	fp, r3
    b77c:	693b      	ldr	r3, [r7, #16]
    b77e:	1c3e      	adds	r6, r7, #0
    b780:	3614      	adds	r6, #20
    b782:	009b      	lsls	r3, r3, #2
    b784:	199b      	adds	r3, r3, r6
    b786:	4681      	mov	r9, r0
    b788:	469a      	mov	sl, r3
    b78a:	4b27      	ldr	r3, [pc, #156]	; (b828 <__mdiff+0xe4>)
    b78c:	60c4      	str	r4, [r0, #12]
    b78e:	464c      	mov	r4, r9
    b790:	4694      	mov	ip, r2
    b792:	3414      	adds	r4, #20
    b794:	2700      	movs	r7, #0
    b796:	4698      	mov	r8, r3
    b798:	cd08      	ldmia	r5!, {r3}
    b79a:	ce02      	ldmia	r6!, {r1}
    b79c:	4640      	mov	r0, r8
    b79e:	4642      	mov	r2, r8
    b7a0:	400a      	ands	r2, r1
    b7a2:	4018      	ands	r0, r3
    b7a4:	1a80      	subs	r0, r0, r2
    b7a6:	19c0      	adds	r0, r0, r7
    b7a8:	0c1b      	lsrs	r3, r3, #16
    b7aa:	0c09      	lsrs	r1, r1, #16
    b7ac:	1a5b      	subs	r3, r3, r1
    b7ae:	1402      	asrs	r2, r0, #16
    b7b0:	189b      	adds	r3, r3, r2
    b7b2:	8063      	strh	r3, [r4, #2]
    b7b4:	8020      	strh	r0, [r4, #0]
    b7b6:	141f      	asrs	r7, r3, #16
    b7b8:	3404      	adds	r4, #4
    b7ba:	45b2      	cmp	sl, r6
    b7bc:	d8ec      	bhi.n	b798 <__mdiff+0x54>
    b7be:	45ab      	cmp	fp, r5
    b7c0:	d90d      	bls.n	b7de <__mdiff+0x9a>
    b7c2:	4819      	ldr	r0, [pc, #100]	; (b828 <__mdiff+0xe4>)
    b7c4:	cd08      	ldmia	r5!, {r3}
    b7c6:	1c19      	adds	r1, r3, #0
    b7c8:	4001      	ands	r1, r0
    b7ca:	19c9      	adds	r1, r1, r7
    b7cc:	0c1b      	lsrs	r3, r3, #16
    b7ce:	140a      	asrs	r2, r1, #16
    b7d0:	189b      	adds	r3, r3, r2
    b7d2:	8063      	strh	r3, [r4, #2]
    b7d4:	8021      	strh	r1, [r4, #0]
    b7d6:	141f      	asrs	r7, r3, #16
    b7d8:	3404      	adds	r4, #4
    b7da:	45ab      	cmp	fp, r5
    b7dc:	d8f2      	bhi.n	b7c4 <__mdiff+0x80>
    b7de:	1f22      	subs	r2, r4, #4
    b7e0:	6813      	ldr	r3, [r2, #0]
    b7e2:	2b00      	cmp	r3, #0
    b7e4:	d106      	bne.n	b7f4 <__mdiff+0xb0>
    b7e6:	2301      	movs	r3, #1
    b7e8:	425b      	negs	r3, r3
    b7ea:	3a04      	subs	r2, #4
    b7ec:	449c      	add	ip, r3
    b7ee:	6813      	ldr	r3, [r2, #0]
    b7f0:	2b00      	cmp	r3, #0
    b7f2:	d0f8      	beq.n	b7e6 <__mdiff+0xa2>
    b7f4:	4662      	mov	r2, ip
    b7f6:	464b      	mov	r3, r9
    b7f8:	611a      	str	r2, [r3, #16]
    b7fa:	4648      	mov	r0, r9
    b7fc:	bc3c      	pop	{r2, r3, r4, r5}
    b7fe:	4690      	mov	r8, r2
    b800:	4699      	mov	r9, r3
    b802:	46a2      	mov	sl, r4
    b804:	46ab      	mov	fp, r5
    b806:	bcf0      	pop	{r4, r5, r6, r7}
    b808:	bc02      	pop	{r1}
    b80a:	4708      	bx	r1
    b80c:	1c30      	adds	r0, r6, #0
    b80e:	2100      	movs	r1, #0
    b810:	f7ff fef6 	bl	b600 <_Balloc>
    b814:	2301      	movs	r3, #1
    b816:	4681      	mov	r9, r0
    b818:	6103      	str	r3, [r0, #16]
    b81a:	6144      	str	r4, [r0, #20]
    b81c:	e7ed      	b.n	b7fa <__mdiff+0xb6>
    b81e:	46bc      	mov	ip, r7
    b820:	2401      	movs	r4, #1
    b822:	1c2f      	adds	r7, r5, #0
    b824:	4665      	mov	r5, ip
    b826:	e7a0      	b.n	b76a <__mdiff+0x26>
    b828:	0000ffff 	.word	0x0000ffff

0000b82c <_lshift>:
    b82c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b82e:	4657      	mov	r7, sl
    b830:	464e      	mov	r6, r9
    b832:	4645      	mov	r5, r8
    b834:	b4e0      	push	{r5, r6, r7}
    b836:	4688      	mov	r8, r1
    b838:	4681      	mov	r9, r0
    b83a:	4640      	mov	r0, r8
    b83c:	6903      	ldr	r3, [r0, #16]
    b83e:	1154      	asrs	r4, r2, #5
    b840:	3301      	adds	r3, #1
    b842:	18e5      	adds	r5, r4, r3
    b844:	6883      	ldr	r3, [r0, #8]
    b846:	1c16      	adds	r6, r2, #0
    b848:	6849      	ldr	r1, [r1, #4]
    b84a:	429d      	cmp	r5, r3
    b84c:	dd03      	ble.n	b856 <_lshift+0x2a>
    b84e:	005b      	lsls	r3, r3, #1
    b850:	3101      	adds	r1, #1
    b852:	429d      	cmp	r5, r3
    b854:	dcfb      	bgt.n	b84e <_lshift+0x22>
    b856:	4648      	mov	r0, r9
    b858:	f7ff fed2 	bl	b600 <_Balloc>
    b85c:	1c01      	adds	r1, r0, #0
    b85e:	4682      	mov	sl, r0
    b860:	3114      	adds	r1, #20
    b862:	2c00      	cmp	r4, #0
    b864:	dd08      	ble.n	b878 <_lshift+0x4c>
    b866:	1c0a      	adds	r2, r1, #0
    b868:	2300      	movs	r3, #0
    b86a:	2000      	movs	r0, #0
    b86c:	3301      	adds	r3, #1
    b86e:	c201      	stmia	r2!, {r0}
    b870:	429c      	cmp	r4, r3
    b872:	d1fb      	bne.n	b86c <_lshift+0x40>
    b874:	00a3      	lsls	r3, r4, #2
    b876:	18c9      	adds	r1, r1, r3
    b878:	4640      	mov	r0, r8
    b87a:	6903      	ldr	r3, [r0, #16]
    b87c:	4642      	mov	r2, r8
    b87e:	009b      	lsls	r3, r3, #2
    b880:	3214      	adds	r2, #20
    b882:	18d4      	adds	r4, r2, r3
    b884:	1c37      	adds	r7, r6, #0
    b886:	231f      	movs	r3, #31
    b888:	401f      	ands	r7, r3
    b88a:	d01e      	beq.n	b8ca <_lshift+0x9e>
    b88c:	2320      	movs	r3, #32
    b88e:	1bde      	subs	r6, r3, r7
    b890:	2000      	movs	r0, #0
    b892:	6813      	ldr	r3, [r2, #0]
    b894:	40bb      	lsls	r3, r7
    b896:	4303      	orrs	r3, r0
    b898:	c108      	stmia	r1!, {r3}
    b89a:	ca08      	ldmia	r2!, {r3}
    b89c:	1c18      	adds	r0, r3, #0
    b89e:	40f0      	lsrs	r0, r6
    b8a0:	4294      	cmp	r4, r2
    b8a2:	d8f6      	bhi.n	b892 <_lshift+0x66>
    b8a4:	6008      	str	r0, [r1, #0]
    b8a6:	2800      	cmp	r0, #0
    b8a8:	d000      	beq.n	b8ac <_lshift+0x80>
    b8aa:	3501      	adds	r5, #1
    b8ac:	1e6b      	subs	r3, r5, #1
    b8ae:	4652      	mov	r2, sl
    b8b0:	4648      	mov	r0, r9
    b8b2:	4641      	mov	r1, r8
    b8b4:	6113      	str	r3, [r2, #16]
    b8b6:	f7ff fd47 	bl	b348 <_Bfree>
    b8ba:	4650      	mov	r0, sl
    b8bc:	bc1c      	pop	{r2, r3, r4}
    b8be:	4690      	mov	r8, r2
    b8c0:	4699      	mov	r9, r3
    b8c2:	46a2      	mov	sl, r4
    b8c4:	bcf0      	pop	{r4, r5, r6, r7}
    b8c6:	bc02      	pop	{r1}
    b8c8:	4708      	bx	r1
    b8ca:	ca08      	ldmia	r2!, {r3}
    b8cc:	c108      	stmia	r1!, {r3}
    b8ce:	4294      	cmp	r4, r2
    b8d0:	d9ec      	bls.n	b8ac <_lshift+0x80>
    b8d2:	ca08      	ldmia	r2!, {r3}
    b8d4:	c108      	stmia	r1!, {r3}
    b8d6:	4294      	cmp	r4, r2
    b8d8:	d8f7      	bhi.n	b8ca <_lshift+0x9e>
    b8da:	e7e7      	b.n	b8ac <_lshift+0x80>

0000b8dc <_multiply>:
    b8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b8de:	465f      	mov	r7, fp
    b8e0:	4656      	mov	r6, sl
    b8e2:	464d      	mov	r5, r9
    b8e4:	4644      	mov	r4, r8
    b8e6:	b4f0      	push	{r4, r5, r6, r7}
    b8e8:	690d      	ldr	r5, [r1, #16]
    b8ea:	6916      	ldr	r6, [r2, #16]
    b8ec:	b085      	sub	sp, #20
    b8ee:	1c0c      	adds	r4, r1, #0
    b8f0:	1c17      	adds	r7, r2, #0
    b8f2:	42b5      	cmp	r5, r6
    b8f4:	da03      	bge.n	b8fe <_multiply+0x22>
    b8f6:	1c35      	adds	r5, r6, #0
    b8f8:	690e      	ldr	r6, [r1, #16]
    b8fa:	1c0f      	adds	r7, r1, #0
    b8fc:	1c14      	adds	r4, r2, #0
    b8fe:	19aa      	adds	r2, r5, r6
    b900:	68a3      	ldr	r3, [r4, #8]
    b902:	4693      	mov	fp, r2
    b904:	6861      	ldr	r1, [r4, #4]
    b906:	459b      	cmp	fp, r3
    b908:	dd00      	ble.n	b90c <_multiply+0x30>
    b90a:	3101      	adds	r1, #1
    b90c:	f7ff fe78 	bl	b600 <_Balloc>
    b910:	1c01      	adds	r1, r0, #0
    b912:	9000      	str	r0, [sp, #0]
    b914:	4658      	mov	r0, fp
    b916:	3114      	adds	r1, #20
    b918:	0083      	lsls	r3, r0, #2
    b91a:	18cb      	adds	r3, r1, r3
    b91c:	9301      	str	r3, [sp, #4]
    b91e:	4299      	cmp	r1, r3
    b920:	d205      	bcs.n	b92e <_multiply+0x52>
    b922:	1c0b      	adds	r3, r1, #0
    b924:	2200      	movs	r2, #0
    b926:	c304      	stmia	r3!, {r2}
    b928:	9801      	ldr	r0, [sp, #4]
    b92a:	4298      	cmp	r0, r3
    b92c:	d8fb      	bhi.n	b926 <_multiply+0x4a>
    b92e:	3414      	adds	r4, #20
    b930:	00ab      	lsls	r3, r5, #2
    b932:	3714      	adds	r7, #20
    b934:	18e2      	adds	r2, r4, r3
    b936:	46ba      	mov	sl, r7
    b938:	00b3      	lsls	r3, r6, #2
    b93a:	4453      	add	r3, sl
    b93c:	9404      	str	r4, [sp, #16]
    b93e:	4691      	mov	r9, r2
    b940:	9302      	str	r3, [sp, #8]
    b942:	459a      	cmp	sl, r3
    b944:	d253      	bcs.n	b9ee <_multiply+0x112>
    b946:	9103      	str	r1, [sp, #12]
    b948:	4650      	mov	r0, sl
    b94a:	6803      	ldr	r3, [r0, #0]
    b94c:	4a36      	ldr	r2, [pc, #216]	; (ba28 <_multiply+0x14c>)
    b94e:	1c19      	adds	r1, r3, #0
    b950:	4011      	ands	r1, r2
    b952:	468c      	mov	ip, r1
    b954:	d01d      	beq.n	b992 <_multiply+0xb6>
    b956:	9e04      	ldr	r6, [sp, #16]
    b958:	9d03      	ldr	r5, [sp, #12]
    b95a:	2700      	movs	r7, #0
    b95c:	4690      	mov	r8, r2
    b95e:	ce02      	ldmia	r6!, {r1}
    b960:	4643      	mov	r3, r8
    b962:	400b      	ands	r3, r1
    b964:	4664      	mov	r4, ip
    b966:	435c      	muls	r4, r3
    b968:	6828      	ldr	r0, [r5, #0]
    b96a:	4643      	mov	r3, r8
    b96c:	4003      	ands	r3, r0
    b96e:	18fb      	adds	r3, r7, r3
    b970:	0c09      	lsrs	r1, r1, #16
    b972:	18e4      	adds	r4, r4, r3
    b974:	4663      	mov	r3, ip
    b976:	434b      	muls	r3, r1
    b978:	0c00      	lsrs	r0, r0, #16
    b97a:	0c22      	lsrs	r2, r4, #16
    b97c:	181b      	adds	r3, r3, r0
    b97e:	18d2      	adds	r2, r2, r3
    b980:	806a      	strh	r2, [r5, #2]
    b982:	802c      	strh	r4, [r5, #0]
    b984:	0c17      	lsrs	r7, r2, #16
    b986:	3504      	adds	r5, #4
    b988:	45b1      	cmp	r9, r6
    b98a:	d8e8      	bhi.n	b95e <_multiply+0x82>
    b98c:	602f      	str	r7, [r5, #0]
    b98e:	4652      	mov	r2, sl
    b990:	6813      	ldr	r3, [r2, #0]
    b992:	0c1f      	lsrs	r7, r3, #16
    b994:	2f00      	cmp	r7, #0
    b996:	d021      	beq.n	b9dc <_multiply+0x100>
    b998:	9b03      	ldr	r3, [sp, #12]
    b99a:	4923      	ldr	r1, [pc, #140]	; (ba28 <_multiply+0x14c>)
    b99c:	681d      	ldr	r5, [r3, #0]
    b99e:	2000      	movs	r0, #0
    b9a0:	9e04      	ldr	r6, [sp, #16]
    b9a2:	4684      	mov	ip, r0
    b9a4:	1c1c      	adds	r4, r3, #0
    b9a6:	1c28      	adds	r0, r5, #0
    b9a8:	4688      	mov	r8, r1
    b9aa:	ce04      	ldmia	r6!, {r2}
    b9ac:	4643      	mov	r3, r8
    b9ae:	4013      	ands	r3, r2
    b9b0:	1c19      	adds	r1, r3, #0
    b9b2:	4379      	muls	r1, r7
    b9b4:	0c03      	lsrs	r3, r0, #16
    b9b6:	4463      	add	r3, ip
    b9b8:	0c12      	lsrs	r2, r2, #16
    b9ba:	18c9      	adds	r1, r1, r3
    b9bc:	1c13      	adds	r3, r2, #0
    b9be:	437b      	muls	r3, r7
    b9c0:	8061      	strh	r1, [r4, #2]
    b9c2:	8025      	strh	r5, [r4, #0]
    b9c4:	3404      	adds	r4, #4
    b9c6:	6820      	ldr	r0, [r4, #0]
    b9c8:	4642      	mov	r2, r8
    b9ca:	4002      	ands	r2, r0
    b9cc:	189b      	adds	r3, r3, r2
    b9ce:	0c09      	lsrs	r1, r1, #16
    b9d0:	18cd      	adds	r5, r1, r3
    b9d2:	0c2a      	lsrs	r2, r5, #16
    b9d4:	4694      	mov	ip, r2
    b9d6:	45b1      	cmp	r9, r6
    b9d8:	d8e7      	bhi.n	b9aa <_multiply+0xce>
    b9da:	6025      	str	r5, [r4, #0]
    b9dc:	2304      	movs	r3, #4
    b9de:	9802      	ldr	r0, [sp, #8]
    b9e0:	449a      	add	sl, r3
    b9e2:	4550      	cmp	r0, sl
    b9e4:	d903      	bls.n	b9ee <_multiply+0x112>
    b9e6:	9903      	ldr	r1, [sp, #12]
    b9e8:	3104      	adds	r1, #4
    b9ea:	9103      	str	r1, [sp, #12]
    b9ec:	e7ac      	b.n	b948 <_multiply+0x6c>
    b9ee:	465a      	mov	r2, fp
    b9f0:	2a00      	cmp	r2, #0
    b9f2:	dd0b      	ble.n	ba0c <_multiply+0x130>
    b9f4:	9a01      	ldr	r2, [sp, #4]
    b9f6:	e005      	b.n	ba04 <_multiply+0x128>
    b9f8:	2301      	movs	r3, #1
    b9fa:	425b      	negs	r3, r3
    b9fc:	449b      	add	fp, r3
    b9fe:	4658      	mov	r0, fp
    ba00:	2800      	cmp	r0, #0
    ba02:	d003      	beq.n	ba0c <_multiply+0x130>
    ba04:	3a04      	subs	r2, #4
    ba06:	6813      	ldr	r3, [r2, #0]
    ba08:	2b00      	cmp	r3, #0
    ba0a:	d0f5      	beq.n	b9f8 <_multiply+0x11c>
    ba0c:	9a00      	ldr	r2, [sp, #0]
    ba0e:	4659      	mov	r1, fp
    ba10:	1c10      	adds	r0, r2, #0
    ba12:	b005      	add	sp, #20
    ba14:	6111      	str	r1, [r2, #16]
    ba16:	bc3c      	pop	{r2, r3, r4, r5}
    ba18:	4690      	mov	r8, r2
    ba1a:	4699      	mov	r9, r3
    ba1c:	46a2      	mov	sl, r4
    ba1e:	46ab      	mov	fp, r5
    ba20:	bcf0      	pop	{r4, r5, r6, r7}
    ba22:	bc02      	pop	{r1}
    ba24:	4708      	bx	r1
    ba26:	46c0      	nop			; (mov r8, r8)
    ba28:	0000ffff 	.word	0x0000ffff

0000ba2c <_i2b>:
    ba2c:	b510      	push	{r4, lr}
    ba2e:	1c0c      	adds	r4, r1, #0
    ba30:	2101      	movs	r1, #1
    ba32:	f7ff fde5 	bl	b600 <_Balloc>
    ba36:	2301      	movs	r3, #1
    ba38:	6144      	str	r4, [r0, #20]
    ba3a:	6103      	str	r3, [r0, #16]
    ba3c:	bc10      	pop	{r4}
    ba3e:	bc02      	pop	{r1}
    ba40:	4708      	bx	r1
    ba42:	46c0      	nop			; (mov r8, r8)

0000ba44 <_multadd>:
    ba44:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba46:	4657      	mov	r7, sl
    ba48:	464e      	mov	r6, r9
    ba4a:	4645      	mov	r5, r8
    ba4c:	b4e0      	push	{r5, r6, r7}
    ba4e:	468a      	mov	sl, r1
    ba50:	1c16      	adds	r6, r2, #0
    ba52:	690a      	ldr	r2, [r1, #16]
    ba54:	4681      	mov	r9, r0
    ba56:	4f21      	ldr	r7, [pc, #132]	; (badc <_multadd+0x98>)
    ba58:	4650      	mov	r0, sl
    ba5a:	1c1d      	adds	r5, r3, #0
    ba5c:	4690      	mov	r8, r2
    ba5e:	3014      	adds	r0, #20
    ba60:	2400      	movs	r4, #0
    ba62:	6803      	ldr	r3, [r0, #0]
    ba64:	1c1a      	adds	r2, r3, #0
    ba66:	403a      	ands	r2, r7
    ba68:	1c31      	adds	r1, r6, #0
    ba6a:	4351      	muls	r1, r2
    ba6c:	0c1b      	lsrs	r3, r3, #16
    ba6e:	4373      	muls	r3, r6
    ba70:	1949      	adds	r1, r1, r5
    ba72:	0c0a      	lsrs	r2, r1, #16
    ba74:	189b      	adds	r3, r3, r2
    ba76:	0c1d      	lsrs	r5, r3, #16
    ba78:	4039      	ands	r1, r7
    ba7a:	041b      	lsls	r3, r3, #16
    ba7c:	185b      	adds	r3, r3, r1
    ba7e:	3401      	adds	r4, #1
    ba80:	c008      	stmia	r0!, {r3}
    ba82:	45a0      	cmp	r8, r4
    ba84:	dced      	bgt.n	ba62 <_multadd+0x1e>
    ba86:	2d00      	cmp	r5, #0
    ba88:	d00b      	beq.n	baa2 <_multadd+0x5e>
    ba8a:	4652      	mov	r2, sl
    ba8c:	6893      	ldr	r3, [r2, #8]
    ba8e:	4598      	cmp	r8, r3
    ba90:	da0f      	bge.n	bab2 <_multadd+0x6e>
    ba92:	4642      	mov	r2, r8
    ba94:	0093      	lsls	r3, r2, #2
    ba96:	4453      	add	r3, sl
    ba98:	615d      	str	r5, [r3, #20]
    ba9a:	4643      	mov	r3, r8
    ba9c:	3301      	adds	r3, #1
    ba9e:	4652      	mov	r2, sl
    baa0:	6113      	str	r3, [r2, #16]
    baa2:	4650      	mov	r0, sl
    baa4:	bc1c      	pop	{r2, r3, r4}
    baa6:	4690      	mov	r8, r2
    baa8:	4699      	mov	r9, r3
    baaa:	46a2      	mov	sl, r4
    baac:	bcf0      	pop	{r4, r5, r6, r7}
    baae:	bc02      	pop	{r1}
    bab0:	4708      	bx	r1
    bab2:	6851      	ldr	r1, [r2, #4]
    bab4:	4648      	mov	r0, r9
    bab6:	3101      	adds	r1, #1
    bab8:	f7ff fda2 	bl	b600 <_Balloc>
    babc:	4653      	mov	r3, sl
    babe:	691a      	ldr	r2, [r3, #16]
    bac0:	4651      	mov	r1, sl
    bac2:	0092      	lsls	r2, r2, #2
    bac4:	1c04      	adds	r4, r0, #0
    bac6:	310c      	adds	r1, #12
    bac8:	3208      	adds	r2, #8
    baca:	300c      	adds	r0, #12
    bacc:	f7fb fc82 	bl	73d4 <memcpy>
    bad0:	4651      	mov	r1, sl
    bad2:	4648      	mov	r0, r9
    bad4:	f7ff fc38 	bl	b348 <_Bfree>
    bad8:	46a2      	mov	sl, r4
    bada:	e7da      	b.n	ba92 <_multadd+0x4e>
    badc:	0000ffff 	.word	0x0000ffff

0000bae0 <_pow5mult>:
    bae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bae2:	4647      	mov	r7, r8
    bae4:	b480      	push	{r7}
    bae6:	2303      	movs	r3, #3
    bae8:	1c07      	adds	r7, r0, #0
    baea:	4688      	mov	r8, r1
    baec:	1c14      	adds	r4, r2, #0
    baee:	401a      	ands	r2, r3
    baf0:	d12c      	bne.n	bb4c <_pow5mult+0x6c>
    baf2:	10a6      	asrs	r6, r4, #2
    baf4:	2e00      	cmp	r6, #0
    baf6:	d01a      	beq.n	bb2e <_pow5mult+0x4e>
    baf8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    bafa:	2d00      	cmp	r5, #0
    bafc:	d107      	bne.n	bb0e <_pow5mult+0x2e>
    bafe:	e02f      	b.n	bb60 <_pow5mult+0x80>
    bb00:	1076      	asrs	r6, r6, #1
    bb02:	2e00      	cmp	r6, #0
    bb04:	d013      	beq.n	bb2e <_pow5mult+0x4e>
    bb06:	682c      	ldr	r4, [r5, #0]
    bb08:	2c00      	cmp	r4, #0
    bb0a:	d016      	beq.n	bb3a <_pow5mult+0x5a>
    bb0c:	1c25      	adds	r5, r4, #0
    bb0e:	07f3      	lsls	r3, r6, #31
    bb10:	d5f6      	bpl.n	bb00 <_pow5mult+0x20>
    bb12:	4641      	mov	r1, r8
    bb14:	1c2a      	adds	r2, r5, #0
    bb16:	1c38      	adds	r0, r7, #0
    bb18:	f7ff fee0 	bl	b8dc <_multiply>
    bb1c:	1076      	asrs	r6, r6, #1
    bb1e:	1c04      	adds	r4, r0, #0
    bb20:	4641      	mov	r1, r8
    bb22:	1c38      	adds	r0, r7, #0
    bb24:	f7ff fc10 	bl	b348 <_Bfree>
    bb28:	46a0      	mov	r8, r4
    bb2a:	2e00      	cmp	r6, #0
    bb2c:	d1eb      	bne.n	bb06 <_pow5mult+0x26>
    bb2e:	4640      	mov	r0, r8
    bb30:	bc04      	pop	{r2}
    bb32:	4690      	mov	r8, r2
    bb34:	bcf0      	pop	{r4, r5, r6, r7}
    bb36:	bc02      	pop	{r1}
    bb38:	4708      	bx	r1
    bb3a:	1c29      	adds	r1, r5, #0
    bb3c:	1c2a      	adds	r2, r5, #0
    bb3e:	1c38      	adds	r0, r7, #0
    bb40:	f7ff fecc 	bl	b8dc <_multiply>
    bb44:	6028      	str	r0, [r5, #0]
    bb46:	1c05      	adds	r5, r0, #0
    bb48:	6004      	str	r4, [r0, #0]
    bb4a:	e7e0      	b.n	bb0e <_pow5mult+0x2e>
    bb4c:	4b09      	ldr	r3, [pc, #36]	; (bb74 <_pow5mult+0x94>)
    bb4e:	0092      	lsls	r2, r2, #2
    bb50:	18d2      	adds	r2, r2, r3
    bb52:	3a04      	subs	r2, #4
    bb54:	6812      	ldr	r2, [r2, #0]
    bb56:	2300      	movs	r3, #0
    bb58:	f7ff ff74 	bl	ba44 <_multadd>
    bb5c:	4680      	mov	r8, r0
    bb5e:	e7c8      	b.n	baf2 <_pow5mult+0x12>
    bb60:	1c38      	adds	r0, r7, #0
    bb62:	4905      	ldr	r1, [pc, #20]	; (bb78 <_pow5mult+0x98>)
    bb64:	f7ff ff62 	bl	ba2c <_i2b>
    bb68:	2300      	movs	r3, #0
    bb6a:	1c05      	adds	r5, r0, #0
    bb6c:	64b8      	str	r0, [r7, #72]	; 0x48
    bb6e:	6003      	str	r3, [r0, #0]
    bb70:	e7cd      	b.n	bb0e <_pow5mult+0x2e>
    bb72:	46c0      	nop			; (mov r8, r8)
    bb74:	00012db0 	.word	0x00012db0
    bb78:	00000271 	.word	0x00000271

0000bb7c <_s2b>:
    bb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb7e:	4657      	mov	r7, sl
    bb80:	4646      	mov	r6, r8
    bb82:	b4c0      	push	{r6, r7}
    bb84:	1c06      	adds	r6, r0, #0
    bb86:	1c18      	adds	r0, r3, #0
    bb88:	1c0f      	adds	r7, r1, #0
    bb8a:	3008      	adds	r0, #8
    bb8c:	2109      	movs	r1, #9
    bb8e:	1c15      	adds	r5, r2, #0
    bb90:	4698      	mov	r8, r3
    bb92:	f000 fbe9 	bl	c368 <__aeabi_idiv>
    bb96:	2801      	cmp	r0, #1
    bb98:	dd3c      	ble.n	bc14 <_s2b+0x98>
    bb9a:	2301      	movs	r3, #1
    bb9c:	2100      	movs	r1, #0
    bb9e:	005b      	lsls	r3, r3, #1
    bba0:	3101      	adds	r1, #1
    bba2:	4298      	cmp	r0, r3
    bba4:	dcfb      	bgt.n	bb9e <_s2b+0x22>
    bba6:	1c30      	adds	r0, r6, #0
    bba8:	f7ff fd2a 	bl	b600 <_Balloc>
    bbac:	9b07      	ldr	r3, [sp, #28]
    bbae:	6143      	str	r3, [r0, #20]
    bbb0:	2301      	movs	r3, #1
    bbb2:	1c01      	adds	r1, r0, #0
    bbb4:	6103      	str	r3, [r0, #16]
    bbb6:	2d09      	cmp	r5, #9
    bbb8:	dd28      	ble.n	bc0c <_s2b+0x90>
    bbba:	2009      	movs	r0, #9
    bbbc:	19c0      	adds	r0, r0, r7
    bbbe:	4682      	mov	sl, r0
    bbc0:	2409      	movs	r4, #9
    bbc2:	5de3      	ldrb	r3, [r4, r7]
    bbc4:	1c30      	adds	r0, r6, #0
    bbc6:	3b30      	subs	r3, #48	; 0x30
    bbc8:	220a      	movs	r2, #10
    bbca:	f7ff ff3b 	bl	ba44 <_multadd>
    bbce:	3401      	adds	r4, #1
    bbd0:	1c01      	adds	r1, r0, #0
    bbd2:	42a5      	cmp	r5, r4
    bbd4:	d1f5      	bne.n	bbc2 <_s2b+0x46>
    bbd6:	4652      	mov	r2, sl
    bbd8:	1953      	adds	r3, r2, r5
    bbda:	3b08      	subs	r3, #8
    bbdc:	1c2a      	adds	r2, r5, #0
    bbde:	4590      	cmp	r8, r2
    bbe0:	dd0d      	ble.n	bbfe <_s2b+0x82>
    bbe2:	4640      	mov	r0, r8
    bbe4:	1c1c      	adds	r4, r3, #0
    bbe6:	1a83      	subs	r3, r0, r2
    bbe8:	18e5      	adds	r5, r4, r3
    bbea:	7823      	ldrb	r3, [r4, #0]
    bbec:	1c30      	adds	r0, r6, #0
    bbee:	3b30      	subs	r3, #48	; 0x30
    bbf0:	220a      	movs	r2, #10
    bbf2:	f7ff ff27 	bl	ba44 <_multadd>
    bbf6:	3401      	adds	r4, #1
    bbf8:	1c01      	adds	r1, r0, #0
    bbfa:	42ac      	cmp	r4, r5
    bbfc:	d1f5      	bne.n	bbea <_s2b+0x6e>
    bbfe:	1c08      	adds	r0, r1, #0
    bc00:	bc0c      	pop	{r2, r3}
    bc02:	4690      	mov	r8, r2
    bc04:	469a      	mov	sl, r3
    bc06:	bcf0      	pop	{r4, r5, r6, r7}
    bc08:	bc02      	pop	{r1}
    bc0a:	4708      	bx	r1
    bc0c:	1c3b      	adds	r3, r7, #0
    bc0e:	330a      	adds	r3, #10
    bc10:	2209      	movs	r2, #9
    bc12:	e7e4      	b.n	bbde <_s2b+0x62>
    bc14:	2100      	movs	r1, #0
    bc16:	e7c6      	b.n	bba6 <_s2b+0x2a>

0000bc18 <_realloc_r>:
    bc18:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc1a:	465f      	mov	r7, fp
    bc1c:	4656      	mov	r6, sl
    bc1e:	464d      	mov	r5, r9
    bc20:	4644      	mov	r4, r8
    bc22:	b4f0      	push	{r4, r5, r6, r7}
    bc24:	b085      	sub	sp, #20
    bc26:	4683      	mov	fp, r0
    bc28:	1c0e      	adds	r6, r1, #0
    bc2a:	1c15      	adds	r5, r2, #0
    bc2c:	2900      	cmp	r1, #0
    bc2e:	d100      	bne.n	bc32 <_realloc_r+0x1a>
    bc30:	e118      	b.n	be64 <_realloc_r+0x24c>
    bc32:	1c34      	adds	r4, r6, #0
    bc34:	3c08      	subs	r4, #8
    bc36:	f7ff fb83 	bl	b340 <__malloc_lock>
    bc3a:	6860      	ldr	r0, [r4, #4]
    bc3c:	1c2a      	adds	r2, r5, #0
    bc3e:	320b      	adds	r2, #11
    bc40:	4681      	mov	r9, r0
    bc42:	2a16      	cmp	r2, #22
    bc44:	d823      	bhi.n	bc8e <_realloc_r+0x76>
    bc46:	2110      	movs	r1, #16
    bc48:	9103      	str	r1, [sp, #12]
    bc4a:	2010      	movs	r0, #16
    bc4c:	9a03      	ldr	r2, [sp, #12]
    bc4e:	4295      	cmp	r5, r2
    bc50:	d823      	bhi.n	bc9a <_realloc_r+0x82>
    bc52:	2103      	movs	r1, #3
    bc54:	464a      	mov	r2, r9
    bc56:	438a      	bics	r2, r1
    bc58:	4690      	mov	r8, r2
    bc5a:	468c      	mov	ip, r1
    bc5c:	4580      	cmp	r8, r0
    bc5e:	db2a      	blt.n	bcb6 <_realloc_r+0x9e>
    bc60:	1c25      	adds	r5, r4, #0
    bc62:	46a2      	mov	sl, r4
    bc64:	3508      	adds	r5, #8
    bc66:	1c17      	adds	r7, r2, #0
    bc68:	9903      	ldr	r1, [sp, #12]
    bc6a:	1a78      	subs	r0, r7, r1
    bc6c:	280f      	cmp	r0, #15
    bc6e:	d900      	bls.n	bc72 <_realloc_r+0x5a>
    bc70:	e0fd      	b.n	be6e <_realloc_r+0x256>
    bc72:	6863      	ldr	r3, [r4, #4]
    bc74:	2101      	movs	r1, #1
    bc76:	400b      	ands	r3, r1
    bc78:	433b      	orrs	r3, r7
    bc7a:	6063      	str	r3, [r4, #4]
    bc7c:	4650      	mov	r0, sl
    bc7e:	183a      	adds	r2, r7, r0
    bc80:	6853      	ldr	r3, [r2, #4]
    bc82:	430b      	orrs	r3, r1
    bc84:	6053      	str	r3, [r2, #4]
    bc86:	4658      	mov	r0, fp
    bc88:	f7ff fb5c 	bl	b344 <__malloc_unlock>
    bc8c:	e009      	b.n	bca2 <_realloc_r+0x8a>
    bc8e:	2307      	movs	r3, #7
    bc90:	1c10      	adds	r0, r2, #0
    bc92:	4398      	bics	r0, r3
    bc94:	9003      	str	r0, [sp, #12]
    bc96:	2800      	cmp	r0, #0
    bc98:	dad8      	bge.n	bc4c <_realloc_r+0x34>
    bc9a:	230c      	movs	r3, #12
    bc9c:	465e      	mov	r6, fp
    bc9e:	6033      	str	r3, [r6, #0]
    bca0:	2500      	movs	r5, #0
    bca2:	1c28      	adds	r0, r5, #0
    bca4:	b005      	add	sp, #20
    bca6:	bc3c      	pop	{r2, r3, r4, r5}
    bca8:	4690      	mov	r8, r2
    bcaa:	4699      	mov	r9, r3
    bcac:	46a2      	mov	sl, r4
    bcae:	46ab      	mov	fp, r5
    bcb0:	bcf0      	pop	{r4, r5, r6, r7}
    bcb2:	bc02      	pop	{r1}
    bcb4:	4708      	bx	r1
    bcb6:	4bcd      	ldr	r3, [pc, #820]	; (bfec <_realloc_r+0x3d4>)
    bcb8:	1c21      	adds	r1, r4, #0
    bcba:	689a      	ldr	r2, [r3, #8]
    bcbc:	4441      	add	r1, r8
    bcbe:	46a2      	mov	sl, r4
    bcc0:	9300      	str	r3, [sp, #0]
    bcc2:	9201      	str	r2, [sp, #4]
    bcc4:	4291      	cmp	r1, r2
    bcc6:	d100      	bne.n	bcca <_realloc_r+0xb2>
    bcc8:	e0f2      	b.n	beb0 <_realloc_r+0x298>
    bcca:	684f      	ldr	r7, [r1, #4]
    bccc:	2301      	movs	r3, #1
    bcce:	1c3a      	adds	r2, r7, #0
    bcd0:	439a      	bics	r2, r3
    bcd2:	1852      	adds	r2, r2, r1
    bcd4:	6852      	ldr	r2, [r2, #4]
    bcd6:	421a      	tst	r2, r3
    bcd8:	d000      	beq.n	bcdc <_realloc_r+0xc4>
    bcda:	e0db      	b.n	be94 <_realloc_r+0x27c>
    bcdc:	4662      	mov	r2, ip
    bcde:	4397      	bics	r7, r2
    bce0:	46bc      	mov	ip, r7
    bce2:	4647      	mov	r7, r8
    bce4:	4467      	add	r7, ip
    bce6:	42b8      	cmp	r0, r7
    bce8:	dc00      	bgt.n	bcec <_realloc_r+0xd4>
    bcea:	e0d6      	b.n	be9a <_realloc_r+0x282>
    bcec:	464a      	mov	r2, r9
    bcee:	07d2      	lsls	r2, r2, #31
    bcf0:	d47d      	bmi.n	bdee <_realloc_r+0x1d6>
    bcf2:	6823      	ldr	r3, [r4, #0]
    bcf4:	1ae3      	subs	r3, r4, r3
    bcf6:	685a      	ldr	r2, [r3, #4]
    bcf8:	4699      	mov	r9, r3
    bcfa:	2303      	movs	r3, #3
    bcfc:	439a      	bics	r2, r3
    bcfe:	2900      	cmp	r1, #0
    bd00:	d040      	beq.n	bd84 <_realloc_r+0x16c>
    bd02:	9b01      	ldr	r3, [sp, #4]
    bd04:	4299      	cmp	r1, r3
    bd06:	d100      	bne.n	bd0a <_realloc_r+0xf2>
    bd08:	e0f0      	b.n	beec <_realloc_r+0x2d4>
    bd0a:	4643      	mov	r3, r8
    bd0c:	189f      	adds	r7, r3, r2
    bd0e:	4662      	mov	r2, ip
    bd10:	19d2      	adds	r2, r2, r7
    bd12:	9204      	str	r2, [sp, #16]
    bd14:	4290      	cmp	r0, r2
    bd16:	dc37      	bgt.n	bd88 <_realloc_r+0x170>
    bd18:	68ca      	ldr	r2, [r1, #12]
    bd1a:	688b      	ldr	r3, [r1, #8]
    bd1c:	6093      	str	r3, [r2, #8]
    bd1e:	60da      	str	r2, [r3, #12]
    bd20:	464b      	mov	r3, r9
    bd22:	68da      	ldr	r2, [r3, #12]
    bd24:	689b      	ldr	r3, [r3, #8]
    bd26:	60da      	str	r2, [r3, #12]
    bd28:	6093      	str	r3, [r2, #8]
    bd2a:	4642      	mov	r2, r8
    bd2c:	464d      	mov	r5, r9
    bd2e:	3a04      	subs	r2, #4
    bd30:	46ca      	mov	sl, r9
    bd32:	3508      	adds	r5, #8
    bd34:	2a24      	cmp	r2, #36	; 0x24
    bd36:	d900      	bls.n	bd3a <_realloc_r+0x122>
    bd38:	e129      	b.n	bf8e <_realloc_r+0x376>
    bd3a:	1c30      	adds	r0, r6, #0
    bd3c:	1c2c      	adds	r4, r5, #0
    bd3e:	2a13      	cmp	r2, #19
    bd40:	d915      	bls.n	bd6e <_realloc_r+0x156>
    bd42:	1c31      	adds	r1, r6, #0
    bd44:	c908      	ldmia	r1!, {r3}
    bd46:	4648      	mov	r0, r9
    bd48:	6083      	str	r3, [r0, #8]
    bd4a:	6873      	ldr	r3, [r6, #4]
    bd4c:	3408      	adds	r4, #8
    bd4e:	60c3      	str	r3, [r0, #12]
    bd50:	1d08      	adds	r0, r1, #4
    bd52:	2a1b      	cmp	r2, #27
    bd54:	d90b      	bls.n	bd6e <_realloc_r+0x156>
    bd56:	684b      	ldr	r3, [r1, #4]
    bd58:	4649      	mov	r1, r9
    bd5a:	610b      	str	r3, [r1, #16]
    bd5c:	6843      	ldr	r3, [r0, #4]
    bd5e:	1d01      	adds	r1, r0, #4
    bd60:	464e      	mov	r6, r9
    bd62:	6173      	str	r3, [r6, #20]
    bd64:	3408      	adds	r4, #8
    bd66:	1d08      	adds	r0, r1, #4
    bd68:	2a24      	cmp	r2, #36	; 0x24
    bd6a:	d100      	bne.n	bd6e <_realloc_r+0x156>
    bd6c:	e128      	b.n	bfc0 <_realloc_r+0x3a8>
    bd6e:	1c01      	adds	r1, r0, #0
    bd70:	c908      	ldmia	r1!, {r3}
    bd72:	1c22      	adds	r2, r4, #0
    bd74:	c208      	stmia	r2!, {r3}
    bd76:	6843      	ldr	r3, [r0, #4]
    bd78:	6063      	str	r3, [r4, #4]
    bd7a:	9f04      	ldr	r7, [sp, #16]
    bd7c:	684b      	ldr	r3, [r1, #4]
    bd7e:	464c      	mov	r4, r9
    bd80:	6053      	str	r3, [r2, #4]
    bd82:	e771      	b.n	bc68 <_realloc_r+0x50>
    bd84:	4641      	mov	r1, r8
    bd86:	188f      	adds	r7, r1, r2
    bd88:	42b8      	cmp	r0, r7
    bd8a:	dc30      	bgt.n	bdee <_realloc_r+0x1d6>
    bd8c:	464b      	mov	r3, r9
    bd8e:	68da      	ldr	r2, [r3, #12]
    bd90:	689b      	ldr	r3, [r3, #8]
    bd92:	60da      	str	r2, [r3, #12]
    bd94:	6093      	str	r3, [r2, #8]
    bd96:	4642      	mov	r2, r8
    bd98:	464d      	mov	r5, r9
    bd9a:	3a04      	subs	r2, #4
    bd9c:	46ca      	mov	sl, r9
    bd9e:	3508      	adds	r5, #8
    bda0:	2a24      	cmp	r2, #36	; 0x24
    bda2:	d900      	bls.n	bda6 <_realloc_r+0x18e>
    bda4:	e0fa      	b.n	bf9c <_realloc_r+0x384>
    bda6:	1c30      	adds	r0, r6, #0
    bda8:	1c2c      	adds	r4, r5, #0
    bdaa:	2a13      	cmp	r2, #19
    bdac:	d915      	bls.n	bdda <_realloc_r+0x1c2>
    bdae:	1c31      	adds	r1, r6, #0
    bdb0:	c908      	ldmia	r1!, {r3}
    bdb2:	4648      	mov	r0, r9
    bdb4:	6083      	str	r3, [r0, #8]
    bdb6:	6873      	ldr	r3, [r6, #4]
    bdb8:	3408      	adds	r4, #8
    bdba:	60c3      	str	r3, [r0, #12]
    bdbc:	1d08      	adds	r0, r1, #4
    bdbe:	2a1b      	cmp	r2, #27
    bdc0:	d90b      	bls.n	bdda <_realloc_r+0x1c2>
    bdc2:	684b      	ldr	r3, [r1, #4]
    bdc4:	4649      	mov	r1, r9
    bdc6:	610b      	str	r3, [r1, #16]
    bdc8:	6843      	ldr	r3, [r0, #4]
    bdca:	1d01      	adds	r1, r0, #4
    bdcc:	464e      	mov	r6, r9
    bdce:	6173      	str	r3, [r6, #20]
    bdd0:	3408      	adds	r4, #8
    bdd2:	1d08      	adds	r0, r1, #4
    bdd4:	2a24      	cmp	r2, #36	; 0x24
    bdd6:	d100      	bne.n	bdda <_realloc_r+0x1c2>
    bdd8:	e0f9      	b.n	bfce <_realloc_r+0x3b6>
    bdda:	1c01      	adds	r1, r0, #0
    bddc:	c908      	ldmia	r1!, {r3}
    bdde:	1c22      	adds	r2, r4, #0
    bde0:	c208      	stmia	r2!, {r3}
    bde2:	6843      	ldr	r3, [r0, #4]
    bde4:	6063      	str	r3, [r4, #4]
    bde6:	684b      	ldr	r3, [r1, #4]
    bde8:	464c      	mov	r4, r9
    bdea:	6053      	str	r3, [r2, #4]
    bdec:	e73c      	b.n	bc68 <_realloc_r+0x50>
    bdee:	1c29      	adds	r1, r5, #0
    bdf0:	4658      	mov	r0, fp
    bdf2:	f7fe ff41 	bl	ac78 <_malloc_r>
    bdf6:	1c05      	adds	r5, r0, #0
    bdf8:	2800      	cmp	r0, #0
    bdfa:	d100      	bne.n	bdfe <_realloc_r+0x1e6>
    bdfc:	e743      	b.n	bc86 <_realloc_r+0x6e>
    bdfe:	6863      	ldr	r3, [r4, #4]
    be00:	2201      	movs	r2, #1
    be02:	1c01      	adds	r1, r0, #0
    be04:	4393      	bics	r3, r2
    be06:	3908      	subs	r1, #8
    be08:	18e3      	adds	r3, r4, r3
    be0a:	4299      	cmp	r1, r3
    be0c:	d100      	bne.n	be10 <_realloc_r+0x1f8>
    be0e:	e0b6      	b.n	bf7e <_realloc_r+0x366>
    be10:	4642      	mov	r2, r8
    be12:	3a04      	subs	r2, #4
    be14:	2a24      	cmp	r2, #36	; 0x24
    be16:	d847      	bhi.n	bea8 <_realloc_r+0x290>
    be18:	1c30      	adds	r0, r6, #0
    be1a:	1c2c      	adds	r4, r5, #0
    be1c:	2a13      	cmp	r2, #19
    be1e:	d914      	bls.n	be4a <_realloc_r+0x232>
    be20:	1c37      	adds	r7, r6, #0
    be22:	cf08      	ldmia	r7!, {r3}
    be24:	1c29      	adds	r1, r5, #0
    be26:	c108      	stmia	r1!, {r3}
    be28:	6873      	ldr	r3, [r6, #4]
    be2a:	1d0c      	adds	r4, r1, #4
    be2c:	606b      	str	r3, [r5, #4]
    be2e:	1d38      	adds	r0, r7, #4
    be30:	2a1b      	cmp	r2, #27
    be32:	d90a      	bls.n	be4a <_realloc_r+0x232>
    be34:	687b      	ldr	r3, [r7, #4]
    be36:	604b      	str	r3, [r1, #4]
    be38:	6843      	ldr	r3, [r0, #4]
    be3a:	1d27      	adds	r7, r4, #4
    be3c:	1d01      	adds	r1, r0, #4
    be3e:	6063      	str	r3, [r4, #4]
    be40:	1d08      	adds	r0, r1, #4
    be42:	1d3c      	adds	r4, r7, #4
    be44:	2a24      	cmp	r2, #36	; 0x24
    be46:	d100      	bne.n	be4a <_realloc_r+0x232>
    be48:	e0ae      	b.n	bfa8 <_realloc_r+0x390>
    be4a:	1c01      	adds	r1, r0, #0
    be4c:	c908      	ldmia	r1!, {r3}
    be4e:	1c22      	adds	r2, r4, #0
    be50:	c208      	stmia	r2!, {r3}
    be52:	6843      	ldr	r3, [r0, #4]
    be54:	6063      	str	r3, [r4, #4]
    be56:	684b      	ldr	r3, [r1, #4]
    be58:	6053      	str	r3, [r2, #4]
    be5a:	4658      	mov	r0, fp
    be5c:	1c31      	adds	r1, r6, #0
    be5e:	f7fe fbbb 	bl	a5d8 <_free_r>
    be62:	e710      	b.n	bc86 <_realloc_r+0x6e>
    be64:	1c11      	adds	r1, r2, #0
    be66:	f7fe ff07 	bl	ac78 <_malloc_r>
    be6a:	1c05      	adds	r5, r0, #0
    be6c:	e719      	b.n	bca2 <_realloc_r+0x8a>
    be6e:	6863      	ldr	r3, [r4, #4]
    be70:	2201      	movs	r2, #1
    be72:	9e03      	ldr	r6, [sp, #12]
    be74:	4013      	ands	r3, r2
    be76:	4333      	orrs	r3, r6
    be78:	6063      	str	r3, [r4, #4]
    be7a:	1c03      	adds	r3, r0, #0
    be7c:	4451      	add	r1, sl
    be7e:	4313      	orrs	r3, r2
    be80:	604b      	str	r3, [r1, #4]
    be82:	1808      	adds	r0, r1, r0
    be84:	6843      	ldr	r3, [r0, #4]
    be86:	4313      	orrs	r3, r2
    be88:	6043      	str	r3, [r0, #4]
    be8a:	3108      	adds	r1, #8
    be8c:	4658      	mov	r0, fp
    be8e:	f7fe fba3 	bl	a5d8 <_free_r>
    be92:	e6f8      	b.n	bc86 <_realloc_r+0x6e>
    be94:	2100      	movs	r1, #0
    be96:	468c      	mov	ip, r1
    be98:	e728      	b.n	bcec <_realloc_r+0xd4>
    be9a:	68ca      	ldr	r2, [r1, #12]
    be9c:	688b      	ldr	r3, [r1, #8]
    be9e:	1c25      	adds	r5, r4, #0
    bea0:	3508      	adds	r5, #8
    bea2:	60da      	str	r2, [r3, #12]
    bea4:	6093      	str	r3, [r2, #8]
    bea6:	e6df      	b.n	bc68 <_realloc_r+0x50>
    bea8:	1c31      	adds	r1, r6, #0
    beaa:	f7ff f9db 	bl	b264 <memmove>
    beae:	e7d4      	b.n	be5a <_realloc_r+0x242>
    beb0:	684b      	ldr	r3, [r1, #4]
    beb2:	4662      	mov	r2, ip
    beb4:	4393      	bics	r3, r2
    beb6:	469c      	mov	ip, r3
    beb8:	9b03      	ldr	r3, [sp, #12]
    beba:	4642      	mov	r2, r8
    bebc:	4462      	add	r2, ip
    bebe:	3310      	adds	r3, #16
    bec0:	429a      	cmp	r2, r3
    bec2:	da00      	bge.n	bec6 <_realloc_r+0x2ae>
    bec4:	e712      	b.n	bcec <_realloc_r+0xd4>
    bec6:	9903      	ldr	r1, [sp, #12]
    bec8:	9b00      	ldr	r3, [sp, #0]
    beca:	9e03      	ldr	r6, [sp, #12]
    becc:	4451      	add	r1, sl
    bece:	6099      	str	r1, [r3, #8]
    bed0:	1b93      	subs	r3, r2, r6
    bed2:	2201      	movs	r2, #1
    bed4:	4313      	orrs	r3, r2
    bed6:	604b      	str	r3, [r1, #4]
    bed8:	6863      	ldr	r3, [r4, #4]
    beda:	4013      	ands	r3, r2
    bedc:	4333      	orrs	r3, r6
    bede:	6063      	str	r3, [r4, #4]
    bee0:	4658      	mov	r0, fp
    bee2:	f7ff fa2f 	bl	b344 <__malloc_unlock>
    bee6:	1c25      	adds	r5, r4, #0
    bee8:	3508      	adds	r5, #8
    beea:	e6da      	b.n	bca2 <_realloc_r+0x8a>
    beec:	4641      	mov	r1, r8
    beee:	9b03      	ldr	r3, [sp, #12]
    bef0:	188f      	adds	r7, r1, r2
    bef2:	4662      	mov	r2, ip
    bef4:	19d2      	adds	r2, r2, r7
    bef6:	3310      	adds	r3, #16
    bef8:	9202      	str	r2, [sp, #8]
    befa:	429a      	cmp	r2, r3
    befc:	da00      	bge.n	bf00 <_realloc_r+0x2e8>
    befe:	e743      	b.n	bd88 <_realloc_r+0x170>
    bf00:	464b      	mov	r3, r9
    bf02:	68da      	ldr	r2, [r3, #12]
    bf04:	689b      	ldr	r3, [r3, #8]
    bf06:	60da      	str	r2, [r3, #12]
    bf08:	6093      	str	r3, [r2, #8]
    bf0a:	4642      	mov	r2, r8
    bf0c:	464d      	mov	r5, r9
    bf0e:	3a04      	subs	r2, #4
    bf10:	3508      	adds	r5, #8
    bf12:	2a24      	cmp	r2, #36	; 0x24
    bf14:	d84f      	bhi.n	bfb6 <_realloc_r+0x39e>
    bf16:	1c30      	adds	r0, r6, #0
    bf18:	1c2c      	adds	r4, r5, #0
    bf1a:	2a13      	cmp	r2, #19
    bf1c:	d914      	bls.n	bf48 <_realloc_r+0x330>
    bf1e:	1c31      	adds	r1, r6, #0
    bf20:	c908      	ldmia	r1!, {r3}
    bf22:	4648      	mov	r0, r9
    bf24:	6083      	str	r3, [r0, #8]
    bf26:	6873      	ldr	r3, [r6, #4]
    bf28:	3408      	adds	r4, #8
    bf2a:	60c3      	str	r3, [r0, #12]
    bf2c:	1d08      	adds	r0, r1, #4
    bf2e:	2a1b      	cmp	r2, #27
    bf30:	d90a      	bls.n	bf48 <_realloc_r+0x330>
    bf32:	684b      	ldr	r3, [r1, #4]
    bf34:	4649      	mov	r1, r9
    bf36:	610b      	str	r3, [r1, #16]
    bf38:	6843      	ldr	r3, [r0, #4]
    bf3a:	1d01      	adds	r1, r0, #4
    bf3c:	464e      	mov	r6, r9
    bf3e:	6173      	str	r3, [r6, #20]
    bf40:	3408      	adds	r4, #8
    bf42:	1d08      	adds	r0, r1, #4
    bf44:	2a24      	cmp	r2, #36	; 0x24
    bf46:	d049      	beq.n	bfdc <_realloc_r+0x3c4>
    bf48:	1c01      	adds	r1, r0, #0
    bf4a:	c908      	ldmia	r1!, {r3}
    bf4c:	1c22      	adds	r2, r4, #0
    bf4e:	c208      	stmia	r2!, {r3}
    bf50:	6843      	ldr	r3, [r0, #4]
    bf52:	6063      	str	r3, [r4, #4]
    bf54:	684b      	ldr	r3, [r1, #4]
    bf56:	6053      	str	r3, [r2, #4]
    bf58:	9a02      	ldr	r2, [sp, #8]
    bf5a:	9e03      	ldr	r6, [sp, #12]
    bf5c:	9903      	ldr	r1, [sp, #12]
    bf5e:	1b93      	subs	r3, r2, r6
    bf60:	2201      	movs	r2, #1
    bf62:	4449      	add	r1, r9
    bf64:	9800      	ldr	r0, [sp, #0]
    bf66:	4313      	orrs	r3, r2
    bf68:	604b      	str	r3, [r1, #4]
    bf6a:	6081      	str	r1, [r0, #8]
    bf6c:	4648      	mov	r0, r9
    bf6e:	6843      	ldr	r3, [r0, #4]
    bf70:	4013      	ands	r3, r2
    bf72:	4333      	orrs	r3, r6
    bf74:	6043      	str	r3, [r0, #4]
    bf76:	4658      	mov	r0, fp
    bf78:	f7ff f9e4 	bl	b344 <__malloc_unlock>
    bf7c:	e691      	b.n	bca2 <_realloc_r+0x8a>
    bf7e:	684b      	ldr	r3, [r1, #4]
    bf80:	2203      	movs	r2, #3
    bf82:	4393      	bics	r3, r2
    bf84:	4640      	mov	r0, r8
    bf86:	1c25      	adds	r5, r4, #0
    bf88:	18c7      	adds	r7, r0, r3
    bf8a:	3508      	adds	r5, #8
    bf8c:	e66c      	b.n	bc68 <_realloc_r+0x50>
    bf8e:	1c28      	adds	r0, r5, #0
    bf90:	1c31      	adds	r1, r6, #0
    bf92:	f7ff f967 	bl	b264 <memmove>
    bf96:	9f04      	ldr	r7, [sp, #16]
    bf98:	464c      	mov	r4, r9
    bf9a:	e665      	b.n	bc68 <_realloc_r+0x50>
    bf9c:	1c28      	adds	r0, r5, #0
    bf9e:	1c31      	adds	r1, r6, #0
    bfa0:	f7ff f960 	bl	b264 <memmove>
    bfa4:	464c      	mov	r4, r9
    bfa6:	e65f      	b.n	bc68 <_realloc_r+0x50>
    bfa8:	684b      	ldr	r3, [r1, #4]
    bfaa:	607b      	str	r3, [r7, #4]
    bfac:	6843      	ldr	r3, [r0, #4]
    bfae:	3008      	adds	r0, #8
    bfb0:	6063      	str	r3, [r4, #4]
    bfb2:	3408      	adds	r4, #8
    bfb4:	e749      	b.n	be4a <_realloc_r+0x232>
    bfb6:	1c28      	adds	r0, r5, #0
    bfb8:	1c31      	adds	r1, r6, #0
    bfba:	f7ff f953 	bl	b264 <memmove>
    bfbe:	e7cb      	b.n	bf58 <_realloc_r+0x340>
    bfc0:	684b      	ldr	r3, [r1, #4]
    bfc2:	61b3      	str	r3, [r6, #24]
    bfc4:	6843      	ldr	r3, [r0, #4]
    bfc6:	3408      	adds	r4, #8
    bfc8:	3008      	adds	r0, #8
    bfca:	61f3      	str	r3, [r6, #28]
    bfcc:	e6cf      	b.n	bd6e <_realloc_r+0x156>
    bfce:	684b      	ldr	r3, [r1, #4]
    bfd0:	61b3      	str	r3, [r6, #24]
    bfd2:	6843      	ldr	r3, [r0, #4]
    bfd4:	3408      	adds	r4, #8
    bfd6:	3008      	adds	r0, #8
    bfd8:	61f3      	str	r3, [r6, #28]
    bfda:	e6fe      	b.n	bdda <_realloc_r+0x1c2>
    bfdc:	684b      	ldr	r3, [r1, #4]
    bfde:	61b3      	str	r3, [r6, #24]
    bfe0:	6843      	ldr	r3, [r0, #4]
    bfe2:	3408      	adds	r4, #8
    bfe4:	3008      	adds	r0, #8
    bfe6:	61f3      	str	r3, [r6, #28]
    bfe8:	e7ae      	b.n	bf48 <_realloc_r+0x330>
    bfea:	46c0      	nop			; (mov r8, r8)
    bfec:	40000428 	.word	0x40000428

0000bff0 <isinf>:
    bff0:	424a      	negs	r2, r1
    bff2:	4b06      	ldr	r3, [pc, #24]	; (c00c <isinf+0x1c>)
    bff4:	430a      	orrs	r2, r1
    bff6:	4003      	ands	r3, r0
    bff8:	0fd2      	lsrs	r2, r2, #31
    bffa:	431a      	orrs	r2, r3
    bffc:	4b04      	ldr	r3, [pc, #16]	; (c010 <isinf+0x20>)
    bffe:	1a9b      	subs	r3, r3, r2
    c000:	425a      	negs	r2, r3
    c002:	4313      	orrs	r3, r2
    c004:	0fdb      	lsrs	r3, r3, #31
    c006:	2001      	movs	r0, #1
    c008:	1ac0      	subs	r0, r0, r3
    c00a:	4770      	bx	lr
    c00c:	7fffffff 	.word	0x7fffffff
    c010:	7ff00000 	.word	0x7ff00000

0000c014 <isnan>:
    c014:	424a      	negs	r2, r1
    c016:	4b04      	ldr	r3, [pc, #16]	; (c028 <isnan+0x14>)
    c018:	430a      	orrs	r2, r1
    c01a:	4003      	ands	r3, r0
    c01c:	0fd2      	lsrs	r2, r2, #31
    c01e:	4803      	ldr	r0, [pc, #12]	; (c02c <isnan+0x18>)
    c020:	431a      	orrs	r2, r3
    c022:	1a80      	subs	r0, r0, r2
    c024:	0fc0      	lsrs	r0, r0, #31
    c026:	4770      	bx	lr
    c028:	7fffffff 	.word	0x7fffffff
    c02c:	7ff00000 	.word	0x7ff00000

0000c030 <__sclose>:
    c030:	b500      	push	{lr}
    c032:	4b04      	ldr	r3, [pc, #16]	; (c044 <__sclose+0x14>)
    c034:	1c02      	adds	r2, r0, #0
    c036:	6818      	ldr	r0, [r3, #0]
    c038:	230e      	movs	r3, #14
    c03a:	5ed1      	ldrsh	r1, [r2, r3]
    c03c:	f006 fc50 	bl	128e0 <___close_r_from_thumb>
    c040:	bc02      	pop	{r1}
    c042:	4708      	bx	r1
    c044:	40000014 	.word	0x40000014

0000c048 <__sseek>:
    c048:	b530      	push	{r4, r5, lr}
    c04a:	1c13      	adds	r3, r2, #0
    c04c:	4a0c      	ldr	r2, [pc, #48]	; (c080 <__sseek+0x38>)
    c04e:	1c05      	adds	r5, r0, #0
    c050:	1c0c      	adds	r4, r1, #0
    c052:	6810      	ldr	r0, [r2, #0]
    c054:	220e      	movs	r2, #14
    c056:	5ea9      	ldrsh	r1, [r5, r2]
    c058:	1c22      	adds	r2, r4, #0
    c05a:	f006 fc51 	bl	12900 <___lseek_r_from_thumb>
    c05e:	1c43      	adds	r3, r0, #1
    c060:	d008      	beq.n	c074 <__sseek+0x2c>
    c062:	89ab      	ldrh	r3, [r5, #12]
    c064:	2280      	movs	r2, #128	; 0x80
    c066:	0152      	lsls	r2, r2, #5
    c068:	4313      	orrs	r3, r2
    c06a:	81ab      	strh	r3, [r5, #12]
    c06c:	6528      	str	r0, [r5, #80]	; 0x50
    c06e:	bc30      	pop	{r4, r5}
    c070:	bc02      	pop	{r1}
    c072:	4708      	bx	r1
    c074:	89ab      	ldrh	r3, [r5, #12]
    c076:	4a03      	ldr	r2, [pc, #12]	; (c084 <__sseek+0x3c>)
    c078:	4013      	ands	r3, r2
    c07a:	81ab      	strh	r3, [r5, #12]
    c07c:	e7f7      	b.n	c06e <__sseek+0x26>
    c07e:	46c0      	nop			; (mov r8, r8)
    c080:	40000014 	.word	0x40000014
    c084:	ffffefff 	.word	0xffffefff

0000c088 <__swrite>:
    c088:	b5f0      	push	{r4, r5, r6, r7, lr}
    c08a:	1c17      	adds	r7, r2, #0
    c08c:	8982      	ldrh	r2, [r0, #12]
    c08e:	1c04      	adds	r4, r0, #0
    c090:	1c0e      	adds	r6, r1, #0
    c092:	05d3      	lsls	r3, r2, #23
    c094:	d40d      	bmi.n	c0b2 <__swrite+0x2a>
    c096:	4d0c      	ldr	r5, [pc, #48]	; (c0c8 <__swrite+0x40>)
    c098:	4b0c      	ldr	r3, [pc, #48]	; (c0cc <__swrite+0x44>)
    c09a:	4013      	ands	r3, r2
    c09c:	81a3      	strh	r3, [r4, #12]
    c09e:	6828      	ldr	r0, [r5, #0]
    c0a0:	230e      	movs	r3, #14
    c0a2:	5ee1      	ldrsh	r1, [r4, r3]
    c0a4:	1c32      	adds	r2, r6, #0
    c0a6:	1c3b      	adds	r3, r7, #0
    c0a8:	f006 fc36 	bl	12918 <___write_r_from_thumb>
    c0ac:	bcf0      	pop	{r4, r5, r6, r7}
    c0ae:	bc02      	pop	{r1}
    c0b0:	4708      	bx	r1
    c0b2:	4d05      	ldr	r5, [pc, #20]	; (c0c8 <__swrite+0x40>)
    c0b4:	230e      	movs	r3, #14
    c0b6:	5ee1      	ldrsh	r1, [r4, r3]
    c0b8:	2200      	movs	r2, #0
    c0ba:	6828      	ldr	r0, [r5, #0]
    c0bc:	2302      	movs	r3, #2
    c0be:	f006 fc1f 	bl	12900 <___lseek_r_from_thumb>
    c0c2:	89a2      	ldrh	r2, [r4, #12]
    c0c4:	e7e8      	b.n	c098 <__swrite+0x10>
    c0c6:	46c0      	nop			; (mov r8, r8)
    c0c8:	40000014 	.word	0x40000014
    c0cc:	ffffefff 	.word	0xffffefff

0000c0d0 <__sread>:
    c0d0:	b530      	push	{r4, r5, lr}
    c0d2:	1c13      	adds	r3, r2, #0
    c0d4:	4a0a      	ldr	r2, [pc, #40]	; (c100 <__sread+0x30>)
    c0d6:	1c05      	adds	r5, r0, #0
    c0d8:	1c0c      	adds	r4, r1, #0
    c0da:	6810      	ldr	r0, [r2, #0]
    c0dc:	220e      	movs	r2, #14
    c0de:	5ea9      	ldrsh	r1, [r5, r2]
    c0e0:	1c22      	adds	r2, r4, #0
    c0e2:	f006 fc15 	bl	12910 <___read_r_from_thumb>
    c0e6:	2800      	cmp	r0, #0
    c0e8:	db05      	blt.n	c0f6 <__sread+0x26>
    c0ea:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    c0ec:	181b      	adds	r3, r3, r0
    c0ee:	652b      	str	r3, [r5, #80]	; 0x50
    c0f0:	bc30      	pop	{r4, r5}
    c0f2:	bc02      	pop	{r1}
    c0f4:	4708      	bx	r1
    c0f6:	89ab      	ldrh	r3, [r5, #12]
    c0f8:	4a02      	ldr	r2, [pc, #8]	; (c104 <__sread+0x34>)
    c0fa:	4013      	ands	r3, r2
    c0fc:	81ab      	strh	r3, [r5, #12]
    c0fe:	e7f7      	b.n	c0f0 <__sread+0x20>
    c100:	40000014 	.word	0x40000014
    c104:	ffffefff 	.word	0xffffefff

0000c108 <strcmp>:
    c108:	b530      	push	{r4, r5, lr}
    c10a:	1c02      	adds	r2, r0, #0
    c10c:	430a      	orrs	r2, r1
    c10e:	2303      	movs	r3, #3
    c110:	1c04      	adds	r4, r0, #0
    c112:	421a      	tst	r2, r3
    c114:	d11e      	bne.n	c154 <strcmp+0x4c>
    c116:	6802      	ldr	r2, [r0, #0]
    c118:	680b      	ldr	r3, [r1, #0]
    c11a:	429a      	cmp	r2, r3
    c11c:	d111      	bne.n	c142 <strcmp+0x3a>
    c11e:	4c12      	ldr	r4, [pc, #72]	; (c168 <strcmp+0x60>)
    c120:	1913      	adds	r3, r2, r4
    c122:	4c12      	ldr	r4, [pc, #72]	; (c16c <strcmp+0x64>)
    c124:	4023      	ands	r3, r4
    c126:	4393      	bics	r3, r2
    c128:	d005      	beq.n	c136 <strcmp+0x2e>
    c12a:	e01b      	b.n	c164 <strcmp+0x5c>
    c12c:	4d0e      	ldr	r5, [pc, #56]	; (c168 <strcmp+0x60>)
    c12e:	1953      	adds	r3, r2, r5
    c130:	4023      	ands	r3, r4
    c132:	4393      	bics	r3, r2
    c134:	d116      	bne.n	c164 <strcmp+0x5c>
    c136:	3004      	adds	r0, #4
    c138:	3104      	adds	r1, #4
    c13a:	6802      	ldr	r2, [r0, #0]
    c13c:	680b      	ldr	r3, [r1, #0]
    c13e:	429a      	cmp	r2, r3
    c140:	d0f4      	beq.n	c12c <strcmp+0x24>
    c142:	1c04      	adds	r4, r0, #0
    c144:	7823      	ldrb	r3, [r4, #0]
    c146:	2b00      	cmp	r3, #0
    c148:	d007      	beq.n	c15a <strcmp+0x52>
    c14a:	7808      	ldrb	r0, [r1, #0]
    c14c:	4298      	cmp	r0, r3
    c14e:	d105      	bne.n	c15c <strcmp+0x54>
    c150:	3401      	adds	r4, #1
    c152:	3101      	adds	r1, #1
    c154:	7823      	ldrb	r3, [r4, #0]
    c156:	2b00      	cmp	r3, #0
    c158:	d1f7      	bne.n	c14a <strcmp+0x42>
    c15a:	7808      	ldrb	r0, [r1, #0]
    c15c:	1a18      	subs	r0, r3, r0
    c15e:	bc30      	pop	{r4, r5}
    c160:	bc02      	pop	{r1}
    c162:	4708      	bx	r1
    c164:	2000      	movs	r0, #0
    c166:	e7fa      	b.n	c15e <strcmp+0x56>
    c168:	fefefeff 	.word	0xfefefeff
    c16c:	80808080 	.word	0x80808080

0000c170 <strlen>:
    c170:	b530      	push	{r4, r5, lr}
    c172:	2303      	movs	r3, #3
    c174:	1c04      	adds	r4, r0, #0
    c176:	4218      	tst	r0, r3
    c178:	d116      	bne.n	c1a8 <strlen+0x38>
    c17a:	490f      	ldr	r1, [pc, #60]	; (c1b8 <strlen+0x48>)
    c17c:	6802      	ldr	r2, [r0, #0]
    c17e:	1853      	adds	r3, r2, r1
    c180:	490e      	ldr	r1, [pc, #56]	; (c1bc <strlen+0x4c>)
    c182:	400b      	ands	r3, r1
    c184:	4393      	bics	r3, r2
    c186:	d10f      	bne.n	c1a8 <strlen+0x38>
    c188:	3004      	adds	r0, #4
    c18a:	6802      	ldr	r2, [r0, #0]
    c18c:	4d0a      	ldr	r5, [pc, #40]	; (c1b8 <strlen+0x48>)
    c18e:	1953      	adds	r3, r2, r5
    c190:	400b      	ands	r3, r1
    c192:	4393      	bics	r3, r2
    c194:	d108      	bne.n	c1a8 <strlen+0x38>
    c196:	3004      	adds	r0, #4
    c198:	6802      	ldr	r2, [r0, #0]
    c19a:	4d07      	ldr	r5, [pc, #28]	; (c1b8 <strlen+0x48>)
    c19c:	1953      	adds	r3, r2, r5
    c19e:	400b      	ands	r3, r1
    c1a0:	4393      	bics	r3, r2
    c1a2:	d0f1      	beq.n	c188 <strlen+0x18>
    c1a4:	e000      	b.n	c1a8 <strlen+0x38>
    c1a6:	3001      	adds	r0, #1
    c1a8:	7803      	ldrb	r3, [r0, #0]
    c1aa:	2b00      	cmp	r3, #0
    c1ac:	d1fb      	bne.n	c1a6 <strlen+0x36>
    c1ae:	1b00      	subs	r0, r0, r4
    c1b0:	bc30      	pop	{r4, r5}
    c1b2:	bc02      	pop	{r1}
    c1b4:	4708      	bx	r1
    c1b6:	46c0      	nop			; (mov r8, r8)
    c1b8:	fefefeff 	.word	0xfefefeff
    c1bc:	80808080 	.word	0x80808080

0000c1c0 <_calloc_r>:
    c1c0:	b510      	push	{r4, lr}
    c1c2:	4351      	muls	r1, r2
    c1c4:	f7fe fd58 	bl	ac78 <_malloc_r>
    c1c8:	1c04      	adds	r4, r0, #0
    c1ca:	2800      	cmp	r0, #0
    c1cc:	d00f      	beq.n	c1ee <_calloc_r+0x2e>
    c1ce:	1c03      	adds	r3, r0, #0
    c1d0:	3b08      	subs	r3, #8
    c1d2:	685b      	ldr	r3, [r3, #4]
    c1d4:	2203      	movs	r2, #3
    c1d6:	4393      	bics	r3, r2
    c1d8:	1f1a      	subs	r2, r3, #4
    c1da:	2a24      	cmp	r2, #36	; 0x24
    c1dc:	d81b      	bhi.n	c216 <_calloc_r+0x56>
    c1de:	1c01      	adds	r1, r0, #0
    c1e0:	2a13      	cmp	r2, #19
    c1e2:	d808      	bhi.n	c1f6 <_calloc_r+0x36>
    c1e4:	2200      	movs	r2, #0
    c1e6:	1c0b      	adds	r3, r1, #0
    c1e8:	c304      	stmia	r3!, {r2}
    c1ea:	604a      	str	r2, [r1, #4]
    c1ec:	605a      	str	r2, [r3, #4]
    c1ee:	1c20      	adds	r0, r4, #0
    c1f0:	bc10      	pop	{r4}
    c1f2:	bc02      	pop	{r1}
    c1f4:	4708      	bx	r1
    c1f6:	2300      	movs	r3, #0
    c1f8:	c008      	stmia	r0!, {r3}
    c1fa:	6063      	str	r3, [r4, #4]
    c1fc:	1d01      	adds	r1, r0, #4
    c1fe:	2a1b      	cmp	r2, #27
    c200:	d9f0      	bls.n	c1e4 <_calloc_r+0x24>
    c202:	6043      	str	r3, [r0, #4]
    c204:	1d08      	adds	r0, r1, #4
    c206:	604b      	str	r3, [r1, #4]
    c208:	1d01      	adds	r1, r0, #4
    c20a:	2a24      	cmp	r2, #36	; 0x24
    c20c:	d1ea      	bne.n	c1e4 <_calloc_r+0x24>
    c20e:	6043      	str	r3, [r0, #4]
    c210:	604b      	str	r3, [r1, #4]
    c212:	3108      	adds	r1, #8
    c214:	e7e6      	b.n	c1e4 <_calloc_r+0x24>
    c216:	2100      	movs	r1, #0
    c218:	f7ff f862 	bl	b2e0 <memset>
    c21c:	e7e7      	b.n	c1ee <_calloc_r+0x2e>
    c21e:	46c0      	nop			; (mov r8, r8)

0000c220 <_fclose_r>:
    c220:	b570      	push	{r4, r5, r6, lr}
    c222:	1c05      	adds	r5, r0, #0
    c224:	1c0c      	adds	r4, r1, #0
    c226:	2900      	cmp	r1, #0
    c228:	d037      	beq.n	c29a <_fclose_r+0x7a>
    c22a:	f7fe f8c5 	bl	a3b8 <__sfp_lock_acquire>
    c22e:	2d00      	cmp	r5, #0
    c230:	d002      	beq.n	c238 <_fclose_r+0x18>
    c232:	6bab      	ldr	r3, [r5, #56]	; 0x38
    c234:	2b00      	cmp	r3, #0
    c236:	d032      	beq.n	c29e <_fclose_r+0x7e>
    c238:	89a3      	ldrh	r3, [r4, #12]
    c23a:	2b00      	cmp	r3, #0
    c23c:	d02b      	beq.n	c296 <_fclose_r+0x76>
    c23e:	071a      	lsls	r2, r3, #28
    c240:	d431      	bmi.n	c2a6 <_fclose_r+0x86>
    c242:	2600      	movs	r6, #0
    c244:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c246:	2b00      	cmp	r3, #0
    c248:	d004      	beq.n	c254 <_fclose_r+0x34>
    c24a:	69e0      	ldr	r0, [r4, #28]
    c24c:	f000 f844 	bl	c2d8 <fclose+0x14>
    c250:	2800      	cmp	r0, #0
    c252:	db32      	blt.n	c2ba <_fclose_r+0x9a>
    c254:	89a3      	ldrh	r3, [r4, #12]
    c256:	061a      	lsls	r2, r3, #24
    c258:	d42a      	bmi.n	c2b0 <_fclose_r+0x90>
    c25a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    c25c:	2900      	cmp	r1, #0
    c25e:	d009      	beq.n	c274 <_fclose_r+0x54>
    c260:	1c23      	adds	r3, r4, #0
    c262:	3340      	adds	r3, #64	; 0x40
    c264:	4299      	cmp	r1, r3
    c266:	d003      	beq.n	c270 <_fclose_r+0x50>
    c268:	4b15      	ldr	r3, [pc, #84]	; (c2c0 <_fclose_r+0xa0>)
    c26a:	6818      	ldr	r0, [r3, #0]
    c26c:	f7fe f9b4 	bl	a5d8 <_free_r>
    c270:	2300      	movs	r3, #0
    c272:	6323      	str	r3, [r4, #48]	; 0x30
    c274:	6c61      	ldr	r1, [r4, #68]	; 0x44
    c276:	2900      	cmp	r1, #0
    c278:	d005      	beq.n	c286 <_fclose_r+0x66>
    c27a:	4b11      	ldr	r3, [pc, #68]	; (c2c0 <_fclose_r+0xa0>)
    c27c:	6818      	ldr	r0, [r3, #0]
    c27e:	f7fe f9ab 	bl	a5d8 <_free_r>
    c282:	2300      	movs	r3, #0
    c284:	6463      	str	r3, [r4, #68]	; 0x44
    c286:	2300      	movs	r3, #0
    c288:	81a3      	strh	r3, [r4, #12]
    c28a:	f7fe f897 	bl	a3bc <__sfp_lock_release>
    c28e:	1c30      	adds	r0, r6, #0
    c290:	bc70      	pop	{r4, r5, r6}
    c292:	bc02      	pop	{r1}
    c294:	4708      	bx	r1
    c296:	f7fe f891 	bl	a3bc <__sfp_lock_release>
    c29a:	2600      	movs	r6, #0
    c29c:	e7f7      	b.n	c28e <_fclose_r+0x6e>
    c29e:	1c28      	adds	r0, r5, #0
    c2a0:	f7fe f892 	bl	a3c8 <__sinit>
    c2a4:	e7c8      	b.n	c238 <_fclose_r+0x18>
    c2a6:	1c20      	adds	r0, r4, #0
    c2a8:	f7fe f822 	bl	a2f0 <fflush>
    c2ac:	1c06      	adds	r6, r0, #0
    c2ae:	e7c9      	b.n	c244 <_fclose_r+0x24>
    c2b0:	6921      	ldr	r1, [r4, #16]
    c2b2:	1c28      	adds	r0, r5, #0
    c2b4:	f7fe f990 	bl	a5d8 <_free_r>
    c2b8:	e7cf      	b.n	c25a <_fclose_r+0x3a>
    c2ba:	2601      	movs	r6, #1
    c2bc:	4276      	negs	r6, r6
    c2be:	e7c9      	b.n	c254 <_fclose_r+0x34>
    c2c0:	40000014 	.word	0x40000014

0000c2c4 <fclose>:
    c2c4:	b500      	push	{lr}
    c2c6:	4b03      	ldr	r3, [pc, #12]	; (c2d4 <fclose+0x10>)
    c2c8:	1c01      	adds	r1, r0, #0
    c2ca:	6818      	ldr	r0, [r3, #0]
    c2cc:	f7ff ffa8 	bl	c220 <_fclose_r>
    c2d0:	bc02      	pop	{r1}
    c2d2:	4708      	bx	r1
    c2d4:	40000014 	.word	0x40000014
    c2d8:	4718      	bx	r3
    c2da:	46c0      	nop			; (mov r8, r8)

0000c2dc <__aeabi_uidiv>:
    c2dc:	2900      	cmp	r1, #0
    c2de:	d034      	beq.n	c34a <__aeabi_uidiv+0x6e>
    c2e0:	2301      	movs	r3, #1
    c2e2:	2200      	movs	r2, #0
    c2e4:	b410      	push	{r4}
    c2e6:	4288      	cmp	r0, r1
    c2e8:	d32c      	bcc.n	c344 <__aeabi_uidiv+0x68>
    c2ea:	2401      	movs	r4, #1
    c2ec:	0724      	lsls	r4, r4, #28
    c2ee:	42a1      	cmp	r1, r4
    c2f0:	d204      	bcs.n	c2fc <__aeabi_uidiv+0x20>
    c2f2:	4281      	cmp	r1, r0
    c2f4:	d202      	bcs.n	c2fc <__aeabi_uidiv+0x20>
    c2f6:	0109      	lsls	r1, r1, #4
    c2f8:	011b      	lsls	r3, r3, #4
    c2fa:	e7f8      	b.n	c2ee <__aeabi_uidiv+0x12>
    c2fc:	00e4      	lsls	r4, r4, #3
    c2fe:	42a1      	cmp	r1, r4
    c300:	d204      	bcs.n	c30c <__aeabi_uidiv+0x30>
    c302:	4281      	cmp	r1, r0
    c304:	d202      	bcs.n	c30c <__aeabi_uidiv+0x30>
    c306:	0049      	lsls	r1, r1, #1
    c308:	005b      	lsls	r3, r3, #1
    c30a:	e7f8      	b.n	c2fe <__aeabi_uidiv+0x22>
    c30c:	4288      	cmp	r0, r1
    c30e:	d301      	bcc.n	c314 <__aeabi_uidiv+0x38>
    c310:	1a40      	subs	r0, r0, r1
    c312:	431a      	orrs	r2, r3
    c314:	084c      	lsrs	r4, r1, #1
    c316:	42a0      	cmp	r0, r4
    c318:	d302      	bcc.n	c320 <__aeabi_uidiv+0x44>
    c31a:	1b00      	subs	r0, r0, r4
    c31c:	085c      	lsrs	r4, r3, #1
    c31e:	4322      	orrs	r2, r4
    c320:	088c      	lsrs	r4, r1, #2
    c322:	42a0      	cmp	r0, r4
    c324:	d302      	bcc.n	c32c <__aeabi_uidiv+0x50>
    c326:	1b00      	subs	r0, r0, r4
    c328:	089c      	lsrs	r4, r3, #2
    c32a:	4322      	orrs	r2, r4
    c32c:	08cc      	lsrs	r4, r1, #3
    c32e:	42a0      	cmp	r0, r4
    c330:	d302      	bcc.n	c338 <__aeabi_uidiv+0x5c>
    c332:	1b00      	subs	r0, r0, r4
    c334:	08dc      	lsrs	r4, r3, #3
    c336:	4322      	orrs	r2, r4
    c338:	2800      	cmp	r0, #0
    c33a:	d003      	beq.n	c344 <__aeabi_uidiv+0x68>
    c33c:	091b      	lsrs	r3, r3, #4
    c33e:	d001      	beq.n	c344 <__aeabi_uidiv+0x68>
    c340:	0909      	lsrs	r1, r1, #4
    c342:	e7e3      	b.n	c30c <__aeabi_uidiv+0x30>
    c344:	1c10      	adds	r0, r2, #0
    c346:	bc10      	pop	{r4}
    c348:	4770      	bx	lr
    c34a:	b502      	push	{r1, lr}
    c34c:	f000 f92e 	bl	c5ac <__aeabi_idiv0>
    c350:	2000      	movs	r0, #0
    c352:	bc06      	pop	{r1, r2}
    c354:	4710      	bx	r2
    c356:	46c0      	nop			; (mov r8, r8)

0000c358 <__aeabi_uidivmod>:
    c358:	b503      	push	{r0, r1, lr}
    c35a:	f7ff ffbf 	bl	c2dc <__aeabi_uidiv>
    c35e:	bc0e      	pop	{r1, r2, r3}
    c360:	4342      	muls	r2, r0
    c362:	1a89      	subs	r1, r1, r2
    c364:	4718      	bx	r3
    c366:	46c0      	nop			; (mov r8, r8)

0000c368 <__aeabi_idiv>:
    c368:	2900      	cmp	r1, #0
    c36a:	d041      	beq.n	c3f0 <__aeabi_idiv+0x88>
    c36c:	b410      	push	{r4}
    c36e:	1c04      	adds	r4, r0, #0
    c370:	404c      	eors	r4, r1
    c372:	46a4      	mov	ip, r4
    c374:	2301      	movs	r3, #1
    c376:	2200      	movs	r2, #0
    c378:	2900      	cmp	r1, #0
    c37a:	d500      	bpl.n	c37e <__aeabi_idiv+0x16>
    c37c:	4249      	negs	r1, r1
    c37e:	2800      	cmp	r0, #0
    c380:	d500      	bpl.n	c384 <__aeabi_idiv+0x1c>
    c382:	4240      	negs	r0, r0
    c384:	4288      	cmp	r0, r1
    c386:	d32c      	bcc.n	c3e2 <__aeabi_idiv+0x7a>
    c388:	2401      	movs	r4, #1
    c38a:	0724      	lsls	r4, r4, #28
    c38c:	42a1      	cmp	r1, r4
    c38e:	d204      	bcs.n	c39a <__aeabi_idiv+0x32>
    c390:	4281      	cmp	r1, r0
    c392:	d202      	bcs.n	c39a <__aeabi_idiv+0x32>
    c394:	0109      	lsls	r1, r1, #4
    c396:	011b      	lsls	r3, r3, #4
    c398:	e7f8      	b.n	c38c <__aeabi_idiv+0x24>
    c39a:	00e4      	lsls	r4, r4, #3
    c39c:	42a1      	cmp	r1, r4
    c39e:	d204      	bcs.n	c3aa <__aeabi_idiv+0x42>
    c3a0:	4281      	cmp	r1, r0
    c3a2:	d202      	bcs.n	c3aa <__aeabi_idiv+0x42>
    c3a4:	0049      	lsls	r1, r1, #1
    c3a6:	005b      	lsls	r3, r3, #1
    c3a8:	e7f8      	b.n	c39c <__aeabi_idiv+0x34>
    c3aa:	4288      	cmp	r0, r1
    c3ac:	d301      	bcc.n	c3b2 <__aeabi_idiv+0x4a>
    c3ae:	1a40      	subs	r0, r0, r1
    c3b0:	431a      	orrs	r2, r3
    c3b2:	084c      	lsrs	r4, r1, #1
    c3b4:	42a0      	cmp	r0, r4
    c3b6:	d302      	bcc.n	c3be <__aeabi_idiv+0x56>
    c3b8:	1b00      	subs	r0, r0, r4
    c3ba:	085c      	lsrs	r4, r3, #1
    c3bc:	4322      	orrs	r2, r4
    c3be:	088c      	lsrs	r4, r1, #2
    c3c0:	42a0      	cmp	r0, r4
    c3c2:	d302      	bcc.n	c3ca <__aeabi_idiv+0x62>
    c3c4:	1b00      	subs	r0, r0, r4
    c3c6:	089c      	lsrs	r4, r3, #2
    c3c8:	4322      	orrs	r2, r4
    c3ca:	08cc      	lsrs	r4, r1, #3
    c3cc:	42a0      	cmp	r0, r4
    c3ce:	d302      	bcc.n	c3d6 <__aeabi_idiv+0x6e>
    c3d0:	1b00      	subs	r0, r0, r4
    c3d2:	08dc      	lsrs	r4, r3, #3
    c3d4:	4322      	orrs	r2, r4
    c3d6:	2800      	cmp	r0, #0
    c3d8:	d003      	beq.n	c3e2 <__aeabi_idiv+0x7a>
    c3da:	091b      	lsrs	r3, r3, #4
    c3dc:	d001      	beq.n	c3e2 <__aeabi_idiv+0x7a>
    c3de:	0909      	lsrs	r1, r1, #4
    c3e0:	e7e3      	b.n	c3aa <__aeabi_idiv+0x42>
    c3e2:	1c10      	adds	r0, r2, #0
    c3e4:	4664      	mov	r4, ip
    c3e6:	2c00      	cmp	r4, #0
    c3e8:	d500      	bpl.n	c3ec <__aeabi_idiv+0x84>
    c3ea:	4240      	negs	r0, r0
    c3ec:	bc10      	pop	{r4}
    c3ee:	4770      	bx	lr
    c3f0:	b502      	push	{r1, lr}
    c3f2:	f000 f8db 	bl	c5ac <__aeabi_idiv0>
    c3f6:	2000      	movs	r0, #0
    c3f8:	bc06      	pop	{r1, r2}
    c3fa:	4710      	bx	r2

0000c3fc <__aeabi_idivmod>:
    c3fc:	b503      	push	{r0, r1, lr}
    c3fe:	f7ff ffb3 	bl	c368 <__aeabi_idiv>
    c402:	bc0e      	pop	{r1, r2, r3}
    c404:	4342      	muls	r2, r0
    c406:	1a89      	subs	r1, r1, r2
    c408:	4718      	bx	r3
    c40a:	46c0      	nop			; (mov r8, r8)

0000c40c <__umodsi3>:
    c40c:	2900      	cmp	r1, #0
    c40e:	d05a      	beq.n	c4c6 <__umodsi3+0xba>
    c410:	2301      	movs	r3, #1
    c412:	4288      	cmp	r0, r1
    c414:	d200      	bcs.n	c418 <__umodsi3+0xc>
    c416:	4770      	bx	lr
    c418:	b410      	push	{r4}
    c41a:	2401      	movs	r4, #1
    c41c:	0724      	lsls	r4, r4, #28
    c41e:	42a1      	cmp	r1, r4
    c420:	d204      	bcs.n	c42c <__umodsi3+0x20>
    c422:	4281      	cmp	r1, r0
    c424:	d202      	bcs.n	c42c <__umodsi3+0x20>
    c426:	0109      	lsls	r1, r1, #4
    c428:	011b      	lsls	r3, r3, #4
    c42a:	e7f8      	b.n	c41e <__umodsi3+0x12>
    c42c:	00e4      	lsls	r4, r4, #3
    c42e:	42a1      	cmp	r1, r4
    c430:	d204      	bcs.n	c43c <__umodsi3+0x30>
    c432:	4281      	cmp	r1, r0
    c434:	d202      	bcs.n	c43c <__umodsi3+0x30>
    c436:	0049      	lsls	r1, r1, #1
    c438:	005b      	lsls	r3, r3, #1
    c43a:	e7f8      	b.n	c42e <__umodsi3+0x22>
    c43c:	2200      	movs	r2, #0
    c43e:	4288      	cmp	r0, r1
    c440:	d300      	bcc.n	c444 <__umodsi3+0x38>
    c442:	1a40      	subs	r0, r0, r1
    c444:	084c      	lsrs	r4, r1, #1
    c446:	42a0      	cmp	r0, r4
    c448:	d305      	bcc.n	c456 <__umodsi3+0x4a>
    c44a:	1b00      	subs	r0, r0, r4
    c44c:	469c      	mov	ip, r3
    c44e:	2401      	movs	r4, #1
    c450:	41e3      	rors	r3, r4
    c452:	431a      	orrs	r2, r3
    c454:	4663      	mov	r3, ip
    c456:	088c      	lsrs	r4, r1, #2
    c458:	42a0      	cmp	r0, r4
    c45a:	d305      	bcc.n	c468 <__umodsi3+0x5c>
    c45c:	1b00      	subs	r0, r0, r4
    c45e:	469c      	mov	ip, r3
    c460:	2402      	movs	r4, #2
    c462:	41e3      	rors	r3, r4
    c464:	431a      	orrs	r2, r3
    c466:	4663      	mov	r3, ip
    c468:	08cc      	lsrs	r4, r1, #3
    c46a:	42a0      	cmp	r0, r4
    c46c:	d305      	bcc.n	c47a <__umodsi3+0x6e>
    c46e:	1b00      	subs	r0, r0, r4
    c470:	469c      	mov	ip, r3
    c472:	2403      	movs	r4, #3
    c474:	41e3      	rors	r3, r4
    c476:	431a      	orrs	r2, r3
    c478:	4663      	mov	r3, ip
    c47a:	469c      	mov	ip, r3
    c47c:	2800      	cmp	r0, #0
    c47e:	d003      	beq.n	c488 <__umodsi3+0x7c>
    c480:	091b      	lsrs	r3, r3, #4
    c482:	d001      	beq.n	c488 <__umodsi3+0x7c>
    c484:	0909      	lsrs	r1, r1, #4
    c486:	e7d9      	b.n	c43c <__umodsi3+0x30>
    c488:	240e      	movs	r4, #14
    c48a:	0724      	lsls	r4, r4, #28
    c48c:	4022      	ands	r2, r4
    c48e:	d018      	beq.n	c4c2 <__umodsi3+0xb6>
    c490:	4663      	mov	r3, ip
    c492:	2407      	movs	r4, #7
    c494:	4223      	tst	r3, r4
    c496:	d014      	beq.n	c4c2 <__umodsi3+0xb6>
    c498:	4663      	mov	r3, ip
    c49a:	2403      	movs	r4, #3
    c49c:	41e3      	rors	r3, r4
    c49e:	421a      	tst	r2, r3
    c4a0:	d001      	beq.n	c4a6 <__umodsi3+0x9a>
    c4a2:	08cc      	lsrs	r4, r1, #3
    c4a4:	1900      	adds	r0, r0, r4
    c4a6:	4663      	mov	r3, ip
    c4a8:	2402      	movs	r4, #2
    c4aa:	41e3      	rors	r3, r4
    c4ac:	421a      	tst	r2, r3
    c4ae:	d001      	beq.n	c4b4 <__umodsi3+0xa8>
    c4b0:	088c      	lsrs	r4, r1, #2
    c4b2:	1900      	adds	r0, r0, r4
    c4b4:	4663      	mov	r3, ip
    c4b6:	2401      	movs	r4, #1
    c4b8:	41e3      	rors	r3, r4
    c4ba:	421a      	tst	r2, r3
    c4bc:	d001      	beq.n	c4c2 <__umodsi3+0xb6>
    c4be:	084c      	lsrs	r4, r1, #1
    c4c0:	1900      	adds	r0, r0, r4
    c4c2:	bc10      	pop	{r4}
    c4c4:	4770      	bx	lr
    c4c6:	b502      	push	{r1, lr}
    c4c8:	f000 f870 	bl	c5ac <__aeabi_idiv0>
    c4cc:	2000      	movs	r0, #0
    c4ce:	bc06      	pop	{r1, r2}
    c4d0:	4710      	bx	r2
    c4d2:	46c0      	nop			; (mov r8, r8)

0000c4d4 <__modsi3>:
    c4d4:	2301      	movs	r3, #1
    c4d6:	2900      	cmp	r1, #0
    c4d8:	d062      	beq.n	c5a0 <__modsi3+0xcc>
    c4da:	d500      	bpl.n	c4de <__modsi3+0xa>
    c4dc:	4249      	negs	r1, r1
    c4de:	b410      	push	{r4}
    c4e0:	b401      	push	{r0}
    c4e2:	2800      	cmp	r0, #0
    c4e4:	d500      	bpl.n	c4e8 <__modsi3+0x14>
    c4e6:	4240      	negs	r0, r0
    c4e8:	4288      	cmp	r0, r1
    c4ea:	d353      	bcc.n	c594 <__modsi3+0xc0>
    c4ec:	2401      	movs	r4, #1
    c4ee:	0724      	lsls	r4, r4, #28
    c4f0:	42a1      	cmp	r1, r4
    c4f2:	d204      	bcs.n	c4fe <__modsi3+0x2a>
    c4f4:	4281      	cmp	r1, r0
    c4f6:	d202      	bcs.n	c4fe <__modsi3+0x2a>
    c4f8:	0109      	lsls	r1, r1, #4
    c4fa:	011b      	lsls	r3, r3, #4
    c4fc:	e7f8      	b.n	c4f0 <__modsi3+0x1c>
    c4fe:	00e4      	lsls	r4, r4, #3
    c500:	42a1      	cmp	r1, r4
    c502:	d204      	bcs.n	c50e <__modsi3+0x3a>
    c504:	4281      	cmp	r1, r0
    c506:	d202      	bcs.n	c50e <__modsi3+0x3a>
    c508:	0049      	lsls	r1, r1, #1
    c50a:	005b      	lsls	r3, r3, #1
    c50c:	e7f8      	b.n	c500 <__modsi3+0x2c>
    c50e:	2200      	movs	r2, #0
    c510:	4288      	cmp	r0, r1
    c512:	d300      	bcc.n	c516 <__modsi3+0x42>
    c514:	1a40      	subs	r0, r0, r1
    c516:	084c      	lsrs	r4, r1, #1
    c518:	42a0      	cmp	r0, r4
    c51a:	d305      	bcc.n	c528 <__modsi3+0x54>
    c51c:	1b00      	subs	r0, r0, r4
    c51e:	469c      	mov	ip, r3
    c520:	2401      	movs	r4, #1
    c522:	41e3      	rors	r3, r4
    c524:	431a      	orrs	r2, r3
    c526:	4663      	mov	r3, ip
    c528:	088c      	lsrs	r4, r1, #2
    c52a:	42a0      	cmp	r0, r4
    c52c:	d305      	bcc.n	c53a <__modsi3+0x66>
    c52e:	1b00      	subs	r0, r0, r4
    c530:	469c      	mov	ip, r3
    c532:	2402      	movs	r4, #2
    c534:	41e3      	rors	r3, r4
    c536:	431a      	orrs	r2, r3
    c538:	4663      	mov	r3, ip
    c53a:	08cc      	lsrs	r4, r1, #3
    c53c:	42a0      	cmp	r0, r4
    c53e:	d305      	bcc.n	c54c <__modsi3+0x78>
    c540:	1b00      	subs	r0, r0, r4
    c542:	469c      	mov	ip, r3
    c544:	2403      	movs	r4, #3
    c546:	41e3      	rors	r3, r4
    c548:	431a      	orrs	r2, r3
    c54a:	4663      	mov	r3, ip
    c54c:	469c      	mov	ip, r3
    c54e:	2800      	cmp	r0, #0
    c550:	d003      	beq.n	c55a <__modsi3+0x86>
    c552:	091b      	lsrs	r3, r3, #4
    c554:	d001      	beq.n	c55a <__modsi3+0x86>
    c556:	0909      	lsrs	r1, r1, #4
    c558:	e7d9      	b.n	c50e <__modsi3+0x3a>
    c55a:	240e      	movs	r4, #14
    c55c:	0724      	lsls	r4, r4, #28
    c55e:	4022      	ands	r2, r4
    c560:	d018      	beq.n	c594 <__modsi3+0xc0>
    c562:	4663      	mov	r3, ip
    c564:	2407      	movs	r4, #7
    c566:	4223      	tst	r3, r4
    c568:	d014      	beq.n	c594 <__modsi3+0xc0>
    c56a:	4663      	mov	r3, ip
    c56c:	2403      	movs	r4, #3
    c56e:	41e3      	rors	r3, r4
    c570:	421a      	tst	r2, r3
    c572:	d001      	beq.n	c578 <__modsi3+0xa4>
    c574:	08cc      	lsrs	r4, r1, #3
    c576:	1900      	adds	r0, r0, r4
    c578:	4663      	mov	r3, ip
    c57a:	2402      	movs	r4, #2
    c57c:	41e3      	rors	r3, r4
    c57e:	421a      	tst	r2, r3
    c580:	d001      	beq.n	c586 <__modsi3+0xb2>
    c582:	088c      	lsrs	r4, r1, #2
    c584:	1900      	adds	r0, r0, r4
    c586:	4663      	mov	r3, ip
    c588:	2401      	movs	r4, #1
    c58a:	41e3      	rors	r3, r4
    c58c:	421a      	tst	r2, r3
    c58e:	d001      	beq.n	c594 <__modsi3+0xc0>
    c590:	084c      	lsrs	r4, r1, #1
    c592:	1900      	adds	r0, r0, r4
    c594:	bc10      	pop	{r4}
    c596:	2c00      	cmp	r4, #0
    c598:	d500      	bpl.n	c59c <__modsi3+0xc8>
    c59a:	4240      	negs	r0, r0
    c59c:	bc10      	pop	{r4}
    c59e:	4770      	bx	lr
    c5a0:	b502      	push	{r1, lr}
    c5a2:	f000 f803 	bl	c5ac <__aeabi_idiv0>
    c5a6:	2000      	movs	r0, #0
    c5a8:	bc06      	pop	{r1, r2}
    c5aa:	4710      	bx	r2

0000c5ac <__aeabi_idiv0>:
    c5ac:	4770      	bx	lr
    c5ae:	46c0      	nop			; (mov r8, r8)

0000c5b0 <__aeabi_drsub>:
    c5b0:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    c5b4:	ea000000 	b	c5bc <__adddf3>

0000c5b8 <__aeabi_dsub>:
    c5b8:	e2222102 	eor	r2, r2, #-2147483648	; 0x80000000

0000c5bc <__adddf3>:
    c5bc:	e92d4030 	push	{r4, r5, lr}
    c5c0:	e1a04080 	lsl	r4, r0, #1
    c5c4:	e1a05082 	lsl	r5, r2, #1
    c5c8:	e1340005 	teq	r4, r5
    c5cc:	01310003 	teqeq	r1, r3
    c5d0:	1194c001 	orrsne	ip, r4, r1
    c5d4:	1195c003 	orrsne	ip, r5, r3
    c5d8:	11f0cac4 	mvnsne	ip, r4, asr #21
    c5dc:	11f0cac5 	mvnsne	ip, r5, asr #21
    c5e0:	0a00008c 	beq	c818 <__adddf3+0x25c>
    c5e4:	e1a04aa4 	lsr	r4, r4, #21
    c5e8:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    c5ec:	b2655000 	rsblt	r5, r5, #0
    c5f0:	da000006 	ble	c610 <__adddf3+0x54>
    c5f4:	e0844005 	add	r4, r4, r5
    c5f8:	e0213003 	eor	r3, r1, r3
    c5fc:	e0202002 	eor	r2, r0, r2
    c600:	e0231001 	eor	r1, r3, r1
    c604:	e0220000 	eor	r0, r2, r0
    c608:	e0213003 	eor	r3, r1, r3
    c60c:	e0202002 	eor	r2, r0, r2
    c610:	e3550036 	cmp	r5, #54	; 0x36
    c614:	88bd4030 	pophi	{r4, r5, lr}
    c618:	812fff1e 	bxhi	lr
    c61c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    c620:	e1a00600 	lsl	r0, r0, #12
    c624:	e3a0c601 	mov	ip, #1048576	; 0x100000
    c628:	e18c0620 	orr	r0, ip, r0, lsr #12
    c62c:	0a000001 	beq	c638 <__adddf3+0x7c>
    c630:	e2711000 	rsbs	r1, r1, #0
    c634:	e2e00000 	rsc	r0, r0, #0
    c638:	e3120102 	tst	r2, #-2147483648	; 0x80000000
    c63c:	e1a02602 	lsl	r2, r2, #12
    c640:	e18c2622 	orr	r2, ip, r2, lsr #12
    c644:	0a000001 	beq	c650 <__adddf3+0x94>
    c648:	e2733000 	rsbs	r3, r3, #0
    c64c:	e2e22000 	rsc	r2, r2, #0
    c650:	e1340005 	teq	r4, r5
    c654:	0a000069 	beq	c800 <__adddf3+0x244>
    c658:	e2444001 	sub	r4, r4, #1
    c65c:	e275e020 	rsbs	lr, r5, #32
    c660:	ba000005 	blt	c67c <__adddf3+0xc0>
    c664:	e1a0ce13 	lsl	ip, r3, lr
    c668:	e0911533 	adds	r1, r1, r3, lsr r5
    c66c:	e2a00000 	adc	r0, r0, #0
    c670:	e0911e12 	adds	r1, r1, r2, lsl lr
    c674:	e0b00552 	adcs	r0, r0, r2, asr r5
    c678:	ea000006 	b	c698 <__adddf3+0xdc>
    c67c:	e2455020 	sub	r5, r5, #32
    c680:	e28ee020 	add	lr, lr, #32
    c684:	e3530001 	cmp	r3, #1
    c688:	e1a0ce12 	lsl	ip, r2, lr
    c68c:	238cc002 	orrcs	ip, ip, #2
    c690:	e0911552 	adds	r1, r1, r2, asr r5
    c694:	e0b00fc2 	adcs	r0, r0, r2, asr #31
    c698:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
    c69c:	5a000002 	bpl	c6ac <__adddf3+0xf0>
    c6a0:	e27cc000 	rsbs	ip, ip, #0
    c6a4:	e2f11000 	rscs	r1, r1, #0
    c6a8:	e2e00000 	rsc	r0, r0, #0
    c6ac:	e3500601 	cmp	r0, #1048576	; 0x100000
    c6b0:	3a00000f 	bcc	c6f4 <__adddf3+0x138>
    c6b4:	e3500602 	cmp	r0, #2097152	; 0x200000
    c6b8:	3a000006 	bcc	c6d8 <__adddf3+0x11c>
    c6bc:	e1b000a0 	lsrs	r0, r0, #1
    c6c0:	e1b01061 	rrxs	r1, r1
    c6c4:	e1a0c06c 	rrx	ip, ip
    c6c8:	e2844001 	add	r4, r4, #1
    c6cc:	e1a02a84 	lsl	r2, r4, #21
    c6d0:	e3720501 	cmn	r2, #4194304	; 0x400000
    c6d4:	2a00006b 	bcs	c888 <__adddf3+0x2cc>
    c6d8:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    c6dc:	01b0c0a1 	lsrseq	ip, r1, #1
    c6e0:	e2b11000 	adcs	r1, r1, #0
    c6e4:	e0a00a04 	adc	r0, r0, r4, lsl #20
    c6e8:	e1800005 	orr	r0, r0, r5
    c6ec:	e8bd4030 	pop	{r4, r5, lr}
    c6f0:	e12fff1e 	bx	lr
    c6f4:	e1b0c08c 	lsls	ip, ip, #1
    c6f8:	e0b11001 	adcs	r1, r1, r1
    c6fc:	e0a00000 	adc	r0, r0, r0
    c700:	e3100601 	tst	r0, #1048576	; 0x100000
    c704:	e2444001 	sub	r4, r4, #1
    c708:	1afffff2 	bne	c6d8 <__adddf3+0x11c>
    c70c:	e3300000 	teq	r0, #0
    c710:	13a03014 	movne	r3, #20
    c714:	03a03034 	moveq	r3, #52	; 0x34
    c718:	01a00001 	moveq	r0, r1
    c71c:	03a01000 	moveq	r1, #0
    c720:	e1a02000 	mov	r2, r0
    c724:	e3520801 	cmp	r2, #65536	; 0x10000
    c728:	21a02822 	lsrcs	r2, r2, #16
    c72c:	22433010 	subcs	r3, r3, #16
    c730:	e3520c01 	cmp	r2, #256	; 0x100
    c734:	21a02422 	lsrcs	r2, r2, #8
    c738:	22433008 	subcs	r3, r3, #8
    c73c:	e3520010 	cmp	r2, #16
    c740:	21a02222 	lsrcs	r2, r2, #4
    c744:	22433004 	subcs	r3, r3, #4
    c748:	e3520004 	cmp	r2, #4
    c74c:	22433002 	subcs	r3, r3, #2
    c750:	304330a2 	subcc	r3, r3, r2, lsr #1
    c754:	e04331a2 	sub	r3, r3, r2, lsr #3
    c758:	e2532020 	subs	r2, r3, #32
    c75c:	aa000007 	bge	c780 <__adddf3+0x1c4>
    c760:	e292200c 	adds	r2, r2, #12
    c764:	da000004 	ble	c77c <__adddf3+0x1c0>
    c768:	e282c014 	add	ip, r2, #20
    c76c:	e262200c 	rsb	r2, r2, #12
    c770:	e1a01c10 	lsl	r1, r0, ip
    c774:	e1a00230 	lsr	r0, r0, r2
    c778:	ea000004 	b	c790 <__adddf3+0x1d4>
    c77c:	e2822014 	add	r2, r2, #20
    c780:	d262c020 	rsble	ip, r2, #32
    c784:	e1a00210 	lsl	r0, r0, r2
    c788:	d1800c31 	orrle	r0, r0, r1, lsr ip
    c78c:	d1a01211 	lslle	r1, r1, r2
    c790:	e0544003 	subs	r4, r4, r3
    c794:	a0800a04 	addge	r0, r0, r4, lsl #20
    c798:	a1800005 	orrge	r0, r0, r5
    c79c:	a8bd4030 	popge	{r4, r5, lr}
    c7a0:	a12fff1e 	bxge	lr
    c7a4:	e1e04004 	mvn	r4, r4
    c7a8:	e254401f 	subs	r4, r4, #31
    c7ac:	aa00000f 	bge	c7f0 <__adddf3+0x234>
    c7b0:	e294400c 	adds	r4, r4, #12
    c7b4:	ca000006 	bgt	c7d4 <__adddf3+0x218>
    c7b8:	e2844014 	add	r4, r4, #20
    c7bc:	e2642020 	rsb	r2, r4, #32
    c7c0:	e1a01431 	lsr	r1, r1, r4
    c7c4:	e1811210 	orr	r1, r1, r0, lsl r2
    c7c8:	e1850430 	orr	r0, r5, r0, lsr r4
    c7cc:	e8bd4030 	pop	{r4, r5, lr}
    c7d0:	e12fff1e 	bx	lr
    c7d4:	e264400c 	rsb	r4, r4, #12
    c7d8:	e2642020 	rsb	r2, r4, #32
    c7dc:	e1a01231 	lsr	r1, r1, r2
    c7e0:	e1811410 	orr	r1, r1, r0, lsl r4
    c7e4:	e1a00005 	mov	r0, r5
    c7e8:	e8bd4030 	pop	{r4, r5, lr}
    c7ec:	e12fff1e 	bx	lr
    c7f0:	e1a01430 	lsr	r1, r0, r4
    c7f4:	e1a00005 	mov	r0, r5
    c7f8:	e8bd4030 	pop	{r4, r5, lr}
    c7fc:	e12fff1e 	bx	lr
    c800:	e3340000 	teq	r4, #0
    c804:	e2222601 	eor	r2, r2, #1048576	; 0x100000
    c808:	02200601 	eoreq	r0, r0, #1048576	; 0x100000
    c80c:	02844001 	addeq	r4, r4, #1
    c810:	12455001 	subne	r5, r5, #1
    c814:	eaffff8f 	b	c658 <__adddf3+0x9c>
    c818:	e1f0cac4 	mvns	ip, r4, asr #21
    c81c:	11f0cac5 	mvnsne	ip, r5, asr #21
    c820:	0a00001d 	beq	c89c <__adddf3+0x2e0>
    c824:	e1340005 	teq	r4, r5
    c828:	01310003 	teqeq	r1, r3
    c82c:	0a000004 	beq	c844 <__adddf3+0x288>
    c830:	e3340000 	teq	r4, #0
    c834:	01a00002 	moveq	r0, r2
    c838:	01a01003 	moveq	r1, r3
    c83c:	e8bd4030 	pop	{r4, r5, lr}
    c840:	e12fff1e 	bx	lr
    c844:	e1300002 	teq	r0, r2
    c848:	13a00000 	movne	r0, #0
    c84c:	13a01000 	movne	r1, #0
    c850:	18bd4030 	popne	{r4, r5, lr}
    c854:	112fff1e 	bxne	lr
    c858:	e1b0caa4 	lsrs	ip, r4, #21
    c85c:	1a000004 	bne	c874 <__adddf3+0x2b8>
    c860:	e1b01081 	lsls	r1, r1, #1
    c864:	e0b00000 	adcs	r0, r0, r0
    c868:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    c86c:	e8bd4030 	pop	{r4, r5, lr}
    c870:	e12fff1e 	bx	lr
    c874:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    c878:	32800601 	addcc	r0, r0, #1048576	; 0x100000
    c87c:	38bd4030 	popcc	{r4, r5, lr}
    c880:	312fff1e 	bxcc	lr
    c884:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
    c888:	e385047f 	orr	r0, r5, #2130706432	; 0x7f000000
    c88c:	e380060f 	orr	r0, r0, #15728640	; 0xf00000
    c890:	e3a01000 	mov	r1, #0
    c894:	e8bd4030 	pop	{r4, r5, lr}
    c898:	e12fff1e 	bx	lr
    c89c:	e1f0cac4 	mvns	ip, r4, asr #21
    c8a0:	11a00002 	movne	r0, r2
    c8a4:	11a01003 	movne	r1, r3
    c8a8:	01f0cac5 	mvnseq	ip, r5, asr #21
    c8ac:	11a02000 	movne	r2, r0
    c8b0:	11a03001 	movne	r3, r1
    c8b4:	e1914600 	orrs	r4, r1, r0, lsl #12
    c8b8:	01935602 	orrseq	r5, r3, r2, lsl #12
    c8bc:	01300002 	teqeq	r0, r2
    c8c0:	13800702 	orrne	r0, r0, #524288	; 0x80000
    c8c4:	e8bd4030 	pop	{r4, r5, lr}
    c8c8:	e12fff1e 	bx	lr

0000c8cc <__aeabi_ui2d>:
    c8cc:	e3300000 	teq	r0, #0
    c8d0:	03a01000 	moveq	r1, #0
    c8d4:	012fff1e 	bxeq	lr
    c8d8:	e92d4030 	push	{r4, r5, lr}
    c8dc:	e3a04b01 	mov	r4, #1024	; 0x400
    c8e0:	e2844032 	add	r4, r4, #50	; 0x32
    c8e4:	e3a05000 	mov	r5, #0
    c8e8:	e1a01000 	mov	r1, r0
    c8ec:	e3a00000 	mov	r0, #0
    c8f0:	eaffff85 	b	c70c <__adddf3+0x150>

0000c8f4 <__aeabi_i2d>:
    c8f4:	e3300000 	teq	r0, #0
    c8f8:	03a01000 	moveq	r1, #0
    c8fc:	012fff1e 	bxeq	lr
    c900:	e92d4030 	push	{r4, r5, lr}
    c904:	e3a04b01 	mov	r4, #1024	; 0x400
    c908:	e2844032 	add	r4, r4, #50	; 0x32
    c90c:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    c910:	42600000 	rsbmi	r0, r0, #0
    c914:	e1a01000 	mov	r1, r0
    c918:	e3a00000 	mov	r0, #0
    c91c:	eaffff7a 	b	c70c <__adddf3+0x150>

0000c920 <__aeabi_f2d>:
    c920:	e1b02080 	lsls	r2, r0, #1
    c924:	e1a001c2 	asr	r0, r2, #3
    c928:	e1a00060 	rrx	r0, r0
    c92c:	e1a01e02 	lsl	r1, r2, #28
    c930:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    c934:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    c938:	1220030e 	eorne	r0, r0, #939524096	; 0x38000000
    c93c:	112fff1e 	bxne	lr
    c940:	e3320000 	teq	r2, #0
    c944:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    c948:	012fff1e 	bxeq	lr
    c94c:	e92d4030 	push	{r4, r5, lr}
    c950:	e3a04d0e 	mov	r4, #896	; 0x380
    c954:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
    c958:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    c95c:	eaffff6a 	b	c70c <__adddf3+0x150>

0000c960 <__aeabi_ul2d>:
    c960:	e1902001 	orrs	r2, r0, r1
    c964:	012fff1e 	bxeq	lr
    c968:	e92d4030 	push	{r4, r5, lr}
    c96c:	e3a05000 	mov	r5, #0
    c970:	ea000006 	b	c990 <__aeabi_l2d+0x1c>

0000c974 <__aeabi_l2d>:
    c974:	e1902001 	orrs	r2, r0, r1
    c978:	012fff1e 	bxeq	lr
    c97c:	e92d4030 	push	{r4, r5, lr}
    c980:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    c984:	5a000001 	bpl	c990 <__aeabi_l2d+0x1c>
    c988:	e2700000 	rsbs	r0, r0, #0
    c98c:	e2e11000 	rsc	r1, r1, #0
    c990:	e3a04b01 	mov	r4, #1024	; 0x400
    c994:	e2844032 	add	r4, r4, #50	; 0x32
    c998:	e1a0c000 	mov	ip, r0
    c99c:	e1a00001 	mov	r0, r1
    c9a0:	e1a0100c 	mov	r1, ip
    c9a4:	e1b0cb20 	lsrs	ip, r0, #22
    c9a8:	0affff3f 	beq	c6ac <__adddf3+0xf0>
    c9ac:	e3a02003 	mov	r2, #3
    c9b0:	e1b0c1ac 	lsrs	ip, ip, #3
    c9b4:	12822003 	addne	r2, r2, #3
    c9b8:	e1b0c1ac 	lsrs	ip, ip, #3
    c9bc:	12822003 	addne	r2, r2, #3
    c9c0:	e08221ac 	add	r2, r2, ip, lsr #3
    c9c4:	e2623020 	rsb	r3, r2, #32
    c9c8:	e1a0c311 	lsl	ip, r1, r3
    c9cc:	e1a01231 	lsr	r1, r1, r2
    c9d0:	e1811310 	orr	r1, r1, r0, lsl r3
    c9d4:	e1a00230 	lsr	r0, r0, r2
    c9d8:	e0844002 	add	r4, r4, r2
    c9dc:	eaffff32 	b	c6ac <__adddf3+0xf0>

0000c9e0 <__aeabi_dmul>:
    c9e0:	e92d4070 	push	{r4, r5, r6, lr}
    c9e4:	e3a0c0ff 	mov	ip, #255	; 0xff
    c9e8:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    c9ec:	e01c4a20 	ands	r4, ip, r0, lsr #20
    c9f0:	101c5a22 	andsne	r5, ip, r2, lsr #20
    c9f4:	1134000c 	teqne	r4, ip
    c9f8:	1135000c 	teqne	r5, ip
    c9fc:	0b000075 	bleq	cbd8 <__aeabi_dmul+0x1f8>
    ca00:	e0844005 	add	r4, r4, r5
    ca04:	e0206002 	eor	r6, r0, r2
    ca08:	e1c00a8c 	bic	r0, r0, ip, lsl #21
    ca0c:	e1c22a8c 	bic	r2, r2, ip, lsl #21
    ca10:	e1915600 	orrs	r5, r1, r0, lsl #12
    ca14:	11935602 	orrsne	r5, r3, r2, lsl #12
    ca18:	e3800601 	orr	r0, r0, #1048576	; 0x100000
    ca1c:	e3822601 	orr	r2, r2, #1048576	; 0x100000
    ca20:	0a00001d 	beq	ca9c <__aeabi_dmul+0xbc>
    ca24:	e08ec391 	umull	ip, lr, r1, r3
    ca28:	e3a05000 	mov	r5, #0
    ca2c:	e0a5e390 	umlal	lr, r5, r0, r3
    ca30:	e2063102 	and	r3, r6, #-2147483648	; 0x80000000
    ca34:	e0a5e291 	umlal	lr, r5, r1, r2
    ca38:	e3a06000 	mov	r6, #0
    ca3c:	e0a65290 	umlal	r5, r6, r0, r2
    ca40:	e33c0000 	teq	ip, #0
    ca44:	138ee001 	orrne	lr, lr, #1
    ca48:	e24440ff 	sub	r4, r4, #255	; 0xff
    ca4c:	e3560c02 	cmp	r6, #512	; 0x200
    ca50:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    ca54:	2a000002 	bcs	ca64 <__aeabi_dmul+0x84>
    ca58:	e1b0e08e 	lsls	lr, lr, #1
    ca5c:	e0b55005 	adcs	r5, r5, r5
    ca60:	e0a66006 	adc	r6, r6, r6
    ca64:	e1830586 	orr	r0, r3, r6, lsl #11
    ca68:	e1800aa5 	orr	r0, r0, r5, lsr #21
    ca6c:	e1a01585 	lsl	r1, r5, #11
    ca70:	e1811aae 	orr	r1, r1, lr, lsr #21
    ca74:	e1a0e58e 	lsl	lr, lr, #11
    ca78:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    ca7c:	835c0c07 	cmphi	ip, #1792	; 0x700
    ca80:	8a000011 	bhi	cacc <__aeabi_dmul+0xec>
    ca84:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    ca88:	01b0e0a1 	lsrseq	lr, r1, #1
    ca8c:	e2b11000 	adcs	r1, r1, #0
    ca90:	e0a00a04 	adc	r0, r0, r4, lsl #20
    ca94:	e8bd4070 	pop	{r4, r5, r6, lr}
    ca98:	e12fff1e 	bx	lr
    ca9c:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    caa0:	e1860000 	orr	r0, r6, r0
    caa4:	e1811003 	orr	r1, r1, r3
    caa8:	e0200002 	eor	r0, r0, r2
    caac:	e05440ac 	subs	r4, r4, ip, lsr #1
    cab0:	c074500c 	rsbsgt	r5, r4, ip
    cab4:	c1800a04 	orrgt	r0, r0, r4, lsl #20
    cab8:	c8bd4070 	popgt	{r4, r5, r6, lr}
    cabc:	c12fff1e 	bxgt	lr
    cac0:	e3800601 	orr	r0, r0, #1048576	; 0x100000
    cac4:	e3a0e000 	mov	lr, #0
    cac8:	e2544001 	subs	r4, r4, #1
    cacc:	ca00005d 	bgt	cc48 <__aeabi_dmul+0x268>
    cad0:	e3740036 	cmn	r4, #54	; 0x36
    cad4:	d3a01000 	movle	r1, #0
    cad8:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    cadc:	d8bd4070 	pople	{r4, r5, r6, lr}
    cae0:	d12fff1e 	bxle	lr
    cae4:	e2644000 	rsb	r4, r4, #0
    cae8:	e2544020 	subs	r4, r4, #32
    caec:	aa00001a 	bge	cb5c <__aeabi_dmul+0x17c>
    caf0:	e294400c 	adds	r4, r4, #12
    caf4:	ca00000c 	bgt	cb2c <__aeabi_dmul+0x14c>
    caf8:	e2844014 	add	r4, r4, #20
    cafc:	e2645020 	rsb	r5, r4, #32
    cb00:	e1a03511 	lsl	r3, r1, r5
    cb04:	e1a01431 	lsr	r1, r1, r4
    cb08:	e1811510 	orr	r1, r1, r0, lsl r5
    cb0c:	e2002102 	and	r2, r0, #-2147483648	; 0x80000000
    cb10:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    cb14:	e0911fa3 	adds	r1, r1, r3, lsr #31
    cb18:	e0a20430 	adc	r0, r2, r0, lsr r4
    cb1c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    cb20:	01c11fa3 	biceq	r1, r1, r3, lsr #31
    cb24:	e8bd4070 	pop	{r4, r5, r6, lr}
    cb28:	e12fff1e 	bx	lr
    cb2c:	e264400c 	rsb	r4, r4, #12
    cb30:	e2645020 	rsb	r5, r4, #32
    cb34:	e1a03411 	lsl	r3, r1, r4
    cb38:	e1a01531 	lsr	r1, r1, r5
    cb3c:	e1811410 	orr	r1, r1, r0, lsl r4
    cb40:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    cb44:	e0911fa3 	adds	r1, r1, r3, lsr #31
    cb48:	e2a00000 	adc	r0, r0, #0
    cb4c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    cb50:	01c11fa3 	biceq	r1, r1, r3, lsr #31
    cb54:	e8bd4070 	pop	{r4, r5, r6, lr}
    cb58:	e12fff1e 	bx	lr
    cb5c:	e2645020 	rsb	r5, r4, #32
    cb60:	e18ee511 	orr	lr, lr, r1, lsl r5
    cb64:	e1a03431 	lsr	r3, r1, r4
    cb68:	e1833510 	orr	r3, r3, r0, lsl r5
    cb6c:	e1a01430 	lsr	r1, r0, r4
    cb70:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    cb74:	e1c11430 	bic	r1, r1, r0, lsr r4
    cb78:	e0811fa3 	add	r1, r1, r3, lsr #31
    cb7c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    cb80:	01c11fa3 	biceq	r1, r1, r3, lsr #31
    cb84:	e8bd4070 	pop	{r4, r5, r6, lr}
    cb88:	e12fff1e 	bx	lr
    cb8c:	e3340000 	teq	r4, #0
    cb90:	1a000008 	bne	cbb8 <__aeabi_dmul+0x1d8>
    cb94:	e2006102 	and	r6, r0, #-2147483648	; 0x80000000
    cb98:	e1b01081 	lsls	r1, r1, #1
    cb9c:	e0a00000 	adc	r0, r0, r0
    cba0:	e3100601 	tst	r0, #1048576	; 0x100000
    cba4:	02444001 	subeq	r4, r4, #1
    cba8:	0afffffa 	beq	cb98 <__aeabi_dmul+0x1b8>
    cbac:	e1800006 	orr	r0, r0, r6
    cbb0:	e3350000 	teq	r5, #0
    cbb4:	11a0f00e 	movne	pc, lr
    cbb8:	e2026102 	and	r6, r2, #-2147483648	; 0x80000000
    cbbc:	e1b03083 	lsls	r3, r3, #1
    cbc0:	e0a22002 	adc	r2, r2, r2
    cbc4:	e3120601 	tst	r2, #1048576	; 0x100000
    cbc8:	02455001 	subeq	r5, r5, #1
    cbcc:	0afffffa 	beq	cbbc <__aeabi_dmul+0x1dc>
    cbd0:	e1822006 	orr	r2, r2, r6
    cbd4:	e1a0f00e 	mov	pc, lr
    cbd8:	e134000c 	teq	r4, ip
    cbdc:	e00c5a22 	and	r5, ip, r2, lsr #20
    cbe0:	1135000c 	teqne	r5, ip
    cbe4:	0a000007 	beq	cc08 <__aeabi_dmul+0x228>
    cbe8:	e1916080 	orrs	r6, r1, r0, lsl #1
    cbec:	11936082 	orrsne	r6, r3, r2, lsl #1
    cbf0:	1affffe5 	bne	cb8c <__aeabi_dmul+0x1ac>
    cbf4:	e0200002 	eor	r0, r0, r2
    cbf8:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    cbfc:	e3a01000 	mov	r1, #0
    cc00:	e8bd4070 	pop	{r4, r5, r6, lr}
    cc04:	e12fff1e 	bx	lr
    cc08:	e1916080 	orrs	r6, r1, r0, lsl #1
    cc0c:	01a01003 	moveq	r1, r3
    cc10:	01a00002 	moveq	r0, r2
    cc14:	11936082 	orrsne	r6, r3, r2, lsl #1
    cc18:	0a000010 	beq	cc60 <__aeabi_dmul+0x280>
    cc1c:	e134000c 	teq	r4, ip
    cc20:	1a000001 	bne	cc2c <__aeabi_dmul+0x24c>
    cc24:	e1916600 	orrs	r6, r1, r0, lsl #12
    cc28:	1a00000c 	bne	cc60 <__aeabi_dmul+0x280>
    cc2c:	e135000c 	teq	r5, ip
    cc30:	1a000003 	bne	cc44 <__aeabi_dmul+0x264>
    cc34:	e1936602 	orrs	r6, r3, r2, lsl #12
    cc38:	11a01003 	movne	r1, r3
    cc3c:	11a00002 	movne	r0, r2
    cc40:	1a000006 	bne	cc60 <__aeabi_dmul+0x280>
    cc44:	e0200002 	eor	r0, r0, r2
    cc48:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    cc4c:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    cc50:	e380060f 	orr	r0, r0, #15728640	; 0xf00000
    cc54:	e3a01000 	mov	r1, #0
    cc58:	e8bd4070 	pop	{r4, r5, r6, lr}
    cc5c:	e12fff1e 	bx	lr
    cc60:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    cc64:	e380073e 	orr	r0, r0, #16252928	; 0xf80000
    cc68:	e8bd4070 	pop	{r4, r5, r6, lr}
    cc6c:	e12fff1e 	bx	lr

0000cc70 <__aeabi_ddiv>:
    cc70:	e92d4070 	push	{r4, r5, r6, lr}
    cc74:	e3a0c0ff 	mov	ip, #255	; 0xff
    cc78:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    cc7c:	e01c4a20 	ands	r4, ip, r0, lsr #20
    cc80:	101c5a22 	andsne	r5, ip, r2, lsr #20
    cc84:	1134000c 	teqne	r4, ip
    cc88:	1135000c 	teqne	r5, ip
    cc8c:	0b00005e 	bleq	ce0c <__aeabi_ddiv+0x19c>
    cc90:	e0444005 	sub	r4, r4, r5
    cc94:	e020e002 	eor	lr, r0, r2
    cc98:	e1935602 	orrs	r5, r3, r2, lsl #12
    cc9c:	e1a00600 	lsl	r0, r0, #12
    cca0:	0a00004c 	beq	cdd8 <__aeabi_ddiv+0x168>
    cca4:	e1a02602 	lsl	r2, r2, #12
    cca8:	e3a05201 	mov	r5, #268435456	; 0x10000000
    ccac:	e1852222 	orr	r2, r5, r2, lsr #4
    ccb0:	e1822c23 	orr	r2, r2, r3, lsr #24
    ccb4:	e1a03403 	lsl	r3, r3, #8
    ccb8:	e1855220 	orr	r5, r5, r0, lsr #4
    ccbc:	e1855c21 	orr	r5, r5, r1, lsr #24
    ccc0:	e1a06401 	lsl	r6, r1, #8
    ccc4:	e20e0102 	and	r0, lr, #-2147483648	; 0x80000000
    ccc8:	e1550002 	cmp	r5, r2
    cccc:	01560003 	cmpeq	r6, r3
    ccd0:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    ccd4:	e2844c03 	add	r4, r4, #768	; 0x300
    ccd8:	2a000001 	bcs	cce4 <__aeabi_ddiv+0x74>
    ccdc:	e1b020a2 	lsrs	r2, r2, #1
    cce0:	e1a03063 	rrx	r3, r3
    cce4:	e0566003 	subs	r6, r6, r3
    cce8:	e0c55002 	sbc	r5, r5, r2
    ccec:	e1b020a2 	lsrs	r2, r2, #1
    ccf0:	e1a03063 	rrx	r3, r3
    ccf4:	e3a01601 	mov	r1, #1048576	; 0x100000
    ccf8:	e3a0c702 	mov	ip, #524288	; 0x80000
    ccfc:	e056e003 	subs	lr, r6, r3
    cd00:	e0d5e002 	sbcs	lr, r5, r2
    cd04:	20466003 	subcs	r6, r6, r3
    cd08:	21a0500e 	movcs	r5, lr
    cd0c:	2181100c 	orrcs	r1, r1, ip
    cd10:	e1b020a2 	lsrs	r2, r2, #1
    cd14:	e1a03063 	rrx	r3, r3
    cd18:	e056e003 	subs	lr, r6, r3
    cd1c:	e0d5e002 	sbcs	lr, r5, r2
    cd20:	20466003 	subcs	r6, r6, r3
    cd24:	21a0500e 	movcs	r5, lr
    cd28:	218110ac 	orrcs	r1, r1, ip, lsr #1
    cd2c:	e1b020a2 	lsrs	r2, r2, #1
    cd30:	e1a03063 	rrx	r3, r3
    cd34:	e056e003 	subs	lr, r6, r3
    cd38:	e0d5e002 	sbcs	lr, r5, r2
    cd3c:	20466003 	subcs	r6, r6, r3
    cd40:	21a0500e 	movcs	r5, lr
    cd44:	2181112c 	orrcs	r1, r1, ip, lsr #2
    cd48:	e1b020a2 	lsrs	r2, r2, #1
    cd4c:	e1a03063 	rrx	r3, r3
    cd50:	e056e003 	subs	lr, r6, r3
    cd54:	e0d5e002 	sbcs	lr, r5, r2
    cd58:	20466003 	subcs	r6, r6, r3
    cd5c:	21a0500e 	movcs	r5, lr
    cd60:	218111ac 	orrcs	r1, r1, ip, lsr #3
    cd64:	e195e006 	orrs	lr, r5, r6
    cd68:	0a00000d 	beq	cda4 <__aeabi_ddiv+0x134>
    cd6c:	e1a05205 	lsl	r5, r5, #4
    cd70:	e1855e26 	orr	r5, r5, r6, lsr #28
    cd74:	e1a06206 	lsl	r6, r6, #4
    cd78:	e1a02182 	lsl	r2, r2, #3
    cd7c:	e1822ea3 	orr	r2, r2, r3, lsr #29
    cd80:	e1a03183 	lsl	r3, r3, #3
    cd84:	e1b0c22c 	lsrs	ip, ip, #4
    cd88:	1affffdb 	bne	ccfc <__aeabi_ddiv+0x8c>
    cd8c:	e3100601 	tst	r0, #1048576	; 0x100000
    cd90:	1a000006 	bne	cdb0 <__aeabi_ddiv+0x140>
    cd94:	e1800001 	orr	r0, r0, r1
    cd98:	e3a01000 	mov	r1, #0
    cd9c:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
    cda0:	eaffffd5 	b	ccfc <__aeabi_ddiv+0x8c>
    cda4:	e3100601 	tst	r0, #1048576	; 0x100000
    cda8:	01800001 	orreq	r0, r0, r1
    cdac:	03a01000 	moveq	r1, #0
    cdb0:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    cdb4:	835c0c07 	cmphi	ip, #1792	; 0x700
    cdb8:	8affff43 	bhi	cacc <__aeabi_dmul+0xec>
    cdbc:	e055c002 	subs	ip, r5, r2
    cdc0:	0056c003 	subseq	ip, r6, r3
    cdc4:	01b0c0a1 	lsrseq	ip, r1, #1
    cdc8:	e2b11000 	adcs	r1, r1, #0
    cdcc:	e0a00a04 	adc	r0, r0, r4, lsl #20
    cdd0:	e8bd4070 	pop	{r4, r5, r6, lr}
    cdd4:	e12fff1e 	bx	lr
    cdd8:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    cddc:	e18e0620 	orr	r0, lr, r0, lsr #12
    cde0:	e09440ac 	adds	r4, r4, ip, lsr #1
    cde4:	c074500c 	rsbsgt	r5, r4, ip
    cde8:	c1800a04 	orrgt	r0, r0, r4, lsl #20
    cdec:	c8bd4070 	popgt	{r4, r5, r6, lr}
    cdf0:	c12fff1e 	bxgt	lr
    cdf4:	e3800601 	orr	r0, r0, #1048576	; 0x100000
    cdf8:	e3a0e000 	mov	lr, #0
    cdfc:	e2544001 	subs	r4, r4, #1
    ce00:	eaffff31 	b	cacc <__aeabi_dmul+0xec>
    ce04:	e185e006 	orr	lr, r5, r6
    ce08:	eaffff2f 	b	cacc <__aeabi_dmul+0xec>
    ce0c:	e00c5a22 	and	r5, ip, r2, lsr #20
    ce10:	e134000c 	teq	r4, ip
    ce14:	0135000c 	teqeq	r5, ip
    ce18:	0affff90 	beq	cc60 <__aeabi_dmul+0x280>
    ce1c:	e134000c 	teq	r4, ip
    ce20:	1a000006 	bne	ce40 <__aeabi_ddiv+0x1d0>
    ce24:	e1914600 	orrs	r4, r1, r0, lsl #12
    ce28:	1affff8c 	bne	cc60 <__aeabi_dmul+0x280>
    ce2c:	e135000c 	teq	r5, ip
    ce30:	1affff83 	bne	cc44 <__aeabi_dmul+0x264>
    ce34:	e1a01003 	mov	r1, r3
    ce38:	e1a00002 	mov	r0, r2
    ce3c:	eaffff87 	b	cc60 <__aeabi_dmul+0x280>
    ce40:	e135000c 	teq	r5, ip
    ce44:	1a000004 	bne	ce5c <__aeabi_ddiv+0x1ec>
    ce48:	e1935602 	orrs	r5, r3, r2, lsl #12
    ce4c:	0affff68 	beq	cbf4 <__aeabi_dmul+0x214>
    ce50:	e1a01003 	mov	r1, r3
    ce54:	e1a00002 	mov	r0, r2
    ce58:	eaffff80 	b	cc60 <__aeabi_dmul+0x280>
    ce5c:	e1916080 	orrs	r6, r1, r0, lsl #1
    ce60:	11936082 	orrsne	r6, r3, r2, lsl #1
    ce64:	1affff48 	bne	cb8c <__aeabi_dmul+0x1ac>
    ce68:	e1914080 	orrs	r4, r1, r0, lsl #1
    ce6c:	1affff74 	bne	cc44 <__aeabi_dmul+0x264>
    ce70:	e1935082 	orrs	r5, r3, r2, lsl #1
    ce74:	1affff5e 	bne	cbf4 <__aeabi_dmul+0x214>
    ce78:	eaffff78 	b	cc60 <__aeabi_dmul+0x280>

0000ce7c <__gedf2>:
    ce7c:	e3e0c000 	mvn	ip, #0
    ce80:	ea000002 	b	ce90 <__cmpdf2+0x4>

0000ce84 <__ledf2>:
    ce84:	e3a0c001 	mov	ip, #1
    ce88:	ea000000 	b	ce90 <__cmpdf2+0x4>

0000ce8c <__cmpdf2>:
    ce8c:	e3a0c001 	mov	ip, #1
    ce90:	e50dc004 	str	ip, [sp, #-4]
    ce94:	e1a0c080 	lsl	ip, r0, #1
    ce98:	e1f0cacc 	mvns	ip, ip, asr #21
    ce9c:	e1a0c082 	lsl	ip, r2, #1
    cea0:	11f0cacc 	mvnsne	ip, ip, asr #21
    cea4:	0a00000d 	beq	cee0 <__cmpdf2+0x54>
    cea8:	e191c080 	orrs	ip, r1, r0, lsl #1
    ceac:	0193c082 	orrseq	ip, r3, r2, lsl #1
    ceb0:	11300002 	teqne	r0, r2
    ceb4:	01310003 	teqeq	r1, r3
    ceb8:	03a00000 	moveq	r0, #0
    cebc:	012fff1e 	bxeq	lr
    cec0:	e3700000 	cmn	r0, #0
    cec4:	e1300002 	teq	r0, r2
    cec8:	51500002 	cmppl	r0, r2
    cecc:	01510003 	cmpeq	r1, r3
    ced0:	21a00fc2 	asrcs	r0, r2, #31
    ced4:	31e00fc2 	mvncc	r0, r2, asr #31
    ced8:	e3800001 	orr	r0, r0, #1
    cedc:	e12fff1e 	bx	lr
    cee0:	e1a0c080 	lsl	ip, r0, #1
    cee4:	e1f0cacc 	mvns	ip, ip, asr #21
    cee8:	1a000001 	bne	cef4 <__cmpdf2+0x68>
    ceec:	e191c600 	orrs	ip, r1, r0, lsl #12
    cef0:	1a000004 	bne	cf08 <__cmpdf2+0x7c>
    cef4:	e1a0c082 	lsl	ip, r2, #1
    cef8:	e1f0cacc 	mvns	ip, ip, asr #21
    cefc:	1affffe9 	bne	cea8 <__cmpdf2+0x1c>
    cf00:	e193c602 	orrs	ip, r3, r2, lsl #12
    cf04:	0affffe7 	beq	cea8 <__cmpdf2+0x1c>
    cf08:	e51d0004 	ldr	r0, [sp, #-4]
    cf0c:	e12fff1e 	bx	lr

0000cf10 <__aeabi_cdrcmple>:
    cf10:	e1a0c000 	mov	ip, r0
    cf14:	e1a00002 	mov	r0, r2
    cf18:	e1a0200c 	mov	r2, ip
    cf1c:	e1a0c001 	mov	ip, r1
    cf20:	e1a01003 	mov	r1, r3
    cf24:	e1a0300c 	mov	r3, ip
    cf28:	eaffffff 	b	cf2c <__aeabi_cdcmpeq>

0000cf2c <__aeabi_cdcmpeq>:
    cf2c:	e92d4001 	push	{r0, lr}
    cf30:	ebffffd5 	bl	ce8c <__cmpdf2>
    cf34:	e3500000 	cmp	r0, #0
    cf38:	43700000 	cmnmi	r0, #0
    cf3c:	e8bd4001 	pop	{r0, lr}
    cf40:	e12fff1e 	bx	lr

0000cf44 <__aeabi_dcmpeq>:
    cf44:	e52de008 	str	lr, [sp, #-8]!
    cf48:	ebfffff7 	bl	cf2c <__aeabi_cdcmpeq>
    cf4c:	03a00001 	moveq	r0, #1
    cf50:	13a00000 	movne	r0, #0
    cf54:	e49de008 	ldr	lr, [sp], #8
    cf58:	e12fff1e 	bx	lr

0000cf5c <__aeabi_dcmplt>:
    cf5c:	e52de008 	str	lr, [sp, #-8]!
    cf60:	ebfffff1 	bl	cf2c <__aeabi_cdcmpeq>
    cf64:	33a00001 	movcc	r0, #1
    cf68:	23a00000 	movcs	r0, #0
    cf6c:	e49de008 	ldr	lr, [sp], #8
    cf70:	e12fff1e 	bx	lr

0000cf74 <__aeabi_dcmple>:
    cf74:	e52de008 	str	lr, [sp, #-8]!
    cf78:	ebffffeb 	bl	cf2c <__aeabi_cdcmpeq>
    cf7c:	93a00001 	movls	r0, #1
    cf80:	83a00000 	movhi	r0, #0
    cf84:	e49de008 	ldr	lr, [sp], #8
    cf88:	e12fff1e 	bx	lr

0000cf8c <__aeabi_dcmpge>:
    cf8c:	e52de008 	str	lr, [sp, #-8]!
    cf90:	ebffffde 	bl	cf10 <__aeabi_cdrcmple>
    cf94:	93a00001 	movls	r0, #1
    cf98:	83a00000 	movhi	r0, #0
    cf9c:	e49de008 	ldr	lr, [sp], #8
    cfa0:	e12fff1e 	bx	lr

0000cfa4 <__aeabi_dcmpgt>:
    cfa4:	e52de008 	str	lr, [sp, #-8]!
    cfa8:	ebffffd8 	bl	cf10 <__aeabi_cdrcmple>
    cfac:	33a00001 	movcc	r0, #1
    cfb0:	23a00000 	movcs	r0, #0
    cfb4:	e49de008 	ldr	lr, [sp], #8
    cfb8:	e12fff1e 	bx	lr

0000cfbc <__aeabi_d2iz>:
    cfbc:	e1a02080 	lsl	r2, r0, #1
    cfc0:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    cfc4:	2a00000c 	bcs	cffc <__aeabi_d2iz+0x40>
    cfc8:	5a000009 	bpl	cff4 <__aeabi_d2iz+0x38>
    cfcc:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    cfd0:	e0532ac2 	subs	r2, r3, r2, asr #21
    cfd4:	9a00000a 	bls	d004 <__aeabi_d2iz+0x48>
    cfd8:	e1a03580 	lsl	r3, r0, #11
    cfdc:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    cfe0:	e1833aa1 	orr	r3, r3, r1, lsr #21
    cfe4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    cfe8:	e1a00233 	lsr	r0, r3, r2
    cfec:	12600000 	rsbne	r0, r0, #0
    cff0:	e12fff1e 	bx	lr
    cff4:	e3a00000 	mov	r0, #0
    cff8:	e12fff1e 	bx	lr
    cffc:	e1911600 	orrs	r1, r1, r0, lsl #12
    d000:	1a000002 	bne	d010 <__aeabi_d2iz+0x54>
    d004:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    d008:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    d00c:	e12fff1e 	bx	lr
    d010:	e3a00000 	mov	r0, #0
    d014:	e12fff1e 	bx	lr
    d018:	e1a0c00d 	.word	0xe1a0c00d
    d01c:	e92dd8f0 	.word	0xe92dd8f0
    d020:	e24cb004 	.word	0xe24cb004
    d024:	e24dd014 	.word	0xe24dd014
    d028:	e50b0020 	.word	0xe50b0020
    d02c:	e50b1024 	.word	0xe50b1024
    d030:	e50b2028 	.word	0xe50b2028
    d034:	e50b302c 	.word	0xe50b302c
    d038:	e51b3020 	.word	0xe51b3020
    d03c:	e50b3030 	.word	0xe50b3030
    d040:	e51b3030 	.word	0xe51b3030
    d044:	e3530000 	.word	0xe3530000
    d048:	0a000002 	.word	0x0a000002
    d04c:	e51b3030 	.word	0xe51b3030
    d050:	e3530001 	.word	0xe3530001
    d054:	0a000220 	.word	0x0a000220
    d058:	e51b3024 	.word	0xe51b3024
    d05c:	e5932000 	.word	0xe5932000
    d060:	e59f3bd8 	.word	0xe59f3bd8
    d064:	e5832000 	.word	0xe5832000
    d068:	e59f2bc8 	.word	0xe59f2bc8
    d06c:	e59f3c00 	.word	0xe59f3c00
    d070:	e5823000 	.word	0xe5823000
    d074:	e59f3c00 	.word	0xe59f3c00
    d078:	e5931000 	.word	0xe5931000
    d07c:	e59f2b08 	.word	0xe59f2b08
    d080:	e59f3b08 	.word	0xe59f3b08
    d084:	e5823000 	.word	0xe5823000
    d088:	e59f3afc 	.word	0xe59f3afc
    d08c:	e5933000 	.word	0xe5933000
    d090:	e5813000 	.word	0xe5813000
    d094:	e5912000 	.word	0xe5912000
    d098:	e59f3b9c 	.word	0xe59f3b9c
    d09c:	e5832000 	.word	0xe5832000
    d0a0:	e59f2be0 	.word	0xe59f2be0
    d0a4:	e59f3bc8 	.word	0xe59f3bc8
    d0a8:	e5823000 	.word	0xe5823000
    d0ac:	e59f2ae0 	.word	0xe59f2ae0
    d0b0:	e59f3ae0 	.word	0xe59f3ae0
    d0b4:	e5823000 	.word	0xe5823000
    d0b8:	e59f2adc 	.word	0xe59f2adc
    d0bc:	e59f3adc 	.word	0xe59f3adc
    d0c0:	e5823000 	.word	0xe5823000
    d0c4:	e59f2b78 	.word	0xe59f2b78
    d0c8:	e59f3ad4 	.word	0xe59f3ad4
    d0cc:	e5823000 	.word	0xe5823000
    d0d0:	e59f3abc 	.word	0xe59f3abc
    d0d4:	e5932000 	.word	0xe5932000
    d0d8:	e59f3ab4 	.word	0xe59f3ab4
    d0dc:	e5933000 	.word	0xe5933000
    d0e0:	e1a00002 	.word	0xe1a00002
    d0e4:	e1a01003 	.word	0xe1a01003
    d0e8:	eb0014c2 	.word	0xeb0014c2
    d0ec:	e1a03000 	.word	0xe1a03000
    d0f0:	e1a02003 	.word	0xe1a02003
    d0f4:	e59f3b10 	.word	0xe59f3b10
    d0f8:	e5832000 	.word	0xe5832000
    d0fc:	e59f3a98 	.word	0xe59f3a98
    d100:	e5932000 	.word	0xe5932000
    d104:	e59f3a90 	.word	0xe59f3a90
    d108:	e5933000 	.word	0xe5933000
    d10c:	e1a00002 	.word	0xe1a00002
    d110:	e1a01003 	.word	0xe1a01003
    d114:	eb0014b7 	.word	0xeb0014b7
    d118:	e1a03000 	.word	0xe1a03000
    d11c:	e1a02003 	.word	0xe1a02003
    d120:	e59f3aec 	.word	0xe59f3aec
    d124:	e5832000 	.word	0xe5832000
    d128:	e59f3adc 	.word	0xe59f3adc
    d12c:	e5932000 	.word	0xe5932000
    d130:	e59f3adc 	.word	0xe59f3adc
    d134:	e5933000 	.word	0xe5933000
    d138:	e1a00002 	.word	0xe1a00002
    d13c:	e1a01003 	.word	0xe1a01003
    d140:	eb001403 	.word	0xeb001403
    d144:	e1a03000 	.word	0xe1a03000
    d148:	e1a02003 	.word	0xe1a02003
    d14c:	e59f3acc 	.word	0xe59f3acc
    d150:	e5832000 	.word	0xe5832000
    d154:	e59f3ab0 	.word	0xe59f3ab0
    d158:	e5932000 	.word	0xe5932000
    d15c:	e59f3aa8 	.word	0xe59f3aa8
    d160:	e5933000 	.word	0xe5933000
    d164:	e1a00002 	.word	0xe1a00002
    d168:	e1a01003 	.word	0xe1a01003
    d16c:	eb0014a1 	.word	0xeb0014a1
    d170:	e1a03000 	.word	0xe1a03000
    d174:	e1a02003 	.word	0xe1a02003
    d178:	e59f3a7c 	.word	0xe59f3a7c
    d17c:	e5832000 	.word	0xe5832000
    d180:	e59f3a8c 	.word	0xe59f3a8c
    d184:	e5932000 	.word	0xe5932000
    d188:	e59f3a84 	.word	0xe59f3a84
    d18c:	e5933000 	.word	0xe5933000
    d190:	e1a00002 	.word	0xe1a00002
    d194:	e1a01003 	.word	0xe1a01003
    d198:	eb001496 	.word	0xeb001496
    d19c:	e1a03000 	.word	0xe1a03000
    d1a0:	e1a02003 	.word	0xe1a02003
    d1a4:	e59f39fc 	.word	0xe59f39fc
    d1a8:	e5832000 	.word	0xe5832000
    d1ac:	e59f3a48 	.word	0xe59f3a48
    d1b0:	e5932000 	.word	0xe5932000
    d1b4:	e59f39ec 	.word	0xe59f39ec
    d1b8:	e5933000 	.word	0xe5933000
    d1bc:	e1a00002 	.word	0xe1a00002
    d1c0:	e1a01003 	.word	0xe1a01003
    d1c4:	eb0013e2 	.word	0xeb0013e2
    d1c8:	e1a03000 	.word	0xe1a03000
    d1cc:	e1a02003 	.word	0xe1a02003
    d1d0:	e59f3a28 	.word	0xe59f3a28
    d1d4:	e5832000 	.word	0xe5832000
    d1d8:	e59f29cc 	.word	0xe59f29cc
    d1dc:	e59f39cc 	.word	0xe59f39cc
    d1e0:	e5823000 	.word	0xe5823000
    d1e4:	e59f29c8 	.word	0xe59f29c8
    d1e8:	e59f39a0 	.word	0xe59f39a0
    d1ec:	e5823000 	.word	0xe5823000
    d1f0:	e59f2a9c 	.word	0xe59f2a9c
    d1f4:	e3a03001 	.word	0xe3a03001
    d1f8:	e5823000 	.word	0xe5823000
    d1fc:	ea00019d 	.word	0xea00019d
    d200:	e59f3a8c 	.word	0xe59f3a8c
    d204:	e5933000 	.word	0xe5933000
    d208:	e1a03103 	.word	0xe1a03103
    d20c:	e1a02003 	.word	0xe1a02003
    d210:	e59f399c 	.word	0xe59f399c
    d214:	e0825003 	.word	0xe0825003
    d218:	e59f3a74 	.word	0xe59f3a74
    d21c:	e5933000 	.word	0xe5933000
    d220:	e1a03103 	.word	0xe1a03103
    d224:	e1a02003 	.word	0xe1a02003
    d228:	e59f3984 	.word	0xe59f3984
    d22c:	e2433004 	.word	0xe2433004
    d230:	e0823003 	.word	0xe0823003
    d234:	e5934000 	.word	0xe5934000
    d238:	e59f3a54 	.word	0xe59f3a54
    d23c:	e5933000 	.word	0xe5933000
    d240:	e1a03083 	.word	0xe1a03083
    d244:	e2433001 	.word	0xe2433001
    d248:	e1a00003 	.word	0xe1a00003
    d24c:	eb001432 	.word	0xeb001432
    d250:	e1a03000 	.word	0xe1a03000
    d254:	e1a00004 	.word	0xe1a00004
    d258:	e1a01003 	.word	0xe1a01003
    d25c:	eb001465 	.word	0xeb001465
    d260:	e1a03000 	.word	0xe1a03000
    d264:	e1a04003 	.word	0xe1a04003
    d268:	e59f3a24 	.word	0xe59f3a24
    d26c:	e5933000 	.word	0xe5933000
    d270:	e1a00003 	.word	0xe1a00003
    d274:	eb001428 	.word	0xeb001428
    d278:	e1a03000 	.word	0xe1a03000
    d27c:	e1a00004 	.word	0xe1a00004
    d280:	e1a01003 	.word	0xe1a01003
    d284:	eb0014c1 	.word	0xeb0014c1
    d288:	e1a03000 	.word	0xe1a03000
    d28c:	e5853000 	.word	0xe5853000
    d290:	e59f2920 	.word	0xe59f2920
    d294:	e3a03002 	.word	0xe3a03002
    d298:	e5823000 	.word	0xe5823000
    d29c:	e59f2a00 	.word	0xe59f2a00
    d2a0:	e3a03000 	.word	0xe3a03000
    d2a4:	e5823000 	.word	0xe5823000
    d2a8:	e59f290c 	.word	0xe59f290c
    d2ac:	e3a03001 	.word	0xe3a03001
    d2b0:	e5823000 	.word	0xe5823000
    d2b4:	e59f39d8 	.word	0xe59f39d8
    d2b8:	e5932000 	.word	0xe5932000
    d2bc:	e59f39e0 	.word	0xe59f39e0
    d2c0:	e5933000 	.word	0xe5933000
    d2c4:	e0632002 	.word	0xe0632002
    d2c8:	e59f38ec 	.word	0xe59f38ec
    d2cc:	e5933000 	.word	0xe5933000
    d2d0:	e0822003 	.word	0xe0822003
    d2d4:	e59f38e0 	.word	0xe59f38e0
    d2d8:	e5933000 	.word	0xe5933000
    d2dc:	e1a00002 	.word	0xe1a00002
    d2e0:	e1a01003 	.word	0xe1a01003
    d2e4:	eb001562 	.word	0xeb001562
    d2e8:	e1a03000 	.word	0xe1a03000
    d2ec:	e1a02003 	.word	0xe1a02003
    d2f0:	e59f38c8 	.word	0xe59f38c8
    d2f4:	e5832000 	.word	0xe5832000
    d2f8:	ea000142 	.word	0xea000142
    d2fc:	e59f39a0 	.word	0xe59f39a0
    d300:	e5934000 	.word	0xe5934000
    d304:	e59f3988 	.word	0xe59f3988
    d308:	e5935000 	.word	0xe5935000
    d30c:	e59f3980 	.word	0xe59f3980
    d310:	e5933000 	.word	0xe5933000
    d314:	e2432001 	.word	0xe2432001
    d318:	e59f3974 	.word	0xe59f3974
    d31c:	e5933000 	.word	0xe5933000
    d320:	e2433001 	.word	0xe2433001
    d324:	e0010293 	.word	0xe0010293
    d328:	e59f3974 	.word	0xe59f3974
    d32c:	e5932000 	.word	0xe5932000
    d330:	e59f396c 	.word	0xe59f396c
    d334:	e5933000 	.word	0xe5933000
    d338:	e0030392 	.word	0xe0030392
    d33c:	e0633001 	.word	0xe0633001
    d340:	e1a00003 	.word	0xe1a00003
    d344:	eb0013f4 	.word	0xeb0013f4
    d348:	e1a06000 	.word	0xe1a06000
    d34c:	e59f3940 	.word	0xe59f3940
    d350:	e5933000 	.word	0xe5933000
    d354:	e1a03083 	.word	0xe1a03083
    d358:	e2432001 	.word	0xe2432001
    d35c:	e59f3930 	.word	0xe59f3930
    d360:	e5933000 	.word	0xe5933000
    d364:	e1a03083 	.word	0xe1a03083
    d368:	e2433003 	.word	0xe2433003
    d36c:	e0030392 	.word	0xe0030392
    d370:	e1a00003 	.word	0xe1a00003
    d374:	eb0013e8 	.word	0xeb0013e8
    d378:	e1a03000 	.word	0xe1a03000
    d37c:	e1a00006 	.word	0xe1a00006
    d380:	e1a01003 	.word	0xe1a01003
    d384:	eb001481 	.word	0xeb001481
    d388:	e1a03000 	.word	0xe1a03000
    d38c:	e1a02003 	.word	0xe1a02003
    d390:	e59f18ec 	.word	0xe59f18ec
    d394:	e1a03004 	.word	0xe1a03004
    d398:	e1a03083 	.word	0xe1a03083
    d39c:	e0833004 	.word	0xe0833004
    d3a0:	e1a03103 	.word	0xe1a03103
    d3a4:	e0833004 	.word	0xe0833004
    d3a8:	e0833005 	.word	0xe0833005
    d3ac:	e7812103 	.word	0xe7812103
    d3b0:	e59f38ec 	.word	0xe59f38ec
    d3b4:	e5933000 	.word	0xe5933000
    d3b8:	e3530000 	.word	0xe3530000
    d3bc:	da0000af 	.word	0xda0000af
    d3c0:	e59f38cc 	.word	0xe59f38cc
    d3c4:	e5932000 	.word	0xe5932000
    d3c8:	e59f38d4 	.word	0xe59f38d4
    d3cc:	e5933000 	.word	0xe5933000
    d3d0:	e0633002 	.word	0xe0633002
    d3d4:	e2832001 	.word	0xe2832001
    d3d8:	e59f37d8 	.word	0xe59f37d8
    d3dc:	e5933000 	.word	0xe5933000
    d3e0:	e0030392 	.word	0xe0030392
    d3e4:	e1a00003 	.word	0xe1a00003
    d3e8:	eb0013cb 	.word	0xeb0013cb
    d3ec:	e1a04000 	.word	0xe1a04000
    d3f0:	e59f389c 	.word	0xe59f389c
    d3f4:	e5932000 	.word	0xe5932000
    d3f8:	e59f38a4 	.word	0xe59f38a4
    d3fc:	e5933000 	.word	0xe5933000
    d400:	e0823003 	.word	0xe0823003
    d404:	e1a00003 	.word	0xe1a00003
    d408:	eb0013c3 	.word	0xeb0013c3
    d40c:	e1a03000 	.word	0xe1a03000
    d410:	e1a00004 	.word	0xe1a00004
    d414:	e1a01003 	.word	0xe1a01003
    d418:	eb00145c 	.word	0xeb00145c
    d41c:	e1a03000 	.word	0xe1a03000
    d420:	e1a02003 	.word	0xe1a02003
    d424:	e59f3798 	.word	0xe59f3798
    d428:	e5832000 	.word	0xe5832000
    d42c:	e59f3870 	.word	0xe59f3870
    d430:	e5932000 	.word	0xe5932000
    d434:	e1a03002 	.word	0xe1a03002
    d438:	e1a03083 	.word	0xe1a03083
    d43c:	e0833002 	.word	0xe0833002
    d440:	e1a03103 	.word	0xe1a03103
    d444:	e0832002 	.word	0xe0832002
    d448:	e59f3844 	.word	0xe59f3844
    d44c:	e5933000 	.word	0xe5933000
    d450:	e0823003 	.word	0xe0823003
    d454:	e1a02103 	.word	0xe1a02103
    d458:	e59f3754 	.word	0xe59f3754
    d45c:	e0827003 	.word	0xe0827003
    d460:	e59f383c 	.word	0xe59f383c
    d464:	e5932000 	.word	0xe5932000
    d468:	e1a03002 	.word	0xe1a03002
    d46c:	e1a03083 	.word	0xe1a03083
    d470:	e0833002 	.word	0xe0833002
    d474:	e1a03103 	.word	0xe1a03103
    d478:	e0832002 	.word	0xe0832002
    d47c:	e59f3810 	.word	0xe59f3810
    d480:	e5933000 	.word	0xe5933000
    d484:	e0823003 	.word	0xe0823003
    d488:	e1a01103 	.word	0xe1a01103
    d48c:	e3e02033 	.word	0xe3e02033
    d490:	e59f371c 	.word	0xe59f371c
    d494:	e0823003 	.word	0xe0823003
    d498:	e0813003 	.word	0xe0813003
    d49c:	e5933000 	.word	0xe5933000
    d4a0:	e1a00003 	.word	0xe1a00003
    d4a4:	ebfffd1d 	.word	0xebfffd1d
    d4a8:	e1a05000 	.word	0xe1a05000
    d4ac:	e1a06001 	.word	0xe1a06001
    d4b0:	e59f370c 	.word	0xe59f370c
    d4b4:	e5933000 	.word	0xe5933000
    d4b8:	e1a00003 	.word	0xe1a00003
    d4bc:	ebfffd17 	.word	0xebfffd17
    d4c0:	e1a03000 	.word	0xe1a03000
    d4c4:	e1a04001 	.word	0xe1a04001
    d4c8:	e1a00003 	.word	0xe1a00003
    d4cc:	e1a01004 	.word	0xe1a01004
    d4d0:	eb0014f3 	.word	0xeb0014f3
    d4d4:	e1a03000 	.word	0xe1a03000
    d4d8:	e1a04001 	.word	0xe1a04001
    d4dc:	e1a00005 	.word	0xe1a00005
    d4e0:	e1a01006 	.word	0xe1a01006
    d4e4:	e1a02003 	.word	0xe1a02003
    d4e8:	e1a03004 	.word	0xe1a03004
    d4ec:	ebfffd3b 	.word	0xebfffd3b
    d4f0:	e1a03000 	.word	0xe1a03000
    d4f4:	e1a04001 	.word	0xe1a04001
    d4f8:	e1a00003 	.word	0xe1a00003
    d4fc:	e1a01004 	.word	0xe1a01004
    d500:	eb0012e9 	.word	0xeb0012e9
    d504:	e1a03000 	.word	0xe1a03000
    d508:	e5873000 	.word	0xe5873000
    d50c:	e59f26a4 	.word	0xe59f26a4
    d510:	e3a03001 	.word	0xe3a03001
    d514:	e5823000 	.word	0xe5823000
    d518:	e59f3774 	.word	0xe59f3774
    d51c:	e5932000 	.word	0xe5932000
    d520:	e1a03002 	.word	0xe1a03002
    d524:	e1a03083 	.word	0xe1a03083
    d528:	e0833002 	.word	0xe0833002
    d52c:	e1a03103 	.word	0xe1a03103
    d530:	e0832002 	.word	0xe0832002
    d534:	e59f3768 	.word	0xe59f3768
    d538:	e5933000 	.word	0xe5933000
    d53c:	e0823003 	.word	0xe0823003
    d540:	e2434001 	.word	0xe2434001
    d544:	e59f3758 	.word	0xe59f3758
    d548:	e5932000 	.word	0xe5932000
    d54c:	e1a03002 	.word	0xe1a03002
    d550:	e1a03083 	.word	0xe1a03083
    d554:	e0833002 	.word	0xe0833002
    d558:	e1a03103 	.word	0xe1a03103
    d55c:	e0832002 	.word	0xe0832002
    d560:	e59f372c 	.word	0xe59f372c
    d564:	e5933000 	.word	0xe5933000
    d568:	e0823003 	.word	0xe0823003
    d56c:	e1a02103 	.word	0xe1a02103
    d570:	e59f363c 	.word	0xe59f363c
    d574:	e0823003 	.word	0xe0823003
    d578:	e5931000 	.word	0xe5931000
    d57c:	e59f3710 	.word	0xe59f3710
    d580:	e5932000 	.word	0xe5932000
    d584:	e1a03002 	.word	0xe1a03002
    d588:	e1a03083 	.word	0xe1a03083
    d58c:	e0833002 	.word	0xe0833002
    d590:	e1a03103 	.word	0xe1a03103
    d594:	e0832002 	.word	0xe0832002
    d598:	e59f3704 	.word	0xe59f3704
    d59c:	e5933000 	.word	0xe5933000
    d5a0:	e0823003 	.word	0xe0823003
    d5a4:	e2432001 	.word	0xe2432001
    d5a8:	e59f36e0 	.word	0xe59f36e0
    d5ac:	e7933102 	.word	0xe7933102
    d5b0:	e1a00001 	.word	0xe1a00001
    d5b4:	e1a01003 	.word	0xe1a01003
    d5b8:	eb00138e 	.word	0xeb00138e
    d5bc:	e1a03000 	.word	0xe1a03000
    d5c0:	e1a02003 	.word	0xe1a02003
    d5c4:	e59f36c4 	.word	0xe59f36c4
    d5c8:	e7832104 	.word	0xe7832104
    d5cc:	e59f36c0 	.word	0xe59f36c0
    d5d0:	e5932000 	.word	0xe5932000
    d5d4:	e1a03002 	.word	0xe1a03002
    d5d8:	e1a03083 	.word	0xe1a03083
    d5dc:	e0833002 	.word	0xe0833002
    d5e0:	e1a03103 	.word	0xe1a03103
    d5e4:	e0832002 	.word	0xe0832002
    d5e8:	e59f36b4 	.word	0xe59f36b4
    d5ec:	e5933000 	.word	0xe5933000
    d5f0:	e0823003 	.word	0xe0823003
    d5f4:	e2434001 	.word	0xe2434001
    d5f8:	e59f36a4 	.word	0xe59f36a4
    d5fc:	e5932000 	.word	0xe5932000
    d600:	e1a03002 	.word	0xe1a03002
    d604:	e1a03083 	.word	0xe1a03083
    d608:	e0833002 	.word	0xe0833002
    d60c:	e1a03103 	.word	0xe1a03103
    d610:	e0832002 	.word	0xe0832002
    d614:	e59f3678 	.word	0xe59f3678
    d618:	e5933000 	.word	0xe5933000
    d61c:	e0823003 	.word	0xe0823003
    d620:	e1a02103 	.word	0xe1a02103
    d624:	e59f3588 	.word	0xe59f3588
    d628:	e0823003 	.word	0xe0823003
    d62c:	e5931000 	.word	0xe5931000
    d630:	e59f365c 	.word	0xe59f365c
    d634:	e5932000 	.word	0xe5932000
    d638:	e1a03002 	.word	0xe1a03002
    d63c:	e1a03083 	.word	0xe1a03083
    d640:	e0833002 	.word	0xe0833002
    d644:	e1a03103 	.word	0xe1a03103
    d648:	e0832002 	.word	0xe0832002
    d64c:	e59f3650 	.word	0xe59f3650
    d650:	e5933000 	.word	0xe5933000
    d654:	e0823003 	.word	0xe0823003
    d658:	e2432001 	.word	0xe2432001
    d65c:	e59f3634 	.word	0xe59f3634
    d660:	e7933102 	.word	0xe7933102
    d664:	e1a00001 	.word	0xe1a00001
    d668:	e1a01003 	.word	0xe1a01003
    d66c:	eb001361 	.word	0xeb001361
    d670:	e1a03000 	.word	0xe1a03000
    d674:	e1a02003 	.word	0xe1a02003
    d678:	e59f3618 	.word	0xe59f3618
    d67c:	e7832104 	.word	0xe7832104
    d680:	e59f361c 	.word	0xe59f361c
    d684:	e5932000 	.word	0xe5932000
    d688:	e1a03002 	.word	0xe1a03002
    d68c:	e1a03083 	.word	0xe1a03083
    d690:	e0833002 	.word	0xe0833002
    d694:	e1a03103 	.word	0xe1a03103
    d698:	e0832002 	.word	0xe0832002
    d69c:	e59f35f0 	.word	0xe59f35f0
    d6a0:	e5933000 	.word	0xe5933000
    d6a4:	e0824003 	.word	0xe0824003
    d6a8:	e59f35f4 	.word	0xe59f35f4
    d6ac:	e5932000 	.word	0xe5932000
    d6b0:	e1a03002 	.word	0xe1a03002
    d6b4:	e1a03083 	.word	0xe1a03083
    d6b8:	e0833002 	.word	0xe0833002
    d6bc:	e1a03103 	.word	0xe1a03103
    d6c0:	e0832002 	.word	0xe0832002
    d6c4:	e59f35c8 	.word	0xe59f35c8
    d6c8:	e5933000 	.word	0xe5933000
    d6cc:	e0823003 	.word	0xe0823003
    d6d0:	e1a02103 	.word	0xe1a02103
    d6d4:	e59f34d8 	.word	0xe59f34d8
    d6d8:	e0823003 	.word	0xe0823003
    d6dc:	e5931000 	.word	0xe5931000
    d6e0:	e59f35bc 	.word	0xe59f35bc
    d6e4:	e5932000 	.word	0xe5932000
    d6e8:	e1a03002 	.word	0xe1a03002
    d6ec:	e1a03083 	.word	0xe1a03083
    d6f0:	e0833002 	.word	0xe0833002
    d6f4:	e1a03103 	.word	0xe1a03103
    d6f8:	e0832002 	.word	0xe0832002
    d6fc:	e59f3590 	.word	0xe59f3590
    d700:	e5933000 	.word	0xe5933000
    d704:	e0822003 	.word	0xe0822003
    d708:	e59f3580 	.word	0xe59f3580
    d70c:	e7933102 	.word	0xe7933102
    d710:	e1a00001 	.word	0xe1a00001
    d714:	e1a01003 	.word	0xe1a01003
    d718:	eb001336 	.word	0xeb001336
    d71c:	e1a03000 	.word	0xe1a03000
    d720:	e1a02003 	.word	0xe1a02003
    d724:	e59f3564 	.word	0xe59f3564
    d728:	e7832104 	.word	0xe7832104
    d72c:	e59f3570 	.word	0xe59f3570
    d730:	e5932000 	.word	0xe5932000
    d734:	e1a03002 	.word	0xe1a03002
    d738:	e1a03083 	.word	0xe1a03083
    d73c:	e0833002 	.word	0xe0833002
    d740:	e1a03103 	.word	0xe1a03103
    d744:	e0832002 	.word	0xe0832002
    d748:	e59f3544 	.word	0xe59f3544
    d74c:	e5933000 	.word	0xe5933000
    d750:	e0824003 	.word	0xe0824003
    d754:	e59f3548 	.word	0xe59f3548
    d758:	e5932000 	.word	0xe5932000
    d75c:	e1a03002 	.word	0xe1a03002
    d760:	e1a03083 	.word	0xe1a03083
    d764:	e0833002 	.word	0xe0833002
    d768:	e1a03103 	.word	0xe1a03103
    d76c:	e0832002 	.word	0xe0832002
    d770:	e59f351c 	.word	0xe59f351c
    d774:	e5933000 	.word	0xe5933000
    d778:	e0823003 	.word	0xe0823003
    d77c:	e1a02103 	.word	0xe1a02103
    d780:	e59f342c 	.word	0xe59f342c
    d784:	e0823003 	.word	0xe0823003
    d788:	e5931000 	.word	0xe5931000
    d78c:	e59f3510 	.word	0xe59f3510
    d790:	e5932000 	.word	0xe5932000
    d794:	e1a03002 	.word	0xe1a03002
    d798:	e1a03083 	.word	0xe1a03083
    d79c:	e0833002 	.word	0xe0833002
    d7a0:	e1a03103 	.word	0xe1a03103
    d7a4:	e0832002 	.word	0xe0832002
    d7a8:	e59f34e4 	.word	0xe59f34e4
    d7ac:	e5933000 	.word	0xe5933000
    d7b0:	e0822003 	.word	0xe0822003
    d7b4:	e59f34dc 	.word	0xe59f34dc
    d7b8:	e7933102 	.word	0xe7933102
    d7bc:	e1a00001 	.word	0xe1a00001
    d7c0:	e1a01003 	.word	0xe1a01003
    d7c4:	eb00130b 	.word	0xeb00130b
    d7c8:	e1a03000 	.word	0xe1a03000
    d7cc:	e1a02003 	.word	0xe1a02003
    d7d0:	e59f34c0 	.word	0xe59f34c0
    d7d4:	e7832104 	.word	0xe7832104
    d7d8:	e59f33e0 	.word	0xe59f33e0
    d7dc:	e5933000 	.word	0xe5933000
    d7e0:	e2432001 	.word	0xe2432001
    d7e4:	e59f33d4 	.word	0xe59f33d4
    d7e8:	e5832000 	.word	0xe5832000
    d7ec:	e59f34b0 	.word	0xe59f34b0
    d7f0:	e5932000 	.word	0xe5932000
    d7f4:	e59f33c0 	.word	0xe59f33c0
    d7f8:	e5933000 	.word	0xe5933000
    d7fc:	e0822003 	.word	0xe0822003
    d800:	e59f349c 	.word	0xe59f349c
    d804:	e5832000 	.word	0xe5832000
    d808:	e59f33b0 	.word	0xe59f33b0
    d80c:	e5933000 	.word	0xe5933000
    d810:	e3530000 	.word	0xe3530000
    d814:	cafffeb8 	.word	0xcafffeb8
    d818:	e59f3474 	.word	0xe59f3474
    d81c:	e5934000 	.word	0xe5934000
    d820:	e59f346c 	.word	0xe59f346c
    d824:	e5933000 	.word	0xe5933000
    d828:	e2833001 	.word	0xe2833001
    d82c:	e1a00003 	.word	0xe1a00003
    d830:	eb0012b9 	.word	0xeb0012b9
    d834:	e1a02000 	.word	0xe1a02000
    d838:	e59f3388 	.word	0xe59f3388
    d83c:	e7832104 	.word	0xe7832104
    d840:	e59f344c 	.word	0xe59f344c
    d844:	e5934000 	.word	0xe5934000
    d848:	e59f3444 	.word	0xe59f3444
    d84c:	e5933000 	.word	0xe5933000
    d850:	e1a00003 	.word	0xe1a00003
    d854:	eb0012b0 	.word	0xeb0012b0
    d858:	e1a02000 	.word	0xe1a02000
    d85c:	e59f3368 	.word	0xe59f3368
    d860:	e7832104 	.word	0xe7832104
    d864:	e59f3428 	.word	0xe59f3428
    d868:	e5933000 	.word	0xe5933000
    d86c:	e2832001 	.word	0xe2832001
    d870:	e59f341c 	.word	0xe59f341c
    d874:	e5832000 	.word	0xe5832000
    d878:	e59f3414 	.word	0xe59f3414
    d87c:	e5932000 	.word	0xe5932000
    d880:	e59f33b8 	.word	0xe59f33b8
    d884:	e5933000 	.word	0xe5933000
    d888:	e1520003 	.word	0xe1520003
    d88c:	dafffe5b 	.word	0xdafffe5b
    d890:	e59f23ec 	.word	0xe59f23ec
    d894:	e59f33d8 	.word	0xe59f33d8
    d898:	e5823038 	.word	0xe5823038
    d89c:	e59f2390 	.word	0xe59f2390
    d8a0:	e59f3328 	.word	0xe59f3328
    d8a4:	e5823000 	.word	0xe5823000
    d8a8:	e59f3384 	.word	0xe59f3384
    d8ac:	e5932000 	.word	0xe5932000
    d8b0:	e59f33b8 	.word	0xe59f33b8
    d8b4:	e5832000 	.word	0xe5832000
    d8b8:	e59f33b0 	.word	0xe59f33b0
    d8bc:	e5932000 	.word	0xe5932000
    d8c0:	e59f33a4 	.word	0xe59f33a4
    d8c4:	e5832000 	.word	0xe5832000
    d8c8:	e59f339c 	.word	0xe59f339c
    d8cc:	e5932000 	.word	0xe5932000
    d8d0:	e59f33b4 	.word	0xe59f33b4
    d8d4:	e5832000 	.word	0xe5832000
    d8d8:	ea00082f 	.word	0xea00082f
    d8dc:	e59f32c8 	.word	0xe59f32c8
    d8e0:	e5933000 	.word	0xe5933000
    d8e4:	e59b0008 	.word	0xe59b0008
    d8e8:	e1a01003 	.word	0xe1a01003
    d8ec:	eb001218 	.word	0xeb001218
    d8f0:	e1a03000 	.word	0xe1a03000
    d8f4:	e1a02003 	.word	0xe1a02003
    d8f8:	e59f339c 	.word	0xe59f339c
    d8fc:	e5832000 	.word	0xe5832000
    d900:	e59f3384 	.word	0xe59f3384
    d904:	e5933000 	.word	0xe5933000
    d908:	e1a00003 	.word	0xe1a00003
    d90c:	e59f1360 	.word	0xe59f1360
    d910:	eb001378 	.word	0xeb001378
    d914:	e1a03000 	.word	0xe1a03000
    d918:	e3530000 	.word	0xe3530000
    d91c:	ba000000 	.word	0xba000000
    d920:	ea000008 	.word	0xea000008
    d924:	e59f3370 	.word	0xe59f3370
    d928:	e5933000 	.word	0xe5933000
    d92c:	e1a00003 	.word	0xe1a00003
    d930:	e59f133c 	.word	0xe59f133c
    d934:	eb00136f 	.word	0xeb00136f
    d938:	e1a03000 	.word	0xe1a03000
    d93c:	e3530000 	.word	0xe3530000
    d940:	ba000000 	.word	0xba000000
    d944:	eaffffff 	.word	0xeaffffff
    d948:	e59f2284 	.word	0xe59f2284
    d94c:	e59f3284 	.word	0xe59f3284
    d950:	e5823000 	.word	0xe5823000
    d954:	e59f3278 	.word	0xe59f3278
    d958:	e5933000 	.word	0xe5933000
    d95c:	e1a00003 	.word	0xe1a00003
    d960:	e59f1274 	.word	0xe59f1274
    d964:	eb001309 	.word	0xeb001309
    d968:	e1a03000 	.word	0xe1a03000
    d96c:	e1a02003 	.word	0xe1a02003
    d970:	e59f3268 	.word	0xe59f3268
    d974:	e5832000 	.word	0xe5832000
    d978:	e59f3260 	.word	0xe59f3260
    d97c:	e5933000 	.word	0xe5933000
    d980:	e1a00003 	.word	0xe1a00003
    d984:	e59b1004 	.word	0xe59b1004
    d988:	eb00129a 	.word	0xeb00129a
    d98c:	e1a03000 	.word	0xe1a03000
    d990:	e1a02003 	.word	0xe1a02003
    d994:	e59f3248 	.word	0xe59f3248
    d998:	e5832000 	.word	0xe5832000
    d99c:	e59f323c 	.word	0xe59f323c
    d9a0:	e5933000 	.word	0xe5933000
    d9a4:	e1a00003 	.word	0xe1a00003
    d9a8:	e51b102c 	.word	0xe51b102c
    d9ac:	eb001291 	.word	0xeb001291
    d9b0:	e1a03000 	.word	0xe1a03000
    d9b4:	e1a02003 	.word	0xe1a02003
    d9b8:	e59f3228 	.word	0xe59f3228
    d9bc:	e5832000 	.word	0xe5832000
    d9c0:	e59f321c 	.word	0xe59f321c
    d9c4:	e5933000 	.word	0xe5933000
    d9c8:	e1a00003 	.word	0xe1a00003
    d9cc:	ebfffbd3 	.word	0xebfffbd3
    d9d0:	e1a03000 	.word	0xe1a03000
    d9d4:	e1a04001 	.word	0xe1a04001
    d9d8:	e1a00003 	.word	0xe1a00003
    d9dc:	e1a01004 	.word	0xe1a01004
    d9e0:	eb0013b2 	.word	0xeb0013b2
    d9e4:	e1a03000 	.word	0xe1a03000
    d9e8:	e1a04001 	.word	0xe1a04001
    d9ec:	e1a00003 	.word	0xe1a00003
    d9f0:	e1a01004 	.word	0xe1a01004
    d9f4:	eb0011ac 	.word	0xeb0011ac
    d9f8:	e1a02000 	.word	0xe1a02000
    d9fc:	e59f31e8 	.word	0xe59f31e8
    da00:	e5832000 	.word	0xe5832000
    da04:	e59f31dc 	.word	0xe59f31dc
    da08:	e5933000 	.word	0xe5933000
    da0c:	e1a00003 	.word	0xe1a00003
    da10:	ebfffbc2 	.word	0xebfffbc2
    da14:	e1a03000 	.word	0xe1a03000
    da18:	e1a04001 	.word	0xe1a04001
    da1c:	e1a00003 	.word	0xe1a00003
    da20:	e1a01004 	.word	0xe1a01004
    da24:	eb0013a1 	.word	0xeb0013a1
    da28:	e1a03000 	.word	0xe1a03000
    da2c:	e1a04001 	.word	0xe1a04001
    da30:	e1a00003 	.word	0xe1a00003
    da34:	e1a01004 	.word	0xe1a01004
    da38:	eb00119b 	.word	0xeb00119b
    da3c:	e1a02000 	.word	0xe1a02000
    da40:	e59f31e0 	.word	0xe59f31e0
    da44:	e5832000 	.word	0xe5832000
    da48:	e59f3194 	.word	0xe59f3194
    da4c:	e5933000 	.word	0xe5933000
    da50:	e1a00003 	.word	0xe1a00003
    da54:	ebfffbb1 	.word	0xebfffbb1
    da58:	e1a03000 	.word	0xe1a03000
    da5c:	e1a04001 	.word	0xe1a04001
    da60:	e1a00003 	.word	0xe1a00003
    da64:	e1a01004 	.word	0xe1a01004
    da68:	eb001384 	.word	0xeb001384
    da6c:	e1a03000 	.word	0xe1a03000
    da70:	e1a04001 	.word	0xe1a04001
    da74:	e1a00003 	.word	0xe1a00003
    da78:	e1a01004 	.word	0xe1a01004
    da7c:	eb00118a 	.word	0xeb00118a
    da80:	e1a02000 	.word	0xe1a02000
    da84:	e59f3164 	.word	0xe59f3164
    da88:	e5832000 	.word	0xe5832000
    da8c:	e59f3154 	.word	0xe59f3154
    da90:	e5933000 	.word	0xe5933000
    da94:	e1a00003 	.word	0xe1a00003
    da98:	ebfffba0 	.word	0xebfffba0
    da9c:	e1a03000 	.word	0xe1a03000
    daa0:	e1a04001 	.word	0xe1a04001
    daa4:	e1a00003 	.word	0xe1a00003
    daa8:	e1a01004 	.word	0xe1a01004
    daac:	eb001373 	.word	0xeb001373
    dab0:	e1a03000 	.word	0xe1a03000
    dab4:	e1a04001 	.word	0xe1a04001
    dab8:	e1a00003 	.word	0xe1a00003
    dabc:	e1a01004 	.word	0xe1a01004
    dac0:	eb001179 	.word	0xeb001179
    dac4:	e1a02000 	.word	0xe1a02000
    dac8:	e59f3154 	.word	0xe59f3154
    dacc:	e5832000 	.word	0xe5832000
    dad0:	e59f3150 	.word	0xe59f3150
    dad4:	e5932000 	.word	0xe5932000
    dad8:	e59f3148 	.word	0xe59f3148
    dadc:	e5933000 	.word	0xe5933000
    dae0:	e1a00002 	.word	0xe1a00002
    dae4:	e1a01003 	.word	0xe1a01003
    dae8:	eb001242 	.word	0xeb001242
    daec:	e1a03000 	.word	0xe1a03000
    daf0:	e1a02003 	.word	0xe1a02003
    daf4:	e59f311c 	.word	0xe59f311c
    daf8:	e5832000 	.word	0xe5832000
    dafc:	e59f3120 	.word	0xe59f3120
    db00:	e5932000 	.word	0xe5932000
    db04:	e59f3118 	.word	0xe59f3118
    db08:	e5933000 	.word	0xe5933000
    db0c:	e1a00002 	.word	0xe1a00002
    db10:	e1a01003 	.word	0xe1a01003
    db14:	eb001237 	.word	0xeb001237
    db18:	e1a03000 	.word	0xe1a03000
    db1c:	e1a02003 	.word	0xe1a02003
    db20:	e59f30e8 	.word	0xe59f30e8
    db24:	e5832000 	.word	0xe5832000
    db28:	e59f30bc 	.word	0xe59f30bc
    db2c:	e5932000 	.word	0xe5932000
    db30:	e59f3100 	.word	0xe59f3100
    db34:	e5832004 	.word	0xe5832004
    db38:	e59f30b0 	.word	0xe59f30b0
    db3c:	e5932000 	.word	0xe5932000
    db40:	e59f30f4 	.word	0xe59f30f4
    db44:	e5832004 	.word	0xe5832004
    db48:	e59f311c 	.word	0xe59f311c
    db4c:	e5933000 	.word	0xe5933000
    db50:	e51b0028 	.word	0xe51b0028
    db54:	e1a01003 	.word	0xe1a01003
    db58:	eb0012e8 	.word	0xeb0012e8
    db5c:	e1a03000 	.word	0xe1a03000
    db60:	e3530000 	.word	0xe3530000
    db64:	1a00004f 	.word	0x1a00004f
    db68:	e59f3100 	.word	0xe59f3100
    db6c:	e5933000 	.word	0xe5933000
    db70:	e51b002c 	.word	0xe51b002c
    db74:	e1a01003 	.word	0xe1a01003
    db78:	eb0012e0 	.word	0xeb0012e0
    db7c:	e1a03000 	.word	0xe1a03000
    db80:	e3530000 	.word	0xe3530000
    db84:	1a000047 	.word	0x1a000047
    db88:	ea000196 	.word	0xea000196
    db8c:	40001210 	.word	0x40001210
    db90:	3f800000 	.word	0x3f800000
    db94:	40000f60 	.word	0x40000f60
    db98:	45c75119 	.word	0x45c75119
    db9c:	40000f5c 	.word	0x40000f5c
    dba0:	45c6a605 	.word	0x45c6a605
    dba4:	45c7199a 	.word	0x45c7199a
    dba8:	40000f44 	.word	0x40000f44
    dbac:	40000f3c 	.word	0x40000f3c
    dbb0:	44faa000 	.word	0x44faa000
    dbb4:	40001314 	.word	0x40001314
    dbb8:	40001b10 	.word	0x40001b10
    dbbc:	40001b0c 	.word	0x40001b0c
    dbc0:	40001b08 	.word	0x40001b08
    dbc4:	40000f38 	.word	0x40000f38
    dbc8:	40001278 	.word	0x40001278
    dbcc:	40001244 	.word	0x40001244
    dbd0:	c47a0000 	.word	0xc47a0000
    dbd4:	40000f68 	.word	0x40000f68
    dbd8:	40490fdb 	.word	0x40490fdb
    dbdc:	43340000 	.word	0x43340000
    dbe0:	40000f64 	.word	0x40000f64
    dbe4:	40000f20 	.word	0x40000f20
    dbe8:	40000f1c 	.word	0x40000f1c
    dbec:	40000f18 	.word	0x40000f18
    dbf0:	40000f10 	.word	0x40000f10
    dbf4:	40000ef8 	.word	0x40000ef8
    dbf8:	40000efc 	.word	0x40000efc
    dbfc:	40000f48 	.word	0x40000f48
    dc00:	40000f40 	.word	0x40000f40
    dc04:	40000f00 	.word	0x40000f00
    dc08:	40000eec 	.word	0x40000eec
    dc0c:	40000f54 	.word	0x40000f54
    dc10:	40000f04 	.word	0x40000f04
    dc14:	40000f50 	.word	0x40000f50
    dc18:	40000f08 	.word	0x40000f08
    dc1c:	40000ee0 	.word	0x40000ee0
    dc20:	40000f4c 	.word	0x40000f4c
    dc24:	40000f0c 	.word	0x40000f0c
    dc28:	40000f14 	.word	0x40000f14
    dc2c:	40000ee4 	.word	0x40000ee4
    dc30:	40000edc 	.word	0x40000edc
    dc34:	40000f28 	.word	0x40000f28
    dc38:	400012e0 	.word	0x400012e0
    dc3c:	400012ac 	.word	0x400012ac
    dc40:	40001b1c 	.word	0x40001b1c
    dc44:	40000f58 	.word	0x40000f58
    dc48:	40000ee8 	.word	0x40000ee8
    dc4c:	40000ec4 	.word	0x40000ec4
    dc50:	40000ec8 	.word	0x40000ec8
    dc54:	40000ecc 	.word	0x40000ecc
    dc58:	40000ed0 	.word	0x40000ed0
    dc5c:	40000ed8 	.word	0x40000ed8
    dc60:	40000ed4 	.word	0x40000ed4
    dc64:	40001b04 	.word	0x40001b04
    dc68:	40001b00 	.word	0x40001b00
    dc6c:	40000f30 	.word	0x40000f30
    dc70:	40000f2c 	.word	0x40000f2c
    dc74:	00000000 	.word	0x00000000
    dc78:	40000ef4 	.word	0x40000ef4
    dc7c:	40000838 	.word	0x40000838
    dc80:	40000ef0 	.word	0x40000ef0
    dc84:	40000f6c 	.word	0x40000f6c
    dc88:	400015b8 	.word	0x400015b8
    dc8c:	40000f34 	.word	0x40000f34
    dc90:	4000083c 	.word	0x4000083c
    dc94:	40001b18 	.word	0x40001b18
    dc98:	40000ae0 	.word	0x40000ae0
    dc9c:	40000f24 	.word	0x40000f24
    dca0:	4000185c 	.word	0x4000185c
    dca4:	40001b14 	.word	0x40001b14
    dca8:	e51f30a4 	.word	0xe51f30a4
    dcac:	e5934000 	.word	0xe5934000
    dcb0:	e51f3098 	.word	0xe51f3098
    dcb4:	e5932000 	.word	0xe5932000
    dcb8:	e51f30a8 	.word	0xe51f30a8
    dcbc:	e5933000 	.word	0xe5933000
    dcc0:	e1a00002 	.word	0xe1a00002
    dcc4:	e1a01003 	.word	0xe1a01003
    dcc8:	eb0011ca 	.word	0xeb0011ca
    dccc:	e1a03000 	.word	0xe1a03000
    dcd0:	e1a00004 	.word	0xe1a00004
    dcd4:	e1a01003 	.word	0xe1a01003
    dcd8:	eb00111d 	.word	0xeb00111d
    dcdc:	e1a03000 	.word	0xe1a03000
    dce0:	e1a00003 	.word	0xe1a00003
    dce4:	ebfffb0d 	.word	0xebfffb0d
    dce8:	e1a03000 	.word	0xe1a03000
    dcec:	e1a04001 	.word	0xe1a04001
    dcf0:	e1a00003 	.word	0xe1a00003
    dcf4:	e1a01004 	.word	0xe1a01004
    dcf8:	eb0012e9 	.word	0xeb0012e9
    dcfc:	e1a03000 	.word	0xe1a03000
    dd00:	e1a04001 	.word	0xe1a04001
    dd04:	e1a00003 	.word	0xe1a00003
    dd08:	e1a01004 	.word	0xe1a01004
    dd0c:	eb0010e6 	.word	0xeb0010e6
    dd10:	e1a02000 	.word	0xe1a02000
    dd14:	e51f3118 	.word	0xe51f3118
    dd18:	e5832000 	.word	0xe5832000
    dd1c:	e51f3120 	.word	0xe51f3120
    dd20:	e5933000 	.word	0xe5933000
    dd24:	e1a00003 	.word	0xe1a00003
    dd28:	e51b1028 	.word	0xe51b1028
    dd2c:	eb0011b1 	.word	0xeb0011b1
    dd30:	e1a03000 	.word	0xe1a03000
    dd34:	e1a02003 	.word	0xe1a02003
    dd38:	e51f3148 	.word	0xe51f3148
    dd3c:	e5832000 	.word	0xe5832000
    dd40:	e51f3150 	.word	0xe51f3150
    dd44:	e5932000 	.word	0xe5932000
    dd48:	e51f3144 	.word	0xe51f3144
    dd4c:	e5933000 	.word	0xe5933000
    dd50:	e1a00002 	.word	0xe1a00002
    dd54:	e1a01003 	.word	0xe1a01003
    dd58:	eb0010fe 	.word	0xeb0010fe
    dd5c:	e1a03000 	.word	0xe1a03000
    dd60:	e1a04003 	.word	0xe1a04003
    dd64:	e51f3174 	.word	0xe51f3174
    dd68:	e5932000 	.word	0xe5932000
    dd6c:	e51f3160 	.word	0xe51f3160
    dd70:	e5933000 	.word	0xe5933000
    dd74:	e1a00002 	.word	0xe1a00002
    dd78:	e1a01003 	.word	0xe1a01003
    dd7c:	eb0010f5 	.word	0xeb0010f5
    dd80:	e1a03000 	.word	0xe1a03000
    dd84:	e1a00004 	.word	0xe1a00004
    dd88:	e1a01003 	.word	0xe1a01003
    dd8c:	eb0011ff 	.word	0xeb0011ff
    dd90:	e1a03000 	.word	0xe1a03000
    dd94:	e1a05003 	.word	0xe1a05003
    dd98:	e51f31a8 	.word	0xe51f31a8
    dd9c:	e5932000 	.word	0xe5932000
    dda0:	e51f319c 	.word	0xe51f319c
    dda4:	e5933000 	.word	0xe5933000
    dda8:	e1a00002 	.word	0xe1a00002
    ddac:	e1a01003 	.word	0xe1a01003
    ddb0:	eb0010e8 	.word	0xeb0010e8
    ddb4:	e1a03000 	.word	0xe1a03000
    ddb8:	e1a04003 	.word	0xe1a04003
    ddbc:	e51f31cc 	.word	0xe51f31cc
    ddc0:	e5932000 	.word	0xe5932000
    ddc4:	e51f31b8 	.word	0xe51f31b8
    ddc8:	e5933000 	.word	0xe5933000
    ddcc:	e1a00002 	.word	0xe1a00002
    ddd0:	e1a01003 	.word	0xe1a01003
    ddd4:	eb0010df 	.word	0xeb0010df
    ddd8:	e1a03000 	.word	0xe1a03000
    dddc:	e1a00004 	.word	0xe1a00004
    dde0:	e1a01003 	.word	0xe1a01003
    dde4:	eb0011e9 	.word	0xeb0011e9
    dde8:	e1a03000 	.word	0xe1a03000
    ddec:	e1a00005 	.word	0xe1a00005
    ddf0:	e1a01003 	.word	0xe1a01003
    ddf4:	eb00117f 	.word	0xeb00117f
    ddf8:	e1a03000 	.word	0xe1a03000
    ddfc:	e1a02003 	.word	0xe1a02003
    de00:	e51f3214 	.word	0xe51f3214
    de04:	e5832000 	.word	0xe5832000
    de08:	e51f31e8 	.word	0xe51f31e8
    de0c:	e5933000 	.word	0xe5933000
    de10:	e1a00003 	.word	0xe1a00003
    de14:	ebfffac1 	.word	0xebfffac1
    de18:	e1a05000 	.word	0xe1a05000
    de1c:	e1a06001 	.word	0xe1a06001
    de20:	e51f3234 	.word	0xe51f3234
    de24:	e5932000 	.word	0xe5932000
    de28:	e51f3220 	.word	0xe51f3220
    de2c:	e5933000 	.word	0xe5933000
    de30:	e1a00002 	.word	0xe1a00002
    de34:	e1a01003 	.word	0xe1a01003
    de38:	eb00116e 	.word	0xeb00116e
    de3c:	e1a03000 	.word	0xe1a03000
    de40:	e1a02003 	.word	0xe1a02003
    de44:	e51f3234 	.word	0xe51f3234
    de48:	e5933000 	.word	0xe5933000
    de4c:	e1a00002 	.word	0xe1a00002
    de50:	e1a01003 	.word	0xe1a01003
    de54:	eb0010bf 	.word	0xeb0010bf
    de58:	e1a03000 	.word	0xe1a03000
    de5c:	e1a00003 	.word	0xe1a00003
    de60:	ebfffaae 	.word	0xebfffaae
    de64:	e1a03000 	.word	0xe1a03000
    de68:	e1a04001 	.word	0xe1a04001
    de6c:	e1a00003 	.word	0xe1a00003
    de70:	e1a01004 	.word	0xe1a01004
    de74:	eb00128a 	.word	0xeb00128a
    de78:	e1a03000 	.word	0xe1a03000
    de7c:	e1a04001 	.word	0xe1a04001
    de80:	e1a00005 	.word	0xe1a00005
    de84:	e1a01006 	.word	0xe1a01006
    de88:	e1a02003 	.word	0xe1a02003
    de8c:	e1a03004 	.word	0xe1a03004
    de90:	ebfffb76 	.word	0xebfffb76
    de94:	e1a03000 	.word	0xe1a03000
    de98:	e1a04001 	.word	0xe1a04001
    de9c:	e1a00003 	.word	0xe1a00003
    dea0:	e1a01004 	.word	0xe1a01004
    dea4:	eb001080 	.word	0xeb001080
    dea8:	e1a02000 	.word	0xe1a02000
    deac:	e51f323c 	.word	0xe51f323c
    deb0:	e5832000 	.word	0xe5832000
    deb4:	e51f3244 	.word	0xe51f3244
    deb8:	e5932000 	.word	0xe5932000
    debc:	e51f324c 	.word	0xe51f324c
    dec0:	e5933000 	.word	0xe5933000
    dec4:	e1a00002 	.word	0xe1a00002
    dec8:	e1a01003 	.word	0xe1a01003
    decc:	eb001149 	.word	0xeb001149
    ded0:	e1a03000 	.word	0xe1a03000
    ded4:	e1a00003 	.word	0xe1a00003
    ded8:	ebfffa90 	.word	0xebfffa90
    dedc:	e1a03000 	.word	0xe1a03000
    dee0:	e1a04001 	.word	0xe1a04001
    dee4:	e3a005ff 	.word	0xe3a005ff
    dee8:	e2800603 	.word	0xe2800603
    deec:	e3a01000 	.word	0xe3a01000
    def0:	e1a02003 	.word	0xe1a02003
    def4:	e1a03004 	.word	0xe1a03004
    def8:	ebfff9ae 	.word	0xebfff9ae
    defc:	e1a03000 	.word	0xe1a03000
    df00:	e1a04001 	.word	0xe1a04001
    df04:	e1a00003 	.word	0xe1a00003
    df08:	e1a01004 	.word	0xe1a01004
    df0c:	eb001264 	.word	0xeb001264
    df10:	e1a03000 	.word	0xe1a03000
    df14:	e1a04001 	.word	0xe1a04001
    df18:	e1a00003 	.word	0xe1a00003
    df1c:	e1a01004 	.word	0xe1a01004
    df20:	eb001061 	.word	0xeb001061
    df24:	e1a02000 	.word	0xe1a02000
    df28:	e51f32b0 	.word	0xe51f32b0
    df2c:	e5832000 	.word	0xe5832000
    df30:	e51b0028 	.word	0xe51b0028
    df34:	e51b1028 	.word	0xe51b1028
    df38:	eb00112e 	.word	0xeb00112e
    df3c:	e1a03000 	.word	0xe1a03000
    df40:	e1a00003 	.word	0xe1a00003
    df44:	ebfffa75 	.word	0xebfffa75
    df48:	e1a05000 	.word	0xe1a05000
    df4c:	e1a06001 	.word	0xe1a06001
    df50:	e51f3360 	.word	0xe51f3360
    df54:	e5933000 	.word	0xe5933000
    df58:	e1a00003 	.word	0xe1a00003
    df5c:	ebfffa6f 	.word	0xebfffa6f
    df60:	e1a03000 	.word	0xe1a03000
    df64:	e1a04001 	.word	0xe1a04001
    df68:	e1a00003 	.word	0xe1a00003
    df6c:	e1a01004 	.word	0xe1a01004
    df70:	e1a02003 	.word	0xe1a02003
    df74:	e1a03004 	.word	0xe1a03004
    df78:	ebfff98f 	.word	0xebfff98f
    df7c:	e1a03000 	.word	0xe1a03000
    df80:	e1a04001 	.word	0xe1a04001
    df84:	e1a00005 	.word	0xe1a00005
    df88:	e1a01006 	.word	0xe1a01006
    df8c:	e1a02003 	.word	0xe1a02003
    df90:	e1a03004 	.word	0xe1a03004
    df94:	ebfff988 	.word	0xebfff988
    df98:	e1a03000 	.word	0xe1a03000
    df9c:	e1a04001 	.word	0xe1a04001
    dfa0:	e1a05003 	.word	0xe1a05003
    dfa4:	e1a06004 	.word	0xe1a06004
    dfa8:	e51f33b4 	.word	0xe51f33b4
    dfac:	e5934000 	.word	0xe5934000
    dfb0:	e51f33b8 	.word	0xe51f33b8
    dfb4:	e5932000 	.word	0xe5932000
    dfb8:	e51f33a8 	.word	0xe51f33a8
    dfbc:	e5933000 	.word	0xe5933000
    dfc0:	e1a00002 	.word	0xe1a00002
    dfc4:	e1a01003 	.word	0xe1a01003
    dfc8:	eb00110a 	.word	0xeb00110a
    dfcc:	e1a03000 	.word	0xe1a03000
    dfd0:	e1a00004 	.word	0xe1a00004
    dfd4:	e1a01003 	.word	0xe1a01003
    dfd8:	eb00105d 	.word	0xeb00105d
    dfdc:	e1a03000 	.word	0xe1a03000
    dfe0:	e1a04003 	.word	0xe1a04003
    dfe4:	e51f33e8 	.word	0xe51f33e8
    dfe8:	e5932000 	.word	0xe5932000
    dfec:	e51f33f0 	.word	0xe51f33f0
    dff0:	e5933000 	.word	0xe5933000
    dff4:	e1a00002 	.word	0xe1a00002
    dff8:	e1a01003 	.word	0xe1a01003
    dffc:	eb0010fd 	.word	0xeb0010fd
    e000:	e1a03000 	.word	0xe1a03000
    e004:	e1a00004 	.word	0xe1a00004
    e008:	e1a01003 	.word	0xe1a01003
    e00c:	eb00115f 	.word	0xeb00115f
    e010:	e1a03000 	.word	0xe1a03000
    e014:	e1a00003 	.word	0xe1a00003
    e018:	ebfffa40 	.word	0xebfffa40
    e01c:	e1a03000 	.word	0xe1a03000
    e020:	e1a04001 	.word	0xe1a04001
    e024:	e1a00005 	.word	0xe1a00005
    e028:	e1a01006 	.word	0xe1a01006
    e02c:	e1a02003 	.word	0xe1a02003
    e030:	e1a03004 	.word	0xe1a03004
    e034:	ebfff960 	.word	0xebfff960
    e038:	e1a03000 	.word	0xe1a03000
    e03c:	e1a04001 	.word	0xe1a04001
    e040:	e1a00003 	.word	0xe1a00003
    e044:	e1a01004 	.word	0xe1a01004
    e048:	eb001017 	.word	0xeb001017
    e04c:	e1a02000 	.word	0xe1a02000
    e050:	e51f3450 	.word	0xe51f3450
    e054:	e5832000 	.word	0xe5832000
    e058:	e51f3458 	.word	0xe51f3458
    e05c:	e5933000 	.word	0xe5933000
    e060:	e1a00003 	.word	0xe1a00003
    e064:	ebfffa2d 	.word	0xebfffa2d
    e068:	e1a03000 	.word	0xe1a03000
    e06c:	e1a04001 	.word	0xe1a04001
    e070:	e1a00003 	.word	0xe1a00003
    e074:	e1a01004 	.word	0xe1a01004
    e078:	eb001209 	.word	0xeb001209
    e07c:	e1a03000 	.word	0xe1a03000
    e080:	e1a04001 	.word	0xe1a04001
    e084:	e1a00003 	.word	0xe1a00003
    e088:	e1a01004 	.word	0xe1a01004
    e08c:	eb001006 	.word	0xeb001006
    e090:	e1a02000 	.word	0xe1a02000
    e094:	e51f3454 	.word	0xe51f3454
    e098:	e5832000 	.word	0xe5832000
    e09c:	e51f3498 	.word	0xe51f3498
    e0a0:	e5932000 	.word	0xe5932000
    e0a4:	e51f349c 	.word	0xe51f349c
    e0a8:	e5933000 	.word	0xe5933000
    e0ac:	e1a00002 	.word	0xe1a00002
    e0b0:	e1a01003 	.word	0xe1a01003
    e0b4:	eb0010cf 	.word	0xeb0010cf
    e0b8:	e1a03000 	.word	0xe1a03000
    e0bc:	e1a04003 	.word	0xe1a04003
    e0c0:	e51f34b4 	.word	0xe51f34b4
    e0c4:	e5932000 	.word	0xe5932000
    e0c8:	e51f34b8 	.word	0xe51f34b8
    e0cc:	e5933000 	.word	0xe5933000
    e0d0:	e1a00002 	.word	0xe1a00002
    e0d4:	e1a01003 	.word	0xe1a01003
    e0d8:	eb0010c6 	.word	0xeb0010c6
    e0dc:	e1a03000 	.word	0xe1a03000
    e0e0:	e1a00004 	.word	0xe1a00004
    e0e4:	e1a01003 	.word	0xe1a01003
    e0e8:	eb00101a 	.word	0xeb00101a
    e0ec:	e1a03000 	.word	0xe1a03000
    e0f0:	e1a00003 	.word	0xe1a00003
    e0f4:	ebfffa09 	.word	0xebfffa09
    e0f8:	e1a03000 	.word	0xe1a03000
    e0fc:	e1a04001 	.word	0xe1a04001
    e100:	e1a00003 	.word	0xe1a00003
    e104:	e1a01004 	.word	0xe1a01004
    e108:	eb0011e5 	.word	0xeb0011e5
    e10c:	e1a03000 	.word	0xe1a03000
    e110:	e1a04001 	.word	0xe1a04001
    e114:	e1a00003 	.word	0xe1a00003
    e118:	e1a01004 	.word	0xe1a01004
    e11c:	eb000fe2 	.word	0xeb000fe2
    e120:	e1a02000 	.word	0xe1a02000
    e124:	e51f3500 	.word	0xe51f3500
    e128:	e5832000 	.word	0xe5832000
    e12c:	e51f3508 	.word	0xe51f3508
    e130:	e5933000 	.word	0xe5933000
    e134:	e1a00003 	.word	0xe1a00003
    e138:	e51b1028 	.word	0xe51b1028
    e13c:	eb001005 	.word	0xeb001005
    e140:	e1a03000 	.word	0xe1a03000
    e144:	e1a02003 	.word	0xe1a02003
    e148:	e51f3508 	.word	0xe51f3508
    e14c:	e5933000 	.word	0xe5933000
    e150:	e1a00002 	.word	0xe1a00002
    e154:	e1a01003 	.word	0xe1a01003
    e158:	eb00110c 	.word	0xeb00110c
    e15c:	e1a03000 	.word	0xe1a03000
    e160:	e1a02003 	.word	0xe1a02003
    e164:	e51f3550 	.word	0xe51f3550
    e168:	e5832000 	.word	0xe5832000
    e16c:	e51f3554 	.word	0xe51f3554
    e170:	e5932000 	.word	0xe5932000
    e174:	e51f3558 	.word	0xe51f3558
    e178:	e5933000 	.word	0xe5933000
    e17c:	e1a00002 	.word	0xe1a00002
    e180:	e1a01003 	.word	0xe1a01003
    e184:	eb00109b 	.word	0xeb00109b
    e188:	e1a03000 	.word	0xe1a03000
    e18c:	e1a02003 	.word	0xe1a02003
    e190:	e51f3570 	.word	0xe51f3570
    e194:	e5933000 	.word	0xe5933000
    e198:	e1a00002 	.word	0xe1a00002
    e19c:	e1a01003 	.word	0xe1a01003
    e1a0:	eb001094 	.word	0xeb001094
    e1a4:	e1a03000 	.word	0xe1a03000
    e1a8:	e1a04003 	.word	0xe1a04003
    e1ac:	e51f356c 	.word	0xe51f356c
    e1b0:	e5932000 	.word	0xe5932000
    e1b4:	e51f3590 	.word	0xe51f3590
    e1b8:	e5933000 	.word	0xe5933000
    e1bc:	e1a00002 	.word	0xe1a00002
    e1c0:	e1a01003 	.word	0xe1a01003
    e1c4:	eb00108b 	.word	0xeb00108b
    e1c8:	e1a03000 	.word	0xe1a03000
    e1cc:	e1a00004 	.word	0xe1a00004
    e1d0:	e1a01003 	.word	0xe1a01003
    e1d4:	eb0010ed 	.word	0xeb0010ed
    e1d8:	e1a03000 	.word	0xe1a03000
    e1dc:	e1a02003 	.word	0xe1a02003
    e1e0:	e51f35b8 	.word	0xe51f35b8
    e1e4:	e5832000 	.word	0xe5832000
    e1e8:	e51f35bc 	.word	0xe51f35bc
    e1ec:	e5933000 	.word	0xe5933000
    e1f0:	e59b0004 	.word	0xe59b0004
    e1f4:	e1a01003 	.word	0xe1a01003
    e1f8:	eb001140 	.word	0xeb001140
    e1fc:	e1a03000 	.word	0xe1a03000
    e200:	e3530000 	.word	0xe3530000
    e204:	1a000000 	.word	0x1a000000
    e208:	ea00004e 	.word	0xea00004e
    e20c:	e51f2570 	.word	0xe51f2570
    e210:	e3a03002 	.word	0xe3a03002
    e214:	e5823000 	.word	0xe5823000
    e218:	ea000044 	.word	0xea000044
    e21c:	e51f3580 	.word	0xe51f3580
    e220:	e5934000 	.word	0xe5934000
    e224:	e51f35f4 	.word	0xe51f35f4
    e228:	e5931004 	.word	0xe5931004
    e22c:	e51f3590 	.word	0xe51f3590
    e230:	e5933000 	.word	0xe5933000
    e234:	e2432001 	.word	0xe2432001
    e238:	e51f3604 	.word	0xe51f3604
    e23c:	e7933102 	.word	0xe7933102
    e240:	e1a00001 	.word	0xe1a00001
    e244:	e1a01003 	.word	0xe1a01003
    e248:	eb00106a 	.word	0xeb00106a
    e24c:	e1a03000 	.word	0xe1a03000
    e250:	e1a05003 	.word	0xe1a05003
    e254:	e51f3620 	.word	0xe51f3620
    e258:	e5931004 	.word	0xe5931004
    e25c:	e51f35c0 	.word	0xe51f35c0
    e260:	e5933000 	.word	0xe5933000
    e264:	e2432001 	.word	0xe2432001
    e268:	e51f3638 	.word	0xe51f3638
    e26c:	e7933102 	.word	0xe7933102
    e270:	e1a00001 	.word	0xe1a00001
    e274:	e1a01003 	.word	0xe1a01003
    e278:	eb00105e 	.word	0xeb00105e
    e27c:	e1a03000 	.word	0xe1a03000
    e280:	e1a00005 	.word	0xe1a00005
    e284:	e1a01003 	.word	0xe1a01003
    e288:	eb000fb2 	.word	0xeb000fb2
    e28c:	e1a03000 	.word	0xe1a03000
    e290:	e1a02003 	.word	0xe1a02003
    e294:	e51f3664 	.word	0xe51f3664
    e298:	e7832104 	.word	0xe7832104
    e29c:	e51f3600 	.word	0xe51f3600
    e2a0:	e5934000 	.word	0xe5934000
    e2a4:	e51f3670 	.word	0xe51f3670
    e2a8:	e5931004 	.word	0xe5931004
    e2ac:	e51f3610 	.word	0xe51f3610
    e2b0:	e5933000 	.word	0xe5933000
    e2b4:	e2432001 	.word	0xe2432001
    e2b8:	e51f3684 	.word	0xe51f3684
    e2bc:	e7933102 	.word	0xe7933102
    e2c0:	e1a00001 	.word	0xe1a00001
    e2c4:	e1a01003 	.word	0xe1a01003
    e2c8:	eb00104a 	.word	0xeb00104a
    e2cc:	e1a03000 	.word	0xe1a03000
    e2d0:	e1a05003 	.word	0xe1a05003
    e2d4:	e51f36a4 	.word	0xe51f36a4
    e2d8:	e5931004 	.word	0xe5931004
    e2dc:	e51f3640 	.word	0xe51f3640
    e2e0:	e5933000 	.word	0xe5933000
    e2e4:	e2432001 	.word	0xe2432001
    e2e8:	e51f36b8 	.word	0xe51f36b8
    e2ec:	e7933102 	.word	0xe7933102
    e2f0:	e1a00001 	.word	0xe1a00001
    e2f4:	e1a01003 	.word	0xe1a01003
    e2f8:	eb00103e 	.word	0xeb00103e
    e2fc:	e1a03000 	.word	0xe1a03000
    e300:	e1a00005 	.word	0xe1a00005
    e304:	e1a01003 	.word	0xe1a01003
    e308:	eb000f91 	.word	0xeb000f91
    e30c:	e1a03000 	.word	0xe1a03000
    e310:	e1a02003 	.word	0xe1a02003
    e314:	e51f36e0 	.word	0xe51f36e0
    e318:	e7832104 	.word	0xe7832104
    e31c:	e51f3680 	.word	0xe51f3680
    e320:	e5933000 	.word	0xe5933000
    e324:	e2832001 	.word	0xe2832001
    e328:	e51f368c 	.word	0xe51f368c
    e32c:	e5832000 	.word	0xe5832000
    e330:	e51f3694 	.word	0xe51f3694
    e334:	e5932000 	.word	0xe5932000
    e338:	e51f3700 	.word	0xe51f3700
    e33c:	e5933000 	.word	0xe5933000
    e340:	e1520003 	.word	0xe1520003
    e344:	daffffb4 	.word	0xdaffffb4
    e348:	e51f370c 	.word	0xe51f370c
    e34c:	e5932000 	.word	0xe5932000
    e350:	e51f3710 	.word	0xe51f3710
    e354:	e5933000 	.word	0xe5933000
    e358:	e1a00002 	.word	0xe1a00002
    e35c:	e1a01003 	.word	0xe1a01003
    e360:	eb00108a 	.word	0xeb00108a
    e364:	e1a03000 	.word	0xe1a03000
    e368:	e1a02003 	.word	0xe1a02003
    e36c:	e51f3718 	.word	0xe51f3718
    e370:	e5832000 	.word	0xe5832000
    e374:	e51f3720 	.word	0xe51f3720
    e378:	e5932000 	.word	0xe5932000
    e37c:	e51f3728 	.word	0xe51f3728
    e380:	e5933000 	.word	0xe5933000
    e384:	e1a00002 	.word	0xe1a00002
    e388:	e1a01003 	.word	0xe1a01003
    e38c:	eb001019 	.word	0xeb001019
    e390:	e1a03000 	.word	0xe1a03000
    e394:	e1a02003 	.word	0xe1a02003
    e398:	e51f3740 	.word	0xe51f3740
    e39c:	e5832000 	.word	0xe5832000
    e3a0:	e51f275c 	.word	0xe51f275c
    e3a4:	e51f3738 	.word	0xe51f3738
    e3a8:	e5823000 	.word	0xe5823000
    e3ac:	e51f3768 	.word	0xe51f3768
    e3b0:	e5932000 	.word	0xe5932000
    e3b4:	e51f376c 	.word	0xe51f376c
    e3b8:	e5832000 	.word	0xe5832000
    e3bc:	e51f3774 	.word	0xe51f3774
    e3c0:	e5932000 	.word	0xe5932000
    e3c4:	e51f3778 	.word	0xe51f3778
    e3c8:	e5832000 	.word	0xe5832000
    e3cc:	e51f3780 	.word	0xe51f3780
    e3d0:	e5932000 	.word	0xe5932000
    e3d4:	e51f3784 	.word	0xe51f3784
    e3d8:	e5832000 	.word	0xe5832000
    e3dc:	e51f2750 	.word	0xe51f2750
    e3e0:	e3a03001 	.word	0xe3a03001
    e3e4:	e5823000 	.word	0xe5823000
    e3e8:	ea0003e7 	.word	0xea0003e7
    e3ec:	e51f3794 	.word	0xe51f3794
    e3f0:	e5932000 	.word	0xe5932000
    e3f4:	e51f37a0 	.word	0xe51f37a0
    e3f8:	e5933000 	.word	0xe5933000
    e3fc:	e1a00002 	.word	0xe1a00002
    e400:	e1a01003 	.word	0xe1a01003
    e404:	eb000ffb 	.word	0xeb000ffb
    e408:	e1a03000 	.word	0xe1a03000
    e40c:	e1a02003 	.word	0xe1a02003
    e410:	e51f37b8 	.word	0xe51f37b8
    e414:	e5832000 	.word	0xe5832000
    e418:	e51f277c 	.word	0xe51f277c
    e41c:	e3a03000 	.word	0xe3a03000
    e420:	e5823000 	.word	0xe5823000
    e424:	e51f27c8 	.word	0xe51f27c8
    e428:	e3a03001 	.word	0xe3a03001
    e42c:	e5823000 	.word	0xe5823000
    e430:	e51f37a4 	.word	0xe51f37a4
    e434:	e5932000 	.word	0xe5932000
    e438:	e51f379c 	.word	0xe51f379c
    e43c:	e5933000 	.word	0xe5933000
    e440:	e0822003 	.word	0xe0822003
    e444:	e51f37e8 	.word	0xe51f37e8
    e448:	e5933000 	.word	0xe5933000
    e44c:	e0822003 	.word	0xe0822003
    e450:	e51f37f4 	.word	0xe51f37f4
    e454:	e5933000 	.word	0xe5933000
    e458:	e1a00002 	.word	0xe1a00002
    e45c:	e1a01003 	.word	0xe1a01003
    e460:	eb001103 	.word	0xeb001103
    e464:	e1a03000 	.word	0xe1a03000
    e468:	e1a02003 	.word	0xe1a02003
    e46c:	e51f380c 	.word	0xe51f380c
    e470:	e5832000 	.word	0xe5832000
    e474:	ea0003bb 	.word	0xea0003bb
    e478:	e51f3814 	.word	0xe51f3814
    e47c:	e5933000 	.word	0xe5933000
    e480:	e51b0028 	.word	0xe51b0028
    e484:	e1a01003 	.word	0xe1a01003
    e488:	eb00109c 	.word	0xeb00109c
    e48c:	e1a03000 	.word	0xe1a03000
    e490:	e3530000 	.word	0xe3530000
    e494:	1a000008 	.word	0x1a000008
    e498:	e51f3830 	.word	0xe51f3830
    e49c:	e5933000 	.word	0xe5933000
    e4a0:	e51b002c 	.word	0xe51b002c
    e4a4:	e1a01003 	.word	0xe1a01003
    e4a8:	eb001094 	.word	0xeb001094
    e4ac:	e1a03000 	.word	0xe1a03000
    e4b0:	e3530000 	.word	0xe3530000
    e4b4:	1a000000 	.word	0x1a000000
    e4b8:	ea0001be 	.word	0xea0001be
    e4bc:	e51f3830 	.word	0xe51f3830
    e4c0:	e5932000 	.word	0xe5932000
    e4c4:	e51f3828 	.word	0xe51f3828
    e4c8:	e5933000 	.word	0xe5933000
    e4cc:	e1520003 	.word	0xe1520003
    e4d0:	1a000065 	.word	0x1a000065
    e4d4:	e51f3838 	.word	0xe51f3838
    e4d8:	e5932000 	.word	0xe5932000
    e4dc:	e1a03002 	.word	0xe1a03002
    e4e0:	e1a03083 	.word	0xe1a03083
    e4e4:	e0833002 	.word	0xe0833002
    e4e8:	e1a03103 	.word	0xe1a03103
    e4ec:	e0832002 	.word	0xe0832002
    e4f0:	e51f3864 	.word	0xe51f3864
    e4f4:	e5933000 	.word	0xe5933000
    e4f8:	e0823003 	.word	0xe0823003
    e4fc:	e1a02103 	.word	0xe1a02103
    e500:	e51f388c 	.word	0xe51f388c
    e504:	e5933000 	.word	0xe5933000
    e508:	e0824003 	.word	0xe0824003
    e50c:	e51f3880 	.word	0xe51f3880
    e510:	e5933000 	.word	0xe5933000
    e514:	e1a03103 	.word	0xe1a03103
    e518:	e1a02003 	.word	0xe1a02003
    e51c:	e51f38a8 	.word	0xe51f38a8
    e520:	e5933000 	.word	0xe5933000
    e524:	e0821003 	.word	0xe0821003
    e528:	e51f388c 	.word	0xe51f388c
    e52c:	e5932000 	.word	0xe5932000
    e530:	e1a03002 	.word	0xe1a03002
    e534:	e1a03083 	.word	0xe1a03083
    e538:	e0833002 	.word	0xe0833002
    e53c:	e1a03103 	.word	0xe1a03103
    e540:	e0833002 	.word	0xe0833002
    e544:	e1a03103 	.word	0xe1a03103
    e548:	e0813003 	.word	0xe0813003
    e54c:	e2433038 	.word	0xe2433038
    e550:	e5932000 	.word	0xe5932000
    e554:	e51f38dc 	.word	0xe51f38dc
    e558:	e5933000 	.word	0xe5933000
    e55c:	e1a00002 	.word	0xe1a00002
    e560:	e1a01003 	.word	0xe1a01003
    e564:	eb000fa3 	.word	0xeb000fa3
    e568:	e1a03000 	.word	0xe1a03000
    e56c:	e5843000 	.word	0xe5843000
    e570:	e51f38d4 	.word	0xe51f38d4
    e574:	e5934000 	.word	0xe5934000
    e578:	e51f38ec 	.word	0xe51f38ec
    e57c:	e5935000 	.word	0xe5935000
    e580:	e51f38e4 	.word	0xe51f38e4
    e584:	e5933000 	.word	0xe5933000
    e588:	e2432001 	.word	0xe2432001
    e58c:	e51f3900 	.word	0xe51f3900
    e590:	e5933000 	.word	0xe5933000
    e594:	e2431001 	.word	0xe2431001
    e598:	e51f0918 	.word	0xe51f0918
    e59c:	e1a03002 	.word	0xe1a03002
    e5a0:	e1a03083 	.word	0xe1a03083
    e5a4:	e0833002 	.word	0xe0833002
    e5a8:	e1a03103 	.word	0xe1a03103
    e5ac:	e0833002 	.word	0xe0833002
    e5b0:	e0833001 	.word	0xe0833001
    e5b4:	e7902103 	.word	0xe7902103
    e5b8:	e51f3940 	.word	0xe51f3940
    e5bc:	e5933000 	.word	0xe5933000
    e5c0:	e1a00002 	.word	0xe1a00002
    e5c4:	e1a01003 	.word	0xe1a01003
    e5c8:	eb000f8a 	.word	0xeb000f8a
    e5cc:	e1a03000 	.word	0xe1a03000
    e5d0:	e1a06003 	.word	0xe1a06003
    e5d4:	e51f3948 	.word	0xe51f3948
    e5d8:	e5933000 	.word	0xe5933000
    e5dc:	e1a03103 	.word	0xe1a03103
    e5e0:	e1a02003 	.word	0xe1a02003
    e5e4:	e51f3970 	.word	0xe51f3970
    e5e8:	e5933000 	.word	0xe5933000
    e5ec:	e0821003 	.word	0xe0821003
    e5f0:	e51f3954 	.word	0xe51f3954
    e5f4:	e5932000 	.word	0xe5932000
    e5f8:	e1a03002 	.word	0xe1a03002
    e5fc:	e1a03083 	.word	0xe1a03083
    e600:	e0833002 	.word	0xe0833002
    e604:	e1a03103 	.word	0xe1a03103
    e608:	e0833002 	.word	0xe0833002
    e60c:	e1a03103 	.word	0xe1a03103
    e610:	e0813003 	.word	0xe0813003
    e614:	e2433038 	.word	0xe2433038
    e618:	e5932000 	.word	0xe5932000
    e61c:	e51f39ac 	.word	0xe51f39ac
    e620:	e5933000 	.word	0xe5933000
    e624:	e1a00002 	.word	0xe1a00002
    e628:	e1a01003 	.word	0xe1a01003
    e62c:	eb000f71 	.word	0xeb000f71
    e630:	e1a03000 	.word	0xe1a03000
    e634:	e1a00006 	.word	0xe1a00006
    e638:	e1a01003 	.word	0xe1a01003
    e63c:	eb000ec5 	.word	0xeb000ec5
    e640:	e1a03000 	.word	0xe1a03000
    e644:	e1a02003 	.word	0xe1a02003
    e648:	e51f19c8 	.word	0xe51f19c8
    e64c:	e1a03004 	.word	0xe1a03004
    e650:	e1a03083 	.word	0xe1a03083
    e654:	e0833004 	.word	0xe0833004
    e658:	e1a03103 	.word	0xe1a03103
    e65c:	e0833004 	.word	0xe0833004
    e660:	e0833005 	.word	0xe0833005
    e664:	e7812103 	.word	0xe7812103
    e668:	ea000152 	.word	0xea000152
    e66c:	e51f39e0 	.word	0xe51f39e0
    e670:	e5933000 	.word	0xe5933000
    e674:	e3530001 	.word	0xe3530001
    e678:	1a000068 	.word	0x1a000068
    e67c:	e51f39e0 	.word	0xe51f39e0
    e680:	e5933000 	.word	0xe5933000
    e684:	e3530000 	.word	0xe3530000
    e688:	1a000064 	.word	0x1a000064
    e68c:	e51f39f0 	.word	0xe51f39f0
    e690:	e5932000 	.word	0xe5932000
    e694:	e1a03002 	.word	0xe1a03002
    e698:	e1a03083 	.word	0xe1a03083
    e69c:	e0833002 	.word	0xe0833002
    e6a0:	e1a03103 	.word	0xe1a03103
    e6a4:	e0832002 	.word	0xe0832002
    e6a8:	e51f3a1c 	.word	0xe51f3a1c
    e6ac:	e5933000 	.word	0xe5933000
    e6b0:	e0823003 	.word	0xe0823003
    e6b4:	e1a02103 	.word	0xe1a02103
    e6b8:	e51f3a44 	.word	0xe51f3a44
    e6bc:	e5933000 	.word	0xe5933000
    e6c0:	e0824003 	.word	0xe0824003
    e6c4:	e51f3a38 	.word	0xe51f3a38
    e6c8:	e5933000 	.word	0xe5933000
    e6cc:	e1a03103 	.word	0xe1a03103
    e6d0:	e1a02003 	.word	0xe1a02003
    e6d4:	e51f3a60 	.word	0xe51f3a60
    e6d8:	e5933000 	.word	0xe5933000
    e6dc:	e0821003 	.word	0xe0821003
    e6e0:	e51f3a44 	.word	0xe51f3a44
    e6e4:	e5932000 	.word	0xe5932000
    e6e8:	e1a03002 	.word	0xe1a03002
    e6ec:	e1a03083 	.word	0xe1a03083
    e6f0:	e0833002 	.word	0xe0833002
    e6f4:	e1a03103 	.word	0xe1a03103
    e6f8:	e0833002 	.word	0xe0833002
    e6fc:	e1a03103 	.word	0xe1a03103
    e700:	e0813003 	.word	0xe0813003
    e704:	e2433004 	.word	0xe2433004
    e708:	e5932000 	.word	0xe5932000
    e70c:	e51f3a9c 	.word	0xe51f3a9c
    e710:	e5933000 	.word	0xe5933000
    e714:	e1a00002 	.word	0xe1a00002
    e718:	e1a01003 	.word	0xe1a01003
    e71c:	eb000f35 	.word	0xeb000f35
    e720:	e1a03000 	.word	0xe1a03000
    e724:	e5843000 	.word	0xe5843000
    e728:	e51f3a8c 	.word	0xe51f3a8c
    e72c:	e5934000 	.word	0xe5934000
    e730:	e51f3aa4 	.word	0xe51f3aa4
    e734:	e5935000 	.word	0xe5935000
    e738:	e51f3a9c 	.word	0xe51f3a9c
    e73c:	e5932000 	.word	0xe5932000
    e740:	e51f3ab4 	.word	0xe51f3ab4
    e744:	e5933000 	.word	0xe5933000
    e748:	e2431001 	.word	0xe2431001
    e74c:	e51f0acc 	.word	0xe51f0acc
    e750:	e1a03002 	.word	0xe1a03002
    e754:	e1a03083 	.word	0xe1a03083
    e758:	e0833002 	.word	0xe0833002
    e75c:	e1a03103 	.word	0xe1a03103
    e760:	e0833002 	.word	0xe0833002
    e764:	e0833001 	.word	0xe0833001
    e768:	e7902103 	.word	0xe7902103
    e76c:	e51f3afc 	.word	0xe51f3afc
    e770:	e5933000 	.word	0xe5933000
    e774:	e1a00002 	.word	0xe1a00002
    e778:	e1a01003 	.word	0xe1a01003
    e77c:	eb000f1d 	.word	0xeb000f1d
    e780:	e1a03000 	.word	0xe1a03000
    e784:	e1a06003 	.word	0xe1a06003
    e788:	e51f3afc 	.word	0xe51f3afc
    e78c:	e5933000 	.word	0xe5933000
    e790:	e1a03103 	.word	0xe1a03103
    e794:	e1a02003 	.word	0xe1a02003
    e798:	e51f3b24 	.word	0xe51f3b24
    e79c:	e5933000 	.word	0xe5933000
    e7a0:	e0821003 	.word	0xe0821003
    e7a4:	e51f3b08 	.word	0xe51f3b08
    e7a8:	e5932000 	.word	0xe5932000
    e7ac:	e1a03002 	.word	0xe1a03002
    e7b0:	e1a03083 	.word	0xe1a03083
    e7b4:	e0833002 	.word	0xe0833002
    e7b8:	e1a03103 	.word	0xe1a03103
    e7bc:	e0833002 	.word	0xe0833002
    e7c0:	e1a03103 	.word	0xe1a03103
    e7c4:	e0813003 	.word	0xe0813003
    e7c8:	e2433004 	.word	0xe2433004
    e7cc:	e5932000 	.word	0xe5932000
    e7d0:	e51f3b58 	.word	0xe51f3b58
    e7d4:	e5933000 	.word	0xe5933000
    e7d8:	e1a00002 	.word	0xe1a00002
    e7dc:	e1a01003 	.word	0xe1a01003
    e7e0:	eb000f04 	.word	0xeb000f04
    e7e4:	e1a03000 	.word	0xe1a03000
    e7e8:	e1a00006 	.word	0xe1a00006
    e7ec:	e1a01003 	.word	0xe1a01003
    e7f0:	eb000e57 	.word	0xeb000e57
    e7f4:	e1a03000 	.word	0xe1a03000
    e7f8:	e1a02003 	.word	0xe1a02003
    e7fc:	e51f1b7c 	.word	0xe51f1b7c
    e800:	e1a03004 	.word	0xe1a03004
    e804:	e1a03083 	.word	0xe1a03083
    e808:	e0833004 	.word	0xe0833004
    e80c:	e1a03103 	.word	0xe1a03103
    e810:	e0833004 	.word	0xe0833004
    e814:	e0833005 	.word	0xe0833005
    e818:	e7812103 	.word	0xe7812103
    e81c:	ea0000e5 	.word	0xea0000e5
    e820:	e51f3b94 	.word	0xe51f3b94
    e824:	e5933000 	.word	0xe5933000
    e828:	e3530001 	.word	0xe3530001
    e82c:	da0000e1 	.word	0xda0000e1
    e830:	e51f3ba4 	.word	0xe51f3ba4
    e834:	e5932000 	.word	0xe5932000
    e838:	e51f3b9c 	.word	0xe51f3b9c
    e83c:	e5933000 	.word	0xe5933000
    e840:	e1520003 	.word	0xe1520003
    e844:	0a0000db 	.word	0x0a0000db
    e848:	e51f3bbc 	.word	0xe51f3bbc
    e84c:	e5933000 	.word	0xe5933000
    e850:	e2432002 	.word	0xe2432002
    e854:	e51f3bb8 	.word	0xe51f3bb8
    e858:	e5933000 	.word	0xe5933000
    e85c:	e1520003 	.word	0xe1520003
    e860:	aa000012 	.word	0xaa000012
    e864:	e51f3bd8 	.word	0xe51f3bd8
    e868:	e5933000 	.word	0xe5933000
    e86c:	e1a03103 	.word	0xe1a03103
    e870:	e1a02003 	.word	0xe1a02003
    e874:	e51f3c00 	.word	0xe51f3c00
    e878:	e5933000 	.word	0xe5933000
    e87c:	e0821003 	.word	0xe0821003
    e880:	e51f3be4 	.word	0xe51f3be4
    e884:	e5932000 	.word	0xe5932000
    e888:	e1a03002 	.word	0xe1a03002
    e88c:	e1a03083 	.word	0xe1a03083
    e890:	e0833002 	.word	0xe0833002
    e894:	e1a03103 	.word	0xe1a03103
    e898:	e0833002 	.word	0xe0833002
    e89c:	e1a03103 	.word	0xe1a03103
    e8a0:	e0813003 	.word	0xe0813003
    e8a4:	e2432008 	.word	0xe2432008
    e8a8:	e51f3c3c 	.word	0xe51f3c3c
    e8ac:	e5823000 	.word	0xe5823000
    e8b0:	e51f3c24 	.word	0xe51f3c24
    e8b4:	e5933000 	.word	0xe5933000
    e8b8:	e2432002 	.word	0xe2432002
    e8bc:	e51f3c20 	.word	0xe51f3c20
    e8c0:	e5933000 	.word	0xe5933000
    e8c4:	e1520003 	.word	0xe1520003
    e8c8:	aa00000d 	.word	0xaa00000d
    e8cc:	e51f3c30 	.word	0xe51f3c30
    e8d0:	e5932000 	.word	0xe5932000
    e8d4:	e51f3c48 	.word	0xe51f3c48
    e8d8:	e5933000 	.word	0xe5933000
    e8dc:	e2431002 	.word	0xe2431002
    e8e0:	e51f0c60 	.word	0xe51f0c60
    e8e4:	e1a03002 	.word	0xe1a03002
    e8e8:	e1a03083 	.word	0xe1a03083
    e8ec:	e0833002 	.word	0xe0833002
    e8f0:	e1a03103 	.word	0xe1a03103
    e8f4:	e0833002 	.word	0xe0833002
    e8f8:	e0832001 	.word	0xe0832001
    e8fc:	e51f3c90 	.word	0xe51f3c90
    e900:	e7803102 	.word	0xe7803102
    e904:	e51f3c68 	.word	0xe51f3c68
    e908:	e5932000 	.word	0xe5932000
    e90c:	e1a03002 	.word	0xe1a03002
    e910:	e1a03083 	.word	0xe1a03083
    e914:	e0833002 	.word	0xe0833002
    e918:	e1a03103 	.word	0xe1a03103
    e91c:	e0832002 	.word	0xe0832002
    e920:	e51f3c94 	.word	0xe51f3c94
    e924:	e5933000 	.word	0xe5933000
    e928:	e0823003 	.word	0xe0823003
    e92c:	e1a02103 	.word	0xe1a02103
    e930:	e51f3cbc 	.word	0xe51f3cbc
    e934:	e5933000 	.word	0xe5933000
    e938:	e0824003 	.word	0xe0824003
    e93c:	e51f3cb0 	.word	0xe51f3cb0
    e940:	e5933000 	.word	0xe5933000
    e944:	e1a03103 	.word	0xe1a03103
    e948:	e1a02003 	.word	0xe1a02003
    e94c:	e51f3cd8 	.word	0xe51f3cd8
    e950:	e5933000 	.word	0xe5933000
    e954:	e0821003 	.word	0xe0821003
    e958:	e51f3cbc 	.word	0xe51f3cbc
    e95c:	e5932000 	.word	0xe5932000
    e960:	e1a03002 	.word	0xe1a03002
    e964:	e1a03083 	.word	0xe1a03083
    e968:	e0833002 	.word	0xe0833002
    e96c:	e1a03103 	.word	0xe1a03103
    e970:	e0833002 	.word	0xe0833002
    e974:	e1a03103 	.word	0xe1a03103
    e978:	e0813003 	.word	0xe0813003
    e97c:	e2433004 	.word	0xe2433004
    e980:	e5932000 	.word	0xe5932000
    e984:	e51f3d14 	.word	0xe51f3d14
    e988:	e5933000 	.word	0xe5933000
    e98c:	e1a00002 	.word	0xe1a00002
    e990:	e1a01003 	.word	0xe1a01003
    e994:	eb000e97 	.word	0xeb000e97
    e998:	e1a03000 	.word	0xe1a03000
    e99c:	e1a05003 	.word	0xe1a05003
    e9a0:	e51f3d04 	.word	0xe51f3d04
    e9a4:	e5932000 	.word	0xe5932000
    e9a8:	e51f3d1c 	.word	0xe51f3d1c
    e9ac:	e5931000 	.word	0xe5931000
    e9b0:	e51f0d34 	.word	0xe51f0d34
    e9b4:	e1a03002 	.word	0xe1a03002
    e9b8:	e1a03083 	.word	0xe1a03083
    e9bc:	e0833002 	.word	0xe0833002
    e9c0:	e1a03103 	.word	0xe1a03103
    e9c4:	e0833002 	.word	0xe0833002
    e9c8:	e0833001 	.word	0xe0833001
    e9cc:	e7901103 	.word	0xe7901103
    e9d0:	e51f3d44 	.word	0xe51f3d44
    e9d4:	e5933000 	.word	0xe5933000
    e9d8:	e1a03103 	.word	0xe1a03103
    e9dc:	e1a02003 	.word	0xe1a02003
    e9e0:	e51f3d6c 	.word	0xe51f3d6c
    e9e4:	e5933000 	.word	0xe5933000
    e9e8:	e0820003 	.word	0xe0820003
    e9ec:	e51f3d50 	.word	0xe51f3d50
    e9f0:	e5932000 	.word	0xe5932000
    e9f4:	e1a03002 	.word	0xe1a03002
    e9f8:	e1a03083 	.word	0xe1a03083
    e9fc:	e0833002 	.word	0xe0833002
    ea00:	e1a03103 	.word	0xe1a03103
    ea04:	e0833002 	.word	0xe0833002
    ea08:	e1a03103 	.word	0xe1a03103
    ea0c:	e0803003 	.word	0xe0803003
    ea10:	e2433008 	.word	0xe2433008
    ea14:	e5933000 	.word	0xe5933000
    ea18:	e1a00001 	.word	0xe1a00001
    ea1c:	e1a01003 	.word	0xe1a01003
    ea20:	eb000e74 	.word	0xeb000e74
    ea24:	e1a03000 	.word	0xe1a03000
    ea28:	e1a00005 	.word	0xe1a00005
    ea2c:	e1a01003 	.word	0xe1a01003
    ea30:	eb000dc7 	.word	0xeb000dc7
    ea34:	e1a03000 	.word	0xe1a03000
    ea38:	e5843000 	.word	0xe5843000
    ea3c:	e51f3da0 	.word	0xe51f3da0
    ea40:	e5934000 	.word	0xe5934000
    ea44:	e51f3db8 	.word	0xe51f3db8
    ea48:	e5935000 	.word	0xe5935000
    ea4c:	e51f3db0 	.word	0xe51f3db0
    ea50:	e5932000 	.word	0xe5932000
    ea54:	e51f3dc8 	.word	0xe51f3dc8
    ea58:	e5933000 	.word	0xe5933000
    ea5c:	e2431001 	.word	0xe2431001
    ea60:	e51f0de0 	.word	0xe51f0de0
    ea64:	e1a03002 	.word	0xe1a03002
    ea68:	e1a03083 	.word	0xe1a03083
    ea6c:	e0833002 	.word	0xe0833002
    ea70:	e1a03103 	.word	0xe1a03103
    ea74:	e0833002 	.word	0xe0833002
    ea78:	e0833001 	.word	0xe0833001
    ea7c:	e7902103 	.word	0xe7902103
    ea80:	e51f3e10 	.word	0xe51f3e10
    ea84:	e5933000 	.word	0xe5933000
    ea88:	e1a00002 	.word	0xe1a00002
    ea8c:	e1a01003 	.word	0xe1a01003
    ea90:	eb000e58 	.word	0xeb000e58
    ea94:	e1a03000 	.word	0xe1a03000
    ea98:	e1a06003 	.word	0xe1a06003
    ea9c:	e51f3e10 	.word	0xe51f3e10
    eaa0:	e5933000 	.word	0xe5933000
    eaa4:	e1a03103 	.word	0xe1a03103
    eaa8:	e1a02003 	.word	0xe1a02003
    eaac:	e51f3e38 	.word	0xe51f3e38
    eab0:	e5933000 	.word	0xe5933000
    eab4:	e0821003 	.word	0xe0821003
    eab8:	e51f3e1c 	.word	0xe51f3e1c
    eabc:	e5932000 	.word	0xe5932000
    eac0:	e1a03002 	.word	0xe1a03002
    eac4:	e1a03083 	.word	0xe1a03083
    eac8:	e0833002 	.word	0xe0833002
    eacc:	e1a03103 	.word	0xe1a03103
    ead0:	e0833002 	.word	0xe0833002
    ead4:	e1a03103 	.word	0xe1a03103
    ead8:	e0813003 	.word	0xe0813003
    eadc:	e2433004 	.word	0xe2433004
    eae0:	e5932000 	.word	0xe5932000
    eae4:	e51f3e6c 	.word	0xe51f3e6c
    eae8:	e5933000 	.word	0xe5933000
    eaec:	e1a00002 	.word	0xe1a00002
    eaf0:	e1a01003 	.word	0xe1a01003
    eaf4:	eb000e3f 	.word	0xeb000e3f
    eaf8:	e1a03000 	.word	0xe1a03000
    eafc:	e1a00006 	.word	0xe1a00006
    eb00:	e1a01003 	.word	0xe1a01003
    eb04:	eb000d92 	.word	0xeb000d92
    eb08:	e1a03000 	.word	0xe1a03000
    eb0c:	e1a06003 	.word	0xe1a06003
    eb10:	e51f3e74 	.word	0xe51f3e74
    eb14:	e5932000 	.word	0xe5932000
    eb18:	e51f3e8c 	.word	0xe51f3e8c
    eb1c:	e5931000 	.word	0xe5931000
    eb20:	e51f0ea4 	.word	0xe51f0ea4
    eb24:	e1a03002 	.word	0xe1a03002
    eb28:	e1a03083 	.word	0xe1a03083
    eb2c:	e0833002 	.word	0xe0833002
    eb30:	e1a03103 	.word	0xe1a03103
    eb34:	e0833002 	.word	0xe0833002
    eb38:	e0833001 	.word	0xe0833001
    eb3c:	e790c103 	.word	0xe790c103
    eb40:	e51f3ea4 	.word	0xe51f3ea4
    eb44:	e5932000 	.word	0xe5932000
    eb48:	e51f3ebc 	.word	0xe51f3ebc
    eb4c:	e5933000 	.word	0xe5933000
    eb50:	e2431002 	.word	0xe2431002
    eb54:	e51f0ed4 	.word	0xe51f0ed4
    eb58:	e1a03002 	.word	0xe1a03002
    eb5c:	e1a03083 	.word	0xe1a03083
    eb60:	e0833002 	.word	0xe0833002
    eb64:	e1a03103 	.word	0xe1a03103
    eb68:	e0833002 	.word	0xe0833002
    eb6c:	e0833001 	.word	0xe0833001
    eb70:	e7903103 	.word	0xe7903103
    eb74:	e1a0000c 	.word	0xe1a0000c
    eb78:	e1a01003 	.word	0xe1a01003
    eb7c:	eb000e1d 	.word	0xeb000e1d
    eb80:	e1a03000 	.word	0xe1a03000
    eb84:	e1a00006 	.word	0xe1a00006
    eb88:	e1a01003 	.word	0xe1a01003
    eb8c:	eb000d70 	.word	0xeb000d70
    eb90:	e1a03000 	.word	0xe1a03000
    eb94:	e1a02003 	.word	0xe1a02003
    eb98:	e51f1f18 	.word	0xe51f1f18
    eb9c:	e1a03004 	.word	0xe1a03004
    eba0:	e1a03083 	.word	0xe1a03083
    eba4:	e0833004 	.word	0xe0833004
    eba8:	e1a03103 	.word	0xe1a03103
    ebac:	e0833004 	.word	0xe0833004
    ebb0:	e0833005 	.word	0xe0833005
    ebb4:	e7812103 	.word	0xe7812103
    ebb8:	e51f3f34 	.word	0xe51f3f34
    ebbc:	e5933000 	.word	0xe5933000
    ebc0:	e59b0008 	.word	0xe59b0008
    ebc4:	e1a01003 	.word	0xe1a01003
    ebc8:	eb000ecc 	.word	0xeb000ecc
    ebcc:	e1a03000 	.word	0xe1a03000
    ebd0:	e3530000 	.word	0xe3530000
    ebd4:	1a000000 	.word	0x1a000000
    ebd8:	ea000064 	.word	0xea000064
    ebdc:	e51f3f40 	.word	0xe51f3f40
    ebe0:	e5934000 	.word	0xe5934000
    ebe4:	e51f3f58 	.word	0xe51f3f58
    ebe8:	e5935000 	.word	0xe5935000
    ebec:	e51f3f50 	.word	0xe51f3f50
    ebf0:	e5932000 	.word	0xe5932000
    ebf4:	e1a03002 	.word	0xe1a03002
    ebf8:	e1a03083 	.word	0xe1a03083
    ebfc:	e0833002 	.word	0xe0833002
    ec00:	e1a03103 	.word	0xe1a03103
    ec04:	e0832002 	.word	0xe0832002
    ec08:	e51f3f7c 	.word	0xe51f3f7c
    ec0c:	e5933000 	.word	0xe5933000
    ec10:	e0822003 	.word	0xe0822003
    ec14:	e51f3f8c 	.word	0xe51f3f8c
    ec18:	e7936102 	.word	0xe7936102
    ec1c:	e51f3f80 	.word	0xe51f3f80
    ec20:	e5932000 	.word	0xe5932000
    ec24:	e1a03002 	.word	0xe1a03002
    ec28:	e1a03083 	.word	0xe1a03083
    ec2c:	e0833002 	.word	0xe0833002
    ec30:	e1a03103 	.word	0xe1a03103
    ec34:	e0832002 	.word	0xe0832002
    ec38:	e51f3fac 	.word	0xe51f3fac
    ec3c:	e5933000 	.word	0xe5933000
    ec40:	e0822003 	.word	0xe0822003
    ec44:	e51f3fb4 	.word	0xe51f3fb4
    ec48:	e7932102 	.word	0xe7932102
    ec4c:	e51f3fb8 	.word	0xe51f3fb8
    ec50:	e5933000 	.word	0xe5933000
    ec54:	e1a00002 	.word	0xe1a00002
    ec58:	e1a01003 	.word	0xe1a01003
    ec5c:	eb000de5 	.word	0xeb000de5
    ec60:	e1a03000 	.word	0xe1a03000
    ec64:	e1a00006 	.word	0xe1a00006
    ec68:	e1a01003 	.word	0xe1a01003
    ec6c:	eb000d39 	.word	0xeb000d39
    ec70:	e1a03000 	.word	0xe1a03000
    ec74:	e1a02003 	.word	0xe1a02003
    ec78:	e51f1fe0 	.word	0xe51f1fe0
    ec7c:	e1a03004 	.word	0xe1a03004
    ec80:	e1a03083 	.word	0xe1a03083
    ec84:	e0833004 	.word	0xe0833004
    ec88:	e1a03103 	.word	0xe1a03103
    ec8c:	e0833004 	.word	0xe0833004
    ec90:	e0833005 	.word	0xe0833005
    ec94:	e7812103 	.word	0xe7812103
    ec98:	e51f3ffc 	.word	0xe51f3ffc
    ec9c:	e5933000 	.word	0xe5933000
    eca0:	e3530000 	.word	0xe3530000
    eca4:	0a000031 	.word	0x0a000031
    eca8:	e59f3cf8 	.word	0xe59f3cf8
    ecac:	e5934000 	.word	0xe5934000
    ecb0:	e59f3cf4 	.word	0xe59f3cf4
    ecb4:	e5933000 	.word	0xe5933000
    ecb8:	e2435001 	.word	0xe2435001
    ecbc:	e59f3ce4 	.word	0xe59f3ce4
    ecc0:	e5932000 	.word	0xe5932000
    ecc4:	e1a03002 	.word	0xe1a03002
    ecc8:	e1a03083 	.word	0xe1a03083
    eccc:	e0833002 	.word	0xe0833002
    ecd0:	e1a03103 	.word	0xe1a03103
    ecd4:	e0832002 	.word	0xe0832002
    ecd8:	e59f3ccc 	.word	0xe59f3ccc
    ecdc:	e5933000 	.word	0xe5933000
    ece0:	e0823003 	.word	0xe0823003
    ece4:	e2432001 	.word	0xe2432001
    ece8:	e59f3cc0 	.word	0xe59f3cc0
    ecec:	e7936102 	.word	0xe7936102
    ecf0:	e59f3cb0 	.word	0xe59f3cb0
    ecf4:	e5932000 	.word	0xe5932000
    ecf8:	e1a03002 	.word	0xe1a03002
    ecfc:	e1a03083 	.word	0xe1a03083
    ed00:	e0833002 	.word	0xe0833002
    ed04:	e1a03103 	.word	0xe1a03103
    ed08:	e0832002 	.word	0xe0832002
    ed0c:	e59f3c98 	.word	0xe59f3c98
    ed10:	e5933000 	.word	0xe5933000
    ed14:	e0823003 	.word	0xe0823003
    ed18:	e2432001 	.word	0xe2432001
    ed1c:	e59f3c90 	.word	0xe59f3c90
    ed20:	e7932102 	.word	0xe7932102
    ed24:	e59f3c8c 	.word	0xe59f3c8c
    ed28:	e5933000 	.word	0xe5933000
    ed2c:	e1a00002 	.word	0xe1a00002
    ed30:	e1a01003 	.word	0xe1a01003
    ed34:	eb000daf 	.word	0xeb000daf
    ed38:	e1a03000 	.word	0xe1a03000
    ed3c:	e1a00006 	.word	0xe1a00006
    ed40:	e1a01003 	.word	0xe1a01003
    ed44:	eb000d03 	.word	0xeb000d03
    ed48:	e1a03000 	.word	0xe1a03000
    ed4c:	e1a02003 	.word	0xe1a02003
    ed50:	e59f1c64 	.word	0xe59f1c64
    ed54:	e1a03004 	.word	0xe1a03004
    ed58:	e1a03083 	.word	0xe1a03083
    ed5c:	e0833004 	.word	0xe0833004
    ed60:	e1a03103 	.word	0xe1a03103
    ed64:	e0833004 	.word	0xe0833004
    ed68:	e0833005 	.word	0xe0833005
    ed6c:	e7812103 	.word	0xe7812103
    ed70:	e59f3c34 	.word	0xe59f3c34
    ed74:	e5932000 	.word	0xe5932000
    ed78:	e1a03002 	.word	0xe1a03002
    ed7c:	e1a03083 	.word	0xe1a03083
    ed80:	e0833002 	.word	0xe0833002
    ed84:	e1a03103 	.word	0xe1a03103
    ed88:	e0832002 	.word	0xe0832002
    ed8c:	e59f3c14 	.word	0xe59f3c14
    ed90:	e5933000 	.word	0xe5933000
    ed94:	e0823003 	.word	0xe0823003
    ed98:	e1a02103 	.word	0xe1a02103
    ed9c:	e59f3c1c 	.word	0xe59f3c1c
    eda0:	e5933000 	.word	0xe5933000
    eda4:	e0823003 	.word	0xe0823003
    eda8:	e5932000 	.word	0xe5932000
    edac:	e59f3c10 	.word	0xe59f3c10
    edb0:	e5933000 	.word	0xe5933000
    edb4:	e1a00002 	.word	0xe1a00002
    edb8:	e1a01003 	.word	0xe1a01003
    edbc:	eb000d8d 	.word	0xeb000d8d
    edc0:	e1a03000 	.word	0xe1a03000
    edc4:	e1a02003 	.word	0xe1a02003
    edc8:	e59f3bf8 	.word	0xe59f3bf8
    edcc:	e5832000 	.word	0xe5832000
    edd0:	e59f3bd4 	.word	0xe59f3bd4
    edd4:	e5933000 	.word	0xe5933000
    edd8:	e3530000 	.word	0xe3530000
    eddc:	1a00002e 	.word	0x1a00002e
    ede0:	e59f3bc4 	.word	0xe59f3bc4
    ede4:	e5932000 	.word	0xe5932000
    ede8:	e59f3bb8 	.word	0xe59f3bb8
    edec:	e5931000 	.word	0xe5931000
    edf0:	e59f0bc4 	.word	0xe59f0bc4
    edf4:	e1a03002 	.word	0xe1a03002
    edf8:	e1a03083 	.word	0xe1a03083
    edfc:	e0833002 	.word	0xe0833002
    ee00:	e1a03103 	.word	0xe1a03103
    ee04:	e0833002 	.word	0xe0833002
    ee08:	e0833001 	.word	0xe0833001
    ee0c:	e7901103 	.word	0xe7901103
    ee10:	e59f3b94 	.word	0xe59f3b94
    ee14:	e5932000 	.word	0xe5932000
    ee18:	e59f3bac 	.word	0xe59f3bac
    ee1c:	e7933102 	.word	0xe7933102
    ee20:	e1a00001 	.word	0xe1a00001
    ee24:	e1a01003 	.word	0xe1a01003
    ee28:	eb000d72 	.word	0xeb000d72
    ee2c:	e1a03000 	.word	0xe1a03000
    ee30:	e1a02003 	.word	0xe1a02003
    ee34:	e59f3b94 	.word	0xe59f3b94
    ee38:	e5832000 	.word	0xe5832000
    ee3c:	e59f3b68 	.word	0xe59f3b68
    ee40:	e5932000 	.word	0xe5932000
    ee44:	e59f3b5c 	.word	0xe59f3b5c
    ee48:	e5931000 	.word	0xe5931000
    ee4c:	e59f0b68 	.word	0xe59f0b68
    ee50:	e1a03002 	.word	0xe1a03002
    ee54:	e1a03083 	.word	0xe1a03083
    ee58:	e0833002 	.word	0xe0833002
    ee5c:	e1a03103 	.word	0xe1a03103
    ee60:	e0833002 	.word	0xe0833002
    ee64:	e0833001 	.word	0xe0833001
    ee68:	e7901103 	.word	0xe7901103
    ee6c:	e59f3b38 	.word	0xe59f3b38
    ee70:	e5932000 	.word	0xe5932000
    ee74:	e59f3b58 	.word	0xe59f3b58
    ee78:	e7933102 	.word	0xe7933102
    ee7c:	e1a00001 	.word	0xe1a00001
    ee80:	e1a01003 	.word	0xe1a01003
    ee84:	eb000d5b 	.word	0xeb000d5b
    ee88:	e1a03000 	.word	0xe1a03000
    ee8c:	e1a02003 	.word	0xe1a02003
    ee90:	e59f3b40 	.word	0xe59f3b40
    ee94:	e5832000 	.word	0xe5832000
    ee98:	ea000061 	.word	0xea000061
    ee9c:	e59f3b08 	.word	0xe59f3b08
    eea0:	e5932000 	.word	0xe5932000
    eea4:	e59f3afc 	.word	0xe59f3afc
    eea8:	e5931000 	.word	0xe5931000
    eeac:	e59f0b08 	.word	0xe59f0b08
    eeb0:	e1a03002 	.word	0xe1a03002
    eeb4:	e1a03083 	.word	0xe1a03083
    eeb8:	e0833002 	.word	0xe0833002
    eebc:	e1a03103 	.word	0xe1a03103
    eec0:	e0833002 	.word	0xe0833002
    eec4:	e0833001 	.word	0xe0833001
    eec8:	e7901103 	.word	0xe7901103
    eecc:	e59f3ad8 	.word	0xe59f3ad8
    eed0:	e5932000 	.word	0xe5932000
    eed4:	e59f3af0 	.word	0xe59f3af0
    eed8:	e7933102 	.word	0xe7933102
    eedc:	e1a00001 	.word	0xe1a00001
    eee0:	e1a01003 	.word	0xe1a01003
    eee4:	eb000d43 	.word	0xeb000d43
    eee8:	e1a03000 	.word	0xe1a03000
    eeec:	e1a04003 	.word	0xe1a04003
    eef0:	e59f3ab0 	.word	0xe59f3ab0
    eef4:	e5932000 	.word	0xe5932000
    eef8:	e59f3aac 	.word	0xe59f3aac
    eefc:	e5933000 	.word	0xe5933000
    ef00:	e2431001 	.word	0xe2431001
    ef04:	e59f0ab0 	.word	0xe59f0ab0
    ef08:	e1a03002 	.word	0xe1a03002
    ef0c:	e1a03083 	.word	0xe1a03083
    ef10:	e0833002 	.word	0xe0833002
    ef14:	e1a03103 	.word	0xe1a03103
    ef18:	e0833002 	.word	0xe0833002
    ef1c:	e0833001 	.word	0xe0833001
    ef20:	e7901103 	.word	0xe7901103
    ef24:	e59f3a80 	.word	0xe59f3a80
    ef28:	e5932000 	.word	0xe5932000
    ef2c:	e59f3aa0 	.word	0xe59f3aa0
    ef30:	e7933102 	.word	0xe7933102
    ef34:	e1a00001 	.word	0xe1a00001
    ef38:	e1a01003 	.word	0xe1a01003
    ef3c:	eb000d2d 	.word	0xeb000d2d
    ef40:	e1a03000 	.word	0xe1a03000
    ef44:	e1a00004 	.word	0xe1a00004
    ef48:	e1a01003 	.word	0xe1a01003
    ef4c:	eb000c81 	.word	0xeb000c81
    ef50:	e1a03000 	.word	0xe1a03000
    ef54:	e1a02003 	.word	0xe1a02003
    ef58:	e59f3a70 	.word	0xe59f3a70
    ef5c:	e5832000 	.word	0xe5832000
    ef60:	e59f3a44 	.word	0xe59f3a44
    ef64:	e5932000 	.word	0xe5932000
    ef68:	e59f3a38 	.word	0xe59f3a38
    ef6c:	e5931000 	.word	0xe5931000
    ef70:	e59f0a44 	.word	0xe59f0a44
    ef74:	e1a03002 	.word	0xe1a03002
    ef78:	e1a03083 	.word	0xe1a03083
    ef7c:	e0833002 	.word	0xe0833002
    ef80:	e1a03103 	.word	0xe1a03103
    ef84:	e0833002 	.word	0xe0833002
    ef88:	e0833001 	.word	0xe0833001
    ef8c:	e7901103 	.word	0xe7901103
    ef90:	e59f3a14 	.word	0xe59f3a14
    ef94:	e5932000 	.word	0xe5932000
    ef98:	e59f3a34 	.word	0xe59f3a34
    ef9c:	e7933102 	.word	0xe7933102
    efa0:	e1a00001 	.word	0xe1a00001
    efa4:	e1a01003 	.word	0xe1a01003
    efa8:	eb000d12 	.word	0xeb000d12
    efac:	e1a03000 	.word	0xe1a03000
    efb0:	e1a04003 	.word	0xe1a04003
    efb4:	e59f39ec 	.word	0xe59f39ec
    efb8:	e5932000 	.word	0xe5932000
    efbc:	e59f39e8 	.word	0xe59f39e8
    efc0:	e5933000 	.word	0xe5933000
    efc4:	e2431001 	.word	0xe2431001
    efc8:	e59f09ec 	.word	0xe59f09ec
    efcc:	e1a03002 	.word	0xe1a03002
    efd0:	e1a03083 	.word	0xe1a03083
    efd4:	e0833002 	.word	0xe0833002
    efd8:	e1a03103 	.word	0xe1a03103
    efdc:	e0833002 	.word	0xe0833002
    efe0:	e0833001 	.word	0xe0833001
    efe4:	e7901103 	.word	0xe7901103
    efe8:	e59f39bc 	.word	0xe59f39bc
    efec:	e5932000 	.word	0xe5932000
    eff0:	e59f39d4 	.word	0xe59f39d4
    eff4:	e7933102 	.word	0xe7933102
    eff8:	e1a00001 	.word	0xe1a00001
    effc:	e1a01003 	.word	0xe1a01003
    f000:	eb000cfc 	.word	0xeb000cfc
    f004:	e1a03000 	.word	0xe1a03000
    f008:	e1a00004 	.word	0xe1a00004
    f00c:	e1a01003 	.word	0xe1a01003
    f010:	eb000c4f 	.word	0xeb000c4f
    f014:	e1a03000 	.word	0xe1a03000
    f018:	e1a02003 	.word	0xe1a02003
    f01c:	e59f39b4 	.word	0xe59f39b4
    f020:	e5832000 	.word	0xe5832000
    f024:	e59f39b0 	.word	0xe59f39b0
    f028:	e5934000 	.word	0xe5934000
    f02c:	e59f3990 	.word	0xe59f3990
    f030:	e5932000 	.word	0xe5932000
    f034:	e59f3994 	.word	0xe59f3994
    f038:	e5933000 	.word	0xe5933000
    f03c:	e1a00002 	.word	0xe1a00002
    f040:	e1a01003 	.word	0xe1a01003
    f044:	eb000ceb 	.word	0xeb000ceb
    f048:	e1a03000 	.word	0xe1a03000
    f04c:	e1a0c003 	.word	0xe1a0c003
    f050:	e59f3954 	.word	0xe59f3954
    f054:	e5932000 	.word	0xe5932000
    f058:	e59f3948 	.word	0xe59f3948
    f05c:	e5931000 	.word	0xe5931000
    f060:	e59f0978 	.word	0xe59f0978
    f064:	e1a03002 	.word	0xe1a03002
    f068:	e1a03083 	.word	0xe1a03083
    f06c:	e0833002 	.word	0xe0833002
    f070:	e1a03103 	.word	0xe1a03103
    f074:	e0833002 	.word	0xe0833002
    f078:	e0833001 	.word	0xe0833001
    f07c:	e7903103 	.word	0xe7903103
    f080:	e1a0000c 	.word	0xe1a0000c
    f084:	e1a01003 	.word	0xe1a01003
    f088:	eb000cda 	.word	0xeb000cda
    f08c:	e1a03000 	.word	0xe1a03000
    f090:	e1a00004 	.word	0xe1a00004
    f094:	e1a01003 	.word	0xe1a01003
    f098:	eb000c2d 	.word	0xeb000c2d
    f09c:	e1a03000 	.word	0xe1a03000
    f0a0:	e1a02003 	.word	0xe1a02003
    f0a4:	e59f3930 	.word	0xe59f3930
    f0a8:	e5832000 	.word	0xe5832000
    f0ac:	e59f38f8 	.word	0xe59f38f8
    f0b0:	e5932000 	.word	0xe5932000
    f0b4:	e59f3928 	.word	0xe59f3928
    f0b8:	e7932102 	.word	0xe7932102
    f0bc:	e59f3914 	.word	0xe59f3914
    f0c0:	e5933000 	.word	0xe5933000
    f0c4:	e1a00002 	.word	0xe1a00002
    f0c8:	e1a01003 	.word	0xe1a01003
    f0cc:	eb000cc9 	.word	0xeb000cc9
    f0d0:	e1a03000 	.word	0xe1a03000
    f0d4:	e1a02003 	.word	0xe1a02003
    f0d8:	e59f38e8 	.word	0xe59f38e8
    f0dc:	e5933000 	.word	0xe5933000
    f0e0:	e1a00002 	.word	0xe1a00002
    f0e4:	e1a01003 	.word	0xe1a01003
    f0e8:	eb000cc2 	.word	0xeb000cc2
    f0ec:	e1a03000 	.word	0xe1a03000
    f0f0:	e1a02003 	.word	0xe1a02003
    f0f4:	e59f38ec 	.word	0xe59f38ec
    f0f8:	e5933000 	.word	0xe5933000
    f0fc:	e1a00002 	.word	0xe1a00002
    f100:	e1a01003 	.word	0xe1a01003
    f104:	eb000c13 	.word	0xeb000c13
    f108:	e1a03000 	.word	0xe1a03000
    f10c:	e1a02003 	.word	0xe1a02003
    f110:	e59f38d0 	.word	0xe59f38d0
    f114:	e5832000 	.word	0xe5832000
    f118:	e59f3888 	.word	0xe59f3888
    f11c:	e5932000 	.word	0xe5932000
    f120:	e59f38c4 	.word	0xe59f38c4
    f124:	e7932102 	.word	0xe7932102
    f128:	e59f38a0 	.word	0xe59f38a0
    f12c:	e5933000 	.word	0xe5933000
    f130:	e1a00002 	.word	0xe1a00002
    f134:	e1a01003 	.word	0xe1a01003
    f138:	eb000cae 	.word	0xeb000cae
    f13c:	e1a03000 	.word	0xe1a03000
    f140:	e1a02003 	.word	0xe1a02003
    f144:	e59f387c 	.word	0xe59f387c
    f148:	e5933000 	.word	0xe5933000
    f14c:	e1a00002 	.word	0xe1a00002
    f150:	e1a01003 	.word	0xe1a01003
    f154:	eb000ca7 	.word	0xeb000ca7
    f158:	e1a03000 	.word	0xe1a03000
    f15c:	e1a02003 	.word	0xe1a02003
    f160:	e59f3888 	.word	0xe59f3888
    f164:	e5933000 	.word	0xe5933000
    f168:	e1a00002 	.word	0xe1a00002
    f16c:	e1a01003 	.word	0xe1a01003
    f170:	eb000bf8 	.word	0xeb000bf8
    f174:	e1a03000 	.word	0xe1a03000
    f178:	e1a02003 	.word	0xe1a02003
    f17c:	e59f386c 	.word	0xe59f386c
    f180:	e5832000 	.word	0xe5832000
    f184:	e59f3868 	.word	0xe59f3868
    f188:	e5933000 	.word	0xe5933000
    f18c:	e1a00003 	.word	0xe1a00003
    f190:	e59f1860 	.word	0xe59f1860
    f194:	eb000d59 	.word	0xeb000d59
    f198:	e1a03000 	.word	0xe1a03000
    f19c:	e3530000 	.word	0xe3530000
    f1a0:	0a000000 	.word	0x0a000000
    f1a4:	ea000063 	.word	0xea000063
    f1a8:	e59f37fc 	.word	0xe59f37fc
    f1ac:	e5933000 	.word	0xe5933000
    f1b0:	e3530001 	.word	0xe3530001
    f1b4:	1a00005f 	.word	0x1a00005f
    f1b8:	e59f37e8 	.word	0xe59f37e8
    f1bc:	e5933000 	.word	0xe5933000
    f1c0:	e3530001 	.word	0xe3530001
    f1c4:	1a000009 	.word	0x1a000009
    f1c8:	e59f37d8 	.word	0xe59f37d8
    f1cc:	e5931000 	.word	0xe5931000
    f1d0:	e59f37d0 	.word	0xe59f37d0
    f1d4:	e5933000 	.word	0xe5933000
    f1d8:	e2432001 	.word	0xe2432001
    f1dc:	e59f3818 	.word	0xe59f3818
    f1e0:	e7932102 	.word	0xe7932102
    f1e4:	e59f3810 	.word	0xe59f3810
    f1e8:	e7832101 	.word	0xe7832101
    f1ec:	ea000029 	.word	0xea000029
    f1f0:	e59f37b0 	.word	0xe59f37b0
    f1f4:	e5934000 	.word	0xe5934000
    f1f8:	e59f37a8 	.word	0xe59f37a8
    f1fc:	e5933000 	.word	0xe5933000
    f200:	e2432001 	.word	0xe2432001
    f204:	e59f37f0 	.word	0xe59f37f0
    f208:	e7932102 	.word	0xe7932102
    f20c:	e59f37ec 	.word	0xe59f37ec
    f210:	e5933000 	.word	0xe5933000
    f214:	e1a00002 	.word	0xe1a00002
    f218:	e1a01003 	.word	0xe1a01003
    f21c:	eb000c75 	.word	0xeb000c75
    f220:	e1a03000 	.word	0xe1a03000
    f224:	e1a05003 	.word	0xe1a05003
    f228:	e59f377c 	.word	0xe59f377c
    f22c:	e5932000 	.word	0xe5932000
    f230:	e59f3770 	.word	0xe59f3770
    f234:	e5931000 	.word	0xe5931000
    f238:	e59f07c4 	.word	0xe59f07c4
    f23c:	e1a03002 	.word	0xe1a03002
    f240:	e1a03083 	.word	0xe1a03083
    f244:	e0833002 	.word	0xe0833002
    f248:	e1a03103 	.word	0xe1a03103
    f24c:	e0833002 	.word	0xe0833002
    f250:	e0833001 	.word	0xe0833001
    f254:	e7901103 	.word	0xe7901103
    f258:	e59f3748 	.word	0xe59f3748
    f25c:	e5933000 	.word	0xe5933000
    f260:	e2432002 	.word	0xe2432002
    f264:	e59f3790 	.word	0xe59f3790
    f268:	e7933102 	.word	0xe7933102
    f26c:	e1a00001 	.word	0xe1a00001
    f270:	e1a01003 	.word	0xe1a01003
    f274:	eb000c5f 	.word	0xeb000c5f
    f278:	e1a03000 	.word	0xe1a03000
    f27c:	e1a00005 	.word	0xe1a00005
    f280:	e1a01003 	.word	0xe1a01003
    f284:	eb000bb2 	.word	0xeb000bb2
    f288:	e1a03000 	.word	0xe1a03000
    f28c:	e1a02003 	.word	0xe1a02003
    f290:	e59f3764 	.word	0xe59f3764
    f294:	e7832104 	.word	0xe7832104
    f298:	e59f3708 	.word	0xe59f3708
    f29c:	e5932000 	.word	0xe5932000
    f2a0:	e59f3754 	.word	0xe59f3754
    f2a4:	e7932102 	.word	0xe7932102
    f2a8:	e59f3714 	.word	0xe59f3714
    f2ac:	e5933000 	.word	0xe5933000
    f2b0:	e1a00002 	.word	0xe1a00002
    f2b4:	e1a01003 	.word	0xe1a01003
    f2b8:	eb000c4e 	.word	0xeb000c4e
    f2bc:	e1a03000 	.word	0xe1a03000
    f2c0:	e1a02003 	.word	0xe1a02003
    f2c4:	e59f373c 	.word	0xe59f373c
    f2c8:	e5832000 	.word	0xe5832000
    f2cc:	e59f36d8 	.word	0xe59f36d8
    f2d0:	e5932000 	.word	0xe5932000
    f2d4:	e59f3708 	.word	0xe59f3708
    f2d8:	e7932102 	.word	0xe7932102
    f2dc:	e59f36f4 	.word	0xe59f36f4
    f2e0:	e5933000 	.word	0xe5933000
    f2e4:	e1a00002 	.word	0xe1a00002
    f2e8:	e1a01003 	.word	0xe1a01003
    f2ec:	eb000c41 	.word	0xeb000c41
    f2f0:	e1a03000 	.word	0xe1a03000
    f2f4:	e1a02003 	.word	0xe1a02003
    f2f8:	e59f3708 	.word	0xe59f3708
    f2fc:	e5933000 	.word	0xe5933000
    f300:	e1a00002 	.word	0xe1a00002
    f304:	e1a01003 	.word	0xe1a01003
    f308:	eb000c3a 	.word	0xeb000c3a
    f30c:	e1a03000 	.word	0xe1a03000
    f310:	e1a02003 	.word	0xe1a02003
    f314:	e59f36f0 	.word	0xe59f36f0
    f318:	e5933000 	.word	0xe5933000
    f31c:	e1a00002 	.word	0xe1a00002
    f320:	e1a01003 	.word	0xe1a01003
    f324:	eb000b8b 	.word	0xeb000b8b
    f328:	e1a03000 	.word	0xe1a03000
    f32c:	e1a02003 	.word	0xe1a02003
    f330:	e59f36d4 	.word	0xe59f36d4
    f334:	e5832000 	.word	0xe5832000
    f338:	e59f36d0 	.word	0xe59f36d0
    f33c:	e5933000 	.word	0xe5933000
    f340:	e2432001 	.word	0xe2432001
    f344:	e59f36c4 	.word	0xe59f36c4
    f348:	e5832000 	.word	0xe5832000
    f34c:	e59f3658 	.word	0xe59f3658
    f350:	e5932000 	.word	0xe5932000
    f354:	e59f36b8 	.word	0xe59f36b8
    f358:	e5933000 	.word	0xe5933000
    f35c:	e0822003 	.word	0xe0822003
    f360:	e59f3644 	.word	0xe59f3644
    f364:	e5832000 	.word	0xe5832000
    f368:	e59f36a0 	.word	0xe59f36a0
    f36c:	e5933000 	.word	0xe5933000
    f370:	e3530000 	.word	0xe3530000
    f374:	cafffc3f 	.word	0xcafffc3f
    f378:	e59f3628 	.word	0xe59f3628
    f37c:	e5933000 	.word	0xe5933000
    f380:	e2832001 	.word	0xe2832001
    f384:	e59f361c 	.word	0xe59f361c
    f388:	e5832000 	.word	0xe5832000
    f38c:	e59f3614 	.word	0xe59f3614
    f390:	e5932000 	.word	0xe5932000
    f394:	e59f367c 	.word	0xe59f367c
    f398:	e5933000 	.word	0xe5933000
    f39c:	e1520003 	.word	0xe1520003
    f3a0:	dafffc11 	.word	0xdafffc11
    f3a4:	e59f3648 	.word	0xe59f3648
    f3a8:	e5933000 	.word	0xe5933000
    f3ac:	e1a00003 	.word	0xe1a00003
    f3b0:	e59f1640 	.word	0xe59f1640
    f3b4:	eb000cd1 	.word	0xeb000cd1
    f3b8:	e1a03000 	.word	0xe1a03000
    f3bc:	e3530000 	.word	0xe3530000
    f3c0:	0a000000 	.word	0x0a000000
    f3c4:	ea000004 	.word	0xea000004
    f3c8:	e59f363c 	.word	0xe59f363c
    f3cc:	e5932000 	.word	0xe5932000
    f3d0:	e59f3610 	.word	0xe59f3610
    f3d4:	e5832000 	.word	0xe5832000
    f3d8:	ea00000a 	.word	0xea00000a
    f3dc:	e59f3604 	.word	0xe59f3604
    f3e0:	e5932000 	.word	0xe5932000
    f3e4:	e59f3608 	.word	0xe59f3608
    f3e8:	e5933000 	.word	0xe5933000
    f3ec:	e1a00002 	.word	0xe1a00002
    f3f0:	e1a01003 	.word	0xe1a01003
    f3f4:	eb000c65 	.word	0xeb000c65
    f3f8:	e1a03000 	.word	0xe1a03000
    f3fc:	e1a02003 	.word	0xe1a02003
    f400:	e59f35e0 	.word	0xe59f35e0
    f404:	e5832000 	.word	0xe5832000
    f408:	e59f35cc 	.word	0xe59f35cc
    f40c:	e5933000 	.word	0xe5933000
    f410:	e2232102 	.word	0xe2232102
    f414:	e59f3600 	.word	0xe59f3600
    f418:	e5933000 	.word	0xe5933000
    f41c:	e1a00002 	.word	0xe1a00002
    f420:	e1a01003 	.word	0xe1a01003
    f424:	eb000bf3 	.word	0xeb000bf3
    f428:	e1a03000 	.word	0xe1a03000
    f42c:	e1a04003 	.word	0xe1a04003
    f430:	e59f35b8 	.word	0xe59f35b8
    f434:	e5932000 	.word	0xe5932000
    f438:	e59f35e0 	.word	0xe59f35e0
    f43c:	e5933000 	.word	0xe5933000
    f440:	e1a00002 	.word	0xe1a00002
    f444:	e1a01003 	.word	0xe1a01003
    f448:	eb000bea 	.word	0xeb000bea
    f44c:	e1a03000 	.word	0xe1a03000
    f450:	e1a00004 	.word	0xe1a00004
    f454:	e1a01003 	.word	0xe1a01003
    f458:	eb000b3d 	.word	0xeb000b3d
    f45c:	e1a03000 	.word	0xe1a03000
    f460:	e1a02003 	.word	0xe1a02003
    f464:	e59f35b8 	.word	0xe59f35b8
    f468:	e5832000 	.word	0xe5832000
    f46c:	e59f3574 	.word	0xe59f3574
    f470:	e5932000 	.word	0xe5932000
    f474:	e59f35ac 	.word	0xe59f35ac
    f478:	e5832000 	.word	0xe5832000
    f47c:	e59f3558 	.word	0xe59f3558
    f480:	e5932000 	.word	0xe5932000
    f484:	e59f3594 	.word	0xe59f3594
    f488:	e5933000 	.word	0xe5933000
    f48c:	e1a00002 	.word	0xe1a00002
    f490:	e1a01003 	.word	0xe1a01003
    f494:	eb000bd7 	.word	0xeb000bd7
    f498:	e1a03000 	.word	0xe1a03000
    f49c:	e1a04003 	.word	0xe1a04003
    f4a0:	e59f3548 	.word	0xe59f3548
    f4a4:	e5932000 	.word	0xe5932000
    f4a8:	e59f356c 	.word	0xe59f356c
    f4ac:	e5933000 	.word	0xe5933000
    f4b0:	e1a00002 	.word	0xe1a00002
    f4b4:	e1a01003 	.word	0xe1a01003
    f4b8:	eb000bce 	.word	0xeb000bce
    f4bc:	e1a03000 	.word	0xe1a03000
    f4c0:	e1a00004 	.word	0xe1a00004
    f4c4:	e1a01003 	.word	0xe1a01003
    f4c8:	eb000b21 	.word	0xeb000b21
    f4cc:	e1a03000 	.word	0xe1a03000
    f4d0:	e1a02003 	.word	0xe1a02003
    f4d4:	e59f3550 	.word	0xe59f3550
    f4d8:	e5832000 	.word	0xe5832000
    f4dc:	e59f3540 	.word	0xe59f3540
    f4e0:	e5932000 	.word	0xe5932000
    f4e4:	e59f3538 	.word	0xe59f3538
    f4e8:	e5933000 	.word	0xe5933000
    f4ec:	e1a00002 	.word	0xe1a00002
    f4f0:	e1a01003 	.word	0xe1a01003
    f4f4:	eb000bbf 	.word	0xeb000bbf
    f4f8:	e1a03000 	.word	0xe1a03000
    f4fc:	e1a04003 	.word	0xe1a04003
    f500:	e59f3520 	.word	0xe59f3520
    f504:	e5932000 	.word	0xe5932000
    f508:	e59f3518 	.word	0xe59f3518
    f50c:	e5933000 	.word	0xe5933000
    f510:	e1a00002 	.word	0xe1a00002
    f514:	e1a01003 	.word	0xe1a01003
    f518:	eb000bb6 	.word	0xeb000bb6
    f51c:	e1a03000 	.word	0xe1a03000
    f520:	e1a00004 	.word	0xe1a00004
    f524:	e1a01003 	.word	0xe1a01003
    f528:	eb000b0a 	.word	0xeb000b0a
    f52c:	e1a03000 	.word	0xe1a03000
    f530:	e1a00003 	.word	0xe1a00003
    f534:	ebfff4f9 	.word	0xebfff4f9
    f538:	e1a03000 	.word	0xe1a03000
    f53c:	e1a04001 	.word	0xe1a04001
    f540:	e1a00003 	.word	0xe1a00003
    f544:	e1a01004 	.word	0xe1a01004
    f548:	eb000cd5 	.word	0xeb000cd5
    f54c:	e1a03000 	.word	0xe1a03000
    f550:	e1a04001 	.word	0xe1a04001
    f554:	e1a00003 	.word	0xe1a00003
    f558:	e1a01004 	.word	0xe1a01004
    f55c:	eb000ad2 	.word	0xeb000ad2
    f560:	e1a02000 	.word	0xe1a02000
    f564:	e59f34c4 	.word	0xe59f34c4
    f568:	e5832000 	.word	0xe5832000
    f56c:	e59f34bc 	.word	0xe59f34bc
    f570:	e5932000 	.word	0xe5932000
    f574:	e59f34b4 	.word	0xe59f34b4
    f578:	e5933000 	.word	0xe5933000
    f57c:	e1a00002 	.word	0xe1a00002
    f580:	e1a01003 	.word	0xe1a01003
    f584:	eb000b9b 	.word	0xeb000b9b
    f588:	e1a03000 	.word	0xe1a03000
    f58c:	e1a04003 	.word	0xe1a04003
    f590:	e59f3494 	.word	0xe59f3494
    f594:	e5932000 	.word	0xe5932000
    f598:	e59f348c 	.word	0xe59f348c
    f59c:	e5933000 	.word	0xe5933000
    f5a0:	e1a00002 	.word	0xe1a00002
    f5a4:	e1a01003 	.word	0xe1a01003
    f5a8:	eb000b92 	.word	0xeb000b92
    f5ac:	e1a03000 	.word	0xe1a03000
    f5b0:	e1a00004 	.word	0xe1a00004
    f5b4:	e1a01003 	.word	0xe1a01003
    f5b8:	eb000ae6 	.word	0xeb000ae6
    f5bc:	e1a03000 	.word	0xe1a03000
    f5c0:	e1a00003 	.word	0xe1a00003
    f5c4:	ebfff4d5 	.word	0xebfff4d5
    f5c8:	e1a03000 	.word	0xe1a03000
    f5cc:	e1a04001 	.word	0xe1a04001
    f5d0:	e1a00003 	.word	0xe1a00003
    f5d4:	e1a01004 	.word	0xe1a01004
    f5d8:	eb000cb1 	.word	0xeb000cb1
    f5dc:	e1a03000 	.word	0xe1a03000
    f5e0:	e1a04001 	.word	0xe1a04001
    f5e4:	e1a00003 	.word	0xe1a00003
    f5e8:	e1a01004 	.word	0xe1a01004
    f5ec:	eb000aae 	.word	0xeb000aae
    f5f0:	e1a02000 	.word	0xe1a02000
    f5f4:	e59b3014 	.word	0xe59b3014
    f5f8:	e5832000 	.word	0xe5832000
    f5fc:	e59f3424 	.word	0xe59f3424
    f600:	e5933000 	.word	0xe5933000
    f604:	e1a00003 	.word	0xe1a00003
    f608:	ebfff4c4 	.word	0xebfff4c4
    f60c:	e1a05000 	.word	0xe1a05000
    f610:	e1a06001 	.word	0xe1a06001
    f614:	e59f3408 	.word	0xe59f3408
    f618:	e5933000 	.word	0xe5933000
    f61c:	e1a00003 	.word	0xe1a00003
    f620:	ebfff4be 	.word	0xebfff4be
    f624:	e1a03000 	.word	0xe1a03000
    f628:	e1a04001 	.word	0xe1a04001
    f62c:	e1a00005 	.word	0xe1a00005
    f630:	e1a01006 	.word	0xe1a01006
    f634:	e1a02003 	.word	0xe1a02003
    f638:	e1a03004 	.word	0xe1a03004
    f63c:	eb000c9e 	.word	0xeb000c9e
    f640:	e1a05000 	.word	0xe1a05000
    f644:	e1a06001 	.word	0xe1a06001
    f648:	e59f33e4 	.word	0xe59f33e4
    f64c:	e5933000 	.word	0xe5933000
    f650:	e1a00003 	.word	0xe1a00003
    f654:	ebfff4b1 	.word	0xebfff4b1
    f658:	e1a03000 	.word	0xe1a03000
    f65c:	e1a04001 	.word	0xe1a04001
    f660:	e1a00005 	.word	0xe1a00005
    f664:	e1a01006 	.word	0xe1a01006
    f668:	e1a02003 	.word	0xe1a02003
    f66c:	e1a03004 	.word	0xe1a03004
    f670:	ebfff57e 	.word	0xebfff57e
    f674:	e1a03000 	.word	0xe1a03000
    f678:	e1a04001 	.word	0xe1a04001
    f67c:	e1a00003 	.word	0xe1a00003
    f680:	e1a01004 	.word	0xe1a01004
    f684:	eb000a88 	.word	0xeb000a88
    f688:	e1a02000 	.word	0xe1a02000
    f68c:	e59b300c 	.word	0xe59b300c
    f690:	e5832000 	.word	0xe5832000
    f694:	e59f3390 	.word	0xe59f3390
    f698:	e5933000 	.word	0xe5933000
    f69c:	e1a00003 	.word	0xe1a00003
    f6a0:	ebfff49e 	.word	0xebfff49e
    f6a4:	e1a05000 	.word	0xe1a05000
    f6a8:	e1a06001 	.word	0xe1a06001
    f6ac:	e59f337c 	.word	0xe59f337c
    f6b0:	e5933000 	.word	0xe5933000
    f6b4:	e1a00003 	.word	0xe1a00003
    f6b8:	ebfff498 	.word	0xebfff498
    f6bc:	e1a03000 	.word	0xe1a03000
    f6c0:	e1a04001 	.word	0xe1a04001
    f6c4:	e1a00005 	.word	0xe1a00005
    f6c8:	e1a01006 	.word	0xe1a01006
    f6cc:	e1a02003 	.word	0xe1a02003
    f6d0:	e1a03004 	.word	0xe1a03004
    f6d4:	eb000c78 	.word	0xeb000c78
    f6d8:	e1a05000 	.word	0xe1a05000
    f6dc:	e1a06001 	.word	0xe1a06001
    f6e0:	e59f334c 	.word	0xe59f334c
    f6e4:	e5933000 	.word	0xe5933000
    f6e8:	e1a00003 	.word	0xe1a00003
    f6ec:	ebfff48b 	.word	0xebfff48b
    f6f0:	e1a03000 	.word	0xe1a03000
    f6f4:	e1a04001 	.word	0xe1a04001
    f6f8:	e1a00005 	.word	0xe1a00005
    f6fc:	e1a01006 	.word	0xe1a01006
    f700:	e1a02003 	.word	0xe1a02003
    f704:	e1a03004 	.word	0xe1a03004
    f708:	ebfff558 	.word	0xebfff558
    f70c:	e1a03000 	.word	0xe1a03000
    f710:	e1a04001 	.word	0xe1a04001
    f714:	e1a00003 	.word	0xe1a00003
    f718:	e1a01004 	.word	0xe1a01004
    f71c:	eb000a62 	.word	0xeb000a62
    f720:	e1a02000 	.word	0xe1a02000
    f724:	e59b3010 	.word	0xe59b3010
    f728:	e5832000 	.word	0xe5832000
    f72c:	e59b2018 	.word	0xe59b2018
    f730:	e59f3300 	.word	0xe59f3300
    f734:	e5823000 	.word	0xe5823000
    f738:	e51b302c 	.word	0xe51b302c
    f73c:	e3c33102 	.word	0xe3c33102
    f740:	e1a00003 	.word	0xe1a00003
    f744:	e59f12f0 	.word	0xe59f12f0
    f748:	eb000be8 	.word	0xeb000be8
    f74c:	e1a03000 	.word	0xe1a03000
    f750:	e3530000 	.word	0xe3530000
    f754:	aa000000 	.word	0xaa000000
    f758:	ea000083 	.word	0xea000083
    f75c:	e51b002c 	.word	0xe51b002c
    f760:	e59f1290 	.word	0xe59f1290
    f764:	eb000be1 	.word	0xeb000be1
    f768:	e1a03000 	.word	0xe1a03000
    f76c:	e3530000 	.word	0xe3530000
    f770:	ca000000 	.word	0xca000000
    f774:	ea00000f 	.word	0xea00000f
    f778:	e59b0004 	.word	0xe59b0004
    f77c:	e59f1274 	.word	0xe59f1274
    f780:	eb000bda 	.word	0xeb000bda
    f784:	e1a03000 	.word	0xe1a03000
    f788:	e3530000 	.word	0xe3530000
    f78c:	aa000000 	.word	0xaa000000
    f790:	ea000008 	.word	0xea000008
    f794:	e59b300c 	.word	0xe59b300c
    f798:	e5933000 	.word	0xe5933000
    f79c:	e1a00003 	.word	0xe1a00003
    f7a0:	e59b1004 	.word	0xe59b1004
    f7a4:	eb000a6a 	.word	0xeb000a6a
    f7a8:	e1a03000 	.word	0xe1a03000
    f7ac:	e1a02003 	.word	0xe1a02003
    f7b0:	e59b3018 	.word	0xe59b3018
    f7b4:	e5832000 	.word	0xe5832000
    f7b8:	e51b002c 	.word	0xe51b002c
    f7bc:	e59f1234 	.word	0xe59f1234
    f7c0:	eb000bca 	.word	0xeb000bca
    f7c4:	e1a03000 	.word	0xe1a03000
    f7c8:	e3530000 	.word	0xe3530000
    f7cc:	ca000000 	.word	0xca000000
    f7d0:	ea000011 	.word	0xea000011
    f7d4:	e59b0004 	.word	0xe59b0004
    f7d8:	e59f1218 	.word	0xe59f1218
    f7dc:	eb000bc5 	.word	0xeb000bc5
    f7e0:	e1a03000 	.word	0xe1a03000
    f7e4:	e3530000 	.word	0xe3530000
    f7e8:	ba000000 	.word	0xba000000
    f7ec:	ea00000a 	.word	0xea00000a
    f7f0:	e59b300c 	.word	0xe59b300c
    f7f4:	e5932000 	.word	0xe5932000
    f7f8:	e59b3004 	.word	0xe59b3004
    f7fc:	e3c33102 	.word	0xe3c33102
    f800:	e1a00002 	.word	0xe1a00002
    f804:	e1a01003 	.word	0xe1a01003
    f808:	eb000a52 	.word	0xeb000a52
    f80c:	e1a03000 	.word	0xe1a03000
    f810:	e1a02003 	.word	0xe1a02003
    f814:	e59b3018 	.word	0xe59b3018
    f818:	e5832000 	.word	0xe5832000
    f81c:	e51b002c 	.word	0xe51b002c
    f820:	e59f11d0 	.word	0xe59f11d0
    f824:	eb000bb3 	.word	0xeb000bb3
    f828:	e1a03000 	.word	0xe1a03000
    f82c:	e3530000 	.word	0xe3530000
    f830:	ba000000 	.word	0xba000000
    f834:	ea00000f 	.word	0xea00000f
    f838:	e59b0004 	.word	0xe59b0004
    f83c:	e59f11b4 	.word	0xe59f11b4
    f840:	eb000baa 	.word	0xeb000baa
    f844:	e1a03000 	.word	0xe1a03000
    f848:	e3530000 	.word	0xe3530000
    f84c:	aa000000 	.word	0xaa000000
    f850:	ea000008 	.word	0xea000008
    f854:	e59b300c 	.word	0xe59b300c
    f858:	e5933000 	.word	0xe5933000
    f85c:	e1a00003 	.word	0xe1a00003
    f860:	e59b1004 	.word	0xe59b1004
    f864:	eb000a3b 	.word	0xeb000a3b
    f868:	e1a03000 	.word	0xe1a03000
    f86c:	e1a02003 	.word	0xe1a02003
    f870:	e59b3018 	.word	0xe59b3018
    f874:	e5832000 	.word	0xe5832000
    f878:	e51b002c 	.word	0xe51b002c
    f87c:	e59f1174 	.word	0xe59f1174
    f880:	eb000b9c 	.word	0xeb000b9c
    f884:	e1a03000 	.word	0xe1a03000
    f888:	e3530000 	.word	0xe3530000
    f88c:	ba000000 	.word	0xba000000
    f890:	ea000011 	.word	0xea000011
    f894:	e59b0004 	.word	0xe59b0004
    f898:	e59f1158 	.word	0xe59f1158
    f89c:	eb000b95 	.word	0xeb000b95
    f8a0:	e1a03000 	.word	0xe1a03000
    f8a4:	e3530000 	.word	0xe3530000
    f8a8:	ba000000 	.word	0xba000000
    f8ac:	ea00000a 	.word	0xea00000a
    f8b0:	e59b300c 	.word	0xe59b300c
    f8b4:	e5932000 	.word	0xe5932000
    f8b8:	e59b3004 	.word	0xe59b3004
    f8bc:	e3c33102 	.word	0xe3c33102
    f8c0:	e1a00002 	.word	0xe1a00002
    f8c4:	e1a01003 	.word	0xe1a01003
    f8c8:	eb000a21 	.word	0xeb000a21
    f8cc:	e1a03000 	.word	0xe1a03000
    f8d0:	e1a02003 	.word	0xe1a02003
    f8d4:	e59b3018 	.word	0xe59b3018
    f8d8:	e5832000 	.word	0xe5832000
    f8dc:	e59b3018 	.word	0xe59b3018
    f8e0:	e5933000 	.word	0xe5933000
    f8e4:	e1a00003 	.word	0xe1a00003
    f8e8:	e59f1150 	.word	0xe59f1150
    f8ec:	eb000b7f 	.word	0xeb000b7f
    f8f0:	e1a03000 	.word	0xe1a03000
    f8f4:	e3530000 	.word	0xe3530000
    f8f8:	ca000000 	.word	0xca000000
    f8fc:	ea000008 	.word	0xea000008
    f900:	e59b3018 	.word	0xe59b3018
    f904:	e5933000 	.word	0xe5933000
    f908:	e1a00003 	.word	0xe1a00003
    f90c:	e59f1130 	.word	0xe59f1130
    f910:	eb000a0f 	.word	0xeb000a0f
    f914:	e1a03000 	.word	0xe1a03000
    f918:	e1a02003 	.word	0xe1a02003
    f91c:	e59b3018 	.word	0xe59b3018
    f920:	e5832000 	.word	0xe5832000
    f924:	e59b3018 	.word	0xe59b3018
    f928:	e5933000 	.word	0xe5933000
    f92c:	e1a00003 	.word	0xe1a00003
    f930:	e59f1110 	.word	0xe59f1110
    f934:	eb000b6f 	.word	0xeb000b6f
    f938:	e1a03000 	.word	0xe1a03000
    f93c:	e3530000 	.word	0xe3530000
    f940:	ba000000 	.word	0xba000000
    f944:	ea000008 	.word	0xea000008
    f948:	e59b3018 	.word	0xe59b3018
    f94c:	e5933000 	.word	0xe5933000
    f950:	e1a00003 	.word	0xe1a00003
    f954:	e59f10e8 	.word	0xe59f10e8
    f958:	eb0009fe 	.word	0xeb0009fe
    f95c:	e1a03000 	.word	0xe1a03000
    f960:	e1a02003 	.word	0xe1a02003
    f964:	e59b3018 	.word	0xe59b3018
    f968:	e5832000 	.word	0xe5832000
    f96c:	e59f20d8 	.word	0xe59f20d8
    f970:	e59b3008 	.word	0xe59b3008
    f974:	e5823000 	.word	0xe5823000
    f978:	e59f20d0 	.word	0xe59f20d0
    f97c:	e51b3028 	.word	0xe51b3028
    f980:	e5823000 	.word	0xe5823000
    f984:	e59f20c8 	.word	0xe59f20c8
    f988:	e51b302c 	.word	0xe51b302c
    f98c:	e5823000 	.word	0xe5823000
    f990:	e59f20c0 	.word	0xe59f20c0
    f994:	e59b3004 	.word	0xe59b3004
    f998:	e5823000 	.word	0xe5823000
    f99c:	e24bd01c 	.word	0xe24bd01c
    f9a0:	e89d68f0 	.word	0xe89d68f0
    f9a4:	e12fff1e 	.word	0xe12fff1e
    f9a8:	40001b18 	.word	0x40001b18
    f9ac:	40001b14 	.word	0x40001b14
    f9b0:	4000083c 	.word	0x4000083c
    f9b4:	40000ae0 	.word	0x40000ae0
    f9b8:	40000f24 	.word	0x40000f24
    f9bc:	4000185c 	.word	0x4000185c
    f9c0:	40000838 	.word	0x40000838
    f9c4:	40000ed4 	.word	0x40000ed4
    f9c8:	40000ec0 	.word	0x40000ec0
    f9cc:	400012ac 	.word	0x400012ac
    f9d0:	40000ebc 	.word	0x40000ebc
    f9d4:	400012e0 	.word	0x400012e0
    f9d8:	40000eb8 	.word	0x40000eb8
    f9dc:	40000ecc 	.word	0x40000ecc
    f9e0:	400015b8 	.word	0x400015b8
    f9e4:	40001244 	.word	0x40001244
    f9e8:	40000ec8 	.word	0x40000ec8
    f9ec:	40001278 	.word	0x40001278
    f9f0:	40000ed0 	.word	0x40000ed0
    f9f4:	40000ef0 	.word	0x40000ef0
    f9f8:	00000000 	.word	0x00000000
    f9fc:	40001210 	.word	0x40001210
    fa00:	40000ef4 	.word	0x40000ef4
    fa04:	40000f6c 	.word	0x40000f6c
    fa08:	40000eb4 	.word	0x40000eb4
    fa0c:	40000ec4 	.word	0x40000ec4
    fa10:	40001b00 	.word	0x40001b00
    fa14:	40001b04 	.word	0x40001b04
    fa18:	40001b1c 	.word	0x40001b1c
    fa1c:	40000ee0 	.word	0x40000ee0
    fa20:	40000edc 	.word	0x40000edc
    fa24:	40000eb0 	.word	0x40000eb0
    fa28:	40000eac 	.word	0x40000eac
    fa2c:	40000ea8 	.word	0x40000ea8
    fa30:	40000ea4 	.word	0x40000ea4
    fa34:	40000f64 	.word	0x40000f64
    fa38:	c479c000 	.word	0xc479c000
    fa3c:	425c0000 	.word	0x425c0000
    fa40:	43340000 	.word	0x43340000
    fa44:	43b40000 	.word	0x43b40000
    fa48:	c3340000 	.word	0xc3340000
    fa4c:	40000f34 	.word	0x40000f34
    fa50:	40000f30 	.word	0x40000f30
    fa54:	40000f2c 	.word	0x40000f2c
    fa58:	40000f28 	.word	0x40000f28

0000fa5c <geomag>:
    fa5c:	e1a0c00d 	.word	0xe1a0c00d
    fa60:	e92dd800 	.word	0xe92dd800
    fa64:	e24cb004 	.word	0xe24cb004
    fa68:	e24dd01c 	.word	0xe24dd01c
    fa6c:	e50b0010 	.word	0xe50b0010
    fa70:	e59f3048 	.word	0xe59f3048
    fa74:	e58d3000 	.word	0xe58d3000
    fa78:	e59f3040 	.word	0xe59f3040
    fa7c:	e58d3004 	.word	0xe58d3004
    fa80:	e3a03000 	.word	0xe3a03000
    fa84:	e58d3008 	.word	0xe58d3008
    fa88:	e3a03000 	.word	0xe3a03000
    fa8c:	e58d300c 	.word	0xe58d300c
    fa90:	e3a03000 	.word	0xe3a03000
    fa94:	e58d3010 	.word	0xe58d3010
    fa98:	e3a03000 	.word	0xe3a03000
    fa9c:	e58d3014 	.word	0xe58d3014
    faa0:	e3a00000 	.word	0xe3a00000
    faa4:	e51b1010 	.word	0xe51b1010
    faa8:	e59f2010 	.word	0xe59f2010
    faac:	e59f300c 	.word	0xe59f300c
    fab0:	ebfff558 	.word	0xebfff558
    fab4:	e24bd00c 	.word	0xe24bd00c
    fab8:	e89d6800 	.word	0xe89d6800
    fabc:	e12fff1e 	.word	0xe12fff1e
    fac0:	00000000 	.word	0x00000000

0000fac4 <geomg1>:
    fac4:	e1a0c00d 	.word	0xe1a0c00d
    fac8:	e92dd800 	.word	0xe92dd800
    facc:	e24cb004 	.word	0xe24cb004
    fad0:	e24dd028 	.word	0xe24dd028
    fad4:	e50b0010 	.word	0xe50b0010
    fad8:	e50b1014 	.word	0xe50b1014
    fadc:	e50b2018 	.word	0xe50b2018
    fae0:	e50b301c 	.word	0xe50b301c
    fae4:	e51b3018 	.word	0xe51b3018
    fae8:	e58d3000 	.word	0xe58d3000
    faec:	e51b301c 	.word	0xe51b301c
    faf0:	e58d3004 	.word	0xe58d3004
    faf4:	e59b3004 	.word	0xe59b3004
    faf8:	e58d3008 	.word	0xe58d3008
    fafc:	e59b3008 	.word	0xe59b3008
    fb00:	e58d300c 	.word	0xe58d300c
    fb04:	e59b300c 	.word	0xe59b300c
    fb08:	e58d3010 	.word	0xe58d3010
    fb0c:	e59b3010 	.word	0xe59b3010
    fb10:	e58d3014 	.word	0xe58d3014
    fb14:	e3a00001 	.word	0xe3a00001
    fb18:	e3a01000 	.word	0xe3a01000
    fb1c:	e51b2010 	.word	0xe51b2010
    fb20:	e51b3014 	.word	0xe51b3014
    fb24:	ebfff53b 	.word	0xebfff53b
    fb28:	e24bd00c 	.word	0xe24bd00c
    fb2c:	e89d6800 	.word	0xe89d6800
    fb30:	e12fff1e 	.word	0xe12fff1e

0000fb34 <getDeclination>:
    fb34:	e1a0c00d 	.word	0xe1a0c00d
    fb38:	e92dd9f0 	.word	0xe92dd9f0
    fb3c:	e24cb004 	.word	0xe24cb004
    fb40:	e24dd060 	.word	0xe24dd060
    fb44:	e50b0060 	.word	0xe50b0060
    fb48:	e50b1064 	.word	0xe50b1064
    fb4c:	e50b2068 	.word	0xe50b2068
    fb50:	e50b306c 	.word	0xe50b306c
    fb54:	e59f36ac 	.word	0xe59f36ac
    fb58:	e50b3038 	.word	0xe50b3038
    fb5c:	e59f36a8 	.word	0xe59f36a8
    fb60:	e50b3034 	.word	0xe50b3034
    fb64:	e59f36a4 	.word	0xe59f36a4
    fb68:	e50b302c 	.word	0xe50b302c
    fb6c:	e59f26a0 	.word	0xe59f26a0
    fb70:	e3a0300c 	.word	0xe3a0300c
    fb74:	e5823000 	.word	0xe5823000
    fb78:	e3a03000 	.word	0xe3a03000
    fb7c:	e50b305c 	.word	0xe50b305c
    fb80:	e59f3690 	.word	0xe59f3690
    fb84:	e50b3028 	.word	0xe50b3028
    fb88:	e3a03000 	.word	0xe3a03000
    fb8c:	e50b3058 	.word	0xe50b3058
    fb90:	e59f3680 	.word	0xe59f3680
    fb94:	e50b3024 	.word	0xe50b3024
    fb98:	e3a03000 	.word	0xe3a03000
    fb9c:	e50b3054 	.word	0xe50b3054
    fba0:	e59f066c 	.word	0xe59f066c
    fba4:	ebffffac 	.word	0xebffffac
    fba8:	e51b0060 	.word	0xe51b0060
    fbac:	eb0009da 	.word	0xeb0009da
    fbb0:	e1a03000 	.word	0xe1a03000
    fbb4:	e1a00003 	.word	0xe1a00003
    fbb8:	e59f165c 	.word	0xe59f165c
    fbbc:	eb000a73 	.word	0xeb000a73
    fbc0:	e1a03000 	.word	0xe1a03000
    fbc4:	e1a02003 	.word	0xe1a02003
    fbc8:	e59f3650 	.word	0xe59f3650
    fbcc:	e5832000 	.word	0xe5832000
    fbd0:	e51b0064 	.word	0xe51b0064
    fbd4:	eb0009d0 	.word	0xeb0009d0
    fbd8:	e1a03000 	.word	0xe1a03000
    fbdc:	e1a00003 	.word	0xe1a00003
    fbe0:	e59f1634 	.word	0xe59f1634
    fbe4:	eb000a69 	.word	0xeb000a69
    fbe8:	e1a03000 	.word	0xe1a03000
    fbec:	e1a02003 	.word	0xe1a02003
    fbf0:	e59f362c 	.word	0xe59f362c
    fbf4:	e5832000 	.word	0xe5832000
    fbf8:	e51b0068 	.word	0xe51b0068
    fbfc:	eb0009c6 	.word	0xeb0009c6
    fc00:	e1a02000 	.word	0xe1a02000
    fc04:	e59f361c 	.word	0xe59f361c
    fc08:	e5832000 	.word	0xe5832000
    fc0c:	e59f3614 	.word	0xe59f3614
    fc10:	e5933000 	.word	0xe5933000
    fc14:	e1a00003 	.word	0xe1a00003
    fc18:	e59f160c 	.word	0xe59f160c
    fc1c:	eb000a5b 	.word	0xeb000a5b
    fc20:	e1a03000 	.word	0xe1a03000
    fc24:	e1a02003 	.word	0xe1a02003
    fc28:	e59f3600 	.word	0xe59f3600
    fc2c:	e5832000 	.word	0xe5832000
    fc30:	e51b0034 	.word	0xe51b0034
    fc34:	e51b102c 	.word	0xe51b102c
    fc38:	eb000946 	.word	0xeb000946
    fc3c:	e1a03000 	.word	0xe1a03000
    fc40:	e50b3030 	.word	0xe50b3030
    fc44:	e51b006c 	.word	0xe51b006c
    fc48:	eb0009b3 	.word	0xeb0009b3
    fc4c:	e1a02000 	.word	0xe1a02000
    fc50:	e59f35dc 	.word	0xe59f35dc
    fc54:	e5832000 	.word	0xe5832000
    fc58:	e59f35d0 	.word	0xe59f35d0
    fc5c:	e5932000 	.word	0xe5932000
    fc60:	e59f35b8 	.word	0xe59f35b8
    fc64:	e5931000 	.word	0xe5931000
    fc68:	e59f35b4 	.word	0xe59f35b4
    fc6c:	e593c000 	.word	0xe593c000
    fc70:	e59f35bc 	.word	0xe59f35bc
    fc74:	e593e000 	.word	0xe593e000
    fc78:	e59f35b8 	.word	0xe59f35b8
    fc7c:	e58d3000 	.word	0xe58d3000
    fc80:	e59f35b4 	.word	0xe59f35b4
    fc84:	e58d3004 	.word	0xe58d3004
    fc88:	e59f35b0 	.word	0xe59f35b0
    fc8c:	e58d3008 	.word	0xe58d3008
    fc90:	e59f35ac 	.word	0xe59f35ac
    fc94:	e58d300c 	.word	0xe58d300c
    fc98:	e1a00002 	.word	0xe1a00002
    fc9c:	e1a0200c 	.word	0xe1a0200c
    fca0:	e1a0300e 	.word	0xe1a0300e
    fca4:	ebffff86 	.word	0xebffff86
    fca8:	e59f3584 	.word	0xe59f3584
    fcac:	e5932000 	.word	0xe5932000
    fcb0:	e59f3590 	.word	0xe59f3590
    fcb4:	e5832000 	.word	0xe5832000
    fcb8:	e59f3578 	.word	0xe59f3578
    fcbc:	e5932000 	.word	0xe5932000
    fcc0:	e59f3584 	.word	0xe59f3584
    fcc4:	e5832000 	.word	0xe5832000
    fcc8:	e59f356c 	.word	0xe59f356c
    fccc:	e5932000 	.word	0xe5932000
    fcd0:	e59f3578 	.word	0xe59f3578
    fcd4:	e5832000 	.word	0xe5832000
    fcd8:	e59f3560 	.word	0xe59f3560
    fcdc:	e5932000 	.word	0xe5932000
    fce0:	e59f356c 	.word	0xe59f356c
    fce4:	e5832000 	.word	0xe5832000
    fce8:	e59f3564 	.word	0xe59f3564
    fcec:	e5933000 	.word	0xe5933000
    fcf0:	e1a00003 	.word	0xe1a00003
    fcf4:	ebfff309 	.word	0xebfff309
    fcf8:	e1a07000 	.word	0xe1a07000
    fcfc:	e1a08001 	.word	0xe1a08001
    fd00:	e59f3544 	.word	0xe59f3544
    fd04:	e5933000 	.word	0xe5933000
    fd08:	e1a00003 	.word	0xe1a00003
    fd0c:	e51b1038 	.word	0xe51b1038
    fd10:	eb0009b8 	.word	0xeb0009b8
    fd14:	e1a03000 	.word	0xe1a03000
    fd18:	e1a00003 	.word	0xe1a00003
    fd1c:	ebfff2ff 	.word	0xebfff2ff
    fd20:	e1a03000 	.word	0xe1a03000
    fd24:	e1a04001 	.word	0xe1a04001
    fd28:	e1a00003 	.word	0xe1a00003
    fd2c:	e1a01004 	.word	0xe1a01004
    fd30:	eb000ad2 	.word	0xeb000ad2
    fd34:	e1a05000 	.word	0xe1a05000
    fd38:	e1a06001 	.word	0xe1a06001
    fd3c:	e59f350c 	.word	0xe59f350c
    fd40:	e5933000 	.word	0xe5933000
    fd44:	e1a00003 	.word	0xe1a00003
    fd48:	e51b1038 	.word	0xe51b1038
    fd4c:	eb0009a9 	.word	0xeb0009a9
    fd50:	e1a03000 	.word	0xe1a03000
    fd54:	e1a00003 	.word	0xe1a00003
    fd58:	ebfff2f0 	.word	0xebfff2f0
    fd5c:	e1a03000 	.word	0xe1a03000
    fd60:	e1a04001 	.word	0xe1a04001
    fd64:	e1a00003 	.word	0xe1a00003
    fd68:	e1a01004 	.word	0xe1a01004
    fd6c:	eb000ac3 	.word	0xeb000ac3
    fd70:	e1a03000 	.word	0xe1a03000
    fd74:	e1a04001 	.word	0xe1a04001
    fd78:	e1a00005 	.word	0xe1a00005
    fd7c:	e1a01006 	.word	0xe1a01006
    fd80:	e1a02003 	.word	0xe1a02003
    fd84:	e1a03004 	.word	0xe1a03004
    fd88:	ebfff314 	.word	0xebfff314
    fd8c:	e1a03000 	.word	0xe1a03000
    fd90:	e1a04001 	.word	0xe1a04001
    fd94:	e1a00007 	.word	0xe1a00007
    fd98:	e1a01008 	.word	0xe1a01008
    fd9c:	e1a02003 	.word	0xe1a02003
    fda0:	e1a03004 	.word	0xe1a03004
    fda4:	ebfff30d 	.word	0xebfff30d
    fda8:	e1a03000 	.word	0xe1a03000
    fdac:	e1a04001 	.word	0xe1a04001
    fdb0:	e1a00003 	.word	0xe1a00003
    fdb4:	e1a01004 	.word	0xe1a01004
    fdb8:	eb0008bb 	.word	0xeb0008bb
    fdbc:	e1a03000 	.word	0xe1a03000
    fdc0:	e50b3050 	.word	0xe50b3050
    fdc4:	e59f3488 	.word	0xe59f3488
    fdc8:	e5933000 	.word	0xe5933000
    fdcc:	e1a00003 	.word	0xe1a00003
    fdd0:	ebfff2d2 	.word	0xebfff2d2
    fdd4:	e1a07000 	.word	0xe1a07000
    fdd8:	e1a08001 	.word	0xe1a08001
    fddc:	e59f346c 	.word	0xe59f346c
    fde0:	e5933000 	.word	0xe5933000
    fde4:	e1a00003 	.word	0xe1a00003
    fde8:	e51b1038 	.word	0xe51b1038
    fdec:	eb000981 	.word	0xeb000981
    fdf0:	e1a03000 	.word	0xe1a03000
    fdf4:	e1a00003 	.word	0xe1a00003
    fdf8:	ebfff2c8 	.word	0xebfff2c8
    fdfc:	e1a03000 	.word	0xe1a03000
    fe00:	e1a04001 	.word	0xe1a04001
    fe04:	e1a00003 	.word	0xe1a00003
    fe08:	e1a01004 	.word	0xe1a01004
    fe0c:	eb000a9b 	.word	0xeb000a9b
    fe10:	e1a05000 	.word	0xe1a05000
    fe14:	e1a06001 	.word	0xe1a06001
    fe18:	e59f342c 	.word	0xe59f342c
    fe1c:	e5933000 	.word	0xe5933000
    fe20:	e1a00003 	.word	0xe1a00003
    fe24:	e51b1038 	.word	0xe51b1038
    fe28:	eb000972 	.word	0xeb000972
    fe2c:	e1a03000 	.word	0xe1a03000
    fe30:	e1a00003 	.word	0xe1a00003
    fe34:	ebfff2b9 	.word	0xebfff2b9
    fe38:	e1a03000 	.word	0xe1a03000
    fe3c:	e1a04001 	.word	0xe1a04001
    fe40:	e1a00003 	.word	0xe1a00003
    fe44:	e1a01004 	.word	0xe1a01004
    fe48:	eb000a98 	.word	0xeb000a98
    fe4c:	e1a03000 	.word	0xe1a03000
    fe50:	e1a04001 	.word	0xe1a04001
    fe54:	e1a00005 	.word	0xe1a00005
    fe58:	e1a01006 	.word	0xe1a01006
    fe5c:	e1a02003 	.word	0xe1a02003
    fe60:	e1a03004 	.word	0xe1a03004
    fe64:	ebfff2dd 	.word	0xebfff2dd
    fe68:	e1a03000 	.word	0xe1a03000
    fe6c:	e1a04001 	.word	0xe1a04001
    fe70:	e1a00007 	.word	0xe1a00007
    fe74:	e1a01008 	.word	0xe1a01008
    fe78:	e1a02003 	.word	0xe1a02003
    fe7c:	e1a03004 	.word	0xe1a03004
    fe80:	ebfff2d6 	.word	0xebfff2d6
    fe84:	e1a03000 	.word	0xe1a03000
    fe88:	e1a04001 	.word	0xe1a04001
    fe8c:	e1a00003 	.word	0xe1a00003
    fe90:	e1a01004 	.word	0xe1a01004
    fe94:	eb000884 	.word	0xeb000884
    fe98:	e1a03000 	.word	0xe1a03000
    fe9c:	e50b304c 	.word	0xe50b304c
    fea0:	e59f33ac 	.word	0xe59f33ac
    fea4:	e5933000 	.word	0xe5933000
    fea8:	e1a00003 	.word	0xe1a00003
    feac:	ebfff29b 	.word	0xebfff29b
    feb0:	e1a05000 	.word	0xe1a05000
    feb4:	e1a06001 	.word	0xe1a06001
    feb8:	e59f3390 	.word	0xe59f3390
    febc:	e5933000 	.word	0xe5933000
    fec0:	e1a00003 	.word	0xe1a00003
    fec4:	e51b1038 	.word	0xe51b1038
    fec8:	eb00094a 	.word	0xeb00094a
    fecc:	e1a03000 	.word	0xe1a03000
    fed0:	e1a00003 	.word	0xe1a00003
    fed4:	ebfff291 	.word	0xebfff291
    fed8:	e1a03000 	.word	0xe1a03000
    fedc:	e1a04001 	.word	0xe1a04001
    fee0:	e1a00003 	.word	0xe1a00003
    fee4:	e1a01004 	.word	0xe1a01004
    fee8:	eb000a70 	.word	0xeb000a70
    feec:	e1a03000 	.word	0xe1a03000
    fef0:	e1a04001 	.word	0xe1a04001
    fef4:	e1a00005 	.word	0xe1a00005
    fef8:	e1a01006 	.word	0xe1a01006
    fefc:	e1a02003 	.word	0xe1a02003
    ff00:	e1a03004 	.word	0xe1a03004
    ff04:	ebfff2b5 	.word	0xebfff2b5
    ff08:	e1a03000 	.word	0xe1a03000
    ff0c:	e1a04001 	.word	0xe1a04001
    ff10:	e1a00003 	.word	0xe1a00003
    ff14:	e1a01004 	.word	0xe1a01004
    ff18:	eb000863 	.word	0xeb000863
    ff1c:	e1a03000 	.word	0xe1a03000
    ff20:	e50b3048 	.word	0xe50b3048
    ff24:	e59f3328 	.word	0xe59f3328
    ff28:	e5933000 	.word	0xe5933000
    ff2c:	e1a00003 	.word	0xe1a00003
    ff30:	ebfff27a 	.word	0xebfff27a
    ff34:	e1a05000 	.word	0xe1a05000
    ff38:	e1a06001 	.word	0xe1a06001
    ff3c:	e59f330c 	.word	0xe59f330c
    ff40:	e5933000 	.word	0xe5933000
    ff44:	e1a00003 	.word	0xe1a00003
    ff48:	e51b1038 	.word	0xe51b1038
    ff4c:	eb000929 	.word	0xeb000929
    ff50:	e1a03000 	.word	0xe1a03000
    ff54:	e1a00003 	.word	0xe1a00003
    ff58:	ebfff270 	.word	0xebfff270
    ff5c:	e1a03000 	.word	0xe1a03000
    ff60:	e1a04001 	.word	0xe1a04001
    ff64:	e1a00003 	.word	0xe1a00003
    ff68:	e1a01004 	.word	0xe1a01004
    ff6c:	eb000a43 	.word	0xeb000a43
    ff70:	e1a03000 	.word	0xe1a03000
    ff74:	e1a04001 	.word	0xe1a04001
    ff78:	e1a00005 	.word	0xe1a00005
    ff7c:	e1a01006 	.word	0xe1a01006
    ff80:	e1a02003 	.word	0xe1a02003
    ff84:	e1a03004 	.word	0xe1a03004
    ff88:	ebfff294 	.word	0xebfff294
    ff8c:	e1a03000 	.word	0xe1a03000
    ff90:	e1a04001 	.word	0xe1a04001
    ff94:	e1a00003 	.word	0xe1a00003
    ff98:	e1a01004 	.word	0xe1a01004
    ff9c:	eb000842 	.word	0xeb000842
    ffa0:	e1a03000 	.word	0xe1a03000
    ffa4:	e50b3044 	.word	0xe50b3044
    ffa8:	e51b0044 	.word	0xe51b0044
    ffac:	e59f12a4 	.word	0xe59f12a4
    ffb0:	eb0009d0 	.word	0xeb0009d0
    ffb4:	e1a03000 	.word	0xe1a03000
    ffb8:	e3530000 	.word	0xe3530000
    ffbc:	ba000000 	.word	0xba000000
    ffc0:	ea000005 	.word	0xea000005
    ffc4:	e59f2280 	.word	0xe59f2280
    ffc8:	e59f323c 	.word	0xe59f323c
    ffcc:	e5823000 	.word	0xe5823000
    ffd0:	e59f2284 	.word	0xe59f2284
    ffd4:	e59f3230 	.word	0xe59f3230
    ffd8:	e5823000 	.word	0xe5823000
    ffdc:	e51b0044 	.word	0xe51b0044
    ffe0:	e59f1244 	.word	0xe59f1244
    ffe4:	eb0009c3 	.word	0xeb0009c3
    ffe8:	e1a03000 	.word	0xe1a03000
    ffec:	e3530000 	.word	0xe3530000
    fff0:	ba000000 	.word	0xba000000
    fff4:	ea000006 	.word	0xea000006
    fff8:	e3a03000 	.word	0xe3a03000
    fffc:	e50b305c 	.word	0xe50b305c
   10000:	e3a03001 	.word	0xe3a03001
   10004:	e50b3058 	.word	0xe50b3058
   10008:	e51b3044 	.word	0xe51b3044
   1000c:	e50b3024 	.word	0xe50b3024
   10010:	ea00000d 	.word	0xea00000d
   10014:	e51b0044 	.word	0xe51b0044
   10018:	e59f1240 	.word	0xe59f1240
   1001c:	eb0009b5 	.word	0xeb0009b5
   10020:	e1a03000 	.word	0xe1a03000
   10024:	e3530000 	.word	0xe3530000
   10028:	ba000000 	.word	0xba000000
   1002c:	ea000006 	.word	0xea000006
   10030:	e51b3058 	.word	0xe51b3058
   10034:	e3530000 	.word	0xe3530000
   10038:	1a000003 	.word	0x1a000003
   1003c:	e3a03001 	.word	0xe3a03001
   10040:	e50b305c 	.word	0xe50b305c
   10044:	e51b3044 	.word	0xe51b3044
   10048:	e50b3028 	.word	0xe50b3028
   1004c:	e59f31cc 	.word	0xe59f31cc
   10050:	e5933000 	.word	0xe5933000
   10054:	e3c33102 	.word	0xe3c33102
   10058:	e1a00003 	.word	0xe1a00003
   1005c:	ebfff22f 	.word	0xebfff22f
   10060:	e1a03000 	.word	0xe1a03000
   10064:	e1a04001 	.word	0xe1a04001
   10068:	e3a00101 	.word	0xe3a00101
   1006c:	e2800856 	.word	0xe2800856
   10070:	e2800902 	.word	0xe2800902
   10074:	e3a01000 	.word	0xe3a01000
   10078:	e1a02003 	.word	0xe1a02003
   1007c:	e1a03004 	.word	0xe1a03004
   10080:	ebfff14c 	.word	0xebfff14c
   10084:	e1a03000 	.word	0xe1a03000
   10088:	e1a04001 	.word	0xe1a04001
   1008c:	e1a00003 	.word	0xe1a00003
   10090:	e1a01004 	.word	0xe1a01004
   10094:	e28f2f59 	.word	0xe28f2f59
   10098:	e892000c 	.word	0xe892000c
   1009c:	ebfff378 	.word	0xebfff378
   100a0:	e1a03000 	.word	0xe1a03000
   100a4:	e3530000 	.word	0xe3530000
   100a8:	da000000 	.word	0xda000000
   100ac:	ea000013 	.word	0xea000013
   100b0:	e59f3154 	.word	0xe59f3154
   100b4:	e50b3050 	.word	0xe50b3050
   100b8:	e59f314c 	.word	0xe59f314c
   100bc:	e50b304c 	.word	0xe50b304c
   100c0:	e59f2184 	.word	0xe59f2184
   100c4:	e59f3140 	.word	0xe59f3140
   100c8:	e5823000 	.word	0xe5823000
   100cc:	e59f3138 	.word	0xe59f3138
   100d0:	e50b3040 	.word	0xe50b3040
   100d4:	e59f3130 	.word	0xe59f3130
   100d8:	e50b303c 	.word	0xe50b303c
   100dc:	e59f2178 	.word	0xe59f2178
   100e0:	e59f3124 	.word	0xe59f3124
   100e4:	e5823000 	.word	0xe5823000
   100e8:	e3a03001 	.word	0xe3a03001
   100ec:	e50b3054 	.word	0xe50b3054
   100f0:	e3a03000 	.word	0xe3a03000
   100f4:	e50b305c 	.word	0xe50b305c
   100f8:	e3a03000 	.word	0xe3a03000
   100fc:	e50b3058 	.word	0xe50b3058
   10100:	e59b3004 	.word	0xe59b3004
   10104:	e3a02000 	.word	0xe3a02000
   10108:	e5832000 	.word	0xe5832000
   1010c:	e51b305c 	.word	0xe51b305c
   10110:	e3530000 	.word	0xe3530000
   10114:	0a000004 	.word	0x0a000004
   10118:	e59b3004 	.word	0xe59b3004
   1011c:	e5933000 	.word	0xe5933000
   10120:	e3832001 	.word	0xe3832001
   10124:	e59b3004 	.word	0xe59b3004
   10128:	e5832000 	.word	0xe5832000
   1012c:	e51b3058 	.word	0xe51b3058
   10130:	e3530000 	.word	0xe3530000
   10134:	0a000004 	.word	0x0a000004
   10138:	e59b3004 	.word	0xe59b3004
   1013c:	e5933000 	.word	0xe5933000
   10140:	e3832002 	.word	0xe3832002
   10144:	e59b3004 	.word	0xe59b3004
   10148:	e5832000 	.word	0xe5832000
   1014c:	e51b3054 	.word	0xe51b3054
   10150:	e3530000 	.word	0xe3530000
   10154:	0a000007 	.word	0x0a000007
   10158:	e59b3004 	.word	0xe59b3004
   1015c:	e5933000 	.word	0xe5933000
   10160:	e3832004 	.word	0xe3832004
   10164:	e59b3004 	.word	0xe59b3004
   10168:	e5832000 	.word	0xe5832000
   1016c:	e3a03000 	.word	0xe3a03000
   10170:	e50b3070 	.word	0xe50b3070
   10174:	ea00001c 	.word	0xea00001c
   10178:	e59f30d0 	.word	0xe59f30d0
   1017c:	e5933000 	.word	0xe5933000
   10180:	e1a00003 	.word	0xe1a00003
   10184:	ebfff1e5 	.word	0xebfff1e5
   10188:	e1a03000 	.word	0xe1a03000
   1018c:	e1a04001 	.word	0xe1a04001
   10190:	e1a00003 	.word	0xe1a00003
   10194:	e1a01004 	.word	0xe1a01004
   10198:	e3a02101 	.word	0xe3a02101
   1019c:	e2822709 	.word	0xe2822709
   101a0:	e3a03000 	.word	0xe3a03000
   101a4:	ebfff20d 	.word	0xebfff20d
   101a8:	e1a03000 	.word	0xe1a03000
   101ac:	e1a04001 	.word	0xe1a04001
   101b0:	e1a00003 	.word	0xe1a00003
   101b4:	e1a01004 	.word	0xe1a01004
   101b8:	ebfff37f 	.word	0xebfff37f
   101bc:	e1a02000 	.word	0xe1a02000
   101c0:	e59f309c 	.word	0xe59f309c
   101c4:	e5832000 	.word	0xe5832000
   101c8:	e59f307c 	.word	0xe59f307c
   101cc:	e5933000 	.word	0xe5933000
   101d0:	e1a00003 	.word	0xe1a00003
   101d4:	e59f1050 	.word	0xe59f1050
   101d8:	eb000886 	.word	0xeb000886
   101dc:	e1a03000 	.word	0xe1a03000
   101e0:	e1a00003 	.word	0xe1a00003
   101e4:	eb000985 	.word	0xeb000985
   101e8:	e50b0070 	.word	0xe50b0070
   101ec:	e51b3070 	.word	0xe51b3070
   101f0:	e1a00003 	.word	0xe1a00003
   101f4:	e24bd020 	.word	0xe24bd020
   101f8:	e89d69f0 	.word	0xe89d69f0
   101fc:	e12fff1e 	.word	0xe12fff1e
   10200:	3f50624d 	.word	0x3f50624d
   10204:	d2f1a9fc 	.word	0xd2f1a9fc
   10208:	3c8efa35 	.word	0x3c8efa35
   1020c:	00000000 	.word	0x00000000
   10210:	40a00000 	.word	0x40a00000
   10214:	40001b58 	.word	0x40001b58
   10218:	47c34f80 	.word	0x47c34f80
   1021c:	4b189680 	.word	0x4b189680
   10220:	40001b50 	.word	0x40001b50
   10224:	40001b4c 	.word	0x40001b4c
   10228:	40001b54 	.word	0x40001b54
   1022c:	447a0000 	.word	0x447a0000
   10230:	40001b44 	.word	0x40001b44
   10234:	40001b40 	.word	0x40001b40
   10238:	40001b3c 	.word	0x40001b3c
   1023c:	40001b38 	.word	0x40001b38
   10240:	40001b34 	.word	0x40001b34
   10244:	40001b30 	.word	0x40001b30
   10248:	40001b2c 	.word	0x40001b2c
   1024c:	40001b28 	.word	0x40001b28
   10250:	40001b24 	.word	0x40001b24
   10254:	40001b20 	.word	0x40001b20
   10258:	42c80000 	.word	0x42c80000
   1025c:	40001b48 	.word	0x40001b48
   10260:	459c4000 	.word	0x459c4000
   10264:	40000e9c 	.word	0x40000e9c

00010268 <cos>:
   10268:	b570      	push	{r4, r5, r6, lr}
   1026a:	4a28      	ldr	r2, [pc, #160]	; (1030c <cos+0xa4>)
   1026c:	4b28      	ldr	r3, [pc, #160]	; (10310 <cos+0xa8>)
   1026e:	4002      	ands	r2, r0
   10270:	b085      	sub	sp, #20
   10272:	1c05      	adds	r5, r0, #0
   10274:	1c0e      	adds	r6, r1, #0
   10276:	429a      	cmp	r2, r3
   10278:	dd23      	ble.n	102c2 <cos+0x5a>
   1027a:	4b26      	ldr	r3, [pc, #152]	; (10314 <cos+0xac>)
   1027c:	429a      	cmp	r2, r3
   1027e:	dd0b      	ble.n	10298 <cos+0x30>
   10280:	1c33      	adds	r3, r6, #0
   10282:	1c2a      	adds	r2, r5, #0
   10284:	f002 fb58 	bl	12938 <____subdf3_from_thumb>
   10288:	1c03      	adds	r3, r0, #0
   1028a:	1c0c      	adds	r4, r1, #0
   1028c:	1c18      	adds	r0, r3, #0
   1028e:	1c21      	adds	r1, r4, #0
   10290:	b005      	add	sp, #20
   10292:	bc70      	pop	{r4, r5, r6}
   10294:	bc04      	pop	{r2}
   10296:	4710      	bx	r2
   10298:	aa01      	add	r2, sp, #4
   1029a:	f000 fa79 	bl	10790 <__ieee754_rem_pio2>
   1029e:	2303      	movs	r3, #3
   102a0:	1c04      	adds	r4, r0, #0
   102a2:	401c      	ands	r4, r3
   102a4:	2c01      	cmp	r4, #1
   102a6:	d013      	beq.n	102d0 <cos+0x68>
   102a8:	2c02      	cmp	r4, #2
   102aa:	d028      	beq.n	102fe <cos+0x96>
   102ac:	2c00      	cmp	r4, #0
   102ae:	d11b      	bne.n	102e8 <cos+0x80>
   102b0:	9a03      	ldr	r2, [sp, #12]
   102b2:	9b04      	ldr	r3, [sp, #16]
   102b4:	9801      	ldr	r0, [sp, #4]
   102b6:	9902      	ldr	r1, [sp, #8]
   102b8:	f000 fd76 	bl	10da8 <__kernel_cos>
   102bc:	1c03      	adds	r3, r0, #0
   102be:	1c0c      	adds	r4, r1, #0
   102c0:	e7e4      	b.n	1028c <cos+0x24>
   102c2:	4a15      	ldr	r2, [pc, #84]	; (10318 <cos+0xb0>)
   102c4:	4b15      	ldr	r3, [pc, #84]	; (1031c <cos+0xb4>)
   102c6:	f000 fd6f 	bl	10da8 <__kernel_cos>
   102ca:	1c03      	adds	r3, r0, #0
   102cc:	1c0c      	adds	r4, r1, #0
   102ce:	e7dd      	b.n	1028c <cos+0x24>
   102d0:	9801      	ldr	r0, [sp, #4]
   102d2:	9902      	ldr	r1, [sp, #8]
   102d4:	9a03      	ldr	r2, [sp, #12]
   102d6:	9b04      	ldr	r3, [sp, #16]
   102d8:	9400      	str	r4, [sp, #0]
   102da:	f001 faf9 	bl	118d0 <__kernel_sin>
   102de:	2280      	movs	r2, #128	; 0x80
   102e0:	0612      	lsls	r2, r2, #24
   102e2:	1883      	adds	r3, r0, r2
   102e4:	1c0c      	adds	r4, r1, #0
   102e6:	e7d1      	b.n	1028c <cos+0x24>
   102e8:	9a03      	ldr	r2, [sp, #12]
   102ea:	9b04      	ldr	r3, [sp, #16]
   102ec:	2401      	movs	r4, #1
   102ee:	9801      	ldr	r0, [sp, #4]
   102f0:	9902      	ldr	r1, [sp, #8]
   102f2:	9400      	str	r4, [sp, #0]
   102f4:	f001 faec 	bl	118d0 <__kernel_sin>
   102f8:	1c03      	adds	r3, r0, #0
   102fa:	1c0c      	adds	r4, r1, #0
   102fc:	e7c6      	b.n	1028c <cos+0x24>
   102fe:	9801      	ldr	r0, [sp, #4]
   10300:	9902      	ldr	r1, [sp, #8]
   10302:	9a03      	ldr	r2, [sp, #12]
   10304:	9b04      	ldr	r3, [sp, #16]
   10306:	f000 fd4f 	bl	10da8 <__kernel_cos>
   1030a:	e7e8      	b.n	102de <cos+0x76>
   1030c:	7fffffff 	.word	0x7fffffff
   10310:	3fe921fb 	.word	0x3fe921fb
   10314:	7fefffff 	.word	0x7fefffff
	...

00010320 <sin>:
   10320:	b570      	push	{r4, r5, r6, lr}
   10322:	4a29      	ldr	r2, [pc, #164]	; (103c8 <sin+0xa8>)
   10324:	4b29      	ldr	r3, [pc, #164]	; (103cc <sin+0xac>)
   10326:	4002      	ands	r2, r0
   10328:	b085      	sub	sp, #20
   1032a:	1c05      	adds	r5, r0, #0
   1032c:	1c0e      	adds	r6, r1, #0
   1032e:	429a      	cmp	r2, r3
   10330:	dd24      	ble.n	1037c <sin+0x5c>
   10332:	4b27      	ldr	r3, [pc, #156]	; (103d0 <sin+0xb0>)
   10334:	429a      	cmp	r2, r3
   10336:	dd0b      	ble.n	10350 <sin+0x30>
   10338:	1c33      	adds	r3, r6, #0
   1033a:	1c2a      	adds	r2, r5, #0
   1033c:	f002 fafc 	bl	12938 <____subdf3_from_thumb>
   10340:	1c03      	adds	r3, r0, #0
   10342:	1c0c      	adds	r4, r1, #0
   10344:	1c18      	adds	r0, r3, #0
   10346:	1c21      	adds	r1, r4, #0
   10348:	b005      	add	sp, #20
   1034a:	bc70      	pop	{r4, r5, r6}
   1034c:	bc04      	pop	{r2}
   1034e:	4710      	bx	r2
   10350:	aa01      	add	r2, sp, #4
   10352:	f000 fa1d 	bl	10790 <__ieee754_rem_pio2>
   10356:	2303      	movs	r3, #3
   10358:	4018      	ands	r0, r3
   1035a:	2801      	cmp	r0, #1
   1035c:	d017      	beq.n	1038e <sin+0x6e>
   1035e:	2802      	cmp	r0, #2
   10360:	d029      	beq.n	103b6 <sin+0x96>
   10362:	2800      	cmp	r0, #0
   10364:	d11c      	bne.n	103a0 <sin+0x80>
   10366:	9a03      	ldr	r2, [sp, #12]
   10368:	9b04      	ldr	r3, [sp, #16]
   1036a:	2401      	movs	r4, #1
   1036c:	9801      	ldr	r0, [sp, #4]
   1036e:	9902      	ldr	r1, [sp, #8]
   10370:	9400      	str	r4, [sp, #0]
   10372:	f001 faad 	bl	118d0 <__kernel_sin>
   10376:	1c03      	adds	r3, r0, #0
   10378:	1c0c      	adds	r4, r1, #0
   1037a:	e7e3      	b.n	10344 <sin+0x24>
   1037c:	2300      	movs	r3, #0
   1037e:	9300      	str	r3, [sp, #0]
   10380:	4a14      	ldr	r2, [pc, #80]	; (103d4 <sin+0xb4>)
   10382:	4b15      	ldr	r3, [pc, #84]	; (103d8 <sin+0xb8>)
   10384:	f001 faa4 	bl	118d0 <__kernel_sin>
   10388:	1c03      	adds	r3, r0, #0
   1038a:	1c0c      	adds	r4, r1, #0
   1038c:	e7da      	b.n	10344 <sin+0x24>
   1038e:	9a03      	ldr	r2, [sp, #12]
   10390:	9b04      	ldr	r3, [sp, #16]
   10392:	9801      	ldr	r0, [sp, #4]
   10394:	9902      	ldr	r1, [sp, #8]
   10396:	f000 fd07 	bl	10da8 <__kernel_cos>
   1039a:	1c03      	adds	r3, r0, #0
   1039c:	1c0c      	adds	r4, r1, #0
   1039e:	e7d1      	b.n	10344 <sin+0x24>
   103a0:	9801      	ldr	r0, [sp, #4]
   103a2:	9902      	ldr	r1, [sp, #8]
   103a4:	9a03      	ldr	r2, [sp, #12]
   103a6:	9b04      	ldr	r3, [sp, #16]
   103a8:	f000 fcfe 	bl	10da8 <__kernel_cos>
   103ac:	2280      	movs	r2, #128	; 0x80
   103ae:	0612      	lsls	r2, r2, #24
   103b0:	1883      	adds	r3, r0, r2
   103b2:	1c0c      	adds	r4, r1, #0
   103b4:	e7c6      	b.n	10344 <sin+0x24>
   103b6:	2401      	movs	r4, #1
   103b8:	9801      	ldr	r0, [sp, #4]
   103ba:	9902      	ldr	r1, [sp, #8]
   103bc:	9a03      	ldr	r2, [sp, #12]
   103be:	9b04      	ldr	r3, [sp, #16]
   103c0:	9400      	str	r4, [sp, #0]
   103c2:	f001 fa85 	bl	118d0 <__kernel_sin>
   103c6:	e7f1      	b.n	103ac <sin+0x8c>
   103c8:	7fffffff 	.word	0x7fffffff
   103cc:	3fe921fb 	.word	0x3fe921fb
   103d0:	7fefffff 	.word	0x7fefffff
	...

000103dc <atan2>:
   103dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   103de:	4657      	mov	r7, sl
   103e0:	4646      	mov	r6, r8
   103e2:	b4c0      	push	{r6, r7}
   103e4:	b08b      	sub	sp, #44	; 0x2c
   103e6:	1c1d      	adds	r5, r3, #0
   103e8:	1c06      	adds	r6, r0, #0
   103ea:	1c0f      	adds	r7, r1, #0
   103ec:	1c14      	adds	r4, r2, #0
   103ee:	f000 f8bf 	bl	10570 <__ieee754_atan2>
   103f2:	4b2a      	ldr	r3, [pc, #168]	; (1049c <atan2+0xc0>)
   103f4:	681b      	ldr	r3, [r3, #0]
   103f6:	9000      	str	r0, [sp, #0]
   103f8:	9101      	str	r1, [sp, #4]
   103fa:	4698      	mov	r8, r3
   103fc:	3301      	adds	r3, #1
   103fe:	d005      	beq.n	1040c <atan2+0x30>
   10400:	1c20      	adds	r0, r4, #0
   10402:	1c29      	adds	r1, r5, #0
   10404:	f7fb fe06 	bl	c014 <isnan>
   10408:	2800      	cmp	r0, #0
   1040a:	d008      	beq.n	1041e <atan2+0x42>
   1040c:	9800      	ldr	r0, [sp, #0]
   1040e:	9901      	ldr	r1, [sp, #4]
   10410:	b00b      	add	sp, #44	; 0x2c
   10412:	bc0c      	pop	{r2, r3}
   10414:	4690      	mov	r8, r2
   10416:	469a      	mov	sl, r3
   10418:	bcf0      	pop	{r4, r5, r6, r7}
   1041a:	bc04      	pop	{r2}
   1041c:	4710      	bx	r2
   1041e:	1c30      	adds	r0, r6, #0
   10420:	1c39      	adds	r1, r7, #0
   10422:	f7fb fdf7 	bl	c014 <isnan>
   10426:	4682      	mov	sl, r0
   10428:	2800      	cmp	r0, #0
   1042a:	d1ef      	bne.n	1040c <atan2+0x30>
   1042c:	1c20      	adds	r0, r4, #0
   1042e:	1c29      	adds	r1, r5, #0
   10430:	4a1b      	ldr	r2, [pc, #108]	; (104a0 <atan2+0xc4>)
   10432:	4b1c      	ldr	r3, [pc, #112]	; (104a4 <atan2+0xc8>)
   10434:	f002 fa60 	bl	128f8 <____eqdf2_from_thumb>
   10438:	2800      	cmp	r0, #0
   1043a:	d1e7      	bne.n	1040c <atan2+0x30>
   1043c:	1c30      	adds	r0, r6, #0
   1043e:	1c39      	adds	r1, r7, #0
   10440:	4a17      	ldr	r2, [pc, #92]	; (104a0 <atan2+0xc4>)
   10442:	4b18      	ldr	r3, [pc, #96]	; (104a4 <atan2+0xc8>)
   10444:	f002 fa58 	bl	128f8 <____eqdf2_from_thumb>
   10448:	2800      	cmp	r0, #0
   1044a:	d1df      	bne.n	1040c <atan2+0x30>
   1044c:	2301      	movs	r3, #1
   1044e:	9302      	str	r3, [sp, #8]
   10450:	4b15      	ldr	r3, [pc, #84]	; (104a8 <atan2+0xcc>)
   10452:	9406      	str	r4, [sp, #24]
   10454:	9507      	str	r5, [sp, #28]
   10456:	4654      	mov	r4, sl
   10458:	9303      	str	r3, [sp, #12]
   1045a:	940a      	str	r4, [sp, #40]	; 0x28
   1045c:	4b10      	ldr	r3, [pc, #64]	; (104a0 <atan2+0xc4>)
   1045e:	4c11      	ldr	r4, [pc, #68]	; (104a4 <atan2+0xc8>)
   10460:	9308      	str	r3, [sp, #32]
   10462:	9409      	str	r4, [sp, #36]	; 0x24
   10464:	4644      	mov	r4, r8
   10466:	9604      	str	r6, [sp, #16]
   10468:	9705      	str	r7, [sp, #20]
   1046a:	2c02      	cmp	r4, #2
   1046c:	d00c      	beq.n	10488 <atan2+0xac>
   1046e:	a802      	add	r0, sp, #8
   10470:	f001 fd70 	bl	11f54 <matherr>
   10474:	2800      	cmp	r0, #0
   10476:	d007      	beq.n	10488 <atan2+0xac>
   10478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1047a:	2b00      	cmp	r3, #0
   1047c:	d109      	bne.n	10492 <atan2+0xb6>
   1047e:	9b08      	ldr	r3, [sp, #32]
   10480:	9c09      	ldr	r4, [sp, #36]	; 0x24
   10482:	9300      	str	r3, [sp, #0]
   10484:	9401      	str	r4, [sp, #4]
   10486:	e7c1      	b.n	1040c <atan2+0x30>
   10488:	f002 f9e8 	bl	1285c <__errno>
   1048c:	2321      	movs	r3, #33	; 0x21
   1048e:	6003      	str	r3, [r0, #0]
   10490:	e7f2      	b.n	10478 <atan2+0x9c>
   10492:	f002 f9e3 	bl	1285c <__errno>
   10496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10498:	6003      	str	r3, [r0, #0]
   1049a:	e7f0      	b.n	1047e <atan2+0xa2>
   1049c:	00012fe4 	.word	0x00012fe4
	...
   104a8:	00012dbc 	.word	0x00012dbc

000104ac <sqrt>:
   104ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   104ae:	4657      	mov	r7, sl
   104b0:	4646      	mov	r6, r8
   104b2:	b4c0      	push	{r6, r7}
   104b4:	b089      	sub	sp, #36	; 0x24
   104b6:	1c04      	adds	r4, r0, #0
   104b8:	1c0d      	adds	r5, r1, #0
   104ba:	f000 fb89 	bl	10bd0 <__ieee754_sqrt>
   104be:	4b28      	ldr	r3, [pc, #160]	; (10560 <sqrt+0xb4>)
   104c0:	681b      	ldr	r3, [r3, #0]
   104c2:	1c06      	adds	r6, r0, #0
   104c4:	1c0f      	adds	r7, r1, #0
   104c6:	4698      	mov	r8, r3
   104c8:	3301      	adds	r3, #1
   104ca:	d00e      	beq.n	104ea <sqrt+0x3e>
   104cc:	1c20      	adds	r0, r4, #0
   104ce:	1c29      	adds	r1, r5, #0
   104d0:	f7fb fda0 	bl	c014 <isnan>
   104d4:	4682      	mov	sl, r0
   104d6:	2800      	cmp	r0, #0
   104d8:	d107      	bne.n	104ea <sqrt+0x3e>
   104da:	1c20      	adds	r0, r4, #0
   104dc:	1c29      	adds	r1, r5, #0
   104de:	4a21      	ldr	r2, [pc, #132]	; (10564 <sqrt+0xb8>)
   104e0:	4b21      	ldr	r3, [pc, #132]	; (10568 <sqrt+0xbc>)
   104e2:	f002 fa01 	bl	128e8 <____ltdf2_from_thumb>
   104e6:	2800      	cmp	r0, #0
   104e8:	db08      	blt.n	104fc <sqrt+0x50>
   104ea:	1c30      	adds	r0, r6, #0
   104ec:	1c39      	adds	r1, r7, #0
   104ee:	b009      	add	sp, #36	; 0x24
   104f0:	bc0c      	pop	{r2, r3}
   104f2:	4690      	mov	r8, r2
   104f4:	469a      	mov	sl, r3
   104f6:	bcf0      	pop	{r4, r5, r6, r7}
   104f8:	bc04      	pop	{r2}
   104fa:	4710      	bx	r2
   104fc:	2301      	movs	r3, #1
   104fe:	9300      	str	r3, [sp, #0]
   10500:	4b1a      	ldr	r3, [pc, #104]	; (1056c <sqrt+0xc0>)
   10502:	9404      	str	r4, [sp, #16]
   10504:	9505      	str	r5, [sp, #20]
   10506:	9301      	str	r3, [sp, #4]
   10508:	9402      	str	r4, [sp, #8]
   1050a:	9503      	str	r5, [sp, #12]
   1050c:	4653      	mov	r3, sl
   1050e:	4644      	mov	r4, r8
   10510:	9308      	str	r3, [sp, #32]
   10512:	2c00      	cmp	r4, #0
   10514:	d10e      	bne.n	10534 <sqrt+0x88>
   10516:	4b13      	ldr	r3, [pc, #76]	; (10564 <sqrt+0xb8>)
   10518:	4c13      	ldr	r4, [pc, #76]	; (10568 <sqrt+0xbc>)
   1051a:	9306      	str	r3, [sp, #24]
   1051c:	9407      	str	r4, [sp, #28]
   1051e:	4668      	mov	r0, sp
   10520:	f001 fd18 	bl	11f54 <matherr>
   10524:	2800      	cmp	r0, #0
   10526:	d010      	beq.n	1054a <sqrt+0x9e>
   10528:	9b08      	ldr	r3, [sp, #32]
   1052a:	2b00      	cmp	r3, #0
   1052c:	d112      	bne.n	10554 <sqrt+0xa8>
   1052e:	9e06      	ldr	r6, [sp, #24]
   10530:	9f07      	ldr	r7, [sp, #28]
   10532:	e7da      	b.n	104ea <sqrt+0x3e>
   10534:	480b      	ldr	r0, [pc, #44]	; (10564 <sqrt+0xb8>)
   10536:	490c      	ldr	r1, [pc, #48]	; (10568 <sqrt+0xbc>)
   10538:	1c02      	adds	r2, r0, #0
   1053a:	1c0b      	adds	r3, r1, #0
   1053c:	f002 f9d8 	bl	128f0 <____divdf3_from_thumb>
   10540:	4644      	mov	r4, r8
   10542:	9006      	str	r0, [sp, #24]
   10544:	9107      	str	r1, [sp, #28]
   10546:	2c02      	cmp	r4, #2
   10548:	d1e9      	bne.n	1051e <sqrt+0x72>
   1054a:	f002 f987 	bl	1285c <__errno>
   1054e:	2321      	movs	r3, #33	; 0x21
   10550:	6003      	str	r3, [r0, #0]
   10552:	e7e9      	b.n	10528 <sqrt+0x7c>
   10554:	f002 f982 	bl	1285c <__errno>
   10558:	9b08      	ldr	r3, [sp, #32]
   1055a:	6003      	str	r3, [r0, #0]
   1055c:	e7e7      	b.n	1052e <sqrt+0x82>
   1055e:	46c0      	nop			; (mov r8, r8)
   10560:	00012fe4 	.word	0x00012fe4
	...
   1056c:	00012dc4 	.word	0x00012dc4

00010570 <__ieee754_atan2>:
   10570:	b5f0      	push	{r4, r5, r6, r7, lr}
   10572:	4657      	mov	r7, sl
   10574:	464e      	mov	r6, r9
   10576:	4645      	mov	r5, r8
   10578:	b4e0      	push	{r5, r6, r7}
   1057a:	1c1c      	adds	r4, r3, #0
   1057c:	1c0e      	adds	r6, r1, #0
   1057e:	496b      	ldr	r1, [pc, #428]	; (1072c <__ieee754_atan2+0x1bc>)
   10580:	b082      	sub	sp, #8
   10582:	1c05      	adds	r5, r0, #0
   10584:	1c20      	adds	r0, r4, #0
   10586:	9200      	str	r2, [sp, #0]
   10588:	9301      	str	r3, [sp, #4]
   1058a:	4692      	mov	sl, r2
   1058c:	4243      	negs	r3, r0
   1058e:	400a      	ands	r2, r1
   10590:	4690      	mov	r8, r2
   10592:	4303      	orrs	r3, r0
   10594:	4647      	mov	r7, r8
   10596:	0fdb      	lsrs	r3, r3, #31
   10598:	433b      	orrs	r3, r7
   1059a:	4f65      	ldr	r7, [pc, #404]	; (10730 <__ieee754_atan2+0x1c0>)
   1059c:	468c      	mov	ip, r1
   1059e:	42bb      	cmp	r3, r7
   105a0:	d80a      	bhi.n	105b8 <__ieee754_atan2+0x48>
   105a2:	4273      	negs	r3, r6
   105a4:	4662      	mov	r2, ip
   105a6:	1c29      	adds	r1, r5, #0
   105a8:	4333      	orrs	r3, r6
   105aa:	4011      	ands	r1, r2
   105ac:	0fdb      	lsrs	r3, r3, #31
   105ae:	430b      	orrs	r3, r1
   105b0:	46a9      	mov	r9, r5
   105b2:	468c      	mov	ip, r1
   105b4:	42bb      	cmp	r3, r7
   105b6:	d911      	bls.n	105dc <__ieee754_atan2+0x6c>
   105b8:	1c28      	adds	r0, r5, #0
   105ba:	1c31      	adds	r1, r6, #0
   105bc:	9a00      	ldr	r2, [sp, #0]
   105be:	9b01      	ldr	r3, [sp, #4]
   105c0:	f002 f9b2 	bl	12928 <____adddf3_from_thumb>
   105c4:	1c05      	adds	r5, r0, #0
   105c6:	1c0e      	adds	r6, r1, #0
   105c8:	1c28      	adds	r0, r5, #0
   105ca:	1c31      	adds	r1, r6, #0
   105cc:	b002      	add	sp, #8
   105ce:	bc1c      	pop	{r2, r3, r4}
   105d0:	4690      	mov	r8, r2
   105d2:	4699      	mov	r9, r3
   105d4:	46a2      	mov	sl, r4
   105d6:	bcf0      	pop	{r4, r5, r6, r7}
   105d8:	bc04      	pop	{r2}
   105da:	4710      	bx	r2
   105dc:	4b55      	ldr	r3, [pc, #340]	; (10734 <__ieee754_atan2+0x1c4>)
   105de:	4453      	add	r3, sl
   105e0:	4303      	orrs	r3, r0
   105e2:	d012      	beq.n	1060a <__ieee754_atan2+0x9a>
   105e4:	4651      	mov	r1, sl
   105e6:	178a      	asrs	r2, r1, #30
   105e8:	0feb      	lsrs	r3, r5, #31
   105ea:	2102      	movs	r1, #2
   105ec:	400a      	ands	r2, r1
   105ee:	1c1f      	adds	r7, r3, #0
   105f0:	4317      	orrs	r7, r2
   105f2:	4662      	mov	r2, ip
   105f4:	4332      	orrs	r2, r6
   105f6:	d111      	bne.n	1061c <__ieee754_atan2+0xac>
   105f8:	2f02      	cmp	r7, #2
   105fa:	d04a      	beq.n	10692 <__ieee754_atan2+0x122>
   105fc:	2f02      	cmp	r7, #2
   105fe:	dd0b      	ble.n	10618 <__ieee754_atan2+0xa8>
   10600:	2f03      	cmp	r7, #3
   10602:	d10b      	bne.n	1061c <__ieee754_atan2+0xac>
   10604:	4d4c      	ldr	r5, [pc, #304]	; (10738 <__ieee754_atan2+0x1c8>)
   10606:	4e4d      	ldr	r6, [pc, #308]	; (1073c <__ieee754_atan2+0x1cc>)
   10608:	e7de      	b.n	105c8 <__ieee754_atan2+0x58>
   1060a:	1c28      	adds	r0, r5, #0
   1060c:	1c31      	adds	r1, r6, #0
   1060e:	f001 fa1f 	bl	11a50 <atan>
   10612:	1c05      	adds	r5, r0, #0
   10614:	1c0e      	adds	r6, r1, #0
   10616:	e7d7      	b.n	105c8 <__ieee754_atan2+0x58>
   10618:	2f00      	cmp	r7, #0
   1061a:	dad5      	bge.n	105c8 <__ieee754_atan2+0x58>
   1061c:	4643      	mov	r3, r8
   1061e:	4303      	orrs	r3, r0
   10620:	d105      	bne.n	1062e <__ieee754_atan2+0xbe>
   10622:	464f      	mov	r7, r9
   10624:	2f00      	cmp	r7, #0
   10626:	db26      	blt.n	10676 <__ieee754_atan2+0x106>
   10628:	4d45      	ldr	r5, [pc, #276]	; (10740 <__ieee754_atan2+0x1d0>)
   1062a:	4e46      	ldr	r6, [pc, #280]	; (10744 <__ieee754_atan2+0x1d4>)
   1062c:	e7cc      	b.n	105c8 <__ieee754_atan2+0x58>
   1062e:	4b40      	ldr	r3, [pc, #256]	; (10730 <__ieee754_atan2+0x1c0>)
   10630:	4598      	cmp	r8, r3
   10632:	d023      	beq.n	1067c <__ieee754_atan2+0x10c>
   10634:	4b3e      	ldr	r3, [pc, #248]	; (10730 <__ieee754_atan2+0x1c0>)
   10636:	459c      	cmp	ip, r3
   10638:	d01a      	beq.n	10670 <__ieee754_atan2+0x100>
   1063a:	4661      	mov	r1, ip
   1063c:	4642      	mov	r2, r8
   1063e:	1a8b      	subs	r3, r1, r2
   10640:	151b      	asrs	r3, r3, #20
   10642:	2b3c      	cmp	r3, #60	; 0x3c
   10644:	dd2e      	ble.n	106a4 <__ieee754_atan2+0x134>
   10646:	4b3e      	ldr	r3, [pc, #248]	; (10740 <__ieee754_atan2+0x1d0>)
   10648:	4c3e      	ldr	r4, [pc, #248]	; (10744 <__ieee754_atan2+0x1d4>)
   1064a:	2f01      	cmp	r7, #1
   1064c:	d024      	beq.n	10698 <__ieee754_atan2+0x128>
   1064e:	2f02      	cmp	r7, #2
   10650:	d038      	beq.n	106c4 <__ieee754_atan2+0x154>
   10652:	2f00      	cmp	r7, #0
   10654:	d023      	beq.n	1069e <__ieee754_atan2+0x12e>
   10656:	1c18      	adds	r0, r3, #0
   10658:	1c21      	adds	r1, r4, #0
   1065a:	4a3b      	ldr	r2, [pc, #236]	; (10748 <__ieee754_atan2+0x1d8>)
   1065c:	4b3b      	ldr	r3, [pc, #236]	; (1074c <__ieee754_atan2+0x1dc>)
   1065e:	f002 f96b 	bl	12938 <____subdf3_from_thumb>
   10662:	4a3b      	ldr	r2, [pc, #236]	; (10750 <__ieee754_atan2+0x1e0>)
   10664:	4b3b      	ldr	r3, [pc, #236]	; (10754 <__ieee754_atan2+0x1e4>)
   10666:	f002 f967 	bl	12938 <____subdf3_from_thumb>
   1066a:	1c05      	adds	r5, r0, #0
   1066c:	1c0e      	adds	r6, r1, #0
   1066e:	e7ab      	b.n	105c8 <__ieee754_atan2+0x58>
   10670:	4648      	mov	r0, r9
   10672:	2800      	cmp	r0, #0
   10674:	dad8      	bge.n	10628 <__ieee754_atan2+0xb8>
   10676:	4d38      	ldr	r5, [pc, #224]	; (10758 <__ieee754_atan2+0x1e8>)
   10678:	4e38      	ldr	r6, [pc, #224]	; (1075c <__ieee754_atan2+0x1ec>)
   1067a:	e7a5      	b.n	105c8 <__ieee754_atan2+0x58>
   1067c:	45c4      	cmp	ip, r8
   1067e:	d035      	beq.n	106ec <__ieee754_atan2+0x17c>
   10680:	2f01      	cmp	r7, #1
   10682:	d03e      	beq.n	10702 <__ieee754_atan2+0x192>
   10684:	2f01      	cmp	r7, #1
   10686:	dd3f      	ble.n	10708 <__ieee754_atan2+0x198>
   10688:	2f02      	cmp	r7, #2
   1068a:	d002      	beq.n	10692 <__ieee754_atan2+0x122>
   1068c:	2f03      	cmp	r7, #3
   1068e:	d1d1      	bne.n	10634 <__ieee754_atan2+0xc4>
   10690:	e7b8      	b.n	10604 <__ieee754_atan2+0x94>
   10692:	4d2f      	ldr	r5, [pc, #188]	; (10750 <__ieee754_atan2+0x1e0>)
   10694:	4e2f      	ldr	r6, [pc, #188]	; (10754 <__ieee754_atan2+0x1e4>)
   10696:	e797      	b.n	105c8 <__ieee754_atan2+0x58>
   10698:	2780      	movs	r7, #128	; 0x80
   1069a:	063f      	lsls	r7, r7, #24
   1069c:	19db      	adds	r3, r3, r7
   1069e:	1c1d      	adds	r5, r3, #0
   106a0:	1c26      	adds	r6, r4, #0
   106a2:	e791      	b.n	105c8 <__ieee754_atan2+0x58>
   106a4:	4650      	mov	r0, sl
   106a6:	2800      	cmp	r0, #0
   106a8:	db1b      	blt.n	106e2 <__ieee754_atan2+0x172>
   106aa:	9a00      	ldr	r2, [sp, #0]
   106ac:	9b01      	ldr	r3, [sp, #4]
   106ae:	1c28      	adds	r0, r5, #0
   106b0:	1c31      	adds	r1, r6, #0
   106b2:	f002 f91d 	bl	128f0 <____divdf3_from_thumb>
   106b6:	f001 fb8b 	bl	11dd0 <fabs>
   106ba:	f001 f9c9 	bl	11a50 <atan>
   106be:	1c03      	adds	r3, r0, #0
   106c0:	1c0c      	adds	r4, r1, #0
   106c2:	e7c2      	b.n	1064a <__ieee754_atan2+0xda>
   106c4:	1c18      	adds	r0, r3, #0
   106c6:	1c21      	adds	r1, r4, #0
   106c8:	4a1f      	ldr	r2, [pc, #124]	; (10748 <__ieee754_atan2+0x1d8>)
   106ca:	4b20      	ldr	r3, [pc, #128]	; (1074c <__ieee754_atan2+0x1dc>)
   106cc:	f002 f934 	bl	12938 <____subdf3_from_thumb>
   106d0:	1c02      	adds	r2, r0, #0
   106d2:	1c0b      	adds	r3, r1, #0
   106d4:	481e      	ldr	r0, [pc, #120]	; (10750 <__ieee754_atan2+0x1e0>)
   106d6:	491f      	ldr	r1, [pc, #124]	; (10754 <__ieee754_atan2+0x1e4>)
   106d8:	f002 f92e 	bl	12938 <____subdf3_from_thumb>
   106dc:	1c05      	adds	r5, r0, #0
   106de:	1c0e      	adds	r6, r1, #0
   106e0:	e772      	b.n	105c8 <__ieee754_atan2+0x58>
   106e2:	333c      	adds	r3, #60	; 0x3c
   106e4:	dae1      	bge.n	106aa <__ieee754_atan2+0x13a>
   106e6:	4b1e      	ldr	r3, [pc, #120]	; (10760 <__ieee754_atan2+0x1f0>)
   106e8:	4c1e      	ldr	r4, [pc, #120]	; (10764 <__ieee754_atan2+0x1f4>)
   106ea:	e7ae      	b.n	1064a <__ieee754_atan2+0xda>
   106ec:	2f01      	cmp	r7, #1
   106ee:	d010      	beq.n	10712 <__ieee754_atan2+0x1a2>
   106f0:	2f01      	cmp	r7, #1
   106f2:	dd14      	ble.n	1071e <__ieee754_atan2+0x1ae>
   106f4:	2f02      	cmp	r7, #2
   106f6:	d00f      	beq.n	10718 <__ieee754_atan2+0x1a8>
   106f8:	2f03      	cmp	r7, #3
   106fa:	d19b      	bne.n	10634 <__ieee754_atan2+0xc4>
   106fc:	4d1a      	ldr	r5, [pc, #104]	; (10768 <__ieee754_atan2+0x1f8>)
   106fe:	4e1b      	ldr	r6, [pc, #108]	; (1076c <__ieee754_atan2+0x1fc>)
   10700:	e762      	b.n	105c8 <__ieee754_atan2+0x58>
   10702:	4d1b      	ldr	r5, [pc, #108]	; (10770 <__ieee754_atan2+0x200>)
   10704:	4e1b      	ldr	r6, [pc, #108]	; (10774 <__ieee754_atan2+0x204>)
   10706:	e75f      	b.n	105c8 <__ieee754_atan2+0x58>
   10708:	2f00      	cmp	r7, #0
   1070a:	d193      	bne.n	10634 <__ieee754_atan2+0xc4>
   1070c:	4d14      	ldr	r5, [pc, #80]	; (10760 <__ieee754_atan2+0x1f0>)
   1070e:	4e15      	ldr	r6, [pc, #84]	; (10764 <__ieee754_atan2+0x1f4>)
   10710:	e75a      	b.n	105c8 <__ieee754_atan2+0x58>
   10712:	4d19      	ldr	r5, [pc, #100]	; (10778 <__ieee754_atan2+0x208>)
   10714:	4e19      	ldr	r6, [pc, #100]	; (1077c <__ieee754_atan2+0x20c>)
   10716:	e757      	b.n	105c8 <__ieee754_atan2+0x58>
   10718:	4d19      	ldr	r5, [pc, #100]	; (10780 <__ieee754_atan2+0x210>)
   1071a:	4e1a      	ldr	r6, [pc, #104]	; (10784 <__ieee754_atan2+0x214>)
   1071c:	e754      	b.n	105c8 <__ieee754_atan2+0x58>
   1071e:	2f00      	cmp	r7, #0
   10720:	d000      	beq.n	10724 <__ieee754_atan2+0x1b4>
   10722:	e787      	b.n	10634 <__ieee754_atan2+0xc4>
   10724:	4d18      	ldr	r5, [pc, #96]	; (10788 <__ieee754_atan2+0x218>)
   10726:	4e19      	ldr	r6, [pc, #100]	; (1078c <__ieee754_atan2+0x21c>)
   10728:	e74e      	b.n	105c8 <__ieee754_atan2+0x58>
   1072a:	46c0      	nop			; (mov r8, r8)
   1072c:	7fffffff 	.word	0x7fffffff
   10730:	7ff00000 	.word	0x7ff00000
   10734:	c0100000 	.word	0xc0100000
   10738:	c00921fb 	.word	0xc00921fb
   1073c:	54442d18 	.word	0x54442d18
   10740:	3ff921fb 	.word	0x3ff921fb
   10744:	54442d18 	.word	0x54442d18
   10748:	3ca1a626 	.word	0x3ca1a626
   1074c:	33145c07 	.word	0x33145c07
   10750:	400921fb 	.word	0x400921fb
   10754:	54442d18 	.word	0x54442d18
   10758:	bff921fb 	.word	0xbff921fb
   1075c:	54442d18 	.word	0x54442d18
	...
   10768:	c002d97c 	.word	0xc002d97c
   1076c:	7f3321d2 	.word	0x7f3321d2
   10770:	80000000 	.word	0x80000000
   10774:	00000000 	.word	0x00000000
   10778:	bfe921fb 	.word	0xbfe921fb
   1077c:	54442d18 	.word	0x54442d18
   10780:	4002d97c 	.word	0x4002d97c
   10784:	7f3321d2 	.word	0x7f3321d2
   10788:	3fe921fb 	.word	0x3fe921fb
   1078c:	54442d18 	.word	0x54442d18

00010790 <__ieee754_rem_pio2>:
   10790:	b5f0      	push	{r4, r5, r6, r7, lr}
   10792:	465f      	mov	r7, fp
   10794:	4656      	mov	r6, sl
   10796:	464d      	mov	r5, r9
   10798:	4644      	mov	r4, r8
   1079a:	b4f0      	push	{r4, r5, r6, r7}
   1079c:	4bd2      	ldr	r3, [pc, #840]	; (10ae8 <__ieee754_rem_pio2+0x358>)
   1079e:	1c07      	adds	r7, r0, #0
   107a0:	401f      	ands	r7, r3
   107a2:	4bd2      	ldr	r3, [pc, #840]	; (10aec <__ieee754_rem_pio2+0x35c>)
   107a4:	b08e      	sub	sp, #56	; 0x38
   107a6:	1c05      	adds	r5, r0, #0
   107a8:	1c0e      	adds	r6, r1, #0
   107aa:	4690      	mov	r8, r2
   107ac:	4681      	mov	r9, r0
   107ae:	429f      	cmp	r7, r3
   107b0:	dc10      	bgt.n	107d4 <__ieee754_rem_pio2+0x44>
   107b2:	4bcf      	ldr	r3, [pc, #828]	; (10af0 <__ieee754_rem_pio2+0x360>)
   107b4:	4ccf      	ldr	r4, [pc, #828]	; (10af4 <__ieee754_rem_pio2+0x364>)
   107b6:	6015      	str	r5, [r2, #0]
   107b8:	6056      	str	r6, [r2, #4]
   107ba:	6093      	str	r3, [r2, #8]
   107bc:	60d4      	str	r4, [r2, #12]
   107be:	469a      	mov	sl, r3
   107c0:	4650      	mov	r0, sl
   107c2:	b00e      	add	sp, #56	; 0x38
   107c4:	bc3c      	pop	{r2, r3, r4, r5}
   107c6:	4690      	mov	r8, r2
   107c8:	4699      	mov	r9, r3
   107ca:	46a2      	mov	sl, r4
   107cc:	46ab      	mov	fp, r5
   107ce:	bcf0      	pop	{r4, r5, r6, r7}
   107d0:	bc02      	pop	{r1}
   107d2:	4708      	bx	r1
   107d4:	4bc8      	ldr	r3, [pc, #800]	; (10af8 <__ieee754_rem_pio2+0x368>)
   107d6:	429f      	cmp	r7, r3
   107d8:	dd13      	ble.n	10802 <__ieee754_rem_pio2+0x72>
   107da:	4bc8      	ldr	r3, [pc, #800]	; (10afc <__ieee754_rem_pio2+0x36c>)
   107dc:	429f      	cmp	r7, r3
   107de:	dd34      	ble.n	1084a <__ieee754_rem_pio2+0xba>
   107e0:	4bc7      	ldr	r3, [pc, #796]	; (10b00 <__ieee754_rem_pio2+0x370>)
   107e2:	429f      	cmp	r7, r3
   107e4:	dc00      	bgt.n	107e8 <__ieee754_rem_pio2+0x58>
   107e6:	e0eb      	b.n	109c0 <__ieee754_rem_pio2+0x230>
   107e8:	1c2a      	adds	r2, r5, #0
   107ea:	1c33      	adds	r3, r6, #0
   107ec:	f002 f8a4 	bl	12938 <____subdf3_from_thumb>
   107f0:	2400      	movs	r4, #0
   107f2:	4642      	mov	r2, r8
   107f4:	4643      	mov	r3, r8
   107f6:	46a2      	mov	sl, r4
   107f8:	6090      	str	r0, [r2, #8]
   107fa:	60d1      	str	r1, [r2, #12]
   107fc:	6018      	str	r0, [r3, #0]
   107fe:	6059      	str	r1, [r3, #4]
   10800:	e7de      	b.n	107c0 <__ieee754_rem_pio2+0x30>
   10802:	2800      	cmp	r0, #0
   10804:	dc00      	bgt.n	10808 <__ieee754_rem_pio2+0x78>
   10806:	e0b9      	b.n	1097c <__ieee754_rem_pio2+0x1ec>
   10808:	4abe      	ldr	r2, [pc, #760]	; (10b04 <__ieee754_rem_pio2+0x374>)
   1080a:	4bbf      	ldr	r3, [pc, #764]	; (10b08 <__ieee754_rem_pio2+0x378>)
   1080c:	f002 f894 	bl	12938 <____subdf3_from_thumb>
   10810:	4bbe      	ldr	r3, [pc, #760]	; (10b0c <__ieee754_rem_pio2+0x37c>)
   10812:	1c04      	adds	r4, r0, #0
   10814:	1c0d      	adds	r5, r1, #0
   10816:	429f      	cmp	r7, r3
   10818:	d100      	bne.n	1081c <__ieee754_rem_pio2+0x8c>
   1081a:	e127      	b.n	10a6c <__ieee754_rem_pio2+0x2dc>
   1081c:	4abc      	ldr	r2, [pc, #752]	; (10b10 <__ieee754_rem_pio2+0x380>)
   1081e:	4bbd      	ldr	r3, [pc, #756]	; (10b14 <__ieee754_rem_pio2+0x384>)
   10820:	f002 f88a 	bl	12938 <____subdf3_from_thumb>
   10824:	1c02      	adds	r2, r0, #0
   10826:	1c0b      	adds	r3, r1, #0
   10828:	4641      	mov	r1, r8
   1082a:	600a      	str	r2, [r1, #0]
   1082c:	604b      	str	r3, [r1, #4]
   1082e:	1c20      	adds	r0, r4, #0
   10830:	1c29      	adds	r1, r5, #0
   10832:	f002 f881 	bl	12938 <____subdf3_from_thumb>
   10836:	4ab6      	ldr	r2, [pc, #728]	; (10b10 <__ieee754_rem_pio2+0x380>)
   10838:	4bb6      	ldr	r3, [pc, #728]	; (10b14 <__ieee754_rem_pio2+0x384>)
   1083a:	f002 f87d 	bl	12938 <____subdf3_from_thumb>
   1083e:	2301      	movs	r3, #1
   10840:	4642      	mov	r2, r8
   10842:	469a      	mov	sl, r3
   10844:	6090      	str	r0, [r2, #8]
   10846:	60d1      	str	r1, [r2, #12]
   10848:	e7ba      	b.n	107c0 <__ieee754_rem_pio2+0x30>
   1084a:	f001 fac1 	bl	11dd0 <fabs>
   1084e:	4ab2      	ldr	r2, [pc, #712]	; (10b18 <__ieee754_rem_pio2+0x388>)
   10850:	4bb2      	ldr	r3, [pc, #712]	; (10b1c <__ieee754_rem_pio2+0x38c>)
   10852:	1c0d      	adds	r5, r1, #0
   10854:	1c04      	adds	r4, r0, #0
   10856:	f002 f863 	bl	12920 <____muldf3_from_thumb>
   1085a:	4ab1      	ldr	r2, [pc, #708]	; (10b20 <__ieee754_rem_pio2+0x390>)
   1085c:	4bb1      	ldr	r3, [pc, #708]	; (10b24 <__ieee754_rem_pio2+0x394>)
   1085e:	f002 f863 	bl	12928 <____adddf3_from_thumb>
   10862:	f002 f86d 	bl	12940 <____fixdfsi_from_thumb>
   10866:	4682      	mov	sl, r0
   10868:	f002 f836 	bl	128d8 <____floatsidf_from_thumb>
   1086c:	4aae      	ldr	r2, [pc, #696]	; (10b28 <__ieee754_rem_pio2+0x398>)
   1086e:	4baf      	ldr	r3, [pc, #700]	; (10b2c <__ieee754_rem_pio2+0x39c>)
   10870:	9004      	str	r0, [sp, #16]
   10872:	9105      	str	r1, [sp, #20]
   10874:	f002 f854 	bl	12920 <____muldf3_from_thumb>
   10878:	1c02      	adds	r2, r0, #0
   1087a:	1c0b      	adds	r3, r1, #0
   1087c:	1c20      	adds	r0, r4, #0
   1087e:	1c29      	adds	r1, r5, #0
   10880:	f002 f852 	bl	12928 <____adddf3_from_thumb>
   10884:	4aa2      	ldr	r2, [pc, #648]	; (10b10 <__ieee754_rem_pio2+0x380>)
   10886:	4ba3      	ldr	r3, [pc, #652]	; (10b14 <__ieee754_rem_pio2+0x384>)
   10888:	9002      	str	r0, [sp, #8]
   1088a:	9103      	str	r1, [sp, #12]
   1088c:	9804      	ldr	r0, [sp, #16]
   1088e:	9905      	ldr	r1, [sp, #20]
   10890:	f002 f846 	bl	12920 <____muldf3_from_thumb>
   10894:	1c0e      	adds	r6, r1, #0
   10896:	4651      	mov	r1, sl
   10898:	1c05      	adds	r5, r0, #0
   1089a:	291f      	cmp	r1, #31
   1089c:	dc00      	bgt.n	108a0 <__ieee754_rem_pio2+0x110>
   1089e:	e0fb      	b.n	10a98 <__ieee754_rem_pio2+0x308>
   108a0:	1c33      	adds	r3, r6, #0
   108a2:	9802      	ldr	r0, [sp, #8]
   108a4:	9903      	ldr	r1, [sp, #12]
   108a6:	1c2a      	adds	r2, r5, #0
   108a8:	f002 f846 	bl	12938 <____subdf3_from_thumb>
   108ac:	4ca0      	ldr	r4, [pc, #640]	; (10b30 <__ieee754_rem_pio2+0x3a0>)
   108ae:	4643      	mov	r3, r8
   108b0:	6018      	str	r0, [r3, #0]
   108b2:	6059      	str	r1, [r3, #4]
   108b4:	0d03      	lsrs	r3, r0, #20
   108b6:	153f      	asrs	r7, r7, #20
   108b8:	4023      	ands	r3, r4
   108ba:	1afb      	subs	r3, r7, r3
   108bc:	46bb      	mov	fp, r7
   108be:	2b10      	cmp	r3, #16
   108c0:	dd3e      	ble.n	10940 <__ieee754_rem_pio2+0x1b0>
   108c2:	4a9c      	ldr	r2, [pc, #624]	; (10b34 <__ieee754_rem_pio2+0x3a4>)
   108c4:	4b9c      	ldr	r3, [pc, #624]	; (10b38 <__ieee754_rem_pio2+0x3a8>)
   108c6:	9804      	ldr	r0, [sp, #16]
   108c8:	9905      	ldr	r1, [sp, #20]
   108ca:	f002 f829 	bl	12920 <____muldf3_from_thumb>
   108ce:	1c06      	adds	r6, r0, #0
   108d0:	1c0f      	adds	r7, r1, #0
   108d2:	1c32      	adds	r2, r6, #0
   108d4:	1c3b      	adds	r3, r7, #0
   108d6:	9802      	ldr	r0, [sp, #8]
   108d8:	9903      	ldr	r1, [sp, #12]
   108da:	f002 f82d 	bl	12938 <____subdf3_from_thumb>
   108de:	4a97      	ldr	r2, [pc, #604]	; (10b3c <__ieee754_rem_pio2+0x3ac>)
   108e0:	4b97      	ldr	r3, [pc, #604]	; (10b40 <__ieee754_rem_pio2+0x3b0>)
   108e2:	9006      	str	r0, [sp, #24]
   108e4:	9107      	str	r1, [sp, #28]
   108e6:	9804      	ldr	r0, [sp, #16]
   108e8:	9905      	ldr	r1, [sp, #20]
   108ea:	f002 f819 	bl	12920 <____muldf3_from_thumb>
   108ee:	9a06      	ldr	r2, [sp, #24]
   108f0:	9b07      	ldr	r3, [sp, #28]
   108f2:	1c04      	adds	r4, r0, #0
   108f4:	1c0d      	adds	r5, r1, #0
   108f6:	9802      	ldr	r0, [sp, #8]
   108f8:	9903      	ldr	r1, [sp, #12]
   108fa:	f002 f81d 	bl	12938 <____subdf3_from_thumb>
   108fe:	1c32      	adds	r2, r6, #0
   10900:	1c3b      	adds	r3, r7, #0
   10902:	f002 f819 	bl	12938 <____subdf3_from_thumb>
   10906:	1c02      	adds	r2, r0, #0
   10908:	1c0b      	adds	r3, r1, #0
   1090a:	1c20      	adds	r0, r4, #0
   1090c:	1c29      	adds	r1, r5, #0
   1090e:	f002 f813 	bl	12938 <____subdf3_from_thumb>
   10912:	1c05      	adds	r5, r0, #0
   10914:	1c0e      	adds	r6, r1, #0
   10916:	1c2a      	adds	r2, r5, #0
   10918:	1c33      	adds	r3, r6, #0
   1091a:	9806      	ldr	r0, [sp, #24]
   1091c:	9907      	ldr	r1, [sp, #28]
   1091e:	f002 f80b 	bl	12938 <____subdf3_from_thumb>
   10922:	4c83      	ldr	r4, [pc, #524]	; (10b30 <__ieee754_rem_pio2+0x3a0>)
   10924:	4642      	mov	r2, r8
   10926:	0d03      	lsrs	r3, r0, #20
   10928:	6010      	str	r0, [r2, #0]
   1092a:	6051      	str	r1, [r2, #4]
   1092c:	4023      	ands	r3, r4
   1092e:	4659      	mov	r1, fp
   10930:	1acb      	subs	r3, r1, r3
   10932:	2b31      	cmp	r3, #49	; 0x31
   10934:	dd00      	ble.n	10938 <__ieee754_rem_pio2+0x1a8>
   10936:	e10f      	b.n	10b58 <__ieee754_rem_pio2+0x3c8>
   10938:	9a06      	ldr	r2, [sp, #24]
   1093a:	9b07      	ldr	r3, [sp, #28]
   1093c:	9202      	str	r2, [sp, #8]
   1093e:	9303      	str	r3, [sp, #12]
   10940:	4644      	mov	r4, r8
   10942:	6822      	ldr	r2, [r4, #0]
   10944:	6863      	ldr	r3, [r4, #4]
   10946:	9802      	ldr	r0, [sp, #8]
   10948:	9903      	ldr	r1, [sp, #12]
   1094a:	f001 fff5 	bl	12938 <____subdf3_from_thumb>
   1094e:	1c2a      	adds	r2, r5, #0
   10950:	1c33      	adds	r3, r6, #0
   10952:	f001 fff1 	bl	12938 <____subdf3_from_thumb>
   10956:	4642      	mov	r2, r8
   10958:	464b      	mov	r3, r9
   1095a:	6090      	str	r0, [r2, #8]
   1095c:	60d1      	str	r1, [r2, #12]
   1095e:	2b00      	cmp	r3, #0
   10960:	db00      	blt.n	10964 <__ieee754_rem_pio2+0x1d4>
   10962:	e72d      	b.n	107c0 <__ieee754_rem_pio2+0x30>
   10964:	6813      	ldr	r3, [r2, #0]
   10966:	2480      	movs	r4, #128	; 0x80
   10968:	0624      	lsls	r4, r4, #24
   1096a:	191b      	adds	r3, r3, r4
   1096c:	4651      	mov	r1, sl
   1096e:	6013      	str	r3, [r2, #0]
   10970:	6893      	ldr	r3, [r2, #8]
   10972:	4249      	negs	r1, r1
   10974:	191b      	adds	r3, r3, r4
   10976:	468a      	mov	sl, r1
   10978:	6093      	str	r3, [r2, #8]
   1097a:	e721      	b.n	107c0 <__ieee754_rem_pio2+0x30>
   1097c:	4a61      	ldr	r2, [pc, #388]	; (10b04 <__ieee754_rem_pio2+0x374>)
   1097e:	4b62      	ldr	r3, [pc, #392]	; (10b08 <__ieee754_rem_pio2+0x378>)
   10980:	f001 ffd2 	bl	12928 <____adddf3_from_thumb>
   10984:	4b61      	ldr	r3, [pc, #388]	; (10b0c <__ieee754_rem_pio2+0x37c>)
   10986:	1c04      	adds	r4, r0, #0
   10988:	1c0d      	adds	r5, r1, #0
   1098a:	429f      	cmp	r7, r3
   1098c:	d100      	bne.n	10990 <__ieee754_rem_pio2+0x200>
   1098e:	e095      	b.n	10abc <__ieee754_rem_pio2+0x32c>
   10990:	4a5f      	ldr	r2, [pc, #380]	; (10b10 <__ieee754_rem_pio2+0x380>)
   10992:	4b60      	ldr	r3, [pc, #384]	; (10b14 <__ieee754_rem_pio2+0x384>)
   10994:	f001 ffc8 	bl	12928 <____adddf3_from_thumb>
   10998:	1c02      	adds	r2, r0, #0
   1099a:	1c0b      	adds	r3, r1, #0
   1099c:	4641      	mov	r1, r8
   1099e:	600a      	str	r2, [r1, #0]
   109a0:	604b      	str	r3, [r1, #4]
   109a2:	1c20      	adds	r0, r4, #0
   109a4:	1c29      	adds	r1, r5, #0
   109a6:	f001 ffc7 	bl	12938 <____subdf3_from_thumb>
   109aa:	4a59      	ldr	r2, [pc, #356]	; (10b10 <__ieee754_rem_pio2+0x380>)
   109ac:	4b59      	ldr	r3, [pc, #356]	; (10b14 <__ieee754_rem_pio2+0x384>)
   109ae:	f001 ffbb 	bl	12928 <____adddf3_from_thumb>
   109b2:	2301      	movs	r3, #1
   109b4:	425c      	negs	r4, r3
   109b6:	4642      	mov	r2, r8
   109b8:	46a2      	mov	sl, r4
   109ba:	6090      	str	r0, [r2, #8]
   109bc:	60d1      	str	r1, [r2, #12]
   109be:	e6ff      	b.n	107c0 <__ieee754_rem_pio2+0x30>
   109c0:	4960      	ldr	r1, [pc, #384]	; (10b44 <__ieee754_rem_pio2+0x3b4>)
   109c2:	153a      	asrs	r2, r7, #20
   109c4:	1889      	adds	r1, r1, r2
   109c6:	050a      	lsls	r2, r1, #20
   109c8:	1abb      	subs	r3, r7, r2
   109ca:	1c18      	adds	r0, r3, #0
   109cc:	468a      	mov	sl, r1
   109ce:	1c31      	adds	r1, r6, #0
   109d0:	1c1c      	adds	r4, r3, #0
   109d2:	f001 ffb5 	bl	12940 <____fixdfsi_from_thumb>
   109d6:	f001 ff7f 	bl	128d8 <____floatsidf_from_thumb>
   109da:	1c02      	adds	r2, r0, #0
   109dc:	1c0b      	adds	r3, r1, #0
   109de:	1c20      	adds	r0, r4, #0
   109e0:	1c31      	adds	r1, r6, #0
   109e2:	9208      	str	r2, [sp, #32]
   109e4:	9309      	str	r3, [sp, #36]	; 0x24
   109e6:	f001 ffa7 	bl	12938 <____subdf3_from_thumb>
   109ea:	4a57      	ldr	r2, [pc, #348]	; (10b48 <__ieee754_rem_pio2+0x3b8>)
   109ec:	4b57      	ldr	r3, [pc, #348]	; (10b4c <__ieee754_rem_pio2+0x3bc>)
   109ee:	f001 ff97 	bl	12920 <____muldf3_from_thumb>
   109f2:	1c0d      	adds	r5, r1, #0
   109f4:	1c04      	adds	r4, r0, #0
   109f6:	f001 ffa3 	bl	12940 <____fixdfsi_from_thumb>
   109fa:	f001 ff6d 	bl	128d8 <____floatsidf_from_thumb>
   109fe:	1c02      	adds	r2, r0, #0
   10a00:	1c0b      	adds	r3, r1, #0
   10a02:	1c20      	adds	r0, r4, #0
   10a04:	1c29      	adds	r1, r5, #0
   10a06:	920a      	str	r2, [sp, #40]	; 0x28
   10a08:	930b      	str	r3, [sp, #44]	; 0x2c
   10a0a:	f001 ff95 	bl	12938 <____subdf3_from_thumb>
   10a0e:	4a4e      	ldr	r2, [pc, #312]	; (10b48 <__ieee754_rem_pio2+0x3b8>)
   10a10:	4b4e      	ldr	r3, [pc, #312]	; (10b4c <__ieee754_rem_pio2+0x3bc>)
   10a12:	f001 ff85 	bl	12920 <____muldf3_from_thumb>
   10a16:	2603      	movs	r6, #3
   10a18:	ad0c      	add	r5, sp, #48	; 0x30
   10a1a:	900c      	str	r0, [sp, #48]	; 0x30
   10a1c:	910d      	str	r1, [sp, #52]	; 0x34
   10a1e:	e001      	b.n	10a24 <__ieee754_rem_pio2+0x294>
   10a20:	1c26      	adds	r6, r4, #0
   10a22:	3d08      	subs	r5, #8
   10a24:	6828      	ldr	r0, [r5, #0]
   10a26:	6869      	ldr	r1, [r5, #4]
   10a28:	4a31      	ldr	r2, [pc, #196]	; (10af0 <__ieee754_rem_pio2+0x360>)
   10a2a:	4b32      	ldr	r3, [pc, #200]	; (10af4 <__ieee754_rem_pio2+0x364>)
   10a2c:	1e74      	subs	r4, r6, #1
   10a2e:	f001 ff63 	bl	128f8 <____eqdf2_from_thumb>
   10a32:	2800      	cmp	r0, #0
   10a34:	d0f4      	beq.n	10a20 <__ieee754_rem_pio2+0x290>
   10a36:	2302      	movs	r3, #2
   10a38:	9300      	str	r3, [sp, #0]
   10a3a:	4b45      	ldr	r3, [pc, #276]	; (10b50 <__ieee754_rem_pio2+0x3c0>)
   10a3c:	4652      	mov	r2, sl
   10a3e:	9301      	str	r3, [sp, #4]
   10a40:	a808      	add	r0, sp, #32
   10a42:	4641      	mov	r1, r8
   10a44:	1c33      	adds	r3, r6, #0
   10a46:	f000 faf5 	bl	11034 <__kernel_rem_pio2>
   10a4a:	464a      	mov	r2, r9
   10a4c:	4682      	mov	sl, r0
   10a4e:	2a00      	cmp	r2, #0
   10a50:	db00      	blt.n	10a54 <__ieee754_rem_pio2+0x2c4>
   10a52:	e6b5      	b.n	107c0 <__ieee754_rem_pio2+0x30>
   10a54:	4644      	mov	r4, r8
   10a56:	6823      	ldr	r3, [r4, #0]
   10a58:	2180      	movs	r1, #128	; 0x80
   10a5a:	0609      	lsls	r1, r1, #24
   10a5c:	185b      	adds	r3, r3, r1
   10a5e:	6023      	str	r3, [r4, #0]
   10a60:	68a3      	ldr	r3, [r4, #8]
   10a62:	4242      	negs	r2, r0
   10a64:	185b      	adds	r3, r3, r1
   10a66:	4692      	mov	sl, r2
   10a68:	60a3      	str	r3, [r4, #8]
   10a6a:	e6a9      	b.n	107c0 <__ieee754_rem_pio2+0x30>
   10a6c:	4a31      	ldr	r2, [pc, #196]	; (10b34 <__ieee754_rem_pio2+0x3a4>)
   10a6e:	4b32      	ldr	r3, [pc, #200]	; (10b38 <__ieee754_rem_pio2+0x3a8>)
   10a70:	f001 ff62 	bl	12938 <____subdf3_from_thumb>
   10a74:	4a31      	ldr	r2, [pc, #196]	; (10b3c <__ieee754_rem_pio2+0x3ac>)
   10a76:	4b32      	ldr	r3, [pc, #200]	; (10b40 <__ieee754_rem_pio2+0x3b0>)
   10a78:	1c04      	adds	r4, r0, #0
   10a7a:	1c0d      	adds	r5, r1, #0
   10a7c:	f001 ff5c 	bl	12938 <____subdf3_from_thumb>
   10a80:	1c02      	adds	r2, r0, #0
   10a82:	1c0b      	adds	r3, r1, #0
   10a84:	4641      	mov	r1, r8
   10a86:	600a      	str	r2, [r1, #0]
   10a88:	604b      	str	r3, [r1, #4]
   10a8a:	1c20      	adds	r0, r4, #0
   10a8c:	1c29      	adds	r1, r5, #0
   10a8e:	f001 ff53 	bl	12938 <____subdf3_from_thumb>
   10a92:	4a2a      	ldr	r2, [pc, #168]	; (10b3c <__ieee754_rem_pio2+0x3ac>)
   10a94:	4b2a      	ldr	r3, [pc, #168]	; (10b40 <__ieee754_rem_pio2+0x3b0>)
   10a96:	e6d0      	b.n	1083a <__ieee754_rem_pio2+0xaa>
   10a98:	4b2e      	ldr	r3, [pc, #184]	; (10b54 <__ieee754_rem_pio2+0x3c4>)
   10a9a:	008a      	lsls	r2, r1, #2
   10a9c:	18d2      	adds	r2, r2, r3
   10a9e:	3a04      	subs	r2, #4
   10aa0:	6813      	ldr	r3, [r2, #0]
   10aa2:	429f      	cmp	r7, r3
   10aa4:	d100      	bne.n	10aa8 <__ieee754_rem_pio2+0x318>
   10aa6:	e6fb      	b.n	108a0 <__ieee754_rem_pio2+0x110>
   10aa8:	1c2a      	adds	r2, r5, #0
   10aaa:	9802      	ldr	r0, [sp, #8]
   10aac:	9903      	ldr	r1, [sp, #12]
   10aae:	1c33      	adds	r3, r6, #0
   10ab0:	f001 ff42 	bl	12938 <____subdf3_from_thumb>
   10ab4:	4642      	mov	r2, r8
   10ab6:	6010      	str	r0, [r2, #0]
   10ab8:	6051      	str	r1, [r2, #4]
   10aba:	e741      	b.n	10940 <__ieee754_rem_pio2+0x1b0>
   10abc:	4a1d      	ldr	r2, [pc, #116]	; (10b34 <__ieee754_rem_pio2+0x3a4>)
   10abe:	4b1e      	ldr	r3, [pc, #120]	; (10b38 <__ieee754_rem_pio2+0x3a8>)
   10ac0:	f001 ff32 	bl	12928 <____adddf3_from_thumb>
   10ac4:	4a1d      	ldr	r2, [pc, #116]	; (10b3c <__ieee754_rem_pio2+0x3ac>)
   10ac6:	4b1e      	ldr	r3, [pc, #120]	; (10b40 <__ieee754_rem_pio2+0x3b0>)
   10ac8:	1c04      	adds	r4, r0, #0
   10aca:	1c0d      	adds	r5, r1, #0
   10acc:	f001 ff2c 	bl	12928 <____adddf3_from_thumb>
   10ad0:	1c02      	adds	r2, r0, #0
   10ad2:	1c0b      	adds	r3, r1, #0
   10ad4:	4641      	mov	r1, r8
   10ad6:	600a      	str	r2, [r1, #0]
   10ad8:	604b      	str	r3, [r1, #4]
   10ada:	1c20      	adds	r0, r4, #0
   10adc:	1c29      	adds	r1, r5, #0
   10ade:	f001 ff2b 	bl	12938 <____subdf3_from_thumb>
   10ae2:	4a16      	ldr	r2, [pc, #88]	; (10b3c <__ieee754_rem_pio2+0x3ac>)
   10ae4:	4b16      	ldr	r3, [pc, #88]	; (10b40 <__ieee754_rem_pio2+0x3b0>)
   10ae6:	e762      	b.n	109ae <__ieee754_rem_pio2+0x21e>
   10ae8:	7fffffff 	.word	0x7fffffff
   10aec:	3fe921fb 	.word	0x3fe921fb
	...
   10af8:	4002d97b 	.word	0x4002d97b
   10afc:	413921fb 	.word	0x413921fb
   10b00:	7fefffff 	.word	0x7fefffff
   10b04:	3ff921fb 	.word	0x3ff921fb
   10b08:	54400000 	.word	0x54400000
   10b0c:	3ff921fb 	.word	0x3ff921fb
   10b10:	3dd0b461 	.word	0x3dd0b461
   10b14:	1a626331 	.word	0x1a626331
   10b18:	3fe45f30 	.word	0x3fe45f30
   10b1c:	6dc9c883 	.word	0x6dc9c883
   10b20:	3fe00000 	.word	0x3fe00000
   10b24:	00000000 	.word	0x00000000
   10b28:	bff921fb 	.word	0xbff921fb
   10b2c:	54400000 	.word	0x54400000
   10b30:	000007ff 	.word	0x000007ff
   10b34:	3dd0b461 	.word	0x3dd0b461
   10b38:	1a600000 	.word	0x1a600000
   10b3c:	3ba3198a 	.word	0x3ba3198a
   10b40:	2e037073 	.word	0x2e037073
   10b44:	fffffbea 	.word	0xfffffbea
   10b48:	41700000 	.word	0x41700000
   10b4c:	00000000 	.word	0x00000000
   10b50:	00012e4c 	.word	0x00012e4c
   10b54:	00012dcc 	.word	0x00012dcc
   10b58:	4b1a      	ldr	r3, [pc, #104]	; (10bc4 <__ieee754_rem_pio2+0x434>)
   10b5a:	4a19      	ldr	r2, [pc, #100]	; (10bc0 <__ieee754_rem_pio2+0x430>)
   10b5c:	9804      	ldr	r0, [sp, #16]
   10b5e:	9905      	ldr	r1, [sp, #20]
   10b60:	f001 fede 	bl	12920 <____muldf3_from_thumb>
   10b64:	1c06      	adds	r6, r0, #0
   10b66:	1c0f      	adds	r7, r1, #0
   10b68:	1c32      	adds	r2, r6, #0
   10b6a:	1c3b      	adds	r3, r7, #0
   10b6c:	9806      	ldr	r0, [sp, #24]
   10b6e:	9907      	ldr	r1, [sp, #28]
   10b70:	f001 fee2 	bl	12938 <____subdf3_from_thumb>
   10b74:	4a14      	ldr	r2, [pc, #80]	; (10bc8 <__ieee754_rem_pio2+0x438>)
   10b76:	4b15      	ldr	r3, [pc, #84]	; (10bcc <__ieee754_rem_pio2+0x43c>)
   10b78:	9002      	str	r0, [sp, #8]
   10b7a:	9103      	str	r1, [sp, #12]
   10b7c:	9804      	ldr	r0, [sp, #16]
   10b7e:	9905      	ldr	r1, [sp, #20]
   10b80:	f001 fece 	bl	12920 <____muldf3_from_thumb>
   10b84:	9a02      	ldr	r2, [sp, #8]
   10b86:	9b03      	ldr	r3, [sp, #12]
   10b88:	1c0d      	adds	r5, r1, #0
   10b8a:	1c04      	adds	r4, r0, #0
   10b8c:	9806      	ldr	r0, [sp, #24]
   10b8e:	9907      	ldr	r1, [sp, #28]
   10b90:	f001 fed2 	bl	12938 <____subdf3_from_thumb>
   10b94:	1c32      	adds	r2, r6, #0
   10b96:	1c3b      	adds	r3, r7, #0
   10b98:	f001 fece 	bl	12938 <____subdf3_from_thumb>
   10b9c:	1c02      	adds	r2, r0, #0
   10b9e:	1c0b      	adds	r3, r1, #0
   10ba0:	1c20      	adds	r0, r4, #0
   10ba2:	1c29      	adds	r1, r5, #0
   10ba4:	f001 fec8 	bl	12938 <____subdf3_from_thumb>
   10ba8:	1c05      	adds	r5, r0, #0
   10baa:	1c0e      	adds	r6, r1, #0
   10bac:	1c33      	adds	r3, r6, #0
   10bae:	9802      	ldr	r0, [sp, #8]
   10bb0:	9903      	ldr	r1, [sp, #12]
   10bb2:	1c2a      	adds	r2, r5, #0
   10bb4:	f001 fec0 	bl	12938 <____subdf3_from_thumb>
   10bb8:	4643      	mov	r3, r8
   10bba:	6018      	str	r0, [r3, #0]
   10bbc:	6059      	str	r1, [r3, #4]
   10bbe:	e6bf      	b.n	10940 <__ieee754_rem_pio2+0x1b0>
   10bc0:	3ba3198a 	.word	0x3ba3198a
   10bc4:	2e000000 	.word	0x2e000000
   10bc8:	397b839a 	.word	0x397b839a
   10bcc:	252049c1 	.word	0x252049c1

00010bd0 <__ieee754_sqrt>:
   10bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bd2:	4657      	mov	r7, sl
   10bd4:	464e      	mov	r6, r9
   10bd6:	4645      	mov	r5, r8
   10bd8:	b4e0      	push	{r5, r6, r7}
   10bda:	2200      	movs	r2, #0
   10bdc:	2300      	movs	r3, #0
   10bde:	b082      	sub	sp, #8
   10be0:	9200      	str	r2, [sp, #0]
   10be2:	9301      	str	r3, [sp, #4]
   10be4:	1c05      	adds	r5, r0, #0
   10be6:	4a6b      	ldr	r2, [pc, #428]	; (10d94 <__ieee754_sqrt+0x1c4>)
   10be8:	1c2b      	adds	r3, r5, #0
   10bea:	1c0e      	adds	r6, r1, #0
   10bec:	4013      	ands	r3, r2
   10bee:	1c07      	adds	r7, r0, #0
   10bf0:	1c01      	adds	r1, r0, #0
   10bf2:	1c30      	adds	r0, r6, #0
   10bf4:	4293      	cmp	r3, r2
   10bf6:	d100      	bne.n	10bfa <__ieee754_sqrt+0x2a>
   10bf8:	e0a1      	b.n	10d3e <__ieee754_sqrt+0x16e>
   10bfa:	2d00      	cmp	r5, #0
   10bfc:	dc00      	bgt.n	10c00 <__ieee754_sqrt+0x30>
   10bfe:	e0ad      	b.n	10d5c <__ieee754_sqrt+0x18c>
   10c00:	150a      	asrs	r2, r1, #20
   10c02:	2a00      	cmp	r2, #0
   10c04:	d118      	bne.n	10c38 <__ieee754_sqrt+0x68>
   10c06:	2f00      	cmp	r7, #0
   10c08:	d104      	bne.n	10c14 <__ieee754_sqrt+0x44>
   10c0a:	0ac1      	lsrs	r1, r0, #11
   10c0c:	3a15      	subs	r2, #21
   10c0e:	0540      	lsls	r0, r0, #21
   10c10:	2900      	cmp	r1, #0
   10c12:	d0fa      	beq.n	10c0a <__ieee754_sqrt+0x3a>
   10c14:	2380      	movs	r3, #128	; 0x80
   10c16:	035b      	lsls	r3, r3, #13
   10c18:	4219      	tst	r1, r3
   10c1a:	d000      	beq.n	10c1e <__ieee754_sqrt+0x4e>
   10c1c:	e0b6      	b.n	10d8c <__ieee754_sqrt+0x1bc>
   10c1e:	2400      	movs	r4, #0
   10c20:	0049      	lsls	r1, r1, #1
   10c22:	3401      	adds	r4, #1
   10c24:	4219      	tst	r1, r3
   10c26:	d0fb      	beq.n	10c20 <__ieee754_sqrt+0x50>
   10c28:	2320      	movs	r3, #32
   10c2a:	1b1d      	subs	r5, r3, r4
   10c2c:	1b13      	subs	r3, r2, r4
   10c2e:	1c5a      	adds	r2, r3, #1
   10c30:	1c03      	adds	r3, r0, #0
   10c32:	40eb      	lsrs	r3, r5
   10c34:	4319      	orrs	r1, r3
   10c36:	40a0      	lsls	r0, r4
   10c38:	4b57      	ldr	r3, [pc, #348]	; (10d98 <__ieee754_sqrt+0x1c8>)
   10c3a:	189b      	adds	r3, r3, r2
   10c3c:	4699      	mov	r9, r3
   10c3e:	4b57      	ldr	r3, [pc, #348]	; (10d9c <__ieee754_sqrt+0x1cc>)
   10c40:	1c0a      	adds	r2, r1, #0
   10c42:	401a      	ands	r2, r3
   10c44:	2380      	movs	r3, #128	; 0x80
   10c46:	035b      	lsls	r3, r3, #13
   10c48:	464c      	mov	r4, r9
   10c4a:	431a      	orrs	r2, r3
   10c4c:	07e4      	lsls	r4, r4, #31
   10c4e:	d468      	bmi.n	10d22 <__ieee754_sqrt+0x152>
   10c50:	0fc3      	lsrs	r3, r0, #31
   10c52:	189b      	adds	r3, r3, r2
   10c54:	2180      	movs	r1, #128	; 0x80
   10c56:	2500      	movs	r5, #0
   10c58:	18d2      	adds	r2, r2, r3
   10c5a:	0040      	lsls	r0, r0, #1
   10c5c:	0389      	lsls	r1, r1, #14
   10c5e:	46aa      	mov	sl, r5
   10c60:	2600      	movs	r6, #0
   10c62:	194b      	adds	r3, r1, r5
   10c64:	4293      	cmp	r3, r2
   10c66:	dc02      	bgt.n	10c6e <__ieee754_sqrt+0x9e>
   10c68:	18cd      	adds	r5, r1, r3
   10c6a:	1ad2      	subs	r2, r2, r3
   10c6c:	448a      	add	sl, r1
   10c6e:	0fc3      	lsrs	r3, r0, #31
   10c70:	2480      	movs	r4, #128	; 0x80
   10c72:	189b      	adds	r3, r3, r2
   10c74:	3601      	adds	r6, #1
   10c76:	0624      	lsls	r4, r4, #24
   10c78:	18d2      	adds	r2, r2, r3
   10c7a:	0040      	lsls	r0, r0, #1
   10c7c:	0849      	lsrs	r1, r1, #1
   10c7e:	2e16      	cmp	r6, #22
   10c80:	d1ef      	bne.n	10c62 <__ieee754_sqrt+0x92>
   10c82:	2700      	movs	r7, #0
   10c84:	46b8      	mov	r8, r7
   10c86:	2600      	movs	r6, #0
   10c88:	46a4      	mov	ip, r4
   10c8a:	e009      	b.n	10ca0 <__ieee754_sqrt+0xd0>
   10c8c:	42aa      	cmp	r2, r5
   10c8e:	d044      	beq.n	10d1a <__ieee754_sqrt+0x14a>
   10c90:	0fc3      	lsrs	r3, r0, #31
   10c92:	189b      	adds	r3, r3, r2
   10c94:	3601      	adds	r6, #1
   10c96:	18d2      	adds	r2, r2, r3
   10c98:	0040      	lsls	r0, r0, #1
   10c9a:	0864      	lsrs	r4, r4, #1
   10c9c:	2e20      	cmp	r6, #32
   10c9e:	d017      	beq.n	10cd0 <__ieee754_sqrt+0x100>
   10ca0:	19e1      	adds	r1, r4, r7
   10ca2:	42aa      	cmp	r2, r5
   10ca4:	ddf2      	ble.n	10c8c <__ieee754_sqrt+0xbc>
   10ca6:	4663      	mov	r3, ip
   10ca8:	400b      	ands	r3, r1
   10caa:	190f      	adds	r7, r1, r4
   10cac:	4563      	cmp	r3, ip
   10cae:	d02f      	beq.n	10d10 <__ieee754_sqrt+0x140>
   10cb0:	1c2b      	adds	r3, r5, #0
   10cb2:	1b52      	subs	r2, r2, r5
   10cb4:	4281      	cmp	r1, r0
   10cb6:	d900      	bls.n	10cba <__ieee754_sqrt+0xea>
   10cb8:	3a01      	subs	r2, #1
   10cba:	1a40      	subs	r0, r0, r1
   10cbc:	1c1d      	adds	r5, r3, #0
   10cbe:	0fc3      	lsrs	r3, r0, #31
   10cc0:	189b      	adds	r3, r3, r2
   10cc2:	3601      	adds	r6, #1
   10cc4:	44a0      	add	r8, r4
   10cc6:	18d2      	adds	r2, r2, r3
   10cc8:	0040      	lsls	r0, r0, #1
   10cca:	0864      	lsrs	r4, r4, #1
   10ccc:	2e20      	cmp	r6, #32
   10cce:	d1e7      	bne.n	10ca0 <__ieee754_sqrt+0xd0>
   10cd0:	4302      	orrs	r2, r0
   10cd2:	d12b      	bne.n	10d2c <__ieee754_sqrt+0x15c>
   10cd4:	4644      	mov	r4, r8
   10cd6:	0861      	lsrs	r1, r4, #1
   10cd8:	4650      	mov	r0, sl
   10cda:	07c0      	lsls	r0, r0, #31
   10cdc:	d502      	bpl.n	10ce4 <__ieee754_sqrt+0x114>
   10cde:	2380      	movs	r3, #128	; 0x80
   10ce0:	061b      	lsls	r3, r3, #24
   10ce2:	4319      	orrs	r1, r3
   10ce4:	4653      	mov	r3, sl
   10ce6:	4c2e      	ldr	r4, [pc, #184]	; (10da0 <__ieee754_sqrt+0x1d0>)
   10ce8:	4648      	mov	r0, r9
   10cea:	105a      	asrs	r2, r3, #1
   10cec:	1043      	asrs	r3, r0, #1
   10cee:	1912      	adds	r2, r2, r4
   10cf0:	051b      	lsls	r3, r3, #20
   10cf2:	18d3      	adds	r3, r2, r3
   10cf4:	9300      	str	r3, [sp, #0]
   10cf6:	9101      	str	r1, [sp, #4]
   10cf8:	9d00      	ldr	r5, [sp, #0]
   10cfa:	9e01      	ldr	r6, [sp, #4]
   10cfc:	1c28      	adds	r0, r5, #0
   10cfe:	1c31      	adds	r1, r6, #0
   10d00:	b002      	add	sp, #8
   10d02:	bc1c      	pop	{r2, r3, r4}
   10d04:	4690      	mov	r8, r2
   10d06:	4699      	mov	r9, r3
   10d08:	46a2      	mov	sl, r4
   10d0a:	bcf0      	pop	{r4, r5, r6, r7}
   10d0c:	bc04      	pop	{r2}
   10d0e:	4710      	bx	r2
   10d10:	4663      	mov	r3, ip
   10d12:	421f      	tst	r7, r3
   10d14:	d1cc      	bne.n	10cb0 <__ieee754_sqrt+0xe0>
   10d16:	1c6b      	adds	r3, r5, #1
   10d18:	e7cb      	b.n	10cb2 <__ieee754_sqrt+0xe2>
   10d1a:	4281      	cmp	r1, r0
   10d1c:	d9c3      	bls.n	10ca6 <__ieee754_sqrt+0xd6>
   10d1e:	1c15      	adds	r5, r2, #0
   10d20:	e7b6      	b.n	10c90 <__ieee754_sqrt+0xc0>
   10d22:	0fc3      	lsrs	r3, r0, #31
   10d24:	189b      	adds	r3, r3, r2
   10d26:	18d2      	adds	r2, r2, r3
   10d28:	0040      	lsls	r0, r0, #1
   10d2a:	e791      	b.n	10c50 <__ieee754_sqrt+0x80>
   10d2c:	4640      	mov	r0, r8
   10d2e:	3001      	adds	r0, #1
   10d30:	d028      	beq.n	10d84 <__ieee754_sqrt+0x1b4>
   10d32:	2301      	movs	r3, #1
   10d34:	4644      	mov	r4, r8
   10d36:	4023      	ands	r3, r4
   10d38:	4443      	add	r3, r8
   10d3a:	0859      	lsrs	r1, r3, #1
   10d3c:	e7cc      	b.n	10cd8 <__ieee754_sqrt+0x108>
   10d3e:	1c2a      	adds	r2, r5, #0
   10d40:	1c33      	adds	r3, r6, #0
   10d42:	1c28      	adds	r0, r5, #0
   10d44:	1c31      	adds	r1, r6, #0
   10d46:	f001 fdeb 	bl	12920 <____muldf3_from_thumb>
   10d4a:	1c02      	adds	r2, r0, #0
   10d4c:	1c0b      	adds	r3, r1, #0
   10d4e:	1c28      	adds	r0, r5, #0
   10d50:	1c31      	adds	r1, r6, #0
   10d52:	f001 fde9 	bl	12928 <____adddf3_from_thumb>
   10d56:	1c05      	adds	r5, r0, #0
   10d58:	1c0e      	adds	r6, r1, #0
   10d5a:	e7cf      	b.n	10cfc <__ieee754_sqrt+0x12c>
   10d5c:	4b11      	ldr	r3, [pc, #68]	; (10da4 <__ieee754_sqrt+0x1d4>)
   10d5e:	402b      	ands	r3, r5
   10d60:	4333      	orrs	r3, r6
   10d62:	d0cb      	beq.n	10cfc <__ieee754_sqrt+0x12c>
   10d64:	2d00      	cmp	r5, #0
   10d66:	d100      	bne.n	10d6a <__ieee754_sqrt+0x19a>
   10d68:	e74a      	b.n	10c00 <__ieee754_sqrt+0x30>
   10d6a:	1c2a      	adds	r2, r5, #0
   10d6c:	1c33      	adds	r3, r6, #0
   10d6e:	1c28      	adds	r0, r5, #0
   10d70:	1c31      	adds	r1, r6, #0
   10d72:	f001 fde1 	bl	12938 <____subdf3_from_thumb>
   10d76:	1c02      	adds	r2, r0, #0
   10d78:	1c0b      	adds	r3, r1, #0
   10d7a:	f001 fdb9 	bl	128f0 <____divdf3_from_thumb>
   10d7e:	1c05      	adds	r5, r0, #0
   10d80:	1c0e      	adds	r6, r1, #0
   10d82:	e7bb      	b.n	10cfc <__ieee754_sqrt+0x12c>
   10d84:	2201      	movs	r2, #1
   10d86:	4492      	add	sl, r2
   10d88:	2100      	movs	r1, #0
   10d8a:	e7a5      	b.n	10cd8 <__ieee754_sqrt+0x108>
   10d8c:	2400      	movs	r4, #0
   10d8e:	2520      	movs	r5, #32
   10d90:	e74c      	b.n	10c2c <__ieee754_sqrt+0x5c>
   10d92:	46c0      	nop			; (mov r8, r8)
   10d94:	7ff00000 	.word	0x7ff00000
   10d98:	fffffc01 	.word	0xfffffc01
   10d9c:	000fffff 	.word	0x000fffff
   10da0:	3fe00000 	.word	0x3fe00000
   10da4:	7fffffff 	.word	0x7fffffff

00010da8 <__kernel_cos>:
   10da8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10daa:	4647      	mov	r7, r8
   10dac:	b480      	push	{r7}
   10dae:	b08e      	sub	sp, #56	; 0x38
   10db0:	9204      	str	r2, [sp, #16]
   10db2:	9305      	str	r3, [sp, #20]
   10db4:	4a86      	ldr	r2, [pc, #536]	; (10fd0 <__kernel_cos+0x228>)
   10db6:	4b87      	ldr	r3, [pc, #540]	; (10fd4 <__kernel_cos+0x22c>)
   10db8:	4002      	ands	r2, r0
   10dba:	2400      	movs	r4, #0
   10dbc:	2500      	movs	r5, #0
   10dbe:	4690      	mov	r8, r2
   10dc0:	9406      	str	r4, [sp, #24]
   10dc2:	9507      	str	r5, [sp, #28]
   10dc4:	1c06      	adds	r6, r0, #0
   10dc6:	1c0f      	adds	r7, r1, #0
   10dc8:	4598      	cmp	r8, r3
   10dca:	dd00      	ble.n	10dce <__kernel_cos+0x26>
   10dcc:	e072      	b.n	10eb4 <__kernel_cos+0x10c>
   10dce:	f001 fdb7 	bl	12940 <____fixdfsi_from_thumb>
   10dd2:	2800      	cmp	r0, #0
   10dd4:	d100      	bne.n	10dd8 <__kernel_cos+0x30>
   10dd6:	e0e7      	b.n	10fa8 <__kernel_cos+0x200>
   10dd8:	1c32      	adds	r2, r6, #0
   10dda:	1c3b      	adds	r3, r7, #0
   10ddc:	1c30      	adds	r0, r6, #0
   10dde:	1c39      	adds	r1, r7, #0
   10de0:	f001 fd9e 	bl	12920 <____muldf3_from_thumb>
   10de4:	4a7c      	ldr	r2, [pc, #496]	; (10fd8 <__kernel_cos+0x230>)
   10de6:	4b7d      	ldr	r3, [pc, #500]	; (10fdc <__kernel_cos+0x234>)
   10de8:	1c04      	adds	r4, r0, #0
   10dea:	1c0d      	adds	r5, r1, #0
   10dec:	f001 fd98 	bl	12920 <____muldf3_from_thumb>
   10df0:	4a7b      	ldr	r2, [pc, #492]	; (10fe0 <__kernel_cos+0x238>)
   10df2:	4b7c      	ldr	r3, [pc, #496]	; (10fe4 <__kernel_cos+0x23c>)
   10df4:	f001 fd98 	bl	12928 <____adddf3_from_thumb>
   10df8:	1c02      	adds	r2, r0, #0
   10dfa:	1c0b      	adds	r3, r1, #0
   10dfc:	1c20      	adds	r0, r4, #0
   10dfe:	1c29      	adds	r1, r5, #0
   10e00:	f001 fd8e 	bl	12920 <____muldf3_from_thumb>
   10e04:	4a78      	ldr	r2, [pc, #480]	; (10fe8 <__kernel_cos+0x240>)
   10e06:	4b79      	ldr	r3, [pc, #484]	; (10fec <__kernel_cos+0x244>)
   10e08:	f001 fd96 	bl	12938 <____subdf3_from_thumb>
   10e0c:	1c02      	adds	r2, r0, #0
   10e0e:	1c0b      	adds	r3, r1, #0
   10e10:	1c20      	adds	r0, r4, #0
   10e12:	1c29      	adds	r1, r5, #0
   10e14:	f001 fd84 	bl	12920 <____muldf3_from_thumb>
   10e18:	4a75      	ldr	r2, [pc, #468]	; (10ff0 <__kernel_cos+0x248>)
   10e1a:	4b76      	ldr	r3, [pc, #472]	; (10ff4 <__kernel_cos+0x24c>)
   10e1c:	f001 fd84 	bl	12928 <____adddf3_from_thumb>
   10e20:	1c02      	adds	r2, r0, #0
   10e22:	1c0b      	adds	r3, r1, #0
   10e24:	1c20      	adds	r0, r4, #0
   10e26:	1c29      	adds	r1, r5, #0
   10e28:	f001 fd7a 	bl	12920 <____muldf3_from_thumb>
   10e2c:	4a72      	ldr	r2, [pc, #456]	; (10ff8 <__kernel_cos+0x250>)
   10e2e:	4b73      	ldr	r3, [pc, #460]	; (10ffc <__kernel_cos+0x254>)
   10e30:	f001 fd82 	bl	12938 <____subdf3_from_thumb>
   10e34:	1c02      	adds	r2, r0, #0
   10e36:	1c0b      	adds	r3, r1, #0
   10e38:	1c20      	adds	r0, r4, #0
   10e3a:	1c29      	adds	r1, r5, #0
   10e3c:	f001 fd70 	bl	12920 <____muldf3_from_thumb>
   10e40:	4a6f      	ldr	r2, [pc, #444]	; (11000 <__kernel_cos+0x258>)
   10e42:	4b70      	ldr	r3, [pc, #448]	; (11004 <__kernel_cos+0x25c>)
   10e44:	f001 fd70 	bl	12928 <____adddf3_from_thumb>
   10e48:	1c02      	adds	r2, r0, #0
   10e4a:	1c0b      	adds	r3, r1, #0
   10e4c:	1c20      	adds	r0, r4, #0
   10e4e:	1c29      	adds	r1, r5, #0
   10e50:	f001 fd66 	bl	12920 <____muldf3_from_thumb>
   10e54:	9008      	str	r0, [sp, #32]
   10e56:	9109      	str	r1, [sp, #36]	; 0x24
   10e58:	1c20      	adds	r0, r4, #0
   10e5a:	1c29      	adds	r1, r5, #0
   10e5c:	4a6a      	ldr	r2, [pc, #424]	; (11008 <__kernel_cos+0x260>)
   10e5e:	4b6b      	ldr	r3, [pc, #428]	; (1100c <__kernel_cos+0x264>)
   10e60:	f001 fd5e 	bl	12920 <____muldf3_from_thumb>
   10e64:	9a08      	ldr	r2, [sp, #32]
   10e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10e68:	9002      	str	r0, [sp, #8]
   10e6a:	9103      	str	r1, [sp, #12]
   10e6c:	1c20      	adds	r0, r4, #0
   10e6e:	1c29      	adds	r1, r5, #0
   10e70:	f001 fd56 	bl	12920 <____muldf3_from_thumb>
   10e74:	9a04      	ldr	r2, [sp, #16]
   10e76:	9b05      	ldr	r3, [sp, #20]
   10e78:	1c04      	adds	r4, r0, #0
   10e7a:	1c0d      	adds	r5, r1, #0
   10e7c:	1c30      	adds	r0, r6, #0
   10e7e:	1c39      	adds	r1, r7, #0
   10e80:	f001 fd4e 	bl	12920 <____muldf3_from_thumb>
   10e84:	1c02      	adds	r2, r0, #0
   10e86:	1c0b      	adds	r3, r1, #0
   10e88:	1c20      	adds	r0, r4, #0
   10e8a:	1c29      	adds	r1, r5, #0
   10e8c:	f001 fd54 	bl	12938 <____subdf3_from_thumb>
   10e90:	1c02      	adds	r2, r0, #0
   10e92:	1c0b      	adds	r3, r1, #0
   10e94:	9802      	ldr	r0, [sp, #8]
   10e96:	9903      	ldr	r1, [sp, #12]
   10e98:	f001 fd4e 	bl	12938 <____subdf3_from_thumb>
   10e9c:	1c02      	adds	r2, r0, #0
   10e9e:	1c0b      	adds	r3, r1, #0
   10ea0:	485b      	ldr	r0, [pc, #364]	; (11010 <__kernel_cos+0x268>)
   10ea2:	495c      	ldr	r1, [pc, #368]	; (11014 <__kernel_cos+0x26c>)
   10ea4:	f001 fd48 	bl	12938 <____subdf3_from_thumb>
   10ea8:	b00e      	add	sp, #56	; 0x38
   10eaa:	bc04      	pop	{r2}
   10eac:	4690      	mov	r8, r2
   10eae:	bcf0      	pop	{r4, r5, r6, r7}
   10eb0:	bc04      	pop	{r2}
   10eb2:	4710      	bx	r2
   10eb4:	1c32      	adds	r2, r6, #0
   10eb6:	1c3b      	adds	r3, r7, #0
   10eb8:	f001 fd32 	bl	12920 <____muldf3_from_thumb>
   10ebc:	4a46      	ldr	r2, [pc, #280]	; (10fd8 <__kernel_cos+0x230>)
   10ebe:	4b47      	ldr	r3, [pc, #284]	; (10fdc <__kernel_cos+0x234>)
   10ec0:	1c04      	adds	r4, r0, #0
   10ec2:	1c0d      	adds	r5, r1, #0
   10ec4:	f001 fd2c 	bl	12920 <____muldf3_from_thumb>
   10ec8:	4a45      	ldr	r2, [pc, #276]	; (10fe0 <__kernel_cos+0x238>)
   10eca:	4b46      	ldr	r3, [pc, #280]	; (10fe4 <__kernel_cos+0x23c>)
   10ecc:	f001 fd2c 	bl	12928 <____adddf3_from_thumb>
   10ed0:	1c02      	adds	r2, r0, #0
   10ed2:	1c0b      	adds	r3, r1, #0
   10ed4:	1c20      	adds	r0, r4, #0
   10ed6:	1c29      	adds	r1, r5, #0
   10ed8:	f001 fd22 	bl	12920 <____muldf3_from_thumb>
   10edc:	4a42      	ldr	r2, [pc, #264]	; (10fe8 <__kernel_cos+0x240>)
   10ede:	4b43      	ldr	r3, [pc, #268]	; (10fec <__kernel_cos+0x244>)
   10ee0:	f001 fd2a 	bl	12938 <____subdf3_from_thumb>
   10ee4:	1c02      	adds	r2, r0, #0
   10ee6:	1c0b      	adds	r3, r1, #0
   10ee8:	1c20      	adds	r0, r4, #0
   10eea:	1c29      	adds	r1, r5, #0
   10eec:	f001 fd18 	bl	12920 <____muldf3_from_thumb>
   10ef0:	4a3f      	ldr	r2, [pc, #252]	; (10ff0 <__kernel_cos+0x248>)
   10ef2:	4b40      	ldr	r3, [pc, #256]	; (10ff4 <__kernel_cos+0x24c>)
   10ef4:	f001 fd18 	bl	12928 <____adddf3_from_thumb>
   10ef8:	1c02      	adds	r2, r0, #0
   10efa:	1c0b      	adds	r3, r1, #0
   10efc:	1c20      	adds	r0, r4, #0
   10efe:	1c29      	adds	r1, r5, #0
   10f00:	f001 fd0e 	bl	12920 <____muldf3_from_thumb>
   10f04:	4a3c      	ldr	r2, [pc, #240]	; (10ff8 <__kernel_cos+0x250>)
   10f06:	4b3d      	ldr	r3, [pc, #244]	; (10ffc <__kernel_cos+0x254>)
   10f08:	f001 fd16 	bl	12938 <____subdf3_from_thumb>
   10f0c:	1c02      	adds	r2, r0, #0
   10f0e:	1c0b      	adds	r3, r1, #0
   10f10:	1c20      	adds	r0, r4, #0
   10f12:	1c29      	adds	r1, r5, #0
   10f14:	f001 fd04 	bl	12920 <____muldf3_from_thumb>
   10f18:	4a39      	ldr	r2, [pc, #228]	; (11000 <__kernel_cos+0x258>)
   10f1a:	4b3a      	ldr	r3, [pc, #232]	; (11004 <__kernel_cos+0x25c>)
   10f1c:	f001 fd04 	bl	12928 <____adddf3_from_thumb>
   10f20:	1c0b      	adds	r3, r1, #0
   10f22:	1c02      	adds	r2, r0, #0
   10f24:	1c29      	adds	r1, r5, #0
   10f26:	1c20      	adds	r0, r4, #0
   10f28:	f001 fcfa 	bl	12920 <____muldf3_from_thumb>
   10f2c:	4b3a      	ldr	r3, [pc, #232]	; (11018 <__kernel_cos+0x270>)
   10f2e:	9008      	str	r0, [sp, #32]
   10f30:	9109      	str	r1, [sp, #36]	; 0x24
   10f32:	4598      	cmp	r8, r3
   10f34:	dc00      	bgt.n	10f38 <__kernel_cos+0x190>
   10f36:	e78f      	b.n	10e58 <__kernel_cos+0xb0>
   10f38:	4b38      	ldr	r3, [pc, #224]	; (1101c <__kernel_cos+0x274>)
   10f3a:	4598      	cmp	r8, r3
   10f3c:	dd37      	ble.n	10fae <__kernel_cos+0x206>
   10f3e:	4a38      	ldr	r2, [pc, #224]	; (11020 <__kernel_cos+0x278>)
   10f40:	4b38      	ldr	r3, [pc, #224]	; (11024 <__kernel_cos+0x27c>)
   10f42:	920a      	str	r2, [sp, #40]	; 0x28
   10f44:	930b      	str	r3, [sp, #44]	; 0x2c
   10f46:	4a38      	ldr	r2, [pc, #224]	; (11028 <__kernel_cos+0x280>)
   10f48:	4b38      	ldr	r3, [pc, #224]	; (1102c <__kernel_cos+0x284>)
   10f4a:	920c      	str	r2, [sp, #48]	; 0x30
   10f4c:	930d      	str	r3, [sp, #52]	; 0x34
   10f4e:	1c20      	adds	r0, r4, #0
   10f50:	1c29      	adds	r1, r5, #0
   10f52:	4a2d      	ldr	r2, [pc, #180]	; (11008 <__kernel_cos+0x260>)
   10f54:	4b2d      	ldr	r3, [pc, #180]	; (1100c <__kernel_cos+0x264>)
   10f56:	f001 fce3 	bl	12920 <____muldf3_from_thumb>
   10f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10f5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10f5e:	f001 fceb 	bl	12938 <____subdf3_from_thumb>
   10f62:	9a08      	ldr	r2, [sp, #32]
   10f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f66:	9000      	str	r0, [sp, #0]
   10f68:	9101      	str	r1, [sp, #4]
   10f6a:	1c20      	adds	r0, r4, #0
   10f6c:	1c29      	adds	r1, r5, #0
   10f6e:	f001 fcd7 	bl	12920 <____muldf3_from_thumb>
   10f72:	9a04      	ldr	r2, [sp, #16]
   10f74:	9b05      	ldr	r3, [sp, #20]
   10f76:	1c04      	adds	r4, r0, #0
   10f78:	1c0d      	adds	r5, r1, #0
   10f7a:	1c30      	adds	r0, r6, #0
   10f7c:	1c39      	adds	r1, r7, #0
   10f7e:	f001 fccf 	bl	12920 <____muldf3_from_thumb>
   10f82:	1c02      	adds	r2, r0, #0
   10f84:	1c0b      	adds	r3, r1, #0
   10f86:	1c20      	adds	r0, r4, #0
   10f88:	1c29      	adds	r1, r5, #0
   10f8a:	f001 fcd5 	bl	12938 <____subdf3_from_thumb>
   10f8e:	1c02      	adds	r2, r0, #0
   10f90:	1c0b      	adds	r3, r1, #0
   10f92:	9800      	ldr	r0, [sp, #0]
   10f94:	9901      	ldr	r1, [sp, #4]
   10f96:	f001 fccf 	bl	12938 <____subdf3_from_thumb>
   10f9a:	1c02      	adds	r2, r0, #0
   10f9c:	1c0b      	adds	r3, r1, #0
   10f9e:	980c      	ldr	r0, [sp, #48]	; 0x30
   10fa0:	990d      	ldr	r1, [sp, #52]	; 0x34
   10fa2:	f001 fcc9 	bl	12938 <____subdf3_from_thumb>
   10fa6:	e77f      	b.n	10ea8 <__kernel_cos+0x100>
   10fa8:	4819      	ldr	r0, [pc, #100]	; (11010 <__kernel_cos+0x268>)
   10faa:	491a      	ldr	r1, [pc, #104]	; (11014 <__kernel_cos+0x26c>)
   10fac:	e77c      	b.n	10ea8 <__kernel_cos+0x100>
   10fae:	4b20      	ldr	r3, [pc, #128]	; (11030 <__kernel_cos+0x288>)
   10fb0:	2200      	movs	r2, #0
   10fb2:	4443      	add	r3, r8
   10fb4:	9306      	str	r3, [sp, #24]
   10fb6:	9207      	str	r2, [sp, #28]
   10fb8:	9a06      	ldr	r2, [sp, #24]
   10fba:	9b07      	ldr	r3, [sp, #28]
   10fbc:	4814      	ldr	r0, [pc, #80]	; (11010 <__kernel_cos+0x268>)
   10fbe:	4915      	ldr	r1, [pc, #84]	; (11014 <__kernel_cos+0x26c>)
   10fc0:	920a      	str	r2, [sp, #40]	; 0x28
   10fc2:	930b      	str	r3, [sp, #44]	; 0x2c
   10fc4:	f001 fcb8 	bl	12938 <____subdf3_from_thumb>
   10fc8:	900c      	str	r0, [sp, #48]	; 0x30
   10fca:	910d      	str	r1, [sp, #52]	; 0x34
   10fcc:	e7bf      	b.n	10f4e <__kernel_cos+0x1a6>
   10fce:	46c0      	nop			; (mov r8, r8)
   10fd0:	7fffffff 	.word	0x7fffffff
   10fd4:	3e3fffff 	.word	0x3e3fffff
   10fd8:	bda8fae9 	.word	0xbda8fae9
   10fdc:	be8838d4 	.word	0xbe8838d4
   10fe0:	3e21ee9e 	.word	0x3e21ee9e
   10fe4:	bdb4b1c4 	.word	0xbdb4b1c4
   10fe8:	3e927e4f 	.word	0x3e927e4f
   10fec:	809c52ad 	.word	0x809c52ad
   10ff0:	3efa01a0 	.word	0x3efa01a0
   10ff4:	19cb1590 	.word	0x19cb1590
   10ff8:	3f56c16c 	.word	0x3f56c16c
   10ffc:	16c15177 	.word	0x16c15177
   11000:	3fa55555 	.word	0x3fa55555
   11004:	5555554c 	.word	0x5555554c
   11008:	3fe00000 	.word	0x3fe00000
   1100c:	00000000 	.word	0x00000000
   11010:	3ff00000 	.word	0x3ff00000
   11014:	00000000 	.word	0x00000000
   11018:	3fd33332 	.word	0x3fd33332
   1101c:	3fe90000 	.word	0x3fe90000
   11020:	3fd20000 	.word	0x3fd20000
   11024:	00000000 	.word	0x00000000
   11028:	3fe70000 	.word	0x3fe70000
   1102c:	00000000 	.word	0x00000000
   11030:	ffe00000 	.word	0xffe00000

00011034 <__kernel_rem_pio2>:
   11034:	b5f0      	push	{r4, r5, r6, r7, lr}
   11036:	465f      	mov	r7, fp
   11038:	4656      	mov	r6, sl
   1103a:	464d      	mov	r5, r9
   1103c:	4644      	mov	r4, r8
   1103e:	b4f0      	push	{r4, r5, r6, r7}
   11040:	4cd7      	ldr	r4, [pc, #860]	; (113a0 <__kernel_rem_pio2+0x36c>)
   11042:	44a5      	add	sp, r4
   11044:	9303      	str	r3, [sp, #12]
   11046:	9005      	str	r0, [sp, #20]
   11048:	98a6      	ldr	r0, [sp, #664]	; 0x298
   1104a:	9104      	str	r1, [sp, #16]
   1104c:	4bd5      	ldr	r3, [pc, #852]	; (113a4 <__kernel_rem_pio2+0x370>)
   1104e:	9903      	ldr	r1, [sp, #12]
   11050:	1c14      	adds	r4, r2, #0
   11052:	0082      	lsls	r2, r0, #2
   11054:	58d2      	ldr	r2, [r2, r3]
   11056:	3901      	subs	r1, #1
   11058:	9106      	str	r1, [sp, #24]
   1105a:	1ee0      	subs	r0, r4, #3
   1105c:	2118      	movs	r1, #24
   1105e:	9207      	str	r2, [sp, #28]
   11060:	f7fb f982 	bl	c368 <__aeabi_idiv>
   11064:	9010      	str	r0, [sp, #64]	; 0x40
   11066:	2800      	cmp	r0, #0
   11068:	da00      	bge.n	1106c <__kernel_rem_pio2+0x38>
   1106a:	e392      	b.n	11792 <__kernel_rem_pio2+0x75e>
   1106c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1106e:	06eb      	lsls	r3, r5, #27
   11070:	1b5b      	subs	r3, r3, r5
   11072:	009b      	lsls	r3, r3, #2
   11074:	195b      	adds	r3, r3, r5
   11076:	00db      	lsls	r3, r3, #3
   11078:	18e3      	adds	r3, r4, r3
   1107a:	9e07      	ldr	r6, [sp, #28]
   1107c:	9806      	ldr	r0, [sp, #24]
   1107e:	3b18      	subs	r3, #24
   11080:	9309      	str	r3, [sp, #36]	; 0x24
   11082:	1836      	adds	r6, r6, r0
   11084:	46b0      	mov	r8, r6
   11086:	d41a      	bmi.n	110be <__kernel_rem_pio2+0x8a>
   11088:	1a2d      	subs	r5, r5, r0
   1108a:	99a7      	ldr	r1, [sp, #668]	; 0x29c
   1108c:	00ab      	lsls	r3, r5, #2
   1108e:	18cc      	adds	r4, r1, r3
   11090:	2700      	movs	r7, #0
   11092:	ae61      	add	r6, sp, #388	; 0x184
   11094:	e00a      	b.n	110ac <__kernel_rem_pio2+0x78>
   11096:	6820      	ldr	r0, [r4, #0]
   11098:	f001 fc1e 	bl	128d8 <____floatsidf_from_thumb>
   1109c:	3404      	adds	r4, #4
   1109e:	6030      	str	r0, [r6, #0]
   110a0:	6071      	str	r1, [r6, #4]
   110a2:	4547      	cmp	r7, r8
   110a4:	d00b      	beq.n	110be <__kernel_rem_pio2+0x8a>
   110a6:	3501      	adds	r5, #1
   110a8:	3701      	adds	r7, #1
   110aa:	3608      	adds	r6, #8
   110ac:	2d00      	cmp	r5, #0
   110ae:	daf2      	bge.n	11096 <__kernel_rem_pio2+0x62>
   110b0:	48bd      	ldr	r0, [pc, #756]	; (113a8 <__kernel_rem_pio2+0x374>)
   110b2:	49be      	ldr	r1, [pc, #760]	; (113ac <__kernel_rem_pio2+0x378>)
   110b4:	3404      	adds	r4, #4
   110b6:	6030      	str	r0, [r6, #0]
   110b8:	6071      	str	r1, [r6, #4]
   110ba:	4547      	cmp	r7, r8
   110bc:	d1f3      	bne.n	110a6 <__kernel_rem_pio2+0x72>
   110be:	9a07      	ldr	r2, [sp, #28]
   110c0:	2a00      	cmp	r2, #0
   110c2:	db32      	blt.n	1112a <__kernel_rem_pio2+0xf6>
   110c4:	9d03      	ldr	r5, [sp, #12]
   110c6:	9b06      	ldr	r3, [sp, #24]
   110c8:	ac11      	add	r4, sp, #68	; 0x44
   110ca:	1952      	adds	r2, r2, r5
   110cc:	469a      	mov	sl, r3
   110ce:	46a3      	mov	fp, r4
   110d0:	4691      	mov	r9, r2
   110d2:	9906      	ldr	r1, [sp, #24]
   110d4:	2900      	cmp	r1, #0
   110d6:	da00      	bge.n	110da <__kernel_rem_pio2+0xa6>
   110d8:	e1d4      	b.n	11484 <__kernel_rem_pio2+0x450>
   110da:	9a05      	ldr	r2, [sp, #20]
   110dc:	4653      	mov	r3, sl
   110de:	4690      	mov	r8, r2
   110e0:	4cb1      	ldr	r4, [pc, #708]	; (113a8 <__kernel_rem_pio2+0x374>)
   110e2:	4db2      	ldr	r5, [pc, #712]	; (113ac <__kernel_rem_pio2+0x378>)
   110e4:	00da      	lsls	r2, r3, #3
   110e6:	ab61      	add	r3, sp, #388	; 0x184
   110e8:	189f      	adds	r7, r3, r2
   110ea:	2600      	movs	r6, #0
   110ec:	4642      	mov	r2, r8
   110ee:	3208      	adds	r2, #8
   110f0:	4690      	mov	r8, r2
   110f2:	3a08      	subs	r2, #8
   110f4:	ca03      	ldmia	r2!, {r0, r1}
   110f6:	683a      	ldr	r2, [r7, #0]
   110f8:	687b      	ldr	r3, [r7, #4]
   110fa:	f001 fc11 	bl	12920 <____muldf3_from_thumb>
   110fe:	1c0b      	adds	r3, r1, #0
   11100:	1c02      	adds	r2, r0, #0
   11102:	1c29      	adds	r1, r5, #0
   11104:	1c20      	adds	r0, r4, #0
   11106:	f001 fc0f 	bl	12928 <____adddf3_from_thumb>
   1110a:	9b03      	ldr	r3, [sp, #12]
   1110c:	3601      	adds	r6, #1
   1110e:	1c04      	adds	r4, r0, #0
   11110:	1c0d      	adds	r5, r1, #0
   11112:	3f08      	subs	r7, #8
   11114:	42b3      	cmp	r3, r6
   11116:	d1e9      	bne.n	110ec <__kernel_rem_pio2+0xb8>
   11118:	465e      	mov	r6, fp
   1111a:	3608      	adds	r6, #8
   1111c:	2001      	movs	r0, #1
   1111e:	46b3      	mov	fp, r6
   11120:	4482      	add	sl, r0
   11122:	3e08      	subs	r6, #8
   11124:	c630      	stmia	r6!, {r4, r5}
   11126:	45ca      	cmp	sl, r9
   11128:	d1d3      	bne.n	110d2 <__kernel_rem_pio2+0x9e>
   1112a:	9c07      	ldr	r4, [sp, #28]
   1112c:	00a5      	lsls	r5, r4, #2
   1112e:	9502      	str	r5, [sp, #8]
   11130:	46a3      	mov	fp, r4
   11132:	465e      	mov	r6, fp
   11134:	00f2      	lsls	r2, r6, #3
   11136:	a811      	add	r0, sp, #68	; 0x44
   11138:	1813      	adds	r3, r2, r0
   1113a:	4659      	mov	r1, fp
   1113c:	681e      	ldr	r6, [r3, #0]
   1113e:	685f      	ldr	r7, [r3, #4]
   11140:	2900      	cmp	r1, #0
   11142:	dd34      	ble.n	111ae <__kernel_rem_pio2+0x17a>
   11144:	1c13      	adds	r3, r2, #0
   11146:	2489      	movs	r4, #137	; 0x89
   11148:	3b08      	subs	r3, #8
   1114a:	00a4      	lsls	r4, r4, #2
   1114c:	18c2      	adds	r2, r0, r3
   1114e:	446c      	add	r4, sp
   11150:	2300      	movs	r3, #0
   11152:	4690      	mov	r8, r2
   11154:	469a      	mov	sl, r3
   11156:	46a1      	mov	r9, r4
   11158:	4a95      	ldr	r2, [pc, #596]	; (113b0 <__kernel_rem_pio2+0x37c>)
   1115a:	4b96      	ldr	r3, [pc, #600]	; (113b4 <__kernel_rem_pio2+0x380>)
   1115c:	1c30      	adds	r0, r6, #0
   1115e:	1c39      	adds	r1, r7, #0
   11160:	f001 fbde 	bl	12920 <____muldf3_from_thumb>
   11164:	f001 fbec 	bl	12940 <____fixdfsi_from_thumb>
   11168:	f001 fbb6 	bl	128d8 <____floatsidf_from_thumb>
   1116c:	4a92      	ldr	r2, [pc, #584]	; (113b8 <__kernel_rem_pio2+0x384>)
   1116e:	4b93      	ldr	r3, [pc, #588]	; (113bc <__kernel_rem_pio2+0x388>)
   11170:	1c04      	adds	r4, r0, #0
   11172:	1c0d      	adds	r5, r1, #0
   11174:	f001 fbd4 	bl	12920 <____muldf3_from_thumb>
   11178:	1c32      	adds	r2, r6, #0
   1117a:	1c3b      	adds	r3, r7, #0
   1117c:	f001 fbd4 	bl	12928 <____adddf3_from_thumb>
   11180:	f001 fbde 	bl	12940 <____fixdfsi_from_thumb>
   11184:	464e      	mov	r6, r9
   11186:	3604      	adds	r6, #4
   11188:	46b1      	mov	r9, r6
   1118a:	3e04      	subs	r6, #4
   1118c:	c601      	stmia	r6!, {r0}
   1118e:	1c20      	adds	r0, r4, #0
   11190:	4644      	mov	r4, r8
   11192:	1c29      	adds	r1, r5, #0
   11194:	6822      	ldr	r2, [r4, #0]
   11196:	6863      	ldr	r3, [r4, #4]
   11198:	f001 fbc6 	bl	12928 <____adddf3_from_thumb>
   1119c:	2501      	movs	r5, #1
   1119e:	1c06      	adds	r6, r0, #0
   111a0:	2008      	movs	r0, #8
   111a2:	4240      	negs	r0, r0
   111a4:	44aa      	add	sl, r5
   111a6:	1c0f      	adds	r7, r1, #0
   111a8:	4480      	add	r8, r0
   111aa:	45d3      	cmp	fp, sl
   111ac:	d1d4      	bne.n	11158 <__kernel_rem_pio2+0x124>
   111ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111b0:	1c30      	adds	r0, r6, #0
   111b2:	1c39      	adds	r1, r7, #0
   111b4:	f000 fed0 	bl	11f58 <scalbn>
   111b8:	4a81      	ldr	r2, [pc, #516]	; (113c0 <__kernel_rem_pio2+0x38c>)
   111ba:	4b82      	ldr	r3, [pc, #520]	; (113c4 <__kernel_rem_pio2+0x390>)
   111bc:	1c04      	adds	r4, r0, #0
   111be:	1c0d      	adds	r5, r1, #0
   111c0:	f001 fbae 	bl	12920 <____muldf3_from_thumb>
   111c4:	f000 fe10 	bl	11de8 <floor>
   111c8:	4a7f      	ldr	r2, [pc, #508]	; (113c8 <__kernel_rem_pio2+0x394>)
   111ca:	4b80      	ldr	r3, [pc, #512]	; (113cc <__kernel_rem_pio2+0x398>)
   111cc:	f001 fba8 	bl	12920 <____muldf3_from_thumb>
   111d0:	1c02      	adds	r2, r0, #0
   111d2:	1c0b      	adds	r3, r1, #0
   111d4:	1c20      	adds	r0, r4, #0
   111d6:	1c29      	adds	r1, r5, #0
   111d8:	f001 fba6 	bl	12928 <____adddf3_from_thumb>
   111dc:	1c0d      	adds	r5, r1, #0
   111de:	1c04      	adds	r4, r0, #0
   111e0:	f001 fbae 	bl	12940 <____fixdfsi_from_thumb>
   111e4:	9008      	str	r0, [sp, #32]
   111e6:	f001 fb77 	bl	128d8 <____floatsidf_from_thumb>
   111ea:	1c02      	adds	r2, r0, #0
   111ec:	1c0b      	adds	r3, r1, #0
   111ee:	1c20      	adds	r0, r4, #0
   111f0:	1c29      	adds	r1, r5, #0
   111f2:	f001 fba1 	bl	12938 <____subdf3_from_thumb>
   111f6:	1c0d      	adds	r5, r1, #0
   111f8:	9909      	ldr	r1, [sp, #36]	; 0x24
   111fa:	1c04      	adds	r4, r0, #0
   111fc:	2900      	cmp	r1, #0
   111fe:	dc00      	bgt.n	11202 <__kernel_rem_pio2+0x1ce>
   11200:	e106      	b.n	11410 <__kernel_rem_pio2+0x3dc>
   11202:	4658      	mov	r0, fp
   11204:	3801      	subs	r0, #1
   11206:	2389      	movs	r3, #137	; 0x89
   11208:	0080      	lsls	r0, r0, #2
   1120a:	009b      	lsls	r3, r3, #2
   1120c:	181b      	adds	r3, r3, r0
   1120e:	466a      	mov	r2, sp
   11210:	5899      	ldr	r1, [r3, r2]
   11212:	9e09      	ldr	r6, [sp, #36]	; 0x24
   11214:	2218      	movs	r2, #24
   11216:	1b92      	subs	r2, r2, r6
   11218:	1c0b      	adds	r3, r1, #0
   1121a:	9e08      	ldr	r6, [sp, #32]
   1121c:	4113      	asrs	r3, r2
   1121e:	18f6      	adds	r6, r6, r3
   11220:	4093      	lsls	r3, r2
   11222:	1ac9      	subs	r1, r1, r3
   11224:	2389      	movs	r3, #137	; 0x89
   11226:	009b      	lsls	r3, r3, #2
   11228:	181b      	adds	r3, r3, r0
   1122a:	9608      	str	r6, [sp, #32]
   1122c:	466a      	mov	r2, sp
   1122e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   11230:	5099      	str	r1, [r3, r2]
   11232:	2317      	movs	r3, #23
   11234:	1b9b      	subs	r3, r3, r6
   11236:	4119      	asrs	r1, r3
   11238:	910a      	str	r1, [sp, #40]	; 0x28
   1123a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1123c:	2800      	cmp	r0, #0
   1123e:	dd2c      	ble.n	1129a <__kernel_rem_pio2+0x266>
   11240:	9908      	ldr	r1, [sp, #32]
   11242:	465a      	mov	r2, fp
   11244:	3101      	adds	r1, #1
   11246:	9108      	str	r1, [sp, #32]
   11248:	2a00      	cmp	r2, #0
   1124a:	dc00      	bgt.n	1124e <__kernel_rem_pio2+0x21a>
   1124c:	e1f8      	b.n	11640 <__kernel_rem_pio2+0x60c>
   1124e:	2080      	movs	r0, #128	; 0x80
   11250:	4e5f      	ldr	r6, [pc, #380]	; (113d0 <__kernel_rem_pio2+0x39c>)
   11252:	2700      	movs	r7, #0
   11254:	2100      	movs	r1, #0
   11256:	aa89      	add	r2, sp, #548	; 0x224
   11258:	0440      	lsls	r0, r0, #17
   1125a:	e008      	b.n	1126e <__kernel_rem_pio2+0x23a>
   1125c:	2b00      	cmp	r3, #0
   1125e:	d002      	beq.n	11266 <__kernel_rem_pio2+0x232>
   11260:	1ac3      	subs	r3, r0, r3
   11262:	6013      	str	r3, [r2, #0]
   11264:	2701      	movs	r7, #1
   11266:	3101      	adds	r1, #1
   11268:	3204      	adds	r2, #4
   1126a:	458b      	cmp	fp, r1
   1126c:	d008      	beq.n	11280 <__kernel_rem_pio2+0x24c>
   1126e:	6813      	ldr	r3, [r2, #0]
   11270:	2f00      	cmp	r7, #0
   11272:	d0f3      	beq.n	1125c <__kernel_rem_pio2+0x228>
   11274:	1af3      	subs	r3, r6, r3
   11276:	3101      	adds	r1, #1
   11278:	6013      	str	r3, [r2, #0]
   1127a:	3204      	adds	r2, #4
   1127c:	458b      	cmp	fp, r1
   1127e:	d1f6      	bne.n	1126e <__kernel_rem_pio2+0x23a>
   11280:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11282:	2b00      	cmp	r3, #0
   11284:	dd05      	ble.n	11292 <__kernel_rem_pio2+0x25e>
   11286:	2b01      	cmp	r3, #1
   11288:	d100      	bne.n	1128c <__kernel_rem_pio2+0x258>
   1128a:	e0cd      	b.n	11428 <__kernel_rem_pio2+0x3f4>
   1128c:	2b02      	cmp	r3, #2
   1128e:	d100      	bne.n	11292 <__kernel_rem_pio2+0x25e>
   11290:	e0d6      	b.n	11440 <__kernel_rem_pio2+0x40c>
   11292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11294:	2a02      	cmp	r2, #2
   11296:	d100      	bne.n	1129a <__kernel_rem_pio2+0x266>
   11298:	e0a1      	b.n	113de <__kernel_rem_pio2+0x3aa>
   1129a:	1c20      	adds	r0, r4, #0
   1129c:	1c29      	adds	r1, r5, #0
   1129e:	4a42      	ldr	r2, [pc, #264]	; (113a8 <__kernel_rem_pio2+0x374>)
   112a0:	4b42      	ldr	r3, [pc, #264]	; (113ac <__kernel_rem_pio2+0x378>)
   112a2:	f001 fb29 	bl	128f8 <____eqdf2_from_thumb>
   112a6:	2800      	cmp	r0, #0
   112a8:	d000      	beq.n	112ac <__kernel_rem_pio2+0x278>
   112aa:	e0ee      	b.n	1148a <__kernel_rem_pio2+0x456>
   112ac:	465c      	mov	r4, fp
   112ae:	9b07      	ldr	r3, [sp, #28]
   112b0:	3c01      	subs	r4, #1
   112b2:	42a3      	cmp	r3, r4
   112b4:	dc0d      	bgt.n	112d2 <__kernel_rem_pio2+0x29e>
   112b6:	00a5      	lsls	r5, r4, #2
   112b8:	ae89      	add	r6, sp, #548	; 0x224
   112ba:	1971      	adds	r1, r6, r5
   112bc:	1c22      	adds	r2, r4, #0
   112be:	680b      	ldr	r3, [r1, #0]
   112c0:	4318      	orrs	r0, r3
   112c2:	9b07      	ldr	r3, [sp, #28]
   112c4:	3a01      	subs	r2, #1
   112c6:	3904      	subs	r1, #4
   112c8:	4293      	cmp	r3, r2
   112ca:	ddf8      	ble.n	112be <__kernel_rem_pio2+0x28a>
   112cc:	2800      	cmp	r0, #0
   112ce:	d000      	beq.n	112d2 <__kernel_rem_pio2+0x29e>
   112d0:	e0e7      	b.n	114a2 <__kernel_rem_pio2+0x46e>
   112d2:	9c02      	ldr	r4, [sp, #8]
   112d4:	ad89      	add	r5, sp, #548	; 0x224
   112d6:	1963      	adds	r3, r4, r5
   112d8:	3b04      	subs	r3, #4
   112da:	681b      	ldr	r3, [r3, #0]
   112dc:	2b00      	cmp	r3, #0
   112de:	d000      	beq.n	112e2 <__kernel_rem_pio2+0x2ae>
   112e0:	e0c6      	b.n	11470 <__kernel_rem_pio2+0x43c>
   112e2:	9b02      	ldr	r3, [sp, #8]
   112e4:	ae89      	add	r6, sp, #548	; 0x224
   112e6:	3b08      	subs	r3, #8
   112e8:	18f2      	adds	r2, r6, r3
   112ea:	2101      	movs	r1, #1
   112ec:	6813      	ldr	r3, [r2, #0]
   112ee:	3101      	adds	r1, #1
   112f0:	3a04      	subs	r2, #4
   112f2:	2b00      	cmp	r3, #0
   112f4:	d0fa      	beq.n	112ec <__kernel_rem_pio2+0x2b8>
   112f6:	2001      	movs	r0, #1
   112f8:	4458      	add	r0, fp
   112fa:	465a      	mov	r2, fp
   112fc:	4680      	mov	r8, r0
   112fe:	1857      	adds	r7, r2, r1
   11300:	45b8      	cmp	r8, r7
   11302:	dd01      	ble.n	11308 <__kernel_rem_pio2+0x2d4>
   11304:	46bb      	mov	fp, r7
   11306:	e714      	b.n	11132 <__kernel_rem_pio2+0xfe>
   11308:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1130a:	9ca7      	ldr	r4, [sp, #668]	; 0x29c
   1130c:	445b      	add	r3, fp
   1130e:	009b      	lsls	r3, r3, #2
   11310:	9a03      	ldr	r2, [sp, #12]
   11312:	18e3      	adds	r3, r4, r3
   11314:	445a      	add	r2, fp
   11316:	3304      	adds	r3, #4
   11318:	930b      	str	r3, [sp, #44]	; 0x2c
   1131a:	ad61      	add	r5, sp, #388	; 0x184
   1131c:	00d3      	lsls	r3, r2, #3
   1131e:	18ed      	adds	r5, r5, r3
   11320:	ae11      	add	r6, sp, #68	; 0x44
   11322:	00c3      	lsls	r3, r0, #3
   11324:	18f6      	adds	r6, r6, r3
   11326:	46a9      	mov	r9, r5
   11328:	46b3      	mov	fp, r6
   1132a:	4692      	mov	sl, r2
   1132c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1132e:	6808      	ldr	r0, [r1, #0]
   11330:	f001 fad2 	bl	128d8 <____floatsidf_from_thumb>
   11334:	9b06      	ldr	r3, [sp, #24]
   11336:	464a      	mov	r2, r9
   11338:	6010      	str	r0, [r2, #0]
   1133a:	6051      	str	r1, [r2, #4]
   1133c:	2b00      	cmp	r3, #0
   1133e:	db49      	blt.n	113d4 <__kernel_rem_pio2+0x3a0>
   11340:	4819      	ldr	r0, [pc, #100]	; (113a8 <__kernel_rem_pio2+0x374>)
   11342:	491a      	ldr	r1, [pc, #104]	; (113ac <__kernel_rem_pio2+0x378>)
   11344:	4655      	mov	r5, sl
   11346:	900c      	str	r0, [sp, #48]	; 0x30
   11348:	910d      	str	r1, [sp, #52]	; 0x34
   1134a:	ae61      	add	r6, sp, #388	; 0x184
   1134c:	00eb      	lsls	r3, r5, #3
   1134e:	9c05      	ldr	r4, [sp, #20]
   11350:	18f5      	adds	r5, r6, r3
   11352:	2600      	movs	r6, #0
   11354:	682a      	ldr	r2, [r5, #0]
   11356:	686b      	ldr	r3, [r5, #4]
   11358:	cc03      	ldmia	r4!, {r0, r1}
   1135a:	f001 fae1 	bl	12920 <____muldf3_from_thumb>
   1135e:	1c02      	adds	r2, r0, #0
   11360:	1c0b      	adds	r3, r1, #0
   11362:	980c      	ldr	r0, [sp, #48]	; 0x30
   11364:	990d      	ldr	r1, [sp, #52]	; 0x34
   11366:	f001 fadf 	bl	12928 <____adddf3_from_thumb>
   1136a:	900c      	str	r0, [sp, #48]	; 0x30
   1136c:	910d      	str	r1, [sp, #52]	; 0x34
   1136e:	9903      	ldr	r1, [sp, #12]
   11370:	3601      	adds	r6, #1
   11372:	3d08      	subs	r5, #8
   11374:	42b1      	cmp	r1, r6
   11376:	d1ed      	bne.n	11354 <__kernel_rem_pio2+0x320>
   11378:	465c      	mov	r4, fp
   1137a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1137c:	3408      	adds	r4, #8
   1137e:	2501      	movs	r5, #1
   11380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11384:	46a3      	mov	fp, r4
   11386:	3604      	adds	r6, #4
   11388:	3c08      	subs	r4, #8
   1138a:	2008      	movs	r0, #8
   1138c:	44a8      	add	r8, r5
   1138e:	c40c      	stmia	r4!, {r2, r3}
   11390:	960b      	str	r6, [sp, #44]	; 0x2c
   11392:	4481      	add	r9, r0
   11394:	44aa      	add	sl, r5
   11396:	45b8      	cmp	r8, r7
   11398:	ddc8      	ble.n	1132c <__kernel_rem_pio2+0x2f8>
   1139a:	46bb      	mov	fp, r7
   1139c:	e6c9      	b.n	11132 <__kernel_rem_pio2+0xfe>
   1139e:	46c0      	nop			; (mov r8, r8)
   113a0:	fffffd8c 	.word	0xfffffd8c
   113a4:	00012f54 	.word	0x00012f54
	...
   113b0:	3e700000 	.word	0x3e700000
   113b4:	00000000 	.word	0x00000000
   113b8:	c1700000 	.word	0xc1700000
   113bc:	00000000 	.word	0x00000000
   113c0:	3fc00000 	.word	0x3fc00000
   113c4:	00000000 	.word	0x00000000
   113c8:	c0200000 	.word	0xc0200000
   113cc:	00000000 	.word	0x00000000
   113d0:	00ffffff 	.word	0x00ffffff
   113d4:	4d9e      	ldr	r5, [pc, #632]	; (11650 <__kernel_rem_pio2+0x61c>)
   113d6:	4c9d      	ldr	r4, [pc, #628]	; (1164c <__kernel_rem_pio2+0x618>)
   113d8:	940c      	str	r4, [sp, #48]	; 0x30
   113da:	950d      	str	r5, [sp, #52]	; 0x34
   113dc:	e7cc      	b.n	11378 <__kernel_rem_pio2+0x344>
   113de:	1c22      	adds	r2, r4, #0
   113e0:	1c2b      	adds	r3, r5, #0
   113e2:	489c      	ldr	r0, [pc, #624]	; (11654 <__kernel_rem_pio2+0x620>)
   113e4:	499c      	ldr	r1, [pc, #624]	; (11658 <__kernel_rem_pio2+0x624>)
   113e6:	f001 faa7 	bl	12938 <____subdf3_from_thumb>
   113ea:	1c04      	adds	r4, r0, #0
   113ec:	1c0d      	adds	r5, r1, #0
   113ee:	2f00      	cmp	r7, #0
   113f0:	d100      	bne.n	113f4 <__kernel_rem_pio2+0x3c0>
   113f2:	e752      	b.n	1129a <__kernel_rem_pio2+0x266>
   113f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   113f6:	4897      	ldr	r0, [pc, #604]	; (11654 <__kernel_rem_pio2+0x620>)
   113f8:	4997      	ldr	r1, [pc, #604]	; (11658 <__kernel_rem_pio2+0x624>)
   113fa:	f000 fdad 	bl	11f58 <scalbn>
   113fe:	1c02      	adds	r2, r0, #0
   11400:	1c0b      	adds	r3, r1, #0
   11402:	1c20      	adds	r0, r4, #0
   11404:	1c29      	adds	r1, r5, #0
   11406:	f001 fa97 	bl	12938 <____subdf3_from_thumb>
   1140a:	1c04      	adds	r4, r0, #0
   1140c:	1c0d      	adds	r5, r1, #0
   1140e:	e744      	b.n	1129a <__kernel_rem_pio2+0x266>
   11410:	9809      	ldr	r0, [sp, #36]	; 0x24
   11412:	2800      	cmp	r0, #0
   11414:	d120      	bne.n	11458 <__kernel_rem_pio2+0x424>
   11416:	4659      	mov	r1, fp
   11418:	008b      	lsls	r3, r1, #2
   1141a:	aa89      	add	r2, sp, #548	; 0x224
   1141c:	189b      	adds	r3, r3, r2
   1141e:	3b04      	subs	r3, #4
   11420:	681b      	ldr	r3, [r3, #0]
   11422:	15db      	asrs	r3, r3, #23
   11424:	930a      	str	r3, [sp, #40]	; 0x28
   11426:	e708      	b.n	1123a <__kernel_rem_pio2+0x206>
   11428:	465b      	mov	r3, fp
   1142a:	3b01      	subs	r3, #1
   1142c:	2089      	movs	r0, #137	; 0x89
   1142e:	009b      	lsls	r3, r3, #2
   11430:	0080      	lsls	r0, r0, #2
   11432:	18c0      	adds	r0, r0, r3
   11434:	466e      	mov	r6, sp
   11436:	5982      	ldr	r2, [r0, r6]
   11438:	4988      	ldr	r1, [pc, #544]	; (1165c <__kernel_rem_pio2+0x628>)
   1143a:	400a      	ands	r2, r1
   1143c:	5182      	str	r2, [r0, r6]
   1143e:	e728      	b.n	11292 <__kernel_rem_pio2+0x25e>
   11440:	465b      	mov	r3, fp
   11442:	3b01      	subs	r3, #1
   11444:	2089      	movs	r0, #137	; 0x89
   11446:	009b      	lsls	r3, r3, #2
   11448:	0080      	lsls	r0, r0, #2
   1144a:	18c0      	adds	r0, r0, r3
   1144c:	466e      	mov	r6, sp
   1144e:	5982      	ldr	r2, [r0, r6]
   11450:	4983      	ldr	r1, [pc, #524]	; (11660 <__kernel_rem_pio2+0x62c>)
   11452:	400a      	ands	r2, r1
   11454:	5182      	str	r2, [r0, r6]
   11456:	e71c      	b.n	11292 <__kernel_rem_pio2+0x25e>
   11458:	1c20      	adds	r0, r4, #0
   1145a:	1c29      	adds	r1, r5, #0
   1145c:	4a81      	ldr	r2, [pc, #516]	; (11664 <__kernel_rem_pio2+0x630>)
   1145e:	4b82      	ldr	r3, [pc, #520]	; (11668 <__kernel_rem_pio2+0x634>)
   11460:	f001 fa52 	bl	12908 <____gedf2_from_thumb>
   11464:	2800      	cmp	r0, #0
   11466:	db00      	blt.n	1146a <__kernel_rem_pio2+0x436>
   11468:	e0ec      	b.n	11644 <__kernel_rem_pio2+0x610>
   1146a:	2300      	movs	r3, #0
   1146c:	930a      	str	r3, [sp, #40]	; 0x28
   1146e:	e714      	b.n	1129a <__kernel_rem_pio2+0x266>
   11470:	2001      	movs	r0, #1
   11472:	2101      	movs	r1, #1
   11474:	4458      	add	r0, fp
   11476:	465a      	mov	r2, fp
   11478:	4680      	mov	r8, r0
   1147a:	1857      	adds	r7, r2, r1
   1147c:	45b8      	cmp	r8, r7
   1147e:	dd00      	ble.n	11482 <__kernel_rem_pio2+0x44e>
   11480:	e740      	b.n	11304 <__kernel_rem_pio2+0x2d0>
   11482:	e741      	b.n	11308 <__kernel_rem_pio2+0x2d4>
   11484:	4d72      	ldr	r5, [pc, #456]	; (11650 <__kernel_rem_pio2+0x61c>)
   11486:	4c71      	ldr	r4, [pc, #452]	; (1164c <__kernel_rem_pio2+0x618>)
   11488:	e646      	b.n	11118 <__kernel_rem_pio2+0xe4>
   1148a:	1c20      	adds	r0, r4, #0
   1148c:	1c29      	adds	r1, r5, #0
   1148e:	4b70      	ldr	r3, [pc, #448]	; (11650 <__kernel_rem_pio2+0x61c>)
   11490:	4a6e      	ldr	r2, [pc, #440]	; (1164c <__kernel_rem_pio2+0x618>)
   11492:	f001 fa31 	bl	128f8 <____eqdf2_from_thumb>
   11496:	2800      	cmp	r0, #0
   11498:	d000      	beq.n	1149c <__kernel_rem_pio2+0x468>
   1149a:	e182      	b.n	117a2 <__kernel_rem_pio2+0x76e>
   1149c:	465c      	mov	r4, fp
   1149e:	3c01      	subs	r4, #1
   114a0:	00a5      	lsls	r5, r4, #2
   114a2:	2689      	movs	r6, #137	; 0x89
   114a4:	00b6      	lsls	r6, r6, #2
   114a6:	9909      	ldr	r1, [sp, #36]	; 0x24
   114a8:	1976      	adds	r6, r6, r5
   114aa:	466a      	mov	r2, sp
   114ac:	58b3      	ldr	r3, [r6, r2]
   114ae:	3918      	subs	r1, #24
   114b0:	9109      	str	r1, [sp, #36]	; 0x24
   114b2:	2b00      	cmp	r3, #0
   114b4:	d000      	beq.n	114b8 <__kernel_rem_pio2+0x484>
   114b6:	e1ce      	b.n	11856 <__kernel_rem_pio2+0x822>
   114b8:	1f2b      	subs	r3, r5, #4
   114ba:	a889      	add	r0, sp, #548	; 0x224
   114bc:	18c2      	adds	r2, r0, r3
   114be:	46a3      	mov	fp, r4
   114c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   114c2:	3b18      	subs	r3, #24
   114c4:	2101      	movs	r1, #1
   114c6:	9309      	str	r3, [sp, #36]	; 0x24
   114c8:	6813      	ldr	r3, [r2, #0]
   114ca:	4249      	negs	r1, r1
   114cc:	448b      	add	fp, r1
   114ce:	3a04      	subs	r2, #4
   114d0:	2b00      	cmp	r3, #0
   114d2:	d0f5      	beq.n	114c0 <__kernel_rem_pio2+0x48c>
   114d4:	485f      	ldr	r0, [pc, #380]	; (11654 <__kernel_rem_pio2+0x620>)
   114d6:	4960      	ldr	r1, [pc, #384]	; (11658 <__kernel_rem_pio2+0x624>)
   114d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   114da:	f000 fd3d 	bl	11f58 <scalbn>
   114de:	1c04      	adds	r4, r0, #0
   114e0:	4658      	mov	r0, fp
   114e2:	1c0d      	adds	r5, r1, #0
   114e4:	2800      	cmp	r0, #0
   114e6:	db5c      	blt.n	115a2 <__kernel_rem_pio2+0x56e>
   114e8:	0083      	lsls	r3, r0, #2
   114ea:	a989      	add	r1, sp, #548	; 0x224
   114ec:	18c9      	adds	r1, r1, r3
   114ee:	aa11      	add	r2, sp, #68	; 0x44
   114f0:	00c3      	lsls	r3, r0, #3
   114f2:	4688      	mov	r8, r1
   114f4:	18d7      	adds	r7, r2, r3
   114f6:	465e      	mov	r6, fp
   114f8:	4643      	mov	r3, r8
   114fa:	6818      	ldr	r0, [r3, #0]
   114fc:	f001 f9ec 	bl	128d8 <____floatsidf_from_thumb>
   11500:	1c22      	adds	r2, r4, #0
   11502:	1c2b      	adds	r3, r5, #0
   11504:	f001 fa0c 	bl	12920 <____muldf3_from_thumb>
   11508:	4a58      	ldr	r2, [pc, #352]	; (1166c <__kernel_rem_pio2+0x638>)
   1150a:	4b59      	ldr	r3, [pc, #356]	; (11670 <__kernel_rem_pio2+0x63c>)
   1150c:	6038      	str	r0, [r7, #0]
   1150e:	6079      	str	r1, [r7, #4]
   11510:	1c20      	adds	r0, r4, #0
   11512:	1c29      	adds	r1, r5, #0
   11514:	f001 fa04 	bl	12920 <____muldf3_from_thumb>
   11518:	1c04      	adds	r4, r0, #0
   1151a:	2004      	movs	r0, #4
   1151c:	4240      	negs	r0, r0
   1151e:	1c0d      	adds	r5, r1, #0
   11520:	4480      	add	r8, r0
   11522:	3f08      	subs	r7, #8
   11524:	3e01      	subs	r6, #1
   11526:	d2e7      	bcs.n	114f8 <__kernel_rem_pio2+0x4c4>
   11528:	2100      	movs	r1, #0
   1152a:	46d9      	mov	r9, fp
   1152c:	468a      	mov	sl, r1
   1152e:	9807      	ldr	r0, [sp, #28]
   11530:	2800      	cmp	r0, #0
   11532:	da00      	bge.n	11536 <__kernel_rem_pio2+0x502>
   11534:	e123      	b.n	1177e <__kernel_rem_pio2+0x74a>
   11536:	4652      	mov	r2, sl
   11538:	2a00      	cmp	r2, #0
   1153a:	da00      	bge.n	1153e <__kernel_rem_pio2+0x50a>
   1153c:	e124      	b.n	11788 <__kernel_rem_pio2+0x754>
   1153e:	464c      	mov	r4, r9
   11540:	00e3      	lsls	r3, r4, #3
   11542:	ad11      	add	r5, sp, #68	; 0x44
   11544:	18ed      	adds	r5, r5, r3
   11546:	4942      	ldr	r1, [pc, #264]	; (11650 <__kernel_rem_pio2+0x61c>)
   11548:	4840      	ldr	r0, [pc, #256]	; (1164c <__kernel_rem_pio2+0x618>)
   1154a:	4f4a      	ldr	r7, [pc, #296]	; (11674 <__kernel_rem_pio2+0x640>)
   1154c:	46a8      	mov	r8, r5
   1154e:	2400      	movs	r4, #0
   11550:	9000      	str	r0, [sp, #0]
   11552:	9101      	str	r1, [sp, #4]
   11554:	e004      	b.n	11560 <__kernel_rem_pio2+0x52c>
   11556:	2008      	movs	r0, #8
   11558:	3708      	adds	r7, #8
   1155a:	4480      	add	r8, r0
   1155c:	4554      	cmp	r4, sl
   1155e:	dc12      	bgt.n	11586 <__kernel_rem_pio2+0x552>
   11560:	4645      	mov	r5, r8
   11562:	682a      	ldr	r2, [r5, #0]
   11564:	686b      	ldr	r3, [r5, #4]
   11566:	6838      	ldr	r0, [r7, #0]
   11568:	6879      	ldr	r1, [r7, #4]
   1156a:	f001 f9d9 	bl	12920 <____muldf3_from_thumb>
   1156e:	1c02      	adds	r2, r0, #0
   11570:	1c0b      	adds	r3, r1, #0
   11572:	9800      	ldr	r0, [sp, #0]
   11574:	9901      	ldr	r1, [sp, #4]
   11576:	f001 f9d7 	bl	12928 <____adddf3_from_thumb>
   1157a:	9e07      	ldr	r6, [sp, #28]
   1157c:	3401      	adds	r4, #1
   1157e:	9000      	str	r0, [sp, #0]
   11580:	9101      	str	r1, [sp, #4]
   11582:	42a6      	cmp	r6, r4
   11584:	dae7      	bge.n	11556 <__kernel_rem_pio2+0x522>
   11586:	4651      	mov	r1, sl
   11588:	9c00      	ldr	r4, [sp, #0]
   1158a:	9d01      	ldr	r5, [sp, #4]
   1158c:	00cb      	lsls	r3, r1, #3
   1158e:	aa39      	add	r2, sp, #228	; 0xe4
   11590:	189b      	adds	r3, r3, r2
   11592:	601c      	str	r4, [r3, #0]
   11594:	605d      	str	r5, [r3, #4]
   11596:	464e      	mov	r6, r9
   11598:	2501      	movs	r5, #1
   1159a:	44aa      	add	sl, r5
   1159c:	3e01      	subs	r6, #1
   1159e:	46b1      	mov	r9, r6
   115a0:	d2c5      	bcs.n	1152e <__kernel_rem_pio2+0x4fa>
   115a2:	99a6      	ldr	r1, [sp, #664]	; 0x298
   115a4:	2902      	cmp	r1, #2
   115a6:	dc67      	bgt.n	11678 <__kernel_rem_pio2+0x644>
   115a8:	2901      	cmp	r1, #1
   115aa:	da00      	bge.n	115ae <__kernel_rem_pio2+0x57a>
   115ac:	e138      	b.n	11820 <__kernel_rem_pio2+0x7ec>
   115ae:	465c      	mov	r4, fp
   115b0:	2c00      	cmp	r4, #0
   115b2:	da00      	bge.n	115b6 <__kernel_rem_pio2+0x582>
   115b4:	e173      	b.n	1189e <__kernel_rem_pio2+0x86a>
   115b6:	4658      	mov	r0, fp
   115b8:	00c3      	lsls	r3, r0, #3
   115ba:	a939      	add	r1, sp, #228	; 0xe4
   115bc:	18cd      	adds	r5, r1, r3
   115be:	4b24      	ldr	r3, [pc, #144]	; (11650 <__kernel_rem_pio2+0x61c>)
   115c0:	4a22      	ldr	r2, [pc, #136]	; (1164c <__kernel_rem_pio2+0x618>)
   115c2:	465c      	mov	r4, fp
   115c4:	1c10      	adds	r0, r2, #0
   115c6:	1c19      	adds	r1, r3, #0
   115c8:	682a      	ldr	r2, [r5, #0]
   115ca:	686b      	ldr	r3, [r5, #4]
   115cc:	f001 f9ac 	bl	12928 <____adddf3_from_thumb>
   115d0:	3d08      	subs	r5, #8
   115d2:	1c02      	adds	r2, r0, #0
   115d4:	1c0b      	adds	r3, r1, #0
   115d6:	3c01      	subs	r4, #1
   115d8:	d2f4      	bcs.n	115c4 <__kernel_rem_pio2+0x590>
   115da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   115dc:	2c00      	cmp	r4, #0
   115de:	d000      	beq.n	115e2 <__kernel_rem_pio2+0x5ae>
   115e0:	e0da      	b.n	11798 <__kernel_rem_pio2+0x764>
   115e2:	1c10      	adds	r0, r2, #0
   115e4:	1c19      	adds	r1, r3, #0
   115e6:	9e04      	ldr	r6, [sp, #16]
   115e8:	6030      	str	r0, [r6, #0]
   115ea:	6071      	str	r1, [r6, #4]
   115ec:	9839      	ldr	r0, [sp, #228]	; 0xe4
   115ee:	993a      	ldr	r1, [sp, #232]	; 0xe8
   115f0:	f001 f9a2 	bl	12938 <____subdf3_from_thumb>
   115f4:	465a      	mov	r2, fp
   115f6:	2a00      	cmp	r2, #0
   115f8:	dd0a      	ble.n	11610 <__kernel_rem_pio2+0x5dc>
   115fa:	465e      	mov	r6, fp
   115fc:	ac39      	add	r4, sp, #228	; 0xe4
   115fe:	2501      	movs	r5, #1
   11600:	3601      	adds	r6, #1
   11602:	3408      	adds	r4, #8
   11604:	cc0c      	ldmia	r4!, {r2, r3}
   11606:	3501      	adds	r5, #1
   11608:	f001 f98e 	bl	12928 <____adddf3_from_thumb>
   1160c:	42ae      	cmp	r6, r5
   1160e:	d1f9      	bne.n	11604 <__kernel_rem_pio2+0x5d0>
   11610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11612:	2b00      	cmp	r3, #0
   11614:	d003      	beq.n	1161e <__kernel_rem_pio2+0x5ea>
   11616:	2580      	movs	r5, #128	; 0x80
   11618:	062d      	lsls	r5, r5, #24
   1161a:	1943      	adds	r3, r0, r5
   1161c:	1c18      	adds	r0, r3, #0
   1161e:	9e04      	ldr	r6, [sp, #16]
   11620:	60b0      	str	r0, [r6, #8]
   11622:	60f1      	str	r1, [r6, #12]
   11624:	9808      	ldr	r0, [sp, #32]
   11626:	2307      	movs	r3, #7
   11628:	4018      	ands	r0, r3
   1162a:	239d      	movs	r3, #157	; 0x9d
   1162c:	009b      	lsls	r3, r3, #2
   1162e:	449d      	add	sp, r3
   11630:	bc3c      	pop	{r2, r3, r4, r5}
   11632:	4690      	mov	r8, r2
   11634:	4699      	mov	r9, r3
   11636:	46a2      	mov	sl, r4
   11638:	46ab      	mov	fp, r5
   1163a:	bcf0      	pop	{r4, r5, r6, r7}
   1163c:	bc02      	pop	{r1}
   1163e:	4708      	bx	r1
   11640:	2700      	movs	r7, #0
   11642:	e61d      	b.n	11280 <__kernel_rem_pio2+0x24c>
   11644:	2602      	movs	r6, #2
   11646:	960a      	str	r6, [sp, #40]	; 0x28
   11648:	e5fa      	b.n	11240 <__kernel_rem_pio2+0x20c>
   1164a:	46c0      	nop			; (mov r8, r8)
	...
   11654:	3ff00000 	.word	0x3ff00000
   11658:	00000000 	.word	0x00000000
   1165c:	007fffff 	.word	0x007fffff
   11660:	003fffff 	.word	0x003fffff
   11664:	3fe00000 	.word	0x3fe00000
   11668:	00000000 	.word	0x00000000
   1166c:	3e700000 	.word	0x3e700000
   11670:	00000000 	.word	0x00000000
   11674:	00012f64 	.word	0x00012f64
   11678:	9aa6      	ldr	r2, [sp, #664]	; 0x298
   1167a:	2a03      	cmp	r2, #3
   1167c:	d1d2      	bne.n	11624 <__kernel_rem_pio2+0x5f0>
   1167e:	465d      	mov	r5, fp
   11680:	2d00      	cmp	r5, #0
   11682:	dd2c      	ble.n	116de <__kernel_rem_pio2+0x6aa>
   11684:	4658      	mov	r0, fp
   11686:	00c3      	lsls	r3, r0, #3
   11688:	3b08      	subs	r3, #8
   1168a:	a939      	add	r1, sp, #228	; 0xe4
   1168c:	18c9      	adds	r1, r1, r3
   1168e:	4688      	mov	r8, r1
   11690:	46da      	mov	sl, fp
   11692:	4643      	mov	r3, r8
   11694:	681c      	ldr	r4, [r3, #0]
   11696:	685d      	ldr	r5, [r3, #4]
   11698:	689e      	ldr	r6, [r3, #8]
   1169a:	68df      	ldr	r7, [r3, #12]
   1169c:	2201      	movs	r2, #1
   1169e:	4252      	negs	r2, r2
   116a0:	4492      	add	sl, r2
   116a2:	1c20      	adds	r0, r4, #0
   116a4:	1c29      	adds	r1, r5, #0
   116a6:	1c32      	adds	r2, r6, #0
   116a8:	1c3b      	adds	r3, r7, #0
   116aa:	f001 f93d 	bl	12928 <____adddf3_from_thumb>
   116ae:	4642      	mov	r2, r8
   116b0:	6010      	str	r0, [r2, #0]
   116b2:	6051      	str	r1, [r2, #4]
   116b4:	1c20      	adds	r0, r4, #0
   116b6:	6853      	ldr	r3, [r2, #4]
   116b8:	6812      	ldr	r2, [r2, #0]
   116ba:	1c29      	adds	r1, r5, #0
   116bc:	f001 f93c 	bl	12938 <____subdf3_from_thumb>
   116c0:	1c0b      	adds	r3, r1, #0
   116c2:	1c02      	adds	r2, r0, #0
   116c4:	1c39      	adds	r1, r7, #0
   116c6:	1c30      	adds	r0, r6, #0
   116c8:	f001 f92e 	bl	12928 <____adddf3_from_thumb>
   116cc:	2408      	movs	r4, #8
   116ce:	4643      	mov	r3, r8
   116d0:	4264      	negs	r4, r4
   116d2:	4655      	mov	r5, sl
   116d4:	6098      	str	r0, [r3, #8]
   116d6:	60d9      	str	r1, [r3, #12]
   116d8:	44a0      	add	r8, r4
   116da:	2d00      	cmp	r5, #0
   116dc:	d1d9      	bne.n	11692 <__kernel_rem_pio2+0x65e>
   116de:	465e      	mov	r6, fp
   116e0:	2e01      	cmp	r6, #1
   116e2:	dc00      	bgt.n	116e6 <__kernel_rem_pio2+0x6b2>
   116e4:	e0de      	b.n	118a4 <__kernel_rem_pio2+0x870>
   116e6:	4658      	mov	r0, fp
   116e8:	00c0      	lsls	r0, r0, #3
   116ea:	1c03      	adds	r3, r0, #0
   116ec:	3b08      	subs	r3, #8
   116ee:	a939      	add	r1, sp, #228	; 0xe4
   116f0:	18c9      	adds	r1, r1, r3
   116f2:	4681      	mov	r9, r0
   116f4:	4688      	mov	r8, r1
   116f6:	46da      	mov	sl, fp
   116f8:	4643      	mov	r3, r8
   116fa:	681c      	ldr	r4, [r3, #0]
   116fc:	685d      	ldr	r5, [r3, #4]
   116fe:	689e      	ldr	r6, [r3, #8]
   11700:	68df      	ldr	r7, [r3, #12]
   11702:	2201      	movs	r2, #1
   11704:	4252      	negs	r2, r2
   11706:	4492      	add	sl, r2
   11708:	1c20      	adds	r0, r4, #0
   1170a:	1c29      	adds	r1, r5, #0
   1170c:	1c32      	adds	r2, r6, #0
   1170e:	1c3b      	adds	r3, r7, #0
   11710:	f001 f90a 	bl	12928 <____adddf3_from_thumb>
   11714:	4642      	mov	r2, r8
   11716:	6010      	str	r0, [r2, #0]
   11718:	6051      	str	r1, [r2, #4]
   1171a:	1c20      	adds	r0, r4, #0
   1171c:	6853      	ldr	r3, [r2, #4]
   1171e:	6812      	ldr	r2, [r2, #0]
   11720:	1c29      	adds	r1, r5, #0
   11722:	f001 f909 	bl	12938 <____subdf3_from_thumb>
   11726:	1c0b      	adds	r3, r1, #0
   11728:	1c02      	adds	r2, r0, #0
   1172a:	1c39      	adds	r1, r7, #0
   1172c:	1c30      	adds	r0, r6, #0
   1172e:	f001 f8fb 	bl	12928 <____adddf3_from_thumb>
   11732:	2408      	movs	r4, #8
   11734:	4643      	mov	r3, r8
   11736:	4264      	negs	r4, r4
   11738:	4655      	mov	r5, sl
   1173a:	6098      	str	r0, [r3, #8]
   1173c:	60d9      	str	r1, [r3, #12]
   1173e:	44a0      	add	r8, r4
   11740:	2d01      	cmp	r5, #1
   11742:	d1d9      	bne.n	116f8 <__kernel_rem_pio2+0x6c4>
   11744:	ad39      	add	r5, sp, #228	; 0xe4
   11746:	495b      	ldr	r1, [pc, #364]	; (118b4 <__kernel_rem_pio2+0x880>)
   11748:	4859      	ldr	r0, [pc, #356]	; (118b0 <__kernel_rem_pio2+0x87c>)
   1174a:	444d      	add	r5, r9
   1174c:	465c      	mov	r4, fp
   1174e:	682a      	ldr	r2, [r5, #0]
   11750:	686b      	ldr	r3, [r5, #4]
   11752:	3c01      	subs	r4, #1
   11754:	f001 f8e8 	bl	12928 <____adddf3_from_thumb>
   11758:	3d08      	subs	r5, #8
   1175a:	2c01      	cmp	r4, #1
   1175c:	d1f7      	bne.n	1174e <__kernel_rem_pio2+0x71a>
   1175e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   11760:	2e00      	cmp	r6, #0
   11762:	d000      	beq.n	11766 <__kernel_rem_pio2+0x732>
   11764:	e085      	b.n	11872 <__kernel_rem_pio2+0x83e>
   11766:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   11768:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
   1176a:	9a04      	ldr	r2, [sp, #16]
   1176c:	6013      	str	r3, [r2, #0]
   1176e:	6054      	str	r4, [r2, #4]
   11770:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   11772:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
   11774:	6110      	str	r0, [r2, #16]
   11776:	6151      	str	r1, [r2, #20]
   11778:	6093      	str	r3, [r2, #8]
   1177a:	60d4      	str	r4, [r2, #12]
   1177c:	e752      	b.n	11624 <__kernel_rem_pio2+0x5f0>
   1177e:	4a4d      	ldr	r2, [pc, #308]	; (118b4 <__kernel_rem_pio2+0x880>)
   11780:	494b      	ldr	r1, [pc, #300]	; (118b0 <__kernel_rem_pio2+0x87c>)
   11782:	9100      	str	r1, [sp, #0]
   11784:	9201      	str	r2, [sp, #4]
   11786:	e6fe      	b.n	11586 <__kernel_rem_pio2+0x552>
   11788:	4c4a      	ldr	r4, [pc, #296]	; (118b4 <__kernel_rem_pio2+0x880>)
   1178a:	4b49      	ldr	r3, [pc, #292]	; (118b0 <__kernel_rem_pio2+0x87c>)
   1178c:	9300      	str	r3, [sp, #0]
   1178e:	9401      	str	r4, [sp, #4]
   11790:	e6f9      	b.n	11586 <__kernel_rem_pio2+0x552>
   11792:	2200      	movs	r2, #0
   11794:	9210      	str	r2, [sp, #64]	; 0x40
   11796:	e469      	b.n	1106c <__kernel_rem_pio2+0x38>
   11798:	2580      	movs	r5, #128	; 0x80
   1179a:	062d      	lsls	r5, r5, #24
   1179c:	1950      	adds	r0, r2, r5
   1179e:	1c19      	adds	r1, r3, #0
   117a0:	e721      	b.n	115e6 <__kernel_rem_pio2+0x5b2>
   117a2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   117a4:	1c20      	adds	r0, r4, #0
   117a6:	4272      	negs	r2, r6
   117a8:	1c29      	adds	r1, r5, #0
   117aa:	f000 fbd5 	bl	11f58 <scalbn>
   117ae:	4a42      	ldr	r2, [pc, #264]	; (118b8 <__kernel_rem_pio2+0x884>)
   117b0:	4b42      	ldr	r3, [pc, #264]	; (118bc <__kernel_rem_pio2+0x888>)
   117b2:	900e      	str	r0, [sp, #56]	; 0x38
   117b4:	910f      	str	r1, [sp, #60]	; 0x3c
   117b6:	f001 f8a7 	bl	12908 <____gedf2_from_thumb>
   117ba:	2800      	cmp	r0, #0
   117bc:	db4d      	blt.n	1185a <__kernel_rem_pio2+0x826>
   117be:	4a40      	ldr	r2, [pc, #256]	; (118c0 <__kernel_rem_pio2+0x88c>)
   117c0:	4b40      	ldr	r3, [pc, #256]	; (118c4 <__kernel_rem_pio2+0x890>)
   117c2:	980e      	ldr	r0, [sp, #56]	; 0x38
   117c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   117c6:	f001 f8ab 	bl	12920 <____muldf3_from_thumb>
   117ca:	f001 f8b9 	bl	12940 <____fixdfsi_from_thumb>
   117ce:	f001 f883 	bl	128d8 <____floatsidf_from_thumb>
   117d2:	1c05      	adds	r5, r0, #0
   117d4:	4658      	mov	r0, fp
   117d6:	0084      	lsls	r4, r0, #2
   117d8:	4a3b      	ldr	r2, [pc, #236]	; (118c8 <__kernel_rem_pio2+0x894>)
   117da:	4b3c      	ldr	r3, [pc, #240]	; (118cc <__kernel_rem_pio2+0x898>)
   117dc:	1c28      	adds	r0, r5, #0
   117de:	1c0e      	adds	r6, r1, #0
   117e0:	f001 f89e 	bl	12920 <____muldf3_from_thumb>
   117e4:	1c02      	adds	r2, r0, #0
   117e6:	1c0b      	adds	r3, r1, #0
   117e8:	980e      	ldr	r0, [sp, #56]	; 0x38
   117ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
   117ec:	f001 f89c 	bl	12928 <____adddf3_from_thumb>
   117f0:	f001 f8a6 	bl	12940 <____fixdfsi_from_thumb>
   117f4:	2289      	movs	r2, #137	; 0x89
   117f6:	0092      	lsls	r2, r2, #2
   117f8:	1912      	adds	r2, r2, r4
   117fa:	2301      	movs	r3, #1
   117fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   117fe:	4669      	mov	r1, sp
   11800:	449b      	add	fp, r3
   11802:	5050      	str	r0, [r2, r1]
   11804:	3418      	adds	r4, #24
   11806:	4658      	mov	r0, fp
   11808:	9409      	str	r4, [sp, #36]	; 0x24
   1180a:	1c31      	adds	r1, r6, #0
   1180c:	0084      	lsls	r4, r0, #2
   1180e:	1c28      	adds	r0, r5, #0
   11810:	f001 f896 	bl	12940 <____fixdfsi_from_thumb>
   11814:	2289      	movs	r2, #137	; 0x89
   11816:	0092      	lsls	r2, r2, #2
   11818:	1912      	adds	r2, r2, r4
   1181a:	4669      	mov	r1, sp
   1181c:	5050      	str	r0, [r2, r1]
   1181e:	e659      	b.n	114d4 <__kernel_rem_pio2+0x4a0>
   11820:	2900      	cmp	r1, #0
   11822:	d000      	beq.n	11826 <__kernel_rem_pio2+0x7f2>
   11824:	e6fe      	b.n	11624 <__kernel_rem_pio2+0x5f0>
   11826:	465b      	mov	r3, fp
   11828:	2b00      	cmp	r3, #0
   1182a:	db3e      	blt.n	118aa <__kernel_rem_pio2+0x876>
   1182c:	465e      	mov	r6, fp
   1182e:	00f2      	lsls	r2, r6, #3
   11830:	ab39      	add	r3, sp, #228	; 0xe4
   11832:	4920      	ldr	r1, [pc, #128]	; (118b4 <__kernel_rem_pio2+0x880>)
   11834:	481e      	ldr	r0, [pc, #120]	; (118b0 <__kernel_rem_pio2+0x87c>)
   11836:	189d      	adds	r5, r3, r2
   11838:	465c      	mov	r4, fp
   1183a:	682a      	ldr	r2, [r5, #0]
   1183c:	686b      	ldr	r3, [r5, #4]
   1183e:	f001 f873 	bl	12928 <____adddf3_from_thumb>
   11842:	3d08      	subs	r5, #8
   11844:	3c01      	subs	r4, #1
   11846:	d2f8      	bcs.n	1183a <__kernel_rem_pio2+0x806>
   11848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1184a:	2a00      	cmp	r2, #0
   1184c:	d122      	bne.n	11894 <__kernel_rem_pio2+0x860>
   1184e:	9e04      	ldr	r6, [sp, #16]
   11850:	6030      	str	r0, [r6, #0]
   11852:	6071      	str	r1, [r6, #4]
   11854:	e6e6      	b.n	11624 <__kernel_rem_pio2+0x5f0>
   11856:	46a3      	mov	fp, r4
   11858:	e63c      	b.n	114d4 <__kernel_rem_pio2+0x4a0>
   1185a:	465b      	mov	r3, fp
   1185c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1185e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11860:	009c      	lsls	r4, r3, #2
   11862:	f001 f86d 	bl	12940 <____fixdfsi_from_thumb>
   11866:	2689      	movs	r6, #137	; 0x89
   11868:	00b6      	lsls	r6, r6, #2
   1186a:	1936      	adds	r6, r6, r4
   1186c:	466d      	mov	r5, sp
   1186e:	5170      	str	r0, [r6, r5]
   11870:	e630      	b.n	114d4 <__kernel_rem_pio2+0x4a0>
   11872:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   11874:	2280      	movs	r2, #128	; 0x80
   11876:	9c04      	ldr	r4, [sp, #16]
   11878:	0612      	lsls	r2, r2, #24
   1187a:	189b      	adds	r3, r3, r2
   1187c:	6023      	str	r3, [r4, #0]
   1187e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   11880:	6063      	str	r3, [r4, #4]
   11882:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   11884:	189b      	adds	r3, r3, r2
   11886:	60a3      	str	r3, [r4, #8]
   11888:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   1188a:	60e3      	str	r3, [r4, #12]
   1188c:	1883      	adds	r3, r0, r2
   1188e:	6123      	str	r3, [r4, #16]
   11890:	6161      	str	r1, [r4, #20]
   11892:	e6c7      	b.n	11624 <__kernel_rem_pio2+0x5f0>
   11894:	2580      	movs	r5, #128	; 0x80
   11896:	062d      	lsls	r5, r5, #24
   11898:	1943      	adds	r3, r0, r5
   1189a:	1c18      	adds	r0, r3, #0
   1189c:	e7d7      	b.n	1184e <__kernel_rem_pio2+0x81a>
   1189e:	4b05      	ldr	r3, [pc, #20]	; (118b4 <__kernel_rem_pio2+0x880>)
   118a0:	4a03      	ldr	r2, [pc, #12]	; (118b0 <__kernel_rem_pio2+0x87c>)
   118a2:	e69a      	b.n	115da <__kernel_rem_pio2+0x5a6>
   118a4:	4903      	ldr	r1, [pc, #12]	; (118b4 <__kernel_rem_pio2+0x880>)
   118a6:	4802      	ldr	r0, [pc, #8]	; (118b0 <__kernel_rem_pio2+0x87c>)
   118a8:	e759      	b.n	1175e <__kernel_rem_pio2+0x72a>
   118aa:	4902      	ldr	r1, [pc, #8]	; (118b4 <__kernel_rem_pio2+0x880>)
   118ac:	4800      	ldr	r0, [pc, #0]	; (118b0 <__kernel_rem_pio2+0x87c>)
   118ae:	e7cb      	b.n	11848 <__kernel_rem_pio2+0x814>
	...
   118b8:	41700000 	.word	0x41700000
   118bc:	00000000 	.word	0x00000000
   118c0:	3e700000 	.word	0x3e700000
   118c4:	00000000 	.word	0x00000000
   118c8:	c1700000 	.word	0xc1700000
   118cc:	00000000 	.word	0x00000000

000118d0 <__kernel_sin>:
   118d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   118d2:	b088      	sub	sp, #32
   118d4:	9200      	str	r2, [sp, #0]
   118d6:	9301      	str	r3, [sp, #4]
   118d8:	4a4d      	ldr	r2, [pc, #308]	; (11a10 <__kernel_sin+0x140>)
   118da:	4b4e      	ldr	r3, [pc, #312]	; (11a14 <__kernel_sin+0x144>)
   118dc:	4002      	ands	r2, r0
   118de:	9002      	str	r0, [sp, #8]
   118e0:	9103      	str	r1, [sp, #12]
   118e2:	429a      	cmp	r2, r3
   118e4:	dc03      	bgt.n	118ee <__kernel_sin+0x1e>
   118e6:	f001 f82b 	bl	12940 <____fixdfsi_from_thumb>
   118ea:	2800      	cmp	r0, #0
   118ec:	d070      	beq.n	119d0 <__kernel_sin+0x100>
   118ee:	9802      	ldr	r0, [sp, #8]
   118f0:	9903      	ldr	r1, [sp, #12]
   118f2:	1c02      	adds	r2, r0, #0
   118f4:	1c0b      	adds	r3, r1, #0
   118f6:	f001 f813 	bl	12920 <____muldf3_from_thumb>
   118fa:	1c06      	adds	r6, r0, #0
   118fc:	1c0f      	adds	r7, r1, #0
   118fe:	1c32      	adds	r2, r6, #0
   11900:	1c3b      	adds	r3, r7, #0
   11902:	9802      	ldr	r0, [sp, #8]
   11904:	9903      	ldr	r1, [sp, #12]
   11906:	f001 f80b 	bl	12920 <____muldf3_from_thumb>
   1190a:	4a43      	ldr	r2, [pc, #268]	; (11a18 <__kernel_sin+0x148>)
   1190c:	4b43      	ldr	r3, [pc, #268]	; (11a1c <__kernel_sin+0x14c>)
   1190e:	9006      	str	r0, [sp, #24]
   11910:	9107      	str	r1, [sp, #28]
   11912:	1c30      	adds	r0, r6, #0
   11914:	1c39      	adds	r1, r7, #0
   11916:	f001 f803 	bl	12920 <____muldf3_from_thumb>
   1191a:	4a41      	ldr	r2, [pc, #260]	; (11a20 <__kernel_sin+0x150>)
   1191c:	4b41      	ldr	r3, [pc, #260]	; (11a24 <__kernel_sin+0x154>)
   1191e:	f001 f80b 	bl	12938 <____subdf3_from_thumb>
   11922:	1c02      	adds	r2, r0, #0
   11924:	1c0b      	adds	r3, r1, #0
   11926:	1c30      	adds	r0, r6, #0
   11928:	1c39      	adds	r1, r7, #0
   1192a:	f000 fff9 	bl	12920 <____muldf3_from_thumb>
   1192e:	4a3e      	ldr	r2, [pc, #248]	; (11a28 <__kernel_sin+0x158>)
   11930:	4b3e      	ldr	r3, [pc, #248]	; (11a2c <__kernel_sin+0x15c>)
   11932:	f000 fff9 	bl	12928 <____adddf3_from_thumb>
   11936:	1c02      	adds	r2, r0, #0
   11938:	1c0b      	adds	r3, r1, #0
   1193a:	1c30      	adds	r0, r6, #0
   1193c:	1c39      	adds	r1, r7, #0
   1193e:	f000 ffef 	bl	12920 <____muldf3_from_thumb>
   11942:	4a3b      	ldr	r2, [pc, #236]	; (11a30 <__kernel_sin+0x160>)
   11944:	4b3b      	ldr	r3, [pc, #236]	; (11a34 <__kernel_sin+0x164>)
   11946:	f000 fff7 	bl	12938 <____subdf3_from_thumb>
   1194a:	1c02      	adds	r2, r0, #0
   1194c:	1c0b      	adds	r3, r1, #0
   1194e:	1c30      	adds	r0, r6, #0
   11950:	1c39      	adds	r1, r7, #0
   11952:	f000 ffe5 	bl	12920 <____muldf3_from_thumb>
   11956:	4a38      	ldr	r2, [pc, #224]	; (11a38 <__kernel_sin+0x168>)
   11958:	4b38      	ldr	r3, [pc, #224]	; (11a3c <__kernel_sin+0x16c>)
   1195a:	f000 ffe5 	bl	12928 <____adddf3_from_thumb>
   1195e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11960:	9004      	str	r0, [sp, #16]
   11962:	9105      	str	r1, [sp, #20]
   11964:	2b00      	cmp	r3, #0
   11966:	d039      	beq.n	119dc <__kernel_sin+0x10c>
   11968:	4a35      	ldr	r2, [pc, #212]	; (11a40 <__kernel_sin+0x170>)
   1196a:	4b36      	ldr	r3, [pc, #216]	; (11a44 <__kernel_sin+0x174>)
   1196c:	9800      	ldr	r0, [sp, #0]
   1196e:	9901      	ldr	r1, [sp, #4]
   11970:	f000 ffd6 	bl	12920 <____muldf3_from_thumb>
   11974:	9a04      	ldr	r2, [sp, #16]
   11976:	9b05      	ldr	r3, [sp, #20]
   11978:	1c04      	adds	r4, r0, #0
   1197a:	1c0d      	adds	r5, r1, #0
   1197c:	9806      	ldr	r0, [sp, #24]
   1197e:	9907      	ldr	r1, [sp, #28]
   11980:	f000 ffce 	bl	12920 <____muldf3_from_thumb>
   11984:	1c02      	adds	r2, r0, #0
   11986:	1c0b      	adds	r3, r1, #0
   11988:	1c20      	adds	r0, r4, #0
   1198a:	1c29      	adds	r1, r5, #0
   1198c:	f000 ffd4 	bl	12938 <____subdf3_from_thumb>
   11990:	1c02      	adds	r2, r0, #0
   11992:	1c0b      	adds	r3, r1, #0
   11994:	1c30      	adds	r0, r6, #0
   11996:	1c39      	adds	r1, r7, #0
   11998:	f000 ffc2 	bl	12920 <____muldf3_from_thumb>
   1199c:	9a00      	ldr	r2, [sp, #0]
   1199e:	9b01      	ldr	r3, [sp, #4]
   119a0:	f000 ffca 	bl	12938 <____subdf3_from_thumb>
   119a4:	4a28      	ldr	r2, [pc, #160]	; (11a48 <__kernel_sin+0x178>)
   119a6:	4b29      	ldr	r3, [pc, #164]	; (11a4c <__kernel_sin+0x17c>)
   119a8:	1c04      	adds	r4, r0, #0
   119aa:	1c0d      	adds	r5, r1, #0
   119ac:	9806      	ldr	r0, [sp, #24]
   119ae:	9907      	ldr	r1, [sp, #28]
   119b0:	f000 ffb6 	bl	12920 <____muldf3_from_thumb>
   119b4:	1c02      	adds	r2, r0, #0
   119b6:	1c0b      	adds	r3, r1, #0
   119b8:	1c20      	adds	r0, r4, #0
   119ba:	1c29      	adds	r1, r5, #0
   119bc:	f000 ffb4 	bl	12928 <____adddf3_from_thumb>
   119c0:	1c02      	adds	r2, r0, #0
   119c2:	1c0b      	adds	r3, r1, #0
   119c4:	9802      	ldr	r0, [sp, #8]
   119c6:	9903      	ldr	r1, [sp, #12]
   119c8:	f000 ffb6 	bl	12938 <____subdf3_from_thumb>
   119cc:	9002      	str	r0, [sp, #8]
   119ce:	9103      	str	r1, [sp, #12]
   119d0:	9802      	ldr	r0, [sp, #8]
   119d2:	9903      	ldr	r1, [sp, #12]
   119d4:	b008      	add	sp, #32
   119d6:	bcf0      	pop	{r4, r5, r6, r7}
   119d8:	bc04      	pop	{r2}
   119da:	4710      	bx	r2
   119dc:	9a04      	ldr	r2, [sp, #16]
   119de:	9b05      	ldr	r3, [sp, #20]
   119e0:	1c30      	adds	r0, r6, #0
   119e2:	1c39      	adds	r1, r7, #0
   119e4:	f000 ff9c 	bl	12920 <____muldf3_from_thumb>
   119e8:	4a17      	ldr	r2, [pc, #92]	; (11a48 <__kernel_sin+0x178>)
   119ea:	4b18      	ldr	r3, [pc, #96]	; (11a4c <__kernel_sin+0x17c>)
   119ec:	f000 ffa4 	bl	12938 <____subdf3_from_thumb>
   119f0:	1c02      	adds	r2, r0, #0
   119f2:	1c0b      	adds	r3, r1, #0
   119f4:	9806      	ldr	r0, [sp, #24]
   119f6:	9907      	ldr	r1, [sp, #28]
   119f8:	f000 ff92 	bl	12920 <____muldf3_from_thumb>
   119fc:	1c02      	adds	r2, r0, #0
   119fe:	1c0b      	adds	r3, r1, #0
   11a00:	9802      	ldr	r0, [sp, #8]
   11a02:	9903      	ldr	r1, [sp, #12]
   11a04:	f000 ff90 	bl	12928 <____adddf3_from_thumb>
   11a08:	9002      	str	r0, [sp, #8]
   11a0a:	9103      	str	r1, [sp, #12]
   11a0c:	e7e0      	b.n	119d0 <__kernel_sin+0x100>
   11a0e:	46c0      	nop			; (mov r8, r8)
   11a10:	7fffffff 	.word	0x7fffffff
   11a14:	3e3fffff 	.word	0x3e3fffff
   11a18:	3de5d93a 	.word	0x3de5d93a
   11a1c:	5acfd57c 	.word	0x5acfd57c
   11a20:	3e5ae5e6 	.word	0x3e5ae5e6
   11a24:	8a2b9ceb 	.word	0x8a2b9ceb
   11a28:	3ec71de3 	.word	0x3ec71de3
   11a2c:	57b1fe7d 	.word	0x57b1fe7d
   11a30:	3f2a01a0 	.word	0x3f2a01a0
   11a34:	19c161d5 	.word	0x19c161d5
   11a38:	3f811111 	.word	0x3f811111
   11a3c:	1110f8a6 	.word	0x1110f8a6
   11a40:	3fe00000 	.word	0x3fe00000
   11a44:	00000000 	.word	0x00000000
   11a48:	3fc55555 	.word	0x3fc55555
   11a4c:	55555549 	.word	0x55555549

00011a50 <atan>:
   11a50:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a52:	4657      	mov	r7, sl
   11a54:	4646      	mov	r6, r8
   11a56:	b4c0      	push	{r6, r7}
   11a58:	4baf      	ldr	r3, [pc, #700]	; (11d18 <atan+0x2c8>)
   11a5a:	1c05      	adds	r5, r0, #0
   11a5c:	401d      	ands	r5, r3
   11a5e:	4baf      	ldr	r3, [pc, #700]	; (11d1c <atan+0x2cc>)
   11a60:	b084      	sub	sp, #16
   11a62:	1c06      	adds	r6, r0, #0
   11a64:	1c0f      	adds	r7, r1, #0
   11a66:	4680      	mov	r8, r0
   11a68:	429d      	cmp	r5, r3
   11a6a:	dd14      	ble.n	11a96 <atan+0x46>
   11a6c:	4aac      	ldr	r2, [pc, #688]	; (11d20 <atan+0x2d0>)
   11a6e:	4295      	cmp	r5, r2
   11a70:	dc00      	bgt.n	11a74 <atan+0x24>
   11a72:	e0b8      	b.n	11be6 <atan+0x196>
   11a74:	1c30      	adds	r0, r6, #0
   11a76:	1c39      	adds	r1, r7, #0
   11a78:	1c32      	adds	r2, r6, #0
   11a7a:	1c3b      	adds	r3, r7, #0
   11a7c:	f000 ff54 	bl	12928 <____adddf3_from_thumb>
   11a80:	1c06      	adds	r6, r0, #0
   11a82:	1c0f      	adds	r7, r1, #0
   11a84:	1c30      	adds	r0, r6, #0
   11a86:	1c39      	adds	r1, r7, #0
   11a88:	b004      	add	sp, #16
   11a8a:	bc0c      	pop	{r2, r3}
   11a8c:	4690      	mov	r8, r2
   11a8e:	469a      	mov	sl, r3
   11a90:	bcf0      	pop	{r4, r5, r6, r7}
   11a92:	bc04      	pop	{r2}
   11a94:	4710      	bx	r2
   11a96:	4ba3      	ldr	r3, [pc, #652]	; (11d24 <atan+0x2d4>)
   11a98:	429d      	cmp	r5, r3
   11a9a:	dd00      	ble.n	11a9e <atan+0x4e>
   11a9c:	e0b7      	b.n	11c0e <atan+0x1be>
   11a9e:	4ba2      	ldr	r3, [pc, #648]	; (11d28 <atan+0x2d8>)
   11aa0:	429d      	cmp	r5, r3
   11aa2:	dc00      	bgt.n	11aa6 <atan+0x56>
   11aa4:	e0a7      	b.n	11bf6 <atan+0x1a6>
   11aa6:	2301      	movs	r3, #1
   11aa8:	4259      	negs	r1, r3
   11aaa:	468a      	mov	sl, r1
   11aac:	1c32      	adds	r2, r6, #0
   11aae:	1c3b      	adds	r3, r7, #0
   11ab0:	1c30      	adds	r0, r6, #0
   11ab2:	1c39      	adds	r1, r7, #0
   11ab4:	f000 ff34 	bl	12920 <____muldf3_from_thumb>
   11ab8:	1c02      	adds	r2, r0, #0
   11aba:	1c0b      	adds	r3, r1, #0
   11abc:	9000      	str	r0, [sp, #0]
   11abe:	9101      	str	r1, [sp, #4]
   11ac0:	f000 ff2e 	bl	12920 <____muldf3_from_thumb>
   11ac4:	4a99      	ldr	r2, [pc, #612]	; (11d2c <atan+0x2dc>)
   11ac6:	4b9a      	ldr	r3, [pc, #616]	; (11d30 <atan+0x2e0>)
   11ac8:	1c04      	adds	r4, r0, #0
   11aca:	1c0d      	adds	r5, r1, #0
   11acc:	f000 ff28 	bl	12920 <____muldf3_from_thumb>
   11ad0:	4a98      	ldr	r2, [pc, #608]	; (11d34 <atan+0x2e4>)
   11ad2:	4b99      	ldr	r3, [pc, #612]	; (11d38 <atan+0x2e8>)
   11ad4:	f000 ff28 	bl	12928 <____adddf3_from_thumb>
   11ad8:	1c02      	adds	r2, r0, #0
   11ada:	1c0b      	adds	r3, r1, #0
   11adc:	1c20      	adds	r0, r4, #0
   11ade:	1c29      	adds	r1, r5, #0
   11ae0:	f000 ff1e 	bl	12920 <____muldf3_from_thumb>
   11ae4:	4a95      	ldr	r2, [pc, #596]	; (11d3c <atan+0x2ec>)
   11ae6:	4b96      	ldr	r3, [pc, #600]	; (11d40 <atan+0x2f0>)
   11ae8:	f000 ff1e 	bl	12928 <____adddf3_from_thumb>
   11aec:	1c02      	adds	r2, r0, #0
   11aee:	1c0b      	adds	r3, r1, #0
   11af0:	1c20      	adds	r0, r4, #0
   11af2:	1c29      	adds	r1, r5, #0
   11af4:	f000 ff14 	bl	12920 <____muldf3_from_thumb>
   11af8:	4a92      	ldr	r2, [pc, #584]	; (11d44 <atan+0x2f4>)
   11afa:	4b93      	ldr	r3, [pc, #588]	; (11d48 <atan+0x2f8>)
   11afc:	f000 ff14 	bl	12928 <____adddf3_from_thumb>
   11b00:	1c02      	adds	r2, r0, #0
   11b02:	1c0b      	adds	r3, r1, #0
   11b04:	1c20      	adds	r0, r4, #0
   11b06:	1c29      	adds	r1, r5, #0
   11b08:	f000 ff0a 	bl	12920 <____muldf3_from_thumb>
   11b0c:	4a8f      	ldr	r2, [pc, #572]	; (11d4c <atan+0x2fc>)
   11b0e:	4b90      	ldr	r3, [pc, #576]	; (11d50 <atan+0x300>)
   11b10:	f000 ff0a 	bl	12928 <____adddf3_from_thumb>
   11b14:	1c02      	adds	r2, r0, #0
   11b16:	1c0b      	adds	r3, r1, #0
   11b18:	1c20      	adds	r0, r4, #0
   11b1a:	1c29      	adds	r1, r5, #0
   11b1c:	f000 ff00 	bl	12920 <____muldf3_from_thumb>
   11b20:	4a8c      	ldr	r2, [pc, #560]	; (11d54 <atan+0x304>)
   11b22:	4b8d      	ldr	r3, [pc, #564]	; (11d58 <atan+0x308>)
   11b24:	f000 ff00 	bl	12928 <____adddf3_from_thumb>
   11b28:	1c02      	adds	r2, r0, #0
   11b2a:	1c0b      	adds	r3, r1, #0
   11b2c:	9800      	ldr	r0, [sp, #0]
   11b2e:	9901      	ldr	r1, [sp, #4]
   11b30:	f000 fef6 	bl	12920 <____muldf3_from_thumb>
   11b34:	4a89      	ldr	r2, [pc, #548]	; (11d5c <atan+0x30c>)
   11b36:	4b8a      	ldr	r3, [pc, #552]	; (11d60 <atan+0x310>)
   11b38:	9002      	str	r0, [sp, #8]
   11b3a:	9103      	str	r1, [sp, #12]
   11b3c:	1c20      	adds	r0, r4, #0
   11b3e:	1c29      	adds	r1, r5, #0
   11b40:	f000 feee 	bl	12920 <____muldf3_from_thumb>
   11b44:	4a87      	ldr	r2, [pc, #540]	; (11d64 <atan+0x314>)
   11b46:	4b88      	ldr	r3, [pc, #544]	; (11d68 <atan+0x318>)
   11b48:	f000 fef6 	bl	12938 <____subdf3_from_thumb>
   11b4c:	1c02      	adds	r2, r0, #0
   11b4e:	1c0b      	adds	r3, r1, #0
   11b50:	1c20      	adds	r0, r4, #0
   11b52:	1c29      	adds	r1, r5, #0
   11b54:	f000 fee4 	bl	12920 <____muldf3_from_thumb>
   11b58:	4a84      	ldr	r2, [pc, #528]	; (11d6c <atan+0x31c>)
   11b5a:	4b85      	ldr	r3, [pc, #532]	; (11d70 <atan+0x320>)
   11b5c:	f000 feec 	bl	12938 <____subdf3_from_thumb>
   11b60:	1c02      	adds	r2, r0, #0
   11b62:	1c0b      	adds	r3, r1, #0
   11b64:	1c20      	adds	r0, r4, #0
   11b66:	1c29      	adds	r1, r5, #0
   11b68:	f000 feda 	bl	12920 <____muldf3_from_thumb>
   11b6c:	4a81      	ldr	r2, [pc, #516]	; (11d74 <atan+0x324>)
   11b6e:	4b82      	ldr	r3, [pc, #520]	; (11d78 <atan+0x328>)
   11b70:	f000 fee2 	bl	12938 <____subdf3_from_thumb>
   11b74:	1c02      	adds	r2, r0, #0
   11b76:	1c0b      	adds	r3, r1, #0
   11b78:	1c20      	adds	r0, r4, #0
   11b7a:	1c29      	adds	r1, r5, #0
   11b7c:	f000 fed0 	bl	12920 <____muldf3_from_thumb>
   11b80:	4a7e      	ldr	r2, [pc, #504]	; (11d7c <atan+0x32c>)
   11b82:	4b7f      	ldr	r3, [pc, #508]	; (11d80 <atan+0x330>)
   11b84:	f000 fed8 	bl	12938 <____subdf3_from_thumb>
   11b88:	1c02      	adds	r2, r0, #0
   11b8a:	1c0b      	adds	r3, r1, #0
   11b8c:	1c20      	adds	r0, r4, #0
   11b8e:	1c29      	adds	r1, r5, #0
   11b90:	f000 fec6 	bl	12920 <____muldf3_from_thumb>
   11b94:	1c0b      	adds	r3, r1, #0
   11b96:	4651      	mov	r1, sl
   11b98:	1c02      	adds	r2, r0, #0
   11b9a:	2900      	cmp	r1, #0
   11b9c:	db61      	blt.n	11c62 <atan+0x212>
   11b9e:	4651      	mov	r1, sl
   11ba0:	00cc      	lsls	r4, r1, #3
   11ba2:	9802      	ldr	r0, [sp, #8]
   11ba4:	9903      	ldr	r1, [sp, #12]
   11ba6:	f000 febf 	bl	12928 <____adddf3_from_thumb>
   11baa:	1c02      	adds	r2, r0, #0
   11bac:	1c0b      	adds	r3, r1, #0
   11bae:	1c30      	adds	r0, r6, #0
   11bb0:	1c39      	adds	r1, r7, #0
   11bb2:	f000 feb5 	bl	12920 <____muldf3_from_thumb>
   11bb6:	4d73      	ldr	r5, [pc, #460]	; (11d84 <atan+0x334>)
   11bb8:	4b73      	ldr	r3, [pc, #460]	; (11d88 <atan+0x338>)
   11bba:	1965      	adds	r5, r4, r5
   11bbc:	18e4      	adds	r4, r4, r3
   11bbe:	6822      	ldr	r2, [r4, #0]
   11bc0:	6863      	ldr	r3, [r4, #4]
   11bc2:	f000 feb9 	bl	12938 <____subdf3_from_thumb>
   11bc6:	1c32      	adds	r2, r6, #0
   11bc8:	1c3b      	adds	r3, r7, #0
   11bca:	f000 feb5 	bl	12938 <____subdf3_from_thumb>
   11bce:	1c02      	adds	r2, r0, #0
   11bd0:	1c0b      	adds	r3, r1, #0
   11bd2:	6828      	ldr	r0, [r5, #0]
   11bd4:	6869      	ldr	r1, [r5, #4]
   11bd6:	f000 feaf 	bl	12938 <____subdf3_from_thumb>
   11bda:	4642      	mov	r2, r8
   11bdc:	2a00      	cmp	r2, #0
   11bde:	db37      	blt.n	11c50 <atan+0x200>
   11be0:	1c06      	adds	r6, r0, #0
   11be2:	1c0f      	adds	r7, r1, #0
   11be4:	e74e      	b.n	11a84 <atan+0x34>
   11be6:	4295      	cmp	r5, r2
   11be8:	d038      	beq.n	11c5c <atan+0x20c>
   11bea:	4641      	mov	r1, r8
   11bec:	2900      	cmp	r1, #0
   11bee:	dd59      	ble.n	11ca4 <atan+0x254>
   11bf0:	4e66      	ldr	r6, [pc, #408]	; (11d8c <atan+0x33c>)
   11bf2:	4f67      	ldr	r7, [pc, #412]	; (11d90 <atan+0x340>)
   11bf4:	e746      	b.n	11a84 <atan+0x34>
   11bf6:	4a67      	ldr	r2, [pc, #412]	; (11d94 <atan+0x344>)
   11bf8:	4b67      	ldr	r3, [pc, #412]	; (11d98 <atan+0x348>)
   11bfa:	f000 fe95 	bl	12928 <____adddf3_from_thumb>
   11bfe:	4a67      	ldr	r2, [pc, #412]	; (11d9c <atan+0x34c>)
   11c00:	4b67      	ldr	r3, [pc, #412]	; (11da0 <atan+0x350>)
   11c02:	f000 fea5 	bl	12950 <____gtdf2_from_thumb>
   11c06:	2800      	cmp	r0, #0
   11c08:	dd00      	ble.n	11c0c <atan+0x1bc>
   11c0a:	e73b      	b.n	11a84 <atan+0x34>
   11c0c:	e74b      	b.n	11aa6 <atan+0x56>
   11c0e:	f000 f8df 	bl	11dd0 <fabs>
   11c12:	4b64      	ldr	r3, [pc, #400]	; (11da4 <atan+0x354>)
   11c14:	1c06      	adds	r6, r0, #0
   11c16:	1c0f      	adds	r7, r1, #0
   11c18:	429d      	cmp	r5, r3
   11c1a:	dc35      	bgt.n	11c88 <atan+0x238>
   11c1c:	4b62      	ldr	r3, [pc, #392]	; (11da8 <atan+0x358>)
   11c1e:	429d      	cmp	r5, r3
   11c20:	dd43      	ble.n	11caa <atan+0x25a>
   11c22:	4a5e      	ldr	r2, [pc, #376]	; (11d9c <atan+0x34c>)
   11c24:	4b5e      	ldr	r3, [pc, #376]	; (11da0 <atan+0x350>)
   11c26:	f000 fe87 	bl	12938 <____subdf3_from_thumb>
   11c2a:	4a5c      	ldr	r2, [pc, #368]	; (11d9c <atan+0x34c>)
   11c2c:	4b5c      	ldr	r3, [pc, #368]	; (11da0 <atan+0x350>)
   11c2e:	1c04      	adds	r4, r0, #0
   11c30:	1c0d      	adds	r5, r1, #0
   11c32:	1c30      	adds	r0, r6, #0
   11c34:	1c39      	adds	r1, r7, #0
   11c36:	f000 fe77 	bl	12928 <____adddf3_from_thumb>
   11c3a:	1c0b      	adds	r3, r1, #0
   11c3c:	1c02      	adds	r2, r0, #0
   11c3e:	1c29      	adds	r1, r5, #0
   11c40:	1c20      	adds	r0, r4, #0
   11c42:	f000 fe55 	bl	128f0 <____divdf3_from_thumb>
   11c46:	2301      	movs	r3, #1
   11c48:	1c06      	adds	r6, r0, #0
   11c4a:	1c0f      	adds	r7, r1, #0
   11c4c:	469a      	mov	sl, r3
   11c4e:	e72d      	b.n	11aac <atan+0x5c>
   11c50:	2280      	movs	r2, #128	; 0x80
   11c52:	0612      	lsls	r2, r2, #24
   11c54:	1883      	adds	r3, r0, r2
   11c56:	1c1e      	adds	r6, r3, #0
   11c58:	1c0f      	adds	r7, r1, #0
   11c5a:	e713      	b.n	11a84 <atan+0x34>
   11c5c:	2900      	cmp	r1, #0
   11c5e:	d0c4      	beq.n	11bea <atan+0x19a>
   11c60:	e708      	b.n	11a74 <atan+0x24>
   11c62:	9802      	ldr	r0, [sp, #8]
   11c64:	9903      	ldr	r1, [sp, #12]
   11c66:	f000 fe5f 	bl	12928 <____adddf3_from_thumb>
   11c6a:	1c02      	adds	r2, r0, #0
   11c6c:	1c0b      	adds	r3, r1, #0
   11c6e:	1c30      	adds	r0, r6, #0
   11c70:	1c39      	adds	r1, r7, #0
   11c72:	f000 fe55 	bl	12920 <____muldf3_from_thumb>
   11c76:	1c02      	adds	r2, r0, #0
   11c78:	1c0b      	adds	r3, r1, #0
   11c7a:	1c30      	adds	r0, r6, #0
   11c7c:	1c39      	adds	r1, r7, #0
   11c7e:	f000 fe5b 	bl	12938 <____subdf3_from_thumb>
   11c82:	1c06      	adds	r6, r0, #0
   11c84:	1c0f      	adds	r7, r1, #0
   11c86:	e6fd      	b.n	11a84 <atan+0x34>
   11c88:	4b48      	ldr	r3, [pc, #288]	; (11dac <atan+0x35c>)
   11c8a:	429d      	cmp	r5, r3
   11c8c:	dd28      	ble.n	11ce0 <atan+0x290>
   11c8e:	1c32      	adds	r2, r6, #0
   11c90:	1c3b      	adds	r3, r7, #0
   11c92:	4847      	ldr	r0, [pc, #284]	; (11db0 <atan+0x360>)
   11c94:	4947      	ldr	r1, [pc, #284]	; (11db4 <atan+0x364>)
   11c96:	f000 fe2b 	bl	128f0 <____divdf3_from_thumb>
   11c9a:	2203      	movs	r2, #3
   11c9c:	1c06      	adds	r6, r0, #0
   11c9e:	1c0f      	adds	r7, r1, #0
   11ca0:	4692      	mov	sl, r2
   11ca2:	e703      	b.n	11aac <atan+0x5c>
   11ca4:	4e44      	ldr	r6, [pc, #272]	; (11db8 <atan+0x368>)
   11ca6:	4f45      	ldr	r7, [pc, #276]	; (11dbc <atan+0x36c>)
   11ca8:	e6ec      	b.n	11a84 <atan+0x34>
   11caa:	1c32      	adds	r2, r6, #0
   11cac:	1c3b      	adds	r3, r7, #0
   11cae:	f000 fe3b 	bl	12928 <____adddf3_from_thumb>
   11cb2:	4a3a      	ldr	r2, [pc, #232]	; (11d9c <atan+0x34c>)
   11cb4:	4b3a      	ldr	r3, [pc, #232]	; (11da0 <atan+0x350>)
   11cb6:	f000 fe3f 	bl	12938 <____subdf3_from_thumb>
   11cba:	4a41      	ldr	r2, [pc, #260]	; (11dc0 <atan+0x370>)
   11cbc:	4b41      	ldr	r3, [pc, #260]	; (11dc4 <atan+0x374>)
   11cbe:	1c04      	adds	r4, r0, #0
   11cc0:	1c0d      	adds	r5, r1, #0
   11cc2:	1c30      	adds	r0, r6, #0
   11cc4:	1c39      	adds	r1, r7, #0
   11cc6:	f000 fe2f 	bl	12928 <____adddf3_from_thumb>
   11cca:	1c02      	adds	r2, r0, #0
   11ccc:	1c0b      	adds	r3, r1, #0
   11cce:	1c20      	adds	r0, r4, #0
   11cd0:	1c29      	adds	r1, r5, #0
   11cd2:	f000 fe0d 	bl	128f0 <____divdf3_from_thumb>
   11cd6:	2200      	movs	r2, #0
   11cd8:	1c06      	adds	r6, r0, #0
   11cda:	1c0f      	adds	r7, r1, #0
   11cdc:	4692      	mov	sl, r2
   11cde:	e6e5      	b.n	11aac <atan+0x5c>
   11ce0:	4a39      	ldr	r2, [pc, #228]	; (11dc8 <atan+0x378>)
   11ce2:	4b3a      	ldr	r3, [pc, #232]	; (11dcc <atan+0x37c>)
   11ce4:	f000 fe28 	bl	12938 <____subdf3_from_thumb>
   11ce8:	4a37      	ldr	r2, [pc, #220]	; (11dc8 <atan+0x378>)
   11cea:	4b38      	ldr	r3, [pc, #224]	; (11dcc <atan+0x37c>)
   11cec:	1c04      	adds	r4, r0, #0
   11cee:	1c0d      	adds	r5, r1, #0
   11cf0:	1c30      	adds	r0, r6, #0
   11cf2:	1c39      	adds	r1, r7, #0
   11cf4:	f000 fe14 	bl	12920 <____muldf3_from_thumb>
   11cf8:	4a28      	ldr	r2, [pc, #160]	; (11d9c <atan+0x34c>)
   11cfa:	4b29      	ldr	r3, [pc, #164]	; (11da0 <atan+0x350>)
   11cfc:	f000 fe14 	bl	12928 <____adddf3_from_thumb>
   11d00:	1c02      	adds	r2, r0, #0
   11d02:	1c0b      	adds	r3, r1, #0
   11d04:	1c20      	adds	r0, r4, #0
   11d06:	1c29      	adds	r1, r5, #0
   11d08:	f000 fdf2 	bl	128f0 <____divdf3_from_thumb>
   11d0c:	1c0f      	adds	r7, r1, #0
   11d0e:	2102      	movs	r1, #2
   11d10:	1c06      	adds	r6, r0, #0
   11d12:	468a      	mov	sl, r1
   11d14:	e6ca      	b.n	11aac <atan+0x5c>
   11d16:	46c0      	nop			; (mov r8, r8)
   11d18:	7fffffff 	.word	0x7fffffff
   11d1c:	440fffff 	.word	0x440fffff
   11d20:	7ff00000 	.word	0x7ff00000
   11d24:	3fdbffff 	.word	0x3fdbffff
   11d28:	3e1fffff 	.word	0x3e1fffff
   11d2c:	3f90ad3a 	.word	0x3f90ad3a
   11d30:	e322da11 	.word	0xe322da11
   11d34:	3fa97b4b 	.word	0x3fa97b4b
   11d38:	24760deb 	.word	0x24760deb
   11d3c:	3fb10d66 	.word	0x3fb10d66
   11d40:	a0d03d51 	.word	0xa0d03d51
   11d44:	3fb745cd 	.word	0x3fb745cd
   11d48:	c54c206e 	.word	0xc54c206e
   11d4c:	3fc24924 	.word	0x3fc24924
   11d50:	920083ff 	.word	0x920083ff
   11d54:	3fd55555 	.word	0x3fd55555
   11d58:	5555550d 	.word	0x5555550d
   11d5c:	bfa2b444 	.word	0xbfa2b444
   11d60:	2c6a6c2f 	.word	0x2c6a6c2f
   11d64:	3fadde2d 	.word	0x3fadde2d
   11d68:	52defd9a 	.word	0x52defd9a
   11d6c:	3fb3b0f2 	.word	0x3fb3b0f2
   11d70:	af749a6d 	.word	0xaf749a6d
   11d74:	3fbc71c6 	.word	0x3fbc71c6
   11d78:	fe231671 	.word	0xfe231671
   11d7c:	3fc99999 	.word	0x3fc99999
   11d80:	9998ebc4 	.word	0x9998ebc4
   11d84:	00012fa4 	.word	0x00012fa4
   11d88:	00012fc4 	.word	0x00012fc4
   11d8c:	3ff921fb 	.word	0x3ff921fb
   11d90:	54442d18 	.word	0x54442d18
   11d94:	7e37e43c 	.word	0x7e37e43c
   11d98:	8800759c 	.word	0x8800759c
   11d9c:	3ff00000 	.word	0x3ff00000
   11da0:	00000000 	.word	0x00000000
   11da4:	3ff2ffff 	.word	0x3ff2ffff
   11da8:	3fe5ffff 	.word	0x3fe5ffff
   11dac:	40037fff 	.word	0x40037fff
   11db0:	bff00000 	.word	0xbff00000
   11db4:	00000000 	.word	0x00000000
   11db8:	bff921fb 	.word	0xbff921fb
   11dbc:	54442d18 	.word	0x54442d18
   11dc0:	40000000 	.word	0x40000000
   11dc4:	00000000 	.word	0x00000000
   11dc8:	3ff80000 	.word	0x3ff80000
   11dcc:	00000000 	.word	0x00000000

00011dd0 <fabs>:
   11dd0:	b510      	push	{r4, lr}
   11dd2:	1c03      	adds	r3, r0, #0
   11dd4:	4803      	ldr	r0, [pc, #12]	; (11de4 <fabs+0x14>)
   11dd6:	1c0a      	adds	r2, r1, #0
   11dd8:	4003      	ands	r3, r0
   11dda:	1c18      	adds	r0, r3, #0
   11ddc:	1c11      	adds	r1, r2, #0
   11dde:	bc10      	pop	{r4}
   11de0:	bc04      	pop	{r2}
   11de2:	4710      	bx	r2
   11de4:	7fffffff 	.word	0x7fffffff

00011de8 <floor>:
   11de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11dea:	465f      	mov	r7, fp
   11dec:	4656      	mov	r6, sl
   11dee:	464d      	mov	r5, r9
   11df0:	4644      	mov	r4, r8
   11df2:	b4f0      	push	{r4, r5, r6, r7}
   11df4:	2200      	movs	r2, #0
   11df6:	2300      	movs	r3, #0
   11df8:	b082      	sub	sp, #8
   11dfa:	9200      	str	r2, [sp, #0]
   11dfc:	9301      	str	r3, [sp, #4]
   11dfe:	0043      	lsls	r3, r0, #1
   11e00:	0d5a      	lsrs	r2, r3, #21
   11e02:	4b4b      	ldr	r3, [pc, #300]	; (11f30 <floor+0x148>)
   11e04:	189b      	adds	r3, r3, r2
   11e06:	1c04      	adds	r4, r0, #0
   11e08:	1c0d      	adds	r5, r1, #0
   11e0a:	1c06      	adds	r6, r0, #0
   11e0c:	4682      	mov	sl, r0
   11e0e:	4689      	mov	r9, r1
   11e10:	4698      	mov	r8, r3
   11e12:	2b13      	cmp	r3, #19
   11e14:	dc2e      	bgt.n	11e74 <floor+0x8c>
   11e16:	2b00      	cmp	r3, #0
   11e18:	db53      	blt.n	11ec2 <floor+0xda>
   11e1a:	4b46      	ldr	r3, [pc, #280]	; (11f34 <floor+0x14c>)
   11e1c:	4642      	mov	r2, r8
   11e1e:	4113      	asrs	r3, r2
   11e20:	469b      	mov	fp, r3
   11e22:	1c0a      	adds	r2, r1, #0
   11e24:	4003      	ands	r3, r0
   11e26:	4682      	mov	sl, r0
   11e28:	4689      	mov	r9, r1
   11e2a:	431a      	orrs	r2, r3
   11e2c:	d017      	beq.n	11e5e <floor+0x76>
   11e2e:	4a42      	ldr	r2, [pc, #264]	; (11f38 <floor+0x150>)
   11e30:	4b42      	ldr	r3, [pc, #264]	; (11f3c <floor+0x154>)
   11e32:	f000 fd79 	bl	12928 <____adddf3_from_thumb>
   11e36:	4a42      	ldr	r2, [pc, #264]	; (11f40 <floor+0x158>)
   11e38:	4b42      	ldr	r3, [pc, #264]	; (11f44 <floor+0x15c>)
   11e3a:	f000 fd89 	bl	12950 <____gtdf2_from_thumb>
   11e3e:	2800      	cmp	r0, #0
   11e40:	dd07      	ble.n	11e52 <floor+0x6a>
   11e42:	2c00      	cmp	r4, #0
   11e44:	db4d      	blt.n	11ee2 <floor+0xfa>
   11e46:	4652      	mov	r2, sl
   11e48:	465b      	mov	r3, fp
   11e4a:	439a      	bics	r2, r3
   11e4c:	2400      	movs	r4, #0
   11e4e:	4692      	mov	sl, r2
   11e50:	46a1      	mov	r9, r4
   11e52:	4654      	mov	r4, sl
   11e54:	464a      	mov	r2, r9
   11e56:	9400      	str	r4, [sp, #0]
   11e58:	9201      	str	r2, [sp, #4]
   11e5a:	9c00      	ldr	r4, [sp, #0]
   11e5c:	9d01      	ldr	r5, [sp, #4]
   11e5e:	1c29      	adds	r1, r5, #0
   11e60:	1c20      	adds	r0, r4, #0
   11e62:	b002      	add	sp, #8
   11e64:	bc3c      	pop	{r2, r3, r4, r5}
   11e66:	4690      	mov	r8, r2
   11e68:	4699      	mov	r9, r3
   11e6a:	46a2      	mov	sl, r4
   11e6c:	46ab      	mov	fp, r5
   11e6e:	bcf0      	pop	{r4, r5, r6, r7}
   11e70:	bc04      	pop	{r2}
   11e72:	4710      	bx	r2
   11e74:	2b33      	cmp	r3, #51	; 0x33
   11e76:	dc19      	bgt.n	11eac <floor+0xc4>
   11e78:	4b33      	ldr	r3, [pc, #204]	; (11f48 <floor+0x160>)
   11e7a:	18d2      	adds	r2, r2, r3
   11e7c:	2301      	movs	r3, #1
   11e7e:	425b      	negs	r3, r3
   11e80:	40d3      	lsrs	r3, r2
   11e82:	469b      	mov	fp, r3
   11e84:	4689      	mov	r9, r1
   11e86:	420b      	tst	r3, r1
   11e88:	d0e9      	beq.n	11e5e <floor+0x76>
   11e8a:	4a2b      	ldr	r2, [pc, #172]	; (11f38 <floor+0x150>)
   11e8c:	4b2b      	ldr	r3, [pc, #172]	; (11f3c <floor+0x154>)
   11e8e:	f000 fd4b 	bl	12928 <____adddf3_from_thumb>
   11e92:	4a2b      	ldr	r2, [pc, #172]	; (11f40 <floor+0x158>)
   11e94:	4b2b      	ldr	r3, [pc, #172]	; (11f44 <floor+0x15c>)
   11e96:	f000 fd5b 	bl	12950 <____gtdf2_from_thumb>
   11e9a:	2800      	cmp	r0, #0
   11e9c:	dd27      	ble.n	11eee <floor+0x106>
   11e9e:	2c00      	cmp	r4, #0
   11ea0:	db27      	blt.n	11ef2 <floor+0x10a>
   11ea2:	464a      	mov	r2, r9
   11ea4:	465b      	mov	r3, fp
   11ea6:	439a      	bics	r2, r3
   11ea8:	4691      	mov	r9, r2
   11eaa:	e7d2      	b.n	11e52 <floor+0x6a>
   11eac:	2380      	movs	r3, #128	; 0x80
   11eae:	00db      	lsls	r3, r3, #3
   11eb0:	4598      	cmp	r8, r3
   11eb2:	d1d4      	bne.n	11e5e <floor+0x76>
   11eb4:	1c22      	adds	r2, r4, #0
   11eb6:	1c2b      	adds	r3, r5, #0
   11eb8:	f000 fd36 	bl	12928 <____adddf3_from_thumb>
   11ebc:	1c04      	adds	r4, r0, #0
   11ebe:	1c0d      	adds	r5, r1, #0
   11ec0:	e7cd      	b.n	11e5e <floor+0x76>
   11ec2:	4a1d      	ldr	r2, [pc, #116]	; (11f38 <floor+0x150>)
   11ec4:	4b1d      	ldr	r3, [pc, #116]	; (11f3c <floor+0x154>)
   11ec6:	f000 fd2f 	bl	12928 <____adddf3_from_thumb>
   11eca:	4a1d      	ldr	r2, [pc, #116]	; (11f40 <floor+0x158>)
   11ecc:	4b1d      	ldr	r3, [pc, #116]	; (11f44 <floor+0x15c>)
   11ece:	f000 fd3f 	bl	12950 <____gtdf2_from_thumb>
   11ed2:	2800      	cmp	r0, #0
   11ed4:	ddbd      	ble.n	11e52 <floor+0x6a>
   11ed6:	2c00      	cmp	r4, #0
   11ed8:	db1a      	blt.n	11f10 <floor+0x128>
   11eda:	2200      	movs	r2, #0
   11edc:	4692      	mov	sl, r2
   11ede:	4691      	mov	r9, r2
   11ee0:	e7b7      	b.n	11e52 <floor+0x6a>
   11ee2:	2380      	movs	r3, #128	; 0x80
   11ee4:	035b      	lsls	r3, r3, #13
   11ee6:	4644      	mov	r4, r8
   11ee8:	4123      	asrs	r3, r4
   11eea:	449a      	add	sl, r3
   11eec:	e7ab      	b.n	11e46 <floor+0x5e>
   11eee:	46a2      	mov	sl, r4
   11ef0:	e7af      	b.n	11e52 <floor+0x6a>
   11ef2:	4644      	mov	r4, r8
   11ef4:	2c14      	cmp	r4, #20
   11ef6:	d018      	beq.n	11f2a <floor+0x142>
   11ef8:	4643      	mov	r3, r8
   11efa:	2234      	movs	r2, #52	; 0x34
   11efc:	1ad2      	subs	r2, r2, r3
   11efe:	2301      	movs	r3, #1
   11f00:	4093      	lsls	r3, r2
   11f02:	444b      	add	r3, r9
   11f04:	4599      	cmp	r9, r3
   11f06:	d901      	bls.n	11f0c <floor+0x124>
   11f08:	2401      	movs	r4, #1
   11f0a:	44a2      	add	sl, r4
   11f0c:	4699      	mov	r9, r3
   11f0e:	e7c8      	b.n	11ea2 <floor+0xba>
   11f10:	4b0e      	ldr	r3, [pc, #56]	; (11f4c <floor+0x164>)
   11f12:	1c2a      	adds	r2, r5, #0
   11f14:	4033      	ands	r3, r6
   11f16:	431a      	orrs	r2, r3
   11f18:	d004      	beq.n	11f24 <floor+0x13c>
   11f1a:	4b0d      	ldr	r3, [pc, #52]	; (11f50 <floor+0x168>)
   11f1c:	2400      	movs	r4, #0
   11f1e:	469a      	mov	sl, r3
   11f20:	46a1      	mov	r9, r4
   11f22:	e796      	b.n	11e52 <floor+0x6a>
   11f24:	46b2      	mov	sl, r6
   11f26:	46a9      	mov	r9, r5
   11f28:	e793      	b.n	11e52 <floor+0x6a>
   11f2a:	2201      	movs	r2, #1
   11f2c:	4492      	add	sl, r2
   11f2e:	e7b8      	b.n	11ea2 <floor+0xba>
   11f30:	fffffc01 	.word	0xfffffc01
   11f34:	000fffff 	.word	0x000fffff
   11f38:	7e37e43c 	.word	0x7e37e43c
   11f3c:	8800759c 	.word	0x8800759c
	...
   11f48:	fffffbed 	.word	0xfffffbed
   11f4c:	7fffffff 	.word	0x7fffffff
   11f50:	bff00000 	.word	0xbff00000

00011f54 <matherr>:
   11f54:	2000      	movs	r0, #0
   11f56:	4770      	bx	lr

00011f58 <scalbn>:
   11f58:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f5a:	4647      	mov	r7, r8
   11f5c:	b480      	push	{r7}
   11f5e:	4f3b      	ldr	r7, [pc, #236]	; (1204c <scalbn+0xf4>)
   11f60:	1c03      	adds	r3, r0, #0
   11f62:	403b      	ands	r3, r7
   11f64:	4690      	mov	r8, r2
   11f66:	151a      	asrs	r2, r3, #20
   11f68:	1c05      	adds	r5, r0, #0
   11f6a:	1c0e      	adds	r6, r1, #0
   11f6c:	2a00      	cmp	r2, #0
   11f6e:	d121      	bne.n	11fb4 <scalbn+0x5c>
   11f70:	4b37      	ldr	r3, [pc, #220]	; (12050 <scalbn+0xf8>)
   11f72:	4003      	ands	r3, r0
   11f74:	4319      	orrs	r1, r3
   11f76:	d011      	beq.n	11f9c <scalbn+0x44>
   11f78:	1c28      	adds	r0, r5, #0
   11f7a:	1c31      	adds	r1, r6, #0
   11f7c:	4a35      	ldr	r2, [pc, #212]	; (12054 <scalbn+0xfc>)
   11f7e:	4b36      	ldr	r3, [pc, #216]	; (12058 <scalbn+0x100>)
   11f80:	f000 fcce 	bl	12920 <____muldf3_from_thumb>
   11f84:	4b35      	ldr	r3, [pc, #212]	; (1205c <scalbn+0x104>)
   11f86:	1c05      	adds	r5, r0, #0
   11f88:	1c0e      	adds	r6, r1, #0
   11f8a:	4598      	cmp	r8, r3
   11f8c:	da0d      	bge.n	11faa <scalbn+0x52>
   11f8e:	1c28      	adds	r0, r5, #0
   11f90:	4a33      	ldr	r2, [pc, #204]	; (12060 <scalbn+0x108>)
   11f92:	4b34      	ldr	r3, [pc, #208]	; (12064 <scalbn+0x10c>)
   11f94:	f000 fcc4 	bl	12920 <____muldf3_from_thumb>
   11f98:	1c05      	adds	r5, r0, #0
   11f9a:	1c0e      	adds	r6, r1, #0
   11f9c:	1c28      	adds	r0, r5, #0
   11f9e:	1c31      	adds	r1, r6, #0
   11fa0:	bc04      	pop	{r2}
   11fa2:	4690      	mov	r8, r2
   11fa4:	bcf0      	pop	{r4, r5, r6, r7}
   11fa6:	bc04      	pop	{r2}
   11fa8:	4710      	bx	r2
   11faa:	1c03      	adds	r3, r0, #0
   11fac:	403b      	ands	r3, r7
   11fae:	151b      	asrs	r3, r3, #20
   11fb0:	1c1a      	adds	r2, r3, #0
   11fb2:	3a36      	subs	r2, #54	; 0x36
   11fb4:	4b2c      	ldr	r3, [pc, #176]	; (12068 <scalbn+0x110>)
   11fb6:	429a      	cmp	r2, r3
   11fb8:	d00e      	beq.n	11fd8 <scalbn+0x80>
   11fba:	4643      	mov	r3, r8
   11fbc:	18d7      	adds	r7, r2, r3
   11fbe:	4b2b      	ldr	r3, [pc, #172]	; (1206c <scalbn+0x114>)
   11fc0:	429f      	cmp	r7, r3
   11fc2:	dc12      	bgt.n	11fea <scalbn+0x92>
   11fc4:	2f00      	cmp	r7, #0
   11fc6:	dd1d      	ble.n	12004 <scalbn+0xac>
   11fc8:	4a29      	ldr	r2, [pc, #164]	; (12070 <scalbn+0x118>)
   11fca:	1c01      	adds	r1, r0, #0
   11fcc:	4011      	ands	r1, r2
   11fce:	1c0b      	adds	r3, r1, #0
   11fd0:	053a      	lsls	r2, r7, #20
   11fd2:	4313      	orrs	r3, r2
   11fd4:	1c1d      	adds	r5, r3, #0
   11fd6:	e7e1      	b.n	11f9c <scalbn+0x44>
   11fd8:	1c28      	adds	r0, r5, #0
   11fda:	1c31      	adds	r1, r6, #0
   11fdc:	1c2a      	adds	r2, r5, #0
   11fde:	1c33      	adds	r3, r6, #0
   11fe0:	f000 fca2 	bl	12928 <____adddf3_from_thumb>
   11fe4:	1c05      	adds	r5, r0, #0
   11fe6:	1c0e      	adds	r6, r1, #0
   11fe8:	e7d8      	b.n	11f9c <scalbn+0x44>
   11fea:	1c2a      	adds	r2, r5, #0
   11fec:	1c33      	adds	r3, r6, #0
   11fee:	4821      	ldr	r0, [pc, #132]	; (12074 <scalbn+0x11c>)
   11ff0:	4921      	ldr	r1, [pc, #132]	; (12078 <scalbn+0x120>)
   11ff2:	f000 f849 	bl	12088 <copysign>
   11ff6:	4a1f      	ldr	r2, [pc, #124]	; (12074 <scalbn+0x11c>)
   11ff8:	4b1f      	ldr	r3, [pc, #124]	; (12078 <scalbn+0x120>)
   11ffa:	f000 fc91 	bl	12920 <____muldf3_from_thumb>
   11ffe:	1c05      	adds	r5, r0, #0
   12000:	1c0e      	adds	r6, r1, #0
   12002:	e7cb      	b.n	11f9c <scalbn+0x44>
   12004:	1c3b      	adds	r3, r7, #0
   12006:	3336      	adds	r3, #54	; 0x36
   12008:	dc0f      	bgt.n	1202a <scalbn+0xd2>
   1200a:	4b1c      	ldr	r3, [pc, #112]	; (1207c <scalbn+0x124>)
   1200c:	4598      	cmp	r8, r3
   1200e:	dcec      	bgt.n	11fea <scalbn+0x92>
   12010:	1c2a      	adds	r2, r5, #0
   12012:	1c33      	adds	r3, r6, #0
   12014:	4812      	ldr	r0, [pc, #72]	; (12060 <scalbn+0x108>)
   12016:	4913      	ldr	r1, [pc, #76]	; (12064 <scalbn+0x10c>)
   12018:	f000 f836 	bl	12088 <copysign>
   1201c:	4a10      	ldr	r2, [pc, #64]	; (12060 <scalbn+0x108>)
   1201e:	4b11      	ldr	r3, [pc, #68]	; (12064 <scalbn+0x10c>)
   12020:	f000 fc7e 	bl	12920 <____muldf3_from_thumb>
   12024:	1c05      	adds	r5, r0, #0
   12026:	1c0e      	adds	r6, r1, #0
   12028:	e7b8      	b.n	11f9c <scalbn+0x44>
   1202a:	4b11      	ldr	r3, [pc, #68]	; (12070 <scalbn+0x118>)
   1202c:	4018      	ands	r0, r3
   1202e:	1c3b      	adds	r3, r7, #0
   12030:	3336      	adds	r3, #54	; 0x36
   12032:	051b      	lsls	r3, r3, #20
   12034:	1c01      	adds	r1, r0, #0
   12036:	4319      	orrs	r1, r3
   12038:	1c08      	adds	r0, r1, #0
   1203a:	4a11      	ldr	r2, [pc, #68]	; (12080 <scalbn+0x128>)
   1203c:	4b11      	ldr	r3, [pc, #68]	; (12084 <scalbn+0x12c>)
   1203e:	1c31      	adds	r1, r6, #0
   12040:	f000 fc6e 	bl	12920 <____muldf3_from_thumb>
   12044:	1c05      	adds	r5, r0, #0
   12046:	1c0e      	adds	r6, r1, #0
   12048:	e7a8      	b.n	11f9c <scalbn+0x44>
   1204a:	46c0      	nop			; (mov r8, r8)
   1204c:	7ff00000 	.word	0x7ff00000
   12050:	7fffffff 	.word	0x7fffffff
   12054:	43500000 	.word	0x43500000
   12058:	00000000 	.word	0x00000000
   1205c:	ffff3cb0 	.word	0xffff3cb0
   12060:	01a56e1f 	.word	0x01a56e1f
   12064:	c2f8f359 	.word	0xc2f8f359
   12068:	000007ff 	.word	0x000007ff
   1206c:	000007fe 	.word	0x000007fe
   12070:	800fffff 	.word	0x800fffff
   12074:	7e37e43c 	.word	0x7e37e43c
   12078:	8800759c 	.word	0x8800759c
   1207c:	0000c350 	.word	0x0000c350
   12080:	3c900000 	.word	0x3c900000
   12084:	00000000 	.word	0x00000000

00012088 <copysign>:
   12088:	b530      	push	{r4, r5, lr}
   1208a:	4b07      	ldr	r3, [pc, #28]	; (120a8 <copysign+0x20>)
   1208c:	1c04      	adds	r4, r0, #0
   1208e:	401c      	ands	r4, r3
   12090:	2380      	movs	r3, #128	; 0x80
   12092:	1c15      	adds	r5, r2, #0
   12094:	061b      	lsls	r3, r3, #24
   12096:	402b      	ands	r3, r5
   12098:	1c0a      	adds	r2, r1, #0
   1209a:	431c      	orrs	r4, r3
   1209c:	1c20      	adds	r0, r4, #0
   1209e:	1c11      	adds	r1, r2, #0
   120a0:	bc30      	pop	{r4, r5}
   120a2:	bc04      	pop	{r2}
   120a4:	4710      	bx	r2
   120a6:	46c0      	nop			; (mov r8, r8)
   120a8:	7fffffff 	.word	0x7fffffff

000120ac <__aeabi_d2f>:
   120ac:	e1a02080 	lsl	r2, r0, #1
   120b0:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
   120b4:	2253c602 	subscs	ip, r3, #2097152	; 0x200000
   120b8:	227cc57f 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   120bc:	9a000006 	bls	120dc <__aeabi_d2f+0x30>
   120c0:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
   120c4:	e1a02181 	lsl	r2, r1, #3
   120c8:	e18c1ea1 	orr	r1, ip, r1, lsr #29
   120cc:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
   120d0:	e0a10103 	adc	r0, r1, r3, lsl #2
   120d4:	03c00001 	biceq	r0, r0, #1
   120d8:	e12fff1e 	bx	lr
   120dc:	e3100101 	tst	r0, #1073741824	; 0x40000000
   120e0:	1a00000f 	bne	12124 <__aeabi_d2f+0x78>
   120e4:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
   120e8:	b2000102 	andlt	r0, r0, #-2147483648	; 0x80000000
   120ec:	b12fff1e 	bxlt	lr
   120f0:	e3800601 	orr	r0, r0, #1048576	; 0x100000
   120f4:	e1a02aa2 	lsr	r2, r2, #21
   120f8:	e2622018 	rsb	r2, r2, #24
   120fc:	e262c020 	rsb	ip, r2, #32
   12100:	e1b03c11 	lsls	r3, r1, ip
   12104:	e1a01231 	lsr	r1, r1, r2
   12108:	13811001 	orrne	r1, r1, #1
   1210c:	e1a03580 	lsl	r3, r0, #11
   12110:	e1a035a3 	lsr	r3, r3, #11
   12114:	e1811c13 	orr	r1, r1, r3, lsl ip
   12118:	e1a03233 	lsr	r3, r3, r2
   1211c:	e1a03083 	lsl	r3, r3, #1
   12120:	eaffffe6 	b	120c0 <__aeabi_d2f+0x14>
   12124:	e1f03ac2 	mvns	r3, r2, asr #21
   12128:	1a000003 	bne	1213c <__aeabi_d2f+0x90>
   1212c:	e1913600 	orrs	r3, r1, r0, lsl #12
   12130:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
   12134:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
   12138:	112fff1e 	bxne	lr
   1213c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   12140:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
   12144:	e3800502 	orr	r0, r0, #8388608	; 0x800000
   12148:	e12fff1e 	bx	lr

0001214c <__aeabi_frsub>:
   1214c:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
   12150:	ea000000 	b	12158 <__addsf3>

00012154 <__aeabi_fsub>:
   12154:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00012158 <__addsf3>:
   12158:	e1b02080 	lsls	r2, r0, #1
   1215c:	11b03081 	lslsne	r3, r1, #1
   12160:	11320003 	teqne	r2, r3
   12164:	11f0cc42 	mvnsne	ip, r2, asr #24
   12168:	11f0cc43 	mvnsne	ip, r3, asr #24
   1216c:	0a000047 	beq	12290 <__addsf3+0x138>
   12170:	e1a02c22 	lsr	r2, r2, #24
   12174:	e0723c23 	rsbs	r3, r2, r3, lsr #24
   12178:	c0822003 	addgt	r2, r2, r3
   1217c:	c0201001 	eorgt	r1, r0, r1
   12180:	c0210000 	eorgt	r0, r1, r0
   12184:	c0201001 	eorgt	r1, r0, r1
   12188:	b2633000 	rsblt	r3, r3, #0
   1218c:	e3530019 	cmp	r3, #25
   12190:	812fff1e 	bxhi	lr
   12194:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   12198:	e3800502 	orr	r0, r0, #8388608	; 0x800000
   1219c:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
   121a0:	12600000 	rsbne	r0, r0, #0
   121a4:	e3110102 	tst	r1, #-2147483648	; 0x80000000
   121a8:	e3811502 	orr	r1, r1, #8388608	; 0x800000
   121ac:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
   121b0:	12611000 	rsbne	r1, r1, #0
   121b4:	e1320003 	teq	r2, r3
   121b8:	0a00002e 	beq	12278 <__addsf3+0x120>
   121bc:	e2422001 	sub	r2, r2, #1
   121c0:	e0900351 	adds	r0, r0, r1, asr r3
   121c4:	e2633020 	rsb	r3, r3, #32
   121c8:	e1a01311 	lsl	r1, r1, r3
   121cc:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
   121d0:	5a000001 	bpl	121dc <__addsf3+0x84>
   121d4:	e2711000 	rsbs	r1, r1, #0
   121d8:	e2e00000 	rsc	r0, r0, #0
   121dc:	e3500502 	cmp	r0, #8388608	; 0x800000
   121e0:	3a00000b 	bcc	12214 <__addsf3+0xbc>
   121e4:	e3500401 	cmp	r0, #16777216	; 0x1000000
   121e8:	3a000004 	bcc	12200 <__addsf3+0xa8>
   121ec:	e1b000a0 	lsrs	r0, r0, #1
   121f0:	e1a01061 	rrx	r1, r1
   121f4:	e2822001 	add	r2, r2, #1
   121f8:	e35200fe 	cmp	r2, #254	; 0xfe
   121fc:	2a000038 	bcs	122e4 <__addsf3+0x18c>
   12200:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   12204:	e0a00b82 	adc	r0, r0, r2, lsl #23
   12208:	03c00001 	biceq	r0, r0, #1
   1220c:	e1800003 	orr	r0, r0, r3
   12210:	e12fff1e 	bx	lr
   12214:	e1b01081 	lsls	r1, r1, #1
   12218:	e0a00000 	adc	r0, r0, r0
   1221c:	e3100502 	tst	r0, #8388608	; 0x800000
   12220:	e2422001 	sub	r2, r2, #1
   12224:	1afffff5 	bne	12200 <__addsf3+0xa8>
   12228:	e1b0c620 	lsrs	ip, r0, #12
   1222c:	01a00600 	lsleq	r0, r0, #12
   12230:	0242200c 	subeq	r2, r2, #12
   12234:	e31008ff 	tst	r0, #16711680	; 0xff0000
   12238:	01a00400 	lsleq	r0, r0, #8
   1223c:	02422008 	subeq	r2, r2, #8
   12240:	e310060f 	tst	r0, #15728640	; 0xf00000
   12244:	01a00200 	lsleq	r0, r0, #4
   12248:	02422004 	subeq	r2, r2, #4
   1224c:	e3100503 	tst	r0, #12582912	; 0xc00000
   12250:	01a00100 	lsleq	r0, r0, #2
   12254:	02422002 	subeq	r2, r2, #2
   12258:	e3500502 	cmp	r0, #8388608	; 0x800000
   1225c:	31a00080 	lslcc	r0, r0, #1
   12260:	e2d22000 	sbcs	r2, r2, #0
   12264:	a0800b82 	addge	r0, r0, r2, lsl #23
   12268:	b2622000 	rsblt	r2, r2, #0
   1226c:	a1800003 	orrge	r0, r0, r3
   12270:	b1830230 	orrlt	r0, r3, r0, lsr r2
   12274:	e12fff1e 	bx	lr
   12278:	e3320000 	teq	r2, #0
   1227c:	e2211502 	eor	r1, r1, #8388608	; 0x800000
   12280:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
   12284:	02822001 	addeq	r2, r2, #1
   12288:	12433001 	subne	r3, r3, #1
   1228c:	eaffffca 	b	121bc <__addsf3+0x64>
   12290:	e1a03081 	lsl	r3, r1, #1
   12294:	e1f0cc42 	mvns	ip, r2, asr #24
   12298:	11f0cc43 	mvnsne	ip, r3, asr #24
   1229c:	0a000013 	beq	122f0 <__addsf3+0x198>
   122a0:	e1320003 	teq	r2, r3
   122a4:	0a000002 	beq	122b4 <__addsf3+0x15c>
   122a8:	e3320000 	teq	r2, #0
   122ac:	01a00001 	moveq	r0, r1
   122b0:	e12fff1e 	bx	lr
   122b4:	e1300001 	teq	r0, r1
   122b8:	13a00000 	movne	r0, #0
   122bc:	112fff1e 	bxne	lr
   122c0:	e31204ff 	tst	r2, #-16777216	; 0xff000000
   122c4:	1a000002 	bne	122d4 <__addsf3+0x17c>
   122c8:	e1b00080 	lsls	r0, r0, #1
   122cc:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
   122d0:	e12fff1e 	bx	lr
   122d4:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
   122d8:	32800502 	addcc	r0, r0, #8388608	; 0x800000
   122dc:	312fff1e 	bxcc	lr
   122e0:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
   122e4:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
   122e8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
   122ec:	e12fff1e 	bx	lr
   122f0:	e1f02c42 	mvns	r2, r2, asr #24
   122f4:	11a00001 	movne	r0, r1
   122f8:	01f03c43 	mvnseq	r3, r3, asr #24
   122fc:	11a01000 	movne	r1, r0
   12300:	e1b02480 	lsls	r2, r0, #9
   12304:	01b03481 	lslseq	r3, r1, #9
   12308:	01300001 	teqeq	r0, r1
   1230c:	13800501 	orrne	r0, r0, #4194304	; 0x400000
   12310:	e12fff1e 	bx	lr

00012314 <__aeabi_ui2f>:
   12314:	e3a03000 	mov	r3, #0
   12318:	ea000001 	b	12324 <__aeabi_i2f+0x8>

0001231c <__aeabi_i2f>:
   1231c:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
   12320:	42600000 	rsbmi	r0, r0, #0
   12324:	e1b0c000 	movs	ip, r0
   12328:	012fff1e 	bxeq	lr
   1232c:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
   12330:	e1a01000 	mov	r1, r0
   12334:	e3a00000 	mov	r0, #0
   12338:	ea00000f 	b	1237c <__aeabi_l2f+0x30>

0001233c <__aeabi_ul2f>:
   1233c:	e1902001 	orrs	r2, r0, r1
   12340:	012fff1e 	bxeq	lr
   12344:	e3a03000 	mov	r3, #0
   12348:	ea000005 	b	12364 <__aeabi_l2f+0x18>

0001234c <__aeabi_l2f>:
   1234c:	e1902001 	orrs	r2, r0, r1
   12350:	012fff1e 	bxeq	lr
   12354:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
   12358:	5a000001 	bpl	12364 <__aeabi_l2f+0x18>
   1235c:	e2700000 	rsbs	r0, r0, #0
   12360:	e2e11000 	rsc	r1, r1, #0
   12364:	e1b0c001 	movs	ip, r1
   12368:	01a0c000 	moveq	ip, r0
   1236c:	01a01000 	moveq	r1, r0
   12370:	03a00000 	moveq	r0, #0
   12374:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
   12378:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
   1237c:	e2433502 	sub	r3, r3, #8388608	; 0x800000
   12380:	e3a02017 	mov	r2, #23
   12384:	e35c0801 	cmp	ip, #65536	; 0x10000
   12388:	21a0c82c 	lsrcs	ip, ip, #16
   1238c:	22422010 	subcs	r2, r2, #16
   12390:	e35c0c01 	cmp	ip, #256	; 0x100
   12394:	21a0c42c 	lsrcs	ip, ip, #8
   12398:	22422008 	subcs	r2, r2, #8
   1239c:	e35c0010 	cmp	ip, #16
   123a0:	21a0c22c 	lsrcs	ip, ip, #4
   123a4:	22422004 	subcs	r2, r2, #4
   123a8:	e35c0004 	cmp	ip, #4
   123ac:	22422002 	subcs	r2, r2, #2
   123b0:	304220ac 	subcc	r2, r2, ip, lsr #1
   123b4:	e05221ac 	subs	r2, r2, ip, lsr #3
   123b8:	e0433b82 	sub	r3, r3, r2, lsl #23
   123bc:	ba000006 	blt	123dc <__aeabi_l2f+0x90>
   123c0:	e0833211 	add	r3, r3, r1, lsl r2
   123c4:	e1a0c210 	lsl	ip, r0, r2
   123c8:	e2622020 	rsb	r2, r2, #32
   123cc:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
   123d0:	e0a30230 	adc	r0, r3, r0, lsr r2
   123d4:	03c00001 	biceq	r0, r0, #1
   123d8:	e12fff1e 	bx	lr
   123dc:	e2822020 	add	r2, r2, #32
   123e0:	e1a0c211 	lsl	ip, r1, r2
   123e4:	e2622020 	rsb	r2, r2, #32
   123e8:	e190008c 	orrs	r0, r0, ip, lsl #1
   123ec:	e0a30231 	adc	r0, r3, r1, lsr r2
   123f0:	01c00fac 	biceq	r0, r0, ip, lsr #31
   123f4:	e12fff1e 	bx	lr

000123f8 <__aeabi_fmul>:
   123f8:	e3a0c0ff 	mov	ip, #255	; 0xff
   123fc:	e01c2ba0 	ands	r2, ip, r0, lsr #23
   12400:	101c3ba1 	andsne	r3, ip, r1, lsr #23
   12404:	1132000c 	teqne	r2, ip
   12408:	1133000c 	teqne	r3, ip
   1240c:	0a00003e 	beq	1250c <__aeabi_fmul+0x114>
   12410:	e0822003 	add	r2, r2, r3
   12414:	e020c001 	eor	ip, r0, r1
   12418:	e1b00480 	lsls	r0, r0, #9
   1241c:	11b01481 	lslsne	r1, r1, #9
   12420:	0a000010 	beq	12468 <__aeabi_fmul+0x70>
   12424:	e3a03302 	mov	r3, #134217728	; 0x8000000
   12428:	e18302a0 	orr	r0, r3, r0, lsr #5
   1242c:	e18312a1 	orr	r1, r3, r1, lsr #5
   12430:	e0813190 	umull	r3, r1, r0, r1
   12434:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
   12438:	e3510502 	cmp	r1, #8388608	; 0x800000
   1243c:	31a01081 	lslcc	r1, r1, #1
   12440:	31811fa3 	orrcc	r1, r1, r3, lsr #31
   12444:	31a03083 	lslcc	r3, r3, #1
   12448:	e1800001 	orr	r0, r0, r1
   1244c:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
   12450:	e35200fd 	cmp	r2, #253	; 0xfd
   12454:	8a00000f 	bhi	12498 <__aeabi_fmul+0xa0>
   12458:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   1245c:	e0a00b82 	adc	r0, r0, r2, lsl #23
   12460:	03c00001 	biceq	r0, r0, #1
   12464:	e12fff1e 	bx	lr
   12468:	e3300000 	teq	r0, #0
   1246c:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
   12470:	01a01481 	lsleq	r1, r1, #9
   12474:	e18c04a0 	orr	r0, ip, r0, lsr #9
   12478:	e18004a1 	orr	r0, r0, r1, lsr #9
   1247c:	e252207f 	subs	r2, r2, #127	; 0x7f
   12480:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
   12484:	c1800b82 	orrgt	r0, r0, r2, lsl #23
   12488:	c12fff1e 	bxgt	lr
   1248c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
   12490:	e3a03000 	mov	r3, #0
   12494:	e2522001 	subs	r2, r2, #1
   12498:	ca000035 	bgt	12574 <__aeabi_fmul+0x17c>
   1249c:	e3720019 	cmn	r2, #25
   124a0:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
   124a4:	d12fff1e 	bxle	lr
   124a8:	e2622000 	rsb	r2, r2, #0
   124ac:	e1b01080 	lsls	r1, r0, #1
   124b0:	e1a01231 	lsr	r1, r1, r2
   124b4:	e2622020 	rsb	r2, r2, #32
   124b8:	e1a0c210 	lsl	ip, r0, r2
   124bc:	e1b00061 	rrxs	r0, r1
   124c0:	e2a00000 	adc	r0, r0, #0
   124c4:	e193308c 	orrs	r3, r3, ip, lsl #1
   124c8:	01c00fac 	biceq	r0, r0, ip, lsr #31
   124cc:	e12fff1e 	bx	lr
   124d0:	e3320000 	teq	r2, #0
   124d4:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
   124d8:	01a00080 	lsleq	r0, r0, #1
   124dc:	03100502 	tsteq	r0, #8388608	; 0x800000
   124e0:	02422001 	subeq	r2, r2, #1
   124e4:	0afffffb 	beq	124d8 <__aeabi_fmul+0xe0>
   124e8:	e180000c 	orr	r0, r0, ip
   124ec:	e3330000 	teq	r3, #0
   124f0:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
   124f4:	01a01081 	lsleq	r1, r1, #1
   124f8:	03110502 	tsteq	r1, #8388608	; 0x800000
   124fc:	02433001 	subeq	r3, r3, #1
   12500:	0afffffb 	beq	124f4 <__aeabi_fmul+0xfc>
   12504:	e181100c 	orr	r1, r1, ip
   12508:	eaffffc0 	b	12410 <__aeabi_fmul+0x18>
   1250c:	e00c3ba1 	and	r3, ip, r1, lsr #23
   12510:	e132000c 	teq	r2, ip
   12514:	1133000c 	teqne	r3, ip
   12518:	0a000005 	beq	12534 <__aeabi_fmul+0x13c>
   1251c:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
   12520:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
   12524:	1affffe9 	bne	124d0 <__aeabi_fmul+0xd8>
   12528:	e0200001 	eor	r0, r0, r1
   1252c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   12530:	e12fff1e 	bx	lr
   12534:	e3300000 	teq	r0, #0
   12538:	13300102 	teqne	r0, #-2147483648	; 0x80000000
   1253c:	01a00001 	moveq	r0, r1
   12540:	13310000 	teqne	r1, #0
   12544:	13310102 	teqne	r1, #-2147483648	; 0x80000000
   12548:	0a00000d 	beq	12584 <__aeabi_fmul+0x18c>
   1254c:	e132000c 	teq	r2, ip
   12550:	1a000001 	bne	1255c <__aeabi_fmul+0x164>
   12554:	e1b02480 	lsls	r2, r0, #9
   12558:	1a000009 	bne	12584 <__aeabi_fmul+0x18c>
   1255c:	e133000c 	teq	r3, ip
   12560:	1a000002 	bne	12570 <__aeabi_fmul+0x178>
   12564:	e1b03481 	lsls	r3, r1, #9
   12568:	11a00001 	movne	r0, r1
   1256c:	1a000004 	bne	12584 <__aeabi_fmul+0x18c>
   12570:	e0200001 	eor	r0, r0, r1
   12574:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   12578:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
   1257c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
   12580:	e12fff1e 	bx	lr
   12584:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
   12588:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
   1258c:	e12fff1e 	bx	lr

00012590 <__aeabi_fdiv>:
   12590:	e3a0c0ff 	mov	ip, #255	; 0xff
   12594:	e01c2ba0 	ands	r2, ip, r0, lsr #23
   12598:	101c3ba1 	andsne	r3, ip, r1, lsr #23
   1259c:	1132000c 	teqne	r2, ip
   125a0:	1133000c 	teqne	r3, ip
   125a4:	0a00003a 	beq	12694 <__aeabi_fdiv+0x104>
   125a8:	e0422003 	sub	r2, r2, r3
   125ac:	e020c001 	eor	ip, r0, r1
   125b0:	e1b01481 	lsls	r1, r1, #9
   125b4:	e1a00480 	lsl	r0, r0, #9
   125b8:	0a00001c 	beq	12630 <__aeabi_fdiv+0xa0>
   125bc:	e3a03201 	mov	r3, #268435456	; 0x10000000
   125c0:	e1831221 	orr	r1, r3, r1, lsr #4
   125c4:	e1833220 	orr	r3, r3, r0, lsr #4
   125c8:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
   125cc:	e1530001 	cmp	r3, r1
   125d0:	31a03083 	lslcc	r3, r3, #1
   125d4:	e2a2207d 	adc	r2, r2, #125	; 0x7d
   125d8:	e3a0c502 	mov	ip, #8388608	; 0x800000
   125dc:	e1530001 	cmp	r3, r1
   125e0:	20433001 	subcs	r3, r3, r1
   125e4:	2180000c 	orrcs	r0, r0, ip
   125e8:	e15300a1 	cmp	r3, r1, lsr #1
   125ec:	204330a1 	subcs	r3, r3, r1, lsr #1
   125f0:	218000ac 	orrcs	r0, r0, ip, lsr #1
   125f4:	e1530121 	cmp	r3, r1, lsr #2
   125f8:	20433121 	subcs	r3, r3, r1, lsr #2
   125fc:	2180012c 	orrcs	r0, r0, ip, lsr #2
   12600:	e15301a1 	cmp	r3, r1, lsr #3
   12604:	204331a1 	subcs	r3, r3, r1, lsr #3
   12608:	218001ac 	orrcs	r0, r0, ip, lsr #3
   1260c:	e1b03203 	lsls	r3, r3, #4
   12610:	11b0c22c 	lsrsne	ip, ip, #4
   12614:	1afffff0 	bne	125dc <__aeabi_fdiv+0x4c>
   12618:	e35200fd 	cmp	r2, #253	; 0xfd
   1261c:	8affff9d 	bhi	12498 <__aeabi_fmul+0xa0>
   12620:	e1530001 	cmp	r3, r1
   12624:	e0a00b82 	adc	r0, r0, r2, lsl #23
   12628:	03c00001 	biceq	r0, r0, #1
   1262c:	e12fff1e 	bx	lr
   12630:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
   12634:	e18c04a0 	orr	r0, ip, r0, lsr #9
   12638:	e292207f 	adds	r2, r2, #127	; 0x7f
   1263c:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
   12640:	c1800b82 	orrgt	r0, r0, r2, lsl #23
   12644:	c12fff1e 	bxgt	lr
   12648:	e3800502 	orr	r0, r0, #8388608	; 0x800000
   1264c:	e3a03000 	mov	r3, #0
   12650:	e2522001 	subs	r2, r2, #1
   12654:	eaffff8f 	b	12498 <__aeabi_fmul+0xa0>
   12658:	e3320000 	teq	r2, #0
   1265c:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
   12660:	01a00080 	lsleq	r0, r0, #1
   12664:	03100502 	tsteq	r0, #8388608	; 0x800000
   12668:	02422001 	subeq	r2, r2, #1
   1266c:	0afffffb 	beq	12660 <__aeabi_fdiv+0xd0>
   12670:	e180000c 	orr	r0, r0, ip
   12674:	e3330000 	teq	r3, #0
   12678:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
   1267c:	01a01081 	lsleq	r1, r1, #1
   12680:	03110502 	tsteq	r1, #8388608	; 0x800000
   12684:	02433001 	subeq	r3, r3, #1
   12688:	0afffffb 	beq	1267c <__aeabi_fdiv+0xec>
   1268c:	e181100c 	orr	r1, r1, ip
   12690:	eaffffc4 	b	125a8 <__aeabi_fdiv+0x18>
   12694:	e00c3ba1 	and	r3, ip, r1, lsr #23
   12698:	e132000c 	teq	r2, ip
   1269c:	1a000005 	bne	126b8 <__aeabi_fdiv+0x128>
   126a0:	e1b02480 	lsls	r2, r0, #9
   126a4:	1affffb6 	bne	12584 <__aeabi_fmul+0x18c>
   126a8:	e133000c 	teq	r3, ip
   126ac:	1affffaf 	bne	12570 <__aeabi_fmul+0x178>
   126b0:	e1a00001 	mov	r0, r1
   126b4:	eaffffb2 	b	12584 <__aeabi_fmul+0x18c>
   126b8:	e133000c 	teq	r3, ip
   126bc:	1a000003 	bne	126d0 <__aeabi_fdiv+0x140>
   126c0:	e1b03481 	lsls	r3, r1, #9
   126c4:	0affff97 	beq	12528 <__aeabi_fmul+0x130>
   126c8:	e1a00001 	mov	r0, r1
   126cc:	eaffffac 	b	12584 <__aeabi_fmul+0x18c>
   126d0:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
   126d4:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
   126d8:	1affffde 	bne	12658 <__aeabi_fdiv+0xc8>
   126dc:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
   126e0:	1affffa2 	bne	12570 <__aeabi_fmul+0x178>
   126e4:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
   126e8:	1affff8e 	bne	12528 <__aeabi_fmul+0x130>
   126ec:	eaffffa4 	b	12584 <__aeabi_fmul+0x18c>

000126f0 <__gesf2>:
   126f0:	e3e0c000 	mvn	ip, #0
   126f4:	ea000002 	b	12704 <__cmpsf2+0x4>

000126f8 <__lesf2>:
   126f8:	e3a0c001 	mov	ip, #1
   126fc:	ea000000 	b	12704 <__cmpsf2+0x4>

00012700 <__cmpsf2>:
   12700:	e3a0c001 	mov	ip, #1
   12704:	e50dc004 	str	ip, [sp, #-4]
   12708:	e1a02080 	lsl	r2, r0, #1
   1270c:	e1a03081 	lsl	r3, r1, #1
   12710:	e1f0cc42 	mvns	ip, r2, asr #24
   12714:	11f0cc43 	mvnsne	ip, r3, asr #24
   12718:	0a000006 	beq	12738 <__cmpsf2+0x38>
   1271c:	e192c0a3 	orrs	ip, r2, r3, lsr #1
   12720:	11300001 	teqne	r0, r1
   12724:	50520003 	subspl	r0, r2, r3
   12728:	81a00fc1 	asrhi	r0, r1, #31
   1272c:	31e00fc1 	mvncc	r0, r1, asr #31
   12730:	13800001 	orrne	r0, r0, #1
   12734:	e12fff1e 	bx	lr
   12738:	e1f0cc42 	mvns	ip, r2, asr #24
   1273c:	1a000001 	bne	12748 <__cmpsf2+0x48>
   12740:	e1b0c480 	lsls	ip, r0, #9
   12744:	1a000003 	bne	12758 <__cmpsf2+0x58>
   12748:	e1f0cc43 	mvns	ip, r3, asr #24
   1274c:	1afffff2 	bne	1271c <__cmpsf2+0x1c>
   12750:	e1b0c481 	lsls	ip, r1, #9
   12754:	0afffff0 	beq	1271c <__cmpsf2+0x1c>
   12758:	e51d0004 	ldr	r0, [sp, #-4]
   1275c:	e12fff1e 	bx	lr

00012760 <__aeabi_cfrcmple>:
   12760:	e1a0c000 	mov	ip, r0
   12764:	e1a00001 	mov	r0, r1
   12768:	e1a0100c 	mov	r1, ip
   1276c:	eaffffff 	b	12770 <__aeabi_cfcmpeq>

00012770 <__aeabi_cfcmpeq>:
   12770:	e92d400f 	push	{r0, r1, r2, r3, lr}
   12774:	ebffffe1 	bl	12700 <__cmpsf2>
   12778:	e3500000 	cmp	r0, #0
   1277c:	43700000 	cmnmi	r0, #0
   12780:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
   12784:	e12fff1e 	bx	lr

00012788 <__aeabi_fcmpeq>:
   12788:	e52de008 	str	lr, [sp, #-8]!
   1278c:	ebfffff7 	bl	12770 <__aeabi_cfcmpeq>
   12790:	03a00001 	moveq	r0, #1
   12794:	13a00000 	movne	r0, #0
   12798:	e49de008 	ldr	lr, [sp], #8
   1279c:	e12fff1e 	bx	lr

000127a0 <__aeabi_fcmplt>:
   127a0:	e52de008 	str	lr, [sp, #-8]!
   127a4:	ebfffff1 	bl	12770 <__aeabi_cfcmpeq>
   127a8:	33a00001 	movcc	r0, #1
   127ac:	23a00000 	movcs	r0, #0
   127b0:	e49de008 	ldr	lr, [sp], #8
   127b4:	e12fff1e 	bx	lr

000127b8 <__aeabi_fcmple>:
   127b8:	e52de008 	str	lr, [sp, #-8]!
   127bc:	ebffffeb 	bl	12770 <__aeabi_cfcmpeq>
   127c0:	93a00001 	movls	r0, #1
   127c4:	83a00000 	movhi	r0, #0
   127c8:	e49de008 	ldr	lr, [sp], #8
   127cc:	e12fff1e 	bx	lr

000127d0 <__aeabi_fcmpge>:
   127d0:	e52de008 	str	lr, [sp, #-8]!
   127d4:	ebffffe1 	bl	12760 <__aeabi_cfrcmple>
   127d8:	93a00001 	movls	r0, #1
   127dc:	83a00000 	movhi	r0, #0
   127e0:	e49de008 	ldr	lr, [sp], #8
   127e4:	e12fff1e 	bx	lr

000127e8 <__aeabi_fcmpgt>:
   127e8:	e52de008 	str	lr, [sp, #-8]!
   127ec:	ebffffdb 	bl	12760 <__aeabi_cfrcmple>
   127f0:	33a00001 	movcc	r0, #1
   127f4:	23a00000 	movcs	r0, #0
   127f8:	e49de008 	ldr	lr, [sp], #8
   127fc:	e12fff1e 	bx	lr

00012800 <__aeabi_f2iz>:
   12800:	e1a02080 	lsl	r2, r0, #1
   12804:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
   12808:	3a000008 	bcc	12830 <__aeabi_f2iz+0x30>
   1280c:	e3a0309e 	mov	r3, #158	; 0x9e
   12810:	e0532c22 	subs	r2, r3, r2, lsr #24
   12814:	9a000007 	bls	12838 <__aeabi_f2iz+0x38>
   12818:	e1a03400 	lsl	r3, r0, #8
   1281c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
   12820:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   12824:	e1a00233 	lsr	r0, r3, r2
   12828:	12600000 	rsbne	r0, r0, #0
   1282c:	e12fff1e 	bx	lr
   12830:	e3a00000 	mov	r0, #0
   12834:	e12fff1e 	bx	lr
   12838:	e3720061 	cmn	r2, #97	; 0x61
   1283c:	1a000001 	bne	12848 <__aeabi_f2iz+0x48>
   12840:	e1b02480 	lsls	r2, r0, #9
   12844:	1a000002 	bne	12854 <__aeabi_f2iz+0x54>
   12848:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
   1284c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
   12850:	e12fff1e 	bx	lr
   12854:	e3a00000 	mov	r0, #0
   12858:	e12fff1e 	bx	lr

0001285c <__errno>:
   1285c:	4b01      	ldr	r3, [pc, #4]	; (12864 <__errno+0x8>)
   1285e:	6818      	ldr	r0, [r3, #0]
   12860:	4770      	bx	lr
   12862:	46c0      	nop			; (mov r8, r8)
   12864:	40000014 	.word	0x40000014

00012868 <__memcpy_from_arm>:
   12868:	e59fc000 	ldr	ip, [pc]	; 12870 <__memcpy_from_arm+0x8>
   1286c:	e12fff1c 	bx	ip
   12870:	000073d5 	.word	0x000073d5

00012874 <____divsi3_from_arm>:
   12874:	e59fc000 	ldr	ip, [pc]	; 1287c <____divsi3_from_arm+0x8>
   12878:	e12fff1c 	bx	ip
   1287c:	0000c369 	.word	0x0000c369

00012880 <__cos_from_arm>:
   12880:	e59fc000 	ldr	ip, [pc]	; 12888 <__cos_from_arm+0x8>
   12884:	e12fff1c 	bx	ip
   12888:	00010269 	.word	0x00010269

0001288c <__sprintf_from_arm>:
   1288c:	e59fc000 	ldr	ip, [pc]	; 12894 <__sprintf_from_arm+0x8>
   12890:	e12fff1c 	bx	ip
   12894:	00007431 	.word	0x00007431

00012898 <____udivsi3_from_arm>:
   12898:	e59fc000 	ldr	ip, [pc]	; 128a0 <____udivsi3_from_arm+0x8>
   1289c:	e12fff1c 	bx	ip
   128a0:	0000c2dd 	.word	0x0000c2dd

000128a4 <__sqrt_from_arm>:
   128a4:	e59fc000 	ldr	ip, [pc]	; 128ac <__sqrt_from_arm+0x8>
   128a8:	e12fff1c 	bx	ip
   128ac:	000104ad 	.word	0x000104ad

000128b0 <__sin_from_arm>:
   128b0:	e59fc000 	ldr	ip, [pc]	; 128b8 <__sin_from_arm+0x8>
   128b4:	e12fff1c 	bx	ip
   128b8:	00010321 	.word	0x00010321

000128bc <__atan2_from_arm>:
   128bc:	e59fc000 	ldr	ip, [pc]	; 128c4 <__atan2_from_arm+0x8>
   128c0:	e12fff1c 	bx	ip
   128c4:	000103dd 	.word	0x000103dd

000128c8 <___fstat_r_from_thumb>:
   128c8:	4778      	bx	pc
   128ca:	46c0      	nop			; (mov r8, r8)
   128cc:	eaffc3c3 	b	37e0 <_fstat_r>

000128d0 <__isatty_from_thumb>:
   128d0:	4778      	bx	pc
   128d2:	46c0      	nop			; (mov r8, r8)
   128d4:	eaffc3d0 	b	381c <isatty>

000128d8 <____floatsidf_from_thumb>:
   128d8:	4778      	bx	pc
   128da:	46c0      	nop			; (mov r8, r8)
   128dc:	eaffe804 	b	c8f4 <__aeabi_i2d>

000128e0 <___close_r_from_thumb>:
   128e0:	4778      	bx	pc
   128e2:	46c0      	nop			; (mov r8, r8)
   128e4:	eaffc3a5 	b	3780 <_close_r>

000128e8 <____ltdf2_from_thumb>:
   128e8:	4778      	bx	pc
   128ea:	46c0      	nop			; (mov r8, r8)
   128ec:	eaffe964 	b	ce84 <__ledf2>

000128f0 <____divdf3_from_thumb>:
   128f0:	4778      	bx	pc
   128f2:	46c0      	nop			; (mov r8, r8)
   128f4:	eaffe8dd 	b	cc70 <__aeabi_ddiv>

000128f8 <____eqdf2_from_thumb>:
   128f8:	4778      	bx	pc
   128fa:	46c0      	nop			; (mov r8, r8)
   128fc:	eaffe962 	b	ce8c <__cmpdf2>

00012900 <___lseek_r_from_thumb>:
   12900:	4778      	bx	pc
   12902:	46c0      	nop			; (mov r8, r8)
   12904:	eaffc3a8 	b	37ac <_lseek_r>

00012908 <____gedf2_from_thumb>:
   12908:	4778      	bx	pc
   1290a:	46c0      	nop			; (mov r8, r8)
   1290c:	eaffe95a 	b	ce7c <__gedf2>

00012910 <___read_r_from_thumb>:
   12910:	4778      	bx	pc
   12912:	46c0      	nop			; (mov r8, r8)
   12914:	eaffc342 	b	3624 <_read_r>

00012918 <___write_r_from_thumb>:
   12918:	4778      	bx	pc
   1291a:	46c0      	nop			; (mov r8, r8)
   1291c:	eaffc370 	b	36e4 <_write_r>

00012920 <____muldf3_from_thumb>:
   12920:	4778      	bx	pc
   12922:	46c0      	nop			; (mov r8, r8)
   12924:	eaffe82d 	b	c9e0 <__aeabi_dmul>

00012928 <____adddf3_from_thumb>:
   12928:	4778      	bx	pc
   1292a:	46c0      	nop			; (mov r8, r8)
   1292c:	eaffe722 	b	c5bc <__adddf3>

00012930 <____nedf2_from_thumb>:
   12930:	4778      	bx	pc
   12932:	46c0      	nop			; (mov r8, r8)
   12934:	eaffe954 	b	ce8c <__cmpdf2>

00012938 <____subdf3_from_thumb>:
   12938:	4778      	bx	pc
   1293a:	46c0      	nop			; (mov r8, r8)
   1293c:	eaffe71d 	b	c5b8 <__aeabi_dsub>

00012940 <____fixdfsi_from_thumb>:
   12940:	4778      	bx	pc
   12942:	46c0      	nop			; (mov r8, r8)
   12944:	eaffe99c 	b	cfbc <__aeabi_d2iz>

00012948 <___sbrk_r_from_thumb>:
   12948:	4778      	bx	pc
   1294a:	46c0      	nop			; (mov r8, r8)
   1294c:	eaffc3bc 	b	3844 <_sbrk_r>

00012950 <____gtdf2_from_thumb>:
   12950:	4778      	bx	pc
   12952:	46c0      	nop			; (mov r8, r8)
   12954:	eaffe948 	b	ce7c <__gedf2>
   12958:	25206925 	.word	0x25206925
   1295c:	69252c69 	.word	0x69252c69
   12960:	2c69252c 	.word	0x2c69252c
   12964:	0a3a6925 	.word	0x0a3a6925
   12968:	0000000d 	.word	0x0000000d
   1296c:	00322e30 	.word	0x00322e30
   12970:	004b4453 	.word	0x004b4453
   12974:	75626544 	.word	0x75626544
   12978:	6e452067 	.word	0x6e452067
   1297c:	656c6261 	.word	0x656c6261
   12980:	00002e64 	.word	0x00002e64
   12984:	6e6b6e55 	.word	0x6e6b6e55
   12988:	206e776f 	.word	0x206e776f
   1298c:	6d6d6f43 	.word	0x6d6d6f43
   12990:	20646e61 	.word	0x20646e61
   12994:	46206e69 	.word	0x46206e69
   12998:	656d6172 	.word	0x656d6172
   1299c:	6925203a 	.word	0x6925203a
   129a0:	00000000 	.word	0x00000000
   129a4:	206c754a 	.word	0x206c754a
   129a8:	32203631 	.word	0x32203631
   129ac:	00343130 	.word	0x00343130

000129b0 <C.0.1302>:
   129b0:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   129c0:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   129d0:	7a654476 65444252 75657571 42203a65     vDezRBDequeue: B
   129e0:	65666675 6d452072 21797470 0000000a     uffer Empty!....
   129f0:	66754231 20726566 4c4c5546 00000a21     1Buffer FULL!...
   12a00:	55424544 00003a47 0000003a 0000000a     DEBUG:..:.......
   12a10:	33323130 37363534 62613938 66656463     0123456789abcdef
   12a20:	00000000 00464e49 004e414e 006e616e     ....INF.NAN.nan.
   12a30:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   12a40:	00000000 20677562 76206e69 69727066     ....bug in vfpri
   12a50:	3a66746e 64616220 73616220 00000065     ntf: bad base...
   12a60:	00666e69 00000030 0000002e 6c756e28     inf.0.......(nul
   12a70:	0000296c 0000823c 00007684 00007684     l)..<....v...v..
   12a80:	0000827e 00007684 00007684 00007684     ~....v...v...v..
   12a90:	00007684 00007684 00007684 00008254     .v...v...v..T...
   12aa0:	0000826e 00007684 00008052 000081ec     n....v..R.......
   12ab0:	00007684 000081e8 000081be 000081be     .v..............
   12ac0:	000081be 000081be 000081be 000081be     ................
   12ad0:	000081be 000081be 000081be 00007684     .............v..
   12ae0:	00007684 00007684 00007684 00007684     .v...v...v...v..
   12af0:	00007684 00007684 00007684 00007684     .v...v...v...v..
   12b00:	00008152 00008028 000080dc 000080dc     R...(...........
   12b10:	000080dc 00007684 00007684 00007684     .....v...v...v..
   12b20:	00007684 000082c4 00007684 00007684     .v.......v...v..
   12b30:	00008002 00007684 00007684 00007684     .....v...v...v..
   12b40:	00008062 00007684 00007f7a 00007684     b....v..z....v..
   12b50:	00007684 0000818e 00007684 00007684     .v.......v...v..
   12b60:	00007684 00007684 00007684 00007684     .v...v...v...v..
   12b70:	00007684 00007684 00007684 00007684     .v...v...v...v..
   12b80:	00008152 00008030 000080dc 000080dc     R...0...........
   12b90:	000080dc 0000830c 00008030 00007684     ........0....v..
   12ba0:	00007684 000082ae 00007684 00008294     .v.......v......
   12bb0:	0000800a 000082c8 000080cc 00007684     .............v..
   12bc0:	00008062 00007684 00007f82 00007684     b....v.......v..
   12bd0:	00007684 0000828e                       .v......

00012bd8 <zeroes.3055>:
   12bd8:	30303030 30303030 30303030 30303030     0000000000000000

00012be8 <blanks.3054>:
   12be8:	20202020 20202020 20202020 20202020                     
   12bf8:	54552d43 00382d46 4a532d43 00005349     C-UTF-8.C-SJIS..
   12c08:	55452d43 00504a43 494a2d43 00000053     C-EUCJP.C-JIS...
   12c18:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   12c28:	00000030 00009704 00009704 00009db2     0...............
   12c38:	00009de4 00009dea 00009dc6              ............

00012c44 <_global_impure_ptr>:
   12c44:	40000018 00000043 00000043 00000000     ...@C...C.......
   12c54:	0000002e                                ....

00012c58 <lconv>:
   12c58:	00012c54 00012c50 00012c50 00012c50     T,..P,..P,..P,..
   12c68:	00012c50 00012c50 00012c50 00012c50     P,..P,..P,..P,..
   12c78:	00012c50 00012c50 ffffffff ffffffff     P,..P,..........
   12c88:	2d4f5349 39353838 0000312d              ISO-8859-1..

00012c94 <charset>:
   12c94:	00012c88                                .,..

00012c98 <__mprec_tens>:
   12c98:	3ff00000 00000000 40240000 00000000     ...?......$@....
   12ca8:	40590000 00000000 408f4000 00000000     ..Y@.....@.@....
   12cb8:	40c38800 00000000 40f86a00 00000000     ...@.....j.@....
   12cc8:	412e8480 00000000 416312d0 00000000     ...A......cA....
   12cd8:	4197d784 00000000 41cdcd65 00000000     ...A....e..A....
   12ce8:	4202a05f 20000000 42374876 e8000000     _..B... vH7B....
   12cf8:	426d1a94 a2000000 42a2309c e5400000     ..mB.....0.B..@.
   12d08:	42d6bcc4 1e900000 430c6bf5 26340000     ...B.....k.C..4&
   12d18:	4341c379 37e08000 43763457 85d8a000     y.AC...7W4vC....
   12d28:	43abc16d 674ec800 43e158e4 60913d00     m..C..Ng.X.C.=.`
   12d38:	4415af1d 78b58c40 444b1ae4 d6e2ef50     ...D@..x..KDP...
   12d48:	4480f0cf 064dd592 44b52d02 c7e14af6     ...D..M..-.D.J..
   12d58:	44ea7843 79d99db4                       Cx.D...y

00012d60 <__mprec_bigtens>:
   12d60:	4341c379 37e08000 4693b8b5 b5056e17     y.AC...7...F.n..
   12d70:	4d384f03 e93ff9f5 5a827748 f9301d32     .O8M..?.Hw.Z2.0.
   12d80:	75154fdd 7f73bf3c                       .O.u<.s.

00012d88 <__mprec_tinytens>:
   12d88:	3c9cd2b2 97d889bc 3949f623 d5a8a733     ...<....#.I93...
   12d98:	32a50ffd 44f4a73d 255bba08 cf8c979d     ...2=..D..[%....
   12da8:	0ac80628 64ac6f43                       (...Co.d

00012db0 <p05.2298>:
   12db0:	00000005 00000019 0000007d 6e617461     ........}...atan
   12dc0:	00000032 74727173 00000000              2...sqrt....

00012dcc <npio2_hw>:
   12dcc:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
   12ddc:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
   12dec:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
   12dfc:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
   12e0c:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
   12e1c:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
   12e2c:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
   12e3c:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00012e4c <two_over_pi>:
   12e4c:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
   12e5c:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
   12e6c:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
   12e7c:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
   12e8c:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
   12e9c:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
   12eac:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
   12ebc:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
   12ecc:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
   12edc:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
   12eec:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
   12efc:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
   12f0c:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
   12f1c:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
   12f2c:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
   12f3c:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
   12f4c:	0060e27b 00c08c6b                       {.`.k...

00012f54 <init_jk>:
   12f54:	00000002 00000003 00000004 00000006     ................

00012f64 <PIo2>:
   12f64:	3ff921fb 40000000 3e74442d 00000000     .!.?...@-Dt>....
   12f74:	3cf84698 80000000 3b78cc51 60000000     .F.<....Q.x;...`
   12f84:	39f01b83 80000000 387a2520 40000000     ...9.... %z8...@
   12f94:	36e38222 80000000 3569f31d 00000000     "..6......i5....

00012fa4 <atanhi>:
   12fa4:	3fddac67 0561bb4f 3fe921fb 54442d18     g..?O.a..!.?.-DT
   12fb4:	3fef730b d281f69b 3ff921fb 54442d18     .s.?.....!.?.-DT

00012fc4 <atanlo>:
   12fc4:	3c7a2b7f 222f65e2 3c81a626 33145c07     .+z<.e/"&..<.\.3
   12fd4:	3c700788 7af0cbbd 3c91a626 33145c07     ..p<...z&..<.\.3

00012fe4 <__fdlib_version>:
   12fe4:	00000001                                ....
