
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000db40  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000964  40000000  0000db40  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001580  40000964  0000e4a4  00018964  2**2
                  ALLOC
  3 .stack        00001980  40001f00  40001f00  00018970  2**4
                  CONTENTS
  4 .comment      0000002c  00000000  00000000  0001a2f0  2**0
                  CONTENTS, READONLY
  5 .ARM.attributes 00000010  00000000  00000000  0001a31c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000570  00000000  00000000  0001a330  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000144a  00000000  00000000  0001a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000c389  00000000  00000000  0001bcea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000025ab  00000000  00000000  00028073  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000083d6  00000000  00000000  0002a61e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001468  00000000  00000000  000329f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000003d2  00000000  00000000  00033e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003d93  00000000  00000000  0003422e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001f0  00000000  00000000  00037fc8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__Vectors>:

// Exception Vectors
// Mapped to Address 0.
// Absolute addressing mode must be used.

__Vectors:        LDR     PC,Reset_Addr         
       0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <Reset_Addr>
                LDR     PC,Undef_Addr
       4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <Undef_Addr>
                LDR     PC,SWI_Addr
       8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <SWI_Addr>
                LDR     PC,PAbt_Addr
       c:	e59ff018 	ldr	pc, [pc, #24]	; 2c <PAbt_Addr>
                LDR     PC,DAbt_Addr
      10:	e59ff018 	ldr	pc, [pc, #24]	; 30 <DAbt_Addr>
                NOP                            /* Reserved Vector */
      14:	e1a00000 	nop			; (mov r0, r0)
//                LDR     PC,IRQ_Addr
//                LDR     PC,[PC, #-0x0FF0]      /* Vector from VicVectAddr */
                LDR     PC,IRQ_Wrapper_Addr
      18:	e59ff018 	ldr	pc, [pc, #24]	; 38 <IRQ_Wrapper_Addr>
                LDR     PC,FIQ_Addr
      1c:	e59ff018 	ldr	pc, [pc, #24]	; 3c <FIQ_Addr>

00000020 <Reset_Addr>:
      20:	00000168 	.word	0x00000168

00000024 <Undef_Addr>:
      24:	00000040 	.word	0x00000040

00000028 <SWI_Addr>:
      28:	00000098 	.word	0x00000098

0000002c <PAbt_Addr>:
      2c:	00000044 	.word	0x00000044

00000030 <DAbt_Addr>:
      30:	00000048 	.word	0x00000048
      34:	00000000 	.word	0x00000000

00000038 <IRQ_Wrapper_Addr>:
      38:	00000050 	.word	0x00000050

0000003c <FIQ_Addr>:
      3c:	0000004c 	.word	0x0000004c

00000040 <Undef_Handler>:
                  .word     0                      /* Reserved Address */
// IRQ_Addr:         .word     __IRQ_Handler
IRQ_Wrapper_Addr: .word    __IRQ_Wrapper
FIQ_Addr:         .word     FIQ_Handler

Undef_Handler:  B       Undef_Handler
      40:	eafffffe 	b	40 <Undef_Handler>

00000044 <PAbt_Handler>:
/* SWI_Handler:    B       SWI_Handler */
PAbt_Handler:   B       PAbt_Handler
      44:	eafffffe 	b	44 <PAbt_Handler>

00000048 <DAbt_Handler>:
DAbt_Handler:   B       DAbt_Handler
      48:	eafffffe 	b	48 <DAbt_Handler>

0000004c <FIQ_Handler>:
/* IRQ_Handler:    B       IRQ_Handler */
FIQ_Handler:    B       FIQ_Handler
      4c:	eafffffe 	b	4c <FIQ_Handler>

00000050 <__IRQ_Wrapper>:
        .global __IRQ_Wrapper
        .func   __IRQ_Wrapper
__IRQ_Wrapper:
/*- Manage Exception Entry  */
/*- Adjust and save LR_irq in IRQ stack  */
            sub         lr, lr, #4
      50:	e24ee004 	sub	lr, lr, #4
            stmfd       sp!, {lr}
      54:	e92d4000 	push	{lr}

/*- Save SPSR need to be saved for nested interrupt */
            mrs         r14, SPSR
      58:	e14fe000 	mrs	lr, SPSR
            stmfd       sp!, {r14}
      5c:	e92d4000 	push	{lr}

/*- Save and r0 in IRQ stack  */
            stmfd       sp!, {r0}
      60:	e92d0001 	push	{r0}

/*- Write in the IVR to support Protect Mode  */
/*- No effect in Normal Mode  */
/*- De-assert the NIRQ and clear the source in Protect Mode */
/* R14 = LR */
            ldr         r14, =VIC_base_addr
      64:	e59fe028 	ldr	lr, [pc, #40]	; 94 <ABT_Stack_Size+0x14>
            ldr         r0 , [r14, #VIC_vect_offs]
      68:	e59e0030 	ldr	r0, [lr, #48]	; 0x30
            /*str         r14, [r14, #VIC_vect_offs]*/

/*- Enable Interrupt and Switch in Supervisor Mode */
            msr         CPSR_c, #I_Bit | Mode_SVC
      6c:	e321f093 	msr	CPSR_c, #147	; 0x93

/*- Save scratch/used registers and LR in User Stack */
            /*stmfd       sp!, { r1-r3, r12, r14}*/
            stmfd       sp!, { r1-r12, r14 }
      70:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

/*- Branch to the routine pointed by the VIC-Vector-Address  */
            mov         r14, pc
      74:	e1a0e00f 	mov	lr, pc
            bx          r0
      78:	e12fff10 	bx	r0
/*- Restore scratch/used registers and LR from User Stack*/
            /* ldmia       sp!, { r1-r3, r12, r14} */
            ldmia       sp!, { r1-r12, r14 }
      7c:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

/*- Disable Interrupt and switch back in IRQ mode */
            msr         CPSR_c, #I_Bit | Mode_IRQ
      80:	e321f092 	msr	CPSR_c, #146	; 0x92
            ldr         r14, =VIC_base_addr
            str         r14, [r14, #VIC_vect_offs]
#endif

/*- Restore SPSR_irq and r0 from IRQ stack */
            ldmia       sp!, {r0}
      84:	e8bd0001 	pop	{r0}

/*- Restore SPSR_irq and r0 from IRQ stack */
            ldmia       sp!, {r14}
      88:	e8bd4000 	pop	{lr}
            msr         SPSR_cxsf, r14
      8c:	e16ff00e 	msr	SPSR_fsxc, lr

/*- Restore adjusted  LR_irq from IRQ stack directly in the PC */
            ldmia       sp!, {pc}^
      90:	e8fd8000 	ldm	sp!, {pc}^

/*- Write in the IVR to support Protect Mode  */
/*- No effect in Normal Mode  */
/*- De-assert the NIRQ and clear the source in Protect Mode */
/* R14 = LR */
            ldr         r14, =VIC_base_addr
      94:	fffff000 	.word	0xfffff000

00000098 <SoftwareInterrupt>:

.global SoftwareInterrupt
.func   SoftwareInterrupt
SoftwareInterrupt:
SWI_HandlerMT:
	STMFD   sp!, {r4, lr}      /* store regs. */
      98:	e92d4010 	push	{r4, lr}
	MRS     r4, spsr
      9c:	e14f4000 	mrs	r4, SPSR
	TST     r4, #T_Bit             /* test for thumb */
      a0:	e3140020 	tst	r4, #32
	LDRNEH  r4, [lr, #-2]          /* NE->thumb - get swi instruction code */
      a4:	115e40b2 	ldrhne	r4, [lr, #-2]
	BICNE   r4, r4, #0xff00        /* NE->thumb - clear top 8 bits leaving swi "comment field"=number */
      a8:	13c44cff 	bicne	r4, r4, #65280	; 0xff00
	LDREQ   r4, [lr, #-4]          /* EQ->arm - get swi instruction code */
      ac:	051e4004 	ldreq	r4, [lr, #-4]
	BICEQ   r4, r4, #0xff000000    /* EQ->arm - clear top 8 bits leaving swi "comment field"=number */
      b0:	03c444ff 	biceq	r4, r4, #-16777216	; 0xff000000
	CMP     r4, #MAX_SWI           /* range-check */
      b4:	e3540006 	cmp	r4, #6
	LDRLS   pc, [pc, r4, LSL #2]   /* jump to routine if <= MAX (LS) */
      b8:	979ff104 	ldrls	pc, [pc, r4, lsl #2]

000000bc <SWIOutOfRange>:
SWIOutOfRange:
	B       SWIOutOfRange
      bc:	eafffffe 	b	bc <SWIOutOfRange>

000000c0 <SwiTableStart>:
      c0:	000000dc 	.word	0x000000dc
      c4:	000000ec 	.word	0x000000ec
      c8:	000000fc 	.word	0x000000fc
      cc:	00000110 	.word	0x00000110
      d0:	00000124 	.word	0x00000124
      d4:	0000012c 	.word	0x0000012c
      d8:	00000148 	.word	0x00000148

000000dc <IRQDisable>:
	.word FIQRestore	// 6
SwiTableEnd:
.set MAX_SWI, ((SwiTableEnd-SwiTableStart)/4)-1

IRQDisable:
	MRS     r0, SPSR                        /* Get SPSR = return value */
      dc:	e14f0000 	mrs	r0, SPSR
	ORR     r4, r0, #I_Bit                  /* I_Bit set */
      e0:	e3804080 	orr	r4, r0, #128	; 0x80
	MSR     SPSR_c, r4                      /* Set SPSR */
      e4:	e161f004 	msr	SPSR_c, r4
	B       EndofSWI
      e8:	ea00001d 	b	164 <EndofSWI>

000000ec <IRQEnable>:

IRQEnable:
	MRS     r0, SPSR                        /* Get SPSR = return value */
      ec:	e14f0000 	mrs	r0, SPSR
	BIC     r4, r0, #I_Bit                  /* I_Bit clear */
      f0:	e3c04080 	bic	r4, r0, #128	; 0x80
	MSR     SPSR_c, r4                      /* Set SPSR */
      f4:	e161f004 	msr	SPSR_c, r4
	B       EndofSWI                       
      f8:	ea000019 	b	164 <EndofSWI>

000000fc <FIQDisable>:

FIQDisable:
	MRS     r0, SPSR
      fc:	e14f0000 	mrs	r0, SPSR
	ORR     r4, r0, #F_Bit
     100:	e3804040 	orr	r4, r0, #64	; 0x40
	AND     r0, r0, #F_Bit
     104:	e2000040 	and	r0, r0, #64	; 0x40
	MSR     SPSR_c, r4
     108:	e161f004 	msr	SPSR_c, r4
	B       EndofSWI
     10c:	ea000014 	b	164 <EndofSWI>

00000110 <FIQEnable>:

FIQEnable:
	MRS     r0, SPSR
     110:	e14f0000 	mrs	r0, SPSR
	BIC     r4, r0, #F_Bit
     114:	e3c04040 	bic	r4, r0, #64	; 0x40
	AND     r0, r0, #F_Bit
     118:	e2000040 	and	r0, r0, #64	; 0x40
	MSR     SPSR_c, r4
     11c:	e161f004 	msr	SPSR_c, r4
	B       EndofSWI
     120:	ea00000f 	b	164 <EndofSWI>

00000124 <CPSRget>:

CPSRget:
	// LDR r0, =0xdeadbeef
	MRS     r0, SPSR                        /* Get SPSR */
     124:	e14f0000 	mrs	r0, SPSR
	B       EndofSWI                       
     128:	ea00000d 	b	164 <EndofSWI>

0000012c <IRQRestore>:

IRQRestore:
	MRS     r4, SPSR                        /* Get SPSR */
     12c:	e14f4000 	mrs	r4, SPSR
	AND     r0, r0, #I_Bit
     130:	e2000080 	and	r0, r0, #128	; 0x80
	TST     r0, #I_Bit             /* Test input for I_Bit */
     134:	e3100080 	tst	r0, #128	; 0x80
	BICEQ   r4, r4, #I_Bit
     138:	03c44080 	biceq	r4, r4, #128	; 0x80
	ORRNE   r4, r4, #I_Bit
     13c:	13844080 	orrne	r4, r4, #128	; 0x80
	MSR     SPSR_c, r4
     140:	e161f004 	msr	SPSR_c, r4
	B       EndofSWI
     144:	ea000006 	b	164 <EndofSWI>

00000148 <FIQRestore>:

FIQRestore:
	MRS     r4, SPSR                        /* Get SPSR */
     148:	e14f4000 	mrs	r4, SPSR
	AND     r0, r0, #F_Bit
     14c:	e2000040 	and	r0, r0, #64	; 0x40
	TST     r0, #F_Bit             /* Test input for F_Bit */
     150:	e3100040 	tst	r0, #64	; 0x40
	BICEQ   r4, r4, #F_Bit
     154:	03c44040 	biceq	r4, r4, #64	; 0x40
	ORRNE   r4, r4, #F_Bit
     158:	13844040 	orrne	r4, r4, #64	; 0x40
	MSR     SPSR_c, r4
     15c:	e161f004 	msr	SPSR_c, r4
	B       EndofSWI
     160:	eaffffff 	b	164 <EndofSWI>

00000164 <EndofSWI>:

EndofSWI:
	LDMFD   sp!, {r4,pc}^
     164:	e8fd8010 	ldm	sp!, {r4, pc}^

00000168 <__startup>:
__startup:

Reset_Handler:  

.if (VPBDIV_SETUP)
                LDR     R0, =VPBDIV
     168:	e59f0128 	ldr	r0, [pc, #296]	; 298 <__exit_THUMB+0x4>
                LDR     R1, =VPBDIV_Val
     16c:	e3a01000 	mov	r1, #0
                STR     R1, [R0]
     170:	e5801000 	str	r1, [r0]
.endif


.if (PLL_SETUP)
                LDR     R0, =PLL_BASE
     174:	e59f0120 	ldr	r0, [pc, #288]	; 29c <__exit_THUMB+0x8>
                MOV     R1, #0xAA
     178:	e3a010aa 	mov	r1, #170	; 0xaa
                MOV     R2, #0x55
     17c:	e3a02055 	mov	r2, #85	; 0x55

// Configure and Enable PLL
                MOV     R3, #PLLCFG_Val
     180:	e3a03024 	mov	r3, #36	; 0x24
                STR     R3, [R0, #PLLCFG_OFS] 
     184:	e5803004 	str	r3, [r0, #4]
                MOV     R3, #PLLCON_PLLE
     188:	e3a03001 	mov	r3, #1
                STR     R3, [R0, #PLLCON_OFS]
     18c:	e5803000 	str	r3, [r0]
                STR     R1, [R0, #PLLFEED_OFS]
     190:	e580100c 	str	r1, [r0, #12]
                STR     R2, [R0, #PLLFEED_OFS]
     194:	e580200c 	str	r2, [r0, #12]

00000198 <PLL_Loop>:

// Wait until PLL Locked
PLL_Loop:       LDR     R3, [R0, #PLLSTAT_OFS]
     198:	e5903008 	ldr	r3, [r0, #8]
                ANDS    R3, R3, #PLLSTAT_PLOCK
     19c:	e2133b01 	ands	r3, r3, #1024	; 0x400
                BEQ     PLL_Loop
     1a0:	0afffffc 	beq	198 <PLL_Loop>

// Switch to PLL Clock
                MOV     R3, #(PLLCON_PLLE | PLLCON_PLLC)
     1a4:	e3a03003 	mov	r3, #3
                STR     R3, [R0, #PLLCON_OFS]
     1a8:	e5803000 	str	r3, [r0]
                STR     R1, [R0, #PLLFEED_OFS]
     1ac:	e580100c 	str	r1, [r0, #12]
                STR     R2, [R0, #PLLFEED_OFS]
     1b0:	e580200c 	str	r2, [r0, #12]
.endif


.if (MAM_SETUP)
                LDR     R0, =MAM_BASE
     1b4:	e59f00e4 	ldr	r0, [pc, #228]	; 2a0 <__exit_THUMB+0xc>
                MOV     R1, #MAMTIM_Val
     1b8:	e3a01004 	mov	r1, #4
                STR     R1, [R0, #MAMTIM_OFS] 
     1bc:	e5801004 	str	r1, [r0, #4]
                MOV     R1, #MAMCR_Val
     1c0:	e3a01002 	mov	r1, #2
                STR     R1, [R0, #MAMCR_OFS] 
     1c4:	e5801000 	str	r1, [r0]
.endif
                STR     R1, [R0]
.endif

// Setup Stack for each mode
                LDR     R0, =Top_Stack
     1c8:	e59f00d4 	ldr	r0, [pc, #212]	; 2a4 <__exit_THUMB+0x10>

// Enter Undefined Instruction Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_UND|I_Bit|F_Bit
     1cc:	e321f0db 	msr	CPSR_c, #219	; 0xdb
                MOV     SP, R0
     1d0:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #UND_Stack_Size
     1d4:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter Abort Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_ABT|I_Bit|F_Bit
     1d8:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
                MOV     SP, R0
     1dc:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #ABT_Stack_Size
     1e0:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter FIQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_FIQ|I_Bit|F_Bit
     1e4:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
                MOV     SP, R0
     1e8:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #FIQ_Stack_Size
     1ec:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter IRQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_IRQ|I_Bit|F_Bit
     1f0:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
                MOV     SP, R0
     1f4:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #IRQ_Stack_Size
     1f8:	e2400b02 	sub	r0, r0, #2048	; 0x800

// Enter Supervisor Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_SVC|I_Bit|F_Bit
     1fc:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
                MOV     SP, R0
     200:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #SVC_Stack_Size
     204:	e2400b02 	sub	r0, r0, #2048	; 0x800

// Enter User Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_USR /* Interrupts enabled */
     208:	e321f010 	msr	CPSR_c, #16
//				MSR     CPSR_c, #Mode_USR|I_Bit|F_Bit /* Interrupts disabled */
                MOV     SP, R0
     20c:	e1a0d000 	mov	sp, r0


.if (RAM_MODE==0)
/* Relocate .data section (Copy from ROM to RAM) */
                LDR     R1, =_etext 
     210:	e59f1090 	ldr	r1, [pc, #144]	; 2a8 <__exit_THUMB+0x14>
                LDR     R2, =_data 
     214:	e59f2090 	ldr	r2, [pc, #144]	; 2ac <__exit_THUMB+0x18>
                LDR     R3, =_edata 
     218:	e59f3090 	ldr	r3, [pc, #144]	; 2b0 <__exit_THUMB+0x1c>
                CMP     R2, R3
     21c:	e1520003 	cmp	r2, r3
                BEQ     DataIsEmpty
     220:	0a000003 	beq	234 <DataIsEmpty>

00000224 <LoopRel>:
LoopRel:        CMP     R2, R3 
     224:	e1520003 	cmp	r2, r3
                LDRLO   R0, [R1], #4 
     228:	34910004 	ldrcc	r0, [r1], #4
                STRLO   R0, [R2], #4 
     22c:	34820004 	strcc	r0, [r2], #4
                BLO     LoopRel 
     230:	3afffffb 	bcc	224 <LoopRel>

00000234 <DataIsEmpty>:
DataIsEmpty:
.endif
 
/* Clear .bss section (Zero init) */
                MOV     R0, #0 
     234:	e3a00000 	mov	r0, #0
                LDR     R1, =__bss_start__ 
     238:	e59f1074 	ldr	r1, [pc, #116]	; 2b4 <__exit_THUMB+0x20>
                LDR     R2, =__bss_end__ 
     23c:	e59f2074 	ldr	r2, [pc, #116]	; 2b8 <__exit_THUMB+0x24>
                CMP     R1,R2
     240:	e1510002 	cmp	r1, r2
                BEQ     BSSIsEmpty
     244:	0a000002 	beq	254 <BSSIsEmpty>

00000248 <LoopZI>:
LoopZI:         CMP     R1, R2 
     248:	e1510002 	cmp	r1, r2
                STRLO   R0, [R1], #4 
     24c:	34810004 	strcc	r0, [r1], #4
                BLO     LoopZI 
     250:	3afffffc 	bcc	248 <LoopZI>

00000254 <BSSIsEmpty>:
BSSIsEmpty:


// call C++ constructors of global objects
		LDR 	r0, =__ctors_start__
     254:	e59f0060 	ldr	r0, [pc, #96]	; 2bc <__exit_THUMB+0x28>
		LDR 	r1, =__ctors_end__
     258:	e59f1060 	ldr	r1, [pc, #96]	; 2c0 <__exit_THUMB+0x2c>

0000025c <ctor_loop>:
ctor_loop:
		CMP 	r0, r1
     25c:	e1500001 	cmp	r0, r1
		BEQ 	ctor_end
     260:	0a000005 	beq	27c <ctor_end>
		LDR 	r2, [r0], #4
     264:	e4902004 	ldr	r2, [r0], #4
		STMFD 	sp!, {r0-r1}
     268:	e92d0003 	push	{r0, r1}
		MOV 	lr, pc
     26c:	e1a0e00f 	mov	lr, pc
		MOV 	pc, r2
     270:	e1a0f002 	mov	pc, r2
		LDMFD 	sp!, {r0-r1}
     274:	e8bd0003 	pop	{r0, r1}
		B 		ctor_loop
     278:	eafffff7 	b	25c <ctor_loop>

0000027c <ctor_end>:
ctor_end:

// Enter the C code
                //LDR     R0,=INIT
                LDR     R0,=main
     27c:	e59f0040 	ldr	r0, [pc, #64]	; 2c4 <__exit_THUMB+0x30>
                TST     R0,#1             // Bit-0 set: main is Thumb
     280:	e3100001 	tst	r0, #1
                LDREQ   LR,=__exit_ARM    // ARM Mode
     284:	059fe03c 	ldreq	lr, [pc, #60]	; 2c8 <__exit_THUMB+0x34>
                LDRNE   LR,=__exit_THUMB  // Thumb Mode
     288:	159fe03c 	ldrne	lr, [pc, #60]	; 2cc <__exit_THUMB+0x38>
                BX      R0
     28c:	e12fff10 	bx	r0

00000290 <__exit_ARM>:

.arm
.global __exit_ARM
.func __exit_ARM
__exit_ARM:
                B       __exit_ARM
     290:	eafffffe 	b	290 <__exit_ARM>

00000294 <__exit_THUMB>:

.thumb
.global __exit_THUMB
.func __exit_THUMB
__exit_THUMB:
                B       __exit_THUMB
     294:	e7fe      	b.n	294 <__exit_THUMB>
     296:	0000      	.short	0x0000
__startup:

Reset_Handler:  

.if (VPBDIV_SETUP)
                LDR     R0, =VPBDIV
     298:	e01fc100 	.word	0xe01fc100
                STR     R1, [R0]
.endif


.if (PLL_SETUP)
                LDR     R0, =PLL_BASE
     29c:	e01fc080 	.word	0xe01fc080
                STR     R2, [R0, #PLLFEED_OFS]
.endif


.if (MAM_SETUP)
                LDR     R0, =MAM_BASE
     2a0:	e01fc000 	.word	0xe01fc000
.endif
                STR     R1, [R0]
.endif

// Setup Stack for each mode
                LDR     R0, =Top_Stack
     2a4:	40003880 	.word	0x40003880
                MOV     SP, R0


.if (RAM_MODE==0)
/* Relocate .data section (Copy from ROM to RAM) */
                LDR     R1, =_etext 
     2a8:	0000db40 	.word	0x0000db40
                LDR     R2, =_data 
     2ac:	40000000 	.word	0x40000000
                LDR     R3, =_edata 
     2b0:	40000964 	.word	0x40000964
DataIsEmpty:
.endif
 
/* Clear .bss section (Zero init) */
                MOV     R0, #0 
                LDR     R1, =__bss_start__ 
     2b4:	40000964 	.word	0x40000964
                LDR     R2, =__bss_end__ 
     2b8:	40001ee4 	.word	0x40001ee4
                BLO     LoopZI 
BSSIsEmpty:


// call C++ constructors of global objects
		LDR 	r0, =__ctors_start__
     2bc:	0000db40 	.word	0x0000db40
		LDR 	r1, =__ctors_end__
     2c0:	0000db40 	.word	0x0000db40
		B 		ctor_loop
ctor_end:

// Enter the C code
                //LDR     R0,=INIT
                LDR     R0,=main
     2c4:	000024fc 	.word	0x000024fc
                TST     R0,#1             // Bit-0 set: main is Thumb
                LDREQ   LR,=__exit_ARM    // ARM Mode
     2c8:	00000290 	.word	0x00000290
                LDRNE   LR,=__exit_THUMB  // Thumb Mode
     2cc:	00000294 	.word	0x00000294

000002d0 <IntRestore>:
.text
.section .text, "ax"
.global IntRestore
.func   IntRestore
IntRestore:
		SWI     SWI_IRQ_REST
     2d0:	ef000005 	svc	0x00000005
		BX      lr
     2d4:	e12fff1e 	bx	lr

000002d8 <FiqRestore>:
.text
.section .text, "ax"
.global FiqRestore
.func   FiqRestore
FiqRestore:
		SWI     SWI_FIQ_REST
     2d8:	ef000006 	svc	0x00000006
		BX      lr
     2dc:	e12fff1e 	bx	lr

000002e0 <IntGetCPSR>:
.text
.section .text, "ax"
.global IntGetCPSR
.func   IntGetCPSR
IntGetCPSR:
		SWI     SWI_GET_CPSR
     2e0:	ef000004 	svc	0x00000004
		BX      lr
     2e4:	e12fff1e 	bx	lr

000002e8 <IntEnable>:
.text
.section .text, "ax"
.global IntEnable
.func   IntEnable
IntEnable:
        SWI     SWI_IRQ_EN
     2e8:	ef000001 	svc	0x00000001
        BX      lr
     2ec:	e12fff1e 	bx	lr

000002f0 <IntDisable>:
.arm
.global IntDisable
.section .text, "ax"
.func   IntDisable
IntDisable:
        SWI     SWI_IRQ_DIS
     2f0:	ef000000 	svc	0x00000000
        BX      lr
     2f4:	e12fff1e 	bx	lr

000002f8 <FiqEnable>:
.text
.section .text, "ax"
.global FiqEnable
.func   FiqEnable
FiqEnable:
        SWI     SWI_FIQ_EN
     2f8:	ef000003 	svc	0x00000003
        BX      lr
     2fc:	e12fff1e 	bx	lr

00000300 <FiqDisable>:
.arm
.global FiqDisable
.section .text, "ax"
.func   FiqDisable
FiqDisable:
        SWI     SWI_FIQ_DIS
     300:	ef000002 	svc	0x00000002
        BX      lr
     304:	e12fff1e 	bx	lr

00000308 <LL_write_ctrl_data>:
	SPIWRData[0] = '>';
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;

	if (!page) {
     308:	e31000ff 	tst	r0, #255	; 0xff
		pageselect = 0;
	}
	return (1);
}

void LL_write_ctrl_data(char page) {
     30c:	e92d4030 	push	{r4, r5, lr}

	//initialize syncbytes
	SPIWRData[0] = '>';
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;
     310:	e59fc0f8 	ldr	ip, [pc, #248]	; 410 <PLLSTAT_PLOCK+0x10>
	static volatile short spi_chksum;

	dataptr = (unsigned char *) &LL_1khz_control_input;

	//initialize syncbytes
	SPIWRData[0] = '>';
     314:	e59f50f8 	ldr	r5, [pc, #248]	; 414 <PLLSTAT_PLOCK+0x14>
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;
     318:	e3e03c55 	mvn	r3, #21760	; 0x5500

	if (!page) {
		for (i = 2; i < 40; i++) {
     31c:	159f00f4 	ldrne	r0, [pc, #244]	; 418 <PLLSTAT_PLOCK+0x18>

	dataptr = (unsigned char *) &LL_1khz_control_input;

	//initialize syncbytes
	SPIWRData[0] = '>';
	SPIWRData[1] = '*';
     320:	e3a0102a 	mov	r1, #42	; 0x2a

	spi_chksum = 0xAAAA;
     324:	e2433055 	sub	r3, r3, #85	; 0x55
	static volatile short spi_chksum;

	dataptr = (unsigned char *) &LL_1khz_control_input;

	//initialize syncbytes
	SPIWRData[0] = '>';
     328:	e3a0203e 	mov	r2, #62	; 0x3e
	SPIWRData[1] = '*';
     32c:	e5c51001 	strb	r1, [r5, #1]
	static volatile short spi_chksum;

	dataptr = (unsigned char *) &LL_1khz_control_input;

	//initialize syncbytes
	SPIWRData[0] = '>';
     330:	e5c52000 	strb	r2, [r5]
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;
     334:	e1cc30b0 	strh	r3, [ip]

	if (!page) {
		for (i = 2; i < 40; i++) {
     338:	11a01005 	movne	r1, r5
     33c:	1280e014 	addne	lr, r0, #20
	SPIWRData[0] = '>';
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;

	if (!page) {
     340:	1a000019 	bne	3ac <LL_write_ctrl_data+0xa4>
     344:	e59f00cc 	ldr	r0, [pc, #204]	; 418 <PLLSTAT_PLOCK+0x18>
     348:	e1a01005 	mov	r1, r5
     34c:	e280e026 	add	lr, r0, #38	; 0x26
		for (i = 2; i < 40; i++) {
			SPIWRData[i] = *dataptr++;
     350:	e4d02001 	ldrb	r2, [r0], #1
			spi_chksum += SPIWRData[i];
     354:	e1dc30b0 	ldrh	r3, [ip]
     358:	e0833002 	add	r3, r3, r2
     35c:	e1a03803 	lsl	r3, r3, #16
     360:	e1a03823 	lsr	r3, r3, #16
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;

	if (!page) {
		for (i = 2; i < 40; i++) {
     364:	e15e0000 	cmp	lr, r0
			SPIWRData[i] = *dataptr++;
     368:	e5c12002 	strb	r2, [r1, #2]
			spi_chksum += SPIWRData[i];
     36c:	e1cc30b0 	strh	r3, [ip]
     370:	e2811001 	add	r1, r1, #1
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;

	if (!page) {
		for (i = 2; i < 40; i++) {
     374:	1afffff5 	bne	350 <LL_write_ctrl_data+0x48>
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
	}

	SPIWRData[40] = spi_chksum; //chksum LSB
     378:	e1dc00b0 	ldrh	r0, [ip]
	SPIWRData[41] = (spi_chksum >> 8); //chksum MSB
     37c:	e1dc30b0 	ldrh	r3, [ip]
     380:	e1a03423 	lsr	r3, r3, #8
     384:	e5c53029 	strb	r3, [r5, #41]	; 0x29

	SPIWR_num_bytes = 42;
     388:	e59f308c 	ldr	r3, [pc, #140]	; 41c <PLLSTAT_PLOCK+0x1c>
     38c:	e3a0202a 	mov	r2, #42	; 0x2a
     390:	e5832000 	str	r2, [r3]
	data_sent_to_LL = 0;
     394:	e59f3084 	ldr	r3, [pc, #132]	; 420 <PLLSTAT_PLOCK+0x20>
     398:	e3a01000 	mov	r1, #0
     39c:	e5c31000 	strb	r1, [r3]
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
	}

	SPIWRData[40] = spi_chksum; //chksum LSB
     3a0:	e5c50028 	strb	r0, [r5, #40]	; 0x28
	SPIWRData[41] = (spi_chksum >> 8); //chksum MSB

	SPIWR_num_bytes = 42;
	data_sent_to_LL = 0;
}
     3a4:	e8bd4030 	pop	{r4, r5, lr}
     3a8:	e12fff1e 	bx	lr
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
	} else {
		for (i = 2; i < 22; i++) {
			SPIWRData[i] = *dataptr++;
     3ac:	e4d02001 	ldrb	r2, [r0], #1
			spi_chksum += SPIWRData[i];
     3b0:	e1dc30b0 	ldrh	r3, [ip]
     3b4:	e0833002 	add	r3, r3, r2
     3b8:	e1a03803 	lsl	r3, r3, #16
     3bc:	e1a03823 	lsr	r3, r3, #16
		for (i = 2; i < 40; i++) {
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
	} else {
		for (i = 2; i < 22; i++) {
     3c0:	e150000e 	cmp	r0, lr
			SPIWRData[i] = *dataptr++;
     3c4:	e5c12002 	strb	r2, [r1, #2]
			spi_chksum += SPIWRData[i];
     3c8:	e1cc30b0 	strh	r3, [ip]
     3cc:	e2811001 	add	r1, r1, #1
		for (i = 2; i < 40; i++) {
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
	} else {
		for (i = 2; i < 22; i++) {
     3d0:	1afffff5 	bne	3ac <LL_write_ctrl_data+0xa4>
     3d4:	e59fe038 	ldr	lr, [pc, #56]	; 414 <PLLSTAT_PLOCK+0x14>
     3d8:	e2804025 	add	r4, r0, #37	; 0x25
     3dc:	e2801013 	add	r1, r0, #19
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
		dataptr += 18;
		for (i = 22; i < 40; i++) {
			SPIWRData[i] = *dataptr++;
     3e0:	e5512001 	ldrb	r2, [r1, #-1]
			spi_chksum += SPIWRData[i];
     3e4:	e1dc30b0 	ldrh	r3, [ip]
     3e8:	e0833002 	add	r3, r3, r2
     3ec:	e1a03803 	lsl	r3, r3, #16
     3f0:	e2811001 	add	r1, r1, #1
     3f4:	e1a03823 	lsr	r3, r3, #16
		for (i = 2; i < 22; i++) {
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
		dataptr += 18;
		for (i = 22; i < 40; i++) {
     3f8:	e1510004 	cmp	r1, r4
			SPIWRData[i] = *dataptr++;
     3fc:	e5ce2016 	strb	r2, [lr, #22]
			spi_chksum += SPIWRData[i];
     400:	e1cc30b0 	strh	r3, [ip]
     404:	e28ee001 	add	lr, lr, #1
		for (i = 2; i < 22; i++) {
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
		dataptr += 18;
		for (i = 22; i < 40; i++) {
     408:	1afffff4 	bne	3e0 <LL_write_ctrl_data+0xd8>
     40c:	eaffffd9 	b	378 <LL_write_ctrl_data+0x70>
     410:	40000976 	.word	0x40000976
     414:	40001c64 	.word	0x40001c64
     418:	4000175c 	.word	0x4000175c
     41c:	40001c5c 	.word	0x40001c5c
     420:	4000000e 	.word	0x4000000e

00000424 <HL2LL_write_cycle>:
		}
	}
}

int HL2LL_write_cycle(void) //write data to low-level processor
{
     424:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned char i;
	static unsigned char jetiValuePartialSyncPending = 0;
	static unsigned char * transmitPtr;
	static unsigned short transmitCnt = 0;

	if (!data_sent_to_LL)
     428:	e59f38c4 	ldr	r3, [pc, #2244]	; cf4 <IRQ_Stack_Size+0x4f4>
     42c:	e5d30000 	ldrb	r0, [r3]
     430:	e3500000 	cmp	r0, #0
		}
	}
}

int HL2LL_write_cycle(void) //write data to low-level processor
{
     434:	e24dd010 	sub	sp, sp, #16
	unsigned char i;
	static unsigned char jetiValuePartialSyncPending = 0;
	static unsigned char * transmitPtr;
	static unsigned short transmitCnt = 0;

	if (!data_sent_to_LL)
     438:	0a00005c 	beq	5b0 <HL2LL_write_cycle+0x18c>

	//update 1kHz data
	LL_1khz_control_input.system_flags = 0 | pageselect;
	//SSP_ack=0;	//reset ack

	if (gpsDataOkTrigger)
     43c:	e59f38b4 	ldr	r3, [pc, #2228]	; cf8 <IRQ_Stack_Size+0x4f8>

	if (!data_sent_to_LL)
		return (0);

	//update 1kHz data
	LL_1khz_control_input.system_flags = 0 | pageselect;
     440:	e59f88b4 	ldr	r8, [pc, #2228]	; cfc <IRQ_Stack_Size+0x4fc>
	//SSP_ack=0;	//reset ack

	if (gpsDataOkTrigger)
     444:	e5932000 	ldr	r2, [r3]

	if (!data_sent_to_LL)
		return (0);

	//update 1kHz data
	LL_1khz_control_input.system_flags = 0 | pageselect;
     448:	e5d89000 	ldrb	r9, [r8]
     44c:	e59fb8ac 	ldr	fp, [pc, #2220]	; d00 <IRQ_Stack_Size+0x500>
	//SSP_ack=0;	//reset ack

	if (gpsDataOkTrigger)
     450:	e3520000 	cmp	r2, #0
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;

	if (WO_SDK.ctrl_enabled)
     454:	e59f28a8 	ldr	r2, [pc, #2216]	; d04 <IRQ_Stack_Size+0x504>
	//update 1kHz data
	LL_1khz_control_input.system_flags = 0 | pageselect;
	//SSP_ack=0;	//reset ack

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;
     458:	13893008 	orrne	r3, r9, #8

	if (!data_sent_to_LL)
		return (0);

	//update 1kHz data
	LL_1khz_control_input.system_flags = 0 | pageselect;
     45c:	e1cb90b0 	strh	r9, [fp]
	//SSP_ack=0;	//reset ack

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;
     460:	11cb30b0 	strhne	r3, [fp]

	if (WO_SDK.ctrl_enabled)
     464:	e5d23001 	ldrb	r3, [r2, #1]
     468:	e3530000 	cmp	r3, #0
		LL_1khz_control_input.system_flags |= SF_HL_CONTROL_ENABLED
     46c:	11db30b0 	ldrhne	r3, [fp]
				| SF_NEW_SDK;
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
     470:	01db30b0 	ldrheq	r3, [fp]

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;

	if (WO_SDK.ctrl_enabled)
		LL_1khz_control_input.system_flags |= SF_HL_CONTROL_ENABLED
     474:	13833143 	orrne	r3, r3, #-1073741808	; 0xc0000010
				| SF_NEW_SDK;
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
     478:	03c33010 	biceq	r3, r3, #16

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;

	if (WO_SDK.ctrl_enabled)
		LL_1khz_control_input.system_flags |= SF_HL_CONTROL_ENABLED
     47c:	138335ff 	orrne	r3, r3, #1069547520	; 0x3fc00000
				| SF_NEW_SDK;
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
     480:	01a03883 	lsleq	r3, r3, #17

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;

	if (WO_SDK.ctrl_enabled)
		LL_1khz_control_input.system_flags |= SF_HL_CONTROL_ENABLED
     484:	138339fe 	orrne	r3, r3, #4161536	; 0x3f8000
				| SF_NEW_SDK;
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
     488:	01a038a3 	lsreq	r3, r3, #17

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;

	if (WO_SDK.ctrl_enabled)
		LL_1khz_control_input.system_flags |= SF_HL_CONTROL_ENABLED
     48c:	11cb30b0 	strhne	r3, [fp]
				| SF_NEW_SDK;
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
     490:	01cb30b0 	strheq	r3, [fp]
				| SF_NEW_SDK);

	if (WO_SDK.disable_motor_onoff_by_stick)
     494:	e5d23002 	ldrb	r3, [r2, #2]
     498:	e3530000 	cmp	r3, #0
		LL_1khz_control_input.system_flags
     49c:	11db30b0 	ldrhne	r3, [fp]
				|= SF_SDK_DISABLE_MOTORONOFF_BY_STICK;
	else
		LL_1khz_control_input.system_flags
     4a0:	01db30b0 	ldrheq	r3, [fp]
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
				| SF_NEW_SDK);

	if (WO_SDK.disable_motor_onoff_by_stick)
		LL_1khz_control_input.system_flags
     4a4:	13833c01 	orrne	r3, r3, #256	; 0x100
				|= SF_SDK_DISABLE_MOTORONOFF_BY_STICK;
	else
		LL_1khz_control_input.system_flags
     4a8:	03c33c01 	biceq	r3, r3, #256	; 0x100
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
				| SF_NEW_SDK);

	if (WO_SDK.disable_motor_onoff_by_stick)
		LL_1khz_control_input.system_flags
     4ac:	11cb30b0 	strhne	r3, [fp]
				|= SF_SDK_DISABLE_MOTORONOFF_BY_STICK;
	else
		LL_1khz_control_input.system_flags
     4b0:	01cb30b0 	strheq	r3, [fp]
				&= ~SF_SDK_DISABLE_MOTORONOFF_BY_STICK;

	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
     4b4:	e5d23000 	ldrb	r3, [r2]
     4b8:	e3530000 	cmp	r3, #0
     4bc:	0a00003e 	beq	5bc <HL2LL_write_cycle+0x198>
		for (i = 0; i < 8; i++) {
			LL_1khz_control_input.direct_motor_control[i]
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
		}
	} else if (WO_SDK.ctrl_mode == 0x01) //direct motor control with standard output mapping
     4c0:	e3530001 	cmp	r3, #1
     4c4:	0a00008e 	beq	704 <HL2LL_write_cycle+0x2e0>
				= WO_Direct_Motor_Control.roll;
		LL_1khz_control_input.direct_motor_control[2]
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
     4c8:	e3530002 	cmp	r3, #2
     4cc:	0a000075 	beq	6a8 <HL2LL_write_cycle+0x284>
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
	} else if (WO_SDK.ctrl_mode == 0x03) //gps waypoint control
     4d0:	e3530003 	cmp	r3, #3
     4d4:	0a00013b 	beq	9c8 <IRQ_Stack_Size+0x1c8>
			}
		} else {
			LL_1khz_control_input.ctrl_flags &= 0x00FF;
		}
	} else
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
     4d8:	e1db30b0 	ldrh	r3, [fp]
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE);

	if (pageselect == 0) {
     4dc:	e3590000 	cmp	r9, #0
			}
		} else {
			LL_1khz_control_input.ctrl_flags &= 0x00FF;
		}
	} else
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
     4e0:	e3c330e0 	bic	r3, r3, #224	; 0xe0
     4e4:	e1cb30b0 	strh	r3, [fp]
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE);

	if (pageselect == 0) {
     4e8:	0a000044 	beq	600 <HL2LL_write_cycle+0x1dc>
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
		if (declinationAvailable == 1) {
     4ec:	e59f1814 	ldr	r1, [pc, #2068]	; d08 <IRQ_Stack_Size+0x508>
     4f0:	e5d13000 	ldrb	r3, [r1]
     4f4:	e20300ff 	and	r0, r3, #255	; 0xff
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
     4f8:	e59f380c 	ldr	r3, [pc, #2060]	; d0c <IRQ_Stack_Size+0x50c>
		//set pageselect to other page for next cycle
		pageselect = 1;
	} else //pageselect=1
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
     4fc:	e59f280c 	ldr	r2, [pc, #2060]	; d10 <IRQ_Stack_Size+0x510>
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
     500:	e1d3c0b2 	ldrh	ip, [r3, #2]
     504:	e1cbc3b2 	strh	ip, [fp, #50]	; 0x32
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
     508:	e1d2c2b4 	ldrh	ip, [r2, #36]	; 0x24
     50c:	e1cbc2bc 	strh	ip, [fp, #44]	; 0x2c
		//set pageselect to other page for next cycle
		pageselect = 1;
	} else //pageselect=1
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
     510:	e1d2c1b8 	ldrh	ip, [r2, #24]
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
     514:	e1d330b0 	ldrh	r3, [r3]
		//set pageselect to other page for next cycle
		pageselect = 1;
	} else //pageselect=1
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
     518:	e1cbc2b6 	strh	ip, [fp, #38]	; 0x26
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
     51c:	e1d2c1bc 	ldrh	ip, [r2, #28]
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
     520:	e1d222b0 	ldrh	r2, [r2, #32]
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
		if (declinationAvailable == 1) {
     524:	e3500001 	cmp	r0, #1
		pageselect = 1;
	} else //pageselect=1
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
     528:	e1cbc2b8 	strh	ip, [fp, #40]	; 0x28
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
     52c:	e1cb22ba 	strh	r2, [fp, #42]	; 0x2a
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
     530:	e1cb33b0 	strh	r3, [fp, #48]	; 0x30
		//set pageselect to other page for next cycle
		pageselect = 1;
	} else //pageselect=1
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
     534:	e59fe7c4 	ldr	lr, [pc, #1988]	; d00 <IRQ_Stack_Size+0x500>
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
		if (declinationAvailable == 1) {
     538:	0a00007e 	beq	738 <HL2LL_write_cycle+0x314>
			declinationAvailable = 2;
			LL_1khz_control_input.slowDataChannelSelect = SDC_DECLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedDeclination;

		} else if (declinationAvailable == 2) {
     53c:	e5d13000 	ldrb	r3, [r1]
     540:	e3530002 	cmp	r3, #2
     544:	0a000066 	beq	6e4 <HL2LL_write_cycle+0x2c0>
			declinationAvailable = 3;
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedInclination;

		} else if (transmitBuildInfoTrigger == 1) {
     548:	e59f47c4 	ldr	r4, [pc, #1988]	; d14 <IRQ_Stack_Size+0x514>
     54c:	e5d43000 	ldrb	r3, [r4]
     550:	e20300ff 	and	r0, r3, #255	; 0xff
     554:	e3500001 	cmp	r0, #1
     558:	0a00012f 	beq	a1c <IRQ_Stack_Size+0x21c>
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
     55c:	e5d43000 	ldrb	r3, [r4]
     560:	e3530002 	cmp	r3, #2
     564:	0a00013a 	beq	a54 <IRQ_Stack_Size+0x254>
			transmitPtr++;
			transmitCnt++;

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
		} else if (emergencyModeUpdate) {
     568:	e59f17a8 	ldr	r1, [pc, #1960]	; d18 <IRQ_Stack_Size+0x518>
     56c:	e5d13000 	ldrb	r3, [r1]
     570:	e3530000 	cmp	r3, #0
			LL_1khz_control_input.slowDataChannelSelect = SDC_EM_MODE;
			LL_1khz_control_input.slowDataChannelDataShort = emergencyMode;
     574:	159f37a0 	ldrne	r3, [pc, #1952]	; d1c <IRQ_Stack_Size+0x51c>
     578:	15d32000 	ldrbne	r2, [r3]
			//verify mode
			emergencyModeUpdate = 2;
     57c:	13a03002 	movne	r3, #2

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
		} else if (emergencyModeUpdate) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_EM_MODE;
			LL_1khz_control_input.slowDataChannelDataShort = emergencyMode;
     580:	11ce23b6 	strhne	r2, [lr, #54]	; 0x36
			transmitCnt++;

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
		} else if (emergencyModeUpdate) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_EM_MODE;
     584:	13a02018 	movne	r2, #24
			LL_1khz_control_input.slowDataChannelDataShort = emergencyMode;
			//verify mode
			emergencyModeUpdate = 2;
     588:	15c13000 	strbne	r3, [r1]
			transmitCnt++;

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
		} else if (emergencyModeUpdate) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_EM_MODE;
     58c:	15ce2034 	strbne	r2, [lr, #52]	; 0x34
			//verify mode
			emergencyModeUpdate = 2;
		} else {
			LL_1khz_control_input.slowDataChannelDataShort = 0;
			LL_1khz_control_input.slowDataChannelSelect = 0;
			LL_1khz_control_input.slowDataChannelDataChar = 0;
     590:	05ce3035 	strbeq	r3, [lr, #53]	; 0x35
			LL_1khz_control_input.slowDataChannelSelect = SDC_EM_MODE;
			LL_1khz_control_input.slowDataChannelDataShort = emergencyMode;
			//verify mode
			emergencyModeUpdate = 2;
		} else {
			LL_1khz_control_input.slowDataChannelDataShort = 0;
     594:	01ce33b6 	strheq	r3, [lr, #54]	; 0x36
			LL_1khz_control_input.slowDataChannelSelect = 0;
     598:	05ce3034 	strbeq	r3, [lr, #52]	; 0x34
			LL_1khz_control_input.slowDataChannelDataChar = 0;
		}

		//write data
		LL_write_ctrl_data(pageselect);
     59c:	e1a00009 	mov	r0, r9
     5a0:	ebffff58 	bl	308 <LL_write_ctrl_data>
		//set pageselect to other page for next cycle
		pageselect = 0;
     5a4:	e3a03000 	mov	r3, #0
     5a8:	e5c83000 	strb	r3, [r8]
     5ac:	e3a00001 	mov	r0, #1
	}
	return (1);
}
     5b0:	e28dd010 	add	sp, sp, #16
     5b4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5b8:	e12fff1e 	bx	lr
		LL_1khz_control_input.system_flags
				&= ~SF_SDK_DISABLE_MOTORONOFF_BY_STICK;

	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
	{
		LL_1khz_control_input.system_flags
     5bc:	e1db30b0 	ldrh	r3, [fp]
				|= SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL;
		for (i = 0; i < 8; i++) {
			LL_1khz_control_input.direct_motor_control[i]
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
     5c0:	e59f1758 	ldr	r1, [pc, #1880]	; d20 <IRQ_Stack_Size+0x520>
		LL_1khz_control_input.system_flags
				&= ~SF_SDK_DISABLE_MOTORONOFF_BY_STICK;

	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
	{
		LL_1khz_control_input.system_flags
     5c4:	e3833080 	orr	r3, r3, #128	; 0x80
     5c8:	e1cb30b0 	strh	r3, [fp]
				|= SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL;
		for (i = 0; i < 8; i++) {
			LL_1khz_control_input.direct_motor_control[i]
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
     5cc:	e5d12008 	ldrb	r2, [r1, #8]
     5d0:	e59fb728 	ldr	fp, [pc, #1832]	; d00 <IRQ_Stack_Size+0x500>
     5d4:	e1a02402 	lsl	r2, r2, #8
     5d8:	e1a0000b 	mov	r0, fp
     5dc:	e281c008 	add	ip, r1, #8
	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
	{
		LL_1khz_control_input.system_flags
				|= SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL;
		for (i = 0; i < 8; i++) {
			LL_1khz_control_input.direct_motor_control[i]
     5e0:	e4d13001 	ldrb	r3, [r1], #1

	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
	{
		LL_1khz_control_input.system_flags
				|= SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL;
		for (i = 0; i < 8; i++) {
     5e4:	e151000c 	cmp	r1, ip
			LL_1khz_control_input.direct_motor_control[i]
     5e8:	e5c0300c 	strb	r3, [r0, #12]
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
     5ec:	e2800001 	add	r0, r0, #1

	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
	{
		LL_1khz_control_input.system_flags
				|= SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL;
		for (i = 0; i < 8; i++) {
     5f0:	1afffffa 	bne	5e0 <HL2LL_write_cycle+0x1bc>
     5f4:	e1cb20b2 	strh	r2, [fp, #2]
		}
	} else
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE);

	if (pageselect == 0) {
     5f8:	e3590000 	cmp	r9, #0
     5fc:	1affffba 	bne	4ec <HL2LL_write_cycle+0xc8>
		if (LL_1khz_control_input.system_flags & SF_GPS_NEW) {
     600:	e1db30b0 	ldrh	r3, [fp]
     604:	e3130008 	tst	r3, #8
     608:	e59f56f0 	ldr	r5, [pc, #1776]	; d00 <IRQ_Stack_Size+0x500>
     60c:	1a000010 	bne	654 <HL2LL_write_cycle+0x230>

				//default is no command
				LL_1khz_control_input.status = 0;

				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
     610:	e59f670c 	ldr	r6, [pc, #1804]	; d24 <IRQ_Stack_Size+0x524>
     614:	e5d63000 	ldrb	r3, [r6]
     618:	e3530001 	cmp	r3, #1
			LL_1khz_control_input.speed_y = GPS_Data.speed_y;
			LL_1khz_control_input.heading = GPS_Data.heading;
			LL_1khz_control_input.status = GPS_Data.status;
		} else {
			//default is no command
			LL_1khz_control_input.status = 0;
     61c:	e1c592b4 	strh	r9, [r5, #36]	; 0x24
     620:	e1a07009 	mov	r7, r9

				//default is no command
				LL_1khz_control_input.status = 0;

				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
     624:	0a00011c 	beq	a9c <IRQ_Stack_Size+0x29c>
					jetiSyncState++;
					jetiSensorValCnt = 0;
					jetiSensorValUpdateTimeout = 0;

				} else {
					switch (jetiSyncState) {
     628:	e59fa6f8 	ldr	sl, [pc, #1784]	; d28 <IRQ_Stack_Size+0x528>
     62c:	e5da3000 	ldrb	r3, [sl]
     630:	e3530005 	cmp	r3, #5
     634:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
     638:	ea000014 	b	690 <HL2LL_write_cycle+0x26c>
     63c:	00000754 	.word	0x00000754
     640:	0000079c 	.word	0x0000079c
     644:	000007c8 	.word	0x000007c8
     648:	00000820 	.word	0x00000820
     64c:	00000874 	.word	0x00000874
     650:	000008c8 	.word	0x000008c8
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE);

	if (pageselect == 0) {
		if (LL_1khz_control_input.system_flags & SF_GPS_NEW) {
			//fill struct with 500Hz data
			LL_1khz_control_input.latitude = GPS_Data.latitude;
     654:	e59f36b4 	ldr	r3, [pc, #1716]	; d10 <IRQ_Stack_Size+0x510>
     658:	e5932000 	ldr	r2, [r3]
			LL_1khz_control_input.longitude = GPS_Data.longitude;
     65c:	e5931004 	ldr	r1, [r3, #4]
			LL_1khz_control_input.height = GPS_Data.height;
     660:	e5930008 	ldr	r0, [r3, #8]
			LL_1khz_control_input.speed_x = GPS_Data.speed_x;
			LL_1khz_control_input.speed_y = GPS_Data.speed_y;
			LL_1khz_control_input.heading = GPS_Data.heading;
			LL_1khz_control_input.status = GPS_Data.status;
     664:	e1d3c2b8 	ldrh	ip, [r3, #40]	; 0x28
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE);

	if (pageselect == 0) {
		if (LL_1khz_control_input.system_flags & SF_GPS_NEW) {
			//fill struct with 500Hz data
			LL_1khz_control_input.latitude = GPS_Data.latitude;
     668:	e5852014 	str	r2, [r5, #20]
			LL_1khz_control_input.longitude = GPS_Data.longitude;
     66c:	e5851018 	str	r1, [r5, #24]
			LL_1khz_control_input.height = GPS_Data.height;
			LL_1khz_control_input.speed_x = GPS_Data.speed_x;
			LL_1khz_control_input.speed_y = GPS_Data.speed_y;
     670:	e1d321b0 	ldrh	r2, [r3, #16]
		if (LL_1khz_control_input.system_flags & SF_GPS_NEW) {
			//fill struct with 500Hz data
			LL_1khz_control_input.latitude = GPS_Data.latitude;
			LL_1khz_control_input.longitude = GPS_Data.longitude;
			LL_1khz_control_input.height = GPS_Data.height;
			LL_1khz_control_input.speed_x = GPS_Data.speed_x;
     674:	e1d310bc 	ldrh	r1, [r3, #12]
			LL_1khz_control_input.speed_y = GPS_Data.speed_y;
			LL_1khz_control_input.heading = GPS_Data.heading;
     678:	e1d331b4 	ldrh	r3, [r3, #20]
			LL_1khz_control_input.status = GPS_Data.status;
     67c:	e1c5c2b4 	strh	ip, [r5, #36]	; 0x24
	if (pageselect == 0) {
		if (LL_1khz_control_input.system_flags & SF_GPS_NEW) {
			//fill struct with 500Hz data
			LL_1khz_control_input.latitude = GPS_Data.latitude;
			LL_1khz_control_input.longitude = GPS_Data.longitude;
			LL_1khz_control_input.height = GPS_Data.height;
     680:	e585001c 	str	r0, [r5, #28]
			LL_1khz_control_input.speed_x = GPS_Data.speed_x;
     684:	e1c512b0 	strh	r1, [r5, #32]
			LL_1khz_control_input.speed_y = GPS_Data.speed_y;
     688:	e1c522b2 	strh	r2, [r5, #34]	; 0x22
			LL_1khz_control_input.heading = GPS_Data.heading;
     68c:	e1c532be 	strh	r3, [r5, #46]	; 0x2e
				}
			}
		}

		//write data
		LL_write_ctrl_data(pageselect);
     690:	e5d80000 	ldrb	r0, [r8]
     694:	ebffff1b 	bl	308 <LL_write_ctrl_data>
		//set pageselect to other page for next cycle
		pageselect = 1;
     698:	e3a03001 	mov	r3, #1
     69c:	e1a00003 	mov	r0, r3
     6a0:	e5c83000 	strb	r3, [r8]
     6a4:	eaffffc1 	b	5b0 <HL2LL_write_cycle+0x18c>
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
     6a8:	e59f267c 	ldr	r2, [pc, #1660]	; d2c <IRQ_Stack_Size+0x52c>
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
     6ac:	e1db30b0 	ldrh	r3, [fp]
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
     6b0:	e1d210b6 	ldrh	r1, [r2, #6]
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
     6b4:	e3c330e0 	bic	r3, r3, #224	; 0xe0
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
     6b8:	e1d2c0b0 	ldrh	ip, [r2]
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
     6bc:	e1cb30b0 	strh	r3, [fp]
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
     6c0:	e1cb10ba 	strh	r1, [fp, #10]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
     6c4:	e1d230b8 	ldrh	r3, [r2, #8]
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
     6c8:	e1d210b2 	ldrh	r1, [r2, #2]
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
     6cc:	e1d220b4 	ldrh	r2, [r2, #4]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
     6d0:	e1cb30b2 	strh	r3, [fp, #2]
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
     6d4:	e1cbc0b4 	strh	ip, [fp, #4]
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
     6d8:	e1cb10b6 	strh	r1, [fp, #6]
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
     6dc:	e1cb20b8 	strh	r2, [fp, #8]
     6e0:	eaffffc4 	b	5f8 <HL2LL_write_cycle+0x1d4>
			LL_1khz_control_input.slowDataChannelSelect = SDC_DECLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedDeclination;

		} else if (declinationAvailable == 2) {
			declinationAvailable = 3;
     6e4:	e2833001 	add	r3, r3, #1
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
     6e8:	e59f2640 	ldr	r2, [pc, #1600]	; d30 <IRQ_Stack_Size+0x530>
			LL_1khz_control_input.slowDataChannelSelect = SDC_DECLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedDeclination;

		} else if (declinationAvailable == 2) {
			declinationAvailable = 3;
     6ec:	e5c13000 	strb	r3, [r1]
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
     6f0:	e5923000 	ldr	r3, [r2]
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedDeclination;

		} else if (declinationAvailable == 2) {
			declinationAvailable = 3;
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
     6f4:	e3a02012 	mov	r2, #18
			LL_1khz_control_input.slowDataChannelDataShort
     6f8:	e1ce33b6 	strh	r3, [lr, #54]	; 0x36
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedDeclination;

		} else if (declinationAvailable == 2) {
			declinationAvailable = 3;
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
     6fc:	e5ce2034 	strb	r2, [lr, #52]	; 0x34
     700:	eaffffa5 	b	59c <HL2LL_write_cycle+0x178>
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
		}
	} else if (WO_SDK.ctrl_mode == 0x01) //direct motor control with standard output mapping
	{
		LL_1khz_control_input.system_flags |= SF_DIRECT_MOTOR_CONTROL;
		LL_1khz_control_input.direct_motor_control[0]
     704:	e59f3628 	ldr	r3, [pc, #1576]	; d34 <IRQ_Stack_Size+0x534>
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
		}
	} else if (WO_SDK.ctrl_mode == 0x01) //direct motor control with standard output mapping
	{
		LL_1khz_control_input.system_flags |= SF_DIRECT_MOTOR_CONTROL;
     708:	e1db20b0 	ldrh	r2, [fp]
				= WO_Direct_Motor_Control.pitch;
		LL_1khz_control_input.direct_motor_control[1]
				= WO_Direct_Motor_Control.roll;
		LL_1khz_control_input.direct_motor_control[2]
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
     70c:	e5d3e003 	ldrb	lr, [r3, #3]
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
		}
	} else if (WO_SDK.ctrl_mode == 0x01) //direct motor control with standard output mapping
	{
		LL_1khz_control_input.system_flags |= SF_DIRECT_MOTOR_CONTROL;
		LL_1khz_control_input.direct_motor_control[0]
     710:	e5d31000 	ldrb	r1, [r3]
				= WO_Direct_Motor_Control.pitch;
		LL_1khz_control_input.direct_motor_control[1]
     714:	e5d30001 	ldrb	r0, [r3, #1]
				= WO_Direct_Motor_Control.roll;
		LL_1khz_control_input.direct_motor_control[2]
     718:	e5d3c002 	ldrb	ip, [r3, #2]
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
		}
	} else if (WO_SDK.ctrl_mode == 0x01) //direct motor control with standard output mapping
	{
		LL_1khz_control_input.system_flags |= SF_DIRECT_MOTOR_CONTROL;
     71c:	e3822020 	orr	r2, r2, #32
     720:	e1cb20b0 	strh	r2, [fp]
		LL_1khz_control_input.direct_motor_control[0]
     724:	e5cb100c 	strb	r1, [fp, #12]
				= WO_Direct_Motor_Control.pitch;
		LL_1khz_control_input.direct_motor_control[1]
     728:	e5cb000d 	strb	r0, [fp, #13]
				= WO_Direct_Motor_Control.roll;
		LL_1khz_control_input.direct_motor_control[2]
     72c:	e5cbc00e 	strb	ip, [fp, #14]
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
     730:	e5cbe00f 	strb	lr, [fp, #15]
     734:	eaffffaf 	b	5f8 <HL2LL_write_cycle+0x1d4>
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
		if (declinationAvailable == 1) {
			declinationAvailable = 2;
     738:	e3a03002 	mov	r3, #2
     73c:	e5c13000 	strb	r3, [r1]
			LL_1khz_control_input.slowDataChannelSelect = SDC_DECLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
     740:	e59f25f0 	ldr	r2, [pc, #1520]	; d38 <IRQ_Stack_Size+0x538>
     744:	e5923000 	ldr	r3, [r2]
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
		if (declinationAvailable == 1) {
			declinationAvailable = 2;
			LL_1khz_control_input.slowDataChannelSelect = SDC_DECLINATION;
     748:	e5ce0034 	strb	r0, [lr, #52]	; 0x34
			LL_1khz_control_input.slowDataChannelDataShort
     74c:	e1ce33b6 	strh	r3, [lr, #54]	; 0x36
     750:	eaffff91 	b	59c <HL2LL_write_cycle+0x178>

				} else {
					switch (jetiSyncState) {
					case 0:
						//sync name
						LL_1khz_control_input.status = PD_JETI_SETNAME;
     754:	e3a0c0a0 	mov	ip, #160	; 0xa0
						memcpy(&LL_1khz_control_input.latitude, &jetiName[0], 4);
     758:	e59f15dc 	ldr	r1, [pc, #1500]	; d3c <IRQ_Stack_Size+0x53c>
     75c:	e3a02004 	mov	r2, #4

				} else {
					switch (jetiSyncState) {
					case 0:
						//sync name
						LL_1khz_control_input.status = PD_JETI_SETNAME;
     760:	e1cbc2b4 	strh	ip, [fp, #36]	; 0x24
						memcpy(&LL_1khz_control_input.latitude, &jetiName[0], 4);
     764:	e59f05d4 	ldr	r0, [pc, #1492]	; d40 <IRQ_Stack_Size+0x540>
     768:	eb003423 	bl	d7fc <__memcpy_from_arm>
						memcpy(&LL_1khz_control_input.longitude, &jetiName[4],
     76c:	e59f15d0 	ldr	r1, [pc, #1488]	; d44 <IRQ_Stack_Size+0x544>
     770:	e3a02004 	mov	r2, #4
     774:	e59f05cc 	ldr	r0, [pc, #1484]	; d48 <IRQ_Stack_Size+0x548>
     778:	eb00341f 	bl	d7fc <__memcpy_from_arm>
								4);
						memcpy(&LL_1khz_control_input.speed_x, &jetiName[8], 2);
     77c:	e59f05c8 	ldr	r0, [pc, #1480]	; d4c <IRQ_Stack_Size+0x54c>
     780:	e59f15c8 	ldr	r1, [pc, #1480]	; d50 <IRQ_Stack_Size+0x550>
								&jetiDisplayText[4], 4);
						memcpy(&LL_1khz_control_input.height,
								&jetiDisplayText[8], 4);
						memcpy(&LL_1khz_control_input.speed_x,
								&jetiDisplayText[12], 2);
						memcpy(&LL_1khz_control_input.speed_y,
     784:	e3a02002 	mov	r2, #2
     788:	eb00341b 	bl	d7fc <__memcpy_from_arm>
								&jetiDisplayText[14], 2);
						jetiSyncState++;
     78c:	e5da3000 	ldrb	r3, [sl]
     790:	e2833001 	add	r3, r3, #1
     794:	e5ca3000 	strb	r3, [sl]
     798:	eaffffbc 	b	690 <HL2LL_write_cycle+0x26c>
						jetiSyncState++;
						break;
					case 1:
						//sync alarm
						LL_1khz_control_input.status = PD_JETI_SETALARM;
						LL_1khz_control_input.speed_x = jetiAlarm;
     79c:	e59f35b0 	ldr	r3, [pc, #1456]	; d54 <IRQ_Stack_Size+0x554>
						LL_1khz_control_input.speed_y = jetiAlarmType;
     7a0:	e59f25b0 	ldr	r2, [pc, #1456]	; d58 <IRQ_Stack_Size+0x558>
						jetiSyncState++;
						break;
					case 1:
						//sync alarm
						LL_1khz_control_input.status = PD_JETI_SETALARM;
						LL_1khz_control_input.speed_x = jetiAlarm;
     7a4:	e5d31000 	ldrb	r1, [r3]
						LL_1khz_control_input.speed_y = jetiAlarmType;
     7a8:	e5d23000 	ldrb	r3, [r2]
						jetiSyncState++;
						break;
					case 1:
						//sync alarm
						LL_1khz_control_input.status = PD_JETI_SETALARM;
						LL_1khz_control_input.speed_x = jetiAlarm;
     7ac:	e1cb12b0 	strh	r1, [fp, #32]
						LL_1khz_control_input.speed_y = jetiAlarmType;
						jetiSyncState++;
     7b0:	e3a02002 	mov	r2, #2

						jetiSyncState++;
						break;
					case 1:
						//sync alarm
						LL_1khz_control_input.status = PD_JETI_SETALARM;
     7b4:	e3a010a3 	mov	r1, #163	; 0xa3
						LL_1khz_control_input.speed_x = jetiAlarm;
						LL_1khz_control_input.speed_y = jetiAlarmType;
     7b8:	e1cb32b2 	strh	r3, [fp, #34]	; 0x22
						jetiSyncState++;
     7bc:	e5ca2000 	strb	r2, [sl]

						jetiSyncState++;
						break;
					case 1:
						//sync alarm
						LL_1khz_control_input.status = PD_JETI_SETALARM;
     7c0:	e1cb12b4 	strh	r1, [fp, #36]	; 0x24
     7c4:	eaffffb1 	b	690 <HL2LL_write_cycle+0x26c>
						LL_1khz_control_input.speed_y = jetiAlarmType;
						jetiSyncState++;
						break;
					case 2:
						//sync complete sensor fields
						if (jetiValues[jetiSensorCnt].active) {
     7c8:	e59f558c 	ldr	r5, [pc, #1420]	; d5c <IRQ_Stack_Size+0x55c>
     7cc:	e5d52000 	ldrb	r2, [r5]
     7d0:	e0823102 	add	r3, r2, r2, lsl #2
     7d4:	e59f4584 	ldr	r4, [pc, #1412]	; d60 <IRQ_Stack_Size+0x560>
     7d8:	e0823083 	add	r3, r2, r3, lsl #1
     7dc:	e1a03083 	lsl	r3, r3, #1
     7e0:	e7d3c004 	ldrb	ip, [r3, r4]
     7e4:	e35c0000 	cmp	ip, #0
     7e8:	e0831004 	add	r1, r3, r4
     7ec:	1a0000f8 	bne	bd4 <IRQ_Stack_Size+0x3d4>
									&jetiValues[jetiSensorCnt].name[8], 2);
							LL_1khz_control_input.speed_y
									= jetiValues[jetiSensorCnt].decPoint;
							jetiValuePartialSyncPending = 1;
						} else {
							jetiSensorCnt++;
     7f0:	e2823001 	add	r3, r2, #1
     7f4:	e20330ff 	and	r3, r3, #255	; 0xff
							if (jetiSensorCnt == 15) {
     7f8:	e353000f 	cmp	r3, #15
									&jetiValues[jetiSensorCnt].name[8], 2);
							LL_1khz_control_input.speed_y
									= jetiValues[jetiSensorCnt].decPoint;
							jetiValuePartialSyncPending = 1;
						} else {
							jetiSensorCnt++;
     7fc:	e5c53000 	strb	r3, [r5]
							if (jetiSensorCnt == 15) {
								jetiSensorCnt = 0;
							}

							jetiSyncState++;
     800:	e3a03003 	mov	r3, #3
     804:	e5ca3000 	strb	r3, [sl]
							jetiSensorValCnt = 0;
							jetiSensorValUpdateTimeout = 0;
     808:	e59f2554 	ldr	r2, [pc, #1364]	; d64 <IRQ_Stack_Size+0x564>
							if (jetiSensorCnt == 15) {
								jetiSensorCnt = 0;
							}

							jetiSyncState++;
							jetiSensorValCnt = 0;
     80c:	e59f3554 	ldr	r3, [pc, #1364]	; d68 <IRQ_Stack_Size+0x568>
									= jetiValues[jetiSensorCnt].decPoint;
							jetiValuePartialSyncPending = 1;
						} else {
							jetiSensorCnt++;
							if (jetiSensorCnt == 15) {
								jetiSensorCnt = 0;
     810:	05c5c000 	strbeq	ip, [r5]
							}

							jetiSyncState++;
							jetiSensorValCnt = 0;
							jetiSensorValUpdateTimeout = 0;
     814:	e5c2c000 	strb	ip, [r2]
							if (jetiSensorCnt == 15) {
								jetiSensorCnt = 0;
							}

							jetiSyncState++;
							jetiSensorValCnt = 0;
     818:	e5c3c000 	strb	ip, [r3]
     81c:	eaffff9b 	b	690 <HL2LL_write_cycle+0x26c>
						}
						break;

					case 3:
						//sync text
						LL_1khz_control_input.status = PD_JETI_SETTEXT;
     820:	e3a0c0a4 	mov	ip, #164	; 0xa4
     824:	e1cbc2b4 	strh	ip, [fp, #36]	; 0x24
						memcpy(&LL_1khz_control_input.latitude,
     828:	e59f153c 	ldr	r1, [pc, #1340]	; d6c <IRQ_Stack_Size+0x56c>
     82c:	e3a02004 	mov	r2, #4
     830:	e59f0508 	ldr	r0, [pc, #1288]	; d40 <IRQ_Stack_Size+0x540>
     834:	eb0033f0 	bl	d7fc <__memcpy_from_arm>
								&jetiDisplayText[0], 4);
						memcpy(&LL_1khz_control_input.longitude,
     838:	e59f1530 	ldr	r1, [pc, #1328]	; d70 <IRQ_Stack_Size+0x570>
     83c:	e3a02004 	mov	r2, #4
     840:	e59f0500 	ldr	r0, [pc, #1280]	; d48 <IRQ_Stack_Size+0x548>
     844:	eb0033ec 	bl	d7fc <__memcpy_from_arm>
								&jetiDisplayText[4], 4);
						memcpy(&LL_1khz_control_input.height,
     848:	e59f1524 	ldr	r1, [pc, #1316]	; d74 <IRQ_Stack_Size+0x574>
     84c:	e3a02004 	mov	r2, #4
     850:	e59f0520 	ldr	r0, [pc, #1312]	; d78 <IRQ_Stack_Size+0x578>
     854:	eb0033e8 	bl	d7fc <__memcpy_from_arm>
								&jetiDisplayText[8], 4);
						memcpy(&LL_1khz_control_input.speed_x,
     858:	e59f151c 	ldr	r1, [pc, #1308]	; d7c <IRQ_Stack_Size+0x57c>
     85c:	e3a02002 	mov	r2, #2
     860:	e59f04e4 	ldr	r0, [pc, #1252]	; d4c <IRQ_Stack_Size+0x54c>
     864:	eb0033e4 	bl	d7fc <__memcpy_from_arm>
								&jetiDisplayText[12], 2);
						memcpy(&LL_1khz_control_input.speed_y,
     868:	e59f0510 	ldr	r0, [pc, #1296]	; d80 <IRQ_Stack_Size+0x580>
     86c:	e59f1510 	ldr	r1, [pc, #1296]	; d84 <IRQ_Stack_Size+0x584>
     870:	eaffffc3 	b	784 <HL2LL_write_cycle+0x360>
						jetiSyncState++;
						break;

					case 4:
						//sync text2
						LL_1khz_control_input.status = PD_JETI_SETTEXT2;
     874:	e3a030a7 	mov	r3, #167	; 0xa7
     878:	e1cb32b4 	strh	r3, [fp, #36]	; 0x24

						memcpy(&LL_1khz_control_input.latitude,
     87c:	e59f1504 	ldr	r1, [pc, #1284]	; d88 <IRQ_Stack_Size+0x588>
     880:	e3a02004 	mov	r2, #4
     884:	e59f04b4 	ldr	r0, [pc, #1204]	; d40 <IRQ_Stack_Size+0x540>
     888:	eb0033db 	bl	d7fc <__memcpy_from_arm>
								&jetiDisplayText[16], 4);
						memcpy(&LL_1khz_control_input.longitude,
     88c:	e59f14f8 	ldr	r1, [pc, #1272]	; d8c <IRQ_Stack_Size+0x58c>
     890:	e3a02004 	mov	r2, #4
     894:	e59f04ac 	ldr	r0, [pc, #1196]	; d48 <IRQ_Stack_Size+0x548>
     898:	eb0033d7 	bl	d7fc <__memcpy_from_arm>
								&jetiDisplayText[20], 4);
						memcpy(&LL_1khz_control_input.height,
     89c:	e59f14ec 	ldr	r1, [pc, #1260]	; d90 <IRQ_Stack_Size+0x590>
     8a0:	e3a02004 	mov	r2, #4
     8a4:	e59f04cc 	ldr	r0, [pc, #1228]	; d78 <IRQ_Stack_Size+0x578>
     8a8:	eb0033d3 	bl	d7fc <__memcpy_from_arm>
								&jetiDisplayText[24], 4);
						memcpy(&LL_1khz_control_input.speed_x,
     8ac:	e59f14e0 	ldr	r1, [pc, #1248]	; d94 <IRQ_Stack_Size+0x594>
     8b0:	e3a02002 	mov	r2, #2
     8b4:	e59f0490 	ldr	r0, [pc, #1168]	; d4c <IRQ_Stack_Size+0x54c>
     8b8:	eb0033cf 	bl	d7fc <__memcpy_from_arm>
								&jetiDisplayText[28], 2);
						memcpy(&LL_1khz_control_input.speed_y,
     8bc:	e59f04bc 	ldr	r0, [pc, #1212]	; d80 <IRQ_Stack_Size+0x580>
     8c0:	e59f14d0 	ldr	r1, [pc, #1232]	; d98 <IRQ_Stack_Size+0x598>
     8c4:	eaffffae 	b	784 <HL2LL_write_cycle+0x360>

					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
     8c8:	e59f9498 	ldr	r9, [pc, #1176]	; d68 <IRQ_Stack_Size+0x568>
     8cc:	e5d9c000 	ldrb	ip, [r9]
						LL_1khz_control_input.latitude = jetiValues[3
     8d0:	e08c108c 	add	r1, ip, ip, lsl #1
     8d4:	e0813101 	add	r3, r1, r1, lsl #2
     8d8:	e59f5480 	ldr	r5, [pc, #1152]	; d60 <IRQ_Stack_Size+0x560>
     8dc:	e0811083 	add	r1, r1, r3, lsl #1
     8e0:	e1a01081 	lsl	r1, r1, #1

					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
     8e4:	e58bc01c 	str	ip, [fp, #28]
						LL_1khz_control_input.latitude = jetiValues[3
     8e8:	e0813005 	add	r3, r1, r5
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     8ec:	e2832026 	add	r2, r3, #38	; 0x26
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     8f0:	e2833010 	add	r3, r3, #16
     8f4:	e5d34003 	ldrb	r4, [r3, #3]
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     8f8:	e5d20003 	ldrb	r0, [r2, #3]
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     8fc:	e5d3e002 	ldrb	lr, [r3, #2]
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     900:	e5d2c002 	ldrb	ip, [r2, #2]
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     904:	e5d36004 	ldrb	r6, [r3, #4]
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     908:	e5d27004 	ldrb	r7, [r2, #4]
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     90c:	e18ee404 	orr	lr, lr, r4, lsl #8
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     910:	e18cc400 	orr	ip, ip, r0, lsl #8
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     914:	e5d34005 	ldrb	r4, [r3, #5]
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     918:	e5d20005 	ldrb	r0, [r2, #5]
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     91c:	e18ee806 	orr	lr, lr, r6, lsl #16
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     920:	e18cc807 	orr	ip, ip, r7, lsl #16
     924:	e18ccc00 	orr	ip, ip, r0, lsl #24
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     928:	e18eec04 	orr	lr, lr, r4, lsl #24
						break;

					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
     92c:	e3a030a2 	mov	r3, #162	; 0xa2
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
								* jetiSensorValCnt + 1].value;
						memcpy(&LL_1khz_control_input.speed_y,
     930:	e0811005 	add	r1, r1, r5
     934:	e2811040 	add	r1, r1, #64	; 0x40
     938:	e3a02002 	mov	r2, #2

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     93c:	e58bc018 	str	ip, [fp, #24]
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     940:	e58be014 	str	lr, [fp, #20]
						break;

					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
     944:	e1cb32b4 	strh	r3, [fp, #36]	; 0x24
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
								* jetiSensorValCnt + 1].value;
						memcpy(&LL_1khz_control_input.speed_y,
     948:	e59f0430 	ldr	r0, [pc, #1072]	; d80 <IRQ_Stack_Size+0x580>
     94c:	eb0033aa 	bl	d7fc <__memcpy_from_arm>
								(void *) (((unsigned char *) (&jetiValues[3
										* jetiSensorValCnt + 2].value)) + 2), 2);
						memcpy(&LL_1khz_control_input.speed_x, &jetiValues[3
     950:	e5d93000 	ldrb	r3, [r9]
     954:	e0833283 	add	r3, r3, r3, lsl #5
     958:	e0855083 	add	r5, r5, r3, lsl #1
     95c:	e3a02002 	mov	r2, #2
     960:	e285103e 	add	r1, r5, #62	; 0x3e
     964:	e59f03e0 	ldr	r0, [pc, #992]	; d4c <IRQ_Stack_Size+0x54c>
     968:	eb0033a3 	bl	d7fc <__memcpy_from_arm>
								* jetiSensorValCnt + 2].value, 2);

						jetiSensorValCnt++;
     96c:	e5d93000 	ldrb	r3, [r9]
     970:	e2833001 	add	r3, r3, #1
     974:	e20330ff 	and	r3, r3, #255	; 0xff
						if (jetiSensorValCnt == 5)
							jetiSensorValCnt = 0;

						if (jetiTriggerTextSync) {
     978:	e59f241c 	ldr	r2, [pc, #1052]	; d9c <IRQ_Stack_Size+0x59c>
										* jetiSensorValCnt + 2].value)) + 2), 2);
						memcpy(&LL_1khz_control_input.speed_x, &jetiValues[3
								* jetiSensorValCnt + 2].value, 2);

						jetiSensorValCnt++;
						if (jetiSensorValCnt == 5)
     97c:	e3530005 	cmp	r3, #5
								(void *) (((unsigned char *) (&jetiValues[3
										* jetiSensorValCnt + 2].value)) + 2), 2);
						memcpy(&LL_1khz_control_input.speed_x, &jetiValues[3
								* jetiSensorValCnt + 2].value, 2);

						jetiSensorValCnt++;
     980:	e5c93000 	strb	r3, [r9]
						if (jetiSensorValCnt == 5)
							jetiSensorValCnt = 0;
     984:	02433005 	subeq	r3, r3, #5
     988:	05c93000 	strbeq	r3, [r9]

						if (jetiTriggerTextSync) {
     98c:	e5d23000 	ldrb	r3, [r2]
     990:	e3530000 	cmp	r3, #0
							jetiSyncState = 3; //trigger text resync
							jetiTriggerTextSync = 0;
     994:	13a03000 	movne	r3, #0
     998:	15c23000 	strbne	r3, [r2]
						jetiSensorValCnt++;
						if (jetiSensorValCnt == 5)
							jetiSensorValCnt = 0;

						if (jetiTriggerTextSync) {
							jetiSyncState = 3; //trigger text resync
     99c:	13a02003 	movne	r2, #3
     9a0:	15ca2000 	strbne	r2, [sl]
							jetiTriggerTextSync = 0;
						}

						jetiSensorValUpdateTimeout++;
     9a4:	e59f23b8 	ldr	r2, [pc, #952]	; d64 <IRQ_Stack_Size+0x564>
     9a8:	e5d23000 	ldrb	r3, [r2]
     9ac:	e2833001 	add	r3, r3, #1
     9b0:	e20330ff 	and	r3, r3, #255	; 0xff
						if (jetiSensorValUpdateTimeout == 75) {
     9b4:	e353004b 	cmp	r3, #75	; 0x4b
						if (jetiTriggerTextSync) {
							jetiSyncState = 3; //trigger text resync
							jetiTriggerTextSync = 0;
						}

						jetiSensorValUpdateTimeout++;
     9b8:	e5c23000 	strb	r3, [r2]
						if (jetiSensorValUpdateTimeout == 75) {
							jetiSyncState = 0;
     9bc:	0243304b 	subeq	r3, r3, #75	; 0x4b
     9c0:	05ca3000 	strbeq	r3, [sl]
     9c4:	eaffff31 	b	690 <HL2LL_write_cycle+0x26c>
	{
		LL_1khz_control_input.system_flags |= SF_WAYPOINT_MODE;

		//check if new command should be send

		if (wpCtrlWpCmdUpdated) {
     9c8:	e59fc3d0 	ldr	ip, [pc, #976]	; da0 <IRQ_Stack_Size+0x5a0>
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
	} else if (WO_SDK.ctrl_mode == 0x03) //gps waypoint control
	{
		LL_1khz_control_input.system_flags |= SF_WAYPOINT_MODE;
     9cc:	e1db30b0 	ldrh	r3, [fp]

		//check if new command should be send

		if (wpCtrlWpCmdUpdated) {
     9d0:	e5dc2000 	ldrb	r2, [ip]
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
	} else if (WO_SDK.ctrl_mode == 0x03) //gps waypoint control
	{
		LL_1khz_control_input.system_flags |= SF_WAYPOINT_MODE;
     9d4:	e59fa324 	ldr	sl, [pc, #804]	; d00 <IRQ_Stack_Size+0x500>
     9d8:	e3833040 	orr	r3, r3, #64	; 0x40

		//check if new command should be send

		if (wpCtrlWpCmdUpdated) {
     9dc:	e3520000 	cmp	r2, #0
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
	} else if (WO_SDK.ctrl_mode == 0x03) //gps waypoint control
	{
		LL_1khz_control_input.system_flags |= SF_WAYPOINT_MODE;
     9e0:	e1cb30b0 	strh	r3, [fp]
				LL_1khz_control_input.ctrl_flags &= 0x00FF;
				LL_1khz_control_input.ctrl_flags |= wpCtrlWpCmd << 8;
				wpCtrlWpCmdUpdated = 0;
			}
		} else {
			LL_1khz_control_input.ctrl_flags &= 0x00FF;
     9e4:	05da3002 	ldrbeq	r3, [sl, #2]
     9e8:	01ca30b2 	strheq	r3, [sl, #2]
	{
		LL_1khz_control_input.system_flags |= SF_WAYPOINT_MODE;

		//check if new command should be send

		if (wpCtrlWpCmdUpdated) {
     9ec:	0affff01 	beq	5f8 <HL2LL_write_cycle+0x1d4>

			if (wpCtrlWpCmd == WP_CMD_SINGLE_WP) {
     9f0:	e59f33ac 	ldr	r3, [pc, #940]	; da4 <IRQ_Stack_Size+0x5a4>
     9f4:	e5d31000 	ldrb	r1, [r3]
     9f8:	e3510001 	cmp	r1, #1
     9fc:	0a000054 	beq	b54 <IRQ_Stack_Size+0x354>
					LL_1khz_control_input.direct_motor_control[7] = 0;
					wpCtrlWpCmdUpdated = 0;
					wpCtrlNavStatus = 0;
				}
			} else {
				LL_1khz_control_input.ctrl_flags &= 0x00FF;
     a00:	e5da3002 	ldrb	r3, [sl, #2]
				LL_1khz_control_input.ctrl_flags |= wpCtrlWpCmd << 8;
				wpCtrlWpCmdUpdated = 0;
     a04:	e59fc394 	ldr	ip, [pc, #916]	; da0 <IRQ_Stack_Size+0x5a0>
					wpCtrlWpCmdUpdated = 0;
					wpCtrlNavStatus = 0;
				}
			} else {
				LL_1khz_control_input.ctrl_flags &= 0x00FF;
				LL_1khz_control_input.ctrl_flags |= wpCtrlWpCmd << 8;
     a08:	e1833401 	orr	r3, r3, r1, lsl #8
				wpCtrlWpCmdUpdated = 0;
     a0c:	e3a02000 	mov	r2, #0
					wpCtrlWpCmdUpdated = 0;
					wpCtrlNavStatus = 0;
				}
			} else {
				LL_1khz_control_input.ctrl_flags &= 0x00FF;
				LL_1khz_control_input.ctrl_flags |= wpCtrlWpCmd << 8;
     a10:	e1ca30b2 	strh	r3, [sl, #2]
				wpCtrlWpCmdUpdated = 0;
     a14:	e5cc2000 	strb	r2, [ip]
     a18:	eafffef6 	b	5f8 <HL2LL_write_cycle+0x1d4>
					= estimatedInclination;

		} else if (transmitBuildInfoTrigger == 1) {
			transmitBuildInfoTrigger = 2;
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
     a1c:	e59f1384 	ldr	r1, [pc, #900]	; da8 <IRQ_Stack_Size+0x5a8>
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedInclination;

		} else if (transmitBuildInfoTrigger == 1) {
			transmitBuildInfoTrigger = 2;
     a20:	e3a03002 	mov	r3, #2
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a24:	e4d12001 	ldrb	r2, [r1], #1
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedInclination;

		} else if (transmitBuildInfoTrigger == 1) {
			transmitBuildInfoTrigger = 2;
     a28:	e5c43000 	strb	r3, [r4]
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
     a2c:	e59f3378 	ldr	r3, [pc, #888]	; dac <IRQ_Stack_Size+0x5ac>
			transmitBuildInfoTrigger = 2;
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a30:	e5ce2035 	strb	r2, [lr, #53]	; 0x35
			transmitPtr++;
			transmitCnt++;
     a34:	e59f2374 	ldr	r2, [pc, #884]	; db0 <IRQ_Stack_Size+0x5b0>
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
     a38:	e5831000 	str	r1, [r3]

		} else if (transmitBuildInfoTrigger == 1) {
			transmitBuildInfoTrigger = 2;
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
     a3c:	e3a03005 	mov	r3, #5
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
     a40:	e3a01000 	mov	r1, #0
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;
     a44:	e1c200b0 	strh	r0, [r2]

		} else if (transmitBuildInfoTrigger == 1) {
			transmitBuildInfoTrigger = 2;
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
     a48:	e5ce3034 	strb	r3, [lr, #52]	; 0x34
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
     a4c:	e1ce13b6 	strh	r1, [lr, #54]	; 0x36
     a50:	eafffed1 	b	59c <HL2LL_write_cycle+0x178>
			transmitPtr++;
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
     a54:	e59fc354 	ldr	ip, [pc, #852]	; db0 <IRQ_Stack_Size+0x5b0>
     a58:	e1dc30b0 	ldrh	r3, [ip]
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a5c:	e59f0348 	ldr	r0, [pc, #840]	; dac <IRQ_Stack_Size+0x5ac>
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
     a60:	e3a02005 	mov	r2, #5
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
     a64:	e1ce33b6 	strh	r3, [lr, #54]	; 0x36
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;
     a68:	e2833001 	add	r3, r3, #1
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
     a6c:	e5ce2034 	strb	r2, [lr, #52]	; 0x34
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;
     a70:	e1a03803 	lsl	r3, r3, #16
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a74:	e5902000 	ldr	r2, [r0]
			transmitPtr++;
			transmitCnt++;
     a78:	e1a03823 	lsr	r3, r3, #16
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a7c:	e4d21001 	ldrb	r1, [r2], #1
			transmitPtr++;
			transmitCnt++;

			if (transmitCnt == sizeof(buildInfo))
     a80:	e3530053 	cmp	r3, #83	; 0x53
		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;
     a84:	e1cc30b0 	strh	r3, [ip]

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
     a88:	02433050 	subeq	r3, r3, #80	; 0x50
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a8c:	e5ce1035 	strb	r1, [lr, #53]	; 0x35
			transmitPtr++;
     a90:	e5802000 	str	r2, [r0]
			transmitCnt++;

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
     a94:	05c43000 	strbeq	r3, [r4]
     a98:	eafffebf 	b	59c <HL2LL_write_cycle+0x178>
				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
					jetiValuePartialSyncPending = 0;
					LL_1khz_control_input.status = PD_JETI_SETSENSOR2;

					LL_1khz_control_input.height
     a9c:	e59fa2b8 	ldr	sl, [pc, #696]	; d5c <IRQ_Stack_Size+0x55c>
     aa0:	e5da3000 	ldrb	r3, [sl]
     aa4:	e59f42b4 	ldr	r4, [pc, #692]	; d60 <IRQ_Stack_Size+0x560>
     aa8:	e0832103 	add	r2, r3, r3, lsl #2
     aac:	e0833082 	add	r3, r3, r2, lsl #1
     ab0:	e7d4c083 	ldrb	ip, [r4, r3, lsl #1]
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
     ab4:	e0841083 	add	r1, r4, r3, lsl #1
				LL_1khz_control_input.status = 0;

				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
					jetiValuePartialSyncPending = 0;
					LL_1khz_control_input.status = PD_JETI_SETSENSOR2;
     ab8:	e3a030a6 	mov	r3, #166	; 0xa6

					LL_1khz_control_input.height
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
     abc:	e281100b 	add	r1, r1, #11
     ac0:	e3a02004 	mov	r2, #4
				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
					jetiValuePartialSyncPending = 0;
					LL_1khz_control_input.status = PD_JETI_SETSENSOR2;

					LL_1khz_control_input.height
     ac4:	e585c01c 	str	ip, [r5, #28]
				LL_1khz_control_input.status = 0;

				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
					jetiValuePartialSyncPending = 0;
					LL_1khz_control_input.status = PD_JETI_SETSENSOR2;
     ac8:	e1c532b4 	strh	r3, [r5, #36]	; 0x24

					LL_1khz_control_input.height
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
     acc:	e2850014 	add	r0, r5, #20
				//default is no command
				LL_1khz_control_input.status = 0;

				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
					jetiValuePartialSyncPending = 0;
     ad0:	e5c69000 	strb	r9, [r6]
					LL_1khz_control_input.status = PD_JETI_SETSENSOR2;

					LL_1khz_control_input.height
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
     ad4:	eb003348 	bl	d7fc <__memcpy_from_arm>
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
     ad8:	e5da1000 	ldrb	r1, [sl]
     adc:	e0813101 	add	r3, r1, r1, lsl #2
     ae0:	e0813083 	add	r3, r1, r3, lsl #1
     ae4:	e0844083 	add	r4, r4, r3, lsl #1
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
     ae8:	e2842010 	add	r2, r4, #16
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
     aec:	e5d20003 	ldrb	r0, [r2, #3]
     af0:	e5d23002 	ldrb	r3, [r2, #2]
     af4:	e5d2c004 	ldrb	ip, [r2, #4]
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
     af8:	e2811001 	add	r1, r1, #1
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
     afc:	e5d2e005 	ldrb	lr, [r2, #5]
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
     b00:	e20110ff 	and	r1, r1, #255	; 0xff
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
     b04:	e1833400 	orr	r3, r3, r0, lsl #8

					LL_1khz_control_input.height
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
     b08:	e5d4200f 	ldrb	r2, [r4, #15]
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
     b0c:	e5d40010 	ldrb	r0, [r4, #16]
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
     b10:	e351000f 	cmp	r1, #15
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
     b14:	e5ca1000 	strb	r1, [sl]
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
     b18:	e183380c 	orr	r3, r3, ip, lsl #16
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
					}
					jetiSyncState++;
     b1c:	e59f1204 	ldr	r1, [pc, #516]	; d28 <IRQ_Stack_Size+0x528>
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
     b20:	e1833c0e 	orr	r3, r3, lr, lsl #24
     b24:	e5853018 	str	r3, [r5, #24]
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
					}
					jetiSyncState++;
     b28:	e5d13000 	ldrb	r3, [r1]
     b2c:	e2833001 	add	r3, r3, #1

					LL_1khz_control_input.height
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
     b30:	e1c522b0 	strh	r2, [r5, #32]
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
					}
					jetiSyncState++;
     b34:	e5c13000 	strb	r3, [r1]
					jetiSensorValCnt = 0;
					jetiSensorValUpdateTimeout = 0;
     b38:	e59f2224 	ldr	r2, [pc, #548]	; d64 <IRQ_Stack_Size+0x564>
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
					}
					jetiSyncState++;
					jetiSensorValCnt = 0;
     b3c:	e59f3224 	ldr	r3, [pc, #548]	; d68 <IRQ_Stack_Size+0x568>
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
     b40:	e1c502b2 	strh	r0, [r5, #34]	; 0x22
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
     b44:	05ca9000 	strbeq	r9, [sl]
					}
					jetiSyncState++;
					jetiSensorValCnt = 0;
					jetiSensorValUpdateTimeout = 0;
     b48:	e5c29000 	strb	r9, [r2]
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
					}
					jetiSyncState++;
					jetiSensorValCnt = 0;
     b4c:	e5c39000 	strb	r9, [r3]
     b50:	eafffece 	b	690 <HL2LL_write_cycle+0x26c>
		//check if new command should be send

		if (wpCtrlWpCmdUpdated) {

			if (wpCtrlWpCmd == WP_CMD_SINGLE_WP) {
				if (wpCtrlWpCmdUpdated == 1) {
     b54:	e3520001 	cmp	r2, #1
     b58:	0a00003d 	beq	c54 <IRQ_Stack_Size+0x454>
							>> 16;
					LL_1khz_control_input.direct_motor_control[7] = wpToLL.yaw
							>> 24;

					wpCtrlWpCmdUpdated++;
				} else if (wpCtrlWpCmdUpdated == 2) {
     b5c:	e3520002 	cmp	r2, #2
     b60:	1afffea4 	bne	5f8 <HL2LL_write_cycle+0x1d4>
							= wpToLL.wp_activated;
					LL_1khz_control_input.direct_motor_control[4] = 0;
					LL_1khz_control_input.direct_motor_control[5] = 0;
					LL_1khz_control_input.direct_motor_control[6] = 0;
					LL_1khz_control_input.direct_motor_control[7] = 0;
					wpCtrlWpCmdUpdated = 0;
     b64:	e59f3234 	ldr	r3, [pc, #564]	; da0 <IRQ_Stack_Size+0x5a0>
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.time;
					LL_1khz_control_input.roll = 0; //wpToLL.cam_angle_pitch;
     b68:	e3a0c000 	mov	ip, #0
							>> 24;

					wpCtrlWpCmdUpdated++;
				} else if (wpCtrlWpCmdUpdated == 2) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
     b6c:	e5da2002 	ldrb	r2, [sl, #2]
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.time;
     b70:	e59f123c 	ldr	r1, [pc, #572]	; db4 <IRQ_Stack_Size+0x5b4>
							= wpToLL.wp_activated;
					LL_1khz_control_input.direct_motor_control[4] = 0;
					LL_1khz_control_input.direct_motor_control[5] = 0;
					LL_1khz_control_input.direct_motor_control[6] = 0;
					LL_1khz_control_input.direct_motor_control[7] = 0;
					wpCtrlWpCmdUpdated = 0;
     b74:	e5c3c000 	strb	ip, [r3]
					wpCtrlNavStatus = 0;
     b78:	e59f3238 	ldr	r3, [pc, #568]	; db8 <IRQ_Stack_Size+0x5b8>
							>> 24;

					wpCtrlWpCmdUpdated++;
				} else if (wpCtrlWpCmdUpdated == 2) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
     b7c:	e3822c82 	orr	r2, r2, #33280	; 0x8200
					LL_1khz_control_input.direct_motor_control[0] = 0; //wpToLL.cam_angle_roll;
					LL_1khz_control_input.direct_motor_control[1]
							= wpToLL.max_speed;
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.properties;
					LL_1khz_control_input.direct_motor_control[3]
     b80:	e5915000 	ldr	r5, [r1]
					LL_1khz_control_input.pitch = wpToLL.time;
					LL_1khz_control_input.roll = 0; //wpToLL.cam_angle_pitch;
					LL_1khz_control_input.thrust = wpToLL.pos_acc;
					LL_1khz_control_input.yaw = wpToLL.chksum;
					LL_1khz_control_input.direct_motor_control[0] = 0; //wpToLL.cam_angle_roll;
					LL_1khz_control_input.direct_motor_control[1]
     b84:	e5d1e005 	ldrb	lr, [r1, #5]
							= wpToLL.max_speed;
					LL_1khz_control_input.direct_motor_control[2]
     b88:	e5d14004 	ldrb	r4, [r1, #4]
					LL_1khz_control_input.direct_motor_control[4] = 0;
					LL_1khz_control_input.direct_motor_control[5] = 0;
					LL_1khz_control_input.direct_motor_control[6] = 0;
					LL_1khz_control_input.direct_motor_control[7] = 0;
					wpCtrlWpCmdUpdated = 0;
					wpCtrlNavStatus = 0;
     b8c:	e1c3c0b0 	strh	ip, [r3]
							>> 24;

					wpCtrlWpCmdUpdated++;
				} else if (wpCtrlWpCmdUpdated == 2) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
     b90:	e1ca20b2 	strh	r2, [sl, #2]
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.time;
					LL_1khz_control_input.roll = 0; //wpToLL.cam_angle_pitch;
					LL_1khz_control_input.thrust = wpToLL.pos_acc;
     b94:	e1d130b8 	ldrh	r3, [r1, #8]
				} else if (wpCtrlWpCmdUpdated == 2) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.time;
     b98:	e1d120b6 	ldrh	r2, [r1, #6]
					LL_1khz_control_input.roll = 0; //wpToLL.cam_angle_pitch;
					LL_1khz_control_input.thrust = wpToLL.pos_acc;
					LL_1khz_control_input.yaw = wpToLL.chksum;
     b9c:	e1d110ba 	ldrh	r1, [r1, #10]
					LL_1khz_control_input.direct_motor_control[0] = 0; //wpToLL.cam_angle_roll;
					LL_1khz_control_input.direct_motor_control[1]
     ba0:	e5cae00d 	strb	lr, [sl, #13]
							= wpToLL.max_speed;
					LL_1khz_control_input.direct_motor_control[2]
     ba4:	e5ca400e 	strb	r4, [sl, #14]
							= wpToLL.properties;
					LL_1khz_control_input.direct_motor_control[3]
     ba8:	e5ca500f 	strb	r5, [sl, #15]
							= wpToLL.wp_activated;
					LL_1khz_control_input.direct_motor_control[4] = 0;
					LL_1khz_control_input.direct_motor_control[5] = 0;
					LL_1khz_control_input.direct_motor_control[6] = 0;
					LL_1khz_control_input.direct_motor_control[7] = 0;
     bac:	e5cac013 	strb	ip, [sl, #19]
				} else if (wpCtrlWpCmdUpdated == 2) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.time;
     bb0:	e1ca20b4 	strh	r2, [sl, #4]
					LL_1khz_control_input.roll = 0; //wpToLL.cam_angle_pitch;
     bb4:	e1cac0b6 	strh	ip, [sl, #6]
					LL_1khz_control_input.thrust = wpToLL.pos_acc;
     bb8:	e1ca30ba 	strh	r3, [sl, #10]
					LL_1khz_control_input.yaw = wpToLL.chksum;
     bbc:	e1ca10b8 	strh	r1, [sl, #8]
					LL_1khz_control_input.direct_motor_control[0] = 0; //wpToLL.cam_angle_roll;
     bc0:	e5cac00c 	strb	ip, [sl, #12]
							= wpToLL.max_speed;
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.properties;
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.wp_activated;
					LL_1khz_control_input.direct_motor_control[4] = 0;
     bc4:	e5cac010 	strb	ip, [sl, #16]
					LL_1khz_control_input.direct_motor_control[5] = 0;
     bc8:	e5cac011 	strb	ip, [sl, #17]
					LL_1khz_control_input.direct_motor_control[6] = 0;
     bcc:	e5cac012 	strb	ip, [sl, #18]
     bd0:	eafffe88 	b	5f8 <HL2LL_write_cycle+0x1d4>
						jetiSyncState++;
						break;
					case 2:
						//sync complete sensor fields
						if (jetiValues[jetiSensorCnt].active) {
							LL_1khz_control_input.status = PD_JETI_SETSENSOR;
     bd4:	e3a030a1 	mov	r3, #161	; 0xa1
							LL_1khz_control_input.height
     bd8:	e58bc01c 	str	ip, [fp, #28]
									= jetiValues[jetiSensorCnt].active;
							memcpy(&LL_1khz_control_input.latitude,
     bdc:	e2811001 	add	r1, r1, #1
     be0:	e3a02004 	mov	r2, #4
						jetiSyncState++;
						break;
					case 2:
						//sync complete sensor fields
						if (jetiValues[jetiSensorCnt].active) {
							LL_1khz_control_input.status = PD_JETI_SETSENSOR;
     be4:	e1cb32b4 	strh	r3, [fp, #36]	; 0x24
							LL_1khz_control_input.height
									= jetiValues[jetiSensorCnt].active;
							memcpy(&LL_1khz_control_input.latitude,
     be8:	e59f0150 	ldr	r0, [pc, #336]	; d40 <IRQ_Stack_Size+0x540>
     bec:	eb003302 	bl	d7fc <__memcpy_from_arm>
									&jetiValues[jetiSensorCnt].name[0], 4);
							memcpy(&LL_1khz_control_input.longitude,
     bf0:	e5d51000 	ldrb	r1, [r5]
     bf4:	e0813101 	add	r3, r1, r1, lsl #2
     bf8:	e0811083 	add	r1, r1, r3, lsl #1
     bfc:	e0841081 	add	r1, r4, r1, lsl #1
     c00:	e2811005 	add	r1, r1, #5
     c04:	e3a02004 	mov	r2, #4
     c08:	e59f0138 	ldr	r0, [pc, #312]	; d48 <IRQ_Stack_Size+0x548>
     c0c:	eb0032fa 	bl	d7fc <__memcpy_from_arm>
									&jetiValues[jetiSensorCnt].name[4], 4);
							memcpy(&LL_1khz_control_input.speed_x,
     c10:	e5d51000 	ldrb	r1, [r5]
     c14:	e0813101 	add	r3, r1, r1, lsl #2
     c18:	e0811083 	add	r1, r1, r3, lsl #1
     c1c:	e0841081 	add	r1, r4, r1, lsl #1
     c20:	e3a02002 	mov	r2, #2
     c24:	e2811009 	add	r1, r1, #9
     c28:	e59f011c 	ldr	r0, [pc, #284]	; d4c <IRQ_Stack_Size+0x54c>
     c2c:	eb0032f2 	bl	d7fc <__memcpy_from_arm>
									&jetiValues[jetiSensorCnt].name[8], 2);
							LL_1khz_control_input.speed_y
     c30:	e5d53000 	ldrb	r3, [r5]
     c34:	e0832103 	add	r2, r3, r3, lsl #2
     c38:	e0833082 	add	r3, r3, r2, lsl #1
     c3c:	e0843083 	add	r3, r4, r3, lsl #1
     c40:	e5d32011 	ldrb	r2, [r3, #17]
									= jetiValues[jetiSensorCnt].decPoint;
							jetiValuePartialSyncPending = 1;
     c44:	e3a03001 	mov	r3, #1
									&jetiValues[jetiSensorCnt].name[0], 4);
							memcpy(&LL_1khz_control_input.longitude,
									&jetiValues[jetiSensorCnt].name[4], 4);
							memcpy(&LL_1khz_control_input.speed_x,
									&jetiValues[jetiSensorCnt].name[8], 2);
							LL_1khz_control_input.speed_y
     c48:	e1cb22b2 	strh	r2, [fp, #34]	; 0x22
									= jetiValues[jetiSensorCnt].decPoint;
							jetiValuePartialSyncPending = 1;
     c4c:	e5c63000 	strb	r3, [r6]
     c50:	eafffe8e 	b	690 <HL2LL_write_cycle+0x26c>
				if (wpCtrlWpCmdUpdated == 1) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
     c54:	e59f3158 	ldr	r3, [pc, #344]	; db4 <IRQ_Stack_Size+0x5b4>
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
					LL_1khz_control_input.direct_motor_control[0]
     c58:	e2830014 	add	r0, r3, #20
     c5c:	e8901001 	ldm	r0, {r0, ip}
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
     c60:	e283500c 	add	r5, r3, #12
     c64:	e8950060 	ldm	r5, {r5, r6}
							= wpToLL.height;
					LL_1khz_control_input.direct_motor_control[1]
							= wpToLL.height >> 8;
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.height >> 16;
					LL_1khz_control_input.direct_motor_control[3]
     c68:	e1a03c4c 	asr	r3, ip, #24
     c6c:	e58d3008 	str	r3, [sp, #8]
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
     c70:	e1a01846 	asr	r1, r6, #16
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.height >> 16;
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
     c74:	e1a03440 	asr	r3, r0, #8
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
     c78:	e58d100c 	str	r1, [sp, #12]
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.height >> 16;
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
     c7c:	e58d3004 	str	r3, [sp, #4]
							>> 8;
					LL_1khz_control_input.direct_motor_control[6] = wpToLL.yaw
							>> 16;
					LL_1khz_control_input.direct_motor_control[7] = wpToLL.yaw
     c80:	e1a01c40 	asr	r1, r0, #24
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
							>> 8;
					LL_1khz_control_input.direct_motor_control[6] = wpToLL.yaw
     c84:	e1a03840 	asr	r3, r0, #16
     c88:	e58d3000 	str	r3, [sp]
		if (wpCtrlWpCmdUpdated) {

			if (wpCtrlWpCmd == WP_CMD_SINGLE_WP) {
				if (wpCtrlWpCmdUpdated == 1) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
     c8c:	e5da2002 	ldrb	r2, [sl, #2]
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
							>> 8;
					LL_1khz_control_input.direct_motor_control[6] = wpToLL.yaw
							>> 16;
					LL_1khz_control_input.direct_motor_control[7] = wpToLL.yaw
     c90:	e5ca1013 	strb	r1, [sl, #19]
							>> 24;

					wpCtrlWpCmdUpdated++;
     c94:	e59f1104 	ldr	r1, [pc, #260]	; da0 <IRQ_Stack_Size+0x5a0>
     c98:	e3a03002 	mov	r3, #2
     c9c:	e5c13000 	strb	r3, [r1]
		if (wpCtrlWpCmdUpdated) {

			if (wpCtrlWpCmd == WP_CMD_SINGLE_WP) {
				if (wpCtrlWpCmdUpdated == 1) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
     ca0:	e3822c81 	orr	r2, r2, #33024	; 0x8100
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
					LL_1khz_control_input.direct_motor_control[0]
							= wpToLL.height;
					LL_1khz_control_input.direct_motor_control[1]
     ca4:	e1a0e44c 	asr	lr, ip, #8
							= wpToLL.height >> 8;
					LL_1khz_control_input.direct_motor_control[2]
     ca8:	e1a0484c 	asr	r4, ip, #16
		if (wpCtrlWpCmdUpdated) {

			if (wpCtrlWpCmd == WP_CMD_SINGLE_WP) {
				if (wpCtrlWpCmdUpdated == 1) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
     cac:	e1ca20b2 	strh	r2, [sl, #2]
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
     cb0:	e59d200c 	ldr	r2, [sp, #12]
					LL_1khz_control_input.direct_motor_control[0]
							= wpToLL.height;
					LL_1khz_control_input.direct_motor_control[1]
     cb4:	e5cae00d 	strb	lr, [sl, #13]
							= wpToLL.height >> 8;
					LL_1khz_control_input.direct_motor_control[2]
     cb8:	e5ca400e 	strb	r4, [sl, #14]
							= wpToLL.height >> 16;
					LL_1khz_control_input.direct_motor_control[3]
     cbc:	e59d3008 	ldr	r3, [sp, #8]
     cc0:	e5ca300f 	strb	r3, [sl, #15]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
     cc4:	e59d1004 	ldr	r1, [sp, #4]
     cc8:	e5ca1011 	strb	r1, [sl, #17]
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
     ccc:	e1ca20b8 	strh	r2, [sl, #8]
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
							>> 8;
					LL_1khz_control_input.direct_motor_control[6] = wpToLL.yaw
     cd0:	e59d2000 	ldr	r2, [sp]
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
     cd4:	e1a07845 	asr	r7, r5, #16
     cd8:	e1ca70b6 	strh	r7, [sl, #6]
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
							>> 8;
					LL_1khz_control_input.direct_motor_control[6] = wpToLL.yaw
     cdc:	e5ca2012 	strb	r2, [sl, #18]
				if (wpCtrlWpCmdUpdated == 1) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
     ce0:	e1ca50b4 	strh	r5, [sl, #4]
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
     ce4:	e1ca60ba 	strh	r6, [sl, #10]
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
					LL_1khz_control_input.direct_motor_control[0]
     ce8:	e5cac00c 	strb	ip, [sl, #12]
							= wpToLL.height >> 8;
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.height >> 16;
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
     cec:	e5ca0010 	strb	r0, [sl, #16]
     cf0:	eafffe40 	b	5f8 <HL2LL_write_cycle+0x1d4>
     cf4:	4000000e 	.word	0x4000000e
     cf8:	40000988 	.word	0x40000988
     cfc:	40000985 	.word	0x40000985
     d00:	4000175c 	.word	0x4000175c
     d04:	40001824 	.word	0x40001824
     d08:	40000a40 	.word	0x40000a40
     d0c:	40001980 	.word	0x40001980
     d10:	400017b0 	.word	0x400017b0
     d14:	4000096e 	.word	0x4000096e
     d18:	4000098c 	.word	0x4000098c
     d1c:	400018d0 	.word	0x400018d0
     d20:	40001818 	.word	0x40001818
     d24:	40000984 	.word	0x40000984
     d28:	4000097b 	.word	0x4000097b
     d2c:	40001808 	.word	0x40001808
     d30:	40000a3c 	.word	0x40000a3c
     d34:	40001814 	.word	0x40001814
     d38:	40000a38 	.word	0x40000a38
     d3c:	40001ece 	.word	0x40001ece
     d40:	40001770 	.word	0x40001770
     d44:	40001ed2 	.word	0x40001ed2
     d48:	40001774 	.word	0x40001774
     d4c:	4000177c 	.word	0x4000177c
     d50:	40001ed6 	.word	0x40001ed6
     d54:	40000a30 	.word	0x40000a30
     d58:	40000a31 	.word	0x40000a31
     d5c:	4000097a 	.word	0x4000097a
     d60:	40001d84 	.word	0x40001d84
     d64:	40000978 	.word	0x40000978
     d68:	40000979 	.word	0x40000979
     d6c:	40001d64 	.word	0x40001d64
     d70:	40001d68 	.word	0x40001d68
     d74:	40001d6c 	.word	0x40001d6c
     d78:	40001778 	.word	0x40001778
     d7c:	40001d70 	.word	0x40001d70
     d80:	4000177e 	.word	0x4000177e
     d84:	40001d72 	.word	0x40001d72
     d88:	40001d74 	.word	0x40001d74
     d8c:	40001d78 	.word	0x40001d78
     d90:	40001d7c 	.word	0x40001d7c
     d94:	40001d80 	.word	0x40001d80
     d98:	40001d82 	.word	0x40001d82
     d9c:	40000a32 	.word	0x40000a32
     da0:	40000967 	.word	0x40000967
     da4:	40000966 	.word	0x40000966
     da8:	400018d1 	.word	0x400018d1
     dac:	40000980 	.word	0x40000980
     db0:	4000097c 	.word	0x4000097c
     db4:	40001794 	.word	0x40001794
     db8:	4000096a 	.word	0x4000096a

00000dbc <SSP_data_distribution_HL>:

struct WAYPOINT wpToLL;

volatile unsigned char transmitBuildInfoTrigger = 0;

void SSP_data_distribution_HL(void) {
     dbc:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
	unsigned char i;
	unsigned char current_page = LL_1khz_attitude_data.system_flags & 0x03;
     dc0:	e59f630c 	ldr	r6, [pc, #780]	; 10d4 <SSP_data_distribution_HL+0x318>
     dc4:	e1d630b0 	ldrh	r3, [r6]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
     dc8:	e3130008 	tst	r3, #8

volatile unsigned char transmitBuildInfoTrigger = 0;

void SSP_data_distribution_HL(void) {
	unsigned char i;
	unsigned char current_page = LL_1khz_attitude_data.system_flags & 0x03;
     dcc:	e2037003 	and	r7, r3, #3
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;
     dd0:	159f3300 	ldrne	r3, [pc, #768]	; 10d8 <SSP_data_distribution_HL+0x31c>
     dd4:	13a02000 	movne	r2, #0
     dd8:	15832000 	strne	r2, [r3]

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
     ddc:	e1d610b6 	ldrh	r1, [r6, #6]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     de0:	e1d630f2 	ldrsh	r3, [r6, #2]
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
     de4:	e1d620f4 	ldrsh	r2, [r6, #4]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     de8:	e59f52ec 	ldr	r5, [pc, #748]	; 10dc <SSP_data_distribution_HL+0x320>

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
     dec:	e59f42ec 	ldr	r4, [pc, #748]	; 10e0 <SSP_data_distribution_HL+0x324>

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
     df0:	e1d600f8 	ldrsh	r0, [r6, #8]
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
     df4:	e1d6c0fa 	ldrsh	ip, [r6, #10]
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
     df8:	e1d6e0fc 	ldrsh	lr, [r6, #12]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     dfc:	e0833103 	add	r3, r3, r3, lsl #2
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
     e00:	e0822102 	add	r2, r2, r2, lsl #2
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
     e04:	e0811101 	add	r1, r1, r1, lsl #2
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     e08:	e1a03083 	lsl	r3, r3, #1
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
     e0c:	e1a02082 	lsl	r2, r2, #1
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
     e10:	e1a01081 	lsl	r1, r1, #1

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
     e14:	e3570000 	cmp	r7, #0

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
     e18:	e584301c 	str	r3, [r4, #28]
	RO_ALL_Data.angle_roll = IMU_CalcData.angle_roll;
     e1c:	e5842020 	str	r2, [r4, #32]
	RO_ALL_Data.angle_yaw = IMU_CalcData.angle_yaw;
     e20:	e5841024 	str	r1, [r4, #36]	; 0x24

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
     e24:	e5840028 	str	r0, [r4, #40]	; 0x28
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
     e28:	e584c02c 	str	ip, [r4, #44]	; 0x2c
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
     e2c:	e584e030 	str	lr, [r4, #48]	; 0x30
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     e30:	e5853000 	str	r3, [r5]
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
     e34:	e5852004 	str	r2, [r5, #4]
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
     e38:	e5851008 	str	r1, [r5, #8]

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
     e3c:	e585000c 	str	r0, [r5, #12]
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
     e40:	e585c010 	str	ip, [r5, #16]
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
     e44:	e585e014 	str	lr, [r5, #20]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     e48:	e1a08005 	mov	r8, r5

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
     e4c:	e1a0a004 	mov	sl, r4

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
     e50:	1a000026 	bne	ef0 <SSP_data_distribution_HL+0x134>
     e54:	e59f0288 	ldr	r0, [pc, #648]	; 10e4 <SSP_data_distribution_HL+0x328>
     e58:	e1a01004 	mov	r1, r4
     e5c:	e1a02006 	mov	r2, r6
     e60:	e286c008 	add	ip, r6, #8
     e64:	e1a0e006 	mov	lr, r6
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
     e68:	e5d2300e 	ldrb	r3, [r2, #14]
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
     e6c:	e2822001 	add	r2, r2, #1
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
     e70:	e1a03203 	lsl	r3, r3, #4
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
     e74:	e152000c 	cmp	r2, ip
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
     e78:	e1c130bc 	strh	r3, [r1, #12]
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
     e7c:	e0c030b2 	strh	r3, [r0], #2
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
     e80:	e2811002 	add	r1, r1, #2
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
     e84:	1afffff7 	bne	e68 <SSP_data_distribution_HL+0xac>
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
     e88:	e1de32f4 	ldrsh	r3, [lr, #36]	; 0x24
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
     e8c:	e1de22f0 	ldrsh	r2, [lr, #32]
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
     e90:	e1de12f2 	ldrsh	r1, [lr, #34]	; 0x22
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
     e94:	e0833103 	add	r3, r3, r3, lsl #2
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
     e98:	e0822102 	add	r2, r2, r2, lsl #2
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
     e9c:	e0811101 	add	r1, r1, r1, lsl #2
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
     ea0:	e1a03883 	lsl	r3, r3, #17
     ea4:	e1a00823 	lsr	r0, r3, #16
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
     ea8:	e1a02882 	lsl	r2, r2, #17
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
     eac:	e1a01881 	lsl	r1, r1, #17
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
     eb0:	e1a0c822 	lsr	ip, r2, #16
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
     eb4:	e1a01821 	lsr	r1, r1, #16
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
     eb8:	e3500000 	cmp	r0, #0
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
     ebc:	e1c801bc 	strh	r0, [r8, #28]
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
     ec0:	e1c8c1b8 	strh	ip, [r8, #24]
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
     ec4:	e1c811ba 	strh	r1, [r8, #26]
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
     ec8:	1a00003a 	bne	fb8 <SSP_data_distribution_HL+0x1fc>
		RO_ALL_Data.acc_y = IMU_CalcData.acc_y_calib;
		RO_ALL_Data.acc_z = IMU_CalcData.acc_z_calib;

		RO_ALL_Data.fusion_latitude
				= LL_1khz_attitude_data.latitude_best_estimate;
		RO_ALL_Data.fusion_longitude
     ecc:	e2862018 	add	r2, r6, #24
     ed0:	e892000c 	ldm	r2, {r2, r3}
     ed4:	e58a3090 	str	r3, [sl, #144]	; 0x90

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
			SYSTEM_initialized++;

		RO_ALL_Data.acc_x = IMU_CalcData.acc_x_calib;
     ed8:	e1cac3b4 	strh	ip, [sl, #52]	; 0x34
		RO_ALL_Data.acc_y = IMU_CalcData.acc_y_calib;
     edc:	e1ca13b6 	strh	r1, [sl, #54]	; 0x36
		RO_ALL_Data.acc_z = IMU_CalcData.acc_z_calib;
     ee0:	e1ca03b8 	strh	r0, [sl, #56]	; 0x38

		RO_ALL_Data.fusion_latitude
     ee4:	e58a208c 	str	r2, [sl, #140]	; 0x8c
						= LL_1khz_attitude_data.slowDataUpChannelDataShort;
			break;

		}
	}
}
     ee8:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, sl, lr}
     eec:	e12fff1e 	bx	lr
		RO_ALL_Data.fusion_latitude
				= LL_1khz_attitude_data.latitude_best_estimate;
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
     ef0:	e3570001 	cmp	r7, #1
     ef4:	0a000037 	beq	fd8 <SSP_data_distribution_HL+0x21c>
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
     ef8:	e3570002 	cmp	r7, #2
     efc:	1afffff9 	bne	ee8 <SSP_data_distribution_HL+0x12c>
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;
     f00:	e1d634f6 	ldrsh	r3, [r6, #70]	; 0x46
		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
     f04:	e59fc1dc 	ldr	ip, [pc, #476]	; 10e8 <SSP_data_distribution_HL+0x32c>
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;
     f08:	e5853038 	str	r3, [r5, #56]	; 0x38

		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;
     f0c:	e5843044 	str	r3, [r4, #68]	; 0x44

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
     f10:	e1d635b2 	ldrh	r3, [r6, #82]	; 0x52
     f14:	e1c430b0 	strh	r3, [r4]
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
     f18:	e1dc30b0 	ldrh	r3, [ip]
     f1c:	e1c430b6 	strh	r3, [r4, #6]
		RO_ALL_Data.flight_time = HL_Status.flight_time;
     f20:	e1dc30b6 	ldrh	r3, [ip, #6]
     f24:	e1c430b4 	strh	r3, [r4, #4]
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
     f28:	e1dc31b2 	ldrh	r3, [ip, #18]
		RO_ALL_Data.HL_up_time = HL_Status.up_time;

		if (LL_1khz_attitude_data.status2 & 0x01)
     f2c:	e1d625ba 	ldrh	r2, [r6, #90]	; 0x5a
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
		RO_ALL_Data.flight_time = HL_Status.flight_time;
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
     f30:	e1c430b8 	strh	r3, [r4, #8]
		RO_ALL_Data.HL_up_time = HL_Status.up_time;
     f34:	e1dc30b4 	ldrh	r3, [ip, #4]

		if (LL_1khz_attitude_data.status2 & 0x01)
     f38:	e212e001 	ands	lr, r2, #1

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
		RO_ALL_Data.flight_time = HL_Status.flight_time;
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
		RO_ALL_Data.HL_up_time = HL_Status.up_time;
     f3c:	e1c430ba 	strh	r3, [r4, #10]

		if (LL_1khz_attitude_data.status2 & 0x01)
     f40:	e1a02802 	lsl	r2, r2, #16
			RO_ALL_Data.flying = 1;
     f44:	13a03001 	movne	r3, #1
     f48:	15c43002 	strbne	r3, [r4, #2]
		else
			RO_ALL_Data.flying = 0;

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
     f4c:	e1a038c2 	asr	r3, r2, #17
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
     f50:	e1d614f2 	ldrsh	r1, [r6, #66]	; 0x42
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
     f54:	e1d604f4 	ldrsh	r0, [r6, #68]	; 0x44
		else
			RO_ALL_Data.flying = 0;

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
     f58:	e203307f 	and	r3, r3, #127	; 0x7f
     f5c:	e2433001 	sub	r3, r3, #1
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
     f60:	e584103c 	str	r1, [r4, #60]	; 0x3c
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
     f64:	e5840040 	str	r0, [r4, #64]	; 0x40
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
     f68:	e5851030 	str	r1, [r5, #48]	; 0x30
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
     f6c:	e5850034 	str	r0, [r5, #52]	; 0x34
		RO_ALL_Data.HL_up_time = HL_Status.up_time;

		if (LL_1khz_attitude_data.status2 & 0x01)
			RO_ALL_Data.flying = 1;
		else
			RO_ALL_Data.flying = 0;
     f70:	05c4e002 	strbeq	lr, [r4, #2]

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
     f74:	e353000d 	cmp	r3, #13
     f78:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
     f7c:	eaffffd9 	b	ee8 <SSP_data_distribution_HL+0x12c>
     f80:	00001028 	.word	0x00001028
     f84:	00000ee8 	.word	0x00000ee8
     f88:	00000ee8 	.word	0x00000ee8
     f8c:	00000ee8 	.word	0x00000ee8
     f90:	00000ee8 	.word	0x00000ee8
     f94:	00001034 	.word	0x00001034
     f98:	00001044 	.word	0x00001044
     f9c:	00001054 	.word	0x00001054
     fa0:	00000ee8 	.word	0x00000ee8
     fa4:	00000ee8 	.word	0x00000ee8
     fa8:	00000ee8 	.word	0x00000ee8
     fac:	00000ee8 	.word	0x00000ee8
     fb0:	00001064 	.word	0x00001064
     fb4:	00001094 	.word	0x00001094
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
     fb8:	e59f212c 	ldr	r2, [pc, #300]	; 10ec <SSP_data_distribution_HL+0x330>
     fbc:	e5d23000 	ldrb	r3, [r2]
     fc0:	e3530009 	cmp	r3, #9
			SYSTEM_initialized++;
     fc4:	95d23000 	ldrbls	r3, [r2]
     fc8:	92833001 	addls	r3, r3, #1
     fcc:	920330ff 	andls	r3, r3, #255	; 0xff
     fd0:	95c23000 	strbls	r3, [r2]
     fd4:	eaffffbc 	b	ecc <SSP_data_distribution_HL+0x110>
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;
     fd8:	e1d634f0 	ldrsh	r3, [r6, #64]	; 0x40
     fdc:	e5853050 	str	r3, [r5, #80]	; 0x50

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;
     fe0:	e5843088 	str	r3, [r4, #136]	; 0x88

		RO_ALL_Data.fusion_speed_x
     fe4:	e1d633b8 	ldrh	r3, [r6, #56]	; 0x38
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
     fe8:	e596203c 	ldr	r2, [r6, #60]	; 0x3c
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_speed_x
     fec:	e1c439b4 	strh	r3, [r4, #148]	; 0x94
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
     ff0:	e1d633ba 	ldrh	r3, [r6, #58]	; 0x3a
	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
     ff4:	e5842084 	str	r2, [r4, #132]	; 0x84
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
     ff8:	e585204c 	str	r2, [r5, #76]	; 0x4c
		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
     ffc:	e1c439b6 	strh	r3, [r4, #150]	; 0x96
    1000:	e1a00004 	mov	r0, r4
    1004:	e3a01000 	mov	r1, #0
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
    1008:	e0813006 	add	r3, r1, r6
    100c:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
    1010:	e2811001 	add	r1, r1, #1

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
    1014:	e3510006 	cmp	r1, #6
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
    1018:	e5c02048 	strb	r2, [r0, #72]	; 0x48
    101c:	e2800001 	add	r0, r0, #1

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
    1020:	1afffff8 	bne	1008 <SSP_data_distribution_HL+0x24c>
    1024:	eaffffaf 	b	ee8 <SSP_data_distribution_HL+0x12c>
		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
		case SUDC_FLIGHTTIME:

			HL_Status.flight_time
    1028:	e1d665b4 	ldrh	r6, [r6, #84]	; 0x54
    102c:	e1cc60b6 	strh	r6, [ip, #6]
    1030:	eaffffac 	b	ee8 <SSP_data_distribution_HL+0x12c>
					= LL_1khz_attitude_data.slowDataUpChannelDataShort;
			break;
		case SUDC_NAVSTATUS:
			wpCtrlNavStatus = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1034:	e59f30b4 	ldr	r3, [pc, #180]	; 10f0 <SSP_data_distribution_HL+0x334>
    1038:	e1d665b4 	ldrh	r6, [r6, #84]	; 0x54
    103c:	e1c360b0 	strh	r6, [r3]
    1040:	eaffffa8 	b	ee8 <SSP_data_distribution_HL+0x12c>
			break;
		case SUDC_DISTTOWP:
			wpCtrlDistToWp = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1044:	e59f30a8 	ldr	r3, [pc, #168]	; 10f4 <SSP_data_distribution_HL+0x338>
    1048:	e1d665b4 	ldrh	r6, [r6, #84]	; 0x54
    104c:	e1c360b0 	strh	r6, [r3]
    1050:	eaffffa4 	b	ee8 <SSP_data_distribution_HL+0x12c>
			break;
		case SUDC_WPACKTRIGGER:
			wpCtrlAckTrigger = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1054:	e1d625b4 	ldrh	r2, [r6, #84]	; 0x54
    1058:	e59f3098 	ldr	r3, [pc, #152]	; 10f8 <SSP_data_distribution_HL+0x33c>
    105c:	e5c32000 	strb	r2, [r3]
    1060:	eaffffa0 	b	ee8 <SSP_data_distribution_HL+0x12c>
			//if ((LL_1khz_attitude_data.slowDataUpChannelDataShort == OM_HEX)
			//		&& (fireflyLedEnabled == 0))
			//	fireflyLedEnabled = 1;
			break;
		case SUDC_JETIKEYVAL:
			if (oldKey != LL_1khz_attitude_data.slowDataUpChannelDataShort)
    1064:	e59f4090 	ldr	r4, [pc, #144]	; 10fc <SSP_data_distribution_HL+0x340>
    1068:	e1d605b4 	ldrh	r0, [r6, #84]	; 0x54
    106c:	e5d42000 	ldrb	r2, [r4]
    1070:	e1a03800 	lsl	r3, r0, #16
    1074:	e1520843 	cmp	r2, r3, asr #16
    1078:	0a000003 	beq	108c <SSP_data_distribution_HL+0x2d0>
				jetiSetKeyChanged(
    107c:	e20000ff 	and	r0, r0, #255	; 0xff
    1080:	eb001297 	bl	5ae4 <jetiSetKeyChanged>
    1084:	e59f3048 	ldr	r3, [pc, #72]	; 10d4 <SSP_data_distribution_HL+0x318>
    1088:	e1d305b4 	ldrh	r0, [r3, #84]	; 0x54
						LL_1khz_attitude_data.slowDataUpChannelDataShort);
			oldKey = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    108c:	e5c40000 	strb	r0, [r4]
    1090:	eaffff94 	b	ee8 <SSP_data_distribution_HL+0x12c>
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
    1094:	e59fc064 	ldr	ip, [pc, #100]	; 1100 <SSP_data_distribution_HL+0x344>
    1098:	e5dc3000 	ldrb	r3, [ip]
    109c:	e3530002 	cmp	r3, #2
						!= emergencyMode)
					emergencyModeUpdate = 1;
				else
					emergencyModeUpdate = 0;
			} else
				emergencyMode
    10a0:	11d625b4 	ldrhne	r2, [r6, #84]	; 0x54
    10a4:	159f3058 	ldrne	r3, [pc, #88]	; 1104 <SSP_data_distribution_HL+0x348>
    10a8:	15c32000 	strbne	r2, [r3]
    10ac:	1affff8d 	bne	ee8 <SSP_data_distribution_HL+0x12c>
						LL_1khz_attitude_data.slowDataUpChannelDataShort);
			oldKey = LL_1khz_attitude_data.slowDataUpChannelDataShort;
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
				if (LL_1khz_attitude_data.slowDataUpChannelDataShort
    10b0:	e59f204c 	ldr	r2, [pc, #76]	; 1104 <SSP_data_distribution_HL+0x348>
    10b4:	e1d635f4 	ldrsh	r3, [r6, #84]	; 0x54
    10b8:	e5d21000 	ldrb	r1, [r2]
    10bc:	e1530001 	cmp	r3, r1
						!= emergencyMode)
					emergencyModeUpdate = 1;
    10c0:	13a03001 	movne	r3, #1
				else
					emergencyModeUpdate = 0;
    10c4:	03a03000 	moveq	r3, #0
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
				if (LL_1khz_attitude_data.slowDataUpChannelDataShort
						!= emergencyMode)
					emergencyModeUpdate = 1;
    10c8:	15cc3000 	strbne	r3, [ip]
				else
					emergencyModeUpdate = 0;
    10cc:	05cc3000 	strbeq	r3, [ip]
    10d0:	eaffff84 	b	ee8 <SSP_data_distribution_HL+0x12c>
    10d4:	400016fc 	.word	0x400016fc
    10d8:	40000988 	.word	0x40000988
    10dc:	40001924 	.word	0x40001924
    10e0:	40001838 	.word	0x40001838
    10e4:	40001828 	.word	0x40001828
    10e8:	40001980 	.word	0x40001980
    10ec:	400009e0 	.word	0x400009e0
    10f0:	4000096a 	.word	0x4000096a
    10f4:	4000096c 	.word	0x4000096c
    10f8:	40000968 	.word	0x40000968
    10fc:	40000986 	.word	0x40000986
    1100:	4000098c 	.word	0x4000098c
    1104:	400018d0 	.word	0x400018d0

00001108 <SSP_rx_handler_HL>:
	SPIWR_num_bytes = 42;
	data_sent_to_LL = 0;
}

inline void SSP_rx_handler_HL(unsigned char SPI_rxdata) //rx_handler @ high-level processor
{
    1108:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	static volatile unsigned char SPI_rxcount = 0;
	static volatile unsigned char *SPI_rxptr;
	static volatile unsigned char incoming_page;

	//receive handler
	if (SPI_syncstate == 0) {
    110c:	e59f2464 	ldr	r2, [pc, #1124]	; 1578 <SSP_rx_handler_HL+0x470>
    1110:	e5d23000 	ldrb	r3, [r2]
    1114:	e20330ff 	and	r3, r3, #255	; 0xff
    1118:	e3530000 	cmp	r3, #0
	SPIWR_num_bytes = 42;
	data_sent_to_LL = 0;
}

inline void SSP_rx_handler_HL(unsigned char SPI_rxdata) //rx_handler @ high-level processor
{
    111c:	e20000ff 	and	r0, r0, #255	; 0xff
	static volatile unsigned char SPI_rxcount = 0;
	static volatile unsigned char *SPI_rxptr;
	static volatile unsigned char incoming_page;

	//receive handler
	if (SPI_syncstate == 0) {
    1120:	e1a06002 	mov	r6, r2
    1124:	1a000004 	bne	113c <SSP_rx_handler_HL+0x34>
		if (SPI_rxdata == '>')
    1128:	e350003e 	cmp	r0, #62	; 0x3e
    112c:	0a000011 	beq	1178 <SSP_rx_handler_HL+0x70>
			SSP_data_distribution_HL(); //only distribute data to other structs, if it was received correctly
			//ack data receiption
		}
		SPI_syncstate = 0;
	} else
		SPI_syncstate = 0;
    1130:	e5c23000 	strb	r3, [r2]
}
    1134:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    1138:	e12fff1e 	bx	lr
	if (SPI_syncstate == 0) {
		if (SPI_rxdata == '>')
			SPI_syncstate++;
		else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 1) {
    113c:	e5d23000 	ldrb	r3, [r2]
    1140:	e3530001 	cmp	r3, #1
    1144:	0a000010 	beq	118c <SSP_rx_handler_HL+0x84>
			SPI_syncstate++;
			SPI_rxptr = (unsigned char *) &LL_1khz_attitude_data;
			SPI_rxcount = 40;
		} else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 2) {
    1148:	e5d23000 	ldrb	r3, [r2]
    114c:	e3530002 	cmp	r3, #2
    1150:	0a00001c 	beq	11c8 <SSP_rx_handler_HL+0xc0>
		*SPI_rxptr = SPI_rxdata;
		SPI_rxptr++;
		if (SPI_rxcount == 0) {
			SPI_syncstate++;
		}
	} else if (SPI_syncstate == 3) {
    1154:	e5d23000 	ldrb	r3, [r2]
    1158:	e3530003 	cmp	r3, #3
			SSP_data_distribution_HL(); //only distribute data to other structs, if it was received correctly
			//ack data receiption
		}
		SPI_syncstate = 0;
	} else
		SPI_syncstate = 0;
    115c:	13a03000 	movne	r3, #0
		*SPI_rxptr = SPI_rxdata;
		SPI_rxptr++;
		if (SPI_rxcount == 0) {
			SPI_syncstate++;
		}
	} else if (SPI_syncstate == 3) {
    1160:	1afffff2 	bne	1130 <SSP_rx_handler_HL+0x28>
		if (SPI_rxdata == '<') //last byte ok => data should be valid
    1164:	e350003c 	cmp	r0, #60	; 0x3c
    1168:	0a000039 	beq	1254 <SSP_rx_handler_HL+0x14c>
		{
			SSP_data_distribution_HL(); //only distribute data to other structs, if it was received correctly
			//ack data receiption
		}
		SPI_syncstate = 0;
    116c:	e3a03000 	mov	r3, #0
    1170:	e5c63000 	strb	r3, [r6]
    1174:	eaffffee 	b	1134 <SSP_rx_handler_HL+0x2c>
	static volatile unsigned char incoming_page;

	//receive handler
	if (SPI_syncstate == 0) {
		if (SPI_rxdata == '>')
			SPI_syncstate++;
    1178:	e5d23000 	ldrb	r3, [r2]
    117c:	e2833001 	add	r3, r3, #1
    1180:	e20330ff 	and	r3, r3, #255	; 0xff
    1184:	e5c23000 	strb	r3, [r2]
    1188:	eaffffe9 	b	1134 <SSP_rx_handler_HL+0x2c>
		else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 1) {
		if (SPI_rxdata == '*') {
    118c:	e350002a 	cmp	r0, #42	; 0x2a
			SPI_syncstate++;
			SPI_rxptr = (unsigned char *) &LL_1khz_attitude_data;
			SPI_rxcount = 40;
		} else
			SPI_syncstate = 0;
    1190:	13a03000 	movne	r3, #0
    1194:	15c23000 	strbne	r3, [r2]
		if (SPI_rxdata == '>')
			SPI_syncstate++;
		else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 1) {
		if (SPI_rxdata == '*') {
    1198:	1affffe5 	bne	1134 <SSP_rx_handler_HL+0x2c>
			SPI_syncstate++;
    119c:	e5d23000 	ldrb	r3, [r2]
    11a0:	e2833001 	add	r3, r3, #1
    11a4:	e20330ff 	and	r3, r3, #255	; 0xff
    11a8:	e5c23000 	strb	r3, [r2]
			SPI_rxptr = (unsigned char *) &LL_1khz_attitude_data;
    11ac:	e59f33c8 	ldr	r3, [pc, #968]	; 157c <SSP_rx_handler_HL+0x474>
    11b0:	e59f23c8 	ldr	r2, [pc, #968]	; 1580 <SSP_rx_handler_HL+0x478>
    11b4:	e5832000 	str	r2, [r3]
			SPI_rxcount = 40;
    11b8:	e59f33c4 	ldr	r3, [pc, #964]	; 1584 <SSP_rx_handler_HL+0x47c>
    11bc:	e3a01028 	mov	r1, #40	; 0x28
    11c0:	e5c31000 	strb	r1, [r3]
    11c4:	eaffffda 	b	1134 <SSP_rx_handler_HL+0x2c>
		} else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 2) {
		if (SPI_rxcount == 26) //14 bytes transmitted => select 500Hz page
    11c8:	e59fc3b4 	ldr	ip, [pc, #948]	; 1584 <SSP_rx_handler_HL+0x47c>
    11cc:	e5dc3000 	ldrb	r3, [ip]
    11d0:	e353001a 	cmp	r3, #26
    11d4:	0a00000e 	beq	1214 <SSP_rx_handler_HL+0x10c>
    11d8:	e59f139c 	ldr	r1, [pc, #924]	; 157c <SSP_rx_handler_HL+0x474>
			if (incoming_page == 1)
				SPI_rxptr += 26;
			else if (incoming_page == 2)
				SPI_rxptr += 52;
		}
		SPI_rxcount--;
    11dc:	e5dc3000 	ldrb	r3, [ip]
		*SPI_rxptr = SPI_rxdata;
    11e0:	e5912000 	ldr	r2, [r1]
			if (incoming_page == 1)
				SPI_rxptr += 26;
			else if (incoming_page == 2)
				SPI_rxptr += 52;
		}
		SPI_rxcount--;
    11e4:	e2433001 	sub	r3, r3, #1
    11e8:	e20330ff 	and	r3, r3, #255	; 0xff
    11ec:	e5cc3000 	strb	r3, [ip]
		*SPI_rxptr = SPI_rxdata;
    11f0:	e4c20001 	strb	r0, [r2], #1
		SPI_rxptr++;
		if (SPI_rxcount == 0) {
    11f4:	e5dc3000 	ldrb	r3, [ip]
    11f8:	e3530000 	cmp	r3, #0
			else if (incoming_page == 2)
				SPI_rxptr += 52;
		}
		SPI_rxcount--;
		*SPI_rxptr = SPI_rxdata;
		SPI_rxptr++;
    11fc:	e5812000 	str	r2, [r1]
		if (SPI_rxcount == 0) {
			SPI_syncstate++;
    1200:	05d63000 	ldrbeq	r3, [r6]
    1204:	02833001 	addeq	r3, r3, #1
    1208:	020330ff 	andeq	r3, r3, #255	; 0xff
    120c:	05c63000 	strbeq	r3, [r6]
    1210:	eaffffc7 	b	1134 <SSP_rx_handler_HL+0x2c>
		} else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 2) {
		if (SPI_rxcount == 26) //14 bytes transmitted => select 500Hz page
		{
			incoming_page = LL_1khz_attitude_data.system_flags & 0x03; //system flags were already received
    1214:	e59f3364 	ldr	r3, [pc, #868]	; 1580 <SSP_rx_handler_HL+0x478>
    1218:	e1d320b0 	ldrh	r2, [r3]
    121c:	e59f1364 	ldr	r1, [pc, #868]	; 1588 <SSP_rx_handler_HL+0x480>
    1220:	e2022003 	and	r2, r2, #3
    1224:	e5c12000 	strb	r2, [r1]
			if (incoming_page == 1)
    1228:	e5d13000 	ldrb	r3, [r1]
    122c:	e3530001 	cmp	r3, #1
    1230:	0a0000ae 	beq	14f0 <SSP_rx_handler_HL+0x3e8>
				SPI_rxptr += 26;
			else if (incoming_page == 2)
    1234:	e5d13000 	ldrb	r3, [r1]
    1238:	e3530002 	cmp	r3, #2
    123c:	1affffe5 	bne	11d8 <SSP_rx_handler_HL+0xd0>
				SPI_rxptr += 52;
    1240:	e59f1334 	ldr	r1, [pc, #820]	; 157c <SSP_rx_handler_HL+0x474>
    1244:	e5913000 	ldr	r3, [r1]
    1248:	e2833034 	add	r3, r3, #52	; 0x34
    124c:	e5813000 	str	r3, [r1]
    1250:	eaffffe1 	b	11dc <SSP_rx_handler_HL+0xd4>

volatile unsigned char transmitBuildInfoTrigger = 0;

void SSP_data_distribution_HL(void) {
	unsigned char i;
	unsigned char current_page = LL_1khz_attitude_data.system_flags & 0x03;
    1254:	e59f7324 	ldr	r7, [pc, #804]	; 1580 <SSP_rx_handler_HL+0x478>
    1258:	e1d730b0 	ldrh	r3, [r7]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
    125c:	e3130008 	tst	r3, #8

volatile unsigned char transmitBuildInfoTrigger = 0;

void SSP_data_distribution_HL(void) {
	unsigned char i;
	unsigned char current_page = LL_1khz_attitude_data.system_flags & 0x03;
    1260:	e2038003 	and	r8, r3, #3
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;
    1264:	159f3320 	ldrne	r3, [pc, #800]	; 158c <SSP_rx_handler_HL+0x484>
    1268:	13a02000 	movne	r2, #0
    126c:	15832000 	strne	r2, [r3]

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
    1270:	e1d710b6 	ldrh	r1, [r7, #6]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    1274:	e1d730f2 	ldrsh	r3, [r7, #2]
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
    1278:	e1d720f4 	ldrsh	r2, [r7, #4]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    127c:	e59f530c 	ldr	r5, [pc, #780]	; 1590 <SSP_rx_handler_HL+0x488>

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
    1280:	e59f430c 	ldr	r4, [pc, #780]	; 1594 <SSP_rx_handler_HL+0x48c>

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
    1284:	e1d700f8 	ldrsh	r0, [r7, #8]
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
    1288:	e1d7c0fa 	ldrsh	ip, [r7, #10]
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
    128c:	e1d7e0fc 	ldrsh	lr, [r7, #12]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    1290:	e0833103 	add	r3, r3, r3, lsl #2
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
    1294:	e0822102 	add	r2, r2, r2, lsl #2
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
    1298:	e0811101 	add	r1, r1, r1, lsl #2
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    129c:	e1a03083 	lsl	r3, r3, #1
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
    12a0:	e1a02082 	lsl	r2, r2, #1
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
    12a4:	e1a01081 	lsl	r1, r1, #1

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
    12a8:	e3580000 	cmp	r8, #0

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
    12ac:	e584301c 	str	r3, [r4, #28]
	RO_ALL_Data.angle_roll = IMU_CalcData.angle_roll;
    12b0:	e5842020 	str	r2, [r4, #32]
	RO_ALL_Data.angle_yaw = IMU_CalcData.angle_yaw;
    12b4:	e5841024 	str	r1, [r4, #36]	; 0x24

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
    12b8:	e5840028 	str	r0, [r4, #40]	; 0x28
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
    12bc:	e584c02c 	str	ip, [r4, #44]	; 0x2c
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
    12c0:	e584e030 	str	lr, [r4, #48]	; 0x30
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    12c4:	e5853000 	str	r3, [r5]
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
    12c8:	e5852004 	str	r2, [r5, #4]
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
    12cc:	e5851008 	str	r1, [r5, #8]

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
    12d0:	e585000c 	str	r0, [r5, #12]
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
    12d4:	e585c010 	str	ip, [r5, #16]
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
    12d8:	e585e014 	str	lr, [r5, #20]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    12dc:	e1a09005 	mov	r9, r5

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
    12e0:	e1a0a004 	mov	sl, r4

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
    12e4:	1a00002c 	bne	139c <SSP_rx_handler_HL+0x294>
    12e8:	e59f02a8 	ldr	r0, [pc, #680]	; 1598 <SSP_rx_handler_HL+0x490>
    12ec:	e1a01004 	mov	r1, r4
    12f0:	e1a02007 	mov	r2, r7
    12f4:	e287c008 	add	ip, r7, #8
    12f8:	e1a0e007 	mov	lr, r7
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
    12fc:	e5d2300e 	ldrb	r3, [r2, #14]
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
    1300:	e2822001 	add	r2, r2, #1
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
    1304:	e1a03203 	lsl	r3, r3, #4
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
    1308:	e15c0002 	cmp	ip, r2
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
    130c:	e1c130bc 	strh	r3, [r1, #12]
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
    1310:	e0c030b2 	strh	r3, [r0], #2
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
    1314:	e2811002 	add	r1, r1, #2
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
    1318:	1afffff7 	bne	12fc <SSP_rx_handler_HL+0x1f4>
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
    131c:	e1de32f4 	ldrsh	r3, [lr, #36]	; 0x24
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
    1320:	e1de22f0 	ldrsh	r2, [lr, #32]
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
    1324:	e1de12f2 	ldrsh	r1, [lr, #34]	; 0x22
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
    1328:	e0833103 	add	r3, r3, r3, lsl #2
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
    132c:	e0822102 	add	r2, r2, r2, lsl #2
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
    1330:	e0811101 	add	r1, r1, r1, lsl #2
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
    1334:	e1a03883 	lsl	r3, r3, #17
    1338:	e1a00823 	lsr	r0, r3, #16
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
    133c:	e1a02882 	lsl	r2, r2, #17
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
    1340:	e1a01881 	lsl	r1, r1, #17
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
    1344:	e1a0c822 	lsr	ip, r2, #16
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
    1348:	e1a01821 	lsr	r1, r1, #16
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
    134c:	e3500000 	cmp	r0, #0
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
    1350:	e1c901bc 	strh	r0, [r9, #28]
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
    1354:	e1c9c1b8 	strh	ip, [r9, #24]
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
    1358:	e1c911ba 	strh	r1, [r9, #26]
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
    135c:	0a000006 	beq	137c <SSP_rx_handler_HL+0x274>
    1360:	e59f2234 	ldr	r2, [pc, #564]	; 159c <SSP_rx_handler_HL+0x494>
    1364:	e5d23000 	ldrb	r3, [r2]
    1368:	e3530009 	cmp	r3, #9
			SYSTEM_initialized++;
    136c:	95d23000 	ldrbls	r3, [r2]
    1370:	92833001 	addls	r3, r3, #1
    1374:	920330ff 	andls	r3, r3, #255	; 0xff
    1378:	95c23000 	strbls	r3, [r2]
		RO_ALL_Data.acc_y = IMU_CalcData.acc_y_calib;
		RO_ALL_Data.acc_z = IMU_CalcData.acc_z_calib;

		RO_ALL_Data.fusion_latitude
				= LL_1khz_attitude_data.latitude_best_estimate;
		RO_ALL_Data.fusion_longitude
    137c:	e2872018 	add	r2, r7, #24
    1380:	e892000c 	ldm	r2, {r2, r3}
    1384:	e58a3090 	str	r3, [sl, #144]	; 0x90

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
			SYSTEM_initialized++;

		RO_ALL_Data.acc_x = IMU_CalcData.acc_x_calib;
    1388:	e1cac3b4 	strh	ip, [sl, #52]	; 0x34
		RO_ALL_Data.acc_y = IMU_CalcData.acc_y_calib;
    138c:	e1ca13b6 	strh	r1, [sl, #54]	; 0x36
		RO_ALL_Data.acc_z = IMU_CalcData.acc_z_calib;
    1390:	e1ca03b8 	strh	r0, [sl, #56]	; 0x38

		RO_ALL_Data.fusion_latitude
    1394:	e58a208c 	str	r2, [sl, #140]	; 0x8c
    1398:	eaffff73 	b	116c <SSP_rx_handler_HL+0x64>
				= LL_1khz_attitude_data.latitude_best_estimate;
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
    139c:	e3580001 	cmp	r8, #1
    13a0:	0a000057 	beq	1504 <SSP_rx_handler_HL+0x3fc>
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
    13a4:	e3580002 	cmp	r8, #2
    13a8:	1affff6f 	bne	116c <SSP_rx_handler_HL+0x64>
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;
    13ac:	e1d734f6 	ldrsh	r3, [r7, #70]	; 0x46
		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
    13b0:	e59fc1e8 	ldr	ip, [pc, #488]	; 15a0 <SSP_rx_handler_HL+0x498>
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;
    13b4:	e5853038 	str	r3, [r5, #56]	; 0x38

		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;
    13b8:	e5843044 	str	r3, [r4, #68]	; 0x44

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
    13bc:	e1d735b2 	ldrh	r3, [r7, #82]	; 0x52
    13c0:	e1c430b0 	strh	r3, [r4]
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
    13c4:	e1dc30b0 	ldrh	r3, [ip]
    13c8:	e1c430b6 	strh	r3, [r4, #6]
		RO_ALL_Data.flight_time = HL_Status.flight_time;
    13cc:	e1dc30b6 	ldrh	r3, [ip, #6]
    13d0:	e1c430b4 	strh	r3, [r4, #4]
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
    13d4:	e1dc31b2 	ldrh	r3, [ip, #18]
		RO_ALL_Data.HL_up_time = HL_Status.up_time;

		if (LL_1khz_attitude_data.status2 & 0x01)
    13d8:	e1d725ba 	ldrh	r2, [r7, #90]	; 0x5a
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
		RO_ALL_Data.flight_time = HL_Status.flight_time;
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
    13dc:	e1c430b8 	strh	r3, [r4, #8]
		RO_ALL_Data.HL_up_time = HL_Status.up_time;
    13e0:	e1dc30b4 	ldrh	r3, [ip, #4]

		if (LL_1khz_attitude_data.status2 & 0x01)
    13e4:	e212e001 	ands	lr, r2, #1

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
		RO_ALL_Data.flight_time = HL_Status.flight_time;
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
		RO_ALL_Data.HL_up_time = HL_Status.up_time;
    13e8:	e1c430ba 	strh	r3, [r4, #10]

		if (LL_1khz_attitude_data.status2 & 0x01)
    13ec:	e1a02802 	lsl	r2, r2, #16
			RO_ALL_Data.flying = 1;
    13f0:	13a03001 	movne	r3, #1
    13f4:	15c43002 	strbne	r3, [r4, #2]
		else
			RO_ALL_Data.flying = 0;

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
    13f8:	e1a038c2 	asr	r3, r2, #17
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
    13fc:	e1d714f2 	ldrsh	r1, [r7, #66]	; 0x42
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
    1400:	e1d704f4 	ldrsh	r0, [r7, #68]	; 0x44
		else
			RO_ALL_Data.flying = 0;

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
    1404:	e203307f 	and	r3, r3, #127	; 0x7f
    1408:	e2433001 	sub	r3, r3, #1
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
    140c:	e584103c 	str	r1, [r4, #60]	; 0x3c
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
    1410:	e5840040 	str	r0, [r4, #64]	; 0x40
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
    1414:	e5851030 	str	r1, [r5, #48]	; 0x30
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
    1418:	e5850034 	str	r0, [r5, #52]	; 0x34
		RO_ALL_Data.HL_up_time = HL_Status.up_time;

		if (LL_1khz_attitude_data.status2 & 0x01)
			RO_ALL_Data.flying = 1;
		else
			RO_ALL_Data.flying = 0;
    141c:	05c4e002 	strbeq	lr, [r4, #2]

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
    1420:	e353000d 	cmp	r3, #13
    1424:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    1428:	eaffff4f 	b	116c <SSP_rx_handler_HL+0x64>
    142c:	00001464 	.word	0x00001464
    1430:	0000116c 	.word	0x0000116c
    1434:	0000116c 	.word	0x0000116c
    1438:	0000116c 	.word	0x0000116c
    143c:	0000116c 	.word	0x0000116c
    1440:	00001470 	.word	0x00001470
    1444:	00001480 	.word	0x00001480
    1448:	00001490 	.word	0x00001490
    144c:	0000116c 	.word	0x0000116c
    1450:	0000116c 	.word	0x0000116c
    1454:	0000116c 	.word	0x0000116c
    1458:	0000116c 	.word	0x0000116c
    145c:	000014a0 	.word	0x000014a0
    1460:	000014d0 	.word	0x000014d0
		case SUDC_FLIGHTTIME:

			HL_Status.flight_time
    1464:	e1d775b4 	ldrh	r7, [r7, #84]	; 0x54
    1468:	e1cc70b6 	strh	r7, [ip, #6]
    146c:	eaffff3e 	b	116c <SSP_rx_handler_HL+0x64>
					= LL_1khz_attitude_data.slowDataUpChannelDataShort;
			break;
		case SUDC_NAVSTATUS:
			wpCtrlNavStatus = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1470:	e59f312c 	ldr	r3, [pc, #300]	; 15a4 <SSP_rx_handler_HL+0x49c>
    1474:	e1d775b4 	ldrh	r7, [r7, #84]	; 0x54
    1478:	e1c370b0 	strh	r7, [r3]
    147c:	eaffff3a 	b	116c <SSP_rx_handler_HL+0x64>
			break;
		case SUDC_DISTTOWP:
			wpCtrlDistToWp = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1480:	e59f3120 	ldr	r3, [pc, #288]	; 15a8 <SSP_rx_handler_HL+0x4a0>
    1484:	e1d775b4 	ldrh	r7, [r7, #84]	; 0x54
    1488:	e1c370b0 	strh	r7, [r3]
    148c:	eaffff36 	b	116c <SSP_rx_handler_HL+0x64>
			break;
		case SUDC_WPACKTRIGGER:
			wpCtrlAckTrigger = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1490:	e1d725b4 	ldrh	r2, [r7, #84]	; 0x54
    1494:	e59f3110 	ldr	r3, [pc, #272]	; 15ac <SSP_rx_handler_HL+0x4a4>
    1498:	e5c32000 	strb	r2, [r3]
    149c:	eaffff32 	b	116c <SSP_rx_handler_HL+0x64>
			//if ((LL_1khz_attitude_data.slowDataUpChannelDataShort == OM_HEX)
			//		&& (fireflyLedEnabled == 0))
			//	fireflyLedEnabled = 1;
			break;
		case SUDC_JETIKEYVAL:
			if (oldKey != LL_1khz_attitude_data.slowDataUpChannelDataShort)
    14a0:	e59f4108 	ldr	r4, [pc, #264]	; 15b0 <SSP_rx_handler_HL+0x4a8>
    14a4:	e1d705b4 	ldrh	r0, [r7, #84]	; 0x54
    14a8:	e5d42000 	ldrb	r2, [r4]
    14ac:	e1a03800 	lsl	r3, r0, #16
    14b0:	e1520843 	cmp	r2, r3, asr #16
    14b4:	0a000003 	beq	14c8 <SSP_rx_handler_HL+0x3c0>
				jetiSetKeyChanged(
    14b8:	e20000ff 	and	r0, r0, #255	; 0xff
    14bc:	eb001188 	bl	5ae4 <jetiSetKeyChanged>
    14c0:	e59f30b8 	ldr	r3, [pc, #184]	; 1580 <SSP_rx_handler_HL+0x478>
    14c4:	e1d305b4 	ldrh	r0, [r3, #84]	; 0x54
						LL_1khz_attitude_data.slowDataUpChannelDataShort);
			oldKey = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    14c8:	e5c40000 	strb	r0, [r4]
    14cc:	eaffff26 	b	116c <SSP_rx_handler_HL+0x64>
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
    14d0:	e59f00dc 	ldr	r0, [pc, #220]	; 15b4 <SSP_rx_handler_HL+0x4ac>
    14d4:	e5d03000 	ldrb	r3, [r0]
    14d8:	e3530002 	cmp	r3, #2
    14dc:	0a00001c 	beq	1554 <SSP_rx_handler_HL+0x44c>
						!= emergencyMode)
					emergencyModeUpdate = 1;
				else
					emergencyModeUpdate = 0;
			} else
				emergencyMode
    14e0:	e1d725b4 	ldrh	r2, [r7, #84]	; 0x54
    14e4:	e59f30cc 	ldr	r3, [pc, #204]	; 15b8 <SSP_rx_handler_HL+0x4b0>
    14e8:	e5c32000 	strb	r2, [r3]
    14ec:	eaffff1e 	b	116c <SSP_rx_handler_HL+0x64>
	} else if (SPI_syncstate == 2) {
		if (SPI_rxcount == 26) //14 bytes transmitted => select 500Hz page
		{
			incoming_page = LL_1khz_attitude_data.system_flags & 0x03; //system flags were already received
			if (incoming_page == 1)
				SPI_rxptr += 26;
    14f0:	e59f1084 	ldr	r1, [pc, #132]	; 157c <SSP_rx_handler_HL+0x474>
    14f4:	e5913000 	ldr	r3, [r1]
    14f8:	e283301a 	add	r3, r3, #26
    14fc:	e5813000 	str	r3, [r1]
    1500:	eaffff35 	b	11dc <SSP_rx_handler_HL+0xd4>
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;
    1504:	e1d734f0 	ldrsh	r3, [r7, #64]	; 0x40
    1508:	e5853050 	str	r3, [r5, #80]	; 0x50

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;
    150c:	e5843088 	str	r3, [r4, #136]	; 0x88

		RO_ALL_Data.fusion_speed_x
    1510:	e1d733b8 	ldrh	r3, [r7, #56]	; 0x38
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
    1514:	e597203c 	ldr	r2, [r7, #60]	; 0x3c
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_speed_x
    1518:	e1c439b4 	strh	r3, [r4, #148]	; 0x94
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
    151c:	e1d733ba 	ldrh	r3, [r7, #58]	; 0x3a
	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
    1520:	e5842084 	str	r2, [r4, #132]	; 0x84
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
    1524:	e585204c 	str	r2, [r5, #76]	; 0x4c
		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
    1528:	e1c439b6 	strh	r3, [r4, #150]	; 0x96
    152c:	e1a00004 	mov	r0, r4
    1530:	e3a01000 	mov	r1, #0
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
    1534:	e0813007 	add	r3, r1, r7
    1538:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
    153c:	e2811001 	add	r1, r1, #1

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
    1540:	e3510006 	cmp	r1, #6
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
    1544:	e5c02048 	strb	r2, [r0, #72]	; 0x48
    1548:	e2800001 	add	r0, r0, #1

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
    154c:	1afffff8 	bne	1534 <SSP_rx_handler_HL+0x42c>
    1550:	eaffff05 	b	116c <SSP_rx_handler_HL+0x64>
						LL_1khz_attitude_data.slowDataUpChannelDataShort);
			oldKey = LL_1khz_attitude_data.slowDataUpChannelDataShort;
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
				if (LL_1khz_attitude_data.slowDataUpChannelDataShort
    1554:	e59f205c 	ldr	r2, [pc, #92]	; 15b8 <SSP_rx_handler_HL+0x4b0>
    1558:	e1d735f4 	ldrsh	r3, [r7, #84]	; 0x54
    155c:	e5d21000 	ldrb	r1, [r2]
    1560:	e1530001 	cmp	r3, r1
						!= emergencyMode)
					emergencyModeUpdate = 1;
    1564:	13a03001 	movne	r3, #1
				else
					emergencyModeUpdate = 0;
    1568:	03a03000 	moveq	r3, #0
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
				if (LL_1khz_attitude_data.slowDataUpChannelDataShort
						!= emergencyMode)
					emergencyModeUpdate = 1;
    156c:	15c03000 	strbne	r3, [r0]
				else
					emergencyModeUpdate = 0;
    1570:	05c03000 	strbeq	r3, [r0]
    1574:	eafffefc 	b	116c <SSP_rx_handler_HL+0x64>
    1578:	40000975 	.word	0x40000975
    157c:	40000970 	.word	0x40000970
    1580:	400016fc 	.word	0x400016fc
    1584:	40000974 	.word	0x40000974
    1588:	4000096f 	.word	0x4000096f
    158c:	40000988 	.word	0x40000988
    1590:	40001924 	.word	0x40001924
    1594:	40001838 	.word	0x40001838
    1598:	40001828 	.word	0x40001828
    159c:	400009e0 	.word	0x400009e0
    15a0:	40001980 	.word	0x40001980
    15a4:	4000096a 	.word	0x4000096a
    15a8:	4000096c 	.word	0x4000096c
    15ac:	40000968 	.word	0x40000968
    15b0:	40000986 	.word	0x40000986
    15b4:	4000098c 	.word	0x4000098c
    15b8:	400018d0 	.word	0x400018d0

000015bc <fast_abs>:
inline int fast_abs(int x)
{

	if(x>0) return x; else return (-x);

}
    15bc:	e3500000 	cmp	r0, #0
    15c0:	b2600000 	rsblt	r0, r0, #0
    15c4:	e12fff1e 	bx	lr

000015c8 <fast_sqrt>:

int fast_sqrt(int x)
{
	int l=0,r=0;
	l=x;
	while(fast_abs(l-r)>1){
    15c8:	e0203fc0 	eor	r3, r0, r0, asr #31
    15cc:	e0433fc0 	sub	r3, r3, r0, asr #31
    15d0:	e3530001 	cmp	r3, #1
	if(x>0) return x; else return (-x);

}

int fast_sqrt(int x)
{
    15d4:	e92d4030 	push	{r4, r5, lr}
    15d8:	e1a05000 	mov	r5, r0
	int l=0,r=0;
	l=x;
	while(fast_abs(l-r)>1){
    15dc:	d1a04000 	movle	r4, r0
    15e0:	da00000b 	ble	1614 <fast_sqrt+0x4c>
    15e4:	e1a04000 	mov	r4, r0
		r=x/l;
    15e8:	e1a01004 	mov	r1, r4
    15ec:	e1a00005 	mov	r0, r5
    15f0:	eb003084 	bl	d808 <____divsi3_from_arm>
		l=(l+r)/2;
    15f4:	e0843000 	add	r3, r4, r0
    15f8:	e0833fa3 	add	r3, r3, r3, lsr #31
    15fc:	e1a040c3 	asr	r4, r3, #1

int fast_sqrt(int x)
{
	int l=0,r=0;
	l=x;
	while(fast_abs(l-r)>1){
    1600:	e0600004 	rsb	r0, r0, r4
    1604:	e3500000 	cmp	r0, #0
    1608:	b2600000 	rsblt	r0, r0, #0
    160c:	e3500001 	cmp	r0, #1
    1610:	cafffff4 	bgt	15e8 <fast_sqrt+0x20>
		r=x/l;
		l=(l+r)/2;
	}
	return(l);
}
    1614:	e1a00004 	mov	r0, r4
    1618:	e8bd4030 	pop	{r4, r5, lr}
    161c:	e12fff1e 	bx	lr

00001620 <xy2latlon>:
struct GPS_DATA gps_data_temp;

unsigned int gpsDataOkTrigger=0;

void xy2latlon(double lat0, double lon0, double X, double Y, double *lat, double *lon)	//X: East, Y: North in m; lat0,lon0: Reference coordinates; lat,lon: current GPS measurement
{
    1620:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
        *lat=lat0+Y/MEAN_EARTH_DIAMETER*360./PI;
    1624:	e59f40f4 	ldr	r4, [pc, #244]	; 1720 <xy2latlon+0x100>
    1628:	e3a06101 	mov	r6, #1073741824	; 0x40000000
struct GPS_DATA gps_data_temp;

unsigned int gpsDataOkTrigger=0;

void xy2latlon(double lat0, double lon0, double X, double Y, double *lat, double *lon)	//X: East, Y: North in m; lat0,lon0: Reference coordinates; lat,lon: current GPS measurement
{
    162c:	e24dd008 	sub	sp, sp, #8
        *lat=lat0+Y/MEAN_EARTH_DIAMETER*360./PI;
    1630:	e3a05101 	mov	r5, #1073741824	; 0x40000000
    1634:	e2866876 	add	r6, r6, #7733248	; 0x760000
    1638:	e28f80d0 	add	r8, pc, #208	; 0xd0
    163c:	e8980300 	ldm	r8, {r8, r9}
struct GPS_DATA gps_data_temp;

unsigned int gpsDataOkTrigger=0;

void xy2latlon(double lat0, double lon0, double X, double Y, double *lat, double *lon)	//X: East, Y: North in m; lat0,lon0: Reference coordinates; lat,lon: current GPS measurement
{
    1640:	e1a0a000 	mov	sl, r0
    1644:	e1a0b001 	mov	fp, r1
    1648:	e88d000c 	stm	sp, {r2, r3}
        *lat=lat0+Y/MEAN_EARTH_DIAMETER*360./PI;
    164c:	e28d0034 	add	r0, sp, #52	; 0x34
    1650:	e8900003 	ldm	r0, {r0, r1}
    1654:	e1a02004 	mov	r2, r4
    1658:	e1a03005 	mov	r3, r5
    165c:	e2866902 	add	r6, r6, #32768	; 0x8000
    1660:	e3a07000 	mov	r7, #0
    1664:	eb00195f 	bl	7be8 <__aeabi_ddiv>
    1668:	e1a02006 	mov	r2, r6
    166c:	e1a03007 	mov	r3, r7
    1670:	eb0018b8 	bl	7958 <__aeabi_dmul>
    1674:	e1a02008 	mov	r2, r8
    1678:	e1a03009 	mov	r3, r9
    167c:	eb001959 	bl	7be8 <__aeabi_ddiv>
    1680:	e1a0200a 	mov	r2, sl
    1684:	e1a0300b 	mov	r3, fp
    1688:	eb0017a9 	bl	7534 <__adddf3>
    168c:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
    1690:	e8830003 	stm	r3, {r0, r1}
        *lon=lon0+X/MEAN_EARTH_DIAMETER*360./PI/cos(lat0*UMR);
    1694:	e1a02004 	mov	r2, r4
    1698:	e1a03005 	mov	r3, r5
    169c:	e28d002c 	add	r0, sp, #44	; 0x2c
    16a0:	e8900003 	ldm	r0, {r0, r1}
    16a4:	eb00194f 	bl	7be8 <__aeabi_ddiv>
    16a8:	e1a02006 	mov	r2, r6
    16ac:	e1a03007 	mov	r3, r7
    16b0:	eb0018a8 	bl	7958 <__aeabi_dmul>
    16b4:	e1a02008 	mov	r2, r8
    16b8:	e1a03009 	mov	r3, r9
    16bc:	eb001949 	bl	7be8 <__aeabi_ddiv>
    16c0:	e28f2050 	add	r2, pc, #80	; 0x50
    16c4:	e892000c 	ldm	r2, {r2, r3}
    16c8:	e1a04000 	mov	r4, r0
    16cc:	e1a05001 	mov	r5, r1
    16d0:	e1a0000a 	mov	r0, sl
    16d4:	e1a0100b 	mov	r1, fp
    16d8:	eb00189e 	bl	7958 <__aeabi_dmul>
    16dc:	eb00304c 	bl	d814 <__cos_from_arm>
    16e0:	e1a02000 	mov	r2, r0
    16e4:	e1a03001 	mov	r3, r1
    16e8:	e1a00004 	mov	r0, r4
    16ec:	e1a01005 	mov	r1, r5
    16f0:	eb00193c 	bl	7be8 <__aeabi_ddiv>
    16f4:	e89d000c 	ldm	sp, {r2, r3}
    16f8:	eb00178d 	bl	7534 <__adddf3>
    16fc:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    1700:	e8830003 	stm	r3, {r0, r1}
}
    1704:	e28dd008 	add	sp, sp, #8
    1708:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    170c:	e12fff1e 	bx	lr
    1710:	400921fb 	.word	0x400921fb
    1714:	54442d18 	.word	0x54442d18
    1718:	3f91df46 	.word	0x3f91df46
    171c:	a2529d39 	.word	0xa2529d39
    1720:	416854a6 	.word	0x416854a6

00001724 <SDK_SetEmergencyMode>:
			!= EM_RETURN_AT_MISSION_SUMMIT) && (mode
			!= EM_RETURN_AT_PREDEFINED_HEIGHT))
		return;
	emergencyMode = mode;
	emergencyModeUpdate = 1;
}
    1724:	e12fff1e 	bx	lr

00001728 <SDK_mainloop>:

int errs = 0;
int dmcs = 0;

void SDK_mainloop(void)
{
    1728:	e92d4070 	push	{r4, r5, r6, lr}
		//sendText(dbgMsg);
//	}
	
	// Read any characters in the recieve buffer into our RingBuffer
	
	LED(0,ON);
    172c:	e3a00000 	mov	r0, #0
    1730:	e3a01001 	mov	r1, #1
    1734:	eb000437 	bl	2818 <LED>
	emptyUART0();
    1738:	eb000606 	bl	2f58 <emptyUART0>
	LED(0,OFF);
    173c:	e3a00000 	mov	r0, #0
    1740:	e1a01000 	mov	r1, r0
    1744:	eb000433 	bl	2818 <LED>

	if ( loadFrame() ) //We have received a valid frame...
    1748:	eb0016b0 	bl	7210 <loadFrame>
    174c:	e3500000 	cmp	r0, #0
	{
		 
		switch (frame.command)
    1750:	e59fe084 	ldr	lr, [pc, #132]	; 17dc <SDK_mainloop+0xb4>
	
	LED(0,ON);
	emptyUART0();
	LED(0,OFF);

	if ( loadFrame() ) //We have received a valid frame...
    1754:	0a000007 	beq	1778 <SDK_mainloop+0x50>
	{
		 
		switch (frame.command)
    1758:	e5de3001 	ldrb	r3, [lr, #1]
    175c:	e35300c9 	cmp	r3, #201	; 0xc9
				 			  //1: enable control by HL processor

				WO_SDK.disable_motor_onoff_by_stick = 0;

				for (i = 0; i < 4; i++ )
					WO_Direct_Individual_Motor_Control.motor[i] = frame.data[i];
    1760:	e59f4078 	ldr	r4, [pc, #120]	; 17e0 <SDK_mainloop+0xb8>
	{
		 
		switch (frame.command)
		{
			case DMC: //Direct Motor Command
				WO_SDK.ctrl_mode=0x00;	//0x00: direct individual motor control: individual commands for motors 0..3
    1764:	e59f6078 	ldr	r6, [pc, #120]	; 17e4 <SDK_mainloop+0xbc>
    1768:	e3a05000 	mov	r5, #0
	LED(0,OFF);

	if ( loadFrame() ) //We have received a valid frame...
	{
		 
		switch (frame.command)
    176c:	0a000003 	beq	1780 <SDK_mainloop+0x58>
    1770:	e35300cc 	cmp	r3, #204	; 0xcc
    1774:	0a000015 	beq	17d0 <SDK_mainloop+0xa8>
				//sprintf(dbgMsg, "Unknown Command in Frame: %i", frame.command);
				//sendText(dbgMsg);
			break;
		}
	}
}	
    1778:	e8bd4070 	pop	{r4, r5, r6, lr}
    177c:	e12fff1e 	bx	lr
				 			  //1: enable control by HL processor

				WO_SDK.disable_motor_onoff_by_stick = 0;

				for (i = 0; i < 4; i++ )
					WO_Direct_Individual_Motor_Control.motor[i] = frame.data[i];
    1780:	e5de2002 	ldrb	r2, [lr, #2]
    1784:	e5dec005 	ldrb	ip, [lr, #5]
    1788:	e5de1003 	ldrb	r1, [lr, #3]
    178c:	e5de0004 	ldrb	r0, [lr, #4]
		 
		switch (frame.command)
		{
			case DMC: //Direct Motor Command
				WO_SDK.ctrl_mode=0x00;	//0x00: direct individual motor control: individual commands for motors 0..3
				WO_SDK.ctrl_enabled = 1;  //0: disable control by HL processor
    1790:	e3a03001 	mov	r3, #1
    1794:	e5c63001 	strb	r3, [r6, #1]
				 			  //1: enable control by HL processor

				WO_SDK.disable_motor_onoff_by_stick = 0;

				for (i = 0; i < 4; i++ )
					WO_Direct_Individual_Motor_Control.motor[i] = frame.data[i];
    1798:	e5c42000 	strb	r2, [r4]
				WO_Direct_Individual_Motor_Control.motor[4] = 0;
				WO_Direct_Individual_Motor_Control.motor[5] = 0;
    179c:	e5c45005 	strb	r5, [r4, #5]
			case DMC: //Direct Motor Command
				WO_SDK.ctrl_mode=0x00;	//0x00: direct individual motor control: individual commands for motors 0..3
				WO_SDK.ctrl_enabled = 1;  //0: disable control by HL processor
				 			  //1: enable control by HL processor

				WO_SDK.disable_motor_onoff_by_stick = 0;
    17a0:	e5c65002 	strb	r5, [r6, #2]

				for (i = 0; i < 4; i++ )
					WO_Direct_Individual_Motor_Control.motor[i] = frame.data[i];
    17a4:	e5c41001 	strb	r1, [r4, #1]
    17a8:	e5c40002 	strb	r0, [r4, #2]
    17ac:	e5c4c003 	strb	ip, [r4, #3]
	{
		 
		switch (frame.command)
		{
			case DMC: //Direct Motor Command
				WO_SDK.ctrl_mode=0x00;	//0x00: direct individual motor control: individual commands for motors 0..3
    17b0:	e5c65000 	strb	r5, [r6]

				WO_SDK.disable_motor_onoff_by_stick = 0;

				for (i = 0; i < 4; i++ )
					WO_Direct_Individual_Motor_Control.motor[i] = frame.data[i];
				WO_Direct_Individual_Motor_Control.motor[4] = 0;
    17b4:	e5c45004 	strb	r5, [r4, #4]
				WO_Direct_Individual_Motor_Control.motor[5] = 0;
				
				//write data to transmit buffer for immediate transfer to LL processor
				HL2LL_write_cycle();
    17b8:	ebfffb19 	bl	424 <HL2LL_write_cycle>
				dmcs++;	
    17bc:	e59f2024 	ldr	r2, [pc, #36]	; 17e8 <SDK_mainloop+0xc0>
    17c0:	e5923000 	ldr	r3, [r2]
    17c4:	e2833001 	add	r3, r3, #1
    17c8:	e5823000 	str	r3, [r2]
    17cc:	eaffffe9 	b	1778 <SDK_mainloop+0x50>
			break;
			case GPIO: //GPIO Pin P1.16
				GPIO_P1_B16(frame.data[0]);
    17d0:	e5de0002 	ldrb	r0, [lr, #2]
    17d4:	eb000432 	bl	28a4 <GPIO_P1_B16>
    17d8:	eaffffe6 	b	1778 <SDK_mainloop+0x50>
    17dc:	40001edc 	.word	0x40001edc
    17e0:	40001818 	.word	0x40001818
    17e4:	40001824 	.word	0x40001824
    17e8:	400009ac 	.word	0x400009ac

000017ec <buzzer>:


void buzzer(unsigned char offon)
{

	if(offon)	//beeper on
    17ec:	e31000ff 	tst	r0, #255	; 0xff
	{
		IOSET1 = (1<<17);
	}
	else
	{
		IOCLR1 = (1<<17);
    17f0:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
void buzzer(unsigned char offon)
{

	if(offon)	//beeper on
	{
		IOSET1 = (1<<17);
    17f4:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
	}
	else
	{
		IOCLR1 = (1<<17);
    17f8:	e281190a 	add	r1, r1, #163840	; 0x28000
void buzzer(unsigned char offon)
{

	if(offon)	//beeper on
	{
		IOSET1 = (1<<17);
    17fc:	e282290a 	add	r2, r2, #163840	; 0x28000
    1800:	13a03802 	movne	r3, #131072	; 0x20000
	}
	else
	{
		IOCLR1 = (1<<17);
    1804:	03a03802 	moveq	r3, #131072	; 0x20000
void buzzer(unsigned char offon)
{

	if(offon)	//beeper on
	{
		IOSET1 = (1<<17);
    1808:	15823014 	strne	r3, [r2, #20]
	}
	else
	{
		IOCLR1 = (1<<17);
    180c:	0581301c 	streq	r3, [r1, #28]
    1810:	e12fff1e 	bx	lr

00001814 <buzzer_handler>:
unsigned char buzzer_warnings=BUZZER_WARNING_INIT_BEEP|BUZZER_WARNING_GPS_BEEP;
unsigned short ALARM_battery_warning_voltage_high=10600;
unsigned short ALARM_battery_warning_voltage_low=10100;

void buzzer_handler(unsigned int vbat)	//needs to be triggered at 100 Hz
{
    1814:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	static char bat_warning_enabled=0;

	unsigned char i;


	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;
    1818:	e59f6574 	ldr	r6, [pc, #1396]	; 1d94 <buzzer_handler+0x580>
    181c:	e1d630b0 	ldrh	r3, [r6]
    1820:	e2833001 	add	r3, r3, #1

	//battery warning
	if(++bat_cnt==100){
    1824:	e59f456c 	ldr	r4, [pc, #1388]	; 1d98 <buzzer_handler+0x584>
	static char bat_warning_enabled=0;

	unsigned char i;


	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;
    1828:	e1a03803 	lsl	r3, r3, #16
    182c:	e1a03823 	lsr	r3, r3, #16
    1830:	e35300c7 	cmp	r3, #199	; 0xc7
    1834:	e1c630b0 	strh	r3, [r6]

	//battery warning
	if(++bat_cnt==100){
    1838:	e5943000 	ldr	r3, [r4]
	static char bat_warning_enabled=0;

	unsigned char i;


	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;
    183c:	83a02000 	movhi	r2, #0

	//battery warning
	if(++bat_cnt==100){
    1840:	e2833001 	add	r3, r3, #1
	static char bat_warning_enabled=0;

	unsigned char i;


	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;
    1844:	81c620b0 	strhhi	r2, [r6]

	//battery warning
	if(++bat_cnt==100){
    1848:	e3530064 	cmp	r3, #100	; 0x64
unsigned char buzzer_warnings=BUZZER_WARNING_INIT_BEEP|BUZZER_WARNING_GPS_BEEP;
unsigned short ALARM_battery_warning_voltage_high=10600;
unsigned short ALARM_battery_warning_voltage_low=10100;

void buzzer_handler(unsigned int vbat)	//needs to be triggered at 100 Hz
{
    184c:	e1a0e000 	mov	lr, r0


	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;

	//battery warning
	if(++bat_cnt==100){
    1850:	e5843000 	str	r3, [r4]
    1854:	159f5540 	ldrne	r5, [pc, #1344]	; 1d9c <buzzer_handler+0x588>
    1858:	159fc540 	ldrne	ip, [pc, #1344]	; 1da0 <buzzer_handler+0x58c>
    185c:	0a00012f 	beq	1d20 <buzzer_handler+0x50c>
		bat_cnt=0;
		bat_div=(ALARM_battery_warning_voltage_high-ALARM_battery_warning_voltage_low)/100;
	}
	if(vbat<ALARM_battery_warning_voltage_low) vbat=ALARM_battery_warning_voltage_low;
    1860:	e1dc10b0 	ldrh	r1, [ip]

	if(vbat<ALARM_battery_warning_voltage_high)	//decide if it's really an empty battery
    1864:	e1d530b0 	ldrh	r3, [r5]
	//battery warning
	if(++bat_cnt==100){
		bat_cnt=0;
		bat_div=(ALARM_battery_warning_voltage_high-ALARM_battery_warning_voltage_low)/100;
	}
	if(vbat<ALARM_battery_warning_voltage_low) vbat=ALARM_battery_warning_voltage_low;
    1868:	e151000e 	cmp	r1, lr
    186c:	21a00001 	movcs	r0, r1
    1870:	31a0000e 	movcc	r0, lr

	if(vbat<ALARM_battery_warning_voltage_high)	//decide if it's really an empty battery
    1874:	e1500003 	cmp	r0, r3
    1878:	2a00006b 	bcs	1a2c <buzzer_handler+0x218>
	{
		if(bat_warning<ControllerCyclesPerSecond/5) bat_warning++;
    187c:	e59f2520 	ldr	r2, [pc, #1312]	; 1da4 <buzzer_handler+0x590>
    1880:	e5923000 	ldr	r3, [r2]
    1884:	e35300c7 	cmp	r3, #199	; 0xc7
		else bat_warning_enabled=1;
    1888:	c59f3518 	ldrgt	r3, [pc, #1304]	; 1da8 <buzzer_handler+0x594>
	}
	if(vbat<ALARM_battery_warning_voltage_low) vbat=ALARM_battery_warning_voltage_low;

	if(vbat<ALARM_battery_warning_voltage_high)	//decide if it's really an empty battery
	{
		if(bat_warning<ControllerCyclesPerSecond/5) bat_warning++;
    188c:	d2833001 	addle	r3, r3, #1
		else bat_warning_enabled=1;
    1890:	c3a02001 	movgt	r2, #1
	}
	if(vbat<ALARM_battery_warning_voltage_low) vbat=ALARM_battery_warning_voltage_low;

	if(vbat<ALARM_battery_warning_voltage_high)	//decide if it's really an empty battery
	{
		if(bat_warning<ControllerCyclesPerSecond/5) bat_warning++;
    1894:	d5823000 	strle	r3, [r2]
		else bat_warning_enabled=1;
    1898:	c5c32000 	strbgt	r2, [r3]
	}
	if(vbat<ALARM_battery_warning_voltage_low) vbat=ALARM_battery_warning_voltage_low;

	if(vbat<ALARM_battery_warning_voltage_high)	//decide if it's really an empty battery
	{
		if(bat_warning<ControllerCyclesPerSecond/5) bat_warning++;
    189c:	da000068 	ble	1a44 <buzzer_handler+0x230>
			buz_active&=~BU_BATTERY;
		}
	}
	if(bat_warning_enabled)
	{
		if(bat_cnt>((vbat-ALARM_battery_warning_voltage_low)/bat_div)) buz_active|=BU_BATTERY; //Beeper on
    18a0:	e59f3504 	ldr	r3, [pc, #1284]	; 1dac <buzzer_handler+0x598>
    18a4:	e0610000 	rsb	r0, r1, r0
    18a8:	e5931000 	ldr	r1, [r3]
    18ac:	eb002fdb 	bl	d820 <____udivsi3_from_arm>
    18b0:	e5943000 	ldr	r3, [r4]
    18b4:	e1530000 	cmp	r3, r0
    18b8:	83a01010 	movhi	r1, #16
    18bc:	81a00001 	movhi	r0, r1
    18c0:	93a01000 	movls	r1, #0
    18c4:	93a00010 	movls	r0, #16
	{
		buz_active&=~BU_BATTERY;
		buz_priority&=~BU_BATTERY;
	}

	if(buzzer_warnings&BUZZER_WARNING_GPS_BEEP)
    18c8:	e59f34e0 	ldr	r3, [pc, #1248]	; 1db0 <buzzer_handler+0x59c>
    18cc:	e5d37000 	ldrb	r7, [r3]
    18d0:	e3170002 	tst	r7, #2
    18d4:	059f24d8 	ldreq	r2, [pc, #1240]	; 1db4 <buzzer_handler+0x5a0>
    18d8:	0a000009 	beq	1904 <buzzer_handler+0xf0>
	{
		if(((GPS_Data.status&0xFF)!=3)&&(LL_1khz_attitude_data.RC_data[5]>200))	//no lock and in GPS mode
    18dc:	e59f34d4 	ldr	r3, [pc, #1236]	; 1db8 <buzzer_handler+0x5a4>
    18e0:	e5d32028 	ldrb	r2, [r3, #40]	; 0x28
    18e4:	e3520003 	cmp	r2, #3
    18e8:	0a000120 	beq	1d70 <buzzer_handler+0x55c>
    18ec:	e59f24c0 	ldr	r2, [pc, #1216]	; 1db4 <buzzer_handler+0x5a0>
    18f0:	e5d23013 	ldrb	r3, [r2, #19]
    18f4:	e35300c8 	cmp	r3, #200	; 0xc8
    18f8:	8a000116 	bhi	1d58 <buzzer_handler+0x544>
			if(buz_cnt<5) buz_active|=BU_GPS_BEEP;
			else buz_active&=~BU_GPS_BEEP;
		}
		else
		{
			buz_active&=~BU_GPS_BEEP;
    18fc:	e3c11c01 	bic	r1, r1, #256	; 0x100
			buz_priority&=~BU_GPS_BEEP;
    1900:	e3c00c01 	bic	r0, r0, #256	; 0x100
		}
	}

	//gyro error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_GYROS)&&(SYSTEM_initialized))
    1904:	e1d235b2 	ldrh	r3, [r2, #82]	; 0x52
    1908:	e1a04803 	lsl	r4, r3, #16
    190c:	e1a0c824 	lsr	ip, r4, #16
    1910:	e31c0c02 	tst	ip, #512	; 0x200
    1914:	0a000003 	beq	1928 <buzzer_handler+0x114>
    1918:	e59f349c 	ldr	r3, [pc, #1180]	; 1dbc <buzzer_handler+0x5a8>
    191c:	e5d32000 	ldrb	r2, [r3]
    1920:	e3520000 	cmp	r2, #0
    1924:	1a00009a 	bne	1b94 <buzzer_handler+0x380>
		else if(buz_cnt<165) buz_active|=BU_ERROR_GYRO;
		else buz_active&=~BU_ERROR_GYRO;
	}
	else
	{
		buz_priority&=~BU_ERROR_GYRO;
    1928:	e3c00002 	bic	r0, r0, #2
		buz_active&=~BU_ERROR_GYRO;
    192c:	e3c11002 	bic	r1, r1, #2
	}

	//ACC error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_ACC)&&(SYSTEM_initialized))
    1930:	e31c0b01 	tst	ip, #1024	; 0x400
    1934:	0a000003 	beq	1948 <buzzer_handler+0x134>
    1938:	e59f347c 	ldr	r3, [pc, #1148]	; 1dbc <buzzer_handler+0x5a8>
    193c:	e5d32000 	ldrb	r2, [r3]
    1940:	e3520000 	cmp	r2, #0
    1944:	1a000084 	bne	1b5c <buzzer_handler+0x348>
		else if(buz_cnt<165) buz_active|=BU_ERROR_ACC;
		else buz_active&=~BU_ERROR_ACC;
	}
	else
	{
		buz_priority&=~BU_ERROR_ACC;
    1948:	e3c00004 	bic	r0, r0, #4
		buz_active&=~BU_ERROR_ACC;
    194c:	e3c11004 	bic	r1, r1, #4
	}

	//ADC error
	if((LL_1khz_attitude_data.flightMode&FM_ADC_STARTUP_ERROR)&&(SYSTEM_initialized))
    1950:	e31c0b02 	tst	ip, #2048	; 0x800
    1954:	0a000003 	beq	1968 <buzzer_handler+0x154>
    1958:	e59f345c 	ldr	r3, [pc, #1116]	; 1dbc <buzzer_handler+0x5a8>
    195c:	e5d32000 	ldrb	r2, [r3]
    1960:	e3520000 	cmp	r2, #0
    1964:	1a00006a 	bne	1b14 <buzzer_handler+0x300>
		else if(buz_cnt<165) buz_active|=BU_ERROR_ADC;
		else buz_active&=~BU_ERROR_ADC;
	}
	else
	{
		buz_priority&=~BU_ERROR_ADC;
    1968:	e3c0e008 	bic	lr, r0, #8
		buz_active&=~BU_ERROR_ADC;
    196c:	e3c10008 	bic	r0, r1, #8
	}

	//compass failure: warn 3 seconds only
	if((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE)&&(SYSTEM_initialized)&&(error_cnt_compass++<400))
    1970:	e31c0010 	tst	ip, #16
    1974:	0a000003 	beq	1988 <buzzer_handler+0x174>
    1978:	e59f343c 	ldr	r3, [pc, #1084]	; 1dbc <buzzer_handler+0x5a8>
    197c:	e5d32000 	ldrb	r2, [r3]
    1980:	e3520000 	cmp	r2, #0
    1984:	1a00003e 	bne	1a84 <buzzer_handler+0x270>
		else if(buz_cnt%100<50) buz_active&=~BU_COMPASS_FAILURE;
		else buz_active&=~BU_COMPASS_FAILURE;
	}
	else
	{
		buz_priority&=~BU_COMPASS_FAILURE;
    1988:	e3cee020 	bic	lr, lr, #32
		buz_active&=~BU_COMPASS_FAILURE;
    198c:	e3c00020 	bic	r0, r0, #32
	}

	//mag fieldstrength warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_FIELD_STRENGTH_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_fs++<400))
    1990:	e31c0901 	tst	ip, #16384	; 0x4000
    1994:	0a000003 	beq	19a8 <buzzer_handler+0x194>
    1998:	e59f341c 	ldr	r3, [pc, #1052]	; 1dbc <buzzer_handler+0x5a8>
    199c:	e5d32000 	ldrb	r2, [r3]
    19a0:	e3520000 	cmp	r2, #0
    19a4:	1a000084 	bne	1bbc <buzzer_handler+0x3a8>
		else if(buz_cnt%100<30) buz_active&=~BU_WARNING_MAG_FS;
		else buz_active&=~BU_WARNING_MAG_FS;
	}
	else
	{
		buz_priority&=~BU_WARNING_MAG_FS;
    19a8:	e3cec040 	bic	ip, lr, #64	; 0x40
		buz_active&=~BU_WARNING_MAG_FS;
    19ac:	e3c00040 	bic	r0, r0, #64	; 0x40
	}

	//mag inclination warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_INCLINATION_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_inc++<400))
    19b0:	e3540000 	cmp	r4, #0
    19b4:	ba0000b5 	blt	1c90 <buzzer_handler+0x47c>
		else if(buz_cnt%100<40) buz_active&=~BU_WARNING_MAG_INC;
		else buz_active&=~BU_WARNING_MAG_INC;
	}
	else
	{
		buz_priority&=~BU_WARNING_MAG_INC;
    19b8:	e3cc5080 	bic	r5, ip, #128	; 0x80
		buz_active&=~BU_WARNING_MAG_INC;
    19bc:	e3c04080 	bic	r4, r0, #128	; 0x80
	}

	if(buzzer_warnings&BUZZER_WARNING_INIT_BEEP)
    19c0:	e3170001 	tst	r7, #1
    19c4:	0a000006 	beq	19e4 <buzzer_handler+0x1d0>
	{
		if(!SYSTEM_initialized)
    19c8:	e59f33ec 	ldr	r3, [pc, #1004]	; 1dbc <buzzer_handler+0x5a8>
    19cc:	e5d32000 	ldrb	r2, [r3]
    19d0:	e20200ff 	and	r0, r2, #255	; 0xff
    19d4:	e3500000 	cmp	r0, #0

#endif
		}
		else
		{
			buz_active&=~BU_INIT;
    19d8:	13c44001 	bicne	r4, r4, #1
			buz_priority&=~BU_INIT;
    19dc:	13c55001 	bicne	r5, r5, #1
		buz_active&=~BU_WARNING_MAG_INC;
	}

	if(buzzer_warnings&BUZZER_WARNING_INIT_BEEP)
	{
		if(!SYSTEM_initialized)
    19e0:	0a000091 	beq	1c2c <buzzer_handler+0x418>
#endif
		}
		else
		{
			buz_active&=~BU_INIT;
			buz_priority&=~BU_INIT;
    19e4:	e3a02000 	mov	r2, #0
    19e8:	e3a01001 	mov	r1, #1
	}

	//buzzer control
	for(i=0;i<BUZZ_NR_OF_WARNINGS; i++)
	{
		if(buz_priority&(1<<i))
    19ec:	e1a03211 	lsl	r3, r1, r2
    19f0:	e1150003 	tst	r5, r3
		{
			buz_active&=(1<<i);
    19f4:	e2822001 	add	r2, r2, #1
	}

	//buzzer control
	for(i=0;i<BUZZ_NR_OF_WARNINGS; i++)
	{
		if(buz_priority&(1<<i))
    19f8:	1a000005 	bne	1a14 <buzzer_handler+0x200>
			buz_priority&=~BU_INIT;
		}
	}

	//buzzer control
	for(i=0;i<BUZZ_NR_OF_WARNINGS; i++)
    19fc:	e3520009 	cmp	r2, #9
    1a00:	0a000004 	beq	1a18 <buzzer_handler+0x204>
	{
		if(buz_priority&(1<<i))
    1a04:	e1a03211 	lsl	r3, r1, r2
    1a08:	e1150003 	tst	r5, r3
		{
			buz_active&=(1<<i);
    1a0c:	e2822001 	add	r2, r2, #1
	}

	//buzzer control
	for(i=0;i<BUZZ_NR_OF_WARNINGS; i++)
	{
		if(buz_priority&(1<<i))
    1a10:	0afffff9 	beq	19fc <buzzer_handler+0x1e8>
		{
			buz_active&=(1<<i);
    1a14:	e0044003 	and	r4, r4, r3
			i=BUZZ_NR_OF_WARNINGS;
		}
	}

	if(buz_active) buzzer(ON);
    1a18:	e3540000 	cmp	r4, #0
    1a1c:	0a00000f 	beq	1a60 <buzzer_handler+0x24c>
    1a20:	e3a00001 	mov	r0, #1
	else buzzer(OFF);
}
    1a24:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
			buz_active&=(1<<i);
			i=BUZZ_NR_OF_WARNINGS;
		}
	}

	if(buz_active) buzzer(ON);
    1a28:	eaffff6f 	b	17ec <buzzer>
		if(bat_warning<ControllerCyclesPerSecond/5) bat_warning++;
		else bat_warning_enabled=1;
	}
	else
	{
		if(bat_warning>10) bat_warning-=2;
    1a2c:	e59f2370 	ldr	r2, [pc, #880]	; 1da4 <buzzer_handler+0x590>
    1a30:	e5923000 	ldr	r3, [r2]
    1a34:	e353000a 	cmp	r3, #10
    1a38:	c2433002 	subgt	r3, r3, #2
    1a3c:	c5823000 	strgt	r3, [r2]
    1a40:	da000009 	ble	1a6c <buzzer_handler+0x258>
		{
			bat_warning_enabled=0;
			buz_active&=~BU_BATTERY;
		}
	}
	if(bat_warning_enabled)
    1a44:	e59f335c 	ldr	r3, [pc, #860]	; 1da8 <buzzer_handler+0x594>
    1a48:	e5d32000 	ldrb	r2, [r3]
    1a4c:	e3520000 	cmp	r2, #0
    1a50:	01a01002 	moveq	r1, r2
    1a54:	01a00001 	moveq	r0, r1
    1a58:	0affff9a 	beq	18c8 <buzzer_handler+0xb4>
    1a5c:	eaffff8f 	b	18a0 <buzzer_handler+0x8c>
			i=BUZZ_NR_OF_WARNINGS;
		}
	}

	if(buz_active) buzzer(ON);
	else buzzer(OFF);
    1a60:	e1a00004 	mov	r0, r4
}
    1a64:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
			i=BUZZ_NR_OF_WARNINGS;
		}
	}

	if(buz_active) buzzer(ON);
	else buzzer(OFF);
    1a68:	eaffff5f 	b	17ec <buzzer>
	else
	{
		if(bat_warning>10) bat_warning-=2;
		else
		{
			bat_warning_enabled=0;
    1a6c:	e3a02000 	mov	r2, #0
    1a70:	e59f3330 	ldr	r3, [pc, #816]	; 1da8 <buzzer_handler+0x594>
    1a74:	e1a01002 	mov	r1, r2
    1a78:	e1a00002 	mov	r0, r2
    1a7c:	e5c32000 	strb	r2, [r3]
    1a80:	eaffff90 	b	18c8 <buzzer_handler+0xb4>
		buz_priority&=~BU_ERROR_ADC;
		buz_active&=~BU_ERROR_ADC;
	}

	//compass failure: warn 3 seconds only
	if((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE)&&(SYSTEM_initialized)&&(error_cnt_compass++<400))
    1a84:	e59f2334 	ldr	r2, [pc, #820]	; 1dc0 <buzzer_handler+0x5ac>
    1a88:	e1d230b0 	ldrh	r3, [r2]
    1a8c:	e3530e19 	cmp	r3, #400	; 0x190
    1a90:	e2833001 	add	r3, r3, #1
    1a94:	e1c230b0 	strh	r3, [r2]
    1a98:	2affffba 	bcs	1988 <buzzer_handler+0x174>
	{
		buz_priority|=BU_COMPASS_FAILURE;
		if(buz_cnt%100<5) buz_active|=BU_COMPASS_FAILURE;
    1a9c:	e1d610b0 	ldrh	r1, [r6]
    1aa0:	e59f231c 	ldr	r2, [pc, #796]	; 1dc4 <buzzer_handler+0x5b0>
    1aa4:	e0835192 	umull	r5, r3, r2, r1
    1aa8:	e1a032a3 	lsr	r3, r3, #5
    1aac:	e0833103 	add	r3, r3, r3, lsl #2
    1ab0:	e0833103 	add	r3, r3, r3, lsl #2
    1ab4:	e0411103 	sub	r1, r1, r3, lsl #2
    1ab8:	e1a01801 	lsl	r1, r1, #16
    1abc:	e1a01821 	lsr	r1, r1, #16
    1ac0:	e3510004 	cmp	r1, #4
	}

	//compass failure: warn 3 seconds only
	if((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE)&&(SYSTEM_initialized)&&(error_cnt_compass++<400))
	{
		buz_priority|=BU_COMPASS_FAILURE;
    1ac4:	e38ee020 	orr	lr, lr, #32
		if(buz_cnt%100<5) buz_active|=BU_COMPASS_FAILURE;
    1ac8:	9a00000f 	bls	1b0c <buzzer_handler+0x2f8>
		else if(buz_cnt%100<10) buz_active&=~BU_COMPASS_FAILURE;
    1acc:	e3510009 	cmp	r1, #9
    1ad0:	9affffad 	bls	198c <buzzer_handler+0x178>
		else if(buz_cnt%100<15) buz_active|=BU_COMPASS_FAILURE;
    1ad4:	e351000e 	cmp	r1, #14
    1ad8:	9a00000b 	bls	1b0c <buzzer_handler+0x2f8>
		else if(buz_cnt%100<20) buz_active&=~BU_COMPASS_FAILURE;
    1adc:	e3510013 	cmp	r1, #19
    1ae0:	9affffa9 	bls	198c <buzzer_handler+0x178>
		else if(buz_cnt%100<25) buz_active|=BU_COMPASS_FAILURE;
    1ae4:	e3510018 	cmp	r1, #24
    1ae8:	9a000007 	bls	1b0c <buzzer_handler+0x2f8>
		else if(buz_cnt%100<30) buz_active&=~BU_COMPASS_FAILURE;
    1aec:	e351001d 	cmp	r1, #29
    1af0:	9affffa5 	bls	198c <buzzer_handler+0x178>
		else if(buz_cnt%100<35) buz_active|=BU_COMPASS_FAILURE;
    1af4:	e3510022 	cmp	r1, #34	; 0x22
    1af8:	9a000003 	bls	1b0c <buzzer_handler+0x2f8>
		else if(buz_cnt%100<40) buz_active&=~BU_COMPASS_FAILURE;
    1afc:	e3510027 	cmp	r1, #39	; 0x27
    1b00:	9affffa1 	bls	198c <buzzer_handler+0x178>
		else if(buz_cnt%100<45) buz_active|=BU_COMPASS_FAILURE;
    1b04:	e351002c 	cmp	r1, #44	; 0x2c
    1b08:	8affff9f 	bhi	198c <buzzer_handler+0x178>
    1b0c:	e3800020 	orr	r0, r0, #32
    1b10:	eaffff9e 	b	1990 <buzzer_handler+0x17c>

	//ADC error
	if((LL_1khz_attitude_data.flightMode&FM_ADC_STARTUP_ERROR)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_ADC;
		if(buz_cnt<135) buz_active|=BU_ERROR_ADC;
    1b14:	e1d630b0 	ldrh	r3, [r6]
    1b18:	e3530086 	cmp	r3, #134	; 0x86
	}

	//ADC error
	if((LL_1khz_attitude_data.flightMode&FM_ADC_STARTUP_ERROR)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_ADC;
    1b1c:	e380e008 	orr	lr, r0, #8
		if(buz_cnt<135) buz_active|=BU_ERROR_ADC;
    1b20:	9a00000b 	bls	1b54 <buzzer_handler+0x340>
		else if(buz_cnt<140) buz_active&=~BU_ERROR_ADC;
    1b24:	e353008b 	cmp	r3, #139	; 0x8b
    1b28:	9affff8f 	bls	196c <buzzer_handler+0x158>
		else if(buz_cnt<145) buz_active|=BU_ERROR_ADC;
    1b2c:	e3530090 	cmp	r3, #144	; 0x90
    1b30:	9a000007 	bls	1b54 <buzzer_handler+0x340>
		else if(buz_cnt<150) buz_active&=~BU_ERROR_ADC;
    1b34:	e3530095 	cmp	r3, #149	; 0x95
    1b38:	9affff8b 	bls	196c <buzzer_handler+0x158>
		else if(buz_cnt<155) buz_active|=BU_ERROR_ADC;
    1b3c:	e353009a 	cmp	r3, #154	; 0x9a
    1b40:	9a000003 	bls	1b54 <buzzer_handler+0x340>
		else if(buz_cnt<160) buz_active&=~BU_ERROR_ADC;
    1b44:	e353009f 	cmp	r3, #159	; 0x9f
    1b48:	9affff87 	bls	196c <buzzer_handler+0x158>
		else if(buz_cnt<165) buz_active|=BU_ERROR_ADC;
    1b4c:	e35300a4 	cmp	r3, #164	; 0xa4
    1b50:	8affff85 	bhi	196c <buzzer_handler+0x158>
    1b54:	e3810008 	orr	r0, r1, #8
    1b58:	eaffff84 	b	1970 <buzzer_handler+0x15c>

	//ACC error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_ACC)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_ACC;
		if(buz_cnt<145) buz_active|=BU_ERROR_ACC;
    1b5c:	e1d630b0 	ldrh	r3, [r6]
    1b60:	e3530090 	cmp	r3, #144	; 0x90
	}

	//ACC error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_ACC)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_ACC;
    1b64:	e3800004 	orr	r0, r0, #4
		if(buz_cnt<145) buz_active|=BU_ERROR_ACC;
    1b68:	9a000007 	bls	1b8c <buzzer_handler+0x378>
		else if(buz_cnt<150) buz_active&=~BU_ERROR_ACC;
    1b6c:	e3530095 	cmp	r3, #149	; 0x95
    1b70:	9affff75 	bls	194c <buzzer_handler+0x138>
		else if(buz_cnt<155) buz_active|=BU_ERROR_ACC;
    1b74:	e353009a 	cmp	r3, #154	; 0x9a
    1b78:	9a000003 	bls	1b8c <buzzer_handler+0x378>
		else if(buz_cnt<160) buz_active&=~BU_ERROR_ACC;
    1b7c:	e353009f 	cmp	r3, #159	; 0x9f
    1b80:	9affff71 	bls	194c <buzzer_handler+0x138>
		else if(buz_cnt<165) buz_active|=BU_ERROR_ACC;
    1b84:	e35300a4 	cmp	r3, #164	; 0xa4
    1b88:	8affff6f 	bhi	194c <buzzer_handler+0x138>
    1b8c:	e3811004 	orr	r1, r1, #4
    1b90:	eaffff6e 	b	1950 <buzzer_handler+0x13c>

	//gyro error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_GYROS)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_GYRO;
		if(buz_cnt<155) buz_active|=BU_ERROR_GYRO;
    1b94:	e1d630b0 	ldrh	r3, [r6]
    1b98:	e353009a 	cmp	r3, #154	; 0x9a
	}

	//gyro error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_GYROS)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_GYRO;
    1b9c:	e3800002 	orr	r0, r0, #2
		if(buz_cnt<155) buz_active|=BU_ERROR_GYRO;
    1ba0:	9a000003 	bls	1bb4 <buzzer_handler+0x3a0>
		else if(buz_cnt<160) buz_active&=~BU_ERROR_GYRO;
    1ba4:	e353009f 	cmp	r3, #159	; 0x9f
    1ba8:	9affff5f 	bls	192c <buzzer_handler+0x118>
		else if(buz_cnt<165) buz_active|=BU_ERROR_GYRO;
    1bac:	e35300a4 	cmp	r3, #164	; 0xa4
    1bb0:	8affff5d 	bhi	192c <buzzer_handler+0x118>
    1bb4:	e3811002 	orr	r1, r1, #2
    1bb8:	eaffff5c 	b	1930 <buzzer_handler+0x11c>
		buz_priority&=~BU_COMPASS_FAILURE;
		buz_active&=~BU_COMPASS_FAILURE;
	}

	//mag fieldstrength warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_FIELD_STRENGTH_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_fs++<400))
    1bbc:	e59f2204 	ldr	r2, [pc, #516]	; 1dc8 <buzzer_handler+0x5b4>
    1bc0:	e1d230b0 	ldrh	r3, [r2]
    1bc4:	e3530e19 	cmp	r3, #400	; 0x190
    1bc8:	e2833001 	add	r3, r3, #1
    1bcc:	e1c230b0 	strh	r3, [r2]
    1bd0:	2affff74 	bcs	19a8 <buzzer_handler+0x194>
	{
		buz_priority|=BU_WARNING_MAG_FS;
		if(buz_cnt%100<5) buz_active|=BU_WARNING_MAG_FS;
    1bd4:	e1d610b0 	ldrh	r1, [r6]
    1bd8:	e59f21e4 	ldr	r2, [pc, #484]	; 1dc4 <buzzer_handler+0x5b0>
    1bdc:	e083c192 	umull	ip, r3, r2, r1
    1be0:	e1a032a3 	lsr	r3, r3, #5
    1be4:	e0833103 	add	r3, r3, r3, lsl #2
    1be8:	e0833103 	add	r3, r3, r3, lsl #2
    1bec:	e0411103 	sub	r1, r1, r3, lsl #2
    1bf0:	e1a01801 	lsl	r1, r1, #16
    1bf4:	e1a01821 	lsr	r1, r1, #16
    1bf8:	e3510004 	cmp	r1, #4
	}

	//mag fieldstrength warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_FIELD_STRENGTH_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_fs++<400))
	{
		buz_priority|=BU_WARNING_MAG_FS;
    1bfc:	e38ec040 	orr	ip, lr, #64	; 0x40
		if(buz_cnt%100<5) buz_active|=BU_WARNING_MAG_FS;
    1c00:	9a000007 	bls	1c24 <buzzer_handler+0x410>
		else if(buz_cnt%100<10) buz_active&=~BU_WARNING_MAG_FS;
    1c04:	e3510009 	cmp	r1, #9
    1c08:	9affff67 	bls	19ac <buzzer_handler+0x198>
		else if(buz_cnt%100<15) buz_active|=BU_WARNING_MAG_FS;
    1c0c:	e351000e 	cmp	r1, #14
    1c10:	9a000003 	bls	1c24 <buzzer_handler+0x410>
		else if(buz_cnt%100<20) buz_active&=~BU_WARNING_MAG_FS;
    1c14:	e3510013 	cmp	r1, #19
    1c18:	9affff63 	bls	19ac <buzzer_handler+0x198>
		else if(buz_cnt%100<25) buz_active|=BU_WARNING_MAG_FS;
    1c1c:	e3510018 	cmp	r1, #24
    1c20:	8affff61 	bhi	19ac <buzzer_handler+0x198>
    1c24:	e3800040 	orr	r0, r0, #64	; 0x40
    1c28:	eaffff60 	b	19b0 <buzzer_handler+0x19c>
		if(!SYSTEM_initialized)
		{
			buz_priority|=BU_INIT;

#ifndef MATLAB
			if(buz_cnt%100<5){buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}
    1c2c:	e1d610b0 	ldrh	r1, [r6]
    1c30:	e59f218c 	ldr	r2, [pc, #396]	; 1dc4 <buzzer_handler+0x5b0>
    1c34:	e083c192 	umull	ip, r3, r2, r1
    1c38:	e1a032a3 	lsr	r3, r3, #5
    1c3c:	e0833103 	add	r3, r3, r3, lsl #2
    1c40:	e0833103 	add	r3, r3, r3, lsl #2
    1c44:	e0411103 	sub	r1, r1, r3, lsl #2
    1c48:	e1a01801 	lsl	r1, r1, #16
    1c4c:	e1a01821 	lsr	r1, r1, #16
    1c50:	e3510004 	cmp	r1, #4

	if(buzzer_warnings&BUZZER_WARNING_INIT_BEEP)
	{
		if(!SYSTEM_initialized)
		{
			buz_priority|=BU_INIT;
    1c54:	e3855001 	orr	r5, r5, #1

#ifndef MATLAB
			if(buz_cnt%100<5){buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}
    1c58:	9a000048 	bls	1d80 <buzzer_handler+0x56c>
			else if(buz_cnt%100<10) {buz_active&=~BU_INIT; I2C1_setRGBLed(0, 0, 0);}
    1c5c:	e3510009 	cmp	r1, #9
    1c60:	9a000005 	bls	1c7c <buzzer_handler+0x468>
			else if(buz_cnt%100<15) {buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}
    1c64:	e351000e 	cmp	r1, #14
    1c68:	9a000044 	bls	1d80 <buzzer_handler+0x56c>

			#if ((__BUILD_CONFIG==0x00) || (__BUILD_CONFIG==0x02))
				else if(buz_cnt%100<30) {buz_active&=~BU_INIT; I2C1_setRGBLed(0, 0, 0);}
    1c6c:	e351001d 	cmp	r1, #29
    1c70:	9a000001 	bls	1c7c <buzzer_handler+0x468>
				else if(buz_cnt%100<35) {buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}
    1c74:	e3510022 	cmp	r1, #34	; 0x22
    1c78:	9a000040 	bls	1d80 <buzzer_handler+0x56c>
			#endif

			else {buz_active&=~BU_INIT; I2C1_setRGBLed(0, 0, 0);}
    1c7c:	e1a01000 	mov	r1, r0
    1c80:	e1a02000 	mov	r2, r0
    1c84:	e3c44001 	bic	r4, r4, #1
    1c88:	eb000c56 	bl	4de8 <I2C1_setRGBLed>
    1c8c:	eaffff54 	b	19e4 <buzzer_handler+0x1d0>
		buz_priority&=~BU_WARNING_MAG_FS;
		buz_active&=~BU_WARNING_MAG_FS;
	}

	//mag inclination warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_INCLINATION_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_inc++<400))
    1c90:	e59f3124 	ldr	r3, [pc, #292]	; 1dbc <buzzer_handler+0x5a8>
    1c94:	e5d32000 	ldrb	r2, [r3]
    1c98:	e3520000 	cmp	r2, #0
    1c9c:	0affff45 	beq	19b8 <buzzer_handler+0x1a4>
    1ca0:	e59f2124 	ldr	r2, [pc, #292]	; 1dcc <buzzer_handler+0x5b8>
    1ca4:	e1d230b0 	ldrh	r3, [r2]
    1ca8:	e3530e19 	cmp	r3, #400	; 0x190
    1cac:	e2833001 	add	r3, r3, #1
    1cb0:	e1c230b0 	strh	r3, [r2]
    1cb4:	2affff3f 	bcs	19b8 <buzzer_handler+0x1a4>
	{
		buz_priority|=BU_WARNING_MAG_INC;
		if(buz_cnt%100<5) buz_active|=BU_WARNING_MAG_INC;
    1cb8:	e1d610b0 	ldrh	r1, [r6]
    1cbc:	e59f2100 	ldr	r2, [pc, #256]	; 1dc4 <buzzer_handler+0x5b0>
    1cc0:	e083e192 	umull	lr, r3, r2, r1
    1cc4:	e1a032a3 	lsr	r3, r3, #5
    1cc8:	e0833103 	add	r3, r3, r3, lsl #2
    1ccc:	e0833103 	add	r3, r3, r3, lsl #2
    1cd0:	e0411103 	sub	r1, r1, r3, lsl #2
    1cd4:	e1a01801 	lsl	r1, r1, #16
    1cd8:	e1a01821 	lsr	r1, r1, #16
    1cdc:	e3510004 	cmp	r1, #4
	}

	//mag inclination warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_INCLINATION_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_inc++<400))
	{
		buz_priority|=BU_WARNING_MAG_INC;
    1ce0:	e38c5080 	orr	r5, ip, #128	; 0x80
		if(buz_cnt%100<5) buz_active|=BU_WARNING_MAG_INC;
    1ce4:	9a00000b 	bls	1d18 <buzzer_handler+0x504>
		else if(buz_cnt%100<10) buz_active&=~BU_WARNING_MAG_INC;
    1ce8:	e3510009 	cmp	r1, #9
    1cec:	9affff32 	bls	19bc <buzzer_handler+0x1a8>
		else if(buz_cnt%100<15) buz_active|=BU_WARNING_MAG_INC;
    1cf0:	e351000e 	cmp	r1, #14
    1cf4:	9a000007 	bls	1d18 <buzzer_handler+0x504>
		else if(buz_cnt%100<20) buz_active&=~BU_WARNING_MAG_INC;
    1cf8:	e3510013 	cmp	r1, #19
    1cfc:	9affff2e 	bls	19bc <buzzer_handler+0x1a8>
		else if(buz_cnt%100<25) buz_active|=BU_WARNING_MAG_INC;
    1d00:	e3510018 	cmp	r1, #24
    1d04:	9a000003 	bls	1d18 <buzzer_handler+0x504>
		else if(buz_cnt%100<30) buz_active&=~BU_WARNING_MAG_INC;
    1d08:	e351001d 	cmp	r1, #29
    1d0c:	9affff2a 	bls	19bc <buzzer_handler+0x1a8>
		else if(buz_cnt%100<35) buz_active|=BU_WARNING_MAG_INC;
    1d10:	e3510022 	cmp	r1, #34	; 0x22
    1d14:	8affff28 	bhi	19bc <buzzer_handler+0x1a8>
    1d18:	e3804080 	orr	r4, r0, #128	; 0x80
    1d1c:	eaffff27 	b	19c0 <buzzer_handler+0x1ac>
	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;

	//battery warning
	if(++bat_cnt==100){
		bat_cnt=0;
		bat_div=(ALARM_battery_warning_voltage_high-ALARM_battery_warning_voltage_low)/100;
    1d20:	e59f5074 	ldr	r5, [pc, #116]	; 1d9c <buzzer_handler+0x588>
    1d24:	e59fc074 	ldr	ip, [pc, #116]	; 1da0 <buzzer_handler+0x58c>
    1d28:	e1d530b0 	ldrh	r3, [r5]
    1d2c:	e1dc20b0 	ldrh	r2, [ip]
    1d30:	e59f108c 	ldr	r1, [pc, #140]	; 1dc4 <buzzer_handler+0x5b0>
    1d34:	e0623003 	rsb	r3, r2, r3
    1d38:	e0c02391 	smull	r2, r0, r1, r3
    1d3c:	e1a03fc3 	asr	r3, r3, #31
    1d40:	e59f2064 	ldr	r2, [pc, #100]	; 1dac <buzzer_handler+0x598>
    1d44:	e06332c0 	rsb	r3, r3, r0, asr #5

	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;

	//battery warning
	if(++bat_cnt==100){
		bat_cnt=0;
    1d48:	e3a01000 	mov	r1, #0
		bat_div=(ALARM_battery_warning_voltage_high-ALARM_battery_warning_voltage_low)/100;
    1d4c:	e5823000 	str	r3, [r2]

	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;

	//battery warning
	if(++bat_cnt==100){
		bat_cnt=0;
    1d50:	e5841000 	str	r1, [r4]
    1d54:	eafffec1 	b	1860 <buzzer_handler+0x4c>
	if(buzzer_warnings&BUZZER_WARNING_GPS_BEEP)
	{
		if(((GPS_Data.status&0xFF)!=3)&&(LL_1khz_attitude_data.RC_data[5]>200))	//no lock and in GPS mode
		{
			buz_priority|=BU_GPS_BEEP;
			if(buz_cnt<5) buz_active|=BU_GPS_BEEP;
    1d58:	e1d630b0 	ldrh	r3, [r6]
    1d5c:	e3530004 	cmp	r3, #4

	if(buzzer_warnings&BUZZER_WARNING_GPS_BEEP)
	{
		if(((GPS_Data.status&0xFF)!=3)&&(LL_1khz_attitude_data.RC_data[5]>200))	//no lock and in GPS mode
		{
			buz_priority|=BU_GPS_BEEP;
    1d60:	e3800c01 	orr	r0, r0, #256	; 0x100
			if(buz_cnt<5) buz_active|=BU_GPS_BEEP;
    1d64:	93811c01 	orrls	r1, r1, #256	; 0x100
			else buz_active&=~BU_GPS_BEEP;
    1d68:	83c11c01 	bichi	r1, r1, #256	; 0x100
    1d6c:	eafffee4 	b	1904 <buzzer_handler+0xf0>
    1d70:	e59f203c 	ldr	r2, [pc, #60]	; 1db4 <buzzer_handler+0x5a0>
		}
		else
		{
			buz_active&=~BU_GPS_BEEP;
    1d74:	e3c11c01 	bic	r1, r1, #256	; 0x100
			buz_priority&=~BU_GPS_BEEP;
    1d78:	e3c00c01 	bic	r0, r0, #256	; 0x100
    1d7c:	eafffee0 	b	1904 <buzzer_handler+0xf0>
			else if(buz_cnt%100<10) {buz_active&=~BU_INIT; I2C1_setRGBLed(0, 0, 0);}
			else if(buz_cnt%100<15) {buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}

			#if ((__BUILD_CONFIG==0x00) || (__BUILD_CONFIG==0x02))
				else if(buz_cnt%100<30) {buz_active&=~BU_INIT; I2C1_setRGBLed(0, 0, 0);}
				else if(buz_cnt%100<35) {buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}
    1d80:	e1a01000 	mov	r1, r0
    1d84:	e3a020ff 	mov	r2, #255	; 0xff
    1d88:	e3844001 	orr	r4, r4, #1
    1d8c:	eb000c15 	bl	4de8 <I2C1_setRGBLed>
    1d90:	eaffff13 	b	19e4 <buzzer_handler+0x1d0>
    1d94:	400009bc 	.word	0x400009bc
    1d98:	400009b8 	.word	0x400009b8
    1d9c:	40000002 	.word	0x40000002
    1da0:	40000004 	.word	0x40000004
    1da4:	400009b4 	.word	0x400009b4
    1da8:	400009b0 	.word	0x400009b0
    1dac:	40000008 	.word	0x40000008
    1db0:	40000000 	.word	0x40000000
    1db4:	400016fc 	.word	0x400016fc
    1db8:	400017b0 	.word	0x400017b0
    1dbc:	400009e0 	.word	0x400009e0
    1dc0:	400009be 	.word	0x400009be
    1dc4:	51eb851f 	.word	0x51eb851f
    1dc8:	400009c2 	.word	0x400009c2
    1dcc:	400009c0 	.word	0x400009c0

00001dd0 <generateBuildInfo>:
/*
 *  MODIFY THIS FUNCTION TO INCLUDE ALL IMPORTANT DEFINES OF A PROJECT
 */

void generateBuildInfo()
{
    1dd0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dd4:	e24dd030 	sub	sp, sp, #48	; 0x30
	char months[12][3]={"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dez"};
    1dd8:	e28d4001 	add	r4, sp, #1
    1ddc:	e59f119c 	ldr	r1, [pc, #412]	; 1f80 <generateBuildInfo+0x1b0>
    1de0:	e3a02024 	mov	r2, #36	; 0x24
    1de4:	e1a00004 	mov	r0, r4
	    char dateStr[11]=__DATE__;
    1de8:	e28d6025 	add	r6, sp, #37	; 0x25
 *  MODIFY THIS FUNCTION TO INCLUDE ALL IMPORTANT DEFINES OF A PROJECT
 */

void generateBuildInfo()
{
	char months[12][3]={"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dez"};
    1dec:	eb002e82 	bl	d7fc <__memcpy_from_arm>
	    char dateStr[11]=__DATE__;
    1df0:	e1a00006 	mov	r0, r6
    1df4:	e59f1188 	ldr	r1, [pc, #392]	; 1f84 <generateBuildInfo+0x1b4>
    1df8:	e3a0200b 	mov	r2, #11
    1dfc:	eb002e7e 	bl	d7fc <__memcpy_from_arm>
    1e00:	e59f5180 	ldr	r5, [pc, #384]	; 1f88 <generateBuildInfo+0x1b8>
    1e04:	e3a00000 	mov	r0, #0
    1e08:	e5dd7025 	ldrb	r7, [sp, #37]	; 0x25
    1e0c:	e5dde026 	ldrb	lr, [sp, #38]	; 0x26
    1e10:	e5ddc027 	ldrb	ip, [sp, #39]	; 0x27
    1e14:	e1a0a000 	mov	sl, r0
    1e18:	e1a09000 	mov	r9, r0
    1e1c:	e1a0b000 	mov	fp, r0
    1e20:	e1a08000 	mov	r8, r0
    1e24:	ea000005 	b	1e40 <generateBuildInfo+0x70>
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
	                            cnt++;
	            if (cnt==3)
    1e28:	e3510003 	cmp	r1, #3
	    int i,z;


	    m=1;

	    for (z=0;z<11;z++)
    1e2c:	e2844003 	add	r4, r4, #3
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
	                            cnt++;
	            if (cnt==3)
    1e30:	0a000010 	beq	1e78 <generateBuildInfo+0xa8>
	    int i,z;


	    m=1;

	    for (z=0;z<11;z++)
    1e34:	e2800001 	add	r0, r0, #1
    1e38:	e350000b 	cmp	r0, #11
    1e3c:	0a00000f 	beq	1e80 <generateBuildInfo+0xb0>
/*
 *  MODIFY THIS FUNCTION TO INCLUDE ALL IMPORTANT DEFINES OF A PROJECT
 */

void generateBuildInfo()
{
    1e40:	e5d43000 	ldrb	r3, [r4]

	    for (z=0;z<11;z++)
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
    1e44:	e5d42001 	ldrb	r2, [r4, #1]
/*
 *  MODIFY THIS FUNCTION TO INCLUDE ALL IMPORTANT DEFINES OF A PROJECT
 */

void generateBuildInfo()
{
    1e48:	e1530007 	cmp	r3, r7
    1e4c:	13a01000 	movne	r1, #0
    1e50:	03a01001 	moveq	r1, #1

	    for (z=0;z<11;z++)
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
    1e54:	e5d43002 	ldrb	r3, [r4, #2]
    1e58:	e152000e 	cmp	r2, lr
	                            cnt++;
    1e5c:	02811001 	addeq	r1, r1, #1

	    for (z=0;z<11;z++)
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
    1e60:	e153000c 	cmp	r3, ip
    1e64:	1affffef 	bne	1e28 <generateBuildInfo+0x58>
	                            cnt++;
    1e68:	e2811001 	add	r1, r1, #1
	            if (cnt==3)
    1e6c:	e3510003 	cmp	r1, #3
	    int i,z;


	    m=1;

	    for (z=0;z<11;z++)
    1e70:	e2844003 	add	r4, r4, #3
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
	                            cnt++;
	            if (cnt==3)
    1e74:	1affffee 	bne	1e34 <generateBuildInfo+0x64>
	            {
	                    m=z+1;
    1e78:	e2804001 	add	r4, r0, #1
    1e7c:	ea000000 	b	1e84 <generateBuildInfo+0xb4>
	    int i,z;


	    m=1;

	    for (z=0;z<11;z++)
    1e80:	e3a04001 	mov	r4, #1
    1e84:	e3a02000 	mov	r2, #0
    1e88:	e3a01030 	mov	r1, #48	; 0x30
	                    m=z+1;
	                    break;
	            }
	    }
	    for (z=0;z<11;z++)
	            if (dateStr[z]<48)
    1e8c:	e7d23006 	ldrb	r3, [r2, r6]
    1e90:	e353002f 	cmp	r3, #47	; 0x2f
	                    dateStr[z]=48;
    1e94:	97c21006 	strbls	r1, [r2, r6]
	            {
	                    m=z+1;
	                    break;
	            }
	    }
	    for (z=0;z<11;z++)
    1e98:	e2822001 	add	r2, r2, #1
    1e9c:	e352000b 	cmp	r2, #11
    1ea0:	1afffff9 	bne	1e8c <generateBuildInfo+0xbc>

	    d=(dateStr[4]-48)*10+(dateStr[5]-48);
	    y=(dateStr[7]-48)*1000+(dateStr[8]-48)*100+(dateStr[9]-48)*10+(dateStr[10]-48);


	 buildInfo.build_date=y+m*10000+d*1000000;
    1ea4:	e5dd302d 	ldrb	r3, [sp, #45]	; 0x2d
    1ea8:	e5dd102c 	ldrb	r1, [sp, #44]	; 0x2c
    1eac:	e0833103 	add	r3, r3, r3, lsl #2
    1eb0:	e5ddc029 	ldrb	ip, [sp, #41]	; 0x29
    1eb4:	e0612281 	rsb	r2, r1, r1, lsl #5
    1eb8:	e0833103 	add	r3, r3, r3, lsl #2
    1ebc:	e5dd002a 	ldrb	r0, [sp, #42]	; 0x2a
    1ec0:	e0811102 	add	r1, r1, r2, lsl #2
    1ec4:	e08cc10c 	add	ip, ip, ip, lsl #2
    1ec8:	e5dde02f 	ldrb	lr, [sp, #47]	; 0x2f
    1ecc:	e1a03103 	lsl	r3, r3, #2
    1ed0:	e5dd202e 	ldrb	r2, [sp, #46]	; 0x2e
    1ed4:	e0833181 	add	r3, r3, r1, lsl #3
    1ed8:	e080008c 	add	r0, r0, ip, lsl #1
    1edc:	e083300e 	add	r3, r3, lr
    1ee0:	e2400e21 	sub	r0, r0, #528	; 0x210
    1ee4:	e0822102 	add	r2, r2, r2, lsl #2
    1ee8:	e0833082 	add	r3, r3, r2, lsl #1
    1eec:	e0601280 	rsb	r1, r0, r0, lsl #5
    1ef0:	e0611301 	rsb	r1, r1, r1, lsl #6
    1ef4:	e2433a0d 	sub	r3, r3, #53248	; 0xd000
    1ef8:	e0642284 	rsb	r2, r4, r4, lsl #5
    1efc:	e0800181 	add	r0, r0, r1, lsl #3
    1f00:	e0842102 	add	r2, r4, r2, lsl #2
    1f04:	e2433050 	sub	r3, r3, #80	; 0x50
    1f08:	e0833300 	add	r3, r3, r0, lsl #6
    1f0c:	e0822102 	add	r2, r2, r2, lsl #2
    1f10:	e0833202 	add	r3, r3, r2, lsl #4
	 buildInfo.configuration=__BUILD_CONFIG;
	 buildInfo.build_number=0;
	 buildInfo.svn_modified=0;
	 buildInfo.svn_revision=0;
    1f14:	e3a01000 	mov	r1, #0

	    d=(dateStr[4]-48)*10+(dateStr[5]-48);
	    y=(dateStr[7]-48)*1000+(dateStr[8]-48)*100+(dateStr[9]-48)*10+(dateStr[10]-48);


	 buildInfo.build_date=y+m*10000+d*1000000;
    1f18:	e1a0e423 	lsr	lr, r3, #8
    1f1c:	e1a0c823 	lsr	ip, r3, #16
    1f20:	e1a00c23 	lsr	r0, r3, #24
    1f24:	e3a02003 	mov	r2, #3
    1f28:	e5c53004 	strb	r3, [r5, #4]
    1f2c:	e5c52000 	strb	r2, [r5]
    1f30:	e5c51011 	strb	r1, [r5, #17]
    1f34:	e5c58010 	strb	r8, [r5, #16]
    1f38:	e5c5b012 	strb	fp, [r5, #18]
    1f3c:	e5c5900b 	strb	r9, [r5, #11]
    1f40:	e5c5a00a 	strb	sl, [r5, #10]
    1f44:	e5c51009 	strb	r1, [r5, #9]
    1f48:	e5c51008 	strb	r1, [r5, #8]
    1f4c:	e5c5100f 	strb	r1, [r5, #15]
    1f50:	e5c5100e 	strb	r1, [r5, #14]
    1f54:	e5c5100d 	strb	r1, [r5, #13]
    1f58:	e5c5100c 	strb	r1, [r5, #12]
    1f5c:	e5c50007 	strb	r0, [r5, #7]
    1f60:	e5c5c006 	strb	ip, [r5, #6]
    1f64:	e5c5e005 	strb	lr, [r5, #5]
    1f68:	e5c51003 	strb	r1, [r5, #3]
    1f6c:	e5c51002 	strb	r1, [r5, #2]
    1f70:	e5c51001 	strb	r1, [r5, #1]
	 buildInfo.svn_modified=0;
	 buildInfo.svn_revision=0;
	 buildInfo.version_major=__VERSION_MAJOR;
	 buildInfo.version_minor=__VERSION_MINOR;

}
    1f74:	e28dd030 	add	sp, sp, #48	; 0x30
    1f78:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f7c:	e12fff1e 	bx	lr
    1f80:	0000d8ac 	.word	0x0000d8ac
    1f84:	0000d8a0 	.word	0x0000d8a0
    1f88:	400018d1 	.word	0x400018d1

00001f8c <RBInit>:

void UART0Debug(char *msg, int length);

void RBInit(RING_BUFFER *aBuffer)
{
	aBuffer->EOB = 0;
    1f8c:	e3a02000 	mov	r2, #0
	aBuffer->SOB = -1; //we increment first. 
    1f90:	e3e03000 	mvn	r3, #0

void UART0Debug(char *msg, int length);

void RBInit(RING_BUFFER *aBuffer)
{
	aBuffer->EOB = 0;
    1f94:	e5802000 	str	r2, [r0]
	aBuffer->SOB = -1; //we increment first. 
    1f98:	e5803004 	str	r3, [r0, #4]
	aBuffer->bytes = 0;
    1f9c:	e5c02008 	strb	r2, [r0, #8]
}
    1fa0:	e12fff1e 	bx	lr

00001fa4 <showBuffer>:
	for (i = 0; i < aBuffer->bytes; i++)
	{
		sprintf(msg, "Byte %i:%i\n\r", i, aBuffer->buffer[ aBuffer->SOB + i + 1]);
		sendText(msg);
	}
}
    1fa4:	e12fff1e 	bx	lr

00001fa8 <RBPushBack>:
			RBDequeue(aBuffer);
}

void RBPushBack(RING_BUFFER *aBuffer, char aByte)
{
	aBuffer->buffer[ aBuffer->SOB ] = aByte;
    1fa8:	e5902004 	ldr	r2, [r0, #4]
    1fac:	e0822000 	add	r2, r2, r0
    1fb0:	e2822008 	add	r2, r2, #8
		for ( i = 0; i < numToDiscard; i++)
			RBDequeue(aBuffer);
}

void RBPushBack(RING_BUFFER *aBuffer, char aByte)
{
    1fb4:	e20110ff 	and	r1, r1, #255	; 0xff
	aBuffer->buffer[ aBuffer->SOB ] = aByte;
    1fb8:	e5c21001 	strb	r1, [r2, #1]
	aBuffer->SOB--;
    1fbc:	e5903004 	ldr	r3, [r0, #4]
    1fc0:	e2433001 	sub	r3, r3, #1
    1fc4:	e5803004 	str	r3, [r0, #4]
	if ( aBuffer->SOB < 0 )
    1fc8:	e5902004 	ldr	r2, [r0, #4]
    1fcc:	e3520000 	cmp	r2, #0
		aBuffer->SOB = BUFF_LEN - 1;
    1fd0:	b3a03095 	movlt	r3, #149	; 0x95
    1fd4:	b5803004 	strlt	r3, [r0, #4]
	aBuffer->bytes++;
    1fd8:	e5d03008 	ldrb	r3, [r0, #8]
    1fdc:	e2833001 	add	r3, r3, #1
    1fe0:	e20330ff 	and	r3, r3, #255	; 0xff
    1fe4:	e5c03008 	strb	r3, [r0, #8]
}
    1fe8:	e12fff1e 	bx	lr

00001fec <RBPeek>:
char RBPeek(RING_BUFFER *aBuffer)
{
	int idxNByte;
	char aByte;
	
	if ( aBuffer->bytes == 0 )
    1fec:	e5d03008 	ldrb	r3, [r0, #8]
    1ff0:	e20330ff 	and	r3, r3, #255	; 0xff
    1ff4:	e3530000 	cmp	r3, #0
    1ff8:	0a000007 	beq	201c <RBPeek+0x30>
		return 0;
	idxNByte = aBuffer->SOB + 1;
    1ffc:	e5903004 	ldr	r3, [r0, #4]
    2000:	e2833001 	add	r3, r3, #1
	
	if ( idxNByte >= BUFF_LEN )
    2004:	e3530095 	cmp	r3, #149	; 0x95
    2008:	c3a03000 	movgt	r3, #0
		idxNByte = 0;
	aByte = aBuffer->buffer[ idxNByte ];
    200c:	e0833000 	add	r3, r3, r0
    2010:	e2833008 	add	r3, r3, #8
    2014:	e5d32001 	ldrb	r2, [r3, #1]
    2018:	e20230ff 	and	r3, r2, #255	; 0xff
	return aByte;
}
    201c:	e1a00003 	mov	r0, r3
    2020:	e12fff1e 	bx	lr

00002024 <RBfindInBuffer>:

// Searches the Ring Buffer for a specific character within searchLen characters of start.
//  Returns index if found, -1 if not.
int RBfindInBuffer(RING_BUFFER *aBuffer, int startIndex, int searchLen, unsigned char aByte)
{
    2024:	e92d4030 	push	{r4, r5, lr}
    2028:	e1a05000 	mov	r5, r0
	int x, idx;
	int hit = -1;

	idx = aBuffer->SOB + startIndex + 1;
    202c:	e5900004 	ldr	r0, [r0, #4]
    2030:	e2800001 	add	r0, r0, #1
    2034:	e0811000 	add	r1, r1, r0

	if ( idx >= BUFF_LEN )
    2038:	e3510095 	cmp	r1, #149	; 0x95
		idx = idx - BUFF_LEN;
    203c:	c2411096 	subgt	r1, r1, #150	; 0x96
	
	for (x = 0; x < searchLen && hit == -1; x++)
    2040:	e3520000 	cmp	r2, #0
}

// Searches the Ring Buffer for a specific character within searchLen characters of start.
//  Returns index if found, -1 if not.
int RBfindInBuffer(RING_BUFFER *aBuffer, int startIndex, int searchLen, unsigned char aByte)
{
    2044:	e1a0e002 	mov	lr, r2
    2048:	e20340ff 	and	r4, r3, #255	; 0xff
	idx = aBuffer->SOB + startIndex + 1;

	if ( idx >= BUFF_LEN )
		idx = idx - BUFF_LEN;
	
	for (x = 0; x < searchLen && hit == -1; x++)
    204c:	d3e00000 	mvnle	r0, #0
    2050:	da000011 	ble	209c <RBfindInBuffer+0x78>
    2054:	e3a0c000 	mov	ip, #0
    2058:	e3e00000 	mvn	r0, #0
	{			
		if ( aBuffer->buffer[idx] == aByte )
    205c:	e0813005 	add	r3, r1, r5
    2060:	e2833008 	add	r3, r3, #8
    2064:	e5d32001 	ldrb	r2, [r3, #1]
    2068:	e1520004 	cmp	r2, r4
    206c:	01a0000c 	moveq	r0, ip
	idx = aBuffer->SOB + startIndex + 1;

	if ( idx >= BUFF_LEN )
		idx = idx - BUFF_LEN;
	
	for (x = 0; x < searchLen && hit == -1; x++)
    2070:	e28cc001 	add	ip, ip, #1
    2074:	e15e000c 	cmp	lr, ip
    2078:	d3a03000 	movle	r3, #0
    207c:	c3a03001 	movgt	r3, #1
	{			
		if ( aBuffer->buffer[idx] == aByte )
			hit = x;
		idx++;	
    2080:	e2811001 	add	r1, r1, #1
	idx = aBuffer->SOB + startIndex + 1;

	if ( idx >= BUFF_LEN )
		idx = idx - BUFF_LEN;
	
	for (x = 0; x < searchLen && hit == -1; x++)
    2084:	e3700001 	cmn	r0, #1
    2088:	13a03000 	movne	r3, #0
	{			
		if ( aBuffer->buffer[idx] == aByte )
			hit = x;
		idx++;	
		if ( idx >= BUFF_LEN )
    208c:	e3510095 	cmp	r1, #149	; 0x95
    2090:	c3a01000 	movgt	r1, #0
	idx = aBuffer->SOB + startIndex + 1;

	if ( idx >= BUFF_LEN )
		idx = idx - BUFF_LEN;
	
	for (x = 0; x < searchLen && hit == -1; x++)
    2094:	e3530000 	cmp	r3, #0
    2098:	1affffef 	bne	205c <RBfindInBuffer+0x38>
		idx++;	
		if ( idx >= BUFF_LEN )
			idx = 0;
	}
	return hit; //Not found...	
}
    209c:	e8bd4030 	pop	{r4, r5, lr}
    20a0:	e12fff1e 	bx	lr

000020a4 <RBCount>:

int RBCount(RING_BUFFER *aBuffer)
{
	return aBuffer->bytes;
    20a4:	e5d00008 	ldrb	r0, [r0, #8]
}
    20a8:	e12fff1e 	bx	lr

000020ac <RBDequeue>:
	if (aBuffer->EOB >= BUFF_LEN)
		aBuffer->EOB = 0;
}

char RBDequeue(RING_BUFFER *aBuffer)
{
    20ac:	e92d4010 	push	{r4, lr}
    20b0:	e1a0c000 	mov	ip, r0
	char aByte;
	
	if ( aBuffer->bytes == 0 )
    20b4:	e5dc3008 	ldrb	r3, [ip, #8]
    20b8:	e20340ff 	and	r4, r3, #255	; 0xff
    20bc:	e3540000 	cmp	r4, #0
	{
		UART0Debug("RBDequeue: Buffer Empty!\n",25);
    20c0:	e3a01019 	mov	r1, #25
    20c4:	e59f0054 	ldr	r0, [pc, #84]	; 2120 <RBDequeue+0x74>

char RBDequeue(RING_BUFFER *aBuffer)
{
	char aByte;
	
	if ( aBuffer->bytes == 0 )
    20c8:	0a000011 	beq	2114 <RBDequeue+0x68>
		UART0Debug("RBDequeue: Buffer Empty!\n",25);
		return 0; //Empty buffer!
	}
	

	aBuffer->bytes--;
    20cc:	e5dc3008 	ldrb	r3, [ip, #8]
    20d0:	e2433001 	sub	r3, r3, #1
    20d4:	e20330ff 	and	r3, r3, #255	; 0xff
    20d8:	e5cc3008 	strb	r3, [ip, #8]
	aBuffer->SOB++;
    20dc:	e59c2004 	ldr	r2, [ip, #4]
    20e0:	e2822001 	add	r2, r2, #1
    20e4:	e58c2004 	str	r2, [ip, #4]
	if ( aBuffer->SOB >= BUFF_LEN)
    20e8:	e59c3004 	ldr	r3, [ip, #4]
    20ec:	e3530095 	cmp	r3, #149	; 0x95
		aBuffer->SOB = 0;
    20f0:	c3a03000 	movgt	r3, #0
    20f4:	c58c3004 	strgt	r3, [ip, #4]

	aByte = aBuffer->buffer[ aBuffer->SOB ];
    20f8:	e59c3004 	ldr	r3, [ip, #4]
    20fc:	e083300c 	add	r3, r3, ip
    2100:	e2833008 	add	r3, r3, #8
    2104:	e5d32001 	ldrb	r2, [r3, #1]
    2108:	e20200ff 	and	r0, r2, #255	; 0xff
	
	
	return aByte;
}
    210c:	e8bd4010 	pop	{r4, lr}
    2110:	e12fff1e 	bx	lr
{
	char aByte;
	
	if ( aBuffer->bytes == 0 )
	{
		UART0Debug("RBDequeue: Buffer Empty!\n",25);
    2114:	eb0003e4 	bl	30ac <UART0Debug>
    2118:	e1a00004 	mov	r0, r4
    211c:	eafffffa 	b	210c <RBDequeue+0x60>
    2120:	0000d8d0 	.word	0x0000d8d0

00002124 <RBDiscard>:
	
	return aByte;
}

void RBDiscard(RING_BUFFER *aBuffer, char numToDiscard)
{
    2124:	e92d4070 	push	{r4, r5, r6, lr}
	int i;
	
	if ( aBuffer->bytes <= numToDiscard )
    2128:	e5d03008 	ldrb	r3, [r0, #8]
	
	return aByte;
}

void RBDiscard(RING_BUFFER *aBuffer, char numToDiscard)
{
    212c:	e20150ff 	and	r5, r1, #255	; 0xff
	int i;
	
	if ( aBuffer->bytes <= numToDiscard )
    2130:	e1530005 	cmp	r3, r5
	
	return aByte;
}

void RBDiscard(RING_BUFFER *aBuffer, char numToDiscard)
{
    2134:	e1a06000 	mov	r6, r0
	int i;
	
	if ( aBuffer->bytes <= numToDiscard )
    2138:	9a000009 	bls	2164 <RBDiscard+0x40>
		aBuffer->bytes = 0;
		aBuffer->EOB = 0;
		aBuffer->SOB = -1;		
	}
	else
		for ( i = 0; i < numToDiscard; i++)
    213c:	e3550000 	cmp	r5, #0
	
	if ( aBuffer->bytes <= numToDiscard )
	{
		aBuffer->bytes = 0;
		aBuffer->EOB = 0;
		aBuffer->SOB = -1;		
    2140:	c3a04000 	movgt	r4, #0
	}
	else
		for ( i = 0; i < numToDiscard; i++)
    2144:	da000004 	ble	215c <RBDiscard+0x38>
    2148:	e2844001 	add	r4, r4, #1
			RBDequeue(aBuffer);
    214c:	e1a00006 	mov	r0, r6
    2150:	ebffffd5 	bl	20ac <RBDequeue>
		aBuffer->bytes = 0;
		aBuffer->EOB = 0;
		aBuffer->SOB = -1;		
	}
	else
		for ( i = 0; i < numToDiscard; i++)
    2154:	e1540005 	cmp	r4, r5
    2158:	1afffffa 	bne	2148 <RBDiscard+0x24>
			RBDequeue(aBuffer);
}
    215c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2160:	e12fff1e 	bx	lr
{
	int i;
	
	if ( aBuffer->bytes <= numToDiscard )
	{
		aBuffer->bytes = 0;
    2164:	e3a02000 	mov	r2, #0
		aBuffer->EOB = 0;
		aBuffer->SOB = -1;		
    2168:	e3e03000 	mvn	r3, #0
{
	int i;
	
	if ( aBuffer->bytes <= numToDiscard )
	{
		aBuffer->bytes = 0;
    216c:	e5c02008 	strb	r2, [r0, #8]
		aBuffer->EOB = 0;
    2170:	e5802000 	str	r2, [r0]
		aBuffer->SOB = -1;		
    2174:	e5803004 	str	r3, [r0, #4]
    2178:	eafffff7 	b	215c <RBDiscard+0x38>

0000217c <RBEnqueue>:
		sendText(msg);
	}
}
 
void RBEnqueue(RING_BUFFER *aBuffer, char x)
{
    217c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    2180:	e1a0c000 	mov	ip, r0
	if ( aBuffer->bytes >= BUFF_LEN )
    2184:	e5dc3008 	ldrb	r3, [ip, #8]
		sendText(msg);
	}
}
 
void RBEnqueue(RING_BUFFER *aBuffer, char x)
{
    2188:	e1a02001 	mov	r2, r1
	if ( aBuffer->bytes >= BUFF_LEN )
    218c:	e3530095 	cmp	r3, #149	; 0x95
	{
		UART0Debug("1Buffer FULL!\n",13);
    2190:	e59f0054 	ldr	r0, [pc, #84]	; 21ec <RBEnqueue+0x70>
    2194:	e3a0100d 	mov	r1, #13
		sendText(msg);
	}
}
 
void RBEnqueue(RING_BUFFER *aBuffer, char x)
{
    2198:	e20220ff 	and	r2, r2, #255	; 0xff
	if ( aBuffer->bytes >= BUFF_LEN )
    219c:	8a000010 	bhi	21e4 <RBEnqueue+0x68>
	{
		UART0Debug("1Buffer FULL!\n",13);
		return;
	}
	aBuffer->buffer[ aBuffer->EOB ] = x;
    21a0:	e59c3000 	ldr	r3, [ip]
    21a4:	e083300c 	add	r3, r3, ip
    21a8:	e2833008 	add	r3, r3, #8
    21ac:	e5c32001 	strb	r2, [r3, #1]
	aBuffer->EOB++;
    21b0:	e59c2000 	ldr	r2, [ip]
    21b4:	e2822001 	add	r2, r2, #1
    21b8:	e58c2000 	str	r2, [ip]
	aBuffer->bytes++;
    21bc:	e5dc3008 	ldrb	r3, [ip, #8]
    21c0:	e2833001 	add	r3, r3, #1
    21c4:	e20330ff 	and	r3, r3, #255	; 0xff
    21c8:	e5cc3008 	strb	r3, [ip, #8]
	if (aBuffer->EOB >= BUFF_LEN)
    21cc:	e59c2000 	ldr	r2, [ip]
    21d0:	e3520095 	cmp	r2, #149	; 0x95
		aBuffer->EOB = 0;
    21d4:	c3a03000 	movgt	r3, #0
    21d8:	c58c3000 	strgt	r3, [ip]
}
    21dc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    21e0:	e12fff1e 	bx	lr
 
void RBEnqueue(RING_BUFFER *aBuffer, char x)
{
	if ( aBuffer->bytes >= BUFF_LEN )
	{
		UART0Debug("1Buffer FULL!\n",13);
    21e4:	eb0003b0 	bl	30ac <UART0Debug>
    21e8:	eafffffb 	b	21dc <RBEnqueue+0x60>
    21ec:	0000d8ec 	.word	0x0000d8ec

000021f0 <findInBuffer>:

// Searches the buffer, starting at startIndex, for aByte.
//  Returns the index in the buffer (from 0) the byte first occurs at.
//  Returns -1 if there is no occurrence.
int findInBuffer(int startIndex, int distance, char aByte)
{
    21f0:	e1a03002 	mov	r3, r2
    21f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    21f8:	e1a02001 	mov	r2, r1
    21fc:	e20330ff 	and	r3, r3, #255	; 0xff
	return RBfindInBuffer(&u0r, startIndex, distance, aByte); 
    2200:	e1a01000 	mov	r1, r0
    2204:	e59f0008 	ldr	r0, [pc, #8]	; 2214 <findInBuffer+0x24>
    2208:	ebffff85 	bl	2024 <RBfindInBuffer>
}
    220c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    2210:	e12fff1e 	bx	lr
    2214:	400019f4 	.word	0x400019f4

00002218 <peekByte>:
}

// peekByte
//  Returns the next byte in the buffer w/o consuming it.
char peekByte()
{
    2218:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	return RBPeek(&u0r);
    221c:	e59f0008 	ldr	r0, [pc, #8]	; 222c <peekByte+0x14>
    2220:	ebffff71 	bl	1fec <RBPeek>
}
    2224:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    2228:	e12fff1e 	bx	lr
    222c:	400019f4 	.word	0x400019f4

00002230 <skipBytes>:
}

// skipBytes
//	Discard num bytes in the buffer.
int skipBytes(int num)
{
    2230:	e92d4010 	push	{r4, lr}
	RBDiscard(&u0r, num);
    2234:	e59f4018 	ldr	r4, [pc, #24]	; 2254 <skipBytes+0x24>
    2238:	e20010ff 	and	r1, r0, #255	; 0xff
    223c:	e1a00004 	mov	r0, r4
    2240:	ebffffb7 	bl	2124 <RBDiscard>
	return RBCount(&u0r);
    2244:	e1a00004 	mov	r0, r4
    2248:	ebffff95 	bl	20a4 <RBCount>
}
    224c:	e8bd4010 	pop	{r4, lr}
    2250:	e12fff1e 	bx	lr
    2254:	400019f4 	.word	0x400019f4

00002258 <bytesAvailable>:
		RBEnqueue(&u0s,*msg++);
	uart0Prime();
}

char bytesAvailable(void)
{
    2258:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	return RBCount(&u0r); //Groups of 4...
    225c:	e59f000c 	ldr	r0, [pc, #12]	; 2270 <bytesAvailable+0x18>
    2260:	ebffff8f 	bl	20a4 <RBCount>
    2264:	e20000ff 	and	r0, r0, #255	; 0xff
}
    2268:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    226c:	e12fff1e 	bx	lr
    2270:	400019f4 	.word	0x400019f4

00002274 <pushBack>:
		*buffer = getByte();
}

// Pushes a byte back onto the Ring Buffer.
void pushBack(char byte)
{
    2274:	e20010ff 	and	r1, r0, #255	; 0xff
    2278:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	RBPushBack(&u0r, byte);
    227c:	e59f0008 	ldr	r0, [pc, #8]	; 228c <pushBack+0x18>
    2280:	ebffff48 	bl	1fa8 <RBPushBack>
}
    2284:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    2288:	e12fff1e 	bx	lr
    228c:	400019f4 	.word	0x400019f4

00002290 <sendText>:
	for (c = 0; c < num; c++)
		UART0WriteChar(bytes[c]);
}

void sendText(char *msg)
{
    2290:	e92d4010 	push	{r4, lr}
	while (*msg)
    2294:	e5d01000 	ldrb	r1, [r0]
    2298:	e3510000 	cmp	r1, #0
    229c:	0a000005 	beq	22b8 <sendText+0x28>
    22a0:	e1a04000 	mov	r4, r0
		RBEnqueue(&u0s,*msg++);
    22a4:	e59f0018 	ldr	r0, [pc, #24]	; 22c4 <sendText+0x34>
    22a8:	ebffffb3 	bl	217c <RBEnqueue>
		UART0WriteChar(bytes[c]);
}

void sendText(char *msg)
{
	while (*msg)
    22ac:	e5f41001 	ldrb	r1, [r4, #1]!
    22b0:	e3510000 	cmp	r1, #0
    22b4:	1afffffa 	bne	22a4 <sendText+0x14>
		RBEnqueue(&u0s,*msg++);
	uart0Prime();
    22b8:	eb0003b4 	bl	3190 <uart0Prime>
}
    22bc:	e8bd4010 	pop	{r4, lr}
    22c0:	e12fff1e 	bx	lr
    22c4:	40001a94 	.word	0x40001a94

000022c8 <debugMsg>:
	return RBfindInBuffer(&u0r, startIndex, distance, aByte); 
}

void debugMsg(char *func, char *msg)
{
	if (!DEBUG_ENABLED)
    22c8:	e59f3048 	ldr	r3, [pc, #72]	; 2318 <debugMsg+0x50>
    22cc:	e5932000 	ldr	r2, [r3]
    22d0:	e3520000 	cmp	r2, #0
{
	return RBfindInBuffer(&u0r, startIndex, distance, aByte); 
}

void debugMsg(char *func, char *msg)
{
    22d4:	e92d4030 	push	{r4, r5, lr}
    22d8:	e1a04000 	mov	r4, r0
    22dc:	e1a05001 	mov	r5, r1
	if (!DEBUG_ENABLED)
		return;
	sendText("DEBUG:");
    22e0:	e59f0034 	ldr	r0, [pc, #52]	; 231c <debugMsg+0x54>
	return RBfindInBuffer(&u0r, startIndex, distance, aByte); 
}

void debugMsg(char *func, char *msg)
{
	if (!DEBUG_ENABLED)
    22e4:	1a000001 	bne	22f0 <debugMsg+0x28>
	sendText("DEBUG:");
	sendText(func);
	sendText(":");
	sendText(msg);
	sendText("\n");
}
    22e8:	e8bd4030 	pop	{r4, r5, lr}
    22ec:	e12fff1e 	bx	lr

void debugMsg(char *func, char *msg)
{
	if (!DEBUG_ENABLED)
		return;
	sendText("DEBUG:");
    22f0:	ebffffe6 	bl	2290 <sendText>
	sendText(func);
    22f4:	e1a00004 	mov	r0, r4
    22f8:	ebffffe4 	bl	2290 <sendText>
	sendText(":");
    22fc:	e59f001c 	ldr	r0, [pc, #28]	; 2320 <debugMsg+0x58>
    2300:	ebffffe2 	bl	2290 <sendText>
	sendText(msg);
    2304:	e1a00005 	mov	r0, r5
    2308:	ebffffe0 	bl	2290 <sendText>
	sendText("\n");
    230c:	e59f0010 	ldr	r0, [pc, #16]	; 2324 <debugMsg+0x5c>
}
    2310:	e8bd4030 	pop	{r4, r5, lr}
		return;
	sendText("DEBUG:");
	sendText(func);
	sendText(":");
	sendText(msg);
	sendText("\n");
    2314:	eaffffdd 	b	2290 <sendText>
    2318:	400009c4 	.word	0x400009c4
    231c:	0000d8fc 	.word	0x0000d8fc
    2320:	0000d904 	.word	0x0000d904
    2324:	0000d908 	.word	0x0000d908

00002328 <sendNBytes>:
	UART0WriteChar(aByte);
	RBEnqueue(&u0s, aByte);
}

void sendNBytes(char *bytes, int num)
{
    2328:	e92d4070 	push	{r4, r5, r6, lr}
	int c;

	for (c = 0; c < num; c++)
    232c:	e2516000 	subs	r6, r1, #0
	UART0WriteChar(aByte);
	RBEnqueue(&u0s, aByte);
}

void sendNBytes(char *bytes, int num)
{
    2330:	e1a05000 	mov	r5, r0
	int c;

	for (c = 0; c < num; c++)
    2334:	da000005 	ble	2350 <sendNBytes+0x28>
    2338:	e3a04000 	mov	r4, #0
		UART0WriteChar(bytes[c]);
    233c:	e7d40005 	ldrb	r0, [r4, r5]

void sendNBytes(char *bytes, int num)
{
	int c;

	for (c = 0; c < num; c++)
    2340:	e2844001 	add	r4, r4, #1
		UART0WriteChar(bytes[c]);
    2344:	eb000377 	bl	3128 <UART0WriteChar>

void sendNBytes(char *bytes, int num)
{
	int c;

	for (c = 0; c < num; c++)
    2348:	e1560004 	cmp	r6, r4
    234c:	1afffffa 	bne	233c <sendNBytes+0x14>
		UART0WriteChar(bytes[c]);
}
    2350:	e8bd4070 	pop	{r4, r5, r6, lr}
    2354:	e12fff1e 	bx	lr

00002358 <sendByte>:
{
	showBuffer(&u0r);
}

void sendByte(char aByte)
{
    2358:	e92d4010 	push	{r4, lr}
    235c:	e20040ff 	and	r4, r0, #255	; 0xff
	UART0WriteChar(aByte);
    2360:	e1a00004 	mov	r0, r4
    2364:	eb00036f 	bl	3128 <UART0WriteChar>
	RBEnqueue(&u0s, aByte);
    2368:	e1a01004 	mov	r1, r4
    236c:	e59f0008 	ldr	r0, [pc, #8]	; 237c <sendByte+0x24>
    2370:	ebffff81 	bl	217c <RBEnqueue>
}
    2374:	e8bd4010 	pop	{r4, lr}
    2378:	e12fff1e 	bx	lr
    237c:	40001a94 	.word	0x40001a94

00002380 <getByte>:
{
	return RBCount(&u0r); //Groups of 4...
}

char getByte(void)
{
    2380:	e92d4010 	push	{r4, lr}
	char aByte;

	if ( !RBCount(&u0r) )
    2384:	e59f0040 	ldr	r0, [pc, #64]	; 23cc <getByte+0x4c>
    2388:	ebffff45 	bl	20a4 <RBCount>
    238c:	e2503000 	subs	r3, r0, #0
    2390:	e1a04003 	mov	r4, r3
		return 0;

 	aByte = RBDequeue(&u0r);
    2394:	e59f0030 	ldr	r0, [pc, #48]	; 23cc <getByte+0x4c>

char getByte(void)
{
	char aByte;

	if ( !RBCount(&u0r) )
    2398:	1a000002 	bne	23a8 <getByte+0x28>

	if (ECHOMODE)
		sendByte(aByte);

	return aByte;
}
    239c:	e1a00004 	mov	r0, r4
    23a0:	e8bd4010 	pop	{r4, lr}
    23a4:	e12fff1e 	bx	lr
	char aByte;

	if ( !RBCount(&u0r) )
		return 0;

 	aByte = RBDequeue(&u0r);
    23a8:	ebffff3f 	bl	20ac <RBDequeue>

	if (ECHOMODE)
    23ac:	e59f301c 	ldr	r3, [pc, #28]	; 23d0 <getByte+0x50>
    23b0:	e5932000 	ldr	r2, [r3]
    23b4:	e3520000 	cmp	r2, #0
    23b8:	e1a04000 	mov	r4, r0
    23bc:	0afffff6 	beq	239c <getByte+0x1c>
		sendByte(aByte);
    23c0:	e1a04000 	mov	r4, r0
    23c4:	ebffffe3 	bl	2358 <sendByte>
    23c8:	eafffff3 	b	239c <getByte+0x1c>
    23cc:	400019f4 	.word	0x400019f4
    23d0:	400009c8 	.word	0x400009c8

000023d4 <getBytes>:

	return aByte;
}

void getBytes(char *buffer, int num)
{
    23d4:	e92d4030 	push	{r4, r5, lr}
	for (; num; num--, buffer++)
    23d8:	e2514000 	subs	r4, r1, #0

	return aByte;
}

void getBytes(char *buffer, int num)
{
    23dc:	e1a05000 	mov	r5, r0
	for (; num; num--, buffer++)
    23e0:	0a000003 	beq	23f4 <getBytes+0x20>
		*buffer = getByte();
    23e4:	ebffffe5 	bl	2380 <getByte>
	return aByte;
}

void getBytes(char *buffer, int num)
{
	for (; num; num--, buffer++)
    23e8:	e2544001 	subs	r4, r4, #1
		*buffer = getByte();
    23ec:	e4c50001 	strb	r0, [r5], #1
	return aByte;
}

void getBytes(char *buffer, int num)
{
	for (; num; num--, buffer++)
    23f0:	1afffffb 	bne	23e4 <getBytes+0x10>
		*buffer = getByte();
}
    23f4:	e8bd4030 	pop	{r4, r5, lr}
    23f8:	e12fff1e 	bx	lr

000023fc <showRBuffer>:

int DEBUG_ENABLED = FALSE; //Debug mode off.
int ECHOMODE = FALSE; // Don't echo.

void showRBuffer(void)
{
    23fc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	showBuffer(&u0r);
    2400:	e59f0008 	ldr	r0, [pc, #8]	; 2410 <showRBuffer+0x14>
    2404:	ebfffee6 	bl	1fa4 <showBuffer>
}
    2408:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    240c:	e12fff1e 	bx	lr
    2410:	400019f4 	.word	0x400019f4

00002414 <timer0ISR>:

extern char updated;
char newvals = 0;

void timer0ISR(void) __irq
{
    2414:	e1a0c00d 	mov	ip, sp
    2418:	e92dd800 	push	{fp, ip, lr, pc}
    241c:	e24cb004 	sub	fp, ip, #4
  T0IR = 0x01;      //Clear the timer 0 interrupt
    2420:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2424:	e2833901 	add	r3, r3, #16384	; 0x4000
    2428:	e3a02001 	mov	r2, #1
    242c:	e5832000 	str	r2, [r3]
  IENABLE;

  // Performance Counter
  trigger_cnt++;
    2430:	e59f30b4 	ldr	r3, [pc, #180]	; 24ec <timer0ISR+0xd8>
    2434:	e5933000 	ldr	r3, [r3]
    2438:	e2832001 	add	r2, r3, #1
    243c:	e59f30a8 	ldr	r3, [pc, #168]	; 24ec <timer0ISR+0xd8>
    2440:	e5832000 	str	r2, [r3]
  if (trigger_cnt == ControllerCyclesPerSecond)
    2444:	e59f30a0 	ldr	r3, [pc, #160]	; 24ec <timer0ISR+0xd8>
    2448:	e5933000 	ldr	r3, [r3]
    244c:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    2450:	1a000012 	bne	24a0 <timer0ISR+0x8c>
  {
  	trigger_cnt = 0;
    2454:	e59f2090 	ldr	r2, [pc, #144]	; 24ec <timer0ISR+0xd8>
    2458:	e3a03000 	mov	r3, #0
    245c:	e5823000 	str	r3, [r2]
  	HL_Status.up_time++;
    2460:	e59f3088 	ldr	r3, [pc, #136]	; 24f0 <timer0ISR+0xdc>
    2464:	e1d330b4 	ldrh	r3, [r3, #4]
    2468:	e2833001 	add	r3, r3, #1
    246c:	e1a03803 	lsl	r3, r3, #16
    2470:	e1a02823 	lsr	r2, r3, #16
    2474:	e59f3074 	ldr	r3, [pc, #116]	; 24f0 <timer0ISR+0xdc>
    2478:	e1c320b4 	strh	r2, [r3, #4]
  	HL_Status.cpu_load = mainloop_cnt;
    247c:	e59f3070 	ldr	r3, [pc, #112]	; 24f4 <timer0ISR+0xe0>
    2480:	e5933000 	ldr	r3, [r3]
    2484:	e1a03803 	lsl	r3, r3, #16
    2488:	e1a02823 	lsr	r2, r3, #16
    248c:	e59f305c 	ldr	r3, [pc, #92]	; 24f0 <timer0ISR+0xdc>
    2490:	e1c321b2 	strh	r2, [r3, #18]

  	mainloop_cnt = 0;
    2494:	e59f2058 	ldr	r2, [pc, #88]	; 24f4 <timer0ISR+0xe0>
    2498:	e3a03000 	mov	r3, #0
    249c:	e5823000 	str	r3, [r2]
  }

  if ( mainloop_trigger < 10 ) 
    24a0:	e59f3050 	ldr	r3, [pc, #80]	; 24f8 <timer0ISR+0xe4>
    24a4:	e5d33000 	ldrb	r3, [r3]
    24a8:	e20330ff 	and	r3, r3, #255	; 0xff
    24ac:	e3530009 	cmp	r3, #9
    24b0:	8a000006 	bhi	24d0 <timer0ISR+0xbc>
    mainloop_trigger++;
    24b4:	e59f303c 	ldr	r3, [pc, #60]	; 24f8 <timer0ISR+0xe4>
    24b8:	e5d33000 	ldrb	r3, [r3]
    24bc:	e20330ff 	and	r3, r3, #255	; 0xff
    24c0:	e2833001 	add	r3, r3, #1
    24c4:	e20330ff 	and	r3, r3, #255	; 0xff
    24c8:	e59f2028 	ldr	r2, [pc, #40]	; 24f8 <timer0ISR+0xe4>
    24cc:	e5c23000 	strb	r3, [r2]

  IDISABLE;
  VICVectAddr = 0;		// Acknowledge Interrupt
    24d0:	e3a03000 	mov	r3, #0
    24d4:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    24d8:	e3a02000 	mov	r2, #0
    24dc:	e5832000 	str	r2, [r3]
}
    24e0:	e24bd00c 	sub	sp, fp, #12
    24e4:	e89d6800 	ldm	sp, {fp, sp, lr}
    24e8:	e12fff1e 	bx	lr
    24ec:	400009dc 	.word	0x400009dc
    24f0:	40001980 	.word	0x40001980
    24f4:	400009d4 	.word	0x400009d4
    24f8:	400009d8 	.word	0x400009d8

000024fc <main>:

/**********************************************************
                       MAIN
**********************************************************/
int	main (void) {
    24fc:	e1a0c00d 	mov	ip, sp
    2500:	e92dd800 	push	{fp, ip, lr, pc}
    2504:	e24cb004 	sub	fp, ip, #4
    2508:	e24dd00c 	sub	sp, sp, #12

  static int vbat1; //battery_voltage (lowpass-filtered)
  unsigned int TimerT1, TimerT2;

  init(); //system.c
    250c:	eb0000fb 	bl	2900 <init>
  buzzer(OFF);
    2510:	e3a00000 	mov	r0, #0
    2514:	ebfffcb4 	bl	17ec <buzzer>
  LL_write_init();
    2518:	eb000cdf 	bl	589c <LL_write_init>

  //initialize AscTec Firefly LED fin on I2C1 (not necessary on AscTec Hummingbird or Pelican)
  I2C1Init();
    251c:	eb000a72 	bl	4eec <I2C1Init>
  I2C1_setRGBLed(255,0,0);
    2520:	e3a000ff 	mov	r0, #255	; 0xff
    2524:	e3a01000 	mov	r1, #0
    2528:	e3a02000 	mov	r2, #0
    252c:	eb000a2d 	bl	4de8 <I2C1_setRGBLed>

  ADC0triggerSampling( 1<<VOLTAGE_1); //activate ADC sampling
    2530:	e3a00004 	mov	r0, #4
    2534:	eb000c1a 	bl	55a4 <ADC0triggerSampling>

  generateBuildInfo();
    2538:	ebfffe24 	bl	1dd0 <generateBuildInfo>

  HL_Status.up_time = 0;
    253c:	e59f32b4 	ldr	r3, [pc, #692]	; 27f8 <main+0x2fc>
    2540:	e3a02000 	mov	r2, #0
    2544:	e1c320b4 	strh	r2, [r3, #4]
    2548:	eaffffff 	b	254c <main+0x50>
  //update parameters stored by ACI:
  //...

  while(1)
  {
	if (mainloop_trigger)
    254c:	e59f32a8 	ldr	r3, [pc, #680]	; 27fc <main+0x300>
    2550:	e5d33000 	ldrb	r3, [r3]
    2554:	e20330ff 	and	r3, r3, #255	; 0xff
    2558:	e3530000 	cmp	r3, #0
    255c:	0afffffa 	beq	254c <main+0x50>
	{
		TimerT1 =  T0TC;
    2560:	e3a03901 	mov	r3, #16384	; 0x4000
    2564:	e283328e 	add	r3, r3, #-536870904	; 0xe0000008
    2568:	e5933000 	ldr	r3, [r3]
    256c:	e50b3014 	str	r3, [fp, #-20]

		//battery monitoring
		ADC0getSamplingResults(0xFF,adcChannelValues);
    2570:	e3a000ff 	mov	r0, #255	; 0xff
    2574:	e59f1284 	ldr	r1, [pc, #644]	; 2800 <main+0x304>
    2578:	eb000c1a 	bl	55e8 <ADC0getSamplingResults>
        vbat1=(vbat1*14+(adcChannelValues[VOLTAGE_1]*9872/579))/15;	//voltage in mV
    257c:	e59f3280 	ldr	r3, [pc, #640]	; 2804 <main+0x308>
    2580:	e5932000 	ldr	r2, [r3]
    2584:	e1a03002 	mov	r3, r2
    2588:	e1a03183 	lsl	r3, r3, #3
    258c:	e0623003 	rsb	r3, r2, r3
    2590:	e1a03083 	lsl	r3, r3, #1
    2594:	e1a00003 	mov	r0, r3
    2598:	e59f3260 	ldr	r3, [pc, #608]	; 2800 <main+0x304>
    259c:	e5931008 	ldr	r1, [r3, #8]
    25a0:	e1a02001 	mov	r2, r1
    25a4:	e1a02102 	lsl	r2, r2, #2
    25a8:	e0822001 	add	r2, r2, r1
    25ac:	e1a02082 	lsl	r2, r2, #1
    25b0:	e0822001 	add	r2, r2, r1
    25b4:	e1a03182 	lsl	r3, r2, #3
    25b8:	e0623003 	rsb	r3, r2, r3
    25bc:	e1a03183 	lsl	r3, r3, #3
    25c0:	e0833001 	add	r3, r3, r1
    25c4:	e1a03203 	lsl	r3, r3, #4
    25c8:	e1a02003 	mov	r2, r3
    25cc:	e3a032be 	mov	r3, #-536870901	; 0xe000000b
    25d0:	e2833626 	add	r3, r3, #39845888	; 0x2600000
    25d4:	e2833c63 	add	r3, r3, #25344	; 0x6300
    25d8:	e0831392 	umull	r1, r3, r2, r3
    25dc:	e1a034a3 	lsr	r3, r3, #9
    25e0:	e0802003 	add	r2, r0, r3
    25e4:	e59f321c 	ldr	r3, [pc, #540]	; 2808 <main+0x30c>
    25e8:	e0831392 	umull	r1, r3, r2, r3
    25ec:	e1a031a3 	lsr	r3, r3, #3
    25f0:	e1a02003 	mov	r2, r3
    25f4:	e59f3208 	ldr	r3, [pc, #520]	; 2804 <main+0x308>
    25f8:	e5832000 	str	r2, [r3]
	HL_Status.battery_voltage_1 = vbat1;
    25fc:	e59f3200 	ldr	r3, [pc, #512]	; 2804 <main+0x308>
    2600:	e5933000 	ldr	r3, [r3]
    2604:	e1a03803 	lsl	r3, r3, #16
    2608:	e1a02823 	lsr	r2, r3, #16
    260c:	e59f31e4 	ldr	r3, [pc, #484]	; 27f8 <main+0x2fc>
    2610:	e1c320b0 	strh	r2, [r3]
		
        mainloop_cnt++;
    2614:	e59f31f0 	ldr	r3, [pc, #496]	; 280c <main+0x310>
    2618:	e5933000 	ldr	r3, [r3]
    261c:	e2832001 	add	r2, r3, #1
    2620:	e59f31e4 	ldr	r3, [pc, #484]	; 280c <main+0x310>
    2624:	e5832000 	str	r2, [r3]
	if (!(mainloop_cnt % 10)) 
    2628:	e59f31dc 	ldr	r3, [pc, #476]	; 280c <main+0x310>
    262c:	e5932000 	ldr	r2, [r3]
    2630:	e59f31d8 	ldr	r3, [pc, #472]	; 2810 <main+0x314>
    2634:	e0831392 	umull	r1, r3, r2, r3
    2638:	e1a031a3 	lsr	r3, r3, #3
    263c:	e50b3018 	str	r3, [fp, #-24]
    2640:	e51b3018 	ldr	r3, [fp, #-24]
    2644:	e1a03103 	lsl	r3, r3, #2
    2648:	e51b1018 	ldr	r1, [fp, #-24]
    264c:	e0833001 	add	r3, r3, r1
    2650:	e1a03083 	lsl	r3, r3, #1
    2654:	e0632002 	rsb	r2, r3, r2
    2658:	e50b2018 	str	r2, [fp, #-24]
    265c:	e51b3018 	ldr	r3, [fp, #-24]
    2660:	e3530000 	cmp	r3, #0
    2664:	1a000005 	bne	2680 <main+0x184>
        	buzzer_handler(HL_Status.battery_voltage_1);
    2668:	e59f3188 	ldr	r3, [pc, #392]	; 27f8 <main+0x2fc>
    266c:	e1d330b0 	ldrh	r3, [r3]
    2670:	e1a03803 	lsl	r3, r3, #16
    2674:	e1a03843 	asr	r3, r3, #16
    2678:	e1a00003 	mov	r0, r3
    267c:	ebfffc64 	bl	1814 <buzzer_handler>

        if (mainloop_trigger) 
    2680:	e59f3174 	ldr	r3, [pc, #372]	; 27fc <main+0x300>
    2684:	e5d33000 	ldrb	r3, [r3]
    2688:	e20330ff 	and	r3, r3, #255	; 0xff
    268c:	e3530000 	cmp	r3, #0
    2690:	0a000006 	beq	26b0 <main+0x1b4>
		mainloop_trigger--;
    2694:	e59f3160 	ldr	r3, [pc, #352]	; 27fc <main+0x300>
    2698:	e5d33000 	ldrb	r3, [r3]
    269c:	e20330ff 	and	r3, r3, #255	; 0xff
    26a0:	e2433001 	sub	r3, r3, #1
    26a4:	e20330ff 	and	r3, r3, #255	; 0xff
    26a8:	e59f214c 	ldr	r2, [pc, #332]	; 27fc <main+0x300>
    26ac:	e5c23000 	strb	r3, [r2]
		  
        LED(1,ON);
    26b0:	e3a00001 	mov	r0, #1
    26b4:	e3a01001 	mov	r1, #1
    26b8:	eb000056 	bl	2818 <LED>
        SDK_mainloop(); //1000 times per second.
    26bc:	ebfffc19 	bl	1728 <SDK_mainloop>
        LED(1,OFF);
    26c0:	e3a00001 	mov	r0, #1
    26c4:	e3a01000 	mov	r1, #0
    26c8:	eb000052 	bl	2818 <LED>

        // CPU Usage calculation
        TimerT2 = T0TC;
    26cc:	e3a03901 	mov	r3, #16384	; 0x4000
    26d0:	e283328e 	add	r3, r3, #-536870904	; 0xe0000008
    26d4:	e5933000 	ldr	r3, [r3]
    26d8:	e50b3010 	str	r3, [fp, #-16]
        if ( mainloop_trigger)
    26dc:	e59f3118 	ldr	r3, [pc, #280]	; 27fc <main+0x300>
    26e0:	e5d33000 	ldrb	r3, [r3]
    26e4:	e20330ff 	and	r3, r3, #255	; 0xff
    26e8:	e3530000 	cmp	r3, #0
    26ec:	0a00000a 	beq	271c <main+0x220>
        {
        	HL_Status.cpu_load = 1000;
    26f0:	e59f2100 	ldr	r2, [pc, #256]	; 27f8 <main+0x2fc>
    26f4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    26f8:	e1c231b2 	strh	r3, [r2, #18]
        	mainloop_overflows++;
    26fc:	e59f3110 	ldr	r3, [pc, #272]	; 2814 <main+0x318>
    2700:	e1d330b0 	ldrh	r3, [r3]
    2704:	e2833001 	add	r3, r3, #1
    2708:	e1a03803 	lsl	r3, r3, #16
    270c:	e1a02823 	lsr	r2, r3, #16
    2710:	e59f30fc 	ldr	r3, [pc, #252]	; 2814 <main+0x318>
    2714:	e1c320b0 	strh	r2, [r3]
    2718:	eaffff8b 	b	254c <main+0x50>
        }
        else
		if (TimerT2 < TimerT1)
    271c:	e51b2010 	ldr	r2, [fp, #-16]
    2720:	e51b3014 	ldr	r3, [fp, #-20]
    2724:	e1520003 	cmp	r2, r3
    2728:	2a00001b 	bcs	279c <main+0x2a0>
        		HL_Status.cpu_load = (T0MR0 - TimerT1 + TimerT2)*1000/T0MR0; // load = "timer cycles" / "timer cycles per controller cycle" * 1000
    272c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2730:	e2833901 	add	r3, r3, #16384	; 0x4000
    2734:	e2833018 	add	r3, r3, #24
    2738:	e5932000 	ldr	r2, [r3]
    273c:	e51b3014 	ldr	r3, [fp, #-20]
    2740:	e0632002 	rsb	r2, r3, r2
    2744:	e51b3010 	ldr	r3, [fp, #-16]
    2748:	e0822003 	add	r2, r2, r3
    274c:	e1a03002 	mov	r3, r2
    2750:	e1a03283 	lsl	r3, r3, #5
    2754:	e0623003 	rsb	r3, r2, r3
    2758:	e1a03103 	lsl	r3, r3, #2
    275c:	e0833002 	add	r3, r3, r2
    2760:	e1a03183 	lsl	r3, r3, #3
    2764:	e1a02003 	mov	r2, r3
    2768:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    276c:	e2833901 	add	r3, r3, #16384	; 0x4000
    2770:	e2833018 	add	r3, r3, #24
    2774:	e5933000 	ldr	r3, [r3]
    2778:	e1a00002 	mov	r0, r2
    277c:	e1a01003 	mov	r1, r3
    2780:	eb002c26 	bl	d820 <____udivsi3_from_arm>
    2784:	e1a03000 	mov	r3, r0
    2788:	e1a03803 	lsl	r3, r3, #16
    278c:	e1a02823 	lsr	r2, r3, #16
    2790:	e59f3060 	ldr	r3, [pc, #96]	; 27f8 <main+0x2fc>
    2794:	e1c321b2 	strh	r2, [r3, #18]
    2798:	eaffff6b 	b	254c <main+0x50>
        	else
        		HL_Status.cpu_load = (TimerT2 - TimerT1)*1000/T0MR0; // load = "timer cycles" / "timer cycles per controller cycle" * 1000
    279c:	e51b2010 	ldr	r2, [fp, #-16]
    27a0:	e51b3014 	ldr	r3, [fp, #-20]
    27a4:	e0632002 	rsb	r2, r3, r2
    27a8:	e1a03002 	mov	r3, r2
    27ac:	e1a03283 	lsl	r3, r3, #5
    27b0:	e0623003 	rsb	r3, r2, r3
    27b4:	e1a03103 	lsl	r3, r3, #2
    27b8:	e0833002 	add	r3, r3, r2
    27bc:	e1a03183 	lsl	r3, r3, #3
    27c0:	e1a02003 	mov	r2, r3
    27c4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    27c8:	e2833901 	add	r3, r3, #16384	; 0x4000
    27cc:	e2833018 	add	r3, r3, #24
    27d0:	e5933000 	ldr	r3, [r3]
    27d4:	e1a00002 	mov	r0, r2
    27d8:	e1a01003 	mov	r1, r3
    27dc:	eb002c0f 	bl	d820 <____udivsi3_from_arm>
    27e0:	e1a03000 	mov	r3, r0
    27e4:	e1a03803 	lsl	r3, r3, #16
    27e8:	e1a02823 	lsr	r2, r3, #16
    27ec:	e59f3004 	ldr	r3, [pc, #4]	; 27f8 <main+0x2fc>
    27f0:	e1c321b2 	strh	r2, [r3, #18]
      }
  }
    27f4:	eaffff54 	b	254c <main+0x50>
    27f8:	40001980 	.word	0x40001980
    27fc:	400009d8 	.word	0x400009d8
    2800:	40001c38 	.word	0x40001c38
    2804:	400009e8 	.word	0x400009e8
    2808:	88888889 	.word	0x88888889
    280c:	400009d4 	.word	0x400009d4
    2810:	cccccccd 	.word	0xcccccccd
    2814:	400009e2 	.word	0x400009e2

00002818 <LED>:
#include "hardware.h"
#include "irq.h"


void LED(unsigned char nr, unsigned char onoff) //set or reset LED 0..3
{
    2818:	e1a0c00d 	mov	ip, sp
    281c:	e92dd800 	push	{fp, ip, lr, pc}
    2820:	e24cb004 	sub	fp, ip, #4
    2824:	e24dd008 	sub	sp, sp, #8
    2828:	e1a03000 	mov	r3, r0
    282c:	e1a02001 	mov	r2, r1
    2830:	e54b3010 	strb	r3, [fp, #-16]
    2834:	e1a03002 	mov	r3, r2
    2838:	e54b3014 	strb	r3, [fp, #-20]
  if (nr>=2)
    283c:	e55b3010 	ldrb	r3, [fp, #-16]
    2840:	e3530001 	cmp	r3, #1
    2844:	8a000013 	bhi	2898 <LED+0x80>
  	return;
  if(onoff == OFF)
    2848:	e55b3014 	ldrb	r3, [fp, #-20]
    284c:	e3530000 	cmp	r3, #0
    2850:	1a000008 	bne	2878 <LED+0x60>
  {
    IOSET1 = (1<<(24+nr));
    2854:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2858:	e282290a 	add	r2, r2, #163840	; 0x28000
    285c:	e2822014 	add	r2, r2, #20
    2860:	e55b3010 	ldrb	r3, [fp, #-16]
    2864:	e2831018 	add	r1, r3, #24
    2868:	e3a03001 	mov	r3, #1
    286c:	e1a03113 	lsl	r3, r3, r1
    2870:	e5823000 	str	r3, [r2]
    2874:	ea000007 	b	2898 <LED+0x80>
  }
  else
  {
    IOCLR1 = (1<<(24+nr));
    2878:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    287c:	e282290a 	add	r2, r2, #163840	; 0x28000
    2880:	e282201c 	add	r2, r2, #28
    2884:	e55b3010 	ldrb	r3, [fp, #-16]
    2888:	e2831018 	add	r1, r3, #24
    288c:	e3a03001 	mov	r3, #1
    2890:	e1a03113 	lsl	r3, r3, r1
    2894:	e5823000 	str	r3, [r2]
  }
}
    2898:	e24bd00c 	sub	sp, fp, #12
    289c:	e89d6800 	ldm	sp, {fp, sp, lr}
    28a0:	e12fff1e 	bx	lr

000028a4 <GPIO_P1_B16>:

void GPIO_P1_B16(unsigned char onoff)
{
    28a4:	e1a0c00d 	mov	ip, sp
    28a8:	e92dd800 	push	{fp, ip, lr, pc}
    28ac:	e24cb004 	sub	fp, ip, #4
    28b0:	e24dd004 	sub	sp, sp, #4
    28b4:	e1a03000 	mov	r3, r0
    28b8:	e54b3010 	strb	r3, [fp, #-16]
	if (onoff == OFF)	
    28bc:	e55b3010 	ldrb	r3, [fp, #-16]
    28c0:	e3530000 	cmp	r3, #0
    28c4:	1a000005 	bne	28e0 <GPIO_P1_B16+0x3c>
		IOCLR1 = (1 << 16);
    28c8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    28cc:	e283390a 	add	r3, r3, #163840	; 0x28000
    28d0:	e283301c 	add	r3, r3, #28
    28d4:	e3a02801 	mov	r2, #65536	; 0x10000
    28d8:	e5832000 	str	r2, [r3]
    28dc:	ea000004 	b	28f4 <GPIO_P1_B16+0x50>
	else
		IOSET1 = (1 << 16);
    28e0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    28e4:	e283390a 	add	r3, r3, #163840	; 0x28000
    28e8:	e2833014 	add	r3, r3, #20
    28ec:	e3a02801 	mov	r2, #65536	; 0x10000
    28f0:	e5832000 	str	r2, [r3]
}
    28f4:	e24bd00c 	sub	sp, fp, #12
    28f8:	e89d6800 	ldm	sp, {fp, sp, lr}
    28fc:	e12fff1e 	bx	lr

00002900 <init>:
#include "ssp.h"
#include "adc.h"
#include "options.h" //#defines for irq optoins

void init(void)
{
    2900:	e1a0c00d 	mov	ip, sp
    2904:	e92dd800 	push	{fp, ip, lr, pc}
    2908:	e24cb004 	sub	fp, ip, #4
  MAMCR = 0x02;  //Memory Acceleration enabled
    290c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2910:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2914:	e3a02002 	mov	r2, #2
    2918:	e5832000 	str	r2, [r3]
  MAMTIM = 0x04;
    291c:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2920:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2924:	e3a02004 	mov	r2, #4
    2928:	e5832000 	str	r2, [r3]
  VPBDIV = 0x01;  //0x01: peripheral frequency == cpu frequency, 0x00: per. freq. = crystal freq.
    292c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2930:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2934:	e2833c01 	add	r3, r3, #256	; 0x100
    2938:	e3a02001 	mov	r2, #1
    293c:	e5832000 	str	r2, [r3]
  pll_init();
    2940:	eb0000f1 	bl	2d0c <pll_init>
  pll_feed();
    2944:	eb000100 	bl	2d4c <pll_feed>
  init_ports();
    2948:	eb000039 	bl	2a34 <init_ports>
  UART0Initialize(57600);	//debug / command
    294c:	e3a00ce1 	mov	r0, #57600	; 0xe100
    2950:	eb000199 	bl	2fbc <UART0Initialize>
  UART1Initialize(57600);	//57600 Servo / GPS, 38400 "indoor GPS"
    2954:	e3a00ce1 	mov	r0, #57600	; 0xe100
    2958:	eb000235 	bl	3234 <UART1Initialize>
  init_spi();
    295c:	eb0000b5 	bl	2c38 <init_spi>
  init_spi1();
    2960:	eb0000c2 	bl	2c70 <init_spi1>
  init_timer0();
    2964:	eb00005c 	bl	2adc <init_timer0>
//  I2CInit(I2CMASTER);
  PWM_Init();
    2968:	eb000085 	bl	2b84 <PWM_Init>
  ADCInit(ADC_CLK);
    296c:	e3a0093d 	mov	r0, #999424	; 0xf4000
    2970:	e2800d09 	add	r0, r0, #576	; 0x240
    2974:	eb000a57 	bl	52d8 <ADCInit>
  init_interrupts();
    2978:	eb000002 	bl	2988 <init_interrupts>
 }
    297c:	e24bd00c 	sub	sp, fp, #12
    2980:	e89d6800 	ldm	sp, {fp, sp, lr}
    2984:	e12fff1e 	bx	lr

00002988 <init_interrupts>:

void init_interrupts(void)
{
    2988:	e1a0c00d 	mov	ip, sp
    298c:	e92dd800 	push	{fp, ip, lr, pc}
    2990:	e24cb004 	sub	fp, ip, #4
  init_VIC();
    2994:	eb0009a3 	bl	5028 <init_VIC>

  //Timer0 interrupt
  install_irq( TIMER0_INT, (void *) timer0ISR );
    2998:	e3a00004 	mov	r0, #4
    299c:	e59f1080 	ldr	r1, [pc, #128]	; 2a24 <init_interrupts+0x9c>
    29a0:	eb0009d1 	bl	50ec <install_irq>

  //UART1 interrupt
  #ifdef UART1_IRQ
  install_irq( UART1_INT, (void *) uart1ISR );
    29a4:	e3a00007 	mov	r0, #7
    29a8:	e59f1078 	ldr	r1, [pc, #120]	; 2a28 <init_interrupts+0xa0>
    29ac:	eb0009ce 	bl	50ec <install_irq>
  U1IER = 3; //=3; enable THRE and RX interrupt
    29b0:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    29b4:	e2833801 	add	r3, r3, #65536	; 0x10000
    29b8:	e3a02003 	mov	r2, #3
    29bc:	e5832000 	str	r2, [r3]
  #endif

  //UART0 interrupt
  #ifdef UART0_IRQ
  install_irq( UART0_INT, (void *) uart0ISR );
    29c0:	e3a00006 	mov	r0, #6
    29c4:	e59f1060 	ldr	r1, [pc, #96]	; 2a2c <init_interrupts+0xa4>
    29c8:	eb0009c7 	bl	50ec <install_irq>
  U0IER = 3; //=3; enable THRE and RX interrupt
    29cc:	e3a03903 	mov	r3, #49152	; 0xc000
    29d0:	e283324e 	add	r3, r3, #-536870908	; 0xe0000004
    29d4:	e3a02003 	mov	r2, #3
    29d8:	e5832000 	str	r2, [r3]
  //I2C0 interrupt
//  install_irq( I2C0_INT, (void *) I2C0MasterHandler );
//  I20CONSET = I2CONSET_I2EN;

  //SSP interrupt
  install_irq( SPI1_INT, (void *) SSPHandler );
    29dc:	e3a0000b 	mov	r0, #11
    29e0:	e59f1048 	ldr	r1, [pc, #72]	; 2a30 <init_interrupts+0xa8>
    29e4:	eb0009c0 	bl	50ec <install_irq>
  /* Set SSPINMS registers to enable interrupts */
  /* enable all interrupts, Rx overrun, Rx timeout, RX FIFO half full int,
  TX FIFO half empty int */
  SSPIMSC = SSPIMSC_TXIM | SSPIMSC_RXIM | SSPIMSC_RORIM;// | SSPIMSC_RTIM;
    29e8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    29ec:	e283391a 	add	r3, r3, #425984	; 0x68000
    29f0:	e2833014 	add	r3, r3, #20
    29f4:	e3a0200d 	mov	r2, #13
    29f8:	e5832000 	str	r2, [r3]
  /* SSP Enabled */
  SSPCR1 |= SSPCR1_SSE;
    29fc:	e3a0224e 	mov	r2, #-536870908	; 0xe0000004
    2a00:	e282291a 	add	r2, r2, #425984	; 0x68000
    2a04:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2a08:	e283391a 	add	r3, r3, #425984	; 0x68000
    2a0c:	e5933000 	ldr	r3, [r3]
    2a10:	e3833002 	orr	r3, r3, #2
    2a14:	e5823000 	str	r3, [r2]
}
    2a18:	e24bd00c 	sub	sp, fp, #12
    2a1c:	e89d6800 	ldm	sp, {fp, sp, lr}
    2a20:	e12fff1e 	bx	lr
    2a24:	00002414 	.word	0x00002414
    2a28:	000031f8 	.word	0x000031f8
    2a2c:	00002e8c 	.word	0x00002e8c
    2a30:	000056c4 	.word	0x000056c4

00002a34 <init_ports>:


void init_ports(void)
{
    2a34:	e1a0c00d 	mov	ip, sp
    2a38:	e92dd800 	push	{fp, ip, lr, pc}
    2a3c:	e24cb004 	sub	fp, ip, #4
 * Byte3_sel = 0b00110000 = 0x30
 * Byte1_io_dir = 0x00
 * or SD_Logging => Byte1_io_dir=0x40
 */

 	PINSEL0=0x30C51555;
    2a40:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2a44:	e283390b 	add	r3, r3, #180224	; 0x2c000
    2a48:	e59f2084 	ldr	r2, [pc, #132]	; 2ad4 <init_ports+0xa0>
    2a4c:	e5832000 	str	r2, [r3]
  * P0.30: CURRENT_1: -> 01
  * P0.31: IO_in -> 00
  * Byte3: 0b00010101 = 0x15
  * Byte3_io_dir=0x00
  */
 PINSEL1 = 0x150406A8;
    2a50:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2a54:	e283390b 	add	r3, r3, #180224	; 0x2c000
    2a58:	e59f2078 	ldr	r2, [pc, #120]	; 2ad8 <init_ports+0xa4>
    2a5c:	e5832000 	str	r2, [r3]

 PINSEL2 = 0x00000004;
    2a60:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2a64:	e283390b 	add	r3, r3, #180224	; 0x2c000
    2a68:	e2833014 	add	r3, r3, #20
    2a6c:	e3a02004 	mov	r2, #4
    2a70:	e5832000 	str	r2, [r3]

 IODIR0 = 0x0030B480;
    2a74:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    2a78:	e282290a 	add	r2, r2, #163840	; 0x28000
    2a7c:	e3a039c2 	mov	r3, #3178496	; 0x308000
    2a80:	e2833dd2 	add	r3, r3, #13440	; 0x3480
    2a84:	e5823000 	str	r3, [r2]

 IOSET0 = (1<<EXT_NCS)|(1<<11); //all nCS high
    2a88:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2a8c:	e283390a 	add	r3, r3, #163840	; 0x28000
    2a90:	e3a02d22 	mov	r2, #2176	; 0x880
    2a94:	e5832000 	str	r2, [r3]
 * P1.24: LED1/IO_out
 * P1.25: LED2/IO_out
 *
 */

 IODIR1 = 0x03030000;
    2a98:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2a9c:	e282290a 	add	r2, r2, #163840	; 0x28000
    2aa0:	e2822018 	add	r2, r2, #24
    2aa4:	e3a03403 	mov	r3, #50331648	; 0x3000000
    2aa8:	e2833803 	add	r3, r3, #196608	; 0x30000
    2aac:	e5823000 	str	r3, [r2]
 IOSET1 = ((1<<24)|(1<<16)); //turn off LED1, turn beeper off
    2ab0:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2ab4:	e282290a 	add	r2, r2, #163840	; 0x28000
    2ab8:	e2822014 	add	r2, r2, #20
    2abc:	e3a03401 	mov	r3, #16777216	; 0x1000000
    2ac0:	e2833801 	add	r3, r3, #65536	; 0x10000
    2ac4:	e5823000 	str	r3, [r2]

}
    2ac8:	e24bd00c 	sub	sp, fp, #12
    2acc:	e89d6800 	ldm	sp, {fp, sp, lr}
    2ad0:	e12fff1e 	bx	lr
    2ad4:	30c51555 	.word	0x30c51555
    2ad8:	150406a8 	.word	0x150406a8

00002adc <init_timer0>:

void init_timer0(void)
{
    2adc:	e1a0c00d 	mov	ip, sp
    2ae0:	e92dd810 	push	{r4, fp, ip, lr, pc}
    2ae4:	e24cb004 	sub	fp, ip, #4
  T0TC=0;
    2ae8:	e3a03901 	mov	r3, #16384	; 0x4000
    2aec:	e283328e 	add	r3, r3, #-536870904	; 0xe0000008
    2af0:	e3a02000 	mov	r2, #0
    2af4:	e5832000 	str	r2, [r3]
  T0TCR=0x0;    //Reset timer0
    2af8:	e3a03901 	mov	r3, #16384	; 0x4000
    2afc:	e283324e 	add	r3, r3, #-536870908	; 0xe0000004
    2b00:	e3a02000 	mov	r2, #0
    2b04:	e5832000 	str	r2, [r3]
  T0MCR=0x3;    //Interrupt on match MR0 and reset counter
    2b08:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2b0c:	e2833901 	add	r3, r3, #16384	; 0x4000
    2b10:	e2833014 	add	r3, r3, #20
    2b14:	e3a02003 	mov	r2, #3
    2b18:	e5832000 	str	r2, [r3]
  T0PR=0;
    2b1c:	e3a03901 	mov	r3, #16384	; 0x4000
    2b20:	e28332ce 	add	r3, r3, #-536870900	; 0xe000000c
    2b24:	e3a02000 	mov	r2, #0
    2b28:	e5832000 	str	r2, [r3]
  T0PC=0;     //Prescale Counter = 0
    2b2c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2b30:	e2833901 	add	r3, r3, #16384	; 0x4000
    2b34:	e2833010 	add	r3, r3, #16
    2b38:	e3a02000 	mov	r2, #0
    2b3c:	e5832000 	str	r2, [r3]
  T0MR0=peripheralClockFrequency()/ControllerCyclesPerSecond; // /200 => 200 Hz Period
    2b40:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    2b44:	e2844901 	add	r4, r4, #16384	; 0x4000
    2b48:	e2844018 	add	r4, r4, #24
    2b4c:	eb000096 	bl	2dac <peripheralClockFrequency>
    2b50:	e1a02000 	mov	r2, r0
    2b54:	e59f3024 	ldr	r3, [pc, #36]	; 2b80 <init_timer0+0xa4>
    2b58:	e0831392 	umull	r1, r3, r2, r3
    2b5c:	e1a03323 	lsr	r3, r3, #6
    2b60:	e5843000 	str	r3, [r4]
  T0TCR=0x1;   //Set timer0
    2b64:	e3a03901 	mov	r3, #16384	; 0x4000
    2b68:	e283324e 	add	r3, r3, #-536870908	; 0xe0000004
    2b6c:	e3a02001 	mov	r2, #1
    2b70:	e5832000 	str	r2, [r3]
}
    2b74:	e24bd010 	sub	sp, fp, #16
    2b78:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
    2b7c:	e12fff1e 	bx	lr
    2b80:	10624dd3 	.word	0x10624dd3

00002b84 <PWM_Init>:

void PWM_Init( void )
{
    2b84:	e1a0c00d 	mov	ip, sp
    2b88:	e92dd800 	push	{fp, ip, lr, pc}
    2b8c:	e24cb004 	sub	fp, ip, #4
  //  match_counter = 0;
  //  PINSEL0 = 0x000A800A;	/* set GPIOs for all PWMs */
  //  PINSEL1 = 0x00000400;
    PWMTCR = TCR_RESET;		/* Counter Reset */
    2b90:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2b94:	e2833905 	add	r3, r3, #81920	; 0x14000
    2b98:	e3a02002 	mov	r2, #2
    2b9c:	e5832000 	str	r2, [r3]

    PWMPR = 0x00;		/* count frequency:Fpclk */
    2ba0:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    2ba4:	e2833905 	add	r3, r3, #81920	; 0x14000
    2ba8:	e3a02000 	mov	r2, #0
    2bac:	e5832000 	str	r2, [r3]
    PWMMCR = PWMMR0R;	/* interrupt on PWMMR0, reset on PWMMR0, reset
    2bb0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2bb4:	e2833905 	add	r3, r3, #81920	; 0x14000
    2bb8:	e2833014 	add	r3, r3, #20
    2bbc:	e3a02002 	mov	r2, #2
    2bc0:	e5832000 	str	r2, [r3]
				TC if PWM0 matches */
    PWMMR0 = 1179648 ;
    2bc4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2bc8:	e2833905 	add	r3, r3, #81920	; 0x14000
    2bcc:	e2833018 	add	r3, r3, #24
    2bd0:	e3a02812 	mov	r2, #1179648	; 0x120000
    2bd4:	e5832000 	str	r2, [r3]
    PWMMR5 = 88470;
    2bd8:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2bdc:	e2822905 	add	r2, r2, #81920	; 0x14000
    2be0:	e2822044 	add	r2, r2, #68	; 0x44
    2be4:	e3a03b56 	mov	r3, #88064	; 0x15800
    2be8:	e2833f65 	add	r3, r3, #404	; 0x194
    2bec:	e2833002 	add	r3, r3, #2
    2bf0:	e5823000 	str	r3, [r2]

    /* all PWM latch enabled */
    PWMLER = LER5_EN;
    2bf4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2bf8:	e2833905 	add	r3, r3, #81920	; 0x14000
    2bfc:	e2833050 	add	r3, r3, #80	; 0x50
    2c00:	e3a02020 	mov	r2, #32
    2c04:	e5832000 	str	r2, [r3]

        /* All single edge, all enable */
    PWMPCR = PWMENA1 | PWMENA2 | PWMENA3 | PWMENA4 | PWMENA5 | PWMENA6;
    2c08:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2c0c:	e2833905 	add	r3, r3, #81920	; 0x14000
    2c10:	e283304c 	add	r3, r3, #76	; 0x4c
    2c14:	e3a02c7e 	mov	r2, #32256	; 0x7e00
    2c18:	e5832000 	str	r2, [r3]
    PWMTCR = TCR_CNT_EN | TCR_PWM_EN;	/* counter enable, PWM enable */
    2c1c:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2c20:	e2833905 	add	r3, r3, #81920	; 0x14000
    2c24:	e3a02009 	mov	r2, #9
    2c28:	e5832000 	str	r2, [r3]
}
    2c2c:	e24bd00c 	sub	sp, fp, #12
    2c30:	e89d6800 	ldm	sp, {fp, sp, lr}
    2c34:	e12fff1e 	bx	lr

00002c38 <init_spi>:


void init_spi(void)
{
    2c38:	e1a0c00d 	mov	ip, sp
    2c3c:	e92dd800 	push	{fp, ip, lr, pc}
    2c40:	e24cb004 	sub	fp, ip, #4
  S0SPCCR=0x04; //30 clock-cycles (~60MHz) = 1 SPI cycle => SPI @ 2MHz
    2c44:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    2c48:	e2833802 	add	r3, r3, #131072	; 0x20000
    2c4c:	e3a02004 	mov	r2, #4
    2c50:	e5832000 	str	r2, [r3]
  S0SPCR=0x20;  //LPC is Master
    2c54:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2c58:	e2833802 	add	r3, r3, #131072	; 0x20000
    2c5c:	e3a02020 	mov	r2, #32
    2c60:	e5832000 	str	r2, [r3]
}
    2c64:	e24bd00c 	sub	sp, fp, #12
    2c68:	e89d6800 	ldm	sp, {fp, sp, lr}
    2c6c:	e12fff1e 	bx	lr

00002c70 <init_spi1>:

void init_spi1(void)
{
    2c70:	e1a0c00d 	mov	ip, sp
    2c74:	e92dd800 	push	{fp, ip, lr, pc}
    2c78:	e24cb004 	sub	fp, ip, #4
    2c7c:	e24dd004 	sub	sp, sp, #4
	unsigned char i, Dummy;

    /* Set DSS data to 8-bit, Frame format SPI, CPOL = 0, CPHA = 0, and SCR is 3 */
    SSPCR0 = 0x040F;
    2c80:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2c84:	e282291a 	add	r2, r2, #425984	; 0x68000
    2c88:	e3a03b01 	mov	r3, #1024	; 0x400
    2c8c:	e283300f 	add	r3, r3, #15
    2c90:	e5823000 	str	r3, [r2]

    /* SSPCPSR clock prescale register, master mode, minimum divisor is 0x02 */
    SSPCPSR = 0x1B;
    2c94:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2c98:	e283391a 	add	r3, r3, #425984	; 0x68000
    2c9c:	e2833010 	add	r3, r3, #16
    2ca0:	e3a0201b 	mov	r2, #27
    2ca4:	e5832000 	str	r2, [r3]

    for ( i = 0; i < FIFOSIZE; i++ )
    2ca8:	e3a03000 	mov	r3, #0
    2cac:	e54b300e 	strb	r3, [fp, #-14]
    2cb0:	ea000006 	b	2cd0 <init_spi1+0x60>
    {
	Dummy = SSPDR;		/* clear the RxFIFO */
    2cb4:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    2cb8:	e283391a 	add	r3, r3, #425984	; 0x68000
    2cbc:	e5933000 	ldr	r3, [r3]
    2cc0:	e54b300d 	strb	r3, [fp, #-13]
    SSPCR0 = 0x040F;

    /* SSPCPSR clock prescale register, master mode, minimum divisor is 0x02 */
    SSPCPSR = 0x1B;

    for ( i = 0; i < FIFOSIZE; i++ )
    2cc4:	e55b300e 	ldrb	r3, [fp, #-14]
    2cc8:	e2833001 	add	r3, r3, #1
    2ccc:	e54b300e 	strb	r3, [fp, #-14]
    2cd0:	e55b300e 	ldrb	r3, [fp, #-14]
    2cd4:	e3530007 	cmp	r3, #7
    2cd8:	9afffff5 	bls	2cb4 <init_spi1+0x44>
    {
	Dummy = SSPDR;		/* clear the RxFIFO */
    }

    /*all ints deactivated*/
	SSPIMSC = 0;
    2cdc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2ce0:	e283391a 	add	r3, r3, #425984	; 0x68000
    2ce4:	e2833014 	add	r3, r3, #20
    2ce8:	e3a02000 	mov	r2, #0
    2cec:	e5832000 	str	r2, [r3]

    /* Device select as master, SSP Enabled */
    SSPCR1 = 0x00;// | SSPCR1_SSE;
    2cf0:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2cf4:	e283391a 	add	r3, r3, #425984	; 0x68000
    2cf8:	e3a02000 	mov	r2, #0
    2cfc:	e5832000 	str	r2, [r3]

    return;


}
    2d00:	e24bd00c 	sub	sp, fp, #12
    2d04:	e89d6800 	ldm	sp, {fp, sp, lr}
    2d08:	e12fff1e 	bx	lr

00002d0c <pll_init>:

void pll_init(void)
{
    2d0c:	e1a0c00d 	mov	ip, sp
    2d10:	e92dd800 	push	{fp, ip, lr, pc}
    2d14:	e24cb004 	sub	fp, ip, #4
  PLLCFG=0x23;    //0b00100011; => M=4,0690; P=2;
    2d18:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2d1c:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2d20:	e2833084 	add	r3, r3, #132	; 0x84
    2d24:	e3a02023 	mov	r2, #35	; 0x23
    2d28:	e5832000 	str	r2, [r3]
  PLLCON=0x03;    //PLLE=1, PLLC=1 => PLL enabled as system clock
    2d2c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2d30:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2d34:	e2833080 	add	r3, r3, #128	; 0x80
    2d38:	e3a02003 	mov	r2, #3
    2d3c:	e5832000 	str	r2, [r3]
}
    2d40:	e24bd00c 	sub	sp, fp, #12
    2d44:	e89d6800 	ldm	sp, {fp, sp, lr}
    2d48:	e12fff1e 	bx	lr

00002d4c <pll_feed>:

void pll_feed(void)
{
    2d4c:	e1a0c00d 	mov	ip, sp
    2d50:	e92dd800 	push	{fp, ip, lr, pc}
    2d54:	e24cb004 	sub	fp, ip, #4
  PLLFEED=0xAA;
    2d58:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2d5c:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2d60:	e283308c 	add	r3, r3, #140	; 0x8c
    2d64:	e3a020aa 	mov	r2, #170	; 0xaa
    2d68:	e5832000 	str	r2, [r3]
  PLLFEED=0x55;
    2d6c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2d70:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2d74:	e283308c 	add	r3, r3, #140	; 0x8c
    2d78:	e3a02055 	mov	r2, #85	; 0x55
    2d7c:	e5832000 	str	r2, [r3]
}
    2d80:	e24bd00c 	sub	sp, fp, #12
    2d84:	e89d6800 	ldm	sp, {fp, sp, lr}
    2d88:	e12fff1e 	bx	lr

00002d8c <processorClockFrequency>:

unsigned int processorClockFrequency(void)
{
    2d8c:	e1a0c00d 	mov	ip, sp
    2d90:	e92dd800 	push	{fp, ip, lr, pc}
    2d94:	e24cb004 	sub	fp, ip, #4
  return 58982400;
    2d98:	e3a037e1 	mov	r3, #58982400	; 0x3840000
}
    2d9c:	e1a00003 	mov	r0, r3
    2da0:	e24bd00c 	sub	sp, fp, #12
    2da4:	e89d6800 	ldm	sp, {fp, sp, lr}
    2da8:	e12fff1e 	bx	lr

00002dac <peripheralClockFrequency>:

unsigned int peripheralClockFrequency(void)
{
    2dac:	e1a0c00d 	mov	ip, sp
    2db0:	e92dd800 	push	{fp, ip, lr, pc}
    2db4:	e24cb004 	sub	fp, ip, #4
    2db8:	e24dd008 	sub	sp, sp, #8
  unsigned int divider;
  switch (VPBDIV & 3)
    2dbc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2dc0:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2dc4:	e2833c01 	add	r3, r3, #256	; 0x100
    2dc8:	e5933000 	ldr	r3, [r3]
    2dcc:	e2033003 	and	r3, r3, #3
    2dd0:	e50b3014 	str	r3, [fp, #-20]
    2dd4:	e51b3014 	ldr	r3, [fp, #-20]
    2dd8:	e3530001 	cmp	r3, #1
    2ddc:	0a000009 	beq	2e08 <peripheralClockFrequency+0x5c>
    2de0:	e51b3014 	ldr	r3, [fp, #-20]
    2de4:	e3530001 	cmp	r3, #1
    2de8:	3a000003 	bcc	2dfc <peripheralClockFrequency+0x50>
    2dec:	e51b3014 	ldr	r3, [fp, #-20]
    2df0:	e3530002 	cmp	r3, #2
    2df4:	0a000006 	beq	2e14 <peripheralClockFrequency+0x68>
    2df8:	ea000007 	b	2e1c <peripheralClockFrequency+0x70>
    {
      case 0:
        divider = 4;
    2dfc:	e3a03004 	mov	r3, #4
    2e00:	e50b3010 	str	r3, [fp, #-16]
        break;
    2e04:	ea000004 	b	2e1c <peripheralClockFrequency+0x70>
      case 1:
        divider = 1;
    2e08:	e3a03001 	mov	r3, #1
    2e0c:	e50b3010 	str	r3, [fp, #-16]
        break;
    2e10:	ea000001 	b	2e1c <peripheralClockFrequency+0x70>
      case 2:
        divider = 2;
    2e14:	e3a03002 	mov	r3, #2
    2e18:	e50b3010 	str	r3, [fp, #-16]
        break;
    }
  return processorClockFrequency() / divider;
    2e1c:	ebffffda 	bl	2d8c <processorClockFrequency>
    2e20:	e1a03000 	mov	r3, r0
    2e24:	e1a00003 	mov	r0, r3
    2e28:	e51b1010 	ldr	r1, [fp, #-16]
    2e2c:	eb002a7b 	bl	d820 <____udivsi3_from_arm>
    2e30:	e1a03000 	mov	r3, r0
}
    2e34:	e1a00003 	mov	r0, r3
    2e38:	e24bd00c 	sub	sp, fp, #12
    2e3c:	e89d6800 	ldm	sp, {fp, sp, lr}
    2e40:	e12fff1e 	bx	lr

00002e44 <delay>:

void delay(int n)
{
    2e44:	e1a0c00d 	mov	ip, sp
    2e48:	e92dd800 	push	{fp, ip, lr, pc}
    2e4c:	e24cb004 	sub	fp, ip, #4
    2e50:	e24dd008 	sub	sp, sp, #8
    2e54:	e50b0014 	str	r0, [fp, #-20]
  volatile int i;
  for (i = 0; i < n; ++i);
    2e58:	e3a03000 	mov	r3, #0
    2e5c:	e50b3010 	str	r3, [fp, #-16]
    2e60:	ea000002 	b	2e70 <delay+0x2c>
    2e64:	e51b3010 	ldr	r3, [fp, #-16]
    2e68:	e2833001 	add	r3, r3, #1
    2e6c:	e50b3010 	str	r3, [fp, #-16]
    2e70:	e51b2010 	ldr	r2, [fp, #-16]
    2e74:	e51b3014 	ldr	r3, [fp, #-20]
    2e78:	e1520003 	cmp	r2, r3
    2e7c:	bafffff8 	blt	2e64 <delay+0x20>
}
    2e80:	e24bd00c 	sub	sp, fp, #12
    2e84:	e89d6800 	ldm	sp, {fp, sp, lr}
    2e88:	e12fff1e 	bx	lr

00002e8c <uart0ISR>:
volatile int toggle = 0;
volatile int lps = 0;

// user uart
void uart0ISR(void) __irq
{
    2e8c:	e1a0c00d 	mov	ip, sp
    2e90:	e92dd810 	push	{r4, fp, ip, lr, pc}
    2e94:	e24cb004 	sub	fp, ip, #4
    2e98:	e24dd004 	sub	sp, sp, #4

  // Read IIR to clear interrupt and find out the cause
  IENABLE;

  // Handle UART interrupt
  iir = (U0IIR >> 1) & 0x7;
    2e9c:	e3a03903 	mov	r3, #49152	; 0xc000
    2ea0:	e283328e 	add	r3, r3, #-536870904	; 0xe0000008
    2ea4:	e5933000 	ldr	r3, [r3]
    2ea8:	e1a030a3 	lsr	r3, r3, #1
    2eac:	e2033007 	and	r3, r3, #7
    2eb0:	e50b3014 	str	r3, [fp, #-20]
  if (iir == 1) // Transmitter is empty
    2eb4:	e51b3014 	ldr	r3, [fp, #-20]
    2eb8:	e3530001 	cmp	r3, #1
    2ebc:	1a000012 	bne	2f0c <uart0ISR+0x80>
  {
	// 0x20 -- On when U0THR (Transmitter Holding Register) is empty...
	while (RBCount(&u0s) != 0 && ((U0LSR & 0x20) != 0))
    2ec0:	ea000005 	b	2edc <uart0ISR+0x50>
	{ 
			U0THR = RBDequeue(&u0s);
    2ec4:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    2ec8:	e2844903 	add	r4, r4, #49152	; 0xc000
    2ecc:	e59f007c 	ldr	r0, [pc, #124]	; 2f50 <uart0ISR+0xc4>
    2ed0:	ebfffc75 	bl	20ac <RBDequeue>
    2ed4:	e1a03000 	mov	r3, r0
    2ed8:	e5843000 	str	r3, [r4]
  // Handle UART interrupt
  iir = (U0IIR >> 1) & 0x7;
  if (iir == 1) // Transmitter is empty
  {
	// 0x20 -- On when U0THR (Transmitter Holding Register) is empty...
	while (RBCount(&u0s) != 0 && ((U0LSR & 0x20) != 0))
    2edc:	e59f006c 	ldr	r0, [pc, #108]	; 2f50 <uart0ISR+0xc4>
    2ee0:	ebfffc6f 	bl	20a4 <RBCount>
    2ee4:	e1a03000 	mov	r3, r0
    2ee8:	e3530000 	cmp	r3, #0
    2eec:	0a000006 	beq	2f0c <uart0ISR+0x80>
    2ef0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2ef4:	e2833903 	add	r3, r3, #49152	; 0xc000
    2ef8:	e2833014 	add	r3, r3, #20
    2efc:	e5933000 	ldr	r3, [r3]
    2f00:	e2033020 	and	r3, r3, #32
    2f04:	e3530000 	cmp	r3, #0
    2f08:	1affffed 	bne	2ec4 <uart0ISR+0x38>
//  	RBEnqueue(&u0r, U0RBR);
 // 	RBEnqueue(&u0r, U0RBR);
  //	RBEnqueue(&u0r, U0RBR);
  //	RBEnqueue(&u0r, U0RBR);
  } 
  if (iir == 6)
    2f0c:	e51b3014 	ldr	r3, [fp, #-20]
    2f10:	e3530006 	cmp	r3, #6
    2f14:	1a000006 	bne	2f34 <uart0ISR+0xa8>
	 RBEnqueue(&u0r, U0RBR);
    2f18:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2f1c:	e2833903 	add	r3, r3, #49152	; 0xc000
    2f20:	e5933000 	ldr	r3, [r3]
    2f24:	e20330ff 	and	r3, r3, #255	; 0xff
    2f28:	e59f0024 	ldr	r0, [pc, #36]	; 2f54 <uart0ISR+0xc8>
    2f2c:	e1a01003 	mov	r1, r3
    2f30:	ebfffc91 	bl	217c <RBEnqueue>
  IDISABLE; 
  VICVectAddr = 0;		// Acknowledge Interrupt
    2f34:	e3a03000 	mov	r3, #0
    2f38:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    2f3c:	e3a02000 	mov	r2, #0
    2f40:	e5832000 	str	r2, [r3]
}
    2f44:	e24bd010 	sub	sp, fp, #16
    2f48:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
    2f4c:	e12fff1e 	bx	lr
    2f50:	40001a94 	.word	0x40001a94
    2f54:	400019f4 	.word	0x400019f4

00002f58 <emptyUART0>:

void emptyUART0(void)
{
    2f58:	e1a0c00d 	mov	ip, sp
    2f5c:	e92dd800 	push	{fp, ip, lr, pc}
    2f60:	e24cb004 	sub	fp, ip, #4
    2f64:	e24dd004 	sub	sp, sp, #4
	char rcvd;

	while ( LSR0_RDR )
    2f68:	ea000007 	b	2f8c <emptyUART0+0x34>
	{
		rcvd = U0RBR;
    2f6c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2f70:	e2833903 	add	r3, r3, #49152	; 0xc000
    2f74:	e5933000 	ldr	r3, [r3]
    2f78:	e54b300d 	strb	r3, [fp, #-13]
		RBEnqueue(&u0r, rcvd);
    2f7c:	e55b300d 	ldrb	r3, [fp, #-13]
    2f80:	e59f0030 	ldr	r0, [pc, #48]	; 2fb8 <emptyUART0+0x60>
    2f84:	e1a01003 	mov	r1, r3
    2f88:	ebfffc7b 	bl	217c <RBEnqueue>

void emptyUART0(void)
{
	char rcvd;

	while ( LSR0_RDR )
    2f8c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2f90:	e2833903 	add	r3, r3, #49152	; 0xc000
    2f94:	e2833014 	add	r3, r3, #20
    2f98:	e5933000 	ldr	r3, [r3]
    2f9c:	e2033001 	and	r3, r3, #1
    2fa0:	e20330ff 	and	r3, r3, #255	; 0xff
    2fa4:	e3530000 	cmp	r3, #0
    2fa8:	1affffef 	bne	2f6c <emptyUART0+0x14>
	{
		rcvd = U0RBR;
		RBEnqueue(&u0r, rcvd);
		//UART0WriteChar(rcvd);
	}
}
    2fac:	e24bd00c 	sub	sp, fp, #12
    2fb0:	e89d6800 	ldm	sp, {fp, sp, lr}
    2fb4:	e12fff1e 	bx	lr
    2fb8:	400019f4 	.word	0x400019f4

00002fbc <UART0Initialize>:

void UART0Initialize(unsigned int baud)
{
    2fbc:	e1a0c00d 	mov	ip, sp
    2fc0:	e92dd800 	push	{fp, ip, lr, pc}
    2fc4:	e24cb004 	sub	fp, ip, #4
    2fc8:	e24dd008 	sub	sp, sp, #8
    2fcc:	e50b0014 	str	r0, [fp, #-20]
  unsigned int divisor = peripheralClockFrequency() / (16 * baud);
    2fd0:	ebffff75 	bl	2dac <peripheralClockFrequency>
    2fd4:	e1a02000 	mov	r2, r0
    2fd8:	e51b3014 	ldr	r3, [fp, #-20]
    2fdc:	e1a03203 	lsl	r3, r3, #4
    2fe0:	e1a00002 	mov	r0, r2
    2fe4:	e1a01003 	mov	r1, r3
    2fe8:	eb002a0c 	bl	d820 <____udivsi3_from_arm>
    2fec:	e1a03000 	mov	r3, r0
    2ff0:	e50b3010 	str	r3, [fp, #-16]
// U0IER
//  Bit0: RBR enable
//  Bit1: THRE enable

  //UART0
	LED(0,OFF);
    2ff4:	e3a00000 	mov	r0, #0
    2ff8:	e3a01000 	mov	r1, #0
    2ffc:	ebfffe05 	bl	2818 <LED>
	LED(1,OFF);
    3000:	e3a00001 	mov	r0, #1
    3004:	e3a01000 	mov	r1, #0
    3008:	ebfffe02 	bl	2818 <LED>

  RBInit(&u0s);
    300c:	e59f0090 	ldr	r0, [pc, #144]	; 30a4 <UART0Initialize+0xe8>
    3010:	ebfffbdd 	bl	1f8c <RBInit>
  RBInit(&u0r); //Send / Receive uart buffers.
    3014:	e59f008c 	ldr	r0, [pc, #140]	; 30a8 <UART0Initialize+0xec>
    3018:	ebfffbdb 	bl	1f8c <RBInit>
  U0LCR = 0x83; /* 8 bit, 1 stop bit, no parity, enable DLAB */
    301c:	e3a03903 	mov	r3, #49152	; 0xc000
    3020:	e28332ce 	add	r3, r3, #-536870900	; 0xe000000c
    3024:	e3a02083 	mov	r2, #131	; 0x83
    3028:	e5832000 	str	r2, [r3]
  U0DLL = divisor & 0xFF;
    302c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3030:	e2833903 	add	r3, r3, #49152	; 0xc000
    3034:	e51b2010 	ldr	r2, [fp, #-16]
    3038:	e20220ff 	and	r2, r2, #255	; 0xff
    303c:	e5832000 	str	r2, [r3]
  U0DLM = (divisor >> 8) & 0xFF;
    3040:	e3a02903 	mov	r2, #49152	; 0xc000
    3044:	e282224e 	add	r2, r2, #-536870908	; 0xe0000004
    3048:	e51b3010 	ldr	r3, [fp, #-16]
    304c:	e1a03423 	lsr	r3, r3, #8
    3050:	e20330ff 	and	r3, r3, #255	; 0xff
    3054:	e5823000 	str	r3, [r2]
  U0LCR &= ~0x80; /* Disable DLAB */
    3058:	e3a02903 	mov	r2, #49152	; 0xc000
    305c:	e28222ce 	add	r2, r2, #-536870900	; 0xe000000c
    3060:	e3a03903 	mov	r3, #49152	; 0xc000
    3064:	e28332ce 	add	r3, r3, #-536870900	; 0xe000000c
    3068:	e5933000 	ldr	r3, [r3]
    306c:	e3c33080 	bic	r3, r3, #128	; 0x80
    3070:	e5823000 	str	r3, [r2]
  U0FCR = FIFO_ENABLE | TL3; // Enable FIFO's, interrupt every 14 characters.
    3074:	e3a03903 	mov	r3, #49152	; 0xc000
    3078:	e283328e 	add	r3, r3, #-536870904	; 0xe0000008
    307c:	e3a020b1 	mov	r2, #177	; 0xb1
    3080:	e5832000 	str	r2, [r3]
  U0TER = 0x80; //Enable transmitter.
    3084:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3088:	e2833903 	add	r3, r3, #49152	; 0xc000
    308c:	e2833030 	add	r3, r3, #48	; 0x30
    3090:	e3a02080 	mov	r2, #128	; 0x80
    3094:	e5832000 	str	r2, [r3]
}
    3098:	e24bd00c 	sub	sp, fp, #12
    309c:	e89d6800 	ldm	sp, {fp, sp, lr}
    30a0:	e12fff1e 	bx	lr
    30a4:	40001a94 	.word	0x40001a94
    30a8:	400019f4 	.word	0x400019f4

000030ac <UART0Debug>:

void UART0Debug(char *msg, int length)
{
    30ac:	e1a0c00d 	mov	ip, sp
    30b0:	e92dd800 	push	{fp, ip, lr, pc}
    30b4:	e24cb004 	sub	fp, ip, #4
    30b8:	e24dd008 	sub	sp, sp, #8
    30bc:	e50b0010 	str	r0, [fp, #-16]
    30c0:	e50b1014 	str	r1, [fp, #-20]

  while ( length > 0 )
    30c4:	ea000011 	b	3110 <UART0Debug+0x64>
  {
	while ( (U0LSR & 0x20) == 0 ); // Wait until we can send...
    30c8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    30cc:	e2833903 	add	r3, r3, #49152	; 0xc000
    30d0:	e2833014 	add	r3, r3, #20
    30d4:	e5933000 	ldr	r3, [r3]
    30d8:	e2033020 	and	r3, r3, #32
    30dc:	e3530000 	cmp	r3, #0
    30e0:	0afffff8 	beq	30c8 <UART0Debug+0x1c>
	length--;
    30e4:	e51b3014 	ldr	r3, [fp, #-20]
    30e8:	e2433001 	sub	r3, r3, #1
    30ec:	e50b3014 	str	r3, [fp, #-20]
	U0THR = *msg;
    30f0:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    30f4:	e2822903 	add	r2, r2, #49152	; 0xc000
    30f8:	e51b3010 	ldr	r3, [fp, #-16]
    30fc:	e5d33000 	ldrb	r3, [r3]
    3100:	e5823000 	str	r3, [r2]
	msg++;
    3104:	e51b3010 	ldr	r3, [fp, #-16]
    3108:	e2833001 	add	r3, r3, #1
    310c:	e50b3010 	str	r3, [fp, #-16]
}

void UART0Debug(char *msg, int length)
{

  while ( length > 0 )
    3110:	e51b3014 	ldr	r3, [fp, #-20]
    3114:	e3530000 	cmp	r3, #0
    3118:	caffffea 	bgt	30c8 <UART0Debug+0x1c>
	length--;
	U0THR = *msg;
	msg++;
  }

}
    311c:	e24bd00c 	sub	sp, fp, #12
    3120:	e89d6800 	ldm	sp, {fp, sp, lr}
    3124:	e12fff1e 	bx	lr

00003128 <UART0WriteChar>:

//Write to UART0
void UART0WriteChar(unsigned char ch)
{
    3128:	e1a0c00d 	mov	ip, sp
    312c:	e92dd800 	push	{fp, ip, lr, pc}
    3130:	e24cb004 	sub	fp, ip, #4
    3134:	e24dd004 	sub	sp, sp, #4
    3138:	e1a03000 	mov	r3, r0
    313c:	e54b3010 	strb	r3, [fp, #-16]
  if ( U0LSR & 0x20 ) // Transmitter Empty, so we need to write directly to transmitter.
    3140:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3144:	e2833903 	add	r3, r3, #49152	; 0xc000
    3148:	e2833014 	add	r3, r3, #20
    314c:	e5933000 	ldr	r3, [r3]
    3150:	e2033020 	and	r3, r3, #32
    3154:	e3530000 	cmp	r3, #0
    3158:	0a000004 	beq	3170 <UART0WriteChar+0x48>
    U0THR = ch;
    315c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3160:	e2833903 	add	r3, r3, #49152	; 0xc000
    3164:	e55b2010 	ldrb	r2, [fp, #-16]
    3168:	e5832000 	str	r2, [r3]
    316c:	ea000003 	b	3180 <UART0WriteChar+0x58>
  else
    RBEnqueue(&u0s, ch);
    3170:	e55b3010 	ldrb	r3, [fp, #-16]
    3174:	e59f0010 	ldr	r0, [pc, #16]	; 318c <UART0WriteChar+0x64>
    3178:	e1a01003 	mov	r1, r3
    317c:	ebfffbfe 	bl	217c <RBEnqueue>
}
    3180:	e24bd00c 	sub	sp, fp, #12
    3184:	e89d6800 	ldm	sp, {fp, sp, lr}
    3188:	e12fff1e 	bx	lr
    318c:	40001a94 	.word	0x40001a94

00003190 <uart0Prime>:

// Primes the UART send buffer.
void uart0Prime(void)
{
    3190:	e1a0c00d 	mov	ip, sp
    3194:	e92dd810 	push	{r4, fp, ip, lr, pc}
    3198:	e24cb004 	sub	fp, ip, #4
	while ( RBCount(&u0s) > 0 )
    319c:	ea00000c 	b	31d4 <uart0Prime+0x44>
	{
		while (!(U0LSR & 0x20));
    31a0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    31a4:	e2833903 	add	r3, r3, #49152	; 0xc000
    31a8:	e2833014 	add	r3, r3, #20
    31ac:	e5933000 	ldr	r3, [r3]
    31b0:	e2033020 	and	r3, r3, #32
    31b4:	e3530000 	cmp	r3, #0
    31b8:	0afffff8 	beq	31a0 <uart0Prime+0x10>
	//if ( U0LSR & 0x20 ) //If transmitter is empty
		U0THR = RBDequeue(&u0s); //Write to the transmitter
    31bc:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    31c0:	e2844903 	add	r4, r4, #49152	; 0xc000
    31c4:	e59f0028 	ldr	r0, [pc, #40]	; 31f4 <uart0Prime+0x64>
    31c8:	ebfffbb7 	bl	20ac <RBDequeue>
    31cc:	e1a03000 	mov	r3, r0
    31d0:	e5843000 	str	r3, [r4]
}

// Primes the UART send buffer.
void uart0Prime(void)
{
	while ( RBCount(&u0s) > 0 )
    31d4:	e59f0018 	ldr	r0, [pc, #24]	; 31f4 <uart0Prime+0x64>
    31d8:	ebfffbb1 	bl	20a4 <RBCount>
    31dc:	e1a03000 	mov	r3, r0
    31e0:	e3530000 	cmp	r3, #0
    31e4:	caffffed 	bgt	31a0 <uart0Prime+0x10>
	{
		while (!(U0LSR & 0x20));
	//if ( U0LSR & 0x20 ) //If transmitter is empty
		U0THR = RBDequeue(&u0s); //Write to the transmitter
	}
}
    31e8:	e24bd010 	sub	sp, fp, #16
    31ec:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
    31f0:	e12fff1e 	bx	lr
    31f4:	40001a94 	.word	0x40001a94

000031f8 <uart1ISR>:



// GPS Uart
void uart1ISR(void) __irq
{
    31f8:	e1a0c00d 	mov	ip, sp
    31fc:	e92dd800 	push	{fp, ip, lr, pc}
    3200:	e24cb004 	sub	fp, ip, #4
    3204:	e24dd008 	sub	sp, sp, #8
  unsigned char t;
  IENABLE;
  unsigned iir = U1IIR;
    3208:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    320c:	e2833801 	add	r3, r3, #65536	; 0x10000
    3210:	e5933000 	ldr	r3, [r3]
    3214:	e50b3010 	str	r3, [fp, #-16]
      case 6:
        // CTI interrupt
        break;
   }
  IDISABLE;
  VICVectAddr = 0;		/* Acknowledge Interrupt */
    3218:	e3a03000 	mov	r3, #0
    321c:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    3220:	e3a02000 	mov	r2, #0
    3224:	e5832000 	str	r2, [r3]
}
    3228:	e24bd00c 	sub	sp, fp, #12
    322c:	e89d6800 	ldm	sp, {fp, sp, lr}
    3230:	e12fff1e 	bx	lr

00003234 <UART1Initialize>:



// Uart1 seems to get used for GPS.
void UART1Initialize(unsigned int baud)
{
    3234:	e1a0c00d 	mov	ip, sp
    3238:	e92dd800 	push	{fp, ip, lr, pc}
    323c:	e24cb004 	sub	fp, ip, #4
    3240:	e24dd008 	sub	sp, sp, #8
    3244:	e50b0014 	str	r0, [fp, #-20]
  unsigned int divisor = peripheralClockFrequency() / (16 * baud);
    3248:	ebfffed7 	bl	2dac <peripheralClockFrequency>
    324c:	e1a02000 	mov	r2, r0
    3250:	e51b3014 	ldr	r3, [fp, #-20]
    3254:	e1a03203 	lsl	r3, r3, #4
    3258:	e1a00002 	mov	r0, r2
    325c:	e1a01003 	mov	r1, r3
    3260:	eb00296e 	bl	d820 <____udivsi3_from_arm>
    3264:	e1a03000 	mov	r3, r0
    3268:	e50b3010 	str	r3, [fp, #-16]
//UART1
  U1LCR = 0x83; /* 8 bit, 1 stop bit, no parity, enable DLAB */
    326c:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    3270:	e2833801 	add	r3, r3, #65536	; 0x10000
    3274:	e3a02083 	mov	r2, #131	; 0x83
    3278:	e5832000 	str	r2, [r3]
  U1DLL = divisor & 0xFF;
    327c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3280:	e2833801 	add	r3, r3, #65536	; 0x10000
    3284:	e51b2010 	ldr	r2, [fp, #-16]
    3288:	e20220ff 	and	r2, r2, #255	; 0xff
    328c:	e5832000 	str	r2, [r3]
  U1DLM = (divisor >> 8) & 0xFF;
    3290:	e3a0224e 	mov	r2, #-536870908	; 0xe0000004
    3294:	e2822801 	add	r2, r2, #65536	; 0x10000
    3298:	e51b3010 	ldr	r3, [fp, #-16]
    329c:	e1a03423 	lsr	r3, r3, #8
    32a0:	e20330ff 	and	r3, r3, #255	; 0xff
    32a4:	e5823000 	str	r3, [r2]
  U1LCR &= ~0x80; /* Disable DLAB */
    32a8:	e3a022ce 	mov	r2, #-536870900	; 0xe000000c
    32ac:	e2822801 	add	r2, r2, #65536	; 0x10000
    32b0:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    32b4:	e2833801 	add	r3, r3, #65536	; 0x10000
    32b8:	e5933000 	ldr	r3, [r3]
    32bc:	e3c33080 	bic	r3, r3, #128	; 0x80
    32c0:	e5823000 	str	r3, [r2]
  U1FCR = 1;
    32c4:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    32c8:	e2833801 	add	r3, r3, #65536	; 0x10000
    32cc:	e3a02001 	mov	r2, #1
    32d0:	e5832000 	str	r2, [r3]
}
    32d4:	e24bd00c 	sub	sp, fp, #12
    32d8:	e89d6800 	ldm	sp, {fp, sp, lr}
    32dc:	e12fff1e 	bx	lr

000032e0 <UART1WriteChar>:


//Write to UART1
void UART1WriteChar(unsigned char ch)
{
    32e0:	e1a0c00d 	mov	ip, sp
    32e4:	e92dd800 	push	{fp, ip, lr, pc}
    32e8:	e24cb004 	sub	fp, ip, #4
    32ec:	e24dd004 	sub	sp, sp, #4
    32f0:	e1a03000 	mov	r3, r0
    32f4:	e54b3010 	strb	r3, [fp, #-16]
  while ((U1LSR & 0x20) == 0);
    32f8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    32fc:	e2833801 	add	r3, r3, #65536	; 0x10000
    3300:	e2833014 	add	r3, r3, #20
    3304:	e5933000 	ldr	r3, [r3]
    3308:	e2033020 	and	r3, r3, #32
    330c:	e3530000 	cmp	r3, #0
    3310:	0afffff8 	beq	32f8 <UART1WriteChar+0x18>
  U1THR = ch;
    3314:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3318:	e2833801 	add	r3, r3, #65536	; 0x10000
    331c:	e55b2010 	ldrb	r2, [fp, #-16]
    3320:	e5832000 	str	r2, [r3]
}
    3324:	e24bd00c 	sub	sp, fp, #12
    3328:	e89d6800 	ldm	sp, {fp, sp, lr}
    332c:	e12fff1e 	bx	lr

00003330 <UART1ReadChar>:

unsigned char UART1ReadChar(void)
{
    3330:	e1a0c00d 	mov	ip, sp
    3334:	e92dd800 	push	{fp, ip, lr, pc}
    3338:	e24cb004 	sub	fp, ip, #4
  while ((U1LSR & 0x01) == 0);
    333c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3340:	e2833801 	add	r3, r3, #65536	; 0x10000
    3344:	e2833014 	add	r3, r3, #20
    3348:	e5933000 	ldr	r3, [r3]
    334c:	e2033001 	and	r3, r3, #1
    3350:	e3530000 	cmp	r3, #0
    3354:	0afffff8 	beq	333c <UART1ReadChar+0xc>
  return U1RBR;
    3358:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    335c:	e2833801 	add	r3, r3, #65536	; 0x10000
    3360:	e5933000 	ldr	r3, [r3]
    3364:	e20330ff 	and	r3, r3, #255	; 0xff
}
    3368:	e1a00003 	mov	r0, r3
    336c:	e24bd00c 	sub	sp, fp, #12
    3370:	e89d6800 	ldm	sp, {fp, sp, lr}
    3374:	e12fff1e 	bx	lr

00003378 <__putchar>:

void __putchar(int ch)
{
    3378:	e1a0c00d 	mov	ip, sp
    337c:	e92dd800 	push	{fp, ip, lr, pc}
    3380:	e24cb004 	sub	fp, ip, #4
    3384:	e24dd004 	sub	sp, sp, #4
    3388:	e50b0010 	str	r0, [fp, #-16]
  if (ch == '\n')
    338c:	e51b3010 	ldr	r3, [fp, #-16]
    3390:	e353000a 	cmp	r3, #10
    3394:	1a000001 	bne	33a0 <__putchar+0x28>
    UART0WriteChar('\r');
    3398:	e3a0000d 	mov	r0, #13
    339c:	ebffff61 	bl	3128 <UART0WriteChar>
  UART0WriteChar(ch);
    33a0:	e51b3010 	ldr	r3, [fp, #-16]
    33a4:	e20330ff 	and	r3, r3, #255	; 0xff
    33a8:	e1a00003 	mov	r0, r3
    33ac:	ebffff5d 	bl	3128 <UART0WriteChar>
}
    33b0:	e24bd00c 	sub	sp, fp, #12
    33b4:	e89d6800 	ldm	sp, {fp, sp, lr}
    33b8:	e12fff1e 	bx	lr

000033bc <UART1_send>:

void UART1_send(unsigned char *buffer, unsigned char length)
{
    33bc:	e1a0c00d 	mov	ip, sp
    33c0:	e92dd800 	push	{fp, ip, lr, pc}
    33c4:	e24cb004 	sub	fp, ip, #4
    33c8:	e24dd00c 	sub	sp, sp, #12
    33cc:	e50b0014 	str	r0, [fp, #-20]
    33d0:	e1a03001 	mov	r3, r1
    33d4:	e54b3018 	strb	r3, [fp, #-24]
  unsigned char cnt=0;
    33d8:	e3a03000 	mov	r3, #0
    33dc:	e54b300d 	strb	r3, [fp, #-13]
  while(length--)
    33e0:	ea000011 	b	342c <UART1_send+0x70>
  {
    while (!(U1LSR & 0x20)); //wait until U1THR is empty
    33e4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    33e8:	e2833801 	add	r3, r3, #65536	; 0x10000
    33ec:	e2833014 	add	r3, r3, #20
    33f0:	e5933000 	ldr	r3, [r3]
    33f4:	e2033020 	and	r3, r3, #32
    33f8:	e3530000 	cmp	r3, #0
    33fc:	0afffff8 	beq	33e4 <UART1_send+0x28>
    U1THR = buffer[cnt++];
    3400:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    3404:	e2822801 	add	r2, r2, #65536	; 0x10000
    3408:	e55b300d 	ldrb	r3, [fp, #-13]
    340c:	e1a01003 	mov	r1, r3
    3410:	e51b3014 	ldr	r3, [fp, #-20]
    3414:	e0813003 	add	r3, r1, r3
    3418:	e5d33000 	ldrb	r3, [r3]
    341c:	e5823000 	str	r3, [r2]
    3420:	e55b300d 	ldrb	r3, [fp, #-13]
    3424:	e2833001 	add	r3, r3, #1
    3428:	e54b300d 	strb	r3, [fp, #-13]
}

void UART1_send(unsigned char *buffer, unsigned char length)
{
  unsigned char cnt=0;
  while(length--)
    342c:	e55b3018 	ldrb	r3, [fp, #-24]
    3430:	e2433001 	sub	r3, r3, #1
    3434:	e54b3018 	strb	r3, [fp, #-24]
    3438:	e55b3018 	ldrb	r3, [fp, #-24]
    343c:	e35300ff 	cmp	r3, #255	; 0xff
    3440:	1affffe7 	bne	33e4 <UART1_send+0x28>
  {
    while (!(U1LSR & 0x20)); //wait until U1THR is empty
    U1THR = buffer[cnt++];
  }
}
    3444:	e24bd00c 	sub	sp, fp, #12
    3448:	e89d6800 	ldm	sp, {fp, sp, lr}
    344c:	e12fff1e 	bx	lr

00003450 <crc_update>:

//example CRC16 function
unsigned short crc_update (unsigned short crc, unsigned char data)
     {
    3450:	e1a0c00d 	mov	ip, sp
    3454:	e92dd800 	push	{fp, ip, lr, pc}
    3458:	e24cb004 	sub	fp, ip, #4
    345c:	e24dd008 	sub	sp, sp, #8
    3460:	e1a03000 	mov	r3, r0
    3464:	e1a02001 	mov	r2, r1
    3468:	e14b31b0 	strh	r3, [fp, #-16]
    346c:	e1a03002 	mov	r3, r2
    3470:	e54b3014 	strb	r3, [fp, #-20]
         data ^= (crc & 0xff);
    3474:	e15b31b0 	ldrh	r3, [fp, #-16]
    3478:	e20330ff 	and	r3, r3, #255	; 0xff
    347c:	e20330ff 	and	r3, r3, #255	; 0xff
    3480:	e55b2014 	ldrb	r2, [fp, #-20]
    3484:	e1a01003 	mov	r1, r3
    3488:	e1a03002 	mov	r3, r2
    348c:	e0213003 	eor	r3, r1, r3
    3490:	e20330ff 	and	r3, r3, #255	; 0xff
    3494:	e54b3014 	strb	r3, [fp, #-20]
         data ^= data << 4;
    3498:	e55b3014 	ldrb	r3, [fp, #-20]
    349c:	e1a03203 	lsl	r3, r3, #4
    34a0:	e20330ff 	and	r3, r3, #255	; 0xff
    34a4:	e55b2014 	ldrb	r2, [fp, #-20]
    34a8:	e1a01003 	mov	r1, r3
    34ac:	e1a03002 	mov	r3, r2
    34b0:	e0213003 	eor	r3, r1, r3
    34b4:	e20330ff 	and	r3, r3, #255	; 0xff
    34b8:	e54b3014 	strb	r3, [fp, #-20]

         return ((((unsigned short )data << 8) | ((crc>>8)&0xff)) ^ (unsigned char )(data >> 4)
    34bc:	e55b3014 	ldrb	r3, [fp, #-20]
    34c0:	e1a03403 	lsl	r3, r3, #8
    34c4:	e1a03803 	lsl	r3, r3, #16
    34c8:	e1a02823 	lsr	r2, r3, #16
    34cc:	e15b31b0 	ldrh	r3, [fp, #-16]
    34d0:	e1a03423 	lsr	r3, r3, #8
    34d4:	e1a03803 	lsl	r3, r3, #16
    34d8:	e1a03823 	lsr	r3, r3, #16
    34dc:	e1a03803 	lsl	r3, r3, #16
    34e0:	e1a03823 	lsr	r3, r3, #16
    34e4:	e20330ff 	and	r3, r3, #255	; 0xff
    34e8:	e1823003 	orr	r3, r2, r3
    34ec:	e1a03803 	lsl	r3, r3, #16
    34f0:	e1a02823 	lsr	r2, r3, #16
    34f4:	e55b3014 	ldrb	r3, [fp, #-20]
    34f8:	e1a03223 	lsr	r3, r3, #4
    34fc:	e20330ff 	and	r3, r3, #255	; 0xff
    3500:	e0223003 	eor	r3, r2, r3
    3504:	e1a03803 	lsl	r3, r3, #16
    3508:	e1a02823 	lsr	r2, r3, #16
    350c:	e55b3014 	ldrb	r3, [fp, #-20]
    3510:	e1a03183 	lsl	r3, r3, #3
    3514:	e1a03803 	lsl	r3, r3, #16
    3518:	e1a03823 	lsr	r3, r3, #16
    351c:	e0223003 	eor	r3, r2, r3
    3520:	e1a03803 	lsl	r3, r3, #16
    3524:	e1a03823 	lsr	r3, r3, #16
    3528:	e1a03803 	lsl	r3, r3, #16
    352c:	e1a03823 	lsr	r3, r3, #16
                 ^ ((unsigned short )data << 3));
     }
    3530:	e1a00003 	mov	r0, r3
    3534:	e24bd00c 	sub	sp, fp, #12
    3538:	e89d6800 	ldm	sp, {fp, sp, lr}
    353c:	e12fff1e 	bx	lr

00003540 <crc16>:

 unsigned short crc16(void* data, unsigned short cnt)
 {
    3540:	e1a0c00d 	mov	ip, sp
    3544:	e92dd800 	push	{fp, ip, lr, pc}
    3548:	e24cb004 	sub	fp, ip, #4
    354c:	e24dd014 	sub	sp, sp, #20
    3550:	e50b001c 	str	r0, [fp, #-28]
    3554:	e1a03001 	mov	r3, r1
    3558:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
   unsigned short crc=0xff;
    355c:	e3a030ff 	mov	r3, #255	; 0xff
    3560:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
   unsigned char * ptr=(unsigned char *) data;
    3564:	e51b301c 	ldr	r3, [fp, #-28]
    3568:	e50b3014 	str	r3, [fp, #-20]
   int i;

   for (i=0;i<cnt;i++)
    356c:	e3a03000 	mov	r3, #0
    3570:	e50b3010 	str	r3, [fp, #-16]
    3574:	ea00000d 	b	35b0 <crc16+0x70>
     {
       crc=crc_update(crc,*ptr);
    3578:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
    357c:	e51b3014 	ldr	r3, [fp, #-20]
    3580:	e5d33000 	ldrb	r3, [r3]
    3584:	e1a00002 	mov	r0, r2
    3588:	e1a01003 	mov	r1, r3
    358c:	ebffffaf 	bl	3450 <crc_update>
    3590:	e1a03000 	mov	r3, r0
    3594:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
       ptr++;
    3598:	e51b3014 	ldr	r3, [fp, #-20]
    359c:	e2833001 	add	r3, r3, #1
    35a0:	e50b3014 	str	r3, [fp, #-20]
 {
   unsigned short crc=0xff;
   unsigned char * ptr=(unsigned char *) data;
   int i;

   for (i=0;i<cnt;i++)
    35a4:	e51b3010 	ldr	r3, [fp, #-16]
    35a8:	e2833001 	add	r3, r3, #1
    35ac:	e50b3010 	str	r3, [fp, #-16]
    35b0:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
    35b4:	e51b3010 	ldr	r3, [fp, #-16]
    35b8:	e1520003 	cmp	r2, r3
    35bc:	caffffed 	bgt	3578 <crc16+0x38>
     {
       crc=crc_update(crc,*ptr);
       ptr++;
     }
   return crc;
    35c0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 }
    35c4:	e1a00003 	mov	r0, r3
    35c8:	e24bd00c 	sub	sp, fp, #12
    35cc:	e89d6800 	ldm	sp, {fp, sp, lr}
    35d0:	e12fff1e 	bx	lr

000035d4 <_read_r>:
#include <sys/stat.h>
#include "uart.h"

// new code for _read_r provided by Alexey Shusharin - Thanks
_ssize_t _read_r(struct _reent *r, int file, void *ptr, size_t len)
{
    35d4:	e1a0c00d 	mov	ip, sp
    35d8:	e92dd800 	push	{fp, ip, lr, pc}
    35dc:	e24cb004 	sub	fp, ip, #4
    35e0:	e24dd020 	sub	sp, sp, #32
    35e4:	e50b001c 	str	r0, [fp, #-28]
    35e8:	e50b1020 	str	r1, [fp, #-32]
    35ec:	e50b2024 	str	r2, [fp, #-36]	; 0x24
    35f0:	e50b3028 	str	r3, [fp, #-40]	; 0x28
  char c;
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;
    35f4:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
    35f8:	e50b3010 	str	r3, [fp, #-16]

  for (i = 0; i < len; i++)
    35fc:	e3a03000 	mov	r3, #0
    3600:	e50b3014 	str	r3, [fp, #-20]
    3604:	ea000017 	b	3668 <_read_r+0x94>
  {
  //  c = UART0ReadChar();  -- PFG

    *p++ = c;
    3608:	e51b2010 	ldr	r2, [fp, #-16]
    360c:	e55b3015 	ldrb	r3, [fp, #-21]
    3610:	e5c23000 	strb	r3, [r2]
    3614:	e51b3010 	ldr	r3, [fp, #-16]
    3618:	e2833001 	add	r3, r3, #1
    361c:	e50b3010 	str	r3, [fp, #-16]
    //UART0WriteChar(c);  -- PFG

    if (c == 0x0D && i <= (len - 2))
    3620:	e55b3015 	ldrb	r3, [fp, #-21]
    3624:	e353000d 	cmp	r3, #13
    3628:	1a00000b 	bne	365c <_read_r+0x88>
    362c:	e51b3014 	ldr	r3, [fp, #-20]
    3630:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    3634:	e2422002 	sub	r2, r2, #2
    3638:	e1530002 	cmp	r3, r2
    363c:	8a000006 	bhi	365c <_read_r+0x88>
    {
      *p = 0x0A;
    3640:	e51b2010 	ldr	r2, [fp, #-16]
    3644:	e3a0300a 	mov	r3, #10
    3648:	e5c23000 	strb	r3, [r2]
      //UART0WriteChar(0x0A); -- PFG
      return i + 2;
    364c:	e51b3014 	ldr	r3, [fp, #-20]
    3650:	e2833002 	add	r3, r3, #2
    3654:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
    3658:	ea000008 	b	3680 <_read_r+0xac>
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;

  for (i = 0; i < len; i++)
    365c:	e51b3014 	ldr	r3, [fp, #-20]
    3660:	e2833001 	add	r3, r3, #1
    3664:	e50b3014 	str	r3, [fp, #-20]
    3668:	e51b2014 	ldr	r2, [fp, #-20]
    366c:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    3670:	e1520003 	cmp	r2, r3
    3674:	3affffe3 	bcc	3608 <_read_r+0x34>
      *p = 0x0A;
      //UART0WriteChar(0x0A); -- PFG
      return i + 2;
    }
  }
  return i;
    3678:	e51b3014 	ldr	r3, [fp, #-20]
    367c:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
    3680:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
}
    3684:	e1a00003 	mov	r0, r3
    3688:	e24bd00c 	sub	sp, fp, #12
    368c:	e89d6800 	ldm	sp, {fp, sp, lr}
    3690:	e12fff1e 	bx	lr

00003694 <_write_r>:
_ssize_t _write_r (
    struct _reent *r, 
    int file, 
    const void *ptr, 
    size_t len)
{
    3694:	e1a0c00d 	mov	ip, sp
    3698:	e92dd800 	push	{fp, ip, lr, pc}
    369c:	e24cb004 	sub	fp, ip, #4
    36a0:	e24dd018 	sub	sp, sp, #24
    36a4:	e50b0018 	str	r0, [fp, #-24]
    36a8:	e50b101c 	str	r1, [fp, #-28]
    36ac:	e50b2020 	str	r2, [fp, #-32]
    36b0:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
    36b4:	e51b3020 	ldr	r3, [fp, #-32]
    36b8:	e50b3010 	str	r3, [fp, #-16]
	
	for (i = 0; i < len; i++) {
    36bc:	e3a03000 	mov	r3, #0
    36c0:	e50b3014 	str	r3, [fp, #-20]
    36c4:	ea000010 	b	370c <_write_r+0x78>
		if (*p == '\n' ) UART0WriteChar('\r');
    36c8:	e51b3010 	ldr	r3, [fp, #-16]
    36cc:	e5d33000 	ldrb	r3, [r3]
    36d0:	e353000a 	cmp	r3, #10
    36d4:	1a000001 	bne	36e0 <_write_r+0x4c>
    36d8:	e3a0000d 	mov	r0, #13
    36dc:	ebfffe91 	bl	3128 <UART0WriteChar>
		UART0WriteChar(*p++);
    36e0:	e51b3010 	ldr	r3, [fp, #-16]
    36e4:	e5d33000 	ldrb	r3, [r3]
    36e8:	e1a02003 	mov	r2, r3
    36ec:	e51b3010 	ldr	r3, [fp, #-16]
    36f0:	e2833001 	add	r3, r3, #1
    36f4:	e50b3010 	str	r3, [fp, #-16]
    36f8:	e1a00002 	mov	r0, r2
    36fc:	ebfffe89 	bl	3128 <UART0WriteChar>
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    3700:	e51b3014 	ldr	r3, [fp, #-20]
    3704:	e2833001 	add	r3, r3, #1
    3708:	e50b3014 	str	r3, [fp, #-20]
    370c:	e51b2014 	ldr	r2, [fp, #-20]
    3710:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
    3714:	e1520003 	cmp	r2, r3
    3718:	3affffea 	bcc	36c8 <_write_r+0x34>
		if (*p == '\n' ) UART0WriteChar('\r');
		UART0WriteChar(*p++);
	}
	
	return len;
    371c:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
}
    3720:	e1a00003 	mov	r0, r3
    3724:	e24bd00c 	sub	sp, fp, #12
    3728:	e89d6800 	ldm	sp, {fp, sp, lr}
    372c:	e12fff1e 	bx	lr

00003730 <_close_r>:

int _close_r(
    struct _reent *r, 
    int file)
{
    3730:	e1a0c00d 	mov	ip, sp
    3734:	e92dd800 	push	{fp, ip, lr, pc}
    3738:	e24cb004 	sub	fp, ip, #4
    373c:	e24dd008 	sub	sp, sp, #8
    3740:	e50b0010 	str	r0, [fp, #-16]
    3744:	e50b1014 	str	r1, [fp, #-20]
	return 0;
    3748:	e3a03000 	mov	r3, #0
}
    374c:	e1a00003 	mov	r0, r3
    3750:	e24bd00c 	sub	sp, fp, #12
    3754:	e89d6800 	ldm	sp, {fp, sp, lr}
    3758:	e12fff1e 	bx	lr

0000375c <_lseek_r>:
_off_t _lseek_r(
    struct _reent *r, 
    int file, 
    _off_t ptr, 
    int dir)
{
    375c:	e1a0c00d 	mov	ip, sp
    3760:	e92dd800 	push	{fp, ip, lr, pc}
    3764:	e24cb004 	sub	fp, ip, #4
    3768:	e24dd010 	sub	sp, sp, #16
    376c:	e50b0010 	str	r0, [fp, #-16]
    3770:	e50b1014 	str	r1, [fp, #-20]
    3774:	e50b2018 	str	r2, [fp, #-24]
    3778:	e50b301c 	str	r3, [fp, #-28]
	return (_off_t)0;	/*  Always indicate we are at file beginning.	*/
    377c:	e3a03000 	mov	r3, #0
}
    3780:	e1a00003 	mov	r0, r3
    3784:	e24bd00c 	sub	sp, fp, #12
    3788:	e89d6800 	ldm	sp, {fp, sp, lr}
    378c:	e12fff1e 	bx	lr

00003790 <_fstat_r>:

int _fstat_r(
    struct _reent *r, 
    int file, 
    struct stat *st)
{
    3790:	e1a0c00d 	mov	ip, sp
    3794:	e92dd800 	push	{fp, ip, lr, pc}
    3798:	e24cb004 	sub	fp, ip, #4
    379c:	e24dd00c 	sub	sp, sp, #12
    37a0:	e50b0010 	str	r0, [fp, #-16]
    37a4:	e50b1014 	str	r1, [fp, #-20]
    37a8:	e50b2018 	str	r2, [fp, #-24]
	/*  Always set as character device.				*/
	st->st_mode = S_IFCHR;	
    37ac:	e51b2018 	ldr	r2, [fp, #-24]
    37b0:	e3a03a02 	mov	r3, #8192	; 0x2000
    37b4:	e5823004 	str	r3, [r2, #4]
		/* assigned to strong type with implicit 	*/
		/* signed/unsigned conversion.  Required by 	*/
		/* newlib.					*/

	return 0;
    37b8:	e3a03000 	mov	r3, #0
}
    37bc:	e1a00003 	mov	r0, r3
    37c0:	e24bd00c 	sub	sp, fp, #12
    37c4:	e89d6800 	ldm	sp, {fp, sp, lr}
    37c8:	e12fff1e 	bx	lr

000037cc <isatty>:

int isatty(int file); /* avoid warning */

int isatty(int file)
{
    37cc:	e1a0c00d 	mov	ip, sp
    37d0:	e92dd800 	push	{fp, ip, lr, pc}
    37d4:	e24cb004 	sub	fp, ip, #4
    37d8:	e24dd004 	sub	sp, sp, #4
    37dc:	e50b0010 	str	r0, [fp, #-16]
	return 1;
    37e0:	e3a03001 	mov	r3, #1
}
    37e4:	e1a00003 	mov	r0, r3
    37e8:	e24bd00c 	sub	sp, fp, #12
    37ec:	e89d6800 	ldm	sp, {fp, sp, lr}
    37f0:	e12fff1e 	bx	lr

000037f4 <_sbrk_r>:
/* messages must be suppressed.						*/

void * _sbrk_r(
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
    37f4:	e1a0c00d 	mov	ip, sp
    37f8:	e92dd800 	push	{fp, ip, lr, pc}
    37fc:	e24cb004 	sub	fp, ip, #4
    3800:	e24dd00c 	sub	sp, sp, #12
    3804:	e50b0014 	str	r0, [fp, #-20]
    3808:	e50b1018 	str	r1, [fp, #-24]
	char  *base;		/*  errno should be set to  ENOMEM on error	*/

	if (!heap_ptr) {	/*  Initialize if first time through.		*/
    380c:	e59f304c 	ldr	r3, [pc, #76]	; 3860 <_sbrk_r+0x6c>
    3810:	e5933000 	ldr	r3, [r3]
    3814:	e3530000 	cmp	r3, #0
    3818:	1a000002 	bne	3828 <_sbrk_r+0x34>
		heap_ptr = _end;
    381c:	e59f203c 	ldr	r2, [pc, #60]	; 3860 <_sbrk_r+0x6c>
    3820:	e59f303c 	ldr	r3, [pc, #60]	; 3864 <_sbrk_r+0x70>
    3824:	e5823000 	str	r3, [r2]
	}
	base = heap_ptr;	/*  Point to end of heap.			*/
    3828:	e59f3030 	ldr	r3, [pc, #48]	; 3860 <_sbrk_r+0x6c>
    382c:	e5933000 	ldr	r3, [r3]
    3830:	e50b3010 	str	r3, [fp, #-16]
	heap_ptr += nbytes;	/*  Increase heap.				*/
    3834:	e59f3024 	ldr	r3, [pc, #36]	; 3860 <_sbrk_r+0x6c>
    3838:	e5932000 	ldr	r2, [r3]
    383c:	e51b3018 	ldr	r3, [fp, #-24]
    3840:	e0822003 	add	r2, r2, r3
    3844:	e59f3014 	ldr	r3, [pc, #20]	; 3860 <_sbrk_r+0x6c>
    3848:	e5832000 	str	r2, [r3]
	
	return base;		/*  Return pointer to start of new heap area.	*/
    384c:	e51b3010 	ldr	r3, [fp, #-16]
}
    3850:	e1a00003 	mov	r0, r3
    3854:	e24bd00c 	sub	sp, fp, #12
    3858:	e89d6800 	ldm	sp, {fp, sp, lr}
    385c:	e12fff1e 	bx	lr
    3860:	400009f8 	.word	0x400009f8
    3864:	40003880 	.word	0x40003880

00003868 <I2C0MasterHandler>:
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void I2C0MasterHandler (void) __irq 
{
    3868:	e1a0c00d 	mov	ip, sp
    386c:	e92dd800 	push	{fp, ip, lr, pc}
    3870:	e24cb004 	sub	fp, ip, #4
    3874:	e24dd004 	sub	sp, sp, #4
    BYTE StatValue;

    /* this handler deals with master read and master write only */
    StatValue = I20STAT;
    3878:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    387c:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3880:	e5933000 	ldr	r3, [r3]
    3884:	e54b300d 	strb	r3, [fp, #-13]
    
    IENABLE;   
    switch ( StatValue )
    3888:	e55b300d 	ldrb	r3, [fp, #-13]
    388c:	e2433008 	sub	r3, r3, #8
    3890:	e3530050 	cmp	r3, #80	; 0x50
    3894:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    3898:	ea000106 	b	3cb8 <I2C0MasterHandler+0x450>
    389c:	000039e0 	.word	0x000039e0
    38a0:	00003cb8 	.word	0x00003cb8
    38a4:	00003cb8 	.word	0x00003cb8
    38a8:	00003cb8 	.word	0x00003cb8
    38ac:	00003cb8 	.word	0x00003cb8
    38b0:	00003cb8 	.word	0x00003cb8
    38b4:	00003cb8 	.word	0x00003cb8
    38b8:	00003cb8 	.word	0x00003cb8
    38bc:	00003a18 	.word	0x00003a18
    38c0:	00003cb8 	.word	0x00003cb8
    38c4:	00003cb8 	.word	0x00003cb8
    38c8:	00003cb8 	.word	0x00003cb8
    38cc:	00003cb8 	.word	0x00003cb8
    38d0:	00003cb8 	.word	0x00003cb8
    38d4:	00003cb8 	.word	0x00003cb8
    38d8:	00003cb8 	.word	0x00003cb8
    38dc:	00003a70 	.word	0x00003a70
    38e0:	00003cb8 	.word	0x00003cb8
    38e4:	00003cb8 	.word	0x00003cb8
    38e8:	00003cb8 	.word	0x00003cb8
    38ec:	00003cb8 	.word	0x00003cb8
    38f0:	00003cb8 	.word	0x00003cb8
    38f4:	00003cb8 	.word	0x00003cb8
    38f8:	00003cb8 	.word	0x00003cb8
    38fc:	00003c94 	.word	0x00003c94
    3900:	00003cb8 	.word	0x00003cb8
    3904:	00003cb8 	.word	0x00003cb8
    3908:	00003cb8 	.word	0x00003cb8
    390c:	00003cb8 	.word	0x00003cb8
    3910:	00003cb8 	.word	0x00003cb8
    3914:	00003cb8 	.word	0x00003cb8
    3918:	00003cb8 	.word	0x00003cb8
    391c:	00003ad8 	.word	0x00003ad8
    3920:	00003cb8 	.word	0x00003cb8
    3924:	00003cb8 	.word	0x00003cb8
    3928:	00003cb8 	.word	0x00003cb8
    392c:	00003cb8 	.word	0x00003cb8
    3930:	00003cb8 	.word	0x00003cb8
    3934:	00003cb8 	.word	0x00003cb8
    3938:	00003cb8 	.word	0x00003cb8
    393c:	00003ad8 	.word	0x00003ad8
    3940:	00003cb8 	.word	0x00003cb8
    3944:	00003cb8 	.word	0x00003cb8
    3948:	00003cb8 	.word	0x00003cb8
    394c:	00003cb8 	.word	0x00003cb8
    3950:	00003cb8 	.word	0x00003cb8
    3954:	00003cb8 	.word	0x00003cb8
    3958:	00003cb8 	.word	0x00003cb8
    395c:	00003cb8 	.word	0x00003cb8
    3960:	00003cb8 	.word	0x00003cb8
    3964:	00003cb8 	.word	0x00003cb8
    3968:	00003cb8 	.word	0x00003cb8
    396c:	00003cb8 	.word	0x00003cb8
    3970:	00003cb8 	.word	0x00003cb8
    3974:	00003cb8 	.word	0x00003cb8
    3978:	00003cb8 	.word	0x00003cb8
    397c:	00003bdc 	.word	0x00003bdc
    3980:	00003cb8 	.word	0x00003cb8
    3984:	00003cb8 	.word	0x00003cb8
    3988:	00003cb8 	.word	0x00003cb8
    398c:	00003cb8 	.word	0x00003cb8
    3990:	00003cb8 	.word	0x00003cb8
    3994:	00003cb8 	.word	0x00003cb8
    3998:	00003cb8 	.word	0x00003cb8
    399c:	00003c94 	.word	0x00003c94
    39a0:	00003cb8 	.word	0x00003cb8
    39a4:	00003cb8 	.word	0x00003cb8
    39a8:	00003cb8 	.word	0x00003cb8
    39ac:	00003cb8 	.word	0x00003cb8
    39b0:	00003cb8 	.word	0x00003cb8
    39b4:	00003cb8 	.word	0x00003cb8
    39b8:	00003cb8 	.word	0x00003cb8
    39bc:	00003bf4 	.word	0x00003bf4
    39c0:	00003cb8 	.word	0x00003cb8
    39c4:	00003cb8 	.word	0x00003cb8
    39c8:	00003cb8 	.word	0x00003cb8
    39cc:	00003cb8 	.word	0x00003cb8
    39d0:	00003cb8 	.word	0x00003cb8
    39d4:	00003cb8 	.word	0x00003cb8
    39d8:	00003cb8 	.word	0x00003cb8
    39dc:	00003bf4 	.word	0x00003bf4
    {
	case 0x08:			/* A Start condition is issued. */
	I20DAT = I2CMasterBuffer[0];
    39e0:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    39e4:	e2822907 	add	r2, r2, #114688	; 0x1c000
    39e8:	e59f32f8 	ldr	r3, [pc, #760]	; 3ce8 <I2C0MasterHandler+0x480>
    39ec:	e5d33000 	ldrb	r3, [r3]
    39f0:	e5823000 	str	r3, [r2]
	I20CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    39f4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    39f8:	e2833907 	add	r3, r3, #114688	; 0x1c000
    39fc:	e2833018 	add	r3, r3, #24
    3a00:	e3a02028 	mov	r2, #40	; 0x28
    3a04:	e5832000 	str	r2, [r3]
	I2CMasterState = I2C_STARTED;
    3a08:	e59f22dc 	ldr	r2, [pc, #732]	; 3cec <I2C0MasterHandler+0x484>
    3a0c:	e3a03001 	mov	r3, #1
    3a10:	e5823000 	str	r3, [r2]
	break;
    3a14:	ea0000ac 	b	3ccc <I2C0MasterHandler+0x464>
	
	case 0x10:			/* A repeated started is issued */
	if (  I2CCmd == GET_DEVICE_ID || I2CCmd == GET_TEMPERATURE )
    3a18:	e59f32d0 	ldr	r3, [pc, #720]	; 3cf0 <I2C0MasterHandler+0x488>
    3a1c:	e5933000 	ldr	r3, [r3]
    3a20:	e3530001 	cmp	r3, #1
    3a24:	0a000003 	beq	3a38 <I2C0MasterHandler+0x1d0>
    3a28:	e59f32c0 	ldr	r3, [pc, #704]	; 3cf0 <I2C0MasterHandler+0x488>
    3a2c:	e5933000 	ldr	r3, [r3]
    3a30:	e3530002 	cmp	r3, #2
    3a34:	1a000004 	bne	3a4c <I2C0MasterHandler+0x1e4>
	{
	    I20DAT = I2CMasterBuffer[2];
    3a38:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    3a3c:	e2822907 	add	r2, r2, #114688	; 0x1c000
    3a40:	e59f32a0 	ldr	r3, [pc, #672]	; 3ce8 <I2C0MasterHandler+0x480>
    3a44:	e5d33002 	ldrb	r3, [r3, #2]
    3a48:	e5823000 	str	r3, [r2]
	}
	I20CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    3a4c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3a50:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3a54:	e2833018 	add	r3, r3, #24
    3a58:	e3a02028 	mov	r2, #40	; 0x28
    3a5c:	e5832000 	str	r2, [r3]
	I2CMasterState = I2C_RESTARTED;
    3a60:	e59f2284 	ldr	r2, [pc, #644]	; 3cec <I2C0MasterHandler+0x484>
    3a64:	e3a03002 	mov	r3, #2
    3a68:	e5823000 	str	r3, [r2]
	break;
    3a6c:	ea000096 	b	3ccc <I2C0MasterHandler+0x464>
	
	case 0x18:			/* Regardless, it's a ACK */
	if ( I2CMasterState == I2C_STARTED )
    3a70:	e59f3274 	ldr	r3, [pc, #628]	; 3cec <I2C0MasterHandler+0x484>
    3a74:	e5933000 	ldr	r3, [r3]
    3a78:	e3530001 	cmp	r3, #1
    3a7c:	1a00000f 	bne	3ac0 <I2C0MasterHandler+0x258>
	{
	    I20DAT = I2CMasterBuffer[1+WrIndex];
    3a80:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    3a84:	e2822907 	add	r2, r2, #114688	; 0x1c000
    3a88:	e59f3264 	ldr	r3, [pc, #612]	; 3cf4 <I2C0MasterHandler+0x48c>
    3a8c:	e5933000 	ldr	r3, [r3]
    3a90:	e2831001 	add	r1, r3, #1
    3a94:	e59f324c 	ldr	r3, [pc, #588]	; 3ce8 <I2C0MasterHandler+0x480>
    3a98:	e7d33001 	ldrb	r3, [r3, r1]
    3a9c:	e5823000 	str	r3, [r2]
	    WrIndex++;
    3aa0:	e59f324c 	ldr	r3, [pc, #588]	; 3cf4 <I2C0MasterHandler+0x48c>
    3aa4:	e5933000 	ldr	r3, [r3]
    3aa8:	e2832001 	add	r2, r3, #1
    3aac:	e59f3240 	ldr	r3, [pc, #576]	; 3cf4 <I2C0MasterHandler+0x48c>
    3ab0:	e5832000 	str	r2, [r3]
	    I2CMasterState = DATA_ACK;
    3ab4:	e59f2230 	ldr	r2, [pc, #560]	; 3cec <I2C0MasterHandler+0x484>
    3ab8:	e3a03004 	mov	r3, #4
    3abc:	e5823000 	str	r3, [r2]
	}
	I20CONCLR = I2CONCLR_SIC;
    3ac0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3ac4:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3ac8:	e2833018 	add	r3, r3, #24
    3acc:	e3a02008 	mov	r2, #8
    3ad0:	e5832000 	str	r2, [r3]
	break;
    3ad4:	ea00007c 	b	3ccc <I2C0MasterHandler+0x464>
	
	case 0x28:	/* Data byte has been transmitted, regardless ACK or NACK */
	case 0x30:
	if ( WrIndex != I2CWriteLength )
    3ad8:	e59f3214 	ldr	r3, [pc, #532]	; 3cf4 <I2C0MasterHandler+0x48c>
    3adc:	e5932000 	ldr	r2, [r3]
    3ae0:	e59f3210 	ldr	r3, [pc, #528]	; 3cf8 <I2C0MasterHandler+0x490>
    3ae4:	e5933000 	ldr	r3, [r3]
    3ae8:	e1520003 	cmp	r2, r3
    3aec:	0a000025 	beq	3b88 <I2C0MasterHandler+0x320>
	{   
	    I20DAT = I2CMasterBuffer[1+WrIndex]; /* this should be the last one */
    3af0:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    3af4:	e2822907 	add	r2, r2, #114688	; 0x1c000
    3af8:	e59f31f4 	ldr	r3, [pc, #500]	; 3cf4 <I2C0MasterHandler+0x48c>
    3afc:	e5933000 	ldr	r3, [r3]
    3b00:	e2831001 	add	r1, r3, #1
    3b04:	e59f31dc 	ldr	r3, [pc, #476]	; 3ce8 <I2C0MasterHandler+0x480>
    3b08:	e7d33001 	ldrb	r3, [r3, r1]
    3b0c:	e5823000 	str	r3, [r2]
	    WrIndex++;
    3b10:	e59f31dc 	ldr	r3, [pc, #476]	; 3cf4 <I2C0MasterHandler+0x48c>
    3b14:	e5933000 	ldr	r3, [r3]
    3b18:	e2832001 	add	r2, r3, #1
    3b1c:	e59f31d0 	ldr	r3, [pc, #464]	; 3cf4 <I2C0MasterHandler+0x48c>
    3b20:	e5832000 	str	r2, [r3]
	    if ( WrIndex != I2CWriteLength )
    3b24:	e59f31c8 	ldr	r3, [pc, #456]	; 3cf4 <I2C0MasterHandler+0x48c>
    3b28:	e5932000 	ldr	r2, [r3]
    3b2c:	e59f31c4 	ldr	r3, [pc, #452]	; 3cf8 <I2C0MasterHandler+0x490>
    3b30:	e5933000 	ldr	r3, [r3]
    3b34:	e1520003 	cmp	r2, r3
    3b38:	0a000003 	beq	3b4c <I2C0MasterHandler+0x2e4>
	    {   
		I2CMasterState = DATA_ACK;
    3b3c:	e59f21a8 	ldr	r2, [pc, #424]	; 3cec <I2C0MasterHandler+0x484>
    3b40:	e3a03004 	mov	r3, #4
    3b44:	e5823000 	str	r3, [r2]
    3b48:	ea00001d 	b	3bc4 <I2C0MasterHandler+0x35c>
	    }
	    else
	    {
		I2CMasterState = DATA_NACK;
    3b4c:	e59f2198 	ldr	r2, [pc, #408]	; 3cec <I2C0MasterHandler+0x484>
    3b50:	e3a03005 	mov	r3, #5
    3b54:	e5823000 	str	r3, [r2]
		if ( I2CReadLength != 0 )
    3b58:	e59f319c 	ldr	r3, [pc, #412]	; 3cfc <I2C0MasterHandler+0x494>
    3b5c:	e5933000 	ldr	r3, [r3]
    3b60:	e3530000 	cmp	r3, #0
    3b64:	0a000016 	beq	3bc4 <I2C0MasterHandler+0x35c>
		{
		    I20CONSET = I2CONSET_STA;	/* Set Repeated-start flag */
    3b68:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3b6c:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3b70:	e3a02020 	mov	r2, #32
    3b74:	e5832000 	str	r2, [r3]
		    I2CMasterState = I2C_REPEATED_START;
    3b78:	e59f216c 	ldr	r2, [pc, #364]	; 3cec <I2C0MasterHandler+0x484>
    3b7c:	e3a03003 	mov	r3, #3
    3b80:	e5823000 	str	r3, [r2]
    3b84:	ea00000e 	b	3bc4 <I2C0MasterHandler+0x35c>
		}
	    }
	}
	else
	{
	    if ( I2CReadLength != 0 )
    3b88:	e59f316c 	ldr	r3, [pc, #364]	; 3cfc <I2C0MasterHandler+0x494>
    3b8c:	e5933000 	ldr	r3, [r3]
    3b90:	e3530000 	cmp	r3, #0
    3b94:	0a000007 	beq	3bb8 <I2C0MasterHandler+0x350>
	    {
		I20CONSET = I2CONSET_STA;	/* Set Repeated-start flag */
    3b98:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3b9c:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3ba0:	e3a02020 	mov	r2, #32
    3ba4:	e5832000 	str	r2, [r3]
		I2CMasterState = I2C_REPEATED_START;
    3ba8:	e59f213c 	ldr	r2, [pc, #316]	; 3cec <I2C0MasterHandler+0x484>
    3bac:	e3a03003 	mov	r3, #3
    3bb0:	e5823000 	str	r3, [r2]
    3bb4:	ea000002 	b	3bc4 <I2C0MasterHandler+0x35c>
	    }
	    else
	    {
		I2CMasterState = DATA_NACK;
    3bb8:	e59f212c 	ldr	r2, [pc, #300]	; 3cec <I2C0MasterHandler+0x484>
    3bbc:	e3a03005 	mov	r3, #5
    3bc0:	e5823000 	str	r3, [r2]
	    }
	}
	I20CONCLR = I2CONCLR_SIC;
    3bc4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3bc8:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3bcc:	e2833018 	add	r3, r3, #24
    3bd0:	e3a02008 	mov	r2, #8
    3bd4:	e5832000 	str	r2, [r3]
	break;
    3bd8:	ea00003b 	b	3ccc <I2C0MasterHandler+0x464>
	
	case 0x40:	/* Master Receive, SLA_R has been sent */
	I20CONCLR = I2CONCLR_SIC;
    3bdc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3be0:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3be4:	e2833018 	add	r3, r3, #24
    3be8:	e3a02008 	mov	r2, #8
    3bec:	e5832000 	str	r2, [r3]
	break;
    3bf0:	ea000035 	b	3ccc <I2C0MasterHandler+0x464>
	
	case 0x50:	/* Data byte has been received, regardless following ACK or NACK */
	case 0x58:
	I2CMasterBuffer[3+RdIndex] = I20DAT;
    3bf4:	e59f3104 	ldr	r3, [pc, #260]	; 3d00 <I2C0MasterHandler+0x498>
    3bf8:	e5933000 	ldr	r3, [r3]
    3bfc:	e2831003 	add	r1, r3, #3
    3c00:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    3c04:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3c08:	e5933000 	ldr	r3, [r3]
    3c0c:	e20330ff 	and	r3, r3, #255	; 0xff
    3c10:	e59f20d0 	ldr	r2, [pc, #208]	; 3ce8 <I2C0MasterHandler+0x480>
    3c14:	e7c23001 	strb	r3, [r2, r1]
	RdIndex++;
    3c18:	e59f30e0 	ldr	r3, [pc, #224]	; 3d00 <I2C0MasterHandler+0x498>
    3c1c:	e5933000 	ldr	r3, [r3]
    3c20:	e2832001 	add	r2, r3, #1
    3c24:	e59f30d4 	ldr	r3, [pc, #212]	; 3d00 <I2C0MasterHandler+0x498>
    3c28:	e5832000 	str	r2, [r3]
	if ( RdIndex != I2CReadLength )
    3c2c:	e59f30cc 	ldr	r3, [pc, #204]	; 3d00 <I2C0MasterHandler+0x498>
    3c30:	e5932000 	ldr	r2, [r3]
    3c34:	e59f30c0 	ldr	r3, [pc, #192]	; 3cfc <I2C0MasterHandler+0x494>
    3c38:	e5933000 	ldr	r3, [r3]
    3c3c:	e1520003 	cmp	r2, r3
    3c40:	0a000003 	beq	3c54 <I2C0MasterHandler+0x3ec>
	{   
	    I2CMasterState = DATA_ACK;
    3c44:	e59f20a0 	ldr	r2, [pc, #160]	; 3cec <I2C0MasterHandler+0x484>
    3c48:	e3a03004 	mov	r3, #4
    3c4c:	e5823000 	str	r3, [r2]
    3c50:	ea000005 	b	3c6c <I2C0MasterHandler+0x404>
	}
	else
	{
	    RdIndex = 0;
    3c54:	e59f20a4 	ldr	r2, [pc, #164]	; 3d00 <I2C0MasterHandler+0x498>
    3c58:	e3a03000 	mov	r3, #0
    3c5c:	e5823000 	str	r3, [r2]
	    I2CMasterState = DATA_NACK;
    3c60:	e59f2084 	ldr	r2, [pc, #132]	; 3cec <I2C0MasterHandler+0x484>
    3c64:	e3a03005 	mov	r3, #5
    3c68:	e5823000 	str	r3, [r2]
	}
	I20CONSET = I2CONSET_AA;	/* assert ACK after data is received */
    3c6c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3c70:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3c74:	e3a02004 	mov	r2, #4
    3c78:	e5832000 	str	r2, [r3]
	I20CONCLR = I2CONCLR_SIC;
    3c7c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3c80:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3c84:	e2833018 	add	r3, r3, #24
    3c88:	e3a02008 	mov	r2, #8
    3c8c:	e5832000 	str	r2, [r3]
	break;
    3c90:	ea00000d 	b	3ccc <I2C0MasterHandler+0x464>
	
	case 0x20:			/* regardless, it's a NACK */
	case 0x48:
	I20CONCLR = I2CONCLR_SIC;
    3c94:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3c98:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3c9c:	e2833018 	add	r3, r3, #24
    3ca0:	e3a02008 	mov	r2, #8
    3ca4:	e5832000 	str	r2, [r3]
	I2CMasterState = DATA_NACK;
    3ca8:	e59f203c 	ldr	r2, [pc, #60]	; 3cec <I2C0MasterHandler+0x484>
    3cac:	e3a03005 	mov	r3, #5
    3cb0:	e5823000 	str	r3, [r2]
	break;
    3cb4:	ea000004 	b	3ccc <I2C0MasterHandler+0x464>
	
	case 0x38:			/* Arbitration lost, in this example, we don't
					deal with multiple master situation */
	default:
	I20CONCLR = I2CONCLR_SIC;	
    3cb8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3cbc:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3cc0:	e2833018 	add	r3, r3, #24
    3cc4:	e3a02008 	mov	r2, #8
    3cc8:	e5832000 	str	r2, [r3]
	break;
    }
    
    IDISABLE;
    VICVectAddr = 0;		/* Acknowledge Interrupt */
    3ccc:	e3a03000 	mov	r3, #0
    3cd0:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    3cd4:	e3a02000 	mov	r2, #0
    3cd8:	e5832000 	str	r2, [r3]

}
    3cdc:	e24bd00c 	sub	sp, fp, #12
    3ce0:	e89d6800 	ldm	sp, {fp, sp, lr}
    3ce4:	e12fff1e 	bx	lr
    3ce8:	40001bac 	.word	0x40001bac
    3cec:	400009fc 	.word	0x400009fc
    3cf0:	40001bcc 	.word	0x40001bcc
    3cf4:	40000a0c 	.word	0x40000a0c
    3cf8:	40001bd0 	.word	0x40001bd0
    3cfc:	40001b84 	.word	0x40001b84
    3d00:	40000a08 	.word	0x40000a08

00003d04 <I2C0_send_motordata>:


void I2C0_send_motordata(void)
{
    3d04:	e1a0c00d 	mov	ip, sp
    3d08:	e92dd800 	push	{fp, ip, lr, pc}
    3d0c:	e24cb004 	sub	fp, ip, #4
	WrIndex=0;
    3d10:	e59f2080 	ldr	r2, [pc, #128]	; 3d98 <I2C0_send_motordata+0x94>
    3d14:	e3a03000 	mov	r3, #0
    3d18:	e5823000 	str	r3, [r2]
	RdIndex=0;
    3d1c:	e59f2078 	ldr	r2, [pc, #120]	; 3d9c <I2C0_send_motordata+0x98>
    3d20:	e3a03000 	mov	r3, #0
    3d24:	e5823000 	str	r3, [r2]
	I2CWriteLength = 5;
    3d28:	e59f2070 	ldr	r2, [pc, #112]	; 3da0 <I2C0_send_motordata+0x9c>
    3d2c:	e3a03005 	mov	r3, #5
    3d30:	e5823000 	str	r3, [r2]
	I2CReadLength = 0;
    3d34:	e59f2068 	ldr	r2, [pc, #104]	; 3da4 <I2C0_send_motordata+0xa0>
    3d38:	e3a03000 	mov	r3, #0
    3d3c:	e5823000 	str	r3, [r2]
    I2CMasterBuffer[0] = 0x02;
    3d40:	e59f2060 	ldr	r2, [pc, #96]	; 3da8 <I2C0_send_motordata+0xa4>
    3d44:	e3a03002 	mov	r3, #2
    3d48:	e5c23000 	strb	r3, [r2]
    I2CMasterBuffer[1] = 100;
    3d4c:	e59f2054 	ldr	r2, [pc, #84]	; 3da8 <I2C0_send_motordata+0xa4>
    3d50:	e3a03064 	mov	r3, #100	; 0x64
    3d54:	e5c23001 	strb	r3, [r2, #1]
    I2CMasterBuffer[2] = 100;
    3d58:	e59f2048 	ldr	r2, [pc, #72]	; 3da8 <I2C0_send_motordata+0xa4>
    3d5c:	e3a03064 	mov	r3, #100	; 0x64
    3d60:	e5c23002 	strb	r3, [r2, #2]
    I2CMasterBuffer[3] = 100;
    3d64:	e59f203c 	ldr	r2, [pc, #60]	; 3da8 <I2C0_send_motordata+0xa4>
    3d68:	e3a03064 	mov	r3, #100	; 0x64
    3d6c:	e5c23003 	strb	r3, [r2, #3]
    I2CMasterBuffer[4] = 1;
    3d70:	e59f2030 	ldr	r2, [pc, #48]	; 3da8 <I2C0_send_motordata+0xa4>
    3d74:	e3a03001 	mov	r3, #1
    3d78:	e5c23004 	strb	r3, [r2, #4]

    //I20CONSET = I2CONSET_STA;	/* Set Start flag */
    //if ( !I2CStart() ) I2CStop();
    I2CCmd = GET_TEMPERATURE;
    3d7c:	e59f2028 	ldr	r2, [pc, #40]	; 3dac <I2C0_send_motordata+0xa8>
    3d80:	e3a03002 	mov	r3, #2
    3d84:	e5823000 	str	r3, [r2]
	I2CEngine();
    3d88:	eb000066 	bl	3f28 <I2CEngine>
}
    3d8c:	e24bd00c 	sub	sp, fp, #12
    3d90:	e89d6800 	ldm	sp, {fp, sp, lr}
    3d94:	e12fff1e 	bx	lr
    3d98:	40000a0c 	.word	0x40000a0c
    3d9c:	40000a08 	.word	0x40000a08
    3da0:	40001bd0 	.word	0x40001bd0
    3da4:	40001b84 	.word	0x40001b84
    3da8:	40001bac 	.word	0x40001bac
    3dac:	40001bcc 	.word	0x40001bcc

00003db0 <I2CStart>:
** parameters:			None
** Returned value:		true or false, return false if timed out
** 
*****************************************************************************/
unsigned int I2CStart( void )
{
    3db0:	e1a0c00d 	mov	ip, sp
    3db4:	e92dd800 	push	{fp, ip, lr, pc}
    3db8:	e24cb004 	sub	fp, ip, #4
    3dbc:	e24dd008 	sub	sp, sp, #8
    unsigned int timeout = 0;
    3dc0:	e3a03000 	mov	r3, #0
    3dc4:	e50b3014 	str	r3, [fp, #-20]
    unsigned int returnValue = FALSE;
    3dc8:	e3a03000 	mov	r3, #0
    3dcc:	e50b3010 	str	r3, [fp, #-16]
 
    /*--- Issue a start condition ---*/
    I20CONSET = I2CONSET_STA;	/* Set Start flag */
    3dd0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3dd4:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3dd8:	e3a02020 	mov	r2, #32
    3ddc:	e5832000 	str	r2, [r3]
    
    /*--- Wait until START transmitted ---*/
    while( 1 )
    {
	if ( I2CMasterState == I2C_STARTED )
    3de0:	e59f3058 	ldr	r3, [pc, #88]	; 3e40 <I2CStart+0x90>
    3de4:	e5933000 	ldr	r3, [r3]
    3de8:	e3530001 	cmp	r3, #1
    3dec:	1a000002 	bne	3dfc <I2CStart+0x4c>
	{
	    returnValue = TRUE;
    3df0:	e3a03001 	mov	r3, #1
    3df4:	e50b3010 	str	r3, [fp, #-16]
	    break;	
    3df8:	ea00000b 	b	3e2c <I2CStart+0x7c>
	}
	if ( timeout >= MAX_TIMEOUT )
    3dfc:	e51b2014 	ldr	r2, [fp, #-20]
    3e00:	e3a03401 	mov	r3, #16777216	; 0x1000000
    3e04:	e2433002 	sub	r3, r3, #2
    3e08:	e1520003 	cmp	r2, r3
    3e0c:	9a000002 	bls	3e1c <I2CStart+0x6c>
	{
	    returnValue = FALSE;
    3e10:	e3a03000 	mov	r3, #0
    3e14:	e50b3010 	str	r3, [fp, #-16]
	    break;
    3e18:	ea000003 	b	3e2c <I2CStart+0x7c>
	}
	timeout++;
    3e1c:	e51b3014 	ldr	r3, [fp, #-20]
    3e20:	e2833001 	add	r3, r3, #1
    3e24:	e50b3014 	str	r3, [fp, #-20]
    }
    3e28:	eaffffec 	b	3de0 <I2CStart+0x30>
    return( returnValue );
    3e2c:	e51b3010 	ldr	r3, [fp, #-16]
}
    3e30:	e1a00003 	mov	r0, r3
    3e34:	e24bd00c 	sub	sp, fp, #12
    3e38:	e89d6800 	ldm	sp, {fp, sp, lr}
    3e3c:	e12fff1e 	bx	lr
    3e40:	400009fc 	.word	0x400009fc

00003e44 <I2CStop>:
** parameters:			None
** Returned value:		true or never return
** 
*****************************************************************************/
unsigned int I2CStop( void )
{
    3e44:	e1a0c00d 	mov	ip, sp
    3e48:	e92dd800 	push	{fp, ip, lr, pc}
    3e4c:	e24cb004 	sub	fp, ip, #4
    I20CONSET = I2CONSET_STO;      /* Set Stop flag */ 
    3e50:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3e54:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3e58:	e3a02010 	mov	r2, #16
    3e5c:	e5832000 	str	r2, [r3]
    I20CONCLR = I2CONCLR_SIC;  /* Clear SI flag */ 
    3e60:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3e64:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3e68:	e2833018 	add	r3, r3, #24
    3e6c:	e3a02008 	mov	r2, #8
    3e70:	e5832000 	str	r2, [r3]
            
    /*--- Wait for STOP detected ---*/
    while( I20CONSET & I2CONSET_STO );
    3e74:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3e78:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3e7c:	e5933000 	ldr	r3, [r3]
    3e80:	e2033010 	and	r3, r3, #16
    3e84:	e3530000 	cmp	r3, #0
    3e88:	1afffff9 	bne	3e74 <I2CStop+0x30>
    return TRUE;
    3e8c:	e3a03001 	mov	r3, #1
}
    3e90:	e1a00003 	mov	r0, r3
    3e94:	e24bd00c 	sub	sp, fp, #12
    3e98:	e89d6800 	ldm	sp, {fp, sp, lr}
    3e9c:	e12fff1e 	bx	lr

00003ea0 <I2CInit>:
** Returned value:		true or false, return false if the I2C
**				interrupt handler was not installed correctly
** 
*****************************************************************************/
void I2CInit( unsigned int I2cMode ) 
{
    3ea0:	e1a0c00d 	mov	ip, sp
    3ea4:	e92dd800 	push	{fp, ip, lr, pc}
    3ea8:	e24cb004 	sub	fp, ip, #4
    3eac:	e24dd004 	sub	sp, sp, #4
    3eb0:	e50b0010 	str	r0, [fp, #-16]
    IODIR0|= 0x0C;	/* set port 0.2 and port 0.3 to output, high */
    3eb4:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    3eb8:	e282290a 	add	r2, r2, #163840	; 0x28000
    3ebc:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    3ec0:	e283390a 	add	r3, r3, #163840	; 0x28000
    3ec4:	e5933000 	ldr	r3, [r3]
    3ec8:	e383300c 	orr	r3, r3, #12
    3ecc:	e5823000 	str	r3, [r2]
    IOSET0 = 0x0C;
    3ed0:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    3ed4:	e283390a 	add	r3, r3, #163840	; 0x28000
    3ed8:	e3a0200c 	mov	r2, #12
    3edc:	e5832000 	str	r2, [r3]

    /*--- Clear flags ---*/
    I20CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;    
    3ee0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3ee4:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3ee8:	e2833018 	add	r3, r3, #24
    3eec:	e3a0206c 	mov	r2, #108	; 0x6c
    3ef0:	e5832000 	str	r2, [r3]

    /*--- Reset registers ---*/
    I20SCLL   = I2SCLL_SCLL;
    3ef4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3ef8:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3efc:	e2833014 	add	r3, r3, #20
    3f00:	e3a02080 	mov	r2, #128	; 0x80
    3f04:	e5832000 	str	r2, [r3]
    I20SCLH   = I2SCLH_SCLH;
    3f08:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3f0c:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3f10:	e2833010 	add	r3, r3, #16
    3f14:	e3a02080 	mov	r2, #128	; 0x80
    3f18:	e5832000 	str	r2, [r3]
}
    3f1c:	e24bd00c 	sub	sp, fp, #12
    3f20:	e89d6800 	ldm	sp, {fp, sp, lr}
    3f24:	e12fff1e 	bx	lr

00003f28 <I2CEngine>:
**				start condition can never be generated and
**				timed out. 
** 
*****************************************************************************/
unsigned int I2CEngine( void ) 
{
    3f28:	e1a0c00d 	mov	ip, sp
    3f2c:	e92dd800 	push	{fp, ip, lr, pc}
    3f30:	e24cb004 	sub	fp, ip, #4
    3f34:	e24dd004 	sub	sp, sp, #4
    I2CMasterState = I2C_IDLE;
    3f38:	e59f206c 	ldr	r2, [pc, #108]	; 3fac <I2CEngine+0x84>
    3f3c:	e3a03000 	mov	r3, #0
    3f40:	e5823000 	str	r3, [r2]
    RdIndex = 0;
    3f44:	e59f2064 	ldr	r2, [pc, #100]	; 3fb0 <I2CEngine+0x88>
    3f48:	e3a03000 	mov	r3, #0
    3f4c:	e5823000 	str	r3, [r2]
    WrIndex = 0;
    3f50:	e59f205c 	ldr	r2, [pc, #92]	; 3fb4 <I2CEngine+0x8c>
    3f54:	e3a03000 	mov	r3, #0
    3f58:	e5823000 	str	r3, [r2]
    if ( I2CStart() != TRUE )
    3f5c:	ebffff93 	bl	3db0 <I2CStart>
    3f60:	e1a03000 	mov	r3, r0
    3f64:	e3530001 	cmp	r3, #1
    3f68:	0a000003 	beq	3f7c <I2CEngine+0x54>
    {
		I2CStop();
    3f6c:	ebffffb4 	bl	3e44 <I2CStop>
	return ( FALSE );
    3f70:	e3a03000 	mov	r3, #0
    3f74:	e50b3010 	str	r3, [fp, #-16]
    3f78:	ea000006 	b	3f98 <I2CEngine+0x70>
    }
    while ( 1 )
    {
	if ( I2CMasterState == DATA_NACK )
    3f7c:	e59f3028 	ldr	r3, [pc, #40]	; 3fac <I2CEngine+0x84>
    3f80:	e5933000 	ldr	r3, [r3]
    3f84:	e3530005 	cmp	r3, #5
    3f88:	1afffffb 	bne	3f7c <I2CEngine+0x54>
	{
	    I2CStop();
    3f8c:	ebffffac 	bl	3e44 <I2CStop>
	    break;
	}
    }    
    return ( TRUE );      
    3f90:	e3a03001 	mov	r3, #1
    3f94:	e50b3010 	str	r3, [fp, #-16]
	if ( I2CMasterState == DATA_NACK )
	{
	    I2CStop();
	    break;
	}
    }    
    3f98:	e51b3010 	ldr	r3, [fp, #-16]
    return ( TRUE );      
}
    3f9c:	e1a00003 	mov	r0, r3
    3fa0:	e24bd00c 	sub	sp, fp, #12
    3fa4:	e89d6800 	ldm	sp, {fp, sp, lr}
    3fa8:	e12fff1e 	bx	lr
    3fac:	400009fc 	.word	0x400009fc
    3fb0:	40000a08 	.word	0x40000a08
    3fb4:	40000a0c 	.word	0x40000a0c

00003fb8 <I2C1MasterHandler>:
** Returned value:		None
**
*****************************************************************************/

void I2C1MasterHandler (void) __irq
{
    3fb8:	e1a0c00d 	mov	ip, sp
    3fbc:	e92dd800 	push	{fp, ip, lr, pc}
    3fc0:	e24cb004 	sub	fp, ip, #4
    3fc4:	e24dd004 	sub	sp, sp, #4
    BYTE StatValue;

    /* this handler deals with master read and master write only */
    StatValue = I21STAT;
    3fc8:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    3fcc:	e2833917 	add	r3, r3, #376832	; 0x5c000
    3fd0:	e5933000 	ldr	r3, [r3]
    3fd4:	e54b300d 	strb	r3, [fp, #-13]

    IENABLE;
    switch ( StatValue )
    3fd8:	e55b300d 	ldrb	r3, [fp, #-13]
    3fdc:	e2433008 	sub	r3, r3, #8
    3fe0:	e3530028 	cmp	r3, #40	; 0x28
    3fe4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    3fe8:	ea00009e 	b	4268 <I2C1MasterHandler+0x2b0>
    3fec:	00004090 	.word	0x00004090
    3ff0:	00004268 	.word	0x00004268
    3ff4:	00004268 	.word	0x00004268
    3ff8:	00004268 	.word	0x00004268
    3ffc:	00004268 	.word	0x00004268
    4000:	00004268 	.word	0x00004268
    4004:	00004268 	.word	0x00004268
    4008:	00004268 	.word	0x00004268
    400c:	00004268 	.word	0x00004268
    4010:	00004268 	.word	0x00004268
    4014:	00004268 	.word	0x00004268
    4018:	00004268 	.word	0x00004268
    401c:	00004268 	.word	0x00004268
    4020:	00004268 	.word	0x00004268
    4024:	00004268 	.word	0x00004268
    4028:	00004268 	.word	0x00004268
    402c:	000040c8 	.word	0x000040c8
    4030:	00004268 	.word	0x00004268
    4034:	00004268 	.word	0x00004268
    4038:	00004268 	.word	0x00004268
    403c:	00004268 	.word	0x00004268
    4040:	00004268 	.word	0x00004268
    4044:	00004268 	.word	0x00004268
    4048:	00004268 	.word	0x00004268
    404c:	00004214 	.word	0x00004214
    4050:	00004268 	.word	0x00004268
    4054:	00004268 	.word	0x00004268
    4058:	00004268 	.word	0x00004268
    405c:	00004268 	.word	0x00004268
    4060:	00004268 	.word	0x00004268
    4064:	00004268 	.word	0x00004268
    4068:	00004268 	.word	0x00004268
    406c:	00004124 	.word	0x00004124
    4070:	00004268 	.word	0x00004268
    4074:	00004268 	.word	0x00004268
    4078:	00004268 	.word	0x00004268
    407c:	00004268 	.word	0x00004268
    4080:	00004268 	.word	0x00004268
    4084:	00004268 	.word	0x00004268
    4088:	00004268 	.word	0x00004268
    408c:	000041d4 	.word	0x000041d4
    {
	case 0x08:			/* A Start condition is issued. */
	I21DAT = I2C1MasterBuffer[0];
    4090:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    4094:	e2822917 	add	r2, r2, #376832	; 0x5c000
    4098:	e59f31f8 	ldr	r3, [pc, #504]	; 4298 <I2C1MasterHandler+0x2e0>
    409c:	e5d33000 	ldrb	r3, [r3]
    40a0:	e5823000 	str	r3, [r2]
	I21CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    40a4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    40a8:	e2833917 	add	r3, r3, #376832	; 0x5c000
    40ac:	e2833018 	add	r3, r3, #24
    40b0:	e3a02028 	mov	r2, #40	; 0x28
    40b4:	e5832000 	str	r2, [r3]
	I2C1MasterState = I2C_STARTED;
    40b8:	e59f21dc 	ldr	r2, [pc, #476]	; 429c <I2C1MasterHandler+0x2e4>
    40bc:	e3a03001 	mov	r3, #1
    40c0:	e5823000 	str	r3, [r2]
	break;
    40c4:	ea00006c 	b	427c <I2C1MasterHandler+0x2c4>


	case 0x18:			/* Regardless, it's a ACK */
	if ( I2C1MasterState == I2C_STARTED )
    40c8:	e59f31cc 	ldr	r3, [pc, #460]	; 429c <I2C1MasterHandler+0x2e4>
    40cc:	e5933000 	ldr	r3, [r3]
    40d0:	e3530001 	cmp	r3, #1
    40d4:	1a00000c 	bne	410c <I2C1MasterHandler+0x154>
	{
	    I21DAT = I2C1MasterBuffer[1];
    40d8:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    40dc:	e2822917 	add	r2, r2, #376832	; 0x5c000
    40e0:	e59f31b0 	ldr	r3, [pc, #432]	; 4298 <I2C1MasterHandler+0x2e0>
    40e4:	e5d33001 	ldrb	r3, [r3, #1]
    40e8:	e5823000 	str	r3, [r2]
	    WrIndex1++;
    40ec:	e59f31ac 	ldr	r3, [pc, #428]	; 42a0 <I2C1MasterHandler+0x2e8>
    40f0:	e5933000 	ldr	r3, [r3]
    40f4:	e2832001 	add	r2, r3, #1
    40f8:	e59f31a0 	ldr	r3, [pc, #416]	; 42a0 <I2C1MasterHandler+0x2e8>
    40fc:	e5832000 	str	r2, [r3]
	    I2C1MasterState = DATA_ACK;
    4100:	e59f2194 	ldr	r2, [pc, #404]	; 429c <I2C1MasterHandler+0x2e4>
    4104:	e3a03004 	mov	r3, #4
    4108:	e5823000 	str	r3, [r2]
	}
	I21CONCLR = I2CONCLR_SIC;
    410c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4110:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4114:	e2833018 	add	r3, r3, #24
    4118:	e3a02008 	mov	r2, #8
    411c:	e5832000 	str	r2, [r3]
	break;
    4120:	ea000055 	b	427c <I2C1MasterHandler+0x2c4>

	case 0x28:	/* Data byte has been transmitted, regardless ACK or NACK */
	if ( WrIndex1 < I2C1WriteLength )
    4124:	e59f3174 	ldr	r3, [pc, #372]	; 42a0 <I2C1MasterHandler+0x2e8>
    4128:	e5932000 	ldr	r2, [r3]
    412c:	e59f3170 	ldr	r3, [pc, #368]	; 42a4 <I2C1MasterHandler+0x2ec>
    4130:	e5933000 	ldr	r3, [r3]
    4134:	e1520003 	cmp	r2, r3
    4138:	2a000010 	bcs	4180 <I2C1MasterHandler+0x1c8>
	{
	    I21DAT = I2C1MasterBuffer[1+WrIndex1]; /* this should be the last one */
    413c:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    4140:	e2822917 	add	r2, r2, #376832	; 0x5c000
    4144:	e59f3154 	ldr	r3, [pc, #340]	; 42a0 <I2C1MasterHandler+0x2e8>
    4148:	e5933000 	ldr	r3, [r3]
    414c:	e2831001 	add	r1, r3, #1
    4150:	e59f3140 	ldr	r3, [pc, #320]	; 4298 <I2C1MasterHandler+0x2e0>
    4154:	e7d33001 	ldrb	r3, [r3, r1]
    4158:	e5823000 	str	r3, [r2]
	    WrIndex1++;
    415c:	e59f313c 	ldr	r3, [pc, #316]	; 42a0 <I2C1MasterHandler+0x2e8>
    4160:	e5933000 	ldr	r3, [r3]
    4164:	e2832001 	add	r2, r3, #1
    4168:	e59f3130 	ldr	r3, [pc, #304]	; 42a0 <I2C1MasterHandler+0x2e8>
    416c:	e5832000 	str	r2, [r3]
	    I2C1MasterState = DATA_ACK;
    4170:	e59f2124 	ldr	r2, [pc, #292]	; 429c <I2C1MasterHandler+0x2e4>
    4174:	e3a03004 	mov	r3, #4
    4178:	e5823000 	str	r3, [r2]
    417c:	ea00000b 	b	41b0 <I2C1MasterHandler+0x1f8>

	}
	else
	{
		I2C1MasterState = DATA_WRITE_DONE;
    4180:	e59f2114 	ldr	r2, [pc, #276]	; 429c <I2C1MasterHandler+0x2e4>
    4184:	e3a03007 	mov	r3, #7
    4188:	e5823000 	str	r3, [r2]
		  	//I2C Stop
		I21CONSET = I2CONSET_STO;      /* Set Stop flag */
    418c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4190:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4194:	e3a02010 	mov	r2, #16
    4198:	e5832000 	str	r2, [r3]
		I21CONCLR = I2CONCLR_SIC;  /* Clear SI flag */
    419c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    41a0:	e2833917 	add	r3, r3, #376832	; 0x5c000
    41a4:	e2833018 	add	r3, r3, #24
    41a8:	e3a02008 	mov	r2, #8
    41ac:	e5832000 	str	r2, [r3]
	}
	I21CONCLR = I2CONCLR_SIC;
    41b0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    41b4:	e2833917 	add	r3, r3, #376832	; 0x5c000
    41b8:	e2833018 	add	r3, r3, #24
    41bc:	e3a02008 	mov	r2, #8
    41c0:	e5832000 	str	r2, [r3]
	lastI2c1Error=I2C_ERROR_NONE;
    41c4:	e59f20dc 	ldr	r2, [pc, #220]	; 42a8 <I2C1MasterHandler+0x2f0>
    41c8:	e3a03000 	mov	r3, #0
    41cc:	e5c23000 	strb	r3, [r2]

	break;
    41d0:	ea000029 	b	427c <I2C1MasterHandler+0x2c4>

	case 0x30: //data has been transmited but NACK was received
		I2C1MasterState = DATA_NACK;
    41d4:	e59f20c0 	ldr	r2, [pc, #192]	; 429c <I2C1MasterHandler+0x2e4>
    41d8:	e3a03005 	mov	r3, #5
    41dc:	e5823000 	str	r3, [r2]
		  	//I2C Stop
		I21CONSET = I2CONSET_STO;      /* Set Stop flag */
    41e0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    41e4:	e2833917 	add	r3, r3, #376832	; 0x5c000
    41e8:	e3a02010 	mov	r2, #16
    41ec:	e5832000 	str	r2, [r3]
		I21CONCLR = I2CONCLR_SIC;  /* Clear SI flag */
    41f0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    41f4:	e2833917 	add	r3, r3, #376832	; 0x5c000
    41f8:	e2833018 	add	r3, r3, #24
    41fc:	e3a02008 	mov	r2, #8
    4200:	e5832000 	str	r2, [r3]
		lastI2c1Error=I2C_ERROR_NACKAFTERWRITE;
    4204:	e59f209c 	ldr	r2, [pc, #156]	; 42a8 <I2C1MasterHandler+0x2f0>
    4208:	e3a03002 	mov	r3, #2
    420c:	e5c23000 	strb	r3, [r2]
	break;
    4210:	ea000019 	b	427c <I2C1MasterHandler+0x2c4>

	case 0x20: //NACK received, receiver not found
				I21CONCLR = I2CONCLR_SIC;
    4214:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4218:	e2833917 	add	r3, r3, #376832	; 0x5c000
    421c:	e2833018 	add	r3, r3, #24
    4220:	e3a02008 	mov	r2, #8
    4224:	e5832000 	str	r2, [r3]
				I2C1MasterState = DATA_NACK;
    4228:	e59f206c 	ldr	r2, [pc, #108]	; 429c <I2C1MasterHandler+0x2e4>
    422c:	e3a03005 	mov	r3, #5
    4230:	e5823000 	str	r3, [r2]
				//I2C Stop
				I21CONSET = I2CONSET_STO;      /* Set Stop flag */
    4234:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4238:	e2833917 	add	r3, r3, #376832	; 0x5c000
    423c:	e3a02010 	mov	r2, #16
    4240:	e5832000 	str	r2, [r3]
				I21CONCLR = I2CONCLR_SIC;  /* Clear SI flag */
    4244:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4248:	e2833917 	add	r3, r3, #376832	; 0x5c000
    424c:	e2833018 	add	r3, r3, #24
    4250:	e3a02008 	mov	r2, #8
    4254:	e5832000 	str	r2, [r3]
				lastI2c1Error=I2C_ERROR_NACKAFTERSTART;
    4258:	e59f2048 	ldr	r2, [pc, #72]	; 42a8 <I2C1MasterHandler+0x2f0>
    425c:	e3a03001 	mov	r3, #1
    4260:	e5c23000 	strb	r3, [r2]
	break;
    4264:	ea000004 	b	427c <I2C1MasterHandler+0x2c4>



	default:
	I21CONCLR = I2CONCLR_SIC;
    4268:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    426c:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4270:	e2833018 	add	r3, r3, #24
    4274:	e3a02008 	mov	r2, #8
    4278:	e5832000 	str	r2, [r3]
	break;
    }

    IDISABLE;
    VICVectAddr = 0;		/* Acknowledge Interrupt */
    427c:	e3a03000 	mov	r3, #0
    4280:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    4284:	e3a02000 	mov	r2, #0
    4288:	e5832000 	str	r2, [r3]

}
    428c:	e24bd00c 	sub	sp, fp, #12
    4290:	e89d6800 	ldm	sp, {fp, sp, lr}
    4294:	e12fff1e 	bx	lr
    4298:	40001bd8 	.word	0x40001bd8
    429c:	40000a10 	.word	0x40000a10
    42a0:	40000a18 	.word	0x40000a18
    42a4:	40001bd4 	.word	0x40001bd4
    42a8:	40000a1c 	.word	0x40000a1c

000042ac <fireFlyLedHandler>:

void fireFlyLedHandler(void) 	//called with 100Hz
{
    42ac:	e1a0c00d 	mov	ip, sp
    42b0:	e92dd800 	push	{fp, ip, lr, pc}
    42b4:	e24cb004 	sub	fp, ip, #4
    42b8:	e24dd00c 	sub	sp, sp, #12
	static unsigned short cnt=0;
	static unsigned char mfsCnt=0;
	static unsigned char mincCnt=0;
	static unsigned char ceCnt=0;

	errorFlags=0;
    42bc:	e3a03000 	mov	r3, #0
    42c0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee


	if (LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_GYROS)
    42c4:	e59f3af4 	ldr	r3, [pc, #2804]	; 4dc0 <fireFlyLedHandler+0xb14>
    42c8:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    42cc:	e1a03803 	lsl	r3, r3, #16
    42d0:	e1a03823 	lsr	r3, r3, #16
    42d4:	e2033c02 	and	r3, r3, #512	; 0x200
    42d8:	e3530000 	cmp	r3, #0
    42dc:	0a000002 	beq	42ec <fireFlyLedHandler+0x40>
	{
		errorFlags|=0x02;
    42e0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    42e4:	e3833002 	orr	r3, r3, #2
    42e8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	}

	if (LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_ACC)
    42ec:	e59f3acc 	ldr	r3, [pc, #2764]	; 4dc0 <fireFlyLedHandler+0xb14>
    42f0:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    42f4:	e1a03803 	lsl	r3, r3, #16
    42f8:	e1a03823 	lsr	r3, r3, #16
    42fc:	e2033b01 	and	r3, r3, #1024	; 0x400
    4300:	e3530000 	cmp	r3, #0
    4304:	0a000002 	beq	4314 <fireFlyLedHandler+0x68>
	{
		errorFlags|=0x04;
    4308:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    430c:	e3833004 	orr	r3, r3, #4
    4310:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	}

	if ((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE) && (ceCnt<5))
    4314:	e59f3aa4 	ldr	r3, [pc, #2724]	; 4dc0 <fireFlyLedHandler+0xb14>
    4318:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    431c:	e1a03803 	lsl	r3, r3, #16
    4320:	e1a03823 	lsr	r3, r3, #16
    4324:	e2033010 	and	r3, r3, #16
    4328:	e3530000 	cmp	r3, #0
    432c:	0a000006 	beq	434c <fireFlyLedHandler+0xa0>
    4330:	e59f3a8c 	ldr	r3, [pc, #2700]	; 4dc4 <fireFlyLedHandler+0xb18>
    4334:	e5d33000 	ldrb	r3, [r3]
    4338:	e3530004 	cmp	r3, #4
    433c:	8a000002 	bhi	434c <fireFlyLedHandler+0xa0>
	{
		errorFlags|=0x08;
    4340:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4344:	e3833008 	orr	r3, r3, #8
    4348:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	}

	if ((LL_1khz_attitude_data.flightMode&FM_MAG_INCLINATION_ERROR) && (mincCnt<5) && ((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE)==0))
    434c:	e59f3a6c 	ldr	r3, [pc, #2668]	; 4dc0 <fireFlyLedHandler+0xb14>
    4350:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    4354:	e1a03803 	lsl	r3, r3, #16
    4358:	e1a03843 	asr	r3, r3, #16
    435c:	e3530000 	cmp	r3, #0
    4360:	aa00000d 	bge	439c <fireFlyLedHandler+0xf0>
    4364:	e59f3a5c 	ldr	r3, [pc, #2652]	; 4dc8 <fireFlyLedHandler+0xb1c>
    4368:	e5d33000 	ldrb	r3, [r3]
    436c:	e3530004 	cmp	r3, #4
    4370:	8a000009 	bhi	439c <fireFlyLedHandler+0xf0>
    4374:	e59f3a44 	ldr	r3, [pc, #2628]	; 4dc0 <fireFlyLedHandler+0xb14>
    4378:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    437c:	e1a03803 	lsl	r3, r3, #16
    4380:	e1a03823 	lsr	r3, r3, #16
    4384:	e2033010 	and	r3, r3, #16
    4388:	e3530000 	cmp	r3, #0
    438c:	1a000002 	bne	439c <fireFlyLedHandler+0xf0>
	{
		errorFlags|=0x10;
    4390:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4394:	e3833010 	orr	r3, r3, #16
    4398:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	}

	if ((LL_1khz_attitude_data.flightMode&FM_MAG_FIELD_STRENGTH_ERROR) && (mfsCnt<5) && ((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE)==0))
    439c:	e59f3a1c 	ldr	r3, [pc, #2588]	; 4dc0 <fireFlyLedHandler+0xb14>
    43a0:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    43a4:	e1a03803 	lsl	r3, r3, #16
    43a8:	e1a03823 	lsr	r3, r3, #16
    43ac:	e2033901 	and	r3, r3, #16384	; 0x4000
    43b0:	e3530000 	cmp	r3, #0
    43b4:	0a00000d 	beq	43f0 <fireFlyLedHandler+0x144>
    43b8:	e59f3a0c 	ldr	r3, [pc, #2572]	; 4dcc <fireFlyLedHandler+0xb20>
    43bc:	e5d33000 	ldrb	r3, [r3]
    43c0:	e3530004 	cmp	r3, #4
    43c4:	8a000009 	bhi	43f0 <fireFlyLedHandler+0x144>
    43c8:	e59f39f0 	ldr	r3, [pc, #2544]	; 4dc0 <fireFlyLedHandler+0xb14>
    43cc:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    43d0:	e1a03803 	lsl	r3, r3, #16
    43d4:	e1a03823 	lsr	r3, r3, #16
    43d8:	e2033010 	and	r3, r3, #16
    43dc:	e3530000 	cmp	r3, #0
    43e0:	1a000002 	bne	43f0 <fireFlyLedHandler+0x144>
	{
		errorFlags|=0x20;
    43e4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    43e8:	e3833020 	orr	r3, r3, #32
    43ec:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	}

	cnt++;
    43f0:	e59f39d8 	ldr	r3, [pc, #2520]	; 4dd0 <fireFlyLedHandler+0xb24>
    43f4:	e1d330b0 	ldrh	r3, [r3]
    43f8:	e2833001 	add	r3, r3, #1
    43fc:	e1a03803 	lsl	r3, r3, #16
    4400:	e1a02823 	lsr	r2, r3, #16
    4404:	e59f39c4 	ldr	r3, [pc, #2500]	; 4dd0 <fireFlyLedHandler+0xb24>
    4408:	e1c320b0 	strh	r2, [r3]
	if (cnt==200)
    440c:	e59f39bc 	ldr	r3, [pc, #2492]	; 4dd0 <fireFlyLedHandler+0xb24>
    4410:	e1d330b0 	ldrh	r3, [r3]
    4414:	e35300c8 	cmp	r3, #200	; 0xc8
    4418:	1a000002 	bne	4428 <fireFlyLedHandler+0x17c>
		cnt=0;
    441c:	e59f39ac 	ldr	r3, [pc, #2476]	; 4dd0 <fireFlyLedHandler+0xb24>
    4420:	e3a02000 	mov	r2, #0
    4424:	e1c320b0 	strh	r2, [r3]
	if(!SYSTEM_initialized)
    4428:	e59f39a4 	ldr	r3, [pc, #2468]	; 4dd4 <fireFlyLedHandler+0xb28>
    442c:	e5d33000 	ldrb	r3, [r3]
    4430:	e20330ff 	and	r3, r3, #255	; 0xff
    4434:	e3530000 	cmp	r3, #0
    4438:	1a000009 	bne	4464 <fireFlyLedHandler+0x1b8>
		{
			errorFlags|=0x01;
    443c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4440:	e3833001 	orr	r3, r3, #1
    4444:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
			r=0;
    4448:	e3a03000 	mov	r3, #0
    444c:	e54b3015 	strb	r3, [fp, #-21]
			g=0;
    4450:	e3a03000 	mov	r3, #0
    4454:	e54b3014 	strb	r3, [fp, #-20]
			b=255;
    4458:	e3e03000 	mvn	r3, #0
    445c:	e54b3013 	strb	r3, [fp, #-19]
    4460:	ea000080 	b	4668 <fireFlyLedHandler+0x3bc>
		}
	else if (((GPS_Data.status&0xFF)==3) && (HL_Status.battery_voltage_1>11000))
    4464:	e59f396c 	ldr	r3, [pc, #2412]	; 4dd8 <fireFlyLedHandler+0xb2c>
    4468:	e5933028 	ldr	r3, [r3, #40]	; 0x28
    446c:	e20330ff 	and	r3, r3, #255	; 0xff
    4470:	e3530003 	cmp	r3, #3
    4474:	1a00000e 	bne	44b4 <fireFlyLedHandler+0x208>
    4478:	e59f395c 	ldr	r3, [pc, #2396]	; 4ddc <fireFlyLedHandler+0xb30>
    447c:	e1d330b0 	ldrh	r3, [r3]
    4480:	e1a03803 	lsl	r3, r3, #16
    4484:	e1a02843 	asr	r2, r3, #16
    4488:	e3a03dab 	mov	r3, #10944	; 0x2ac0
    448c:	e2833038 	add	r3, r3, #56	; 0x38
    4490:	e1520003 	cmp	r2, r3
    4494:	da000006 	ble	44b4 <fireFlyLedHandler+0x208>
    {
    	r=0;
    4498:	e3a03000 	mov	r3, #0
    449c:	e54b3015 	strb	r3, [fp, #-21]
    	g=255;
    44a0:	e3e03000 	mvn	r3, #0
    44a4:	e54b3014 	strb	r3, [fp, #-20]
    	b=0;
    44a8:	e3a03000 	mov	r3, #0
    44ac:	e54b3013 	strb	r3, [fp, #-19]
			errorFlags|=0x01;
			r=0;
			g=0;
			b=255;
		}
	else if (((GPS_Data.status&0xFF)==3) && (HL_Status.battery_voltage_1>11000))
    44b0:	ea00006c 	b	4668 <fireFlyLedHandler+0x3bc>
    {
    	r=0;
    	g=255;
    	b=0;
    }else if (HL_Status.battery_voltage_1<11000)
    44b4:	e59f3920 	ldr	r3, [pc, #2336]	; 4ddc <fireFlyLedHandler+0xb30>
    44b8:	e1d330b0 	ldrh	r3, [r3]
    44bc:	e1a03803 	lsl	r3, r3, #16
    44c0:	e1a02843 	asr	r2, r3, #16
    44c4:	e3a03dab 	mov	r3, #10944	; 0x2ac0
    44c8:	e2833037 	add	r3, r3, #55	; 0x37
    44cc:	e1520003 	cmp	r2, r3
    44d0:	ca000059 	bgt	463c <fireFlyLedHandler+0x390>
    {
    	unsigned int dim=11000-HL_Status.battery_voltage_1;
    44d4:	e59f3900 	ldr	r3, [pc, #2304]	; 4ddc <fireFlyLedHandler+0xb30>
    44d8:	e1d330b0 	ldrh	r3, [r3]
    44dc:	e1a03803 	lsl	r3, r3, #16
    44e0:	e1a03843 	asr	r3, r3, #16
    44e4:	e2633dab 	rsb	r3, r3, #10944	; 0x2ac0
    44e8:	e2833038 	add	r3, r3, #56	; 0x38
    44ec:	e50b3010 	str	r3, [fp, #-16]

    	if (dim>1000)
    44f0:	e51b3010 	ldr	r3, [fp, #-16]
    44f4:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    44f8:	9a000001 	bls	4504 <fireFlyLedHandler+0x258>
    		dim=1000;
    44fc:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    4500:	e50b3010 	str	r3, [fp, #-16]


    	if ((GPS_Data.status&0xFF)!=3)
    4504:	e59f38cc 	ldr	r3, [pc, #2252]	; 4dd8 <fireFlyLedHandler+0xb2c>
    4508:	e5933028 	ldr	r3, [r3, #40]	; 0x28
    450c:	e20330ff 	and	r3, r3, #255	; 0xff
    4510:	e3530003 	cmp	r3, #3
    4514:	0a000018 	beq	457c <fireFlyLedHandler+0x2d0>
    	{
        	dim/=6;
    4518:	e51b2010 	ldr	r2, [fp, #-16]
    451c:	e59f38bc 	ldr	r3, [pc, #2236]	; 4de0 <fireFlyLedHandler+0xb34>
    4520:	e0831392 	umull	r1, r3, r2, r3
    4524:	e1a03123 	lsr	r3, r3, #2
    4528:	e50b3010 	str	r3, [fp, #-16]
        	dim+=10;
    452c:	e51b3010 	ldr	r3, [fp, #-16]
    4530:	e283300a 	add	r3, r3, #10
    4534:	e50b3010 	str	r3, [fp, #-16]
        	if (dim>165)
    4538:	e51b3010 	ldr	r3, [fp, #-16]
    453c:	e35300a5 	cmp	r3, #165	; 0xa5
    4540:	9a000001 	bls	454c <fireFlyLedHandler+0x2a0>
        		dim=165;
    4544:	e3a030a5 	mov	r3, #165	; 0xa5
    4548:	e50b3010 	str	r3, [fp, #-16]
    		r=255;
    454c:	e3e03000 	mvn	r3, #0
    4550:	e54b3015 	strb	r3, [fp, #-21]
    		g=165-dim;
    4554:	e51b3010 	ldr	r3, [fp, #-16]
    4558:	e20330ff 	and	r3, r3, #255	; 0xff
    455c:	e26334ff 	rsb	r3, r3, #-16777216	; 0xff000000
    4560:	e28338ff 	add	r3, r3, #16711680	; 0xff0000
    4564:	e2833cff 	add	r3, r3, #65280	; 0xff00
    4568:	e28330a5 	add	r3, r3, #165	; 0xa5
    456c:	e54b3014 	strb	r3, [fp, #-20]
    		b=0;
    4570:	e3a03000 	mov	r3, #0
    4574:	e54b3013 	strb	r3, [fp, #-19]
    4578:	ea000012 	b	45c8 <fireFlyLedHandler+0x31c>
    	}else
    	{
        	dim/=4;
    457c:	e51b3010 	ldr	r3, [fp, #-16]
    4580:	e1a03123 	lsr	r3, r3, #2
    4584:	e50b3010 	str	r3, [fp, #-16]
        	dim+=5;
    4588:	e51b3010 	ldr	r3, [fp, #-16]
    458c:	e2833005 	add	r3, r3, #5
    4590:	e50b3010 	str	r3, [fp, #-16]
        	if (dim>255)
    4594:	e51b3010 	ldr	r3, [fp, #-16]
    4598:	e35300ff 	cmp	r3, #255	; 0xff
    459c:	9a000001 	bls	45a8 <fireFlyLedHandler+0x2fc>
        		dim=255;
    45a0:	e3a030ff 	mov	r3, #255	; 0xff
    45a4:	e50b3010 	str	r3, [fp, #-16]
    		r=dim;
    45a8:	e51b3010 	ldr	r3, [fp, #-16]
    45ac:	e54b3015 	strb	r3, [fp, #-21]
    		g=255-dim;
    45b0:	e51b3010 	ldr	r3, [fp, #-16]
    45b4:	e20330ff 	and	r3, r3, #255	; 0xff
    45b8:	e1e03003 	mvn	r3, r3
    45bc:	e54b3014 	strb	r3, [fp, #-20]
    		b=0;
    45c0:	e3a03000 	mov	r3, #0
    45c4:	e54b3013 	strb	r3, [fp, #-19]
    	}
    	if(HL_Status.battery_voltage_1<10300) //blink LED @ very low voltage
    45c8:	e59f380c 	ldr	r3, [pc, #2060]	; 4ddc <fireFlyLedHandler+0xb30>
    45cc:	e1d330b0 	ldrh	r3, [r3]
    45d0:	e1a03803 	lsl	r3, r3, #16
    45d4:	e1a02843 	asr	r2, r3, #16
    45d8:	e3a03b0a 	mov	r3, #10240	; 0x2800
    45dc:	e283303b 	add	r3, r3, #59	; 0x3b
    45e0:	e1520003 	cmp	r2, r3
    45e4:	ca00001f 	bgt	4668 <fireFlyLedHandler+0x3bc>
    	{
    		if((cnt%20)<10) {r=0;g=0;b=0;};
    45e8:	e59f37e0 	ldr	r3, [pc, #2016]	; 4dd0 <fireFlyLedHandler+0xb24>
    45ec:	e1d310b0 	ldrh	r1, [r3]
    45f0:	e59f37ec 	ldr	r3, [pc, #2028]	; 4de4 <fireFlyLedHandler+0xb38>
    45f4:	e0832391 	umull	r2, r3, r1, r3
    45f8:	e1a02223 	lsr	r2, r3, #4
    45fc:	e1a03002 	mov	r3, r2
    4600:	e1a03103 	lsl	r3, r3, #2
    4604:	e0833002 	add	r3, r3, r2
    4608:	e1a03103 	lsl	r3, r3, #2
    460c:	e0633001 	rsb	r3, r3, r1
    4610:	e1a03803 	lsl	r3, r3, #16
    4614:	e1a03823 	lsr	r3, r3, #16
    4618:	e3530009 	cmp	r3, #9
    461c:	8a000011 	bhi	4668 <fireFlyLedHandler+0x3bc>
    4620:	e3a03000 	mov	r3, #0
    4624:	e54b3015 	strb	r3, [fp, #-21]
    4628:	e3a03000 	mov	r3, #0
    462c:	e54b3014 	strb	r3, [fp, #-20]
    4630:	e3a03000 	mov	r3, #0
    4634:	e54b3013 	strb	r3, [fp, #-19]
    4638:	ea00000a 	b	4668 <fireFlyLedHandler+0x3bc>
    	}
    }else if ((GPS_Data.status&0xFF)!=3)
    463c:	e59f3794 	ldr	r3, [pc, #1940]	; 4dd8 <fireFlyLedHandler+0xb2c>
    4640:	e5933028 	ldr	r3, [r3, #40]	; 0x28
    4644:	e20330ff 	and	r3, r3, #255	; 0xff
    4648:	e3530003 	cmp	r3, #3
    464c:	0a000005 	beq	4668 <fireFlyLedHandler+0x3bc>
    {
    	r=255;
    4650:	e3e03000 	mvn	r3, #0
    4654:	e54b3015 	strb	r3, [fp, #-21]
    	g=165;
    4658:	e3e0305a 	mvn	r3, #90	; 0x5a
    465c:	e54b3014 	strb	r3, [fp, #-20]
    	b=0;
    4660:	e3a03000 	mov	r3, #0
    4664:	e54b3013 	strb	r3, [fp, #-19]
    }

	if ((cnt<=100) && (errorFlags))
    4668:	e59f3760 	ldr	r3, [pc, #1888]	; 4dd0 <fireFlyLedHandler+0xb24>
    466c:	e1d330b0 	ldrh	r3, [r3]
    4670:	e3530064 	cmp	r3, #100	; 0x64
    4674:	8a000008 	bhi	469c <fireFlyLedHandler+0x3f0>
    4678:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    467c:	e3530000 	cmp	r3, #0
    4680:	0a000005 	beq	469c <fireFlyLedHandler+0x3f0>
	{
		r=g=b=0;
    4684:	e3a03000 	mov	r3, #0
    4688:	e54b3013 	strb	r3, [fp, #-19]
    468c:	e55b3013 	ldrb	r3, [fp, #-19]
    4690:	e54b3014 	strb	r3, [fp, #-20]
    4694:	e55b3014 	ldrb	r3, [fp, #-20]
    4698:	e54b3015 	strb	r3, [fp, #-21]
	}

	if ((cnt>100) && (cnt<200) && (errorFlags)) //always signal errors for 1 second.
    469c:	e59f372c 	ldr	r3, [pc, #1836]	; 4dd0 <fireFlyLedHandler+0xb24>
    46a0:	e1d330b0 	ldrh	r3, [r3]
    46a4:	e3530064 	cmp	r3, #100	; 0x64
    46a8:	9a0001ba 	bls	4d98 <fireFlyLedHandler+0xaec>
    46ac:	e59f371c 	ldr	r3, [pc, #1820]	; 4dd0 <fireFlyLedHandler+0xb24>
    46b0:	e1d330b0 	ldrh	r3, [r3]
    46b4:	e35300c7 	cmp	r3, #199	; 0xc7
    46b8:	8a0001b6 	bhi	4d98 <fireFlyLedHandler+0xaec>
    46bc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    46c0:	e3530000 	cmp	r3, #0
    46c4:	0a0001b3 	beq	4d98 <fireFlyLedHandler+0xaec>
	{
		//overwrite rgb with error signaling
		if (errorFlags & 0x02) //gyros
    46c8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    46cc:	e2033002 	and	r3, r3, #2
    46d0:	e3530000 	cmp	r3, #0
    46d4:	0a000027 	beq	4778 <fireFlyLedHandler+0x4cc>
		{
			if (cnt < 125) {
    46d8:	e59f36f0 	ldr	r3, [pc, #1776]	; 4dd0 <fireFlyLedHandler+0xb24>
    46dc:	e1d330b0 	ldrh	r3, [r3]
    46e0:	e353007c 	cmp	r3, #124	; 0x7c
    46e4:	8a000006 	bhi	4704 <fireFlyLedHandler+0x458>
				r = 0;
    46e8:	e3a03000 	mov	r3, #0
    46ec:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    46f0:	e3a03000 	mov	r3, #0
    46f4:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    46f8:	e3a03000 	mov	r3, #0
    46fc:	e54b3013 	strb	r3, [fp, #-19]
    4700:	ea0001a4 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 150) {
    4704:	e59f36c4 	ldr	r3, [pc, #1732]	; 4dd0 <fireFlyLedHandler+0xb24>
    4708:	e1d330b0 	ldrh	r3, [r3]
    470c:	e3530095 	cmp	r3, #149	; 0x95
    4710:	8a000006 	bhi	4730 <fireFlyLedHandler+0x484>
				r = 255;
    4714:	e3e03000 	mvn	r3, #0
    4718:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    471c:	e3a03000 	mov	r3, #0
    4720:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4724:	e3a03000 	mov	r3, #0
    4728:	e54b3013 	strb	r3, [fp, #-19]
    472c:	ea000199 	b	4d98 <fireFlyLedHandler+0xaec>

			} else if (cnt < 175) {
    4730:	e59f3698 	ldr	r3, [pc, #1688]	; 4dd0 <fireFlyLedHandler+0xb24>
    4734:	e1d330b0 	ldrh	r3, [r3]
    4738:	e35300ae 	cmp	r3, #174	; 0xae
    473c:	8a000006 	bhi	475c <fireFlyLedHandler+0x4b0>
				r = 0;
    4740:	e3a03000 	mov	r3, #0
    4744:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4748:	e3a03000 	mov	r3, #0
    474c:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4750:	e3a03000 	mov	r3, #0
    4754:	e54b3013 	strb	r3, [fp, #-19]
    4758:	ea00018e 	b	4d98 <fireFlyLedHandler+0xaec>
			} else {
				r = 255;
    475c:	e3e03000 	mvn	r3, #0
    4760:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4764:	e3a03000 	mov	r3, #0
    4768:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    476c:	e3a03000 	mov	r3, #0
    4770:	e54b3013 	strb	r3, [fp, #-19]
    4774:	ea000187 	b	4d98 <fireFlyLedHandler+0xaec>
			}
		} else if (errorFlags & 0x04) {
    4778:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    477c:	e2033004 	and	r3, r3, #4
    4780:	e3530000 	cmp	r3, #0
    4784:	0a000031 	beq	4850 <fireFlyLedHandler+0x5a4>
			//blink 3x
			if (cnt < 125) {
    4788:	e59f3640 	ldr	r3, [pc, #1600]	; 4dd0 <fireFlyLedHandler+0xb24>
    478c:	e1d330b0 	ldrh	r3, [r3]
    4790:	e353007c 	cmp	r3, #124	; 0x7c
    4794:	8a000005 	bhi	47b0 <fireFlyLedHandler+0x504>
				r = 255;
    4798:	e3e03000 	mvn	r3, #0
    479c:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    47a0:	e3a03000 	mov	r3, #0
    47a4:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    47a8:	e3a03000 	mov	r3, #0
    47ac:	e54b3013 	strb	r3, [fp, #-19]
			}
			if (cnt < 140) {
    47b0:	e59f3618 	ldr	r3, [pc, #1560]	; 4dd0 <fireFlyLedHandler+0xb24>
    47b4:	e1d330b0 	ldrh	r3, [r3]
    47b8:	e353008b 	cmp	r3, #139	; 0x8b
    47bc:	8a000006 	bhi	47dc <fireFlyLedHandler+0x530>
				r = 0;
    47c0:	e3a03000 	mov	r3, #0
    47c4:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    47c8:	e3a03000 	mov	r3, #0
    47cc:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    47d0:	e3a03000 	mov	r3, #0
    47d4:	e54b3013 	strb	r3, [fp, #-19]
    47d8:	ea00016e 	b	4d98 <fireFlyLedHandler+0xaec>

			} else if (cnt < 175) {
    47dc:	e59f35ec 	ldr	r3, [pc, #1516]	; 4dd0 <fireFlyLedHandler+0xb24>
    47e0:	e1d330b0 	ldrh	r3, [r3]
    47e4:	e35300ae 	cmp	r3, #174	; 0xae
    47e8:	8a000006 	bhi	4808 <fireFlyLedHandler+0x55c>
				r = 255;
    47ec:	e3e03000 	mvn	r3, #0
    47f0:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    47f4:	e3a03000 	mov	r3, #0
    47f8:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    47fc:	e3a03000 	mov	r3, #0
    4800:	e54b3013 	strb	r3, [fp, #-19]
    4804:	ea000163 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 190) {
    4808:	e59f35c0 	ldr	r3, [pc, #1472]	; 4dd0 <fireFlyLedHandler+0xb24>
    480c:	e1d330b0 	ldrh	r3, [r3]
    4810:	e35300bd 	cmp	r3, #189	; 0xbd
    4814:	8a000006 	bhi	4834 <fireFlyLedHandler+0x588>
				r = 0;
    4818:	e3a03000 	mov	r3, #0
    481c:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4820:	e3a03000 	mov	r3, #0
    4824:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4828:	e3a03000 	mov	r3, #0
    482c:	e54b3013 	strb	r3, [fp, #-19]
    4830:	ea000158 	b	4d98 <fireFlyLedHandler+0xaec>
			} else {
				r = 255;
    4834:	e3e03000 	mvn	r3, #0
    4838:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    483c:	e3a03000 	mov	r3, #0
    4840:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4844:	e3a03000 	mov	r3, #0
    4848:	e54b3013 	strb	r3, [fp, #-19]
    484c:	ea000151 	b	4d98 <fireFlyLedHandler+0xaec>
			}
		} else if (errorFlags & 0x08) {
    4850:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4854:	e2033008 	and	r3, r3, #8
    4858:	e3530000 	cmp	r3, #0
    485c:	0a000082 	beq	4a6c <fireFlyLedHandler+0x7c0>
			if ((ceCnt < 5) && (cnt == 195))
    4860:	e59f355c 	ldr	r3, [pc, #1372]	; 4dc4 <fireFlyLedHandler+0xb18>
    4864:	e5d33000 	ldrb	r3, [r3]
    4868:	e3530004 	cmp	r3, #4
    486c:	8a000009 	bhi	4898 <fireFlyLedHandler+0x5ec>
    4870:	e59f3558 	ldr	r3, [pc, #1368]	; 4dd0 <fireFlyLedHandler+0xb24>
    4874:	e1d330b0 	ldrh	r3, [r3]
    4878:	e35300c3 	cmp	r3, #195	; 0xc3
    487c:	1a000005 	bne	4898 <fireFlyLedHandler+0x5ec>
				ceCnt++;
    4880:	e59f353c 	ldr	r3, [pc, #1340]	; 4dc4 <fireFlyLedHandler+0xb18>
    4884:	e5d33000 	ldrb	r3, [r3]
    4888:	e2833001 	add	r3, r3, #1
    488c:	e20330ff 	and	r3, r3, #255	; 0xff
    4890:	e59f252c 	ldr	r2, [pc, #1324]	; 4dc4 <fireFlyLedHandler+0xb18>
    4894:	e5c23000 	strb	r3, [r2]
			//blink 5x
			if (cnt < 105) {
    4898:	e59f3530 	ldr	r3, [pc, #1328]	; 4dd0 <fireFlyLedHandler+0xb24>
    489c:	e1d330b0 	ldrh	r3, [r3]
    48a0:	e3530068 	cmp	r3, #104	; 0x68
    48a4:	8a000006 	bhi	48c4 <fireFlyLedHandler+0x618>
				r = 0;
    48a8:	e3a03000 	mov	r3, #0
    48ac:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    48b0:	e3a03000 	mov	r3, #0
    48b4:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    48b8:	e3a03000 	mov	r3, #0
    48bc:	e54b3013 	strb	r3, [fp, #-19]
    48c0:	ea000134 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 115) {
    48c4:	e59f3504 	ldr	r3, [pc, #1284]	; 4dd0 <fireFlyLedHandler+0xb24>
    48c8:	e1d330b0 	ldrh	r3, [r3]
    48cc:	e3530072 	cmp	r3, #114	; 0x72
    48d0:	8a000006 	bhi	48f0 <fireFlyLedHandler+0x644>
				r = 255;
    48d4:	e3e03000 	mvn	r3, #0
    48d8:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    48dc:	e3a03000 	mov	r3, #0
    48e0:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    48e4:	e3a03000 	mov	r3, #0
    48e8:	e54b3013 	strb	r3, [fp, #-19]
    48ec:	ea000129 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 125) {
    48f0:	e59f34d8 	ldr	r3, [pc, #1240]	; 4dd0 <fireFlyLedHandler+0xb24>
    48f4:	e1d330b0 	ldrh	r3, [r3]
    48f8:	e353007c 	cmp	r3, #124	; 0x7c
    48fc:	8a000006 	bhi	491c <fireFlyLedHandler+0x670>
				r = 0;
    4900:	e3a03000 	mov	r3, #0
    4904:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4908:	e3a03000 	mov	r3, #0
    490c:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4910:	e3a03000 	mov	r3, #0
    4914:	e54b3013 	strb	r3, [fp, #-19]
    4918:	ea00011e 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 135) {
    491c:	e59f34ac 	ldr	r3, [pc, #1196]	; 4dd0 <fireFlyLedHandler+0xb24>
    4920:	e1d330b0 	ldrh	r3, [r3]
    4924:	e3530086 	cmp	r3, #134	; 0x86
    4928:	8a000006 	bhi	4948 <fireFlyLedHandler+0x69c>
				r = 255;
    492c:	e3e03000 	mvn	r3, #0
    4930:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4934:	e3a03000 	mov	r3, #0
    4938:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    493c:	e3a03000 	mov	r3, #0
    4940:	e54b3013 	strb	r3, [fp, #-19]
    4944:	ea000113 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 145) {
    4948:	e59f3480 	ldr	r3, [pc, #1152]	; 4dd0 <fireFlyLedHandler+0xb24>
    494c:	e1d330b0 	ldrh	r3, [r3]
    4950:	e3530090 	cmp	r3, #144	; 0x90
    4954:	8a000006 	bhi	4974 <fireFlyLedHandler+0x6c8>
				r = 0;
    4958:	e3a03000 	mov	r3, #0
    495c:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4960:	e3a03000 	mov	r3, #0
    4964:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4968:	e3a03000 	mov	r3, #0
    496c:	e54b3013 	strb	r3, [fp, #-19]
    4970:	ea000108 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 155) {
    4974:	e59f3454 	ldr	r3, [pc, #1108]	; 4dd0 <fireFlyLedHandler+0xb24>
    4978:	e1d330b0 	ldrh	r3, [r3]
    497c:	e353009a 	cmp	r3, #154	; 0x9a
    4980:	8a000006 	bhi	49a0 <fireFlyLedHandler+0x6f4>
				r = 255;
    4984:	e3e03000 	mvn	r3, #0
    4988:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    498c:	e3a03000 	mov	r3, #0
    4990:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4994:	e3a03000 	mov	r3, #0
    4998:	e54b3013 	strb	r3, [fp, #-19]
    499c:	ea0000fd 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 165) {
    49a0:	e59f3428 	ldr	r3, [pc, #1064]	; 4dd0 <fireFlyLedHandler+0xb24>
    49a4:	e1d330b0 	ldrh	r3, [r3]
    49a8:	e35300a4 	cmp	r3, #164	; 0xa4
    49ac:	8a000006 	bhi	49cc <fireFlyLedHandler+0x720>
				r = 0;
    49b0:	e3a03000 	mov	r3, #0
    49b4:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    49b8:	e3a03000 	mov	r3, #0
    49bc:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    49c0:	e3a03000 	mov	r3, #0
    49c4:	e54b3013 	strb	r3, [fp, #-19]
    49c8:	ea0000f2 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 175) {
    49cc:	e59f33fc 	ldr	r3, [pc, #1020]	; 4dd0 <fireFlyLedHandler+0xb24>
    49d0:	e1d330b0 	ldrh	r3, [r3]
    49d4:	e35300ae 	cmp	r3, #174	; 0xae
    49d8:	8a000006 	bhi	49f8 <fireFlyLedHandler+0x74c>
				r = 255;
    49dc:	e3e03000 	mvn	r3, #0
    49e0:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    49e4:	e3a03000 	mov	r3, #0
    49e8:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    49ec:	e3a03000 	mov	r3, #0
    49f0:	e54b3013 	strb	r3, [fp, #-19]
    49f4:	ea0000e7 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 185) {
    49f8:	e59f33d0 	ldr	r3, [pc, #976]	; 4dd0 <fireFlyLedHandler+0xb24>
    49fc:	e1d330b0 	ldrh	r3, [r3]
    4a00:	e35300b8 	cmp	r3, #184	; 0xb8
    4a04:	8a000006 	bhi	4a24 <fireFlyLedHandler+0x778>
				r = 0;
    4a08:	e3a03000 	mov	r3, #0
    4a0c:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4a10:	e3a03000 	mov	r3, #0
    4a14:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4a18:	e3a03000 	mov	r3, #0
    4a1c:	e54b3013 	strb	r3, [fp, #-19]
    4a20:	ea0000dc 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 195) {
    4a24:	e59f33a4 	ldr	r3, [pc, #932]	; 4dd0 <fireFlyLedHandler+0xb24>
    4a28:	e1d330b0 	ldrh	r3, [r3]
    4a2c:	e35300c2 	cmp	r3, #194	; 0xc2
    4a30:	8a000006 	bhi	4a50 <fireFlyLedHandler+0x7a4>
				r = 255;
    4a34:	e3e03000 	mvn	r3, #0
    4a38:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4a3c:	e3a03000 	mov	r3, #0
    4a40:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4a44:	e3a03000 	mov	r3, #0
    4a48:	e54b3013 	strb	r3, [fp, #-19]
    4a4c:	ea0000d1 	b	4d98 <fireFlyLedHandler+0xaec>
			} else {
				r = 0;
    4a50:	e3a03000 	mov	r3, #0
    4a54:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4a58:	e3a03000 	mov	r3, #0
    4a5c:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4a60:	e3a03000 	mov	r3, #0
    4a64:	e54b3013 	strb	r3, [fp, #-19]
    4a68:	ea0000ca 	b	4d98 <fireFlyLedHandler+0xaec>
			}
		} else if (errorFlags & 0x10) {
    4a6c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4a70:	e2033010 	and	r3, r3, #16
    4a74:	e3530000 	cmp	r3, #0
    4a78:	0a00006c 	beq	4c30 <fireFlyLedHandler+0x984>
			if ((mincCnt < 5) && (cnt == 195))
    4a7c:	e59f3344 	ldr	r3, [pc, #836]	; 4dc8 <fireFlyLedHandler+0xb1c>
    4a80:	e5d33000 	ldrb	r3, [r3]
    4a84:	e3530004 	cmp	r3, #4
    4a88:	8a000009 	bhi	4ab4 <fireFlyLedHandler+0x808>
    4a8c:	e59f333c 	ldr	r3, [pc, #828]	; 4dd0 <fireFlyLedHandler+0xb24>
    4a90:	e1d330b0 	ldrh	r3, [r3]
    4a94:	e35300c3 	cmp	r3, #195	; 0xc3
    4a98:	1a000005 	bne	4ab4 <fireFlyLedHandler+0x808>
				mincCnt++;
    4a9c:	e59f3324 	ldr	r3, [pc, #804]	; 4dc8 <fireFlyLedHandler+0xb1c>
    4aa0:	e5d33000 	ldrb	r3, [r3]
    4aa4:	e2833001 	add	r3, r3, #1
    4aa8:	e20330ff 	and	r3, r3, #255	; 0xff
    4aac:	e59f2314 	ldr	r2, [pc, #788]	; 4dc8 <fireFlyLedHandler+0xb1c>
    4ab0:	e5c23000 	strb	r3, [r2]
			//blink 4x
			if (cnt < 105) {
    4ab4:	e59f3314 	ldr	r3, [pc, #788]	; 4dd0 <fireFlyLedHandler+0xb24>
    4ab8:	e1d330b0 	ldrh	r3, [r3]
    4abc:	e3530068 	cmp	r3, #104	; 0x68
    4ac0:	8a000006 	bhi	4ae0 <fireFlyLedHandler+0x834>
				r = 0;
    4ac4:	e3a03000 	mov	r3, #0
    4ac8:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4acc:	e3a03000 	mov	r3, #0
    4ad0:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4ad4:	e3a03000 	mov	r3, #0
    4ad8:	e54b3013 	strb	r3, [fp, #-19]
    4adc:	ea0000ad 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 115) {
    4ae0:	e59f32e8 	ldr	r3, [pc, #744]	; 4dd0 <fireFlyLedHandler+0xb24>
    4ae4:	e1d330b0 	ldrh	r3, [r3]
    4ae8:	e3530072 	cmp	r3, #114	; 0x72
    4aec:	8a000006 	bhi	4b0c <fireFlyLedHandler+0x860>
				r = 0;
    4af0:	e3a03000 	mov	r3, #0
    4af4:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4af8:	e3a03000 	mov	r3, #0
    4afc:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4b00:	e3e03000 	mvn	r3, #0
    4b04:	e54b3013 	strb	r3, [fp, #-19]
    4b08:	ea0000a2 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 125) {
    4b0c:	e59f32bc 	ldr	r3, [pc, #700]	; 4dd0 <fireFlyLedHandler+0xb24>
    4b10:	e1d330b0 	ldrh	r3, [r3]
    4b14:	e353007c 	cmp	r3, #124	; 0x7c
    4b18:	8a000006 	bhi	4b38 <fireFlyLedHandler+0x88c>
				r = 0;
    4b1c:	e3a03000 	mov	r3, #0
    4b20:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4b24:	e3a03000 	mov	r3, #0
    4b28:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4b2c:	e3a03000 	mov	r3, #0
    4b30:	e54b3013 	strb	r3, [fp, #-19]
    4b34:	ea000097 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 135) {
    4b38:	e59f3290 	ldr	r3, [pc, #656]	; 4dd0 <fireFlyLedHandler+0xb24>
    4b3c:	e1d330b0 	ldrh	r3, [r3]
    4b40:	e3530086 	cmp	r3, #134	; 0x86
    4b44:	8a000006 	bhi	4b64 <fireFlyLedHandler+0x8b8>
				r = 0;
    4b48:	e3a03000 	mov	r3, #0
    4b4c:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4b50:	e3a03000 	mov	r3, #0
    4b54:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4b58:	e3e03000 	mvn	r3, #0
    4b5c:	e54b3013 	strb	r3, [fp, #-19]
    4b60:	ea00008c 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 145) {
    4b64:	e59f3264 	ldr	r3, [pc, #612]	; 4dd0 <fireFlyLedHandler+0xb24>
    4b68:	e1d330b0 	ldrh	r3, [r3]
    4b6c:	e3530090 	cmp	r3, #144	; 0x90
    4b70:	8a000006 	bhi	4b90 <fireFlyLedHandler+0x8e4>
				r = 0;
    4b74:	e3a03000 	mov	r3, #0
    4b78:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4b7c:	e3a03000 	mov	r3, #0
    4b80:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4b84:	e3a03000 	mov	r3, #0
    4b88:	e54b3013 	strb	r3, [fp, #-19]
    4b8c:	ea000081 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 155) {
    4b90:	e59f3238 	ldr	r3, [pc, #568]	; 4dd0 <fireFlyLedHandler+0xb24>
    4b94:	e1d330b0 	ldrh	r3, [r3]
    4b98:	e353009a 	cmp	r3, #154	; 0x9a
    4b9c:	8a000006 	bhi	4bbc <fireFlyLedHandler+0x910>
				r = 0;
    4ba0:	e3a03000 	mov	r3, #0
    4ba4:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4ba8:	e3a03000 	mov	r3, #0
    4bac:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4bb0:	e3e03000 	mvn	r3, #0
    4bb4:	e54b3013 	strb	r3, [fp, #-19]
    4bb8:	ea000076 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 165) {
    4bbc:	e59f320c 	ldr	r3, [pc, #524]	; 4dd0 <fireFlyLedHandler+0xb24>
    4bc0:	e1d330b0 	ldrh	r3, [r3]
    4bc4:	e35300a4 	cmp	r3, #164	; 0xa4
    4bc8:	8a000006 	bhi	4be8 <fireFlyLedHandler+0x93c>
				r = 0;
    4bcc:	e3a03000 	mov	r3, #0
    4bd0:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4bd4:	e3a03000 	mov	r3, #0
    4bd8:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4bdc:	e3a03000 	mov	r3, #0
    4be0:	e54b3013 	strb	r3, [fp, #-19]
    4be4:	ea00006b 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 175) {
    4be8:	e59f31e0 	ldr	r3, [pc, #480]	; 4dd0 <fireFlyLedHandler+0xb24>
    4bec:	e1d330b0 	ldrh	r3, [r3]
    4bf0:	e35300ae 	cmp	r3, #174	; 0xae
    4bf4:	8a000006 	bhi	4c14 <fireFlyLedHandler+0x968>
				r = 0;
    4bf8:	e3a03000 	mov	r3, #0
    4bfc:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4c00:	e3a03000 	mov	r3, #0
    4c04:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4c08:	e3e03000 	mvn	r3, #0
    4c0c:	e54b3013 	strb	r3, [fp, #-19]
    4c10:	ea000060 	b	4d98 <fireFlyLedHandler+0xaec>
			} else {
				r = 0;
    4c14:	e3a03000 	mov	r3, #0
    4c18:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4c1c:	e3a03000 	mov	r3, #0
    4c20:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4c24:	e3a03000 	mov	r3, #0
    4c28:	e54b3013 	strb	r3, [fp, #-19]
    4c2c:	ea000059 	b	4d98 <fireFlyLedHandler+0xaec>
			}
		} else if (errorFlags & 0x20) {
    4c30:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4c34:	e2033020 	and	r3, r3, #32
    4c38:	e3530000 	cmp	r3, #0
    4c3c:	0a000055 	beq	4d98 <fireFlyLedHandler+0xaec>
			if ((mfsCnt < 5) && (cnt == 195))
    4c40:	e59f3184 	ldr	r3, [pc, #388]	; 4dcc <fireFlyLedHandler+0xb20>
    4c44:	e5d33000 	ldrb	r3, [r3]
    4c48:	e3530004 	cmp	r3, #4
    4c4c:	8a000009 	bhi	4c78 <fireFlyLedHandler+0x9cc>
    4c50:	e59f3178 	ldr	r3, [pc, #376]	; 4dd0 <fireFlyLedHandler+0xb24>
    4c54:	e1d330b0 	ldrh	r3, [r3]
    4c58:	e35300c3 	cmp	r3, #195	; 0xc3
    4c5c:	1a000005 	bne	4c78 <fireFlyLedHandler+0x9cc>
				mfsCnt++;
    4c60:	e59f3164 	ldr	r3, [pc, #356]	; 4dcc <fireFlyLedHandler+0xb20>
    4c64:	e5d33000 	ldrb	r3, [r3]
    4c68:	e2833001 	add	r3, r3, #1
    4c6c:	e20330ff 	and	r3, r3, #255	; 0xff
    4c70:	e59f2154 	ldr	r2, [pc, #340]	; 4dcc <fireFlyLedHandler+0xb20>
    4c74:	e5c23000 	strb	r3, [r2]
			//blink 3x !
			if (cnt < 105) {
    4c78:	e59f3150 	ldr	r3, [pc, #336]	; 4dd0 <fireFlyLedHandler+0xb24>
    4c7c:	e1d330b0 	ldrh	r3, [r3]
    4c80:	e3530068 	cmp	r3, #104	; 0x68
    4c84:	8a000006 	bhi	4ca4 <fireFlyLedHandler+0x9f8>
				r = 0;
    4c88:	e3a03000 	mov	r3, #0
    4c8c:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4c90:	e3a03000 	mov	r3, #0
    4c94:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4c98:	e3a03000 	mov	r3, #0
    4c9c:	e54b3013 	strb	r3, [fp, #-19]
    4ca0:	ea00003c 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 115) {
    4ca4:	e59f3124 	ldr	r3, [pc, #292]	; 4dd0 <fireFlyLedHandler+0xb24>
    4ca8:	e1d330b0 	ldrh	r3, [r3]
    4cac:	e3530072 	cmp	r3, #114	; 0x72
    4cb0:	8a000006 	bhi	4cd0 <fireFlyLedHandler+0xa24>
				r = 0;
    4cb4:	e3a03000 	mov	r3, #0
    4cb8:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4cbc:	e3a03000 	mov	r3, #0
    4cc0:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4cc4:	e3e03000 	mvn	r3, #0
    4cc8:	e54b3013 	strb	r3, [fp, #-19]
    4ccc:	ea000031 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 125) {
    4cd0:	e59f30f8 	ldr	r3, [pc, #248]	; 4dd0 <fireFlyLedHandler+0xb24>
    4cd4:	e1d330b0 	ldrh	r3, [r3]
    4cd8:	e353007c 	cmp	r3, #124	; 0x7c
    4cdc:	8a000006 	bhi	4cfc <fireFlyLedHandler+0xa50>
				r = 0;
    4ce0:	e3a03000 	mov	r3, #0
    4ce4:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4ce8:	e3a03000 	mov	r3, #0
    4cec:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4cf0:	e3a03000 	mov	r3, #0
    4cf4:	e54b3013 	strb	r3, [fp, #-19]
    4cf8:	ea000026 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 135) {
    4cfc:	e59f30cc 	ldr	r3, [pc, #204]	; 4dd0 <fireFlyLedHandler+0xb24>
    4d00:	e1d330b0 	ldrh	r3, [r3]
    4d04:	e3530086 	cmp	r3, #134	; 0x86
    4d08:	8a000006 	bhi	4d28 <fireFlyLedHandler+0xa7c>
				r = 0;
    4d0c:	e3a03000 	mov	r3, #0
    4d10:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4d14:	e3a03000 	mov	r3, #0
    4d18:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4d1c:	e3e03000 	mvn	r3, #0
    4d20:	e54b3013 	strb	r3, [fp, #-19]
    4d24:	ea00001b 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 145) {
    4d28:	e59f30a0 	ldr	r3, [pc, #160]	; 4dd0 <fireFlyLedHandler+0xb24>
    4d2c:	e1d330b0 	ldrh	r3, [r3]
    4d30:	e3530090 	cmp	r3, #144	; 0x90
    4d34:	8a000006 	bhi	4d54 <fireFlyLedHandler+0xaa8>
				r = 0;
    4d38:	e3a03000 	mov	r3, #0
    4d3c:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4d40:	e3a03000 	mov	r3, #0
    4d44:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4d48:	e3a03000 	mov	r3, #0
    4d4c:	e54b3013 	strb	r3, [fp, #-19]
    4d50:	ea000010 	b	4d98 <fireFlyLedHandler+0xaec>
			} else if (cnt < 155) {
    4d54:	e59f3074 	ldr	r3, [pc, #116]	; 4dd0 <fireFlyLedHandler+0xb24>
    4d58:	e1d330b0 	ldrh	r3, [r3]
    4d5c:	e353009a 	cmp	r3, #154	; 0x9a
    4d60:	8a000006 	bhi	4d80 <fireFlyLedHandler+0xad4>
				r = 0;
    4d64:	e3a03000 	mov	r3, #0
    4d68:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4d6c:	e3a03000 	mov	r3, #0
    4d70:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4d74:	e3e03000 	mvn	r3, #0
    4d78:	e54b3013 	strb	r3, [fp, #-19]
    4d7c:	ea000005 	b	4d98 <fireFlyLedHandler+0xaec>
			} else {
				r = 0;
    4d80:	e3a03000 	mov	r3, #0
    4d84:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4d88:	e3a03000 	mov	r3, #0
    4d8c:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4d90:	e3a03000 	mov	r3, #0
    4d94:	e54b3013 	strb	r3, [fp, #-19]
			}
		}
	}
	I2C1_setRGBLed(r, g, b);
    4d98:	e55b3015 	ldrb	r3, [fp, #-21]
    4d9c:	e55b2014 	ldrb	r2, [fp, #-20]
    4da0:	e55bc013 	ldrb	ip, [fp, #-19]
    4da4:	e1a00003 	mov	r0, r3
    4da8:	e1a01002 	mov	r1, r2
    4dac:	e1a0200c 	mov	r2, ip
    4db0:	eb00000c 	bl	4de8 <I2C1_setRGBLed>
}
    4db4:	e24bd00c 	sub	sp, fp, #12
    4db8:	e89d6800 	ldm	sp, {fp, sp, lr}
    4dbc:	e12fff1e 	bx	lr
    4dc0:	400016fc 	.word	0x400016fc
    4dc4:	40000a1d 	.word	0x40000a1d
    4dc8:	40000a1e 	.word	0x40000a1e
    4dcc:	40000a1f 	.word	0x40000a1f
    4dd0:	40000a20 	.word	0x40000a20
    4dd4:	400009e0 	.word	0x400009e0
    4dd8:	400017b0 	.word	0x400017b0
    4ddc:	40001980 	.word	0x40001980
    4de0:	aaaaaaab 	.word	0xaaaaaaab
    4de4:	cccccccd 	.word	0xcccccccd

00004de8 <I2C1_setRGBLed>:


char I2C1_setRGBLed(unsigned char r,unsigned char g,unsigned char b)
{
    4de8:	e1a0c00d 	mov	ip, sp
    4dec:	e92dd800 	push	{fp, ip, lr, pc}
    4df0:	e24cb004 	sub	fp, ip, #4
    4df4:	e24dd010 	sub	sp, sp, #16
    4df8:	e1a03000 	mov	r3, r0
    4dfc:	e54b3010 	strb	r3, [fp, #-16]
    4e00:	e1a03001 	mov	r3, r1
    4e04:	e54b3014 	strb	r3, [fp, #-20]
    4e08:	e1a03002 	mov	r3, r2
    4e0c:	e54b3018 	strb	r3, [fp, #-24]
	if ((I2C1MasterState == I2C_STARTED) || (I2C1MasterState == DATA_ACK))
    4e10:	e59f30c4 	ldr	r3, [pc, #196]	; 4edc <I2C1_setRGBLed+0xf4>
    4e14:	e5933000 	ldr	r3, [r3]
    4e18:	e3530001 	cmp	r3, #1
    4e1c:	0a000003 	beq	4e30 <I2C1_setRGBLed+0x48>
    4e20:	e59f30b4 	ldr	r3, [pc, #180]	; 4edc <I2C1_setRGBLed+0xf4>
    4e24:	e5933000 	ldr	r3, [r3]
    4e28:	e3530004 	cmp	r3, #4
    4e2c:	1a000002 	bne	4e3c <I2C1_setRGBLed+0x54>
			return I2C_ERROR_BUSBUSY;
    4e30:	e3a03005 	mov	r3, #5
    4e34:	e50b301c 	str	r3, [fp, #-28]
    4e38:	ea000022 	b	4ec8 <I2C1_setRGBLed+0xe0>
	WrIndex1=0;
    4e3c:	e59f209c 	ldr	r2, [pc, #156]	; 4ee0 <I2C1_setRGBLed+0xf8>
    4e40:	e3a03000 	mov	r3, #0
    4e44:	e5823000 	str	r3, [r2]
	I2C1WriteLength = 5;
    4e48:	e59f2094 	ldr	r2, [pc, #148]	; 4ee4 <I2C1_setRGBLed+0xfc>
    4e4c:	e3a03005 	mov	r3, #5
    4e50:	e5823000 	str	r3, [r2]
	I2C1MasterBuffer[0] = 0x30;	//address
    4e54:	e59f208c 	ldr	r2, [pc, #140]	; 4ee8 <I2C1_setRGBLed+0x100>
    4e58:	e3a03030 	mov	r3, #48	; 0x30
    4e5c:	e5c23000 	strb	r3, [r2]
    I2C1MasterBuffer[1] = r;
    4e60:	e59f2080 	ldr	r2, [pc, #128]	; 4ee8 <I2C1_setRGBLed+0x100>
    4e64:	e55b3010 	ldrb	r3, [fp, #-16]
    4e68:	e5c23001 	strb	r3, [r2, #1]
    I2C1MasterBuffer[2] = g;
    4e6c:	e59f2074 	ldr	r2, [pc, #116]	; 4ee8 <I2C1_setRGBLed+0x100>
    4e70:	e55b3014 	ldrb	r3, [fp, #-20]
    4e74:	e5c23002 	strb	r3, [r2, #2]
    I2C1MasterBuffer[3] = b;
    4e78:	e59f2068 	ldr	r2, [pc, #104]	; 4ee8 <I2C1_setRGBLed+0x100>
    4e7c:	e55b3018 	ldrb	r3, [fp, #-24]
    4e80:	e5c23003 	strb	r3, [r2, #3]
    I2C1MasterBuffer[4] = 255-(unsigned char)(r+g+b);
    4e84:	e55b2010 	ldrb	r2, [fp, #-16]
    4e88:	e55b3014 	ldrb	r3, [fp, #-20]
    4e8c:	e0823003 	add	r3, r2, r3
    4e90:	e20320ff 	and	r2, r3, #255	; 0xff
    4e94:	e55b3018 	ldrb	r3, [fp, #-24]
    4e98:	e0823003 	add	r3, r2, r3
    4e9c:	e20330ff 	and	r3, r3, #255	; 0xff
    4ea0:	e1e03003 	mvn	r3, r3
    4ea4:	e20330ff 	and	r3, r3, #255	; 0xff
    4ea8:	e59f2038 	ldr	r2, [pc, #56]	; 4ee8 <I2C1_setRGBLed+0x100>
    4eac:	e5c23004 	strb	r3, [r2, #4]

    I2C1MasterState = I2C_STARTED;
    4eb0:	e59f2024 	ldr	r2, [pc, #36]	; 4edc <I2C1_setRGBLed+0xf4>
    4eb4:	e3a03001 	mov	r3, #1
    4eb8:	e5823000 	str	r3, [r2]
    I2C1Engine();
    4ebc:	eb000027 	bl	4f60 <I2C1Engine>

    return 0;
    4ec0:	e3a03000 	mov	r3, #0
    4ec4:	e50b301c 	str	r3, [fp, #-28]
    4ec8:	e51b301c 	ldr	r3, [fp, #-28]
}
    4ecc:	e1a00003 	mov	r0, r3
    4ed0:	e24bd00c 	sub	sp, fp, #12
    4ed4:	e89d6800 	ldm	sp, {fp, sp, lr}
    4ed8:	e12fff1e 	bx	lr
    4edc:	40000a10 	.word	0x40000a10
    4ee0:	40000a18 	.word	0x40000a18
    4ee4:	40001bd4 	.word	0x40001bd4
    4ee8:	40001bd8 	.word	0x40001bd8

00004eec <I2C1Init>:



void I2C1Init(void)
{
    4eec:	e1a0c00d 	mov	ip, sp
    4ef0:	e92dd800 	push	{fp, ip, lr, pc}
    4ef4:	e24cb004 	sub	fp, ip, #4
    /*--- Clear flags ---*/
    I21CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;
    4ef8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4efc:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4f00:	e2833018 	add	r3, r3, #24
    4f04:	e3a0206c 	mov	r2, #108	; 0x6c
    4f08:	e5832000 	str	r2, [r3]

    /*--- Reset registers ---*/
    I21SCLL   = I21SCLL_SCLL;
    4f0c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4f10:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4f14:	e2833014 	add	r3, r3, #20
    4f18:	e3a02c02 	mov	r2, #512	; 0x200
    4f1c:	e5832000 	str	r2, [r3]
    I21SCLH   = I21SCLH_SCLH;
    4f20:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4f24:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4f28:	e2833010 	add	r3, r3, #16
    4f2c:	e3a02c02 	mov	r2, #512	; 0x200
    4f30:	e5832000 	str	r2, [r3]

    install_irq( I2C1_INT, (void *) I2C1MasterHandler );
    4f34:	e3a00013 	mov	r0, #19
    4f38:	e59f101c 	ldr	r1, [pc, #28]	; 4f5c <I2C1Init+0x70>
    4f3c:	eb00006a 	bl	50ec <install_irq>
    I21CONSET = I2CONSET_I2EN;
    4f40:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4f44:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4f48:	e3a02040 	mov	r2, #64	; 0x40
    4f4c:	e5832000 	str	r2, [r3]
}
    4f50:	e24bd00c 	sub	sp, fp, #12
    4f54:	e89d6800 	ldm	sp, {fp, sp, lr}
    4f58:	e12fff1e 	bx	lr
    4f5c:	00003fb8 	.word	0x00003fb8

00004f60 <I2C1Engine>:

unsigned int I2C1Engine( void )
{
    4f60:	e1a0c00d 	mov	ip, sp
    4f64:	e92dd800 	push	{fp, ip, lr, pc}
    4f68:	e24cb004 	sub	fp, ip, #4
	I21CONSET = I2CONSET_STO;      /* Set Stop flag */
    4f6c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4f70:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4f74:	e3a02010 	mov	r2, #16
    4f78:	e5832000 	str	r2, [r3]
	I21CONCLR = I2CONCLR_SIC;  /* Clear SI flag */
    4f7c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4f80:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4f84:	e2833018 	add	r3, r3, #24
    4f88:	e3a02008 	mov	r2, #8
    4f8c:	e5832000 	str	r2, [r3]
	I2C1MasterState = I2C_IDLE;
    4f90:	e59f2034 	ldr	r2, [pc, #52]	; 4fcc <I2C1Engine+0x6c>
    4f94:	e3a03000 	mov	r3, #0
    4f98:	e5823000 	str	r3, [r2]
    WrIndex1 = 0;
    4f9c:	e59f202c 	ldr	r2, [pc, #44]	; 4fd0 <I2C1Engine+0x70>
    4fa0:	e3a03000 	mov	r3, #0
    4fa4:	e5823000 	str	r3, [r2]
    I21CONSET = I2CONSET_STA;	/* Set Start flag */
    4fa8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4fac:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4fb0:	e3a02020 	mov	r2, #32
    4fb4:	e5832000 	str	r2, [r3]
    return ( TRUE );
    4fb8:	e3a03001 	mov	r3, #1
}
    4fbc:	e1a00003 	mov	r0, r3
    4fc0:	e24bd00c 	sub	sp, fp, #12
    4fc4:	e89d6800 	ldm	sp, {fp, sp, lr}
    4fc8:	e12fff1e 	bx	lr
    4fcc:	40000a10 	.word	0x40000a10
    4fd0:	40000a18 	.word	0x40000a18

00004fd4 <I2C1State>:

unsigned char I2C1State(void)
{
    4fd4:	e1a0c00d 	mov	ip, sp
    4fd8:	e92dd800 	push	{fp, ip, lr, pc}
    4fdc:	e24cb004 	sub	fp, ip, #4
	return I2C1MasterState;
    4fe0:	e59f3014 	ldr	r3, [pc, #20]	; 4ffc <I2C1State+0x28>
    4fe4:	e5933000 	ldr	r3, [r3]
    4fe8:	e20330ff 	and	r3, r3, #255	; 0xff
}
    4fec:	e1a00003 	mov	r0, r3
    4ff0:	e24bd00c 	sub	sp, fp, #12
    4ff4:	e89d6800 	ldm	sp, {fp, sp, lr}
    4ff8:	e12fff1e 	bx	lr
    4ffc:	40000a10 	.word	0x40000a10

00005000 <DefaultVICHandler>:
** Returned value:		None
** 
******************************************************************************/
// mthomas: inserted static to avoid gcc-warning
static void DefaultVICHandler (void) __irq 
{
    5000:	e1a0c00d 	mov	ip, sp
    5004:	e92dd800 	push	{fp, ip, lr, pc}
    5008:	e24cb004 	sub	fp, ip, #4
    /* if the IRQ is not installed into the VIC, and interrupt occurs, the
    default interrupt VIC address will be used. This could happen in a race 
    condition. For debugging, use this endless loop to trace back. */
    /* For more details, see Philips appnote AN10414 */
    VICVectAddr = 0;		/* Acknowledge Interrupt */ 
    500c:	e3a03000 	mov	r3, #0
    5010:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    5014:	e3a02000 	mov	r2, #0
    5018:	e5832000 	str	r2, [r3]
    // while ( 1 ); to find unknown interrupts while debugging
}
    501c:	e24bd00c 	sub	sp, fp, #12
    5020:	e89d6800 	ldm	sp, {fp, sp, lr}
    5024:	e12fff1e 	bx	lr

00005028 <init_VIC>:
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void init_VIC(void) 
{
    5028:	e1a0c00d 	mov	ip, sp
    502c:	e92dd800 	push	{fp, ip, lr, pc}
    5030:	e24cb004 	sub	fp, ip, #4
    5034:	e24dd00c 	sub	sp, sp, #12
    unsigned long i = 0;
    5038:	e3a03000 	mov	r3, #0
    503c:	e50b3018 	str	r3, [fp, #-24]
    unsigned long *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    5040:	e3e03efe 	mvn	r3, #4064	; 0xfe0
    5044:	e243300b 	sub	r3, r3, #11
    5048:	e3e02000 	mvn	r2, #0
    504c:	e5832000 	str	r2, [r3]
    VICVectAddr = 0;
    5050:	e3a03000 	mov	r3, #0
    5054:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    5058:	e3a02000 	mov	r2, #0
    505c:	e5832000 	str	r2, [r3]
    VICIntSelect = 0;
    5060:	e3e03eff 	mvn	r3, #4080	; 0xff0
    5064:	e2433003 	sub	r3, r3, #3
    5068:	e3a02000 	mov	r2, #0
    506c:	e5832000 	str	r2, [r3]

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    5070:	e3a03000 	mov	r3, #0
    5074:	e50b3018 	str	r3, [fp, #-24]
    5078:	ea000010 	b	50c0 <init_VIC+0x98>
    {
	vect_addr = (unsigned long *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
    507c:	e51b3018 	ldr	r3, [fp, #-24]
    5080:	e1a03103 	lsl	r3, r3, #2
    5084:	e2433c0f 	sub	r3, r3, #3840	; 0xf00
    5088:	e50b3014 	str	r3, [fp, #-20]
	vect_cntl = (unsigned long *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
    508c:	e51b3018 	ldr	r3, [fp, #-24]
    5090:	e1a03103 	lsl	r3, r3, #2
    5094:	e2433c0e 	sub	r3, r3, #3584	; 0xe00
    5098:	e50b3010 	str	r3, [fp, #-16]
	*vect_addr = 0;	
    509c:	e51b2014 	ldr	r2, [fp, #-20]
    50a0:	e3a03000 	mov	r3, #0
    50a4:	e5823000 	str	r3, [r2]
	*vect_cntl = 0;
    50a8:	e51b2010 	ldr	r2, [fp, #-16]
    50ac:	e3a03000 	mov	r3, #0
    50b0:	e5823000 	str	r3, [r2]
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    50b4:	e51b3018 	ldr	r3, [fp, #-24]
    50b8:	e2833001 	add	r3, r3, #1
    50bc:	e50b3018 	str	r3, [fp, #-24]
    50c0:	e51b3018 	ldr	r3, [fp, #-24]
    50c4:	e353000f 	cmp	r3, #15
    50c8:	9affffeb 	bls	507c <init_VIC+0x54>
	*vect_addr = 0;	
	*vect_cntl = 0;
    }

    /* Install the default VIC handler here */
    VICDefVectAddr = (unsigned long)DefaultVICHandler;   
    50cc:	e3e03d3f 	mvn	r3, #4032	; 0xfc0
    50d0:	e243300b 	sub	r3, r3, #11
    50d4:	e59f200c 	ldr	r2, [pc, #12]	; 50e8 <init_VIC+0xc0>
    50d8:	e5832000 	str	r2, [r3]
    return;
}
    50dc:	e24bd00c 	sub	sp, fp, #12
    50e0:	e89d6800 	ldm	sp, {fp, sp, lr}
    50e4:	e12fff1e 	bx	lr
    50e8:	00005000 	.word	0x00005000

000050ec <install_irq>:
** parameters:			Interrupt number and interrupt handler address
** Returned value:		true or false, when the table is full, return false
** 
******************************************************************************/
unsigned long install_irq( unsigned long IntNumber, void *HandlerAddr )
{
    50ec:	e1a0c00d 	mov	ip, sp
    50f0:	e92dd800 	push	{fp, ip, lr, pc}
    50f4:	e24cb004 	sub	fp, ip, #4
    50f8:	e24dd018 	sub	sp, sp, #24
    50fc:	e50b001c 	str	r0, [fp, #-28]
    5100:	e50b1020 	str	r1, [fp, #-32]
    unsigned long i;
    unsigned long *vect_addr;
    unsigned long *vect_cntl;
      
    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
    5104:	e3e02efe 	mvn	r2, #4064	; 0xfe0
    5108:	e242200b 	sub	r2, r2, #11
    510c:	e51b101c 	ldr	r1, [fp, #-28]
    5110:	e3a03001 	mov	r3, #1
    5114:	e1a03113 	lsl	r3, r3, r1
    5118:	e5823000 	str	r3, [r2]
    
    for ( i = 0; i < VIC_SIZE; i++ )
    511c:	e3a03000 	mov	r3, #0
    5120:	e50b3018 	str	r3, [fp, #-24]
    5124:	ea000017 	b	5188 <install_irq+0x9c>
    {
	/* find first un-assigned VIC address for the handler */

	vect_addr = (unsigned long *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
    5128:	e51b3018 	ldr	r3, [fp, #-24]
    512c:	e1a03103 	lsl	r3, r3, #2
    5130:	e2433c0f 	sub	r3, r3, #3840	; 0xf00
    5134:	e50b3014 	str	r3, [fp, #-20]
	vect_cntl = (unsigned long *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
    5138:	e51b3018 	ldr	r3, [fp, #-24]
    513c:	e1a03103 	lsl	r3, r3, #2
    5140:	e2433c0e 	sub	r3, r3, #3584	; 0xe00
    5144:	e50b3010 	str	r3, [fp, #-16]
	if ( *vect_addr == (unsigned long)NULL )
    5148:	e51b3014 	ldr	r3, [fp, #-20]
    514c:	e5933000 	ldr	r3, [r3]
    5150:	e3530000 	cmp	r3, #0
    5154:	1a000008 	bne	517c <install_irq+0x90>
	{
	    *vect_addr = (unsigned long)HandlerAddr;	/* set interrupt vector */
    5158:	e51b3020 	ldr	r3, [fp, #-32]
    515c:	e1a02003 	mov	r2, r3
    5160:	e51b3014 	ldr	r3, [fp, #-20]
    5164:	e5832000 	str	r2, [r3]
	    *vect_cntl = (unsigned long)(IRQ_SLOT_EN | IntNumber);
    5168:	e51b301c 	ldr	r3, [fp, #-28]
    516c:	e3832020 	orr	r2, r3, #32
    5170:	e51b3010 	ldr	r3, [fp, #-16]
    5174:	e5832000 	str	r2, [r3]
	    break;
    5178:	ea000005 	b	5194 <install_irq+0xa8>
    unsigned long *vect_addr;
    unsigned long *vect_cntl;
      
    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
    
    for ( i = 0; i < VIC_SIZE; i++ )
    517c:	e51b3018 	ldr	r3, [fp, #-24]
    5180:	e2833001 	add	r3, r3, #1
    5184:	e50b3018 	str	r3, [fp, #-24]
    5188:	e51b3018 	ldr	r3, [fp, #-24]
    518c:	e353000f 	cmp	r3, #15
    5190:	9affffe4 	bls	5128 <install_irq+0x3c>
	    *vect_addr = (unsigned long)HandlerAddr;	/* set interrupt vector */
	    *vect_cntl = (unsigned long)(IRQ_SLOT_EN | IntNumber);
	    break;
	}
    }
    if ( i == VIC_SIZE )
    5194:	e51b3018 	ldr	r3, [fp, #-24]
    5198:	e3530010 	cmp	r3, #16
    519c:	1a000002 	bne	51ac <install_irq+0xc0>
    {
	return( FALSE );		/* fatal error, can't find empty vector slot */
    51a0:	e3a03000 	mov	r3, #0
    51a4:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    51a8:	ea000007 	b	51cc <install_irq+0xe0>
    }
    VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
    51ac:	e3a02000 	mov	r2, #0
    51b0:	e2422eff 	sub	r2, r2, #4080	; 0xff0
    51b4:	e51b101c 	ldr	r1, [fp, #-28]
    51b8:	e3a03001 	mov	r3, #1
    51bc:	e1a03113 	lsl	r3, r3, r1
    51c0:	e5823000 	str	r3, [r2]
    return( TRUE );
    51c4:	e3a03001 	mov	r3, #1
    51c8:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    51cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
}
    51d0:	e1a00003 	mov	r0, r3
    51d4:	e24bd00c 	sub	sp, fp, #12
    51d8:	e89d6800 	ldm	sp, {fp, sp, lr}
    51dc:	e12fff1e 	bx	lr

000051e0 <uninstall_irq>:
** Returned value:		true or false, when the interrupt number is not found, 
**				return false
** 
******************************************************************************/
unsigned long uninstall_irq( unsigned long IntNumber )
{
    51e0:	e1a0c00d 	mov	ip, sp
    51e4:	e92dd800 	push	{fp, ip, lr, pc}
    51e8:	e24cb004 	sub	fp, ip, #4
    51ec:	e24dd014 	sub	sp, sp, #20
    51f0:	e50b001c 	str	r0, [fp, #-28]
    unsigned long i;
    unsigned long *vect_addr;
    unsigned long *vect_cntl;
      
    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
    51f4:	e3e02efe 	mvn	r2, #4064	; 0xfe0
    51f8:	e242200b 	sub	r2, r2, #11
    51fc:	e51b101c 	ldr	r1, [fp, #-28]
    5200:	e3a03001 	mov	r3, #1
    5204:	e1a03113 	lsl	r3, r3, r1
    5208:	e5823000 	str	r3, [r2]
    
    for ( i = 0; i < VIC_SIZE; i++ )
    520c:	e3a03000 	mov	r3, #0
    5210:	e50b3018 	str	r3, [fp, #-24]
    5214:	ea000019 	b	5280 <uninstall_irq+0xa0>
    {
	/* find first un-assigned VIC address for the handler */
	vect_addr = (unsigned long *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
    5218:	e51b3018 	ldr	r3, [fp, #-24]
    521c:	e1a03103 	lsl	r3, r3, #2
    5220:	e2433c0f 	sub	r3, r3, #3840	; 0xf00
    5224:	e50b3014 	str	r3, [fp, #-20]
	vect_cntl = (unsigned long *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
    5228:	e51b3018 	ldr	r3, [fp, #-24]
    522c:	e1a03103 	lsl	r3, r3, #2
    5230:	e2433c0e 	sub	r3, r3, #3584	; 0xe00
    5234:	e50b3010 	str	r3, [fp, #-16]
	if ( (*vect_cntl & ~IRQ_SLOT_EN ) == IntNumber )
    5238:	e51b3010 	ldr	r3, [fp, #-16]
    523c:	e5933000 	ldr	r3, [r3]
    5240:	e3c32020 	bic	r2, r3, #32
    5244:	e51b301c 	ldr	r3, [fp, #-28]
    5248:	e1520003 	cmp	r2, r3
    524c:	1a000008 	bne	5274 <uninstall_irq+0x94>
	{
	    *vect_addr = (unsigned long)NULL;	/* clear the VIC entry in the VIC table */
    5250:	e51b2014 	ldr	r2, [fp, #-20]
    5254:	e3a03000 	mov	r3, #0
    5258:	e5823000 	str	r3, [r2]
	    *vect_cntl &= ~IRQ_SLOT_EN;	/* disable SLOT_EN bit */	
    525c:	e51b3010 	ldr	r3, [fp, #-16]
    5260:	e5933000 	ldr	r3, [r3]
    5264:	e3c32020 	bic	r2, r3, #32
    5268:	e51b3010 	ldr	r3, [fp, #-16]
    526c:	e5832000 	str	r2, [r3]
	    break;
    5270:	ea000005 	b	528c <uninstall_irq+0xac>
    unsigned long *vect_addr;
    unsigned long *vect_cntl;
      
    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
    
    for ( i = 0; i < VIC_SIZE; i++ )
    5274:	e51b3018 	ldr	r3, [fp, #-24]
    5278:	e2833001 	add	r3, r3, #1
    527c:	e50b3018 	str	r3, [fp, #-24]
    5280:	e51b3018 	ldr	r3, [fp, #-24]
    5284:	e353000f 	cmp	r3, #15
    5288:	9affffe2 	bls	5218 <uninstall_irq+0x38>
	    *vect_addr = (unsigned long)NULL;	/* clear the VIC entry in the VIC table */
	    *vect_cntl &= ~IRQ_SLOT_EN;	/* disable SLOT_EN bit */	
	    break;
	}
    }
    if ( i == VIC_SIZE )
    528c:	e51b3018 	ldr	r3, [fp, #-24]
    5290:	e3530010 	cmp	r3, #16
    5294:	1a000002 	bne	52a4 <uninstall_irq+0xc4>
    {
	return( FALSE );		/* fatal error, can't find interrupt number 
    5298:	e3a03000 	mov	r3, #0
    529c:	e50b3020 	str	r3, [fp, #-32]
    52a0:	ea000007 	b	52c4 <uninstall_irq+0xe4>
					in vector slot */
    }
    VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
    52a4:	e3a02000 	mov	r2, #0
    52a8:	e2422eff 	sub	r2, r2, #4080	; 0xff0
    52ac:	e51b101c 	ldr	r1, [fp, #-28]
    52b0:	e3a03001 	mov	r3, #1
    52b4:	e1a03113 	lsl	r3, r3, r1
    52b8:	e5823000 	str	r3, [r2]
    return( TRUE );
    52bc:	e3a03001 	mov	r3, #1
    52c0:	e50b3020 	str	r3, [fp, #-32]
    52c4:	e51b3020 	ldr	r3, [fp, #-32]
}
    52c8:	e1a00003 	mov	r0, r3
    52cc:	e24bd00c 	sub	sp, fp, #12
    52d0:	e89d6800 	ldm	sp, {fp, sp, lr}
    52d4:	e12fff1e 	bx	lr

000052d8 <ADCInit>:
** parameters:			ADC clock rate
** Returned value:		true or false
**
*****************************************************************************/
unsigned int ADCInit( unsigned int ADC_Clk )
{
    52d8:	e1a0c00d 	mov	ip, sp
    52dc:	e92dd810 	push	{r4, fp, ip, lr, pc}
    52e0:	e24cb004 	sub	fp, ip, #4
    52e4:	e24dd004 	sub	sp, sp, #4
    52e8:	e50b0014 	str	r0, [fp, #-20]
	   AD0CR = ( 0x01 ) | 	// SEL=1,select channel 0, 1 to 4 on ADC0
    52ec:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    52f0:	e284490d 	add	r4, r4, #212992	; 0x34000
    52f4:	e3a008e5 	mov	r0, #15007744	; 0xe50000
    52f8:	e2400d79 	sub	r0, r0, #7744	; 0x1e40
    52fc:	e51b1014 	ldr	r1, [fp, #-20]
    5300:	eb002146 	bl	d820 <____udivsi3_from_arm>
    5304:	e1a03000 	mov	r3, r0
    5308:	e2433001 	sub	r3, r3, #1
    530c:	e1a03403 	lsl	r3, r3, #8
    5310:	e3833821 	orr	r3, r3, #2162688	; 0x210000
    5314:	e3833001 	orr	r3, r3, #1
    5318:	e5843000 	str	r3, [r4]
	( 0 << 22 ) |  		// TEST1:0 = 00
	( 0 << 24 ) |  		// START = 0 A/D conversion stops
	( 0 << 27 );		// EDGE = 0 (CAP/MAT singal falling,trigger A/D
				conversion) */

    AD1CR = ( 0x01 << 0 ) | 	// SEL=1,select channel 0, 0 to 7 on ADC1
    531c:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    5320:	e2844806 	add	r4, r4, #393216	; 0x60000
    5324:	e3a008e5 	mov	r0, #15007744	; 0xe50000
    5328:	e2400d79 	sub	r0, r0, #7744	; 0x1e40
    532c:	e51b1014 	ldr	r1, [fp, #-20]
    5330:	eb00213a 	bl	d820 <____udivsi3_from_arm>
    5334:	e1a03000 	mov	r3, r0
    5338:	e2433001 	sub	r3, r3, #1
    533c:	e1a03403 	lsl	r3, r3, #8
    5340:	e3833602 	orr	r3, r3, #2097152	; 0x200000
    5344:	e3833001 	orr	r3, r3, #1
    5348:	e5843000 	str	r3, [r4]
    {
	return (FALSE);
    }
#endif

    return (TRUE);
    534c:	e3a03001 	mov	r3, #1
}
    5350:	e1a00003 	mov	r0, r3
    5354:	e24bd010 	sub	sp, fp, #16
    5358:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
    535c:	e12fff1e 	bx	lr

00005360 <ADC0Read>:
** parameters:			Channel number
** Returned value:		Value read, if interrupt driven, return channel #
**
*****************************************************************************/
unsigned int ADC0Read( unsigned char channelNum )
{
    5360:	e1a0c00d 	mov	ip, sp
    5364:	e92dd800 	push	{fp, ip, lr, pc}
    5368:	e24cb004 	sub	fp, ip, #4
    536c:	e24dd014 	sub	sp, sp, #20
    5370:	e1a03000 	mov	r3, r0
    5374:	e54b301c 	strb	r3, [fp, #-28]
#if !ADC_INTERRUPT_FLAG
    unsigned int regVal, ADC_Data;
    volatile unsigned int timeout=0;
    5378:	e3a03000 	mov	r3, #0
    537c:	e50b3018 	str	r3, [fp, #-24]
#endif

    /* channel number is 0 through 7 */
    if ( channelNum >= ADC_NUM )
    5380:	e55b301c 	ldrb	r3, [fp, #-28]
    5384:	e3530007 	cmp	r3, #7
    5388:	9a000001 	bls	5394 <ADC0Read+0x34>
    {
	channelNum = 0;		/* reset channel number to 0 */
    538c:	e3a03000 	mov	r3, #0
    5390:	e54b301c 	strb	r3, [fp, #-28]
    }
    AD0CR &= 0xFFFFFF00;
    5394:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    5398:	e282290d 	add	r2, r2, #212992	; 0x34000
    539c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    53a0:	e283390d 	add	r3, r3, #212992	; 0x34000
    53a4:	e5933000 	ldr	r3, [r3]
    53a8:	e3c330ff 	bic	r3, r3, #255	; 0xff
    53ac:	e5823000 	str	r3, [r2]
    AD0CR |= (1 << 24) | (1 << channelNum);
    53b0:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
    53b4:	e281190d 	add	r1, r1, #212992	; 0x34000
    53b8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    53bc:	e283390d 	add	r3, r3, #212992	; 0x34000
    53c0:	e5930000 	ldr	r0, [r3]
    53c4:	e55b201c 	ldrb	r2, [fp, #-28]
    53c8:	e3a03001 	mov	r3, #1
    53cc:	e1a03213 	lsl	r3, r3, r2
    53d0:	e1803003 	orr	r3, r0, r3
    53d4:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
    53d8:	e5813000 	str	r3, [r1]
				/* switch channel,start A/D convert */
#if !ADC_INTERRUPT_FLAG
    while ( timeout++<5000 )			/* wait until end of A/D convert */
    53dc:	ea000009 	b	5408 <ADC0Read+0xa8>
    {
	regVal = *(volatile unsigned long *)(AD0_BASE_ADDR
    53e0:	e55b301c 	ldrb	r3, [fp, #-28]
    53e4:	e1a03103 	lsl	r3, r3, #2
    53e8:	e283320e 	add	r3, r3, #-536870912	; 0xe0000000
    53ec:	e283390d 	add	r3, r3, #212992	; 0x34000
    53f0:	e2833010 	add	r3, r3, #16
    53f4:	e5933000 	ldr	r3, [r3]
    53f8:	e50b3014 	str	r3, [fp, #-20]
			+ ADC_OFFSET + ADC_INDEX * channelNum);
				/* read result of A/D conversion */
	if ( regVal & ADC_DONE )
    53fc:	e51b3014 	ldr	r3, [fp, #-20]
    5400:	e3530000 	cmp	r3, #0
    5404:	ba00000a 	blt	5434 <ADC0Read+0xd4>
    }
    AD0CR &= 0xFFFFFF00;
    AD0CR |= (1 << 24) | (1 << channelNum);
				/* switch channel,start A/D convert */
#if !ADC_INTERRUPT_FLAG
    while ( timeout++<5000 )			/* wait until end of A/D convert */
    5408:	e51b1018 	ldr	r1, [fp, #-24]
    540c:	e3a03d4e 	mov	r3, #4992	; 0x1380
    5410:	e2833007 	add	r3, r3, #7
    5414:	e1510003 	cmp	r1, r3
    5418:	83a03000 	movhi	r3, #0
    541c:	93a03001 	movls	r3, #1
    5420:	e20320ff 	and	r2, r3, #255	; 0xff
    5424:	e2813001 	add	r3, r1, #1
    5428:	e50b3018 	str	r3, [fp, #-24]
    542c:	e3520000 	cmp	r2, #0
    5430:	1affffea 	bne	53e0 <ADC0Read+0x80>
	{
	    break;
	}
    }

    AD0CR &= 0xF8FFFFFF;	/* stop ADC now */
    5434:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    5438:	e282290d 	add	r2, r2, #212992	; 0x34000
    543c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5440:	e283390d 	add	r3, r3, #212992	; 0x34000
    5444:	e5933000 	ldr	r3, [r3]
    5448:	e3c33407 	bic	r3, r3, #117440512	; 0x7000000
    544c:	e5823000 	str	r3, [r2]
    if ( regVal & ADC_OVERRUN )	/* save data when it's not overrun
    5450:	e51b3014 	ldr	r3, [fp, #-20]
    5454:	e2033101 	and	r3, r3, #1073741824	; 0x40000000
    5458:	e3530000 	cmp	r3, #0
    545c:	0a000002 	beq	546c <ADC0Read+0x10c>
				otherwise, return zero */
    {
	return ( 0 );
    5460:	e3a03000 	mov	r3, #0
    5464:	e50b3020 	str	r3, [fp, #-32]
    5468:	ea000006 	b	5488 <ADC0Read+0x128>
    }
    ADC_Data = ( regVal >> 6 ) & 0x3FF;
    546c:	e51b3014 	ldr	r3, [fp, #-20]
    5470:	e1a03323 	lsr	r3, r3, #6
    5474:	e1a03b03 	lsl	r3, r3, #22
    5478:	e1a03b23 	lsr	r3, r3, #22
    547c:	e50b3010 	str	r3, [fp, #-16]
    return ( ADC_Data );	/* return A/D conversion value */
    5480:	e51b3010 	ldr	r3, [fp, #-16]
    5484:	e50b3020 	str	r3, [fp, #-32]
    5488:	e51b3020 	ldr	r3, [fp, #-32]
#else
    return ( channelNum );	/* if it's interrupt driven, the
				ADC reading is done inside the handler.
				so, return channel number */
#endif
}
    548c:	e1a00003 	mov	r0, r3
    5490:	e24bd00c 	sub	sp, fp, #12
    5494:	e89d6800 	ldm	sp, {fp, sp, lr}
    5498:	e12fff1e 	bx	lr

0000549c <ADC1Read>:
** parameters:			Channel number
** Returned value:		Value read, if interrupt driven, return channel #
**
*****************************************************************************/
unsigned int ADC1Read( unsigned char channelNum )
{
    549c:	e1a0c00d 	mov	ip, sp
    54a0:	e92dd800 	push	{fp, ip, lr, pc}
    54a4:	e24cb004 	sub	fp, ip, #4
    54a8:	e24dd010 	sub	sp, sp, #16
    54ac:	e1a03000 	mov	r3, r0
    54b0:	e54b3018 	strb	r3, [fp, #-24]
    unsigned int regVal;
	unsigned int ADC_Data;
#endif

    /* channel number is 0 through 7 */
    if ( channelNum >= ADC_NUM )
    54b4:	e55b3018 	ldrb	r3, [fp, #-24]
    54b8:	e3530007 	cmp	r3, #7
    54bc:	9a000001 	bls	54c8 <ADC1Read+0x2c>
    {
	channelNum = 0;		/* reset channel number to 0 */
    54c0:	e3a03000 	mov	r3, #0
    54c4:	e54b3018 	strb	r3, [fp, #-24]
    }
    AD1CR &= 0xFFFFFF00;
    54c8:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    54cc:	e2822806 	add	r2, r2, #393216	; 0x60000
    54d0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    54d4:	e2833806 	add	r3, r3, #393216	; 0x60000
    54d8:	e5933000 	ldr	r3, [r3]
    54dc:	e3c330ff 	bic	r3, r3, #255	; 0xff
    54e0:	e5823000 	str	r3, [r2]
    AD1CR |= (1 << 24) | (1 << channelNum);
    54e4:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
    54e8:	e2811806 	add	r1, r1, #393216	; 0x60000
    54ec:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    54f0:	e2833806 	add	r3, r3, #393216	; 0x60000
    54f4:	e5930000 	ldr	r0, [r3]
    54f8:	e55b2018 	ldrb	r2, [fp, #-24]
    54fc:	e3a03001 	mov	r3, #1
    5500:	e1a03213 	lsl	r3, r3, r2
    5504:	e1803003 	orr	r3, r0, r3
    5508:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
    550c:	e5813000 	str	r3, [r1]
				/* switch channel,start A/D convert */
#if !ADC_INTERRUPT_FLAG
    while ( 1 )			/* wait until end of A/D convert */
    {
	regVal = *(volatile unsigned long *)(AD1_BASE_ADDR
    5510:	e55b3018 	ldrb	r3, [fp, #-24]
    5514:	e1a03103 	lsl	r3, r3, #2
    5518:	e283320e 	add	r3, r3, #-536870912	; 0xe0000000
    551c:	e2833806 	add	r3, r3, #393216	; 0x60000
    5520:	e2833010 	add	r3, r3, #16
    5524:	e5933000 	ldr	r3, [r3]
    5528:	e50b3014 	str	r3, [fp, #-20]
			+ ADC_OFFSET + ADC_INDEX * channelNum);
				/* read result of A/D conversion */
	if ( regVal & ADC_DONE )
    552c:	e51b3014 	ldr	r3, [fp, #-20]
    5530:	e3530000 	cmp	r3, #0
    5534:	ba000000 	blt	553c <ADC1Read+0xa0>
	{
	    break;
	}
    }
    5538:	eafffff4 	b	5510 <ADC1Read+0x74>

    AD1CR &= 0xF8FFFFFF;	/* stop ADC now */
    553c:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    5540:	e2822806 	add	r2, r2, #393216	; 0x60000
    5544:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5548:	e2833806 	add	r3, r3, #393216	; 0x60000
    554c:	e5933000 	ldr	r3, [r3]
    5550:	e3c33407 	bic	r3, r3, #117440512	; 0x7000000
    5554:	e5823000 	str	r3, [r2]
    if ( regVal & ADC_OVERRUN )	/* save data when it's not overrun
    5558:	e51b3014 	ldr	r3, [fp, #-20]
    555c:	e2033101 	and	r3, r3, #1073741824	; 0x40000000
    5560:	e3530000 	cmp	r3, #0
    5564:	0a000002 	beq	5574 <ADC1Read+0xd8>
				otherwise, return zero */
    {
	return ( 0 );
    5568:	e3a03000 	mov	r3, #0
    556c:	e50b301c 	str	r3, [fp, #-28]
    5570:	ea000006 	b	5590 <ADC1Read+0xf4>
    }

    ADC_Data = ( regVal >> 6 ) & 0x3FF;
    5574:	e51b3014 	ldr	r3, [fp, #-20]
    5578:	e1a03323 	lsr	r3, r3, #6
    557c:	e1a03b03 	lsl	r3, r3, #22
    5580:	e1a03b23 	lsr	r3, r3, #22
    5584:	e50b3010 	str	r3, [fp, #-16]
    return ( ADC_Data );	/* return A/D conversion value */
    5588:	e51b3010 	ldr	r3, [fp, #-16]
    558c:	e50b301c 	str	r3, [fp, #-28]
    5590:	e51b301c 	ldr	r3, [fp, #-28]
#else
    return ( channelNum );
#endif
}
    5594:	e1a00003 	mov	r0, r3
    5598:	e24bd00c 	sub	sp, fp, #12
    559c:	e89d6800 	ldm	sp, {fp, sp, lr}
    55a0:	e12fff1e 	bx	lr

000055a4 <ADC0triggerSampling>:

void ADC0triggerSampling(unsigned char selectChannels)
{
    55a4:	e1a0c00d 	mov	ip, sp
    55a8:	e92dd800 	push	{fp, ip, lr, pc}
    55ac:	e24cb004 	sub	fp, ip, #4
    55b0:	e24dd004 	sub	sp, sp, #4
    55b4:	e1a03000 	mov	r3, r0
    55b8:	e54b3010 	strb	r3, [fp, #-16]
	AD0CR |= (selectChannels);
    55bc:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    55c0:	e282290d 	add	r2, r2, #212992	; 0x34000
    55c4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    55c8:	e283390d 	add	r3, r3, #212992	; 0x34000
    55cc:	e5931000 	ldr	r1, [r3]
    55d0:	e55b3010 	ldrb	r3, [fp, #-16]
    55d4:	e1813003 	orr	r3, r1, r3
    55d8:	e5823000 	str	r3, [r2]

}
    55dc:	e24bd00c 	sub	sp, fp, #12
    55e0:	e89d6800 	ldm	sp, {fp, sp, lr}
    55e4:	e12fff1e 	bx	lr

000055e8 <ADC0getSamplingResults>:

void ADC0getSamplingResults(unsigned char selectChannels, unsigned int * channelValues)
{
    55e8:	e1a0c00d 	mov	ip, sp
    55ec:	e92dd800 	push	{fp, ip, lr, pc}
    55f0:	e24cb004 	sub	fp, ip, #4
    55f4:	e24dd010 	sub	sp, sp, #16
    55f8:	e1a03000 	mov	r3, r0
    55fc:	e50b101c 	str	r1, [fp, #-28]
    5600:	e54b3018 	strb	r3, [fp, #-24]
	int i;
	//get last result from all selected channels
	for (i=0;i<8;i++)
    5604:	e3a03000 	mov	r3, #0
    5608:	e50b3014 	str	r3, [fp, #-20]
    560c:	ea000026 	b	56ac <ADC0getSamplingResults+0xc4>
		if (selectChannels&(1<<i))
    5610:	e55b2018 	ldrb	r2, [fp, #-24]
    5614:	e51b3014 	ldr	r3, [fp, #-20]
    5618:	e1a03352 	asr	r3, r2, r3
    561c:	e2033001 	and	r3, r3, #1
    5620:	e20330ff 	and	r3, r3, #255	; 0xff
    5624:	e3530000 	cmp	r3, #0
    5628:	0a00001c 	beq	56a0 <ADC0getSamplingResults+0xb8>
		{
		    unsigned int regVal;

			regVal=*(volatile unsigned long *)(AD0_BASE_ADDR
    562c:	e51b3014 	ldr	r3, [fp, #-20]
    5630:	e1a03103 	lsl	r3, r3, #2
    5634:	e283320e 	add	r3, r3, #-536870912	; 0xe0000000
    5638:	e283390d 	add	r3, r3, #212992	; 0x34000
    563c:	e2833010 	add	r3, r3, #16
    5640:	e5933000 	ldr	r3, [r3]
    5644:	e50b3010 	str	r3, [fp, #-16]
					+ ADC_OFFSET + ADC_INDEX * i);

			if ((regVal&(ADC_OVERRUN|ADC_DONE))==0)
    5648:	e51b3010 	ldr	r3, [fp, #-16]
    564c:	e2033103 	and	r3, r3, #-1073741824	; 0xc0000000
    5650:	e3530000 	cmp	r3, #0
    5654:	1a000007 	bne	5678 <ADC0getSamplingResults+0x90>
					channelValues[i]=0;
    5658:	e51b3014 	ldr	r3, [fp, #-20]
    565c:	e1a03103 	lsl	r3, r3, #2
    5660:	e1a02003 	mov	r2, r3
    5664:	e51b301c 	ldr	r3, [fp, #-28]
    5668:	e0822003 	add	r2, r2, r3
    566c:	e3a03000 	mov	r3, #0
    5670:	e5823000 	str	r3, [r2]
    5674:	ea000009 	b	56a0 <ADC0getSamplingResults+0xb8>
			else
					channelValues[i]=( regVal >> 6 ) & 0x3FF;
    5678:	e51b3014 	ldr	r3, [fp, #-20]
    567c:	e1a03103 	lsl	r3, r3, #2
    5680:	e1a02003 	mov	r2, r3
    5684:	e51b301c 	ldr	r3, [fp, #-28]
    5688:	e0822003 	add	r2, r2, r3
    568c:	e51b3010 	ldr	r3, [fp, #-16]
    5690:	e1a03323 	lsr	r3, r3, #6
    5694:	e1a03b03 	lsl	r3, r3, #22
    5698:	e1a03b23 	lsr	r3, r3, #22
    569c:	e5823000 	str	r3, [r2]

void ADC0getSamplingResults(unsigned char selectChannels, unsigned int * channelValues)
{
	int i;
	//get last result from all selected channels
	for (i=0;i<8;i++)
    56a0:	e51b3014 	ldr	r3, [fp, #-20]
    56a4:	e2833001 	add	r3, r3, #1
    56a8:	e50b3014 	str	r3, [fp, #-20]
    56ac:	e51b3014 	ldr	r3, [fp, #-20]
    56b0:	e3530007 	cmp	r3, #7
    56b4:	daffffd5 	ble	5610 <ADC0getSamplingResults+0x28>
			if ((regVal&(ADC_OVERRUN|ADC_DONE))==0)
					channelValues[i]=0;
			else
					channelValues[i]=( regVal >> 6 ) & 0x3FF;
		}
}
    56b8:	e24bd00c 	sub	sp, fp, #12
    56bc:	e89d6800 	ldm	sp, {fp, sp, lr}
    56c0:	e12fff1e 	bx	lr

000056c4 <SSPHandler>:
char data_sent_to_HL=1;

inline void SSPReceive(unsigned char);

void SSPHandler (void) __irq
{
    56c4:	e1a0c00d 	mov	ip, sp
    56c8:	e92dd800 	push	{fp, ip, lr, pc}
    56cc:	e24cb004 	sub	fp, ip, #4
    56d0:	e24dd008 	sub	sp, sp, #8
    unsigned short input_data;
//    unsigned char timeout=0;

    IENABLE;				/* handles nested interrupt */

    regValue = SSPMIS;
    56d4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    56d8:	e283391a 	add	r3, r3, #425984	; 0x68000
    56dc:	e283301c 	add	r3, r3, #28
    56e0:	e5933000 	ldr	r3, [r3]
    56e4:	e50b3014 	str	r3, [fp, #-20]
    if ( regValue & SSPMIS_RORMIS )	/* Receive overrun interrupt */
    56e8:	e51b3014 	ldr	r3, [fp, #-20]
    56ec:	e2033001 	and	r3, r3, #1
    56f0:	e20330ff 	and	r3, r3, #255	; 0xff
    56f4:	e3530000 	cmp	r3, #0
    56f8:	0a000004 	beq	5710 <SSPHandler+0x4c>
    {
		SSPICR = SSPICR_RORIC;		/* clear interrupt */
    56fc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5700:	e283391a 	add	r3, r3, #425984	; 0x68000
    5704:	e2833020 	add	r3, r3, #32
    5708:	e3a02001 	mov	r2, #1
    570c:	e5832000 	str	r2, [r3]
    }
    if ( regValue & SSPMIS_RTMIS )	/* Receive timeout interrupt */
    5710:	e51b3014 	ldr	r3, [fp, #-20]
    5714:	e2033002 	and	r3, r3, #2
    5718:	e3530000 	cmp	r3, #0
    571c:	0a000004 	beq	5734 <SSPHandler+0x70>
    {
		SSPICR = SSPICR_RTIC;		/* clear interrupt */
    5720:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5724:	e283391a 	add	r3, r3, #425984	; 0x68000
    5728:	e2833020 	add	r3, r3, #32
    572c:	e3a02002 	mov	r2, #2
    5730:	e5832000 	str	r2, [r3]
    }

    if ( regValue & SSPMIS_RXMIS )	/* Rx at least half full */
    5734:	e51b3014 	ldr	r3, [fp, #-20]
    5738:	e2033004 	and	r3, r3, #4
    573c:	e3530000 	cmp	r3, #0
    5740:	0a000016 	beq	57a0 <SSPHandler+0xdc>
    {
    			/* receive until it's empty */
	while ( SSPSR & SSPSR_RNE )
    5744:	ea00000f 	b	5788 <SSPHandler+0xc4>
	{
		input_data=SSPDR;
    5748:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    574c:	e283391a 	add	r3, r3, #425984	; 0x68000
    5750:	e5933000 	ldr	r3, [r3]
    5754:	e14b30be 	strh	r3, [fp, #-14]
	    //SSPReceive(input_data&0xFF);
	    //SSPReceive(input_data>>8);

		SSP_rx_handler_HL(input_data&0xFF);
    5758:	e15b30be 	ldrh	r3, [fp, #-14]
    575c:	e20330ff 	and	r3, r3, #255	; 0xff
    5760:	e20330ff 	and	r3, r3, #255	; 0xff
    5764:	e1a00003 	mov	r0, r3
    5768:	ebffee66 	bl	1108 <SSP_rx_handler_HL>
		SSP_rx_handler_HL(input_data>>8);
    576c:	e15b30be 	ldrh	r3, [fp, #-14]
    5770:	e1a03423 	lsr	r3, r3, #8
    5774:	e1a03803 	lsl	r3, r3, #16
    5778:	e1a03823 	lsr	r3, r3, #16
    577c:	e20330ff 	and	r3, r3, #255	; 0xff
    5780:	e1a00003 	mov	r0, r3
    5784:	ebffee5f 	bl	1108 <SSP_rx_handler_HL>
    }

    if ( regValue & SSPMIS_RXMIS )	/* Rx at least half full */
    {
    			/* receive until it's empty */
	while ( SSPSR & SSPSR_RNE )
    5788:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    578c:	e283391a 	add	r3, r3, #425984	; 0x68000
    5790:	e5933000 	ldr	r3, [r3]
    5794:	e2033004 	and	r3, r3, #4
    5798:	e3530000 	cmp	r3, #0
    579c:	1affffe9 	bne	5748 <SSPHandler+0x84>
	//    while ( (!(SSPSR & SSPSR_BSY) )&&(timeout++<50) );
	}				/* interrupt will be cleared when */
					/* data register is read or written */
    }

    if ( regValue & SSPMIS_TXMIS )	/* Tx at least half empty */
    57a0:	e51b3014 	ldr	r3, [fp, #-20]
    57a4:	e2033008 	and	r3, r3, #8
    57a8:	e3530000 	cmp	r3, #0
    57ac:	0a00002f 	beq	5870 <SSPHandler+0x1ac>
    {
	/* transmit until it's full */
	while ( (SSPSR & SSPSR_TNF) )
    57b0:	ea000028 	b	5858 <SSPHandler+0x194>
	{
	    if(CurrentTxIndex<SPIWR_num_bytes)
    57b4:	e59f30d0 	ldr	r3, [pc, #208]	; 588c <SSPHandler+0x1c8>
    57b8:	e5933000 	ldr	r3, [r3]
    57bc:	e1a02003 	mov	r2, r3
    57c0:	e59f30c8 	ldr	r3, [pc, #200]	; 5890 <SSPHandler+0x1cc>
    57c4:	e5933000 	ldr	r3, [r3]
    57c8:	e1520003 	cmp	r2, r3
    57cc:	2a000014 	bcs	5824 <SSPHandler+0x160>
	    {
	    	SSPDR = SPIWRData[CurrentTxIndex]|(SPIWRData[CurrentTxIndex+1]<<8);
    57d0:	e3a0128e 	mov	r1, #-536870904	; 0xe0000008
    57d4:	e281191a 	add	r1, r1, #425984	; 0x68000
    57d8:	e59f30ac 	ldr	r3, [pc, #172]	; 588c <SSPHandler+0x1c8>
    57dc:	e5932000 	ldr	r2, [r3]
    57e0:	e59f30ac 	ldr	r3, [pc, #172]	; 5894 <SSPHandler+0x1d0>
    57e4:	e7d33002 	ldrb	r3, [r3, r2]
    57e8:	e1a00003 	mov	r0, r3
    57ec:	e59f3098 	ldr	r3, [pc, #152]	; 588c <SSPHandler+0x1c8>
    57f0:	e5933000 	ldr	r3, [r3]
    57f4:	e2832001 	add	r2, r3, #1
    57f8:	e59f3094 	ldr	r3, [pc, #148]	; 5894 <SSPHandler+0x1d0>
    57fc:	e7d33002 	ldrb	r3, [r3, r2]
    5800:	e1a03403 	lsl	r3, r3, #8
    5804:	e1803003 	orr	r3, r0, r3
    5808:	e5813000 	str	r3, [r1]
	    	CurrentTxIndex+=2;
    580c:	e59f3078 	ldr	r3, [pc, #120]	; 588c <SSPHandler+0x1c8>
    5810:	e5933000 	ldr	r3, [r3]
    5814:	e2832002 	add	r2, r3, #2
    5818:	e59f306c 	ldr	r3, [pc, #108]	; 588c <SSPHandler+0x1c8>
    581c:	e5832000 	str	r2, [r3]
    5820:	ea00000c 	b	5858 <SSPHandler+0x194>
	    }
	    else
	    {
	    	CurrentTxIndex=0;
    5824:	e59f2060 	ldr	r2, [pc, #96]	; 588c <SSPHandler+0x1c8>
    5828:	e3a03000 	mov	r3, #0
    582c:	e5823000 	str	r3, [r2]
	    	SPIWR_num_bytes=0;
    5830:	e59f2058 	ldr	r2, [pc, #88]	; 5890 <SSPHandler+0x1cc>
    5834:	e3a03000 	mov	r3, #0
    5838:	e5823000 	str	r3, [r2]
	    	data_sent_to_LL=1;
    583c:	e59f2054 	ldr	r2, [pc, #84]	; 5898 <SSPHandler+0x1d4>
    5840:	e3a03001 	mov	r3, #1
    5844:	e5c23000 	strb	r3, [r2]
			SSPDR=0;
    5848:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    584c:	e283391a 	add	r3, r3, #425984	; 0x68000
    5850:	e3a02000 	mov	r2, #0
    5854:	e5832000 	str	r2, [r3]
    }

    if ( regValue & SSPMIS_TXMIS )	/* Tx at least half empty */
    {
	/* transmit until it's full */
	while ( (SSPSR & SSPSR_TNF) )
    5858:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    585c:	e283391a 	add	r3, r3, #425984	; 0x68000
    5860:	e5933000 	ldr	r3, [r3]
    5864:	e2033002 	and	r3, r3, #2
    5868:	e3530000 	cmp	r3, #0
    586c:	1affffd0 	bne	57b4 <SSPHandler+0xf0>
	}				/* interrupt will be cleared when */
					/* data register is read or written */
    }

    IDISABLE;
    VICVectAddr = 0;		/* Acknowledge Interrupt */
    5870:	e3a03000 	mov	r3, #0
    5874:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    5878:	e3a02000 	mov	r2, #0
    587c:	e5832000 	str	r2, [r3]
}
    5880:	e24bd00c 	sub	sp, fp, #12
    5884:	e89d6800 	ldm	sp, {fp, sp, lr}
    5888:	e12fff1e 	bx	lr
    588c:	40001c60 	.word	0x40001c60
    5890:	40001c5c 	.word	0x40001c5c
    5894:	40001c64 	.word	0x40001c64
    5898:	4000000e 	.word	0x4000000e

0000589c <LL_write_init>:

void LL_write_init(void)
{
    589c:	e1a0c00d 	mov	ip, sp
    58a0:	e92dd800 	push	{fp, ip, lr, pc}
    58a4:	e24cb004 	sub	fp, ip, #4
		SPIWRData[0]='>';
    58a8:	e59f2028 	ldr	r2, [pc, #40]	; 58d8 <LL_write_init+0x3c>
    58ac:	e3a0303e 	mov	r3, #62	; 0x3e
    58b0:	e5c23000 	strb	r3, [r2]
		SPIWRData[1]='*';
    58b4:	e59f201c 	ldr	r2, [pc, #28]	; 58d8 <LL_write_init+0x3c>
    58b8:	e3a0302a 	mov	r3, #42	; 0x2a
    58bc:	e5c23001 	strb	r3, [r2, #1]
		SPIWRData[2]='>';
    58c0:	e59f2010 	ldr	r2, [pc, #16]	; 58d8 <LL_write_init+0x3c>
    58c4:	e3a0303e 	mov	r3, #62	; 0x3e
    58c8:	e5c23002 	strb	r3, [r2, #2]
}
    58cc:	e24bd00c 	sub	sp, fp, #12
    58d0:	e89d6800 	ldm	sp, {fp, sp, lr}
    58d4:	e12fff1e 	bx	lr
    58d8:	40001c64 	.word	0x40001c64

000058dc <LL_write>:

int LL_write(unsigned char *data, unsigned short cnt, unsigned char PD )	//write data to high-level processor
{
    58dc:	e1a0c00d 	mov	ip, sp
    58e0:	e92dd800 	push	{fp, ip, lr, pc}
    58e4:	e24cb004 	sub	fp, ip, #4
    58e8:	e24dd014 	sub	sp, sp, #20
    58ec:	e50b0014 	str	r0, [fp, #-20]
    58f0:	e1a03001 	mov	r3, r1
    58f4:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
    58f8:	e1a03002 	mov	r3, r2
    58fc:	e54b301c 	strb	r3, [fp, #-28]
	unsigned int i;

	if(data_sent_to_LL)
    5900:	e59f31d0 	ldr	r3, [pc, #464]	; 5ad8 <LL_write+0x1fc>
    5904:	e5d33000 	ldrb	r3, [r3]
    5908:	e3530000 	cmp	r3, #0
    590c:	0a00001f 	beq	5990 <LL_write+0xb4>
	{
		SPIWRData[3]=PD;
    5910:	e59f31c4 	ldr	r3, [pc, #452]	; 5adc <LL_write+0x200>
    5914:	e55b201c 	ldrb	r2, [fp, #-28]
    5918:	e5c32003 	strb	r2, [r3, #3]
		for(i=0; i<cnt; i++)
    591c:	e3a03000 	mov	r3, #0
    5920:	e50b3010 	str	r3, [fp, #-16]
    5924:	ea00000a 	b	5954 <LL_write+0x78>
		{
			SPIWRData[i+4]=data[i];
    5928:	e51b3010 	ldr	r3, [fp, #-16]
    592c:	e2831004 	add	r1, r3, #4
    5930:	e51b2010 	ldr	r2, [fp, #-16]
    5934:	e51b3014 	ldr	r3, [fp, #-20]
    5938:	e0823003 	add	r3, r2, r3
    593c:	e5d33000 	ldrb	r3, [r3]
    5940:	e59f2194 	ldr	r2, [pc, #404]	; 5adc <LL_write+0x200>
    5944:	e7c23001 	strb	r3, [r2, r1]
	unsigned int i;

	if(data_sent_to_LL)
	{
		SPIWRData[3]=PD;
		for(i=0; i<cnt; i++)
    5948:	e51b3010 	ldr	r3, [fp, #-16]
    594c:	e2833001 	add	r3, r3, #1
    5950:	e50b3010 	str	r3, [fp, #-16]
    5954:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
    5958:	e51b3010 	ldr	r3, [fp, #-16]
    595c:	e1520003 	cmp	r2, r3
    5960:	8afffff0 	bhi	5928 <LL_write+0x4c>
		{
			SPIWRData[i+4]=data[i];
		}
		SPIWRData[cnt+4]=0;
    5964:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
    5968:	e2831004 	add	r1, r3, #4
    596c:	e59f2168 	ldr	r2, [pc, #360]	; 5adc <LL_write+0x200>
    5970:	e3a03000 	mov	r3, #0
    5974:	e7c23001 	strb	r3, [r2, r1]
		SPIWR_num_bytes=cnt+5;
    5978:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
    597c:	e2833005 	add	r3, r3, #5
    5980:	e1a02003 	mov	r2, r3
    5984:	e59f3154 	ldr	r3, [pc, #340]	; 5ae0 <LL_write+0x204>
    5988:	e5832000 	str	r2, [r3]
    598c:	ea000047 	b	5ab0 <LL_write+0x1d4>
	}
	else if(SPIWR_num_bytes+cnt<127)
    5990:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
    5994:	e59f3144 	ldr	r3, [pc, #324]	; 5ae0 <LL_write+0x204>
    5998:	e5933000 	ldr	r3, [r3]
    599c:	e0823003 	add	r3, r2, r3
    59a0:	e353007e 	cmp	r3, #126	; 0x7e
    59a4:	8a00003e 	bhi	5aa4 <LL_write+0x1c8>
	{
		SPIWRData[SPIWR_num_bytes-1]='>';
    59a8:	e59f3130 	ldr	r3, [pc, #304]	; 5ae0 <LL_write+0x204>
    59ac:	e5933000 	ldr	r3, [r3]
    59b0:	e2431001 	sub	r1, r3, #1
    59b4:	e59f2120 	ldr	r2, [pc, #288]	; 5adc <LL_write+0x200>
    59b8:	e3a0303e 	mov	r3, #62	; 0x3e
    59bc:	e7c23001 	strb	r3, [r2, r1]
		SPIWRData[0+SPIWR_num_bytes]='*';
    59c0:	e59f3118 	ldr	r3, [pc, #280]	; 5ae0 <LL_write+0x204>
    59c4:	e5931000 	ldr	r1, [r3]
    59c8:	e59f210c 	ldr	r2, [pc, #268]	; 5adc <LL_write+0x200>
    59cc:	e3a0302a 	mov	r3, #42	; 0x2a
    59d0:	e7c23001 	strb	r3, [r2, r1]
		SPIWRData[1+SPIWR_num_bytes]='>';
    59d4:	e59f3104 	ldr	r3, [pc, #260]	; 5ae0 <LL_write+0x204>
    59d8:	e5933000 	ldr	r3, [r3]
    59dc:	e2831001 	add	r1, r3, #1
    59e0:	e59f20f4 	ldr	r2, [pc, #244]	; 5adc <LL_write+0x200>
    59e4:	e3a0303e 	mov	r3, #62	; 0x3e
    59e8:	e7c23001 	strb	r3, [r2, r1]
		SPIWRData[2+SPIWR_num_bytes]=PD;
    59ec:	e59f30ec 	ldr	r3, [pc, #236]	; 5ae0 <LL_write+0x204>
    59f0:	e5933000 	ldr	r3, [r3]
    59f4:	e2831002 	add	r1, r3, #2
    59f8:	e59f20dc 	ldr	r2, [pc, #220]	; 5adc <LL_write+0x200>
    59fc:	e55b301c 	ldrb	r3, [fp, #-28]
    5a00:	e7c23001 	strb	r3, [r2, r1]
		for(i=SPIWR_num_bytes; i<cnt+SPIWR_num_bytes; i++)
    5a04:	e59f30d4 	ldr	r3, [pc, #212]	; 5ae0 <LL_write+0x204>
    5a08:	e5933000 	ldr	r3, [r3]
    5a0c:	e50b3010 	str	r3, [fp, #-16]
    5a10:	ea00000e 	b	5a50 <LL_write+0x174>
		{
			SPIWRData[i+3]=data[i-SPIWR_num_bytes];
    5a14:	e51b3010 	ldr	r3, [fp, #-16]
    5a18:	e2831003 	add	r1, r3, #3
    5a1c:	e59f30bc 	ldr	r3, [pc, #188]	; 5ae0 <LL_write+0x204>
    5a20:	e5932000 	ldr	r2, [r3]
    5a24:	e51b3010 	ldr	r3, [fp, #-16]
    5a28:	e0623003 	rsb	r3, r2, r3
    5a2c:	e1a02003 	mov	r2, r3
    5a30:	e51b3014 	ldr	r3, [fp, #-20]
    5a34:	e0823003 	add	r3, r2, r3
    5a38:	e5d33000 	ldrb	r3, [r3]
    5a3c:	e59f2098 	ldr	r2, [pc, #152]	; 5adc <LL_write+0x200>
    5a40:	e7c23001 	strb	r3, [r2, r1]
	{
		SPIWRData[SPIWR_num_bytes-1]='>';
		SPIWRData[0+SPIWR_num_bytes]='*';
		SPIWRData[1+SPIWR_num_bytes]='>';
		SPIWRData[2+SPIWR_num_bytes]=PD;
		for(i=SPIWR_num_bytes; i<cnt+SPIWR_num_bytes; i++)
    5a44:	e51b3010 	ldr	r3, [fp, #-16]
    5a48:	e2833001 	add	r3, r3, #1
    5a4c:	e50b3010 	str	r3, [fp, #-16]
    5a50:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
    5a54:	e59f3084 	ldr	r3, [pc, #132]	; 5ae0 <LL_write+0x204>
    5a58:	e5933000 	ldr	r3, [r3]
    5a5c:	e0822003 	add	r2, r2, r3
    5a60:	e51b3010 	ldr	r3, [fp, #-16]
    5a64:	e1520003 	cmp	r2, r3
    5a68:	8affffe9 	bhi	5a14 <LL_write+0x138>
		{
			SPIWRData[i+3]=data[i-SPIWR_num_bytes];
		}
		SPIWR_num_bytes+=cnt+5;
    5a6c:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
    5a70:	e59f3068 	ldr	r3, [pc, #104]	; 5ae0 <LL_write+0x204>
    5a74:	e5933000 	ldr	r3, [r3]
    5a78:	e0823003 	add	r3, r2, r3
    5a7c:	e2832005 	add	r2, r3, #5
    5a80:	e59f3058 	ldr	r3, [pc, #88]	; 5ae0 <LL_write+0x204>
    5a84:	e5832000 	str	r2, [r3]
		SPIWRData[SPIWR_num_bytes-1]=0;
    5a88:	e59f3050 	ldr	r3, [pc, #80]	; 5ae0 <LL_write+0x204>
    5a8c:	e5933000 	ldr	r3, [r3]
    5a90:	e2431001 	sub	r1, r3, #1
    5a94:	e59f2040 	ldr	r2, [pc, #64]	; 5adc <LL_write+0x200>
    5a98:	e3a03000 	mov	r3, #0
    5a9c:	e7c23001 	strb	r3, [r2, r1]
    5aa0:	ea000002 	b	5ab0 <LL_write+0x1d4>
	}
	else return(0);
    5aa4:	e3a03000 	mov	r3, #0
    5aa8:	e50b3020 	str	r3, [fp, #-32]
    5aac:	ea000004 	b	5ac4 <LL_write+0x1e8>
	data_sent_to_LL=0;
    5ab0:	e59f3020 	ldr	r3, [pc, #32]	; 5ad8 <LL_write+0x1fc>
    5ab4:	e3a02000 	mov	r2, #0
    5ab8:	e5c32000 	strb	r2, [r3]

	return(1);
    5abc:	e3a03001 	mov	r3, #1
    5ac0:	e50b3020 	str	r3, [fp, #-32]
    5ac4:	e51b3020 	ldr	r3, [fp, #-32]
}
    5ac8:	e1a00003 	mov	r0, r3
    5acc:	e24bd00c 	sub	sp, fp, #12
    5ad0:	e89d6800 	ldm	sp, {fp, sp, lr}
    5ad4:	e12fff1e 	bx	lr
    5ad8:	4000000e 	.word	0x4000000e
    5adc:	40001c64 	.word	0x40001c64
    5ae0:	40001c5c 	.word	0x40001c5c

00005ae4 <jetiSetKeyChanged>:
unsigned char jetiKeyChanged=0;
unsigned char jetiKey=0;


void jetiSetKeyChanged(unsigned char key)
{
    5ae4:	e1a0c00d 	mov	ip, sp
    5ae8:	e92dd800 	push	{fp, ip, lr, pc}
    5aec:	e24cb004 	sub	fp, ip, #4
    5af0:	e24dd004 	sub	sp, sp, #4
    5af4:	e1a03000 	mov	r3, r0
    5af8:	e54b3010 	strb	r3, [fp, #-16]
	jetiKey=key;
    5afc:	e59f201c 	ldr	r2, [pc, #28]	; 5b20 <jetiSetKeyChanged+0x3c>
    5b00:	e55b3010 	ldrb	r3, [fp, #-16]
    5b04:	e5c23000 	strb	r3, [r2]
	jetiKeyChanged=1;
    5b08:	e59f2014 	ldr	r2, [pc, #20]	; 5b24 <jetiSetKeyChanged+0x40>
    5b0c:	e3a03001 	mov	r3, #1
    5b10:	e5c23000 	strb	r3, [r2]
}
    5b14:	e24bd00c 	sub	sp, fp, #12
    5b18:	e89d6800 	ldm	sp, {fp, sp, lr}
    5b1c:	e12fff1e 	bx	lr
    5b20:	40000a34 	.word	0x40000a34
    5b24:	40000a33 	.word	0x40000a33

00005b28 <jetiCheckForKeyChange>:


unsigned char jetiCheckForKeyChange(void)
{
    5b28:	e1a0c00d 	mov	ip, sp
    5b2c:	e92dd800 	push	{fp, ip, lr, pc}
    5b30:	e24cb004 	sub	fp, ip, #4
    5b34:	e24dd004 	sub	sp, sp, #4
	if (jetiKeyChanged)
    5b38:	e59f3040 	ldr	r3, [pc, #64]	; 5b80 <jetiCheckForKeyChange+0x58>
    5b3c:	e5d33000 	ldrb	r3, [r3]
    5b40:	e3530000 	cmp	r3, #0
    5b44:	0a000006 	beq	5b64 <jetiCheckForKeyChange+0x3c>
	{
		jetiKeyChanged=0;
    5b48:	e59f2030 	ldr	r2, [pc, #48]	; 5b80 <jetiCheckForKeyChange+0x58>
    5b4c:	e3a03000 	mov	r3, #0
    5b50:	e5c23000 	strb	r3, [r2]
		return jetiKey;
    5b54:	e59f3028 	ldr	r3, [pc, #40]	; 5b84 <jetiCheckForKeyChange+0x5c>
    5b58:	e5d33000 	ldrb	r3, [r3]
    5b5c:	e50b3010 	str	r3, [fp, #-16]
    5b60:	ea000001 	b	5b6c <jetiCheckForKeyChange+0x44>
	}else
		return 0;
    5b64:	e3a03000 	mov	r3, #0
    5b68:	e50b3010 	str	r3, [fp, #-16]
    5b6c:	e51b3010 	ldr	r3, [fp, #-16]
}
    5b70:	e1a00003 	mov	r0, r3
    5b74:	e24bd00c 	sub	sp, fp, #12
    5b78:	e89d6800 	ldm	sp, {fp, sp, lr}
    5b7c:	e12fff1e 	bx	lr
    5b80:	40000a33 	.word	0x40000a33
    5b84:	40000a34 	.word	0x40000a34

00005b88 <jetiSetAlarm>:
unsigned char jetiSetAlarm(unsigned char alarm, unsigned alarmType)
{
    5b88:	e1a0c00d 	mov	ip, sp
    5b8c:	e92dd800 	push	{fp, ip, lr, pc}
    5b90:	e24cb004 	sub	fp, ip, #4
    5b94:	e24dd00c 	sub	sp, sp, #12
    5b98:	e1a03000 	mov	r3, r0
    5b9c:	e50b1014 	str	r1, [fp, #-20]
    5ba0:	e54b3010 	strb	r3, [fp, #-16]
	if (((alarm<'A')||(alarm>'Z')) && (alarm))
    5ba4:	e55b3010 	ldrb	r3, [fp, #-16]
    5ba8:	e3530040 	cmp	r3, #64	; 0x40
    5bac:	9a000002 	bls	5bbc <jetiSetAlarm+0x34>
    5bb0:	e55b3010 	ldrb	r3, [fp, #-16]
    5bb4:	e353005a 	cmp	r3, #90	; 0x5a
    5bb8:	9a000005 	bls	5bd4 <jetiSetAlarm+0x4c>
    5bbc:	e55b3010 	ldrb	r3, [fp, #-16]
    5bc0:	e3530000 	cmp	r3, #0
    5bc4:	0a000002 	beq	5bd4 <jetiSetAlarm+0x4c>
		return JETI_ERROR_ALARM_RANGE;
    5bc8:	e3a03050 	mov	r3, #80	; 0x50
    5bcc:	e50b3018 	str	r3, [fp, #-24]
    5bd0:	ea00000e 	b	5c10 <jetiSetAlarm+0x88>
	if (alarmType>1)
    5bd4:	e51b3014 	ldr	r3, [fp, #-20]
    5bd8:	e3530001 	cmp	r3, #1
    5bdc:	9a000002 	bls	5bec <jetiSetAlarm+0x64>
		return JETI_ERROR_ALARM_TYPE;
    5be0:	e3a03051 	mov	r3, #81	; 0x51
    5be4:	e50b3018 	str	r3, [fp, #-24]
    5be8:	ea000008 	b	5c10 <jetiSetAlarm+0x88>
	jetiAlarm=alarm;
    5bec:	e59f2030 	ldr	r2, [pc, #48]	; 5c24 <jetiSetAlarm+0x9c>
    5bf0:	e55b3010 	ldrb	r3, [fp, #-16]
    5bf4:	e5c23000 	strb	r3, [r2]
	jetiAlarmType=alarmType;
    5bf8:	e51b3014 	ldr	r3, [fp, #-20]
    5bfc:	e20330ff 	and	r3, r3, #255	; 0xff
    5c00:	e59f2020 	ldr	r2, [pc, #32]	; 5c28 <jetiSetAlarm+0xa0>
    5c04:	e5c23000 	strb	r3, [r2]

	return JETI_NO_ERROR;
    5c08:	e3a03000 	mov	r3, #0
    5c0c:	e50b3018 	str	r3, [fp, #-24]
    5c10:	e51b3018 	ldr	r3, [fp, #-24]

}
    5c14:	e1a00003 	mov	r0, r3
    5c18:	e24bd00c 	sub	sp, fp, #12
    5c1c:	e89d6800 	ldm	sp, {fp, sp, lr}
    5c20:	e12fff1e 	bx	lr
    5c24:	40000a30 	.word	0x40000a30
    5c28:	40000a31 	.word	0x40000a31

00005c2c <jetiSetDeviceName>:

unsigned char jetiSetDeviceName(char * name)
{
    5c2c:	e1a0c00d 	mov	ip, sp
    5c30:	e92dd800 	push	{fp, ip, lr, pc}
    5c34:	e24cb004 	sub	fp, ip, #4
    5c38:	e24dd010 	sub	sp, sp, #16
    5c3c:	e50b001c 	str	r0, [fp, #-28]
	unsigned char nameLength=0;
    5c40:	e3a03000 	mov	r3, #0
    5c44:	e54b3015 	strb	r3, [fp, #-21]
	int i;
	unsigned char error=JETI_NO_ERROR;
    5c48:	e3a03000 	mov	r3, #0
    5c4c:	e54b300d 	strb	r3, [fp, #-13]

	for (i=0;i<11;i++)
    5c50:	e3a03000 	mov	r3, #0
    5c54:	e50b3014 	str	r3, [fp, #-20]
    5c58:	ea000009 	b	5c84 <jetiSetDeviceName+0x58>
		if (name[i]==0)
    5c5c:	e51b3014 	ldr	r3, [fp, #-20]
    5c60:	e1a02003 	mov	r2, r3
    5c64:	e51b301c 	ldr	r3, [fp, #-28]
    5c68:	e0823003 	add	r3, r2, r3
    5c6c:	e5d33000 	ldrb	r3, [r3]
    5c70:	e3530000 	cmp	r3, #0
    5c74:	0a000005 	beq	5c90 <jetiSetDeviceName+0x64>
{
	unsigned char nameLength=0;
	int i;
	unsigned char error=JETI_NO_ERROR;

	for (i=0;i<11;i++)
    5c78:	e51b3014 	ldr	r3, [fp, #-20]
    5c7c:	e2833001 	add	r3, r3, #1
    5c80:	e50b3014 	str	r3, [fp, #-20]
    5c84:	e51b3014 	ldr	r3, [fp, #-20]
    5c88:	e353000a 	cmp	r3, #10
    5c8c:	dafffff2 	ble	5c5c <jetiSetDeviceName+0x30>
		if (name[i]==0)
			break;
	if (i==10)
    5c90:	e51b3014 	ldr	r3, [fp, #-20]
    5c94:	e353000a 	cmp	r3, #10
    5c98:	1a000001 	bne	5ca4 <jetiSetDeviceName+0x78>
		error=JETI_ERROR_STRING_NAME;
    5c9c:	e3a03013 	mov	r3, #19
    5ca0:	e54b300d 	strb	r3, [fp, #-13]

	nameLength=i;
    5ca4:	e51b3014 	ldr	r3, [fp, #-20]
    5ca8:	e54b3015 	strb	r3, [fp, #-21]

	memcpy(&jetiName[0],name,nameLength);
    5cac:	e55b1015 	ldrb	r1, [fp, #-21]
    5cb0:	e59f3028 	ldr	r3, [pc, #40]	; 5ce0 <jetiSetDeviceName+0xb4>
    5cb4:	e51b201c 	ldr	r2, [fp, #-28]
    5cb8:	e1a0c001 	mov	ip, r1
    5cbc:	e1a00003 	mov	r0, r3
    5cc0:	e1a01002 	mov	r1, r2
    5cc4:	e1a0200c 	mov	r2, ip
    5cc8:	eb001ecb 	bl	d7fc <__memcpy_from_arm>

	return error;
    5ccc:	e55b300d 	ldrb	r3, [fp, #-13]
}
    5cd0:	e1a00003 	mov	r0, r3
    5cd4:	e24bd00c 	sub	sp, fp, #12
    5cd8:	e89d6800 	ldm	sp, {fp, sp, lr}
    5cdc:	e12fff1e 	bx	lr
    5ce0:	40001ece 	.word	0x40001ece

00005ce4 <jetiActivateValue>:

unsigned char jetiActivateValue(unsigned char id)
{
    5ce4:	e1a0c00d 	mov	ip, sp
    5ce8:	e92dd800 	push	{fp, ip, lr, pc}
    5cec:	e24cb004 	sub	fp, ip, #4
    5cf0:	e24dd008 	sub	sp, sp, #8
    5cf4:	e1a03000 	mov	r3, r0
    5cf8:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    5cfc:	e55b3010 	ldrb	r3, [fp, #-16]
    5d00:	e353000e 	cmp	r3, #14
    5d04:	9a000002 	bls	5d14 <jetiActivateValue+0x30>
		return JETI_ERROR_ID_RANGE;
    5d08:	e3a03001 	mov	r3, #1
    5d0c:	e50b3014 	str	r3, [fp, #-20]
    5d10:	ea00000f 	b	5d54 <jetiActivateValue+0x70>
	jetiValues[id].active=id+1;
    5d14:	e55b2010 	ldrb	r2, [fp, #-16]
    5d18:	e55b3010 	ldrb	r3, [fp, #-16]
    5d1c:	e2833001 	add	r3, r3, #1
    5d20:	e20310ff 	and	r1, r3, #255	; 0xff
    5d24:	e59f003c 	ldr	r0, [pc, #60]	; 5d68 <jetiActivateValue+0x84>
    5d28:	e1a03002 	mov	r3, r2
    5d2c:	e1a03103 	lsl	r3, r3, #2
    5d30:	e0833002 	add	r3, r3, r2
    5d34:	e1a03083 	lsl	r3, r3, #1
    5d38:	e0833002 	add	r3, r3, r2
    5d3c:	e1a03083 	lsl	r3, r3, #1
    5d40:	e0832000 	add	r2, r3, r0
    5d44:	e1a03001 	mov	r3, r1
    5d48:	e5c23000 	strb	r3, [r2]

	return JETI_NO_ERROR;
    5d4c:	e3a03000 	mov	r3, #0
    5d50:	e50b3014 	str	r3, [fp, #-20]
    5d54:	e51b3014 	ldr	r3, [fp, #-20]
}
    5d58:	e1a00003 	mov	r0, r3
    5d5c:	e24bd00c 	sub	sp, fp, #12
    5d60:	e89d6800 	ldm	sp, {fp, sp, lr}
    5d64:	e12fff1e 	bx	lr
    5d68:	40001d84 	.word	0x40001d84

00005d6c <jetiDeactivateValue>:

unsigned char jetiDeactivateValue(unsigned char id)
{
    5d6c:	e1a0c00d 	mov	ip, sp
    5d70:	e92dd800 	push	{fp, ip, lr, pc}
    5d74:	e24cb004 	sub	fp, ip, #4
    5d78:	e24dd008 	sub	sp, sp, #8
    5d7c:	e1a03000 	mov	r3, r0
    5d80:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    5d84:	e55b3010 	ldrb	r3, [fp, #-16]
    5d88:	e353000e 	cmp	r3, #14
    5d8c:	9a000002 	bls	5d9c <jetiDeactivateValue+0x30>
		return JETI_ERROR_ID_RANGE;
    5d90:	e3a03001 	mov	r3, #1
    5d94:	e50b3014 	str	r3, [fp, #-20]
    5d98:	ea00000c 	b	5dd0 <jetiDeactivateValue+0x64>
	jetiValues[id].active=0;
    5d9c:	e55b2010 	ldrb	r2, [fp, #-16]
    5da0:	e59f103c 	ldr	r1, [pc, #60]	; 5de4 <jetiDeactivateValue+0x78>
    5da4:	e1a03002 	mov	r3, r2
    5da8:	e1a03103 	lsl	r3, r3, #2
    5dac:	e0833002 	add	r3, r3, r2
    5db0:	e1a03083 	lsl	r3, r3, #1
    5db4:	e0833002 	add	r3, r3, r2
    5db8:	e1a03083 	lsl	r3, r3, #1
    5dbc:	e0832001 	add	r2, r3, r1
    5dc0:	e3a03000 	mov	r3, #0
    5dc4:	e5c23000 	strb	r3, [r2]

	return JETI_NO_ERROR;
    5dc8:	e3a03000 	mov	r3, #0
    5dcc:	e50b3014 	str	r3, [fp, #-20]
    5dd0:	e51b3014 	ldr	r3, [fp, #-20]
}
    5dd4:	e1a00003 	mov	r0, r3
    5dd8:	e24bd00c 	sub	sp, fp, #12
    5ddc:	e89d6800 	ldm	sp, {fp, sp, lr}
    5de0:	e12fff1e 	bx	lr
    5de4:	40001d84 	.word	0x40001d84

00005de8 <jetiSetDecimalPoint>:

unsigned char jetiSetDecimalPoint(unsigned char id, unsigned char decimalPoint)
{
    5de8:	e1a0c00d 	mov	ip, sp
    5dec:	e92dd800 	push	{fp, ip, lr, pc}
    5df0:	e24cb004 	sub	fp, ip, #4
    5df4:	e24dd00c 	sub	sp, sp, #12
    5df8:	e1a03000 	mov	r3, r0
    5dfc:	e1a02001 	mov	r2, r1
    5e00:	e54b3010 	strb	r3, [fp, #-16]
    5e04:	e1a03002 	mov	r3, r2
    5e08:	e54b3014 	strb	r3, [fp, #-20]
	if (id>14)
    5e0c:	e55b3010 	ldrb	r3, [fp, #-16]
    5e10:	e353000e 	cmp	r3, #14
    5e14:	9a000002 	bls	5e24 <jetiSetDecimalPoint+0x3c>
		return JETI_ERROR_ID_RANGE;
    5e18:	e3a03001 	mov	r3, #1
    5e1c:	e50b3018 	str	r3, [fp, #-24]
    5e20:	ea000014 	b	5e78 <jetiSetDecimalPoint+0x90>
	if (decimalPoint>3)
    5e24:	e55b3014 	ldrb	r3, [fp, #-20]
    5e28:	e3530003 	cmp	r3, #3
    5e2c:	9a000002 	bls	5e3c <jetiSetDecimalPoint+0x54>
		return JETI_ERROR_DECPOINT_RANGE;
    5e30:	e3a03030 	mov	r3, #48	; 0x30
    5e34:	e50b3018 	str	r3, [fp, #-24]
    5e38:	ea00000e 	b	5e78 <jetiSetDecimalPoint+0x90>
	jetiValues[id].decPoint=decimalPoint;
    5e3c:	e55b2010 	ldrb	r2, [fp, #-16]
    5e40:	e59f1044 	ldr	r1, [pc, #68]	; 5e8c <jetiSetDecimalPoint+0xa4>
    5e44:	e3a00011 	mov	r0, #17
    5e48:	e1a03002 	mov	r3, r2
    5e4c:	e1a03103 	lsl	r3, r3, #2
    5e50:	e0833002 	add	r3, r3, r2
    5e54:	e1a03083 	lsl	r3, r3, #1
    5e58:	e0833002 	add	r3, r3, r2
    5e5c:	e1a03083 	lsl	r3, r3, #1
    5e60:	e0833001 	add	r3, r3, r1
    5e64:	e0832000 	add	r2, r3, r0
    5e68:	e55b3014 	ldrb	r3, [fp, #-20]
    5e6c:	e5c23000 	strb	r3, [r2]
	return JETI_NO_ERROR;
    5e70:	e3a03000 	mov	r3, #0
    5e74:	e50b3018 	str	r3, [fp, #-24]
    5e78:	e51b3018 	ldr	r3, [fp, #-24]
}
    5e7c:	e1a00003 	mov	r0, r3
    5e80:	e24bd00c 	sub	sp, fp, #12
    5e84:	e89d6800 	ldm	sp, {fp, sp, lr}
    5e88:	e12fff1e 	bx	lr
    5e8c:	40001d84 	.word	0x40001d84

00005e90 <jetiSetValue30B>:

unsigned char jetiSetValue30B(unsigned char id, int value)
{
    5e90:	e1a0c00d 	mov	ip, sp
    5e94:	e92dd800 	push	{fp, ip, lr, pc}
    5e98:	e24cb004 	sub	fp, ip, #4
    5e9c:	e24dd00c 	sub	sp, sp, #12
    5ea0:	e1a03000 	mov	r3, r0
    5ea4:	e50b1014 	str	r1, [fp, #-20]
    5ea8:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    5eac:	e55b3010 	ldrb	r3, [fp, #-16]
    5eb0:	e353000e 	cmp	r3, #14
    5eb4:	9a000002 	bls	5ec4 <jetiSetValue30B+0x34>
		return JETI_ERROR_ID_RANGE;
    5eb8:	e3a03001 	mov	r3, #1
    5ebc:	e50b3018 	str	r3, [fp, #-24]
    5ec0:	ea000048 	b	5fe8 <jetiSetValue30B+0x158>

	if ((value>=(1<<30)) || (value<=-(1<<30)))
    5ec4:	e51b3014 	ldr	r3, [fp, #-20]
    5ec8:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
    5ecc:	ca000002 	bgt	5edc <jetiSetValue30B+0x4c>
    5ed0:	e51b3014 	ldr	r3, [fp, #-20]
    5ed4:	e3530103 	cmp	r3, #-1073741824	; 0xc0000000
    5ed8:	ca000002 	bgt	5ee8 <jetiSetValue30B+0x58>
		return JETI_ERROR_VALUE_RANGE;
    5edc:	e3a03020 	mov	r3, #32
    5ee0:	e50b3018 	str	r3, [fp, #-24]
    5ee4:	ea00003f 	b	5fe8 <jetiSetValue30B+0x158>

	jetiValues[id].value=value;
    5ee8:	e55b2010 	ldrb	r2, [fp, #-16]
    5eec:	e59f1108 	ldr	r1, [pc, #264]	; 5ffc <jetiSetValue30B+0x16c>
    5ef0:	e3a00010 	mov	r0, #16
    5ef4:	e1a03002 	mov	r3, r2
    5ef8:	e1a03103 	lsl	r3, r3, #2
    5efc:	e0833002 	add	r3, r3, r2
    5f00:	e1a03083 	lsl	r3, r3, #1
    5f04:	e0833002 	add	r3, r3, r2
    5f08:	e1a03083 	lsl	r3, r3, #1
    5f0c:	e0833001 	add	r3, r3, r1
    5f10:	e0830000 	add	r0, r3, r0
    5f14:	e55b1014 	ldrb	r1, [fp, #-20]
    5f18:	e3a03000 	mov	r3, #0
    5f1c:	e1a02003 	mov	r2, r3
    5f20:	e1a03001 	mov	r3, r1
    5f24:	e1823003 	orr	r3, r2, r3
    5f28:	e5c03002 	strb	r3, [r0, #2]
    5f2c:	e55b1013 	ldrb	r1, [fp, #-19]
    5f30:	e3a03000 	mov	r3, #0
    5f34:	e1a02003 	mov	r2, r3
    5f38:	e1a03001 	mov	r3, r1
    5f3c:	e1823003 	orr	r3, r2, r3
    5f40:	e5c03003 	strb	r3, [r0, #3]
    5f44:	e55b1012 	ldrb	r1, [fp, #-18]
    5f48:	e3a03000 	mov	r3, #0
    5f4c:	e1a02003 	mov	r2, r3
    5f50:	e1a03001 	mov	r3, r1
    5f54:	e1823003 	orr	r3, r2, r3
    5f58:	e5c03004 	strb	r3, [r0, #4]
    5f5c:	e55b1011 	ldrb	r1, [fp, #-17]
    5f60:	e3a03000 	mov	r3, #0
    5f64:	e1a02003 	mov	r2, r3
    5f68:	e1a03001 	mov	r3, r1
    5f6c:	e1823003 	orr	r3, r2, r3
    5f70:	e5c03005 	strb	r3, [r0, #5]
	if (jetiValues[id].varType!=JETI_VART_30B)
    5f74:	e55b2010 	ldrb	r2, [fp, #-16]
    5f78:	e59f107c 	ldr	r1, [pc, #124]	; 5ffc <jetiSetValue30B+0x16c>
    5f7c:	e3a00010 	mov	r0, #16
    5f80:	e1a03002 	mov	r3, r2
    5f84:	e1a03103 	lsl	r3, r3, #2
    5f88:	e0833002 	add	r3, r3, r2
    5f8c:	e1a03083 	lsl	r3, r3, #1
    5f90:	e0833002 	add	r3, r3, r2
    5f94:	e1a03083 	lsl	r3, r3, #1
    5f98:	e0833001 	add	r3, r3, r1
    5f9c:	e0833000 	add	r3, r3, r0
    5fa0:	e5d33000 	ldrb	r3, [r3]
    5fa4:	e3530048 	cmp	r3, #72	; 0x48
    5fa8:	0a00000c 	beq	5fe0 <jetiSetValue30B+0x150>
	{
		jetiValues[id].varType=JETI_VART_30B;
    5fac:	e55b2010 	ldrb	r2, [fp, #-16]
    5fb0:	e59f1044 	ldr	r1, [pc, #68]	; 5ffc <jetiSetValue30B+0x16c>
    5fb4:	e3a00010 	mov	r0, #16
    5fb8:	e1a03002 	mov	r3, r2
    5fbc:	e1a03103 	lsl	r3, r3, #2
    5fc0:	e0833002 	add	r3, r3, r2
    5fc4:	e1a03083 	lsl	r3, r3, #1
    5fc8:	e0833002 	add	r3, r3, r2
    5fcc:	e1a03083 	lsl	r3, r3, #1
    5fd0:	e0833001 	add	r3, r3, r1
    5fd4:	e0832000 	add	r2, r3, r0
    5fd8:	e3a03048 	mov	r3, #72	; 0x48
    5fdc:	e5c23000 	strb	r3, [r2]
	}

	return JETI_NO_ERROR;
    5fe0:	e3a03000 	mov	r3, #0
    5fe4:	e50b3018 	str	r3, [fp, #-24]
    5fe8:	e51b3018 	ldr	r3, [fp, #-24]

}
    5fec:	e1a00003 	mov	r0, r3
    5ff0:	e24bd00c 	sub	sp, fp, #12
    5ff4:	e89d6800 	ldm	sp, {fp, sp, lr}
    5ff8:	e12fff1e 	bx	lr
    5ffc:	40001d84 	.word	0x40001d84

00006000 <jetiSetValue22B>:

unsigned char jetiSetValue22B(unsigned char id, int value)
{
    6000:	e1a0c00d 	mov	ip, sp
    6004:	e92dd800 	push	{fp, ip, lr, pc}
    6008:	e24cb004 	sub	fp, ip, #4
    600c:	e24dd00c 	sub	sp, sp, #12
    6010:	e1a03000 	mov	r3, r0
    6014:	e50b1014 	str	r1, [fp, #-20]
    6018:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    601c:	e55b3010 	ldrb	r3, [fp, #-16]
    6020:	e353000e 	cmp	r3, #14
    6024:	9a000002 	bls	6034 <jetiSetValue22B+0x34>
		return JETI_ERROR_ID_RANGE;
    6028:	e3a03001 	mov	r3, #1
    602c:	e50b3018 	str	r3, [fp, #-24]
    6030:	ea00004a 	b	6160 <jetiSetValue22B+0x160>
	if ((value>=(1<<23)) || (value<=-(1<<23)))
    6034:	e51b2014 	ldr	r2, [fp, #-20]
    6038:	e3a03502 	mov	r3, #8388608	; 0x800000
    603c:	e2433001 	sub	r3, r3, #1
    6040:	e1520003 	cmp	r2, r3
    6044:	ca000002 	bgt	6054 <jetiSetValue22B+0x54>
    6048:	e51b3014 	ldr	r3, [fp, #-20]
    604c:	e3730502 	cmn	r3, #8388608	; 0x800000
    6050:	ca000002 	bgt	6060 <jetiSetValue22B+0x60>
		return JETI_ERROR_VALUE_RANGE;
    6054:	e3a03020 	mov	r3, #32
    6058:	e50b3018 	str	r3, [fp, #-24]
    605c:	ea00003f 	b	6160 <jetiSetValue22B+0x160>

	jetiValues[id].value=value;
    6060:	e55b2010 	ldrb	r2, [fp, #-16]
    6064:	e59f1108 	ldr	r1, [pc, #264]	; 6174 <jetiSetValue22B+0x174>
    6068:	e3a00010 	mov	r0, #16
    606c:	e1a03002 	mov	r3, r2
    6070:	e1a03103 	lsl	r3, r3, #2
    6074:	e0833002 	add	r3, r3, r2
    6078:	e1a03083 	lsl	r3, r3, #1
    607c:	e0833002 	add	r3, r3, r2
    6080:	e1a03083 	lsl	r3, r3, #1
    6084:	e0833001 	add	r3, r3, r1
    6088:	e0830000 	add	r0, r3, r0
    608c:	e55b1014 	ldrb	r1, [fp, #-20]
    6090:	e3a03000 	mov	r3, #0
    6094:	e1a02003 	mov	r2, r3
    6098:	e1a03001 	mov	r3, r1
    609c:	e1823003 	orr	r3, r2, r3
    60a0:	e5c03002 	strb	r3, [r0, #2]
    60a4:	e55b1013 	ldrb	r1, [fp, #-19]
    60a8:	e3a03000 	mov	r3, #0
    60ac:	e1a02003 	mov	r2, r3
    60b0:	e1a03001 	mov	r3, r1
    60b4:	e1823003 	orr	r3, r2, r3
    60b8:	e5c03003 	strb	r3, [r0, #3]
    60bc:	e55b1012 	ldrb	r1, [fp, #-18]
    60c0:	e3a03000 	mov	r3, #0
    60c4:	e1a02003 	mov	r2, r3
    60c8:	e1a03001 	mov	r3, r1
    60cc:	e1823003 	orr	r3, r2, r3
    60d0:	e5c03004 	strb	r3, [r0, #4]
    60d4:	e55b1011 	ldrb	r1, [fp, #-17]
    60d8:	e3a03000 	mov	r3, #0
    60dc:	e1a02003 	mov	r2, r3
    60e0:	e1a03001 	mov	r3, r1
    60e4:	e1823003 	orr	r3, r2, r3
    60e8:	e5c03005 	strb	r3, [r0, #5]
	if (jetiValues[id].varType!=JETI_VART_22B)
    60ec:	e55b2010 	ldrb	r2, [fp, #-16]
    60f0:	e59f107c 	ldr	r1, [pc, #124]	; 6174 <jetiSetValue22B+0x174>
    60f4:	e3a00010 	mov	r0, #16
    60f8:	e1a03002 	mov	r3, r2
    60fc:	e1a03103 	lsl	r3, r3, #2
    6100:	e0833002 	add	r3, r3, r2
    6104:	e1a03083 	lsl	r3, r3, #1
    6108:	e0833002 	add	r3, r3, r2
    610c:	e1a03083 	lsl	r3, r3, #1
    6110:	e0833001 	add	r3, r3, r1
    6114:	e0833000 	add	r3, r3, r0
    6118:	e5d33000 	ldrb	r3, [r3]
    611c:	e3530034 	cmp	r3, #52	; 0x34
    6120:	0a00000c 	beq	6158 <jetiSetValue22B+0x158>
	{
		jetiValues[id].varType=JETI_VART_22B;
    6124:	e55b2010 	ldrb	r2, [fp, #-16]
    6128:	e59f1044 	ldr	r1, [pc, #68]	; 6174 <jetiSetValue22B+0x174>
    612c:	e3a00010 	mov	r0, #16
    6130:	e1a03002 	mov	r3, r2
    6134:	e1a03103 	lsl	r3, r3, #2
    6138:	e0833002 	add	r3, r3, r2
    613c:	e1a03083 	lsl	r3, r3, #1
    6140:	e0833002 	add	r3, r3, r2
    6144:	e1a03083 	lsl	r3, r3, #1
    6148:	e0833001 	add	r3, r3, r1
    614c:	e0832000 	add	r2, r3, r0
    6150:	e3a03034 	mov	r3, #52	; 0x34
    6154:	e5c23000 	strb	r3, [r2]
	}

	return JETI_NO_ERROR;
    6158:	e3a03000 	mov	r3, #0
    615c:	e50b3018 	str	r3, [fp, #-24]
    6160:	e51b3018 	ldr	r3, [fp, #-24]
}
    6164:	e1a00003 	mov	r0, r3
    6168:	e24bd00c 	sub	sp, fp, #12
    616c:	e89d6800 	ldm	sp, {fp, sp, lr}
    6170:	e12fff1e 	bx	lr
    6174:	40001d84 	.word	0x40001d84

00006178 <jetiSetValue6B>:

unsigned char jetiSetValue6B(unsigned char id, int value)
{
    6178:	e1a0c00d 	mov	ip, sp
    617c:	e92dd800 	push	{fp, ip, lr, pc}
    6180:	e24cb004 	sub	fp, ip, #4
    6184:	e24dd00c 	sub	sp, sp, #12
    6188:	e1a03000 	mov	r3, r0
    618c:	e50b1014 	str	r1, [fp, #-20]
    6190:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    6194:	e55b3010 	ldrb	r3, [fp, #-16]
    6198:	e353000e 	cmp	r3, #14
    619c:	9a000002 	bls	61ac <jetiSetValue6B+0x34>
		return JETI_ERROR_ID_RANGE;
    61a0:	e3a03001 	mov	r3, #1
    61a4:	e50b3018 	str	r3, [fp, #-24]
    61a8:	ea000048 	b	62d0 <jetiSetValue6B+0x158>

	if ((value>=(1<<7)) || (value<=-(1<<7)))
    61ac:	e51b3014 	ldr	r3, [fp, #-20]
    61b0:	e353007f 	cmp	r3, #127	; 0x7f
    61b4:	ca000002 	bgt	61c4 <jetiSetValue6B+0x4c>
    61b8:	e51b3014 	ldr	r3, [fp, #-20]
    61bc:	e3730080 	cmn	r3, #128	; 0x80
    61c0:	ca000002 	bgt	61d0 <jetiSetValue6B+0x58>
		return JETI_ERROR_VALUE_RANGE;
    61c4:	e3a03020 	mov	r3, #32
    61c8:	e50b3018 	str	r3, [fp, #-24]
    61cc:	ea00003f 	b	62d0 <jetiSetValue6B+0x158>

	jetiValues[id].value=value;
    61d0:	e55b2010 	ldrb	r2, [fp, #-16]
    61d4:	e59f1108 	ldr	r1, [pc, #264]	; 62e4 <jetiSetValue6B+0x16c>
    61d8:	e3a00010 	mov	r0, #16
    61dc:	e1a03002 	mov	r3, r2
    61e0:	e1a03103 	lsl	r3, r3, #2
    61e4:	e0833002 	add	r3, r3, r2
    61e8:	e1a03083 	lsl	r3, r3, #1
    61ec:	e0833002 	add	r3, r3, r2
    61f0:	e1a03083 	lsl	r3, r3, #1
    61f4:	e0833001 	add	r3, r3, r1
    61f8:	e0830000 	add	r0, r3, r0
    61fc:	e55b1014 	ldrb	r1, [fp, #-20]
    6200:	e3a03000 	mov	r3, #0
    6204:	e1a02003 	mov	r2, r3
    6208:	e1a03001 	mov	r3, r1
    620c:	e1823003 	orr	r3, r2, r3
    6210:	e5c03002 	strb	r3, [r0, #2]
    6214:	e55b1013 	ldrb	r1, [fp, #-19]
    6218:	e3a03000 	mov	r3, #0
    621c:	e1a02003 	mov	r2, r3
    6220:	e1a03001 	mov	r3, r1
    6224:	e1823003 	orr	r3, r2, r3
    6228:	e5c03003 	strb	r3, [r0, #3]
    622c:	e55b1012 	ldrb	r1, [fp, #-18]
    6230:	e3a03000 	mov	r3, #0
    6234:	e1a02003 	mov	r2, r3
    6238:	e1a03001 	mov	r3, r1
    623c:	e1823003 	orr	r3, r2, r3
    6240:	e5c03004 	strb	r3, [r0, #4]
    6244:	e55b1011 	ldrb	r1, [fp, #-17]
    6248:	e3a03000 	mov	r3, #0
    624c:	e1a02003 	mov	r2, r3
    6250:	e1a03001 	mov	r3, r1
    6254:	e1823003 	orr	r3, r2, r3
    6258:	e5c03005 	strb	r3, [r0, #5]
	if (jetiValues[id].varType!=JETI_VART_6B)
    625c:	e55b2010 	ldrb	r2, [fp, #-16]
    6260:	e59f107c 	ldr	r1, [pc, #124]	; 62e4 <jetiSetValue6B+0x16c>
    6264:	e3a00010 	mov	r0, #16
    6268:	e1a03002 	mov	r3, r2
    626c:	e1a03103 	lsl	r3, r3, #2
    6270:	e0833002 	add	r3, r3, r2
    6274:	e1a03083 	lsl	r3, r3, #1
    6278:	e0833002 	add	r3, r3, r2
    627c:	e1a03083 	lsl	r3, r3, #1
    6280:	e0833001 	add	r3, r3, r1
    6284:	e0833000 	add	r3, r3, r0
    6288:	e5d33000 	ldrb	r3, [r3]
    628c:	e3530010 	cmp	r3, #16
    6290:	0a00000c 	beq	62c8 <jetiSetValue6B+0x150>
	{
		jetiValues[id].varType=JETI_VART_6B;
    6294:	e55b2010 	ldrb	r2, [fp, #-16]
    6298:	e59f1044 	ldr	r1, [pc, #68]	; 62e4 <jetiSetValue6B+0x16c>
    629c:	e3a00010 	mov	r0, #16
    62a0:	e1a03002 	mov	r3, r2
    62a4:	e1a03103 	lsl	r3, r3, #2
    62a8:	e0833002 	add	r3, r3, r2
    62ac:	e1a03083 	lsl	r3, r3, #1
    62b0:	e0833002 	add	r3, r3, r2
    62b4:	e1a03083 	lsl	r3, r3, #1
    62b8:	e0833001 	add	r3, r3, r1
    62bc:	e0832000 	add	r2, r3, r0
    62c0:	e3a03010 	mov	r3, #16
    62c4:	e5c23000 	strb	r3, [r2]
	}

	return JETI_NO_ERROR;
    62c8:	e3a03000 	mov	r3, #0
    62cc:	e50b3018 	str	r3, [fp, #-24]
    62d0:	e51b3018 	ldr	r3, [fp, #-24]
}
    62d4:	e1a00003 	mov	r0, r3
    62d8:	e24bd00c 	sub	sp, fp, #12
    62dc:	e89d6800 	ldm	sp, {fp, sp, lr}
    62e0:	e12fff1e 	bx	lr
    62e4:	40001d84 	.word	0x40001d84

000062e8 <jetiSetValue14B>:

unsigned char jetiSetValue14B(unsigned char id, int value)
{
    62e8:	e1a0c00d 	mov	ip, sp
    62ec:	e92dd800 	push	{fp, ip, lr, pc}
    62f0:	e24cb004 	sub	fp, ip, #4
    62f4:	e24dd00c 	sub	sp, sp, #12
    62f8:	e1a03000 	mov	r3, r0
    62fc:	e50b1014 	str	r1, [fp, #-20]
    6300:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    6304:	e55b3010 	ldrb	r3, [fp, #-16]
    6308:	e353000e 	cmp	r3, #14
    630c:	9a000002 	bls	631c <jetiSetValue14B+0x34>
		return JETI_ERROR_ID_RANGE;
    6310:	e3a03001 	mov	r3, #1
    6314:	e50b3018 	str	r3, [fp, #-24]
    6318:	ea00004a 	b	6448 <jetiSetValue14B+0x160>

	if ((value>=(1<<15)) || (value<=-(1<<15)))
    631c:	e51b2014 	ldr	r2, [fp, #-20]
    6320:	e3a03c7f 	mov	r3, #32512	; 0x7f00
    6324:	e28330ff 	add	r3, r3, #255	; 0xff
    6328:	e1520003 	cmp	r2, r3
    632c:	ca000002 	bgt	633c <jetiSetValue14B+0x54>
    6330:	e51b3014 	ldr	r3, [fp, #-20]
    6334:	e3730902 	cmn	r3, #32768	; 0x8000
    6338:	ca000002 	bgt	6348 <jetiSetValue14B+0x60>
		return JETI_ERROR_VALUE_RANGE;
    633c:	e3a03020 	mov	r3, #32
    6340:	e50b3018 	str	r3, [fp, #-24]
    6344:	ea00003f 	b	6448 <jetiSetValue14B+0x160>

	jetiValues[id].value=value;
    6348:	e55b2010 	ldrb	r2, [fp, #-16]
    634c:	e59f1108 	ldr	r1, [pc, #264]	; 645c <jetiSetValue14B+0x174>
    6350:	e3a00010 	mov	r0, #16
    6354:	e1a03002 	mov	r3, r2
    6358:	e1a03103 	lsl	r3, r3, #2
    635c:	e0833002 	add	r3, r3, r2
    6360:	e1a03083 	lsl	r3, r3, #1
    6364:	e0833002 	add	r3, r3, r2
    6368:	e1a03083 	lsl	r3, r3, #1
    636c:	e0833001 	add	r3, r3, r1
    6370:	e0830000 	add	r0, r3, r0
    6374:	e55b1014 	ldrb	r1, [fp, #-20]
    6378:	e3a03000 	mov	r3, #0
    637c:	e1a02003 	mov	r2, r3
    6380:	e1a03001 	mov	r3, r1
    6384:	e1823003 	orr	r3, r2, r3
    6388:	e5c03002 	strb	r3, [r0, #2]
    638c:	e55b1013 	ldrb	r1, [fp, #-19]
    6390:	e3a03000 	mov	r3, #0
    6394:	e1a02003 	mov	r2, r3
    6398:	e1a03001 	mov	r3, r1
    639c:	e1823003 	orr	r3, r2, r3
    63a0:	e5c03003 	strb	r3, [r0, #3]
    63a4:	e55b1012 	ldrb	r1, [fp, #-18]
    63a8:	e3a03000 	mov	r3, #0
    63ac:	e1a02003 	mov	r2, r3
    63b0:	e1a03001 	mov	r3, r1
    63b4:	e1823003 	orr	r3, r2, r3
    63b8:	e5c03004 	strb	r3, [r0, #4]
    63bc:	e55b1011 	ldrb	r1, [fp, #-17]
    63c0:	e3a03000 	mov	r3, #0
    63c4:	e1a02003 	mov	r2, r3
    63c8:	e1a03001 	mov	r3, r1
    63cc:	e1823003 	orr	r3, r2, r3
    63d0:	e5c03005 	strb	r3, [r0, #5]
	if (jetiValues[id].varType!=JETI_VART_14B)
    63d4:	e55b2010 	ldrb	r2, [fp, #-16]
    63d8:	e59f107c 	ldr	r1, [pc, #124]	; 645c <jetiSetValue14B+0x174>
    63dc:	e3a00010 	mov	r0, #16
    63e0:	e1a03002 	mov	r3, r2
    63e4:	e1a03103 	lsl	r3, r3, #2
    63e8:	e0833002 	add	r3, r3, r2
    63ec:	e1a03083 	lsl	r3, r3, #1
    63f0:	e0833002 	add	r3, r3, r2
    63f4:	e1a03083 	lsl	r3, r3, #1
    63f8:	e0833001 	add	r3, r3, r1
    63fc:	e0833000 	add	r3, r3, r0
    6400:	e5d33000 	ldrb	r3, [r3]
    6404:	e3530021 	cmp	r3, #33	; 0x21
    6408:	0a00000c 	beq	6440 <jetiSetValue14B+0x158>
	{
		jetiValues[id].varType=JETI_VART_14B;
    640c:	e55b2010 	ldrb	r2, [fp, #-16]
    6410:	e59f1044 	ldr	r1, [pc, #68]	; 645c <jetiSetValue14B+0x174>
    6414:	e3a00010 	mov	r0, #16
    6418:	e1a03002 	mov	r3, r2
    641c:	e1a03103 	lsl	r3, r3, #2
    6420:	e0833002 	add	r3, r3, r2
    6424:	e1a03083 	lsl	r3, r3, #1
    6428:	e0833002 	add	r3, r3, r2
    642c:	e1a03083 	lsl	r3, r3, #1
    6430:	e0833001 	add	r3, r3, r1
    6434:	e0832000 	add	r2, r3, r0
    6438:	e3a03021 	mov	r3, #33	; 0x21
    643c:	e5c23000 	strb	r3, [r2]
	}

	return JETI_NO_ERROR;
    6440:	e3a03000 	mov	r3, #0
    6444:	e50b3018 	str	r3, [fp, #-24]
    6448:	e51b3018 	ldr	r3, [fp, #-24]

}
    644c:	e1a00003 	mov	r0, r3
    6450:	e24bd00c 	sub	sp, fp, #12
    6454:	e89d6800 	ldm	sp, {fp, sp, lr}
    6458:	e12fff1e 	bx	lr
    645c:	40001d84 	.word	0x40001d84

00006460 <jetiSetValueTime>:

unsigned char jetiSetValueTime(unsigned char id, unsigned char hours, unsigned char minutes, unsigned char seconds)
{
    6460:	e1a0c00d 	mov	ip, sp
    6464:	e92dd800 	push	{fp, ip, lr, pc}
    6468:	e24cb004 	sub	fp, ip, #4
    646c:	e24dd018 	sub	sp, sp, #24
    6470:	e1a0c003 	mov	ip, r3
    6474:	e1a03000 	mov	r3, r0
    6478:	e54b3014 	strb	r3, [fp, #-20]
    647c:	e1a03001 	mov	r3, r1
    6480:	e54b3018 	strb	r3, [fp, #-24]
    6484:	e1a03002 	mov	r3, r2
    6488:	e54b301c 	strb	r3, [fp, #-28]
    648c:	e1a0300c 	mov	r3, ip
    6490:	e54b3020 	strb	r3, [fp, #-32]
	unsigned int value;
	if (id>14)
    6494:	e55b3014 	ldrb	r3, [fp, #-20]
    6498:	e353000e 	cmp	r3, #14
    649c:	9a000002 	bls	64ac <jetiSetValueTime+0x4c>
		return JETI_ERROR_ID_RANGE;
    64a0:	e3a03001 	mov	r3, #1
    64a4:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    64a8:	ea000058 	b	6610 <jetiSetValueTime+0x1b0>
	if (seconds>59)
    64ac:	e55b3020 	ldrb	r3, [fp, #-32]
    64b0:	e353003b 	cmp	r3, #59	; 0x3b
    64b4:	9a000002 	bls	64c4 <jetiSetValueTime+0x64>
		return JETI_ERROR_SECOND;
    64b8:	e3a03046 	mov	r3, #70	; 0x46
    64bc:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    64c0:	ea000052 	b	6610 <jetiSetValueTime+0x1b0>
	if (minutes>59)
    64c4:	e55b301c 	ldrb	r3, [fp, #-28]
    64c8:	e353003b 	cmp	r3, #59	; 0x3b
    64cc:	9a000002 	bls	64dc <jetiSetValueTime+0x7c>
		return JETI_ERROR_MINUTE;
    64d0:	e3a03045 	mov	r3, #69	; 0x45
    64d4:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    64d8:	ea00004c 	b	6610 <jetiSetValueTime+0x1b0>
	if (hours>23)
    64dc:	e55b3018 	ldrb	r3, [fp, #-24]
    64e0:	e3530017 	cmp	r3, #23
    64e4:	9a000002 	bls	64f4 <jetiSetValueTime+0x94>
		return JETI_ERROR_HOUR;
    64e8:	e3a03044 	mov	r3, #68	; 0x44
    64ec:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    64f0:	ea000046 	b	6610 <jetiSetValueTime+0x1b0>

	value=seconds;
    64f4:	e55b3020 	ldrb	r3, [fp, #-32]
    64f8:	e50b3010 	str	r3, [fp, #-16]
	value|=minutes<<8;
    64fc:	e55b301c 	ldrb	r3, [fp, #-28]
    6500:	e1a03403 	lsl	r3, r3, #8
    6504:	e1a02003 	mov	r2, r3
    6508:	e51b3010 	ldr	r3, [fp, #-16]
    650c:	e1833002 	orr	r3, r3, r2
    6510:	e50b3010 	str	r3, [fp, #-16]
	value|=hours<<16;
    6514:	e55b3018 	ldrb	r3, [fp, #-24]
    6518:	e1a03803 	lsl	r3, r3, #16
    651c:	e1a02003 	mov	r2, r3
    6520:	e51b3010 	ldr	r3, [fp, #-16]
    6524:	e1833002 	orr	r3, r3, r2
    6528:	e50b3010 	str	r3, [fp, #-16]

	jetiValues[id].value=value;
    652c:	e55b2014 	ldrb	r2, [fp, #-20]
    6530:	e51b0010 	ldr	r0, [fp, #-16]
    6534:	e59f10e8 	ldr	r1, [pc, #232]	; 6624 <jetiSetValueTime+0x1c4>
    6538:	e3a0c010 	mov	ip, #16
    653c:	e1a03002 	mov	r3, r2
    6540:	e1a03103 	lsl	r3, r3, #2
    6544:	e0833002 	add	r3, r3, r2
    6548:	e1a03083 	lsl	r3, r3, #1
    654c:	e0833002 	add	r3, r3, r2
    6550:	e1a03083 	lsl	r3, r3, #1
    6554:	e0833001 	add	r3, r3, r1
    6558:	e083c00c 	add	ip, r3, ip
    655c:	e20010ff 	and	r1, r0, #255	; 0xff
    6560:	e3a03000 	mov	r3, #0
    6564:	e1a02003 	mov	r2, r3
    6568:	e1a03001 	mov	r3, r1
    656c:	e1823003 	orr	r3, r2, r3
    6570:	e5cc3002 	strb	r3, [ip, #2]
    6574:	e1a03420 	lsr	r3, r0, #8
    6578:	e20310ff 	and	r1, r3, #255	; 0xff
    657c:	e3a03000 	mov	r3, #0
    6580:	e1a02003 	mov	r2, r3
    6584:	e1a03001 	mov	r3, r1
    6588:	e1823003 	orr	r3, r2, r3
    658c:	e5cc3003 	strb	r3, [ip, #3]
    6590:	e1a03820 	lsr	r3, r0, #16
    6594:	e20310ff 	and	r1, r3, #255	; 0xff
    6598:	e3a03000 	mov	r3, #0
    659c:	e1a02003 	mov	r2, r3
    65a0:	e1a03001 	mov	r3, r1
    65a4:	e1823003 	orr	r3, r2, r3
    65a8:	e5cc3004 	strb	r3, [ip, #4]
    65ac:	e1a01c20 	lsr	r1, r0, #24
    65b0:	e3a03000 	mov	r3, #0
    65b4:	e1a02003 	mov	r2, r3
    65b8:	e1a03001 	mov	r3, r1
    65bc:	e1823003 	orr	r3, r2, r3
    65c0:	e5cc3005 	strb	r3, [ip, #5]
	jetiSetDecimalPoint(id,0); //time
    65c4:	e55b3014 	ldrb	r3, [fp, #-20]
    65c8:	e1a00003 	mov	r0, r3
    65cc:	e3a01000 	mov	r1, #0
    65d0:	ebfffe04 	bl	5de8 <jetiSetDecimalPoint>
	jetiValues[id].varType=JETI_VART_DATETIME;
    65d4:	e55b2014 	ldrb	r2, [fp, #-20]
    65d8:	e59f1044 	ldr	r1, [pc, #68]	; 6624 <jetiSetValueTime+0x1c4>
    65dc:	e3a00010 	mov	r0, #16
    65e0:	e1a03002 	mov	r3, r2
    65e4:	e1a03103 	lsl	r3, r3, #2
    65e8:	e0833002 	add	r3, r3, r2
    65ec:	e1a03083 	lsl	r3, r3, #1
    65f0:	e0833002 	add	r3, r3, r2
    65f4:	e1a03083 	lsl	r3, r3, #1
    65f8:	e0833001 	add	r3, r3, r1
    65fc:	e0832000 	add	r2, r3, r0
    6600:	e3a03035 	mov	r3, #53	; 0x35
    6604:	e5c23000 	strb	r3, [r2]

	return JETI_NO_ERROR;
    6608:	e3a03000 	mov	r3, #0
    660c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6610:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
}
    6614:	e1a00003 	mov	r0, r3
    6618:	e24bd00c 	sub	sp, fp, #12
    661c:	e89d6800 	ldm	sp, {fp, sp, lr}
    6620:	e12fff1e 	bx	lr
    6624:	40001d84 	.word	0x40001d84

00006628 <jetiSetValueDate>:

unsigned char jetiSetValueDate(unsigned char id, unsigned char day, unsigned char month, unsigned short year)
{
    6628:	e1a0c00d 	mov	ip, sp
    662c:	e92dd800 	push	{fp, ip, lr, pc}
    6630:	e24cb004 	sub	fp, ip, #4
    6634:	e24dd018 	sub	sp, sp, #24
    6638:	e1a0c003 	mov	ip, r3
    663c:	e1a03000 	mov	r3, r0
    6640:	e54b3014 	strb	r3, [fp, #-20]
    6644:	e1a03001 	mov	r3, r1
    6648:	e54b3018 	strb	r3, [fp, #-24]
    664c:	e1a03002 	mov	r3, r2
    6650:	e54b301c 	strb	r3, [fp, #-28]
    6654:	e14bc2b0 	strh	ip, [fp, #-32]	; 0xffffffe0
	unsigned int value;
	if (id>14)
    6658:	e55b3014 	ldrb	r3, [fp, #-20]
    665c:	e353000e 	cmp	r3, #14
    6660:	9a000002 	bls	6670 <jetiSetValueDate+0x48>
		return JETI_ERROR_ID_RANGE;
    6664:	e3a03001 	mov	r3, #1
    6668:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    666c:	ea000064 	b	6804 <jetiSetValueDate+0x1dc>

	if (year>2000)
    6670:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
    6674:	e3530e7d 	cmp	r3, #2000	; 0x7d0
    6678:	9a000002 	bls	6688 <jetiSetValueDate+0x60>
		year-=2000;
    667c:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
    6680:	e2433e7d 	sub	r3, r3, #2000	; 0x7d0
    6684:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
	if (year>100)
    6688:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
    668c:	e3530064 	cmp	r3, #100	; 0x64
    6690:	9a000002 	bls	66a0 <jetiSetValueDate+0x78>
		return JETI_ERROR_YEAR;
    6694:	e3a03041 	mov	r3, #65	; 0x41
    6698:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    669c:	ea000058 	b	6804 <jetiSetValueDate+0x1dc>
	if ((month<1)||(month>12))
    66a0:	e55b301c 	ldrb	r3, [fp, #-28]
    66a4:	e3530000 	cmp	r3, #0
    66a8:	0a000002 	beq	66b8 <jetiSetValueDate+0x90>
    66ac:	e55b301c 	ldrb	r3, [fp, #-28]
    66b0:	e353000c 	cmp	r3, #12
    66b4:	9a000002 	bls	66c4 <jetiSetValueDate+0x9c>
		return JETI_ERROR_MONTH;
    66b8:	e3a03042 	mov	r3, #66	; 0x42
    66bc:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    66c0:	ea00004f 	b	6804 <jetiSetValueDate+0x1dc>
	if ((day<1)||(day>31))
    66c4:	e55b3018 	ldrb	r3, [fp, #-24]
    66c8:	e3530000 	cmp	r3, #0
    66cc:	0a000002 	beq	66dc <jetiSetValueDate+0xb4>
    66d0:	e55b3018 	ldrb	r3, [fp, #-24]
    66d4:	e353001f 	cmp	r3, #31
    66d8:	9a000002 	bls	66e8 <jetiSetValueDate+0xc0>
		return JETI_ERROR_DAY;
    66dc:	e3a03043 	mov	r3, #67	; 0x43
    66e0:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    66e4:	ea000046 	b	6804 <jetiSetValueDate+0x1dc>

	value=year;
    66e8:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
    66ec:	e50b3010 	str	r3, [fp, #-16]
	value|=month<<8;
    66f0:	e55b301c 	ldrb	r3, [fp, #-28]
    66f4:	e1a03403 	lsl	r3, r3, #8
    66f8:	e1a02003 	mov	r2, r3
    66fc:	e51b3010 	ldr	r3, [fp, #-16]
    6700:	e1833002 	orr	r3, r3, r2
    6704:	e50b3010 	str	r3, [fp, #-16]
	value|=day<<16;
    6708:	e55b3018 	ldrb	r3, [fp, #-24]
    670c:	e1a03803 	lsl	r3, r3, #16
    6710:	e1a02003 	mov	r2, r3
    6714:	e51b3010 	ldr	r3, [fp, #-16]
    6718:	e1833002 	orr	r3, r3, r2
    671c:	e50b3010 	str	r3, [fp, #-16]

	jetiValues[id].value=value;
    6720:	e55b2014 	ldrb	r2, [fp, #-20]
    6724:	e51b0010 	ldr	r0, [fp, #-16]
    6728:	e59f10e8 	ldr	r1, [pc, #232]	; 6818 <jetiSetValueDate+0x1f0>
    672c:	e3a0c010 	mov	ip, #16
    6730:	e1a03002 	mov	r3, r2
    6734:	e1a03103 	lsl	r3, r3, #2
    6738:	e0833002 	add	r3, r3, r2
    673c:	e1a03083 	lsl	r3, r3, #1
    6740:	e0833002 	add	r3, r3, r2
    6744:	e1a03083 	lsl	r3, r3, #1
    6748:	e0833001 	add	r3, r3, r1
    674c:	e083c00c 	add	ip, r3, ip
    6750:	e20010ff 	and	r1, r0, #255	; 0xff
    6754:	e3a03000 	mov	r3, #0
    6758:	e1a02003 	mov	r2, r3
    675c:	e1a03001 	mov	r3, r1
    6760:	e1823003 	orr	r3, r2, r3
    6764:	e5cc3002 	strb	r3, [ip, #2]
    6768:	e1a03420 	lsr	r3, r0, #8
    676c:	e20310ff 	and	r1, r3, #255	; 0xff
    6770:	e3a03000 	mov	r3, #0
    6774:	e1a02003 	mov	r2, r3
    6778:	e1a03001 	mov	r3, r1
    677c:	e1823003 	orr	r3, r2, r3
    6780:	e5cc3003 	strb	r3, [ip, #3]
    6784:	e1a03820 	lsr	r3, r0, #16
    6788:	e20310ff 	and	r1, r3, #255	; 0xff
    678c:	e3a03000 	mov	r3, #0
    6790:	e1a02003 	mov	r2, r3
    6794:	e1a03001 	mov	r3, r1
    6798:	e1823003 	orr	r3, r2, r3
    679c:	e5cc3004 	strb	r3, [ip, #4]
    67a0:	e1a01c20 	lsr	r1, r0, #24
    67a4:	e3a03000 	mov	r3, #0
    67a8:	e1a02003 	mov	r2, r3
    67ac:	e1a03001 	mov	r3, r1
    67b0:	e1823003 	orr	r3, r2, r3
    67b4:	e5cc3005 	strb	r3, [ip, #5]
	jetiSetDecimalPoint(id,1); //time
    67b8:	e55b3014 	ldrb	r3, [fp, #-20]
    67bc:	e1a00003 	mov	r0, r3
    67c0:	e3a01001 	mov	r1, #1
    67c4:	ebfffd87 	bl	5de8 <jetiSetDecimalPoint>
	jetiValues[id].varType=JETI_VART_DATETIME;
    67c8:	e55b2014 	ldrb	r2, [fp, #-20]
    67cc:	e59f1044 	ldr	r1, [pc, #68]	; 6818 <jetiSetValueDate+0x1f0>
    67d0:	e3a00010 	mov	r0, #16
    67d4:	e1a03002 	mov	r3, r2
    67d8:	e1a03103 	lsl	r3, r3, #2
    67dc:	e0833002 	add	r3, r3, r2
    67e0:	e1a03083 	lsl	r3, r3, #1
    67e4:	e0833002 	add	r3, r3, r2
    67e8:	e1a03083 	lsl	r3, r3, #1
    67ec:	e0833001 	add	r3, r3, r1
    67f0:	e0832000 	add	r2, r3, r0
    67f4:	e3a03035 	mov	r3, #53	; 0x35
    67f8:	e5c23000 	strb	r3, [r2]

	return JETI_NO_ERROR;
    67fc:	e3a03000 	mov	r3, #0
    6800:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6804:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
}
    6808:	e1a00003 	mov	r0, r3
    680c:	e24bd00c 	sub	sp, fp, #12
    6810:	e89d6800 	ldm	sp, {fp, sp, lr}
    6814:	e12fff1e 	bx	lr
    6818:	40001d84 	.word	0x40001d84

0000681c <jetiSetTextDisplay>:

unsigned char jetiSetTextDisplay(char * text)
{
    681c:	e1a0c00d 	mov	ip, sp
    6820:	e92dd800 	push	{fp, ip, lr, pc}
    6824:	e24cb004 	sub	fp, ip, #4
    6828:	e24dd00c 	sub	sp, sp, #12
    682c:	e50b0018 	str	r0, [fp, #-24]
	unsigned char textLength=0;
    6830:	e3a03000 	mov	r3, #0
    6834:	e54b3013 	strb	r3, [fp, #-19]
	unsigned char error=JETI_NO_ERROR;
    6838:	e3a03000 	mov	r3, #0
    683c:	e54b3012 	strb	r3, [fp, #-18]
	unsigned char textChanged=0;
    6840:	e3a03000 	mov	r3, #0
    6844:	e54b3011 	strb	r3, [fp, #-17]
	int i;

	for (i=0;i<33;i++)
    6848:	e3a03000 	mov	r3, #0
    684c:	e50b3010 	str	r3, [fp, #-16]
    6850:	ea000015 	b	68ac <jetiSetTextDisplay+0x90>
	{
		if (text[i]!=jetiDisplayText[i])
    6854:	e51b3010 	ldr	r3, [fp, #-16]
    6858:	e1a02003 	mov	r2, r3
    685c:	e51b3018 	ldr	r3, [fp, #-24]
    6860:	e0823003 	add	r3, r2, r3
    6864:	e5d31000 	ldrb	r1, [r3]
    6868:	e51b2010 	ldr	r2, [fp, #-16]
    686c:	e59f30ec 	ldr	r3, [pc, #236]	; 6960 <jetiSetTextDisplay+0x144>
    6870:	e7d33002 	ldrb	r3, [r3, r2]
    6874:	e1510003 	cmp	r1, r3
    6878:	0a000001 	beq	6884 <jetiSetTextDisplay+0x68>
			textChanged=1;
    687c:	e3a03001 	mov	r3, #1
    6880:	e54b3011 	strb	r3, [fp, #-17]
		if (text[i]==0)
    6884:	e51b3010 	ldr	r3, [fp, #-16]
    6888:	e1a02003 	mov	r2, r3
    688c:	e51b3018 	ldr	r3, [fp, #-24]
    6890:	e0823003 	add	r3, r2, r3
    6894:	e5d33000 	ldrb	r3, [r3]
    6898:	e3530000 	cmp	r3, #0
    689c:	0a000005 	beq	68b8 <jetiSetTextDisplay+0x9c>
	unsigned char textLength=0;
	unsigned char error=JETI_NO_ERROR;
	unsigned char textChanged=0;
	int i;

	for (i=0;i<33;i++)
    68a0:	e51b3010 	ldr	r3, [fp, #-16]
    68a4:	e2833001 	add	r3, r3, #1
    68a8:	e50b3010 	str	r3, [fp, #-16]
    68ac:	e51b3010 	ldr	r3, [fp, #-16]
    68b0:	e3530020 	cmp	r3, #32
    68b4:	daffffe6 	ble	6854 <jetiSetTextDisplay+0x38>
		if (text[i]!=jetiDisplayText[i])
			textChanged=1;
		if (text[i]==0)
			break;
	}
	if (i==32)
    68b8:	e51b3010 	ldr	r3, [fp, #-16]
    68bc:	e3530020 	cmp	r3, #32
    68c0:	1a000001 	bne	68cc <jetiSetTextDisplay+0xb0>
		error=JETI_ERROR_STRING_TEXT;
    68c4:	e3a03016 	mov	r3, #22
    68c8:	e54b3012 	strb	r3, [fp, #-18]

	textLength=i;
    68cc:	e51b3010 	ldr	r3, [fp, #-16]
    68d0:	e54b3013 	strb	r3, [fp, #-19]
	memcpy(&jetiDisplayText[0],text,textLength);
    68d4:	e55b1013 	ldrb	r1, [fp, #-19]
    68d8:	e59f3080 	ldr	r3, [pc, #128]	; 6960 <jetiSetTextDisplay+0x144>
    68dc:	e51b2018 	ldr	r2, [fp, #-24]
    68e0:	e1a0c001 	mov	ip, r1
    68e4:	e1a00003 	mov	r0, r3
    68e8:	e1a01002 	mov	r1, r2
    68ec:	e1a0200c 	mov	r2, ip
    68f0:	eb001bc1 	bl	d7fc <__memcpy_from_arm>
	if (textLength<32)
    68f4:	e55b3013 	ldrb	r3, [fp, #-19]
    68f8:	e353001f 	cmp	r3, #31
    68fc:	8a00000c 	bhi	6934 <jetiSetTextDisplay+0x118>
		for (i=textLength;i<32;i++)
    6900:	e55b3013 	ldrb	r3, [fp, #-19]
    6904:	e50b3010 	str	r3, [fp, #-16]
    6908:	ea000006 	b	6928 <jetiSetTextDisplay+0x10c>
			jetiDisplayText[i]=0;
    690c:	e51b1010 	ldr	r1, [fp, #-16]
    6910:	e59f2048 	ldr	r2, [pc, #72]	; 6960 <jetiSetTextDisplay+0x144>
    6914:	e3a03000 	mov	r3, #0
    6918:	e7c23001 	strb	r3, [r2, r1]
		error=JETI_ERROR_STRING_TEXT;

	textLength=i;
	memcpy(&jetiDisplayText[0],text,textLength);
	if (textLength<32)
		for (i=textLength;i<32;i++)
    691c:	e51b3010 	ldr	r3, [fp, #-16]
    6920:	e2833001 	add	r3, r3, #1
    6924:	e50b3010 	str	r3, [fp, #-16]
    6928:	e51b3010 	ldr	r3, [fp, #-16]
    692c:	e353001f 	cmp	r3, #31
    6930:	dafffff5 	ble	690c <jetiSetTextDisplay+0xf0>
			jetiDisplayText[i]=0;

	if (textChanged)
    6934:	e55b3011 	ldrb	r3, [fp, #-17]
    6938:	e3530000 	cmp	r3, #0
    693c:	0a000002 	beq	694c <jetiSetTextDisplay+0x130>
		jetiTriggerTextSync=1;
    6940:	e59f301c 	ldr	r3, [pc, #28]	; 6964 <jetiSetTextDisplay+0x148>
    6944:	e3a02001 	mov	r2, #1
    6948:	e5c32000 	strb	r2, [r3]
	return error;
    694c:	e55b3012 	ldrb	r3, [fp, #-18]
}
    6950:	e1a00003 	mov	r0, r3
    6954:	e24bd00c 	sub	sp, fp, #12
    6958:	e89d6800 	ldm	sp, {fp, sp, lr}
    695c:	e12fff1e 	bx	lr
    6960:	40001d64 	.word	0x40001d64
    6964:	40000a32 	.word	0x40000a32

00006968 <jetiInitValue>:

unsigned char jetiInitValue(unsigned char id, char * description, char * unit)
{
    6968:	e1a0c00d 	mov	ip, sp
    696c:	e92dd800 	push	{fp, ip, lr, pc}
    6970:	e24cb004 	sub	fp, ip, #4
    6974:	e24dd018 	sub	sp, sp, #24
    6978:	e1a03000 	mov	r3, r0
    697c:	e50b101c 	str	r1, [fp, #-28]
    6980:	e50b2020 	str	r2, [fp, #-32]
    6984:	e54b3018 	strb	r3, [fp, #-24]
	unsigned char descLength=0;
    6988:	e3a03000 	mov	r3, #0
    698c:	e54b3013 	strb	r3, [fp, #-19]
	unsigned char unitLength=0;
    6990:	e3a03000 	mov	r3, #0
    6994:	e54b3012 	strb	r3, [fp, #-18]
	unsigned char error=JETI_NO_ERROR;
    6998:	e3a03000 	mov	r3, #0
    699c:	e54b3011 	strb	r3, [fp, #-17]

	int i;

	if (id>14)
    69a0:	e55b3018 	ldrb	r3, [fp, #-24]
    69a4:	e353000e 	cmp	r3, #14
    69a8:	9a000002 	bls	69b8 <jetiInitValue+0x50>
		return JETI_ERROR_ID_RANGE;
    69ac:	e3a03001 	mov	r3, #1
    69b0:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    69b4:	ea000068 	b	6b5c <jetiInitValue+0x1f4>

	for (i=0;i<11;i++)
    69b8:	e3a03000 	mov	r3, #0
    69bc:	e50b3010 	str	r3, [fp, #-16]
    69c0:	ea000009 	b	69ec <jetiInitValue+0x84>
		if (description[i]==0)
    69c4:	e51b3010 	ldr	r3, [fp, #-16]
    69c8:	e1a02003 	mov	r2, r3
    69cc:	e51b301c 	ldr	r3, [fp, #-28]
    69d0:	e0823003 	add	r3, r2, r3
    69d4:	e5d33000 	ldrb	r3, [r3]
    69d8:	e3530000 	cmp	r3, #0
    69dc:	0a000005 	beq	69f8 <jetiInitValue+0x90>
	int i;

	if (id>14)
		return JETI_ERROR_ID_RANGE;

	for (i=0;i<11;i++)
    69e0:	e51b3010 	ldr	r3, [fp, #-16]
    69e4:	e2833001 	add	r3, r3, #1
    69e8:	e50b3010 	str	r3, [fp, #-16]
    69ec:	e51b3010 	ldr	r3, [fp, #-16]
    69f0:	e353000a 	cmp	r3, #10
    69f4:	dafffff2 	ble	69c4 <jetiInitValue+0x5c>
		if (description[i]==0)
			break;
	if (i==10)
    69f8:	e51b3010 	ldr	r3, [fp, #-16]
    69fc:	e353000a 	cmp	r3, #10
    6a00:	1a000001 	bne	6a0c <jetiInitValue+0xa4>
		error=JETI_ERROR_STRING_DESC;
    6a04:	e3a03014 	mov	r3, #20
    6a08:	e54b3011 	strb	r3, [fp, #-17]
	descLength=i;
    6a0c:	e51b3010 	ldr	r3, [fp, #-16]
    6a10:	e54b3013 	strb	r3, [fp, #-19]

	for (i=0;i<6;i++)
    6a14:	e3a03000 	mov	r3, #0
    6a18:	e50b3010 	str	r3, [fp, #-16]
    6a1c:	ea000009 	b	6a48 <jetiInitValue+0xe0>
			if (unit[i]==0)
    6a20:	e51b3010 	ldr	r3, [fp, #-16]
    6a24:	e1a02003 	mov	r2, r3
    6a28:	e51b3020 	ldr	r3, [fp, #-32]
    6a2c:	e0823003 	add	r3, r2, r3
    6a30:	e5d33000 	ldrb	r3, [r3]
    6a34:	e3530000 	cmp	r3, #0
    6a38:	0a000005 	beq	6a54 <jetiInitValue+0xec>
			break;
	if (i==10)
		error=JETI_ERROR_STRING_DESC;
	descLength=i;

	for (i=0;i<6;i++)
    6a3c:	e51b3010 	ldr	r3, [fp, #-16]
    6a40:	e2833001 	add	r3, r3, #1
    6a44:	e50b3010 	str	r3, [fp, #-16]
    6a48:	e51b3010 	ldr	r3, [fp, #-16]
    6a4c:	e3530005 	cmp	r3, #5
    6a50:	dafffff2 	ble	6a20 <jetiInitValue+0xb8>
			if (unit[i]==0)
				break;
	if (i==5)
    6a54:	e51b3010 	ldr	r3, [fp, #-16]
    6a58:	e3530005 	cmp	r3, #5
    6a5c:	1a000001 	bne	6a68 <jetiInitValue+0x100>
			error=JETI_ERROR_STRING_UNIT;
    6a60:	e3a03015 	mov	r3, #21
    6a64:	e54b3011 	strb	r3, [fp, #-17]

	unitLength=i;
    6a68:	e51b3010 	ldr	r3, [fp, #-16]
    6a6c:	e54b3012 	strb	r3, [fp, #-18]

	jetiValues[id].active=id+1;
    6a70:	e55b2018 	ldrb	r2, [fp, #-24]
    6a74:	e55b3018 	ldrb	r3, [fp, #-24]
    6a78:	e2833001 	add	r3, r3, #1
    6a7c:	e20310ff 	and	r1, r3, #255	; 0xff
    6a80:	e59f00e8 	ldr	r0, [pc, #232]	; 6b70 <jetiInitValue+0x208>
    6a84:	e1a03002 	mov	r3, r2
    6a88:	e1a03103 	lsl	r3, r3, #2
    6a8c:	e0833002 	add	r3, r3, r2
    6a90:	e1a03083 	lsl	r3, r3, #1
    6a94:	e0833002 	add	r3, r3, r2
    6a98:	e1a03083 	lsl	r3, r3, #1
    6a9c:	e0832000 	add	r2, r3, r0
    6aa0:	e1a03001 	mov	r3, r1
    6aa4:	e5c23000 	strb	r3, [r2]
	memcpy(&jetiValues[id].name[0],description,descLength);
    6aa8:	e55b2018 	ldrb	r2, [fp, #-24]
    6aac:	e1a03002 	mov	r3, r2
    6ab0:	e1a03103 	lsl	r3, r3, #2
    6ab4:	e0833002 	add	r3, r3, r2
    6ab8:	e1a03083 	lsl	r3, r3, #1
    6abc:	e0833002 	add	r3, r3, r2
    6ac0:	e1a02083 	lsl	r2, r3, #1
    6ac4:	e59f30a4 	ldr	r3, [pc, #164]	; 6b70 <jetiInitValue+0x208>
    6ac8:	e0823003 	add	r3, r2, r3
    6acc:	e2832001 	add	r2, r3, #1
    6ad0:	e55b1013 	ldrb	r1, [fp, #-19]
    6ad4:	e51b301c 	ldr	r3, [fp, #-28]
    6ad8:	e1a0c001 	mov	ip, r1
    6adc:	e1a00002 	mov	r0, r2
    6ae0:	e1a01003 	mov	r1, r3
    6ae4:	e1a0200c 	mov	r2, ip
    6ae8:	eb001b43 	bl	d7fc <__memcpy_from_arm>
	memcpy(&jetiValues[id].unit[0],unit,unitLength);
    6aec:	e55b2018 	ldrb	r2, [fp, #-24]
    6af0:	e1a03002 	mov	r3, r2
    6af4:	e1a03103 	lsl	r3, r3, #2
    6af8:	e0833002 	add	r3, r3, r2
    6afc:	e1a03083 	lsl	r3, r3, #1
    6b00:	e0833002 	add	r3, r3, r2
    6b04:	e1a03083 	lsl	r3, r3, #1
    6b08:	e2832008 	add	r2, r3, #8
    6b0c:	e59f305c 	ldr	r3, [pc, #92]	; 6b70 <jetiInitValue+0x208>
    6b10:	e0823003 	add	r3, r2, r3
    6b14:	e2832003 	add	r2, r3, #3
    6b18:	e55b1012 	ldrb	r1, [fp, #-18]
    6b1c:	e51b3020 	ldr	r3, [fp, #-32]
    6b20:	e1a0c001 	mov	ip, r1
    6b24:	e1a00002 	mov	r0, r2
    6b28:	e1a01003 	mov	r1, r3
    6b2c:	e1a0200c 	mov	r2, ip
    6b30:	eb001b31 	bl	d7fc <__memcpy_from_arm>
	jetiSetValue6B(id,0);
    6b34:	e55b3018 	ldrb	r3, [fp, #-24]
    6b38:	e1a00003 	mov	r0, r3
    6b3c:	e3a01000 	mov	r1, #0
    6b40:	ebfffd8c 	bl	6178 <jetiSetValue6B>
	jetiSetDecimalPoint(id,0);
    6b44:	e55b3018 	ldrb	r3, [fp, #-24]
    6b48:	e1a00003 	mov	r0, r3
    6b4c:	e3a01000 	mov	r1, #0
    6b50:	ebfffca4 	bl	5de8 <jetiSetDecimalPoint>

	return error;
    6b54:	e55b3011 	ldrb	r3, [fp, #-17]
    6b58:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6b5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24

}
    6b60:	e1a00003 	mov	r0, r3
    6b64:	e24bd00c 	sub	sp, fp, #12
    6b68:	e89d6800 	ldm	sp, {fp, sp, lr}
    6b6c:	e12fff1e 	bx	lr
    6b70:	40001d84 	.word	0x40001d84

00006b74 <ee_erase>:
/*                                                                     	*/
/* revision history:                                                   	*/
/* - Rev. 1.1 adds interrupt disable feature.							*/
/*                                                                     	*/
/************************************************************************/
void ee_erase(unsigned int command_ee,unsigned int result_ee[]){
    6b74:	e1a0c00d 	mov	ip, sp
    6b78:	e92dd800 	push	{fp, ip, lr, pc}
    6b7c:	e24cb004 	sub	fp, ip, #4
    6b80:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    6b84:	e50b0034 	str	r0, [fp, #-52]	; 0x34
    6b88:	e50b1038 	str	r1, [fp, #-56]	; 0x38
	unsigned int command_iap[5];
	unsigned int result_iap[3];
	unsigned long int enabled_interrupts;

	enabled_interrupts = VICIntEnable;  //disable all interrupts
    6b8c:	e3a03000 	mov	r3, #0
    6b90:	e2433eff 	sub	r3, r3, #4080	; 0xff0
    6b94:	e5933000 	ldr	r3, [r3]
    6b98:	e50b3010 	str	r3, [fp, #-16]
	VICIntEnClr        = enabled_interrupts;
    6b9c:	e3e03efe 	mvn	r3, #4064	; 0xfe0
    6ba0:	e243300b 	sub	r3, r3, #11
    6ba4:	e51b2010 	ldr	r2, [fp, #-16]
    6ba8:	e5832000 	str	r2, [r3]

	command_iap[0]=50;					//prepare sectors from EE_SEC_L to EE_SEC_H for erase
    6bac:	e3a03032 	mov	r3, #50	; 0x32
    6bb0:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	command_iap[1]=EE_SEC_L;
    6bb4:	e3a0300e 	mov	r3, #14
    6bb8:	e50b3020 	str	r3, [fp, #-32]
	command_iap[2]=EE_SEC_H;
    6bbc:	e3a0300e 	mov	r3, #14
    6bc0:	e50b301c 	str	r3, [fp, #-28]
	iap_entry=(IAP) IAP_LOCATION;
    6bc4:	e59f20e0 	ldr	r2, [pc, #224]	; 6cac <ee_erase+0x138>
    6bc8:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    6bcc:	e5823000 	str	r3, [r2]
	iap_entry(command_iap,result_iap);
    6bd0:	e59f30d4 	ldr	r3, [pc, #212]	; 6cac <ee_erase+0x138>
    6bd4:	e593c000 	ldr	ip, [r3]
    6bd8:	e24b3024 	sub	r3, fp, #36	; 0x24
    6bdc:	e24b2030 	sub	r2, fp, #48	; 0x30
    6be0:	e1a00003 	mov	r0, r3
    6be4:	e1a01002 	mov	r1, r2
    6be8:	e1a0e00f 	mov	lr, pc
    6bec:	e12fff1c 	bx	ip

	command_iap[0]=52;					//erase sectors from EE_SEC_L to EE_SEC_H
    6bf0:	e3a03034 	mov	r3, #52	; 0x34
    6bf4:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	command_iap[1]=EE_SEC_L;
    6bf8:	e3a0300e 	mov	r3, #14
    6bfc:	e50b3020 	str	r3, [fp, #-32]
	command_iap[2]=EE_SEC_H;
    6c00:	e3a0300e 	mov	r3, #14
    6c04:	e50b301c 	str	r3, [fp, #-28]
	command_iap[3]=EE_CCLK;
    6c08:	e3a03cea 	mov	r3, #59904	; 0xea00
    6c0c:	e2833060 	add	r3, r3, #96	; 0x60
    6c10:	e50b3018 	str	r3, [fp, #-24]
	iap_entry=(IAP) IAP_LOCATION;
    6c14:	e59f2090 	ldr	r2, [pc, #144]	; 6cac <ee_erase+0x138>
    6c18:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    6c1c:	e5823000 	str	r3, [r2]
	iap_entry(command_iap,result_iap);
    6c20:	e59f3084 	ldr	r3, [pc, #132]	; 6cac <ee_erase+0x138>
    6c24:	e593c000 	ldr	ip, [r3]
    6c28:	e24b3024 	sub	r3, fp, #36	; 0x24
    6c2c:	e24b2030 	sub	r2, fp, #48	; 0x30
    6c30:	e1a00003 	mov	r0, r3
    6c34:	e1a01002 	mov	r1, r2
    6c38:	e1a0e00f 	mov	lr, pc
    6c3c:	e12fff1c 	bx	ip

	command_iap[0]=53;					//blankcheck sectors from EE_SEC_L to EE_SEC_H
    6c40:	e3a03035 	mov	r3, #53	; 0x35
    6c44:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	command_iap[1]=EE_SEC_L;
    6c48:	e3a0300e 	mov	r3, #14
    6c4c:	e50b3020 	str	r3, [fp, #-32]
	command_iap[2]=EE_SEC_H;
    6c50:	e3a0300e 	mov	r3, #14
    6c54:	e50b301c 	str	r3, [fp, #-28]
	iap_entry=(IAP) IAP_LOCATION;
    6c58:	e59f204c 	ldr	r2, [pc, #76]	; 6cac <ee_erase+0x138>
    6c5c:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    6c60:	e5823000 	str	r3, [r2]
	iap_entry(command_iap,result_iap);
    6c64:	e59f3040 	ldr	r3, [pc, #64]	; 6cac <ee_erase+0x138>
    6c68:	e593c000 	ldr	ip, [r3]
    6c6c:	e24b3024 	sub	r3, fp, #36	; 0x24
    6c70:	e24b2030 	sub	r2, fp, #48	; 0x30
    6c74:	e1a00003 	mov	r0, r3
    6c78:	e1a01002 	mov	r1, r2
    6c7c:	e1a0e00f 	mov	lr, pc
    6c80:	e12fff1c 	bx	ip

	VICIntEnable = enabled_interrupts;  //restore interrupt enable register
    6c84:	e3a03000 	mov	r3, #0
    6c88:	e2433eff 	sub	r3, r3, #4080	; 0xff0
    6c8c:	e51b2010 	ldr	r2, [fp, #-16]
    6c90:	e5832000 	str	r2, [r3]

	result_ee[0]=result_iap[0];
    6c94:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    6c98:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    6c9c:	e5832000 	str	r2, [r3]
	return;
}
    6ca0:	e24bd00c 	sub	sp, fp, #12
    6ca4:	e89d6800 	ldm	sp, {fp, sp, lr}
    6ca8:	e12fff1e 	bx	lr
    6cac:	40001ed8 	.word	0x40001ed8

00006cb0 <ee_write>:
/*   the EEPROM. 1.0 was reporting missmatch even when there were no	*/
/*   problems at all.													*/
/*   Rev. 1.1 adds interrupt disable feature.							*/
/*                                                                     	*/
/************************************************************************/
void ee_write(unsigned int command_ee,unsigned int result_ee[]){
    6cb0:	e1a0c00d 	mov	ip, sp
    6cb4:	e92dd800 	push	{fp, ip, lr, pc}
    6cb8:	e24cb004 	sub	fp, ip, #4
    6cbc:	e24ddf4f 	sub	sp, sp, #316	; 0x13c
    6cc0:	e50b0144 	str	r0, [fp, #-324]	; 0x144
    6cc4:	e50b1148 	str	r1, [fp, #-328]	; 0x148
	unsigned int *source, *destination, i;
	unsigned char ee_buffer[EE_BUFFER_SIZE];
	unsigned int command_iap[5], result_iap[3];
	unsigned long int enabled_interrupts;

	location = ee_locate();
    6cc8:	eb0000dc 	bl	7040 <ee_locate>
    6ccc:	e1a03000 	mov	r3, r0
    6cd0:	e50b3020 	str	r3, [fp, #-32]
	if (location == -1){
    6cd4:	e51b3020 	ldr	r3, [fp, #-32]
    6cd8:	e3730001 	cmn	r3, #1
    6cdc:	1a000004 	bne	6cf4 <ee_write+0x44>
		result_ee[0]=NO_SPACE_IN_EEPROM;
    6ce0:	e51b2148 	ldr	r2, [fp, #-328]	; 0x148
    6ce4:	e3a03f7d 	mov	r3, #500	; 0x1f4
    6ce8:	e2833001 	add	r3, r3, #1
    6cec:	e5823000 	str	r3, [r2]
    6cf0:	ea000073 	b	6ec4 <ee_write+0x214>
	}
	else{
		for (i=0;i<EE_BUFFER_SIZE;i++) ee_buffer[i]=0xFF;
    6cf4:	e3a03000 	mov	r3, #0
    6cf8:	e50b3014 	str	r3, [fp, #-20]
    6cfc:	ea00000a 	b	6d2c <ee_write+0x7c>
    6d00:	e51b2014 	ldr	r2, [fp, #-20]
    6d04:	e3a034bb 	mov	r3, #-1157627904	; 0xbb000000
    6d08:	e1a03b43 	asr	r3, r3, #22
    6d0c:	e24b100c 	sub	r1, fp, #12
    6d10:	e0812002 	add	r2, r1, r2
    6d14:	e0822003 	add	r2, r2, r3
    6d18:	e3e03000 	mvn	r3, #0
    6d1c:	e5c23000 	strb	r3, [r2]
    6d20:	e51b3014 	ldr	r3, [fp, #-20]
    6d24:	e2833001 	add	r3, r3, #1
    6d28:	e50b3014 	str	r3, [fp, #-20]
    6d2c:	e51b3014 	ldr	r3, [fp, #-20]
    6d30:	e35300ff 	cmp	r3, #255	; 0xff
    6d34:	9afffff1 	bls	6d00 <ee_write+0x50>

		destination = (unsigned int *) ((&ee_buffer[0])+((unsigned int)location & EE_BUFFER_MASK));
    6d38:	e24b3e12 	sub	r3, fp, #288	; 0x120
    6d3c:	e50b3018 	str	r3, [fp, #-24]
		source = (unsigned int *) command_ee;
    6d40:	e51b3144 	ldr	r3, [fp, #-324]	; 0x144
    6d44:	e50b301c 	str	r3, [fp, #-28]
		for(i=0;i!=EE_REC_SIZE/4;i++) *(destination+i) = *(source+i);
    6d48:	e3a03000 	mov	r3, #0
    6d4c:	e50b3014 	str	r3, [fp, #-20]
    6d50:	ea00000e 	b	6d90 <ee_write+0xe0>
    6d54:	e51b3014 	ldr	r3, [fp, #-20]
    6d58:	e1a03103 	lsl	r3, r3, #2
    6d5c:	e1a02003 	mov	r2, r3
    6d60:	e51b3018 	ldr	r3, [fp, #-24]
    6d64:	e0821003 	add	r1, r2, r3
    6d68:	e51b3014 	ldr	r3, [fp, #-20]
    6d6c:	e1a03103 	lsl	r3, r3, #2
    6d70:	e1a02003 	mov	r2, r3
    6d74:	e51b301c 	ldr	r3, [fp, #-28]
    6d78:	e0823003 	add	r3, r2, r3
    6d7c:	e5933000 	ldr	r3, [r3]
    6d80:	e5813000 	str	r3, [r1]
    6d84:	e51b3014 	ldr	r3, [fp, #-20]
    6d88:	e2833001 	add	r3, r3, #1
    6d8c:	e50b3014 	str	r3, [fp, #-20]
    6d90:	e51b3014 	ldr	r3, [fp, #-20]
    6d94:	e3530040 	cmp	r3, #64	; 0x40
    6d98:	1affffed 	bne	6d54 <ee_write+0xa4>

		enabled_interrupts = VICIntEnable;  //disable all interrupts
    6d9c:	e3a03000 	mov	r3, #0
    6da0:	e2433eff 	sub	r3, r3, #4080	; 0xff0
    6da4:	e5933000 	ldr	r3, [r3]
    6da8:	e50b3010 	str	r3, [fp, #-16]
		VICIntEnClr        = enabled_interrupts;
    6dac:	e3e03efe 	mvn	r3, #4064	; 0xfe0
    6db0:	e243300b 	sub	r3, r3, #11
    6db4:	e51b2010 	ldr	r2, [fp, #-16]
    6db8:	e5832000 	str	r2, [r3]

		command_iap[0]=50;					//prepare sectors from EE_SEC_L to EE_SEC_H for erase
    6dbc:	e3a03032 	mov	r3, #50	; 0x32
    6dc0:	e50b3134 	str	r3, [fp, #-308]	; 0x134
		command_iap[1]=EE_SEC_L;
    6dc4:	e3a0300e 	mov	r3, #14
    6dc8:	e50b3130 	str	r3, [fp, #-304]	; 0x130
		command_iap[2]=EE_SEC_H;
    6dcc:	e3a0300e 	mov	r3, #14
    6dd0:	e50b312c 	str	r3, [fp, #-300]	; 0x12c
		iap_entry=(IAP) IAP_LOCATION;
    6dd4:	e59f20f4 	ldr	r2, [pc, #244]	; 6ed0 <ee_write+0x220>
    6dd8:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    6ddc:	e5823000 	str	r3, [r2]
		iap_entry(command_iap,result_iap);
    6de0:	e59f30e8 	ldr	r3, [pc, #232]	; 6ed0 <ee_write+0x220>
    6de4:	e593c000 	ldr	ip, [r3]
    6de8:	e24b3f4d 	sub	r3, fp, #308	; 0x134
    6dec:	e24b2d05 	sub	r2, fp, #320	; 0x140
    6df0:	e1a00003 	mov	r0, r3
    6df4:	e1a01002 	mov	r1, r2
    6df8:	e1a0e00f 	mov	lr, pc
    6dfc:	e12fff1c 	bx	ip

		command_iap[0]=51;					//copy RAM to flash/eeprom
    6e00:	e3a03033 	mov	r3, #51	; 0x33
    6e04:	e50b3134 	str	r3, [fp, #-308]	; 0x134
		command_iap[1]=(unsigned int) (location & EE_START_MASK);
    6e08:	e51b3020 	ldr	r3, [fp, #-32]
    6e0c:	e3c330ff 	bic	r3, r3, #255	; 0xff
    6e10:	e50b3130 	str	r3, [fp, #-304]	; 0x130
		command_iap[2]=(unsigned int) (&ee_buffer[0]);
    6e14:	e24b3e12 	sub	r3, fp, #288	; 0x120
    6e18:	e50b312c 	str	r3, [fp, #-300]	; 0x12c
		command_iap[3]=EE_BUFFER_SIZE;
    6e1c:	e3a03c01 	mov	r3, #256	; 0x100
    6e20:	e50b3128 	str	r3, [fp, #-296]	; 0x128
		command_iap[4]=EE_CCLK;
    6e24:	e3a03cea 	mov	r3, #59904	; 0xea00
    6e28:	e2833060 	add	r3, r3, #96	; 0x60
    6e2c:	e50b3124 	str	r3, [fp, #-292]	; 0x124
		iap_entry=(IAP) IAP_LOCATION;
    6e30:	e59f2098 	ldr	r2, [pc, #152]	; 6ed0 <ee_write+0x220>
    6e34:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    6e38:	e5823000 	str	r3, [r2]
		iap_entry(command_iap,result_iap);
    6e3c:	e59f308c 	ldr	r3, [pc, #140]	; 6ed0 <ee_write+0x220>
    6e40:	e593c000 	ldr	ip, [r3]
    6e44:	e24b3f4d 	sub	r3, fp, #308	; 0x134
    6e48:	e24b2d05 	sub	r2, fp, #320	; 0x140
    6e4c:	e1a00003 	mov	r0, r3
    6e50:	e1a01002 	mov	r1, r2
    6e54:	e1a0e00f 	mov	lr, pc
    6e58:	e12fff1c 	bx	ip

		command_iap[0]=56;					//compare RAM and flash/eeprom
    6e5c:	e3a03038 	mov	r3, #56	; 0x38
    6e60:	e50b3134 	str	r3, [fp, #-308]	; 0x134
		command_iap[1]=(unsigned int) source;
    6e64:	e51b301c 	ldr	r3, [fp, #-28]
    6e68:	e50b3130 	str	r3, [fp, #-304]	; 0x130
		command_iap[2]=(unsigned int) location;
    6e6c:	e51b3020 	ldr	r3, [fp, #-32]
    6e70:	e50b312c 	str	r3, [fp, #-300]	; 0x12c
		command_iap[3]=EE_REC_SIZE;
    6e74:	e3a03c01 	mov	r3, #256	; 0x100
    6e78:	e50b3128 	str	r3, [fp, #-296]	; 0x128
		iap_entry=(IAP) IAP_LOCATION;
    6e7c:	e59f204c 	ldr	r2, [pc, #76]	; 6ed0 <ee_write+0x220>
    6e80:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    6e84:	e5823000 	str	r3, [r2]
		iap_entry(command_iap,result_iap);
    6e88:	e59f3040 	ldr	r3, [pc, #64]	; 6ed0 <ee_write+0x220>
    6e8c:	e593c000 	ldr	ip, [r3]
    6e90:	e24b3f4d 	sub	r3, fp, #308	; 0x134
    6e94:	e24b2d05 	sub	r2, fp, #320	; 0x140
    6e98:	e1a00003 	mov	r0, r3
    6e9c:	e1a01002 	mov	r1, r2
    6ea0:	e1a0e00f 	mov	lr, pc
    6ea4:	e12fff1c 	bx	ip

		VICIntEnable = enabled_interrupts;  //restore interrupt enable register
    6ea8:	e3a03000 	mov	r3, #0
    6eac:	e2433eff 	sub	r3, r3, #4080	; 0xff0
    6eb0:	e51b2010 	ldr	r2, [fp, #-16]
    6eb4:	e5832000 	str	r2, [r3]

		result_ee[0]=result_iap[0];
    6eb8:	e51b2140 	ldr	r2, [fp, #-320]	; 0x140
    6ebc:	e51b3148 	ldr	r3, [fp, #-328]	; 0x148
    6ec0:	e5832000 	str	r2, [r3]
	}
	return;
}
    6ec4:	e24bd00c 	sub	sp, fp, #12
    6ec8:	e89d6800 	ldm	sp, {fp, sp, lr}
    6ecc:	e12fff1e 	bx	lr
    6ed0:	40001ed8 	.word	0x40001ed8

00006ed4 <ee_read>:
/* revision history:                                                   	*/
/* - Rev. 1.0 had problems with accessing the last record in a fully	*/
/*   occupied EEPROM. Rev. 1.1 fixes this.								*/
/*                                                                     	*/
/************************************************************************/
void ee_read(unsigned int command_ee,unsigned int result_ee[]){
    6ed4:	e1a0c00d 	mov	ip, sp
    6ed8:	e92dd800 	push	{fp, ip, lr, pc}
    6edc:	e24cb004 	sub	fp, ip, #4
    6ee0:	e24dd00c 	sub	sp, sp, #12
    6ee4:	e50b0014 	str	r0, [fp, #-20]
    6ee8:	e50b1018 	str	r1, [fp, #-24]
	int location;

	location = ee_locate();
    6eec:	eb000053 	bl	7040 <ee_locate>
    6ef0:	e1a03000 	mov	r3, r0
    6ef4:	e50b3010 	str	r3, [fp, #-16]
	if (location == EE_ADDR_L){
    6ef8:	e51b3010 	ldr	r3, [fp, #-16]
    6efc:	e353090e 	cmp	r3, #229376	; 0x38000
    6f00:	1a000003 	bne	6f14 <ee_read+0x40>
		result_ee[0]=NO_RECORDS_AVAILABLE;
    6f04:	e51b2018 	ldr	r2, [fp, #-24]
    6f08:	e3a03f7d 	mov	r3, #500	; 0x1f4
    6f0c:	e5823000 	str	r3, [r2]
    6f10:	ea000010 	b	6f58 <ee_read+0x84>
	}
	else{
		result_ee[0]=0;
    6f14:	e51b3018 	ldr	r3, [fp, #-24]
    6f18:	e3a02000 	mov	r2, #0
    6f1c:	e5832000 	str	r2, [r3]
		if (location == -1)
    6f20:	e51b3010 	ldr	r3, [fp, #-16]
    6f24:	e3730001 	cmn	r3, #1
    6f28:	1a000005 	bne	6f44 <ee_read+0x70>
			result_ee[1]=(unsigned int)(EE_ADDR_H+1 - EE_REC_SIZE);
    6f2c:	e51b3018 	ldr	r3, [fp, #-24]
    6f30:	e2832004 	add	r2, r3, #4
    6f34:	e3a03bff 	mov	r3, #261120	; 0x3fc00
    6f38:	e2833c03 	add	r3, r3, #768	; 0x300
    6f3c:	e5823000 	str	r3, [r2]
    6f40:	ea000004 	b	6f58 <ee_read+0x84>
		else
			result_ee[1]=(unsigned int)(location - EE_REC_SIZE);
    6f44:	e51b3018 	ldr	r3, [fp, #-24]
    6f48:	e2832004 	add	r2, r3, #4
    6f4c:	e51b3010 	ldr	r3, [fp, #-16]
    6f50:	e2433c01 	sub	r3, r3, #256	; 0x100
    6f54:	e5823000 	str	r3, [r2]
	}
	return;
}
    6f58:	e24bd00c 	sub	sp, fp, #12
    6f5c:	e89d6800 	ldm	sp, {fp, sp, lr}
    6f60:	e12fff1e 	bx	lr

00006f64 <ee_readn>:
/* description:															*/
/*  This function returns in result_ee[1] an address of an EEPROM 		*/
/*  record index specified in command_ee. Index can not be less than 0.	*/
/*                                                                     	*/
/************************************************************************/
void ee_readn(unsigned int command_ee,unsigned int result_ee[]){
    6f64:	e1a0c00d 	mov	ip, sp
    6f68:	e92dd800 	push	{fp, ip, lr, pc}
    6f6c:	e24cb004 	sub	fp, ip, #4
    6f70:	e24dd008 	sub	sp, sp, #8
    6f74:	e50b0010 	str	r0, [fp, #-16]
    6f78:	e50b1014 	str	r1, [fp, #-20]
	if(command_ee>((EE_ADDR_H+1-EE_ADDR_L)/EE_REC_SIZE)){
    6f7c:	e51b3010 	ldr	r3, [fp, #-16]
    6f80:	e3530080 	cmp	r3, #128	; 0x80
    6f84:	9a000004 	bls	6f9c <ee_readn+0x38>
		result_ee[0]=INDEX_OUT_OF_RANGE;}
    6f88:	e51b2014 	ldr	r2, [fp, #-20]
    6f8c:	e3a03f7d 	mov	r3, #500	; 0x1f4
    6f90:	e2833002 	add	r3, r3, #2
    6f94:	e5823000 	str	r3, [r2]
    6f98:	ea000008 	b	6fc0 <ee_readn+0x5c>
	else{
		result_ee[0]=0;
    6f9c:	e51b2014 	ldr	r2, [fp, #-20]
    6fa0:	e3a03000 	mov	r3, #0
    6fa4:	e5823000 	str	r3, [r2]
		result_ee[1]=(unsigned int)(EE_ADDR_L+EE_REC_SIZE*command_ee);
    6fa8:	e51b3014 	ldr	r3, [fp, #-20]
    6fac:	e2832004 	add	r2, r3, #4
    6fb0:	e51b3010 	ldr	r3, [fp, #-16]
    6fb4:	e1a03403 	lsl	r3, r3, #8
    6fb8:	e283390e 	add	r3, r3, #229376	; 0x38000
    6fbc:	e5823000 	str	r3, [r2]
	}
	return;
}
    6fc0:	e24bd00c 	sub	sp, fp, #12
    6fc4:	e89d6800 	ldm	sp, {fp, sp, lr}
    6fc8:	e12fff1e 	bx	lr

00006fcc <ee_count>:
/* revision history:                                                   	*/
/* - Initial release (1.0) was not supplying the right feedback in case */
/*   of counting records in a full EEPROM. Rev. 1.1 fixes this.         */
/*                                                                     	*/
/************************************************************************/
void ee_count(unsigned int command_ee,unsigned int result_ee[]){
    6fcc:	e1a0c00d 	mov	ip, sp
    6fd0:	e92dd800 	push	{fp, ip, lr, pc}
    6fd4:	e24cb004 	sub	fp, ip, #4
    6fd8:	e24dd00c 	sub	sp, sp, #12
    6fdc:	e50b0014 	str	r0, [fp, #-20]
    6fe0:	e50b1018 	str	r1, [fp, #-24]
	int location;
	result_ee[0]=0;
    6fe4:	e51b2018 	ldr	r2, [fp, #-24]
    6fe8:	e3a03000 	mov	r3, #0
    6fec:	e5823000 	str	r3, [r2]
	location = ee_locate();
    6ff0:	eb000012 	bl	7040 <ee_locate>
    6ff4:	e1a03000 	mov	r3, r0
    6ff8:	e50b3010 	str	r3, [fp, #-16]
	if (location == -1) location = EE_ADDR_H+1;
    6ffc:	e51b3010 	ldr	r3, [fp, #-16]
    7000:	e3730001 	cmn	r3, #1
    7004:	1a000001 	bne	7010 <ee_count+0x44>
    7008:	e3a03701 	mov	r3, #262144	; 0x40000
    700c:	e50b3010 	str	r3, [fp, #-16]
	result_ee[1]=(unsigned int)((location-EE_ADDR_L)/EE_REC_SIZE);
    7010:	e51b3018 	ldr	r3, [fp, #-24]
    7014:	e2831004 	add	r1, r3, #4
    7018:	e51b3010 	ldr	r3, [fp, #-16]
    701c:	e243390e 	sub	r3, r3, #229376	; 0x38000
    7020:	e28320ff 	add	r2, r3, #255	; 0xff
    7024:	e3530000 	cmp	r3, #0
    7028:	b1a03002 	movlt	r3, r2
    702c:	e1a03443 	asr	r3, r3, #8
    7030:	e5813000 	str	r3, [r1]
	return;
}
    7034:	e24bd00c 	sub	sp, fp, #12
    7038:	e89d6800 	ldm	sp, {fp, sp, lr}
    703c:	e12fff1e 	bx	lr

00007040 <ee_locate>:
/* revision history:                                                   	*/
/* - Rev. 1.1 fixes a bug related to identifying an unused byte of 		*/
/*   EEPROM in an EEPROM with size not equal to EE_REC_SIZE * 2^k (k>=0)*/
/*                                                                     	*/
/************************************************************************/
int ee_locate(void){
    7040:	e1a0c00d 	mov	ip, sp
    7044:	e92dd800 	push	{fp, ip, lr, pc}
    7048:	e24cb004 	sub	fp, ip, #4
    704c:	e24dd018 	sub	sp, sp, #24
	unsigned int addr_l, addr_m, addr_r, size, slice_limit;
	addr_l = EE_ADDR_L;
    7050:	e3a0390e 	mov	r3, #229376	; 0x38000
    7054:	e50b3020 	str	r3, [fp, #-32]
	if ((*((unsigned char *)addr_l))==0xFF) return(addr_l);
    7058:	e51b3020 	ldr	r3, [fp, #-32]
    705c:	e5d33000 	ldrb	r3, [r3]
    7060:	e35300ff 	cmp	r3, #255	; 0xff
    7064:	1a000002 	bne	7074 <ee_locate+0x34>
    7068:	e51b3020 	ldr	r3, [fp, #-32]
    706c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    7070:	ea00003f 	b	7174 <ee_locate+0x134>
	addr_r = EE_ADDR_H+1;
    7074:	e3a03701 	mov	r3, #262144	; 0x40000
    7078:	e50b3018 	str	r3, [fp, #-24]
	if ((*((unsigned char *)(addr_r-EE_REC_SIZE)))==EE_REC_ID) return(-1);
    707c:	e51b3018 	ldr	r3, [fp, #-24]
    7080:	e2433c01 	sub	r3, r3, #256	; 0x100
    7084:	e5d33000 	ldrb	r3, [r3]
    7088:	e35300aa 	cmp	r3, #170	; 0xaa
    708c:	1a000002 	bne	709c <ee_locate+0x5c>
    7090:	e3e03000 	mvn	r3, #0
    7094:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    7098:	ea000035 	b	7174 <ee_locate+0x134>
	size = addr_r - addr_l;
    709c:	e51b2018 	ldr	r2, [fp, #-24]
    70a0:	e51b3020 	ldr	r3, [fp, #-32]
    70a4:	e0633002 	rsb	r3, r3, r2
    70a8:	e50b3014 	str	r3, [fp, #-20]
	slice_limit = EE_REC_SIZE - 1;
    70ac:	e3a030ff 	mov	r3, #255	; 0xff
    70b0:	e50b3010 	str	r3, [fp, #-16]
	while(size != EE_REC_SIZE){
    70b4:	ea000029 	b	7160 <ee_locate+0x120>
		addr_m = (addr_r+addr_l)/2;
    70b8:	e51b2018 	ldr	r2, [fp, #-24]
    70bc:	e51b3020 	ldr	r3, [fp, #-32]
    70c0:	e0823003 	add	r3, r2, r3
    70c4:	e1a030a3 	lsr	r3, r3, #1
    70c8:	e50b301c 	str	r3, [fp, #-28]
		if ((addr_m & slice_limit)!=0x00000000){
    70cc:	e51b201c 	ldr	r2, [fp, #-28]
    70d0:	e51b3010 	ldr	r3, [fp, #-16]
    70d4:	e0023003 	and	r3, r2, r3
    70d8:	e3530000 	cmp	r3, #0
    70dc:	0a000013 	beq	7130 <ee_locate+0xf0>
			if ((*((unsigned char *)(addr_r - EE_REC_SIZE)))==0xFF) 
    70e0:	e51b3018 	ldr	r3, [fp, #-24]
    70e4:	e2433c01 	sub	r3, r3, #256	; 0x100
    70e8:	e5d33000 	ldrb	r3, [r3]
    70ec:	e35300ff 	cmp	r3, #255	; 0xff
    70f0:	1a000003 	bne	7104 <ee_locate+0xc4>
				addr_r = addr_r - EE_REC_SIZE;
    70f4:	e51b3018 	ldr	r3, [fp, #-24]
    70f8:	e2433c01 	sub	r3, r3, #256	; 0x100
    70fc:	e50b3018 	str	r3, [fp, #-24]
    7100:	ea000002 	b	7110 <ee_locate+0xd0>
			else
				addr_l = addr_l + EE_REC_SIZE;
    7104:	e51b3020 	ldr	r3, [fp, #-32]
    7108:	e2833c01 	add	r3, r3, #256	; 0x100
    710c:	e50b3020 	str	r3, [fp, #-32]
			addr_m = (addr_r+addr_l)/2;
    7110:	e51b2018 	ldr	r2, [fp, #-24]
    7114:	e51b3020 	ldr	r3, [fp, #-32]
    7118:	e0823003 	add	r3, r2, r3
    711c:	e1a030a3 	lsr	r3, r3, #1
    7120:	e50b301c 	str	r3, [fp, #-28]
			size = size - EE_REC_SIZE;
    7124:	e51b3014 	ldr	r3, [fp, #-20]
    7128:	e2433c01 	sub	r3, r3, #256	; 0x100
    712c:	e50b3014 	str	r3, [fp, #-20]
		}
		if ((*((unsigned char *)addr_m))==0xFF)
    7130:	e51b301c 	ldr	r3, [fp, #-28]
    7134:	e5d33000 	ldrb	r3, [r3]
    7138:	e35300ff 	cmp	r3, #255	; 0xff
    713c:	1a000002 	bne	714c <ee_locate+0x10c>
			addr_r = addr_m;
    7140:	e51b301c 	ldr	r3, [fp, #-28]
    7144:	e50b3018 	str	r3, [fp, #-24]
    7148:	ea000001 	b	7154 <ee_locate+0x114>
		else
			addr_l = addr_m;
    714c:	e51b301c 	ldr	r3, [fp, #-28]
    7150:	e50b3020 	str	r3, [fp, #-32]
		size = size/2;
    7154:	e51b3014 	ldr	r3, [fp, #-20]
    7158:	e1a030a3 	lsr	r3, r3, #1
    715c:	e50b3014 	str	r3, [fp, #-20]
	if ((*((unsigned char *)addr_l))==0xFF) return(addr_l);
	addr_r = EE_ADDR_H+1;
	if ((*((unsigned char *)(addr_r-EE_REC_SIZE)))==EE_REC_ID) return(-1);
	size = addr_r - addr_l;
	slice_limit = EE_REC_SIZE - 1;
	while(size != EE_REC_SIZE){
    7160:	e51b3014 	ldr	r3, [fp, #-20]
    7164:	e3530c01 	cmp	r3, #256	; 0x100
    7168:	1affffd2 	bne	70b8 <ee_locate+0x78>
			addr_r = addr_m;
		else
			addr_l = addr_m;
		size = size/2;
	}
	return(addr_r);
    716c:	e51b3018 	ldr	r3, [fp, #-24]
    7170:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    7174:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
}
    7178:	e1a00003 	mov	r0, r3
    717c:	e24bd00c 	sub	sp, fp, #12
    7180:	e89d6800 	ldm	sp, {fp, sp, lr}
    7184:	e12fff1e 	bx	lr

00007188 <enter_isp>:

void enter_isp()
{
    7188:	e1a0c00d 	mov	ip, sp
    718c:	e92dd800 	push	{fp, ip, lr, pc}
    7190:	e24cb004 	sub	fp, ip, #4
    7194:	e24dd024 	sub	sp, sp, #36	; 0x24
	unsigned long enabled_interrupts;

	//this functions enters the ISP mode by software
	//disable PLL

	enabled_interrupts = VICIntEnable;  //disable all interrupts
    7198:	e3a03000 	mov	r3, #0
    719c:	e2433eff 	sub	r3, r3, #4080	; 0xff0
    71a0:	e5933000 	ldr	r3, [r3]
    71a4:	e50b3010 	str	r3, [fp, #-16]
	VICIntEnClr        = enabled_interrupts;
    71a8:	e3e03efe 	mvn	r3, #4064	; 0xfe0
    71ac:	e243300b 	sub	r3, r3, #11
    71b0:	e51b2010 	ldr	r2, [fp, #-16]
    71b4:	e5832000 	str	r2, [r3]


	PLLCON=0; //PLL disabled
    71b8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    71bc:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    71c0:	e2833080 	add	r3, r3, #128	; 0x80
    71c4:	e3a02000 	mov	r2, #0
    71c8:	e5832000 	str	r2, [r3]

	command_iap[0]=57;
    71cc:	e3a03039 	mov	r3, #57	; 0x39
    71d0:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	iap_entry=(IAP) IAP_LOCATION;
    71d4:	e59f2030 	ldr	r2, [pc, #48]	; 720c <enter_isp+0x84>
    71d8:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    71dc:	e5823000 	str	r3, [r2]
	iap_entry(command_iap,result_iap);
    71e0:	e59f3024 	ldr	r3, [pc, #36]	; 720c <enter_isp+0x84>
    71e4:	e593c000 	ldr	ip, [r3]
    71e8:	e24b3024 	sub	r3, fp, #36	; 0x24
    71ec:	e24b2030 	sub	r2, fp, #48	; 0x30
    71f0:	e1a00003 	mov	r0, r3
    71f4:	e1a01002 	mov	r1, r2
    71f8:	e1a0e00f 	mov	lr, pc
    71fc:	e12fff1c 	bx	ip

}
    7200:	e24bd00c 	sub	sp, fp, #12
    7204:	e89d6800 	ldm	sp, {fp, sp, lr}
    7208:	e12fff1e 	bx	lr
    720c:	40001ed8 	.word	0x40001ed8

00007210 <loadFrame>:

// Processes bytes in our ring buffer and pulls out a frame.
//  Returns TRUE if there is a valid frame.
//  FALSE if there is not a valid frame in the Ring Buffer.
char loadFrame(void)
{
    7210:	e1a0c00d 	mov	ip, sp
    7214:	e92dd800 	push	{fp, ip, lr, pc}
    7218:	e24cb004 	sub	fp, ip, #4
    721c:	e24dd014 	sub	sp, sp, #20
	int i;
	int sIndex, eIndex; //SOF / EOF indexes.
	int nBuf; //Bytes in the buffer.
	
	// Loop through the available data while we have enough bytes to form a frame.
	while ( bytesAvailable() >= 8 )
    7220:	ea00004f 	b	7364 <loadFrame+0x154>
	{
		nBuf = bytesAvailable();
    7224:	ebffec0b 	bl	2258 <bytesAvailable>
    7228:	e1a03000 	mov	r3, r0
    722c:	e50b3010 	str	r3, [fp, #-16]
	
		// Find our first SOF byte.
		sIndex = findInBuffer(  0, nBuf, SOF );
    7230:	e3a00000 	mov	r0, #0
    7234:	e51b1010 	ldr	r1, [fp, #-16]
    7238:	e3a020ea 	mov	r2, #234	; 0xea
    723c:	ebffebeb 	bl	21f0 <findInBuffer>
    7240:	e1a03000 	mov	r3, r0
    7244:	e50b3018 	str	r3, [fp, #-24]
		if ( sIndex == -1 ) //No SOF in the entire buffer?
    7248:	e51b3018 	ldr	r3, [fp, #-24]
    724c:	e3730001 	cmn	r3, #1
    7250:	1a000004 	bne	7268 <loadFrame+0x58>
		{
			skipBytes(nBuf); //Discard the entire buffer.
    7254:	e51b0010 	ldr	r0, [fp, #-16]
    7258:	ebffebf4 	bl	2230 <skipBytes>
			return 0;
    725c:	e3a03000 	mov	r3, #0
    7260:	e50b3020 	str	r3, [fp, #-32]
    7264:	ea000044 	b	737c <loadFrame+0x16c>
		}
	
		// Make sure the SOF is the first entry in our Ring Buffer
		nBuf = skipBytes(sIndex);
    7268:	e51b0018 	ldr	r0, [fp, #-24]
    726c:	ebffebef 	bl	2230 <skipBytes>
    7270:	e1a03000 	mov	r3, r0
    7274:	e50b3010 	str	r3, [fp, #-16]
	
		// If we don't have enough characters left in the buffer for a frame
		if ( nBuf < 8 ) 
    7278:	e51b3010 	ldr	r3, [fp, #-16]
    727c:	e3530007 	cmp	r3, #7
    7280:	ca000002 	bgt	7290 <loadFrame+0x80>
			return 0; // Then we're done.
    7284:	e3a03000 	mov	r3, #0
    7288:	e50b3020 	str	r3, [fp, #-32]
    728c:	ea00003a 	b	737c <loadFrame+0x16c>
			
		// Now we need to make sure we don't have another SOF.
		// We shouldn't have another for at least 8 bytes.
		sIndex = findInBuffer( 1, 7, SOF );
    7290:	e3a00001 	mov	r0, #1
    7294:	e3a01007 	mov	r1, #7
    7298:	e3a020ea 	mov	r2, #234	; 0xea
    729c:	ebffebd3 	bl	21f0 <findInBuffer>
    72a0:	e1a03000 	mov	r3, r0
    72a4:	e50b3018 	str	r3, [fp, #-24]
		if ( sIndex != -1 ) // We have another SOF in the next 7 characters.
    72a8:	e51b3018 	ldr	r3, [fp, #-24]
    72ac:	e3730001 	cmn	r3, #1
    72b0:	0a000004 	beq	72c8 <loadFrame+0xb8>
		{
			skipBytes( sIndex + 1 ); //Skip up until then
    72b4:	e51b3018 	ldr	r3, [fp, #-24]
    72b8:	e2833001 	add	r3, r3, #1
    72bc:	e1a00003 	mov	r0, r3
    72c0:	ebffebda 	bl	2230 <skipBytes>
			continue;
    72c4:	ea000026 	b	7364 <loadFrame+0x154>
		}
		
		// We don't have another SOF, do we have a valid EOF?
		eIndex = findInBuffer( 1, 7, EOFm );
    72c8:	e3a00001 	mov	r0, #1
    72cc:	e3a01007 	mov	r1, #7
    72d0:	e3a020d5 	mov	r2, #213	; 0xd5
    72d4:	ebffebc5 	bl	21f0 <findInBuffer>
    72d8:	e1a03000 	mov	r3, r0
    72dc:	e50b3014 	str	r3, [fp, #-20]

		if (eIndex != 6) //EOF should be the 8th byte out. Bad Frame! Bad!
    72e0:	e51b3014 	ldr	r3, [fp, #-20]
    72e4:	e3530006 	cmp	r3, #6
    72e8:	0a00000a 	beq	7318 <loadFrame+0x108>
		{
			// We will discard byte up to the EOF if it was found...
			if ( eIndex >= 0 )
    72ec:	e51b3014 	ldr	r3, [fp, #-20]
    72f0:	e3530000 	cmp	r3, #0
    72f4:	ba000004 	blt	730c <loadFrame+0xfc>
				skipBytes( eIndex + 1 ); //Discard up to and including the EOF.
    72f8:	e51b3014 	ldr	r3, [fp, #-20]
    72fc:	e2833001 	add	r3, r3, #1
    7300:	e1a00003 	mov	r0, r3
    7304:	ebffebc9 	bl	2230 <skipBytes>
    7308:	ea000015 	b	7364 <loadFrame+0x154>
			else
				skipBytes( 8 ); //No EOF was found at all. Discard all 8 in frame.
    730c:	e3a00008 	mov	r0, #8
    7310:	ebffebc6 	bl	2230 <skipBytes>
			continue;
    7314:	ea000012 	b	7364 <loadFrame+0x154>
		}		
		// We have a valid frame.
		frame.prefix = getByte(); //SOF byte
    7318:	ebffec18 	bl	2380 <getByte>
    731c:	e1a03000 	mov	r3, r0
    7320:	e59f2068 	ldr	r2, [pc, #104]	; 7390 <loadFrame+0x180>
    7324:	e5c23000 	strb	r3, [r2]
		// Get the command byte
		frame.command = getByte();
    7328:	ebffec14 	bl	2380 <getByte>
    732c:	e1a03000 	mov	r3, r0
    7330:	e59f2058 	ldr	r2, [pc, #88]	; 7390 <loadFrame+0x180>
    7334:	e5c23001 	strb	r3, [r2, #1]
		getBytes(frame.data, 5); //Data bytes.
    7338:	e59f3054 	ldr	r3, [pc, #84]	; 7394 <loadFrame+0x184>
    733c:	e1a00003 	mov	r0, r3
    7340:	e3a01005 	mov	r1, #5
    7344:	ebffec22 	bl	23d4 <getBytes>
		frame.suffix = getByte(); //EOF byte
    7348:	ebffec0c 	bl	2380 <getByte>
    734c:	e1a03000 	mov	r3, r0
    7350:	e59f2038 	ldr	r2, [pc, #56]	; 7390 <loadFrame+0x180>
    7354:	e5c23007 	strb	r3, [r2, #7]
		
		return 1;
    7358:	e3a03001 	mov	r3, #1
    735c:	e50b3020 	str	r3, [fp, #-32]
    7360:	ea000005 	b	737c <loadFrame+0x16c>
	int i;
	int sIndex, eIndex; //SOF / EOF indexes.
	int nBuf; //Bytes in the buffer.
	
	// Loop through the available data while we have enough bytes to form a frame.
	while ( bytesAvailable() >= 8 )
    7364:	ebffebbb 	bl	2258 <bytesAvailable>
    7368:	e1a03000 	mov	r3, r0
    736c:	e3530007 	cmp	r3, #7
    7370:	8affffab 	bhi	7224 <loadFrame+0x14>
		getBytes(frame.data, 5); //Data bytes.
		frame.suffix = getByte(); //EOF byte
		
		return 1;
	}
	return 0; //No valid frame present.			
    7374:	e3a03000 	mov	r3, #0
    7378:	e50b3020 	str	r3, [fp, #-32]
    737c:	e51b3020 	ldr	r3, [fp, #-32]
}
    7380:	e1a00003 	mov	r0, r3
    7384:	e24bd00c 	sub	sp, fp, #12
    7388:	e89d6800 	ldm	sp, {fp, sp, lr}
    738c:	e12fff1e 	bx	lr
    7390:	40001edc 	.word	0x40001edc
    7394:	40001ede 	.word	0x40001ede

00007398 <memcpy>:
    7398:	b530      	push	{r4, r5, lr}
    739a:	1c05      	adds	r5, r0, #0
    739c:	1c14      	adds	r4, r2, #0
    739e:	2a0f      	cmp	r2, #15
    73a0:	d904      	bls.n	73ac <memcpy+0x14>
    73a2:	1c0a      	adds	r2, r1, #0
    73a4:	432a      	orrs	r2, r5
    73a6:	2303      	movs	r3, #3
    73a8:	421a      	tst	r2, r3
    73aa:	d00b      	beq.n	73c4 <memcpy+0x2c>
    73ac:	1e62      	subs	r2, r4, #1
    73ae:	d305      	bcc.n	73bc <memcpy+0x24>
    73b0:	780b      	ldrb	r3, [r1, #0]
    73b2:	3101      	adds	r1, #1
    73b4:	7003      	strb	r3, [r0, #0]
    73b6:	3001      	adds	r0, #1
    73b8:	3a01      	subs	r2, #1
    73ba:	d2f9      	bcs.n	73b0 <memcpy+0x18>
    73bc:	1c28      	adds	r0, r5, #0
    73be:	bc30      	pop	{r4, r5}
    73c0:	bc02      	pop	{r1}
    73c2:	4708      	bx	r1
    73c4:	1c2a      	adds	r2, r5, #0
    73c6:	680b      	ldr	r3, [r1, #0]
    73c8:	6013      	str	r3, [r2, #0]
    73ca:	684b      	ldr	r3, [r1, #4]
    73cc:	6053      	str	r3, [r2, #4]
    73ce:	688b      	ldr	r3, [r1, #8]
    73d0:	6093      	str	r3, [r2, #8]
    73d2:	68cb      	ldr	r3, [r1, #12]
    73d4:	3c10      	subs	r4, #16
    73d6:	60d3      	str	r3, [r2, #12]
    73d8:	3110      	adds	r1, #16
    73da:	3210      	adds	r2, #16
    73dc:	2c0f      	cmp	r4, #15
    73de:	d8f2      	bhi.n	73c6 <memcpy+0x2e>
    73e0:	2c03      	cmp	r4, #3
    73e2:	d904      	bls.n	73ee <memcpy+0x56>
    73e4:	c908      	ldmia	r1!, {r3}
    73e6:	3c04      	subs	r4, #4
    73e8:	c208      	stmia	r2!, {r3}
    73ea:	2c03      	cmp	r4, #3
    73ec:	d8fa      	bhi.n	73e4 <memcpy+0x4c>
    73ee:	1c10      	adds	r0, r2, #0
    73f0:	e7dc      	b.n	73ac <memcpy+0x14>
    73f2:	46c0      	nop			; (mov r8, r8)

000073f4 <__aeabi_uidiv>:
    73f4:	2900      	cmp	r1, #0
    73f6:	d034      	beq.n	7462 <__aeabi_uidiv+0x6e>
    73f8:	2301      	movs	r3, #1
    73fa:	2200      	movs	r2, #0
    73fc:	b410      	push	{r4}
    73fe:	4288      	cmp	r0, r1
    7400:	d32c      	bcc.n	745c <__aeabi_uidiv+0x68>
    7402:	2401      	movs	r4, #1
    7404:	0724      	lsls	r4, r4, #28
    7406:	42a1      	cmp	r1, r4
    7408:	d204      	bcs.n	7414 <__aeabi_uidiv+0x20>
    740a:	4281      	cmp	r1, r0
    740c:	d202      	bcs.n	7414 <__aeabi_uidiv+0x20>
    740e:	0109      	lsls	r1, r1, #4
    7410:	011b      	lsls	r3, r3, #4
    7412:	e7f8      	b.n	7406 <__aeabi_uidiv+0x12>
    7414:	00e4      	lsls	r4, r4, #3
    7416:	42a1      	cmp	r1, r4
    7418:	d204      	bcs.n	7424 <__aeabi_uidiv+0x30>
    741a:	4281      	cmp	r1, r0
    741c:	d202      	bcs.n	7424 <__aeabi_uidiv+0x30>
    741e:	0049      	lsls	r1, r1, #1
    7420:	005b      	lsls	r3, r3, #1
    7422:	e7f8      	b.n	7416 <__aeabi_uidiv+0x22>
    7424:	4288      	cmp	r0, r1
    7426:	d301      	bcc.n	742c <__aeabi_uidiv+0x38>
    7428:	1a40      	subs	r0, r0, r1
    742a:	431a      	orrs	r2, r3
    742c:	084c      	lsrs	r4, r1, #1
    742e:	42a0      	cmp	r0, r4
    7430:	d302      	bcc.n	7438 <__aeabi_uidiv+0x44>
    7432:	1b00      	subs	r0, r0, r4
    7434:	085c      	lsrs	r4, r3, #1
    7436:	4322      	orrs	r2, r4
    7438:	088c      	lsrs	r4, r1, #2
    743a:	42a0      	cmp	r0, r4
    743c:	d302      	bcc.n	7444 <__aeabi_uidiv+0x50>
    743e:	1b00      	subs	r0, r0, r4
    7440:	089c      	lsrs	r4, r3, #2
    7442:	4322      	orrs	r2, r4
    7444:	08cc      	lsrs	r4, r1, #3
    7446:	42a0      	cmp	r0, r4
    7448:	d302      	bcc.n	7450 <__aeabi_uidiv+0x5c>
    744a:	1b00      	subs	r0, r0, r4
    744c:	08dc      	lsrs	r4, r3, #3
    744e:	4322      	orrs	r2, r4
    7450:	2800      	cmp	r0, #0
    7452:	d003      	beq.n	745c <__aeabi_uidiv+0x68>
    7454:	091b      	lsrs	r3, r3, #4
    7456:	d001      	beq.n	745c <__aeabi_uidiv+0x68>
    7458:	0909      	lsrs	r1, r1, #4
    745a:	e7e3      	b.n	7424 <__aeabi_uidiv+0x30>
    745c:	1c10      	adds	r0, r2, #0
    745e:	bc10      	pop	{r4}
    7460:	4770      	bx	lr
    7462:	b502      	push	{r1, lr}
    7464:	f000 f85e 	bl	7524 <__aeabi_idiv0>
    7468:	2000      	movs	r0, #0
    746a:	bc06      	pop	{r1, r2}
    746c:	4710      	bx	r2
    746e:	46c0      	nop			; (mov r8, r8)

00007470 <__aeabi_uidivmod>:
    7470:	b503      	push	{r0, r1, lr}
    7472:	f7ff ffbf 	bl	73f4 <__aeabi_uidiv>
    7476:	bc0e      	pop	{r1, r2, r3}
    7478:	4342      	muls	r2, r0
    747a:	1a89      	subs	r1, r1, r2
    747c:	4718      	bx	r3
    747e:	46c0      	nop			; (mov r8, r8)

00007480 <__aeabi_idiv>:
    7480:	2900      	cmp	r1, #0
    7482:	d041      	beq.n	7508 <__aeabi_idiv+0x88>
    7484:	b410      	push	{r4}
    7486:	1c04      	adds	r4, r0, #0
    7488:	404c      	eors	r4, r1
    748a:	46a4      	mov	ip, r4
    748c:	2301      	movs	r3, #1
    748e:	2200      	movs	r2, #0
    7490:	2900      	cmp	r1, #0
    7492:	d500      	bpl.n	7496 <__aeabi_idiv+0x16>
    7494:	4249      	negs	r1, r1
    7496:	2800      	cmp	r0, #0
    7498:	d500      	bpl.n	749c <__aeabi_idiv+0x1c>
    749a:	4240      	negs	r0, r0
    749c:	4288      	cmp	r0, r1
    749e:	d32c      	bcc.n	74fa <__aeabi_idiv+0x7a>
    74a0:	2401      	movs	r4, #1
    74a2:	0724      	lsls	r4, r4, #28
    74a4:	42a1      	cmp	r1, r4
    74a6:	d204      	bcs.n	74b2 <__aeabi_idiv+0x32>
    74a8:	4281      	cmp	r1, r0
    74aa:	d202      	bcs.n	74b2 <__aeabi_idiv+0x32>
    74ac:	0109      	lsls	r1, r1, #4
    74ae:	011b      	lsls	r3, r3, #4
    74b0:	e7f8      	b.n	74a4 <__aeabi_idiv+0x24>
    74b2:	00e4      	lsls	r4, r4, #3
    74b4:	42a1      	cmp	r1, r4
    74b6:	d204      	bcs.n	74c2 <__aeabi_idiv+0x42>
    74b8:	4281      	cmp	r1, r0
    74ba:	d202      	bcs.n	74c2 <__aeabi_idiv+0x42>
    74bc:	0049      	lsls	r1, r1, #1
    74be:	005b      	lsls	r3, r3, #1
    74c0:	e7f8      	b.n	74b4 <__aeabi_idiv+0x34>
    74c2:	4288      	cmp	r0, r1
    74c4:	d301      	bcc.n	74ca <__aeabi_idiv+0x4a>
    74c6:	1a40      	subs	r0, r0, r1
    74c8:	431a      	orrs	r2, r3
    74ca:	084c      	lsrs	r4, r1, #1
    74cc:	42a0      	cmp	r0, r4
    74ce:	d302      	bcc.n	74d6 <__aeabi_idiv+0x56>
    74d0:	1b00      	subs	r0, r0, r4
    74d2:	085c      	lsrs	r4, r3, #1
    74d4:	4322      	orrs	r2, r4
    74d6:	088c      	lsrs	r4, r1, #2
    74d8:	42a0      	cmp	r0, r4
    74da:	d302      	bcc.n	74e2 <__aeabi_idiv+0x62>
    74dc:	1b00      	subs	r0, r0, r4
    74de:	089c      	lsrs	r4, r3, #2
    74e0:	4322      	orrs	r2, r4
    74e2:	08cc      	lsrs	r4, r1, #3
    74e4:	42a0      	cmp	r0, r4
    74e6:	d302      	bcc.n	74ee <__aeabi_idiv+0x6e>
    74e8:	1b00      	subs	r0, r0, r4
    74ea:	08dc      	lsrs	r4, r3, #3
    74ec:	4322      	orrs	r2, r4
    74ee:	2800      	cmp	r0, #0
    74f0:	d003      	beq.n	74fa <__aeabi_idiv+0x7a>
    74f2:	091b      	lsrs	r3, r3, #4
    74f4:	d001      	beq.n	74fa <__aeabi_idiv+0x7a>
    74f6:	0909      	lsrs	r1, r1, #4
    74f8:	e7e3      	b.n	74c2 <__aeabi_idiv+0x42>
    74fa:	1c10      	adds	r0, r2, #0
    74fc:	4664      	mov	r4, ip
    74fe:	2c00      	cmp	r4, #0
    7500:	d500      	bpl.n	7504 <__aeabi_idiv+0x84>
    7502:	4240      	negs	r0, r0
    7504:	bc10      	pop	{r4}
    7506:	4770      	bx	lr
    7508:	b502      	push	{r1, lr}
    750a:	f000 f80b 	bl	7524 <__aeabi_idiv0>
    750e:	2000      	movs	r0, #0
    7510:	bc06      	pop	{r1, r2}
    7512:	4710      	bx	r2

00007514 <__aeabi_idivmod>:
    7514:	b503      	push	{r0, r1, lr}
    7516:	f7ff ffb3 	bl	7480 <__aeabi_idiv>
    751a:	bc0e      	pop	{r1, r2, r3}
    751c:	4342      	muls	r2, r0
    751e:	1a89      	subs	r1, r1, r2
    7520:	4718      	bx	r3
    7522:	46c0      	nop			; (mov r8, r8)

00007524 <__aeabi_idiv0>:
    7524:	4770      	bx	lr
    7526:	46c0      	nop			; (mov r8, r8)

00007528 <__aeabi_drsub>:
    7528:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    752c:	ea000000 	b	7534 <__adddf3>

00007530 <__aeabi_dsub>:
    7530:	e2222102 	eor	r2, r2, #-2147483648	; 0x80000000

00007534 <__adddf3>:
    7534:	e92d4030 	push	{r4, r5, lr}
    7538:	e1a04080 	lsl	r4, r0, #1
    753c:	e1a05082 	lsl	r5, r2, #1
    7540:	e1340005 	teq	r4, r5
    7544:	01310003 	teqeq	r1, r3
    7548:	1194c001 	orrsne	ip, r4, r1
    754c:	1195c003 	orrsne	ip, r5, r3
    7550:	11f0cac4 	mvnsne	ip, r4, asr #21
    7554:	11f0cac5 	mvnsne	ip, r5, asr #21
    7558:	0a00008c 	beq	7790 <__adddf3+0x25c>
    755c:	e1a04aa4 	lsr	r4, r4, #21
    7560:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    7564:	b2655000 	rsblt	r5, r5, #0
    7568:	da000006 	ble	7588 <__adddf3+0x54>
    756c:	e0844005 	add	r4, r4, r5
    7570:	e0213003 	eor	r3, r1, r3
    7574:	e0202002 	eor	r2, r0, r2
    7578:	e0231001 	eor	r1, r3, r1
    757c:	e0220000 	eor	r0, r2, r0
    7580:	e0213003 	eor	r3, r1, r3
    7584:	e0202002 	eor	r2, r0, r2
    7588:	e3550036 	cmp	r5, #54	; 0x36
    758c:	88bd4030 	pophi	{r4, r5, lr}
    7590:	812fff1e 	bxhi	lr
    7594:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    7598:	e1a00600 	lsl	r0, r0, #12
    759c:	e3a0c601 	mov	ip, #1048576	; 0x100000
    75a0:	e18c0620 	orr	r0, ip, r0, lsr #12
    75a4:	0a000001 	beq	75b0 <__adddf3+0x7c>
    75a8:	e2711000 	rsbs	r1, r1, #0
    75ac:	e2e00000 	rsc	r0, r0, #0
    75b0:	e3120102 	tst	r2, #-2147483648	; 0x80000000
    75b4:	e1a02602 	lsl	r2, r2, #12
    75b8:	e18c2622 	orr	r2, ip, r2, lsr #12
    75bc:	0a000001 	beq	75c8 <__adddf3+0x94>
    75c0:	e2733000 	rsbs	r3, r3, #0
    75c4:	e2e22000 	rsc	r2, r2, #0
    75c8:	e1340005 	teq	r4, r5
    75cc:	0a000069 	beq	7778 <__adddf3+0x244>
    75d0:	e2444001 	sub	r4, r4, #1
    75d4:	e275e020 	rsbs	lr, r5, #32
    75d8:	ba000005 	blt	75f4 <__adddf3+0xc0>
    75dc:	e1a0ce13 	lsl	ip, r3, lr
    75e0:	e0911533 	adds	r1, r1, r3, lsr r5
    75e4:	e2a00000 	adc	r0, r0, #0
    75e8:	e0911e12 	adds	r1, r1, r2, lsl lr
    75ec:	e0b00552 	adcs	r0, r0, r2, asr r5
    75f0:	ea000006 	b	7610 <__adddf3+0xdc>
    75f4:	e2455020 	sub	r5, r5, #32
    75f8:	e28ee020 	add	lr, lr, #32
    75fc:	e3530001 	cmp	r3, #1
    7600:	e1a0ce12 	lsl	ip, r2, lr
    7604:	238cc002 	orrcs	ip, ip, #2
    7608:	e0911552 	adds	r1, r1, r2, asr r5
    760c:	e0b00fc2 	adcs	r0, r0, r2, asr #31
    7610:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
    7614:	5a000002 	bpl	7624 <__adddf3+0xf0>
    7618:	e27cc000 	rsbs	ip, ip, #0
    761c:	e2f11000 	rscs	r1, r1, #0
    7620:	e2e00000 	rsc	r0, r0, #0
    7624:	e3500601 	cmp	r0, #1048576	; 0x100000
    7628:	3a00000f 	bcc	766c <__adddf3+0x138>
    762c:	e3500602 	cmp	r0, #2097152	; 0x200000
    7630:	3a000006 	bcc	7650 <__adddf3+0x11c>
    7634:	e1b000a0 	lsrs	r0, r0, #1
    7638:	e1b01061 	rrxs	r1, r1
    763c:	e1a0c06c 	rrx	ip, ip
    7640:	e2844001 	add	r4, r4, #1
    7644:	e1a02a84 	lsl	r2, r4, #21
    7648:	e3720501 	cmn	r2, #4194304	; 0x400000
    764c:	2a00006b 	bcs	7800 <__adddf3+0x2cc>
    7650:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    7654:	01b0c0a1 	lsrseq	ip, r1, #1
    7658:	e2b11000 	adcs	r1, r1, #0
    765c:	e0a00a04 	adc	r0, r0, r4, lsl #20
    7660:	e1800005 	orr	r0, r0, r5
    7664:	e8bd4030 	pop	{r4, r5, lr}
    7668:	e12fff1e 	bx	lr
    766c:	e1b0c08c 	lsls	ip, ip, #1
    7670:	e0b11001 	adcs	r1, r1, r1
    7674:	e0a00000 	adc	r0, r0, r0
    7678:	e3100601 	tst	r0, #1048576	; 0x100000
    767c:	e2444001 	sub	r4, r4, #1
    7680:	1afffff2 	bne	7650 <__adddf3+0x11c>
    7684:	e3300000 	teq	r0, #0
    7688:	13a03014 	movne	r3, #20
    768c:	03a03034 	moveq	r3, #52	; 0x34
    7690:	01a00001 	moveq	r0, r1
    7694:	03a01000 	moveq	r1, #0
    7698:	e1a02000 	mov	r2, r0
    769c:	e3520801 	cmp	r2, #65536	; 0x10000
    76a0:	21a02822 	lsrcs	r2, r2, #16
    76a4:	22433010 	subcs	r3, r3, #16
    76a8:	e3520c01 	cmp	r2, #256	; 0x100
    76ac:	21a02422 	lsrcs	r2, r2, #8
    76b0:	22433008 	subcs	r3, r3, #8
    76b4:	e3520010 	cmp	r2, #16
    76b8:	21a02222 	lsrcs	r2, r2, #4
    76bc:	22433004 	subcs	r3, r3, #4
    76c0:	e3520004 	cmp	r2, #4
    76c4:	22433002 	subcs	r3, r3, #2
    76c8:	304330a2 	subcc	r3, r3, r2, lsr #1
    76cc:	e04331a2 	sub	r3, r3, r2, lsr #3
    76d0:	e2532020 	subs	r2, r3, #32
    76d4:	aa000007 	bge	76f8 <__adddf3+0x1c4>
    76d8:	e292200c 	adds	r2, r2, #12
    76dc:	da000004 	ble	76f4 <__adddf3+0x1c0>
    76e0:	e282c014 	add	ip, r2, #20
    76e4:	e262200c 	rsb	r2, r2, #12
    76e8:	e1a01c10 	lsl	r1, r0, ip
    76ec:	e1a00230 	lsr	r0, r0, r2
    76f0:	ea000004 	b	7708 <__adddf3+0x1d4>
    76f4:	e2822014 	add	r2, r2, #20
    76f8:	d262c020 	rsble	ip, r2, #32
    76fc:	e1a00210 	lsl	r0, r0, r2
    7700:	d1800c31 	orrle	r0, r0, r1, lsr ip
    7704:	d1a01211 	lslle	r1, r1, r2
    7708:	e0544003 	subs	r4, r4, r3
    770c:	a0800a04 	addge	r0, r0, r4, lsl #20
    7710:	a1800005 	orrge	r0, r0, r5
    7714:	a8bd4030 	popge	{r4, r5, lr}
    7718:	a12fff1e 	bxge	lr
    771c:	e1e04004 	mvn	r4, r4
    7720:	e254401f 	subs	r4, r4, #31
    7724:	aa00000f 	bge	7768 <__adddf3+0x234>
    7728:	e294400c 	adds	r4, r4, #12
    772c:	ca000006 	bgt	774c <__adddf3+0x218>
    7730:	e2844014 	add	r4, r4, #20
    7734:	e2642020 	rsb	r2, r4, #32
    7738:	e1a01431 	lsr	r1, r1, r4
    773c:	e1811210 	orr	r1, r1, r0, lsl r2
    7740:	e1850430 	orr	r0, r5, r0, lsr r4
    7744:	e8bd4030 	pop	{r4, r5, lr}
    7748:	e12fff1e 	bx	lr
    774c:	e264400c 	rsb	r4, r4, #12
    7750:	e2642020 	rsb	r2, r4, #32
    7754:	e1a01231 	lsr	r1, r1, r2
    7758:	e1811410 	orr	r1, r1, r0, lsl r4
    775c:	e1a00005 	mov	r0, r5
    7760:	e8bd4030 	pop	{r4, r5, lr}
    7764:	e12fff1e 	bx	lr
    7768:	e1a01430 	lsr	r1, r0, r4
    776c:	e1a00005 	mov	r0, r5
    7770:	e8bd4030 	pop	{r4, r5, lr}
    7774:	e12fff1e 	bx	lr
    7778:	e3340000 	teq	r4, #0
    777c:	e2222601 	eor	r2, r2, #1048576	; 0x100000
    7780:	02200601 	eoreq	r0, r0, #1048576	; 0x100000
    7784:	02844001 	addeq	r4, r4, #1
    7788:	12455001 	subne	r5, r5, #1
    778c:	eaffff8f 	b	75d0 <__adddf3+0x9c>
    7790:	e1f0cac4 	mvns	ip, r4, asr #21
    7794:	11f0cac5 	mvnsne	ip, r5, asr #21
    7798:	0a00001d 	beq	7814 <__adddf3+0x2e0>
    779c:	e1340005 	teq	r4, r5
    77a0:	01310003 	teqeq	r1, r3
    77a4:	0a000004 	beq	77bc <__adddf3+0x288>
    77a8:	e3340000 	teq	r4, #0
    77ac:	01a00002 	moveq	r0, r2
    77b0:	01a01003 	moveq	r1, r3
    77b4:	e8bd4030 	pop	{r4, r5, lr}
    77b8:	e12fff1e 	bx	lr
    77bc:	e1300002 	teq	r0, r2
    77c0:	13a00000 	movne	r0, #0
    77c4:	13a01000 	movne	r1, #0
    77c8:	18bd4030 	popne	{r4, r5, lr}
    77cc:	112fff1e 	bxne	lr
    77d0:	e1b0caa4 	lsrs	ip, r4, #21
    77d4:	1a000004 	bne	77ec <__adddf3+0x2b8>
    77d8:	e1b01081 	lsls	r1, r1, #1
    77dc:	e0b00000 	adcs	r0, r0, r0
    77e0:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    77e4:	e8bd4030 	pop	{r4, r5, lr}
    77e8:	e12fff1e 	bx	lr
    77ec:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    77f0:	32800601 	addcc	r0, r0, #1048576	; 0x100000
    77f4:	38bd4030 	popcc	{r4, r5, lr}
    77f8:	312fff1e 	bxcc	lr
    77fc:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
    7800:	e385047f 	orr	r0, r5, #2130706432	; 0x7f000000
    7804:	e380060f 	orr	r0, r0, #15728640	; 0xf00000
    7808:	e3a01000 	mov	r1, #0
    780c:	e8bd4030 	pop	{r4, r5, lr}
    7810:	e12fff1e 	bx	lr
    7814:	e1f0cac4 	mvns	ip, r4, asr #21
    7818:	11a00002 	movne	r0, r2
    781c:	11a01003 	movne	r1, r3
    7820:	01f0cac5 	mvnseq	ip, r5, asr #21
    7824:	11a02000 	movne	r2, r0
    7828:	11a03001 	movne	r3, r1
    782c:	e1914600 	orrs	r4, r1, r0, lsl #12
    7830:	01935602 	orrseq	r5, r3, r2, lsl #12
    7834:	01300002 	teqeq	r0, r2
    7838:	13800702 	orrne	r0, r0, #524288	; 0x80000
    783c:	e8bd4030 	pop	{r4, r5, lr}
    7840:	e12fff1e 	bx	lr

00007844 <__aeabi_ui2d>:
    7844:	e3300000 	teq	r0, #0
    7848:	03a01000 	moveq	r1, #0
    784c:	012fff1e 	bxeq	lr
    7850:	e92d4030 	push	{r4, r5, lr}
    7854:	e3a04b01 	mov	r4, #1024	; 0x400
    7858:	e2844032 	add	r4, r4, #50	; 0x32
    785c:	e3a05000 	mov	r5, #0
    7860:	e1a01000 	mov	r1, r0
    7864:	e3a00000 	mov	r0, #0
    7868:	eaffff85 	b	7684 <__adddf3+0x150>

0000786c <__aeabi_i2d>:
    786c:	e3300000 	teq	r0, #0
    7870:	03a01000 	moveq	r1, #0
    7874:	012fff1e 	bxeq	lr
    7878:	e92d4030 	push	{r4, r5, lr}
    787c:	e3a04b01 	mov	r4, #1024	; 0x400
    7880:	e2844032 	add	r4, r4, #50	; 0x32
    7884:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    7888:	42600000 	rsbmi	r0, r0, #0
    788c:	e1a01000 	mov	r1, r0
    7890:	e3a00000 	mov	r0, #0
    7894:	eaffff7a 	b	7684 <__adddf3+0x150>

00007898 <__aeabi_f2d>:
    7898:	e1b02080 	lsls	r2, r0, #1
    789c:	e1a001c2 	asr	r0, r2, #3
    78a0:	e1a00060 	rrx	r0, r0
    78a4:	e1a01e02 	lsl	r1, r2, #28
    78a8:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    78ac:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    78b0:	1220030e 	eorne	r0, r0, #939524096	; 0x38000000
    78b4:	112fff1e 	bxne	lr
    78b8:	e3320000 	teq	r2, #0
    78bc:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    78c0:	012fff1e 	bxeq	lr
    78c4:	e92d4030 	push	{r4, r5, lr}
    78c8:	e3a04d0e 	mov	r4, #896	; 0x380
    78cc:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
    78d0:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    78d4:	eaffff6a 	b	7684 <__adddf3+0x150>

000078d8 <__aeabi_ul2d>:
    78d8:	e1902001 	orrs	r2, r0, r1
    78dc:	012fff1e 	bxeq	lr
    78e0:	e92d4030 	push	{r4, r5, lr}
    78e4:	e3a05000 	mov	r5, #0
    78e8:	ea000006 	b	7908 <__aeabi_l2d+0x1c>

000078ec <__aeabi_l2d>:
    78ec:	e1902001 	orrs	r2, r0, r1
    78f0:	012fff1e 	bxeq	lr
    78f4:	e92d4030 	push	{r4, r5, lr}
    78f8:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    78fc:	5a000001 	bpl	7908 <__aeabi_l2d+0x1c>
    7900:	e2700000 	rsbs	r0, r0, #0
    7904:	e2e11000 	rsc	r1, r1, #0
    7908:	e3a04b01 	mov	r4, #1024	; 0x400
    790c:	e2844032 	add	r4, r4, #50	; 0x32
    7910:	e1a0c000 	mov	ip, r0
    7914:	e1a00001 	mov	r0, r1
    7918:	e1a0100c 	mov	r1, ip
    791c:	e1b0cb20 	lsrs	ip, r0, #22
    7920:	0affff3f 	beq	7624 <__adddf3+0xf0>
    7924:	e3a02003 	mov	r2, #3
    7928:	e1b0c1ac 	lsrs	ip, ip, #3
    792c:	12822003 	addne	r2, r2, #3
    7930:	e1b0c1ac 	lsrs	ip, ip, #3
    7934:	12822003 	addne	r2, r2, #3
    7938:	e08221ac 	add	r2, r2, ip, lsr #3
    793c:	e2623020 	rsb	r3, r2, #32
    7940:	e1a0c311 	lsl	ip, r1, r3
    7944:	e1a01231 	lsr	r1, r1, r2
    7948:	e1811310 	orr	r1, r1, r0, lsl r3
    794c:	e1a00230 	lsr	r0, r0, r2
    7950:	e0844002 	add	r4, r4, r2
    7954:	eaffff32 	b	7624 <__adddf3+0xf0>

00007958 <__aeabi_dmul>:
    7958:	e92d4070 	push	{r4, r5, r6, lr}
    795c:	e3a0c0ff 	mov	ip, #255	; 0xff
    7960:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    7964:	e01c4a20 	ands	r4, ip, r0, lsr #20
    7968:	101c5a22 	andsne	r5, ip, r2, lsr #20
    796c:	1134000c 	teqne	r4, ip
    7970:	1135000c 	teqne	r5, ip
    7974:	0b000075 	bleq	7b50 <__aeabi_dmul+0x1f8>
    7978:	e0844005 	add	r4, r4, r5
    797c:	e0206002 	eor	r6, r0, r2
    7980:	e1c00a8c 	bic	r0, r0, ip, lsl #21
    7984:	e1c22a8c 	bic	r2, r2, ip, lsl #21
    7988:	e1915600 	orrs	r5, r1, r0, lsl #12
    798c:	11935602 	orrsne	r5, r3, r2, lsl #12
    7990:	e3800601 	orr	r0, r0, #1048576	; 0x100000
    7994:	e3822601 	orr	r2, r2, #1048576	; 0x100000
    7998:	0a00001d 	beq	7a14 <__aeabi_dmul+0xbc>
    799c:	e08ec391 	umull	ip, lr, r1, r3
    79a0:	e3a05000 	mov	r5, #0
    79a4:	e0a5e390 	umlal	lr, r5, r0, r3
    79a8:	e2063102 	and	r3, r6, #-2147483648	; 0x80000000
    79ac:	e0a5e291 	umlal	lr, r5, r1, r2
    79b0:	e3a06000 	mov	r6, #0
    79b4:	e0a65290 	umlal	r5, r6, r0, r2
    79b8:	e33c0000 	teq	ip, #0
    79bc:	138ee001 	orrne	lr, lr, #1
    79c0:	e24440ff 	sub	r4, r4, #255	; 0xff
    79c4:	e3560c02 	cmp	r6, #512	; 0x200
    79c8:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    79cc:	2a000002 	bcs	79dc <__aeabi_dmul+0x84>
    79d0:	e1b0e08e 	lsls	lr, lr, #1
    79d4:	e0b55005 	adcs	r5, r5, r5
    79d8:	e0a66006 	adc	r6, r6, r6
    79dc:	e1830586 	orr	r0, r3, r6, lsl #11
    79e0:	e1800aa5 	orr	r0, r0, r5, lsr #21
    79e4:	e1a01585 	lsl	r1, r5, #11
    79e8:	e1811aae 	orr	r1, r1, lr, lsr #21
    79ec:	e1a0e58e 	lsl	lr, lr, #11
    79f0:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    79f4:	835c0c07 	cmphi	ip, #1792	; 0x700
    79f8:	8a000011 	bhi	7a44 <__aeabi_dmul+0xec>
    79fc:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    7a00:	01b0e0a1 	lsrseq	lr, r1, #1
    7a04:	e2b11000 	adcs	r1, r1, #0
    7a08:	e0a00a04 	adc	r0, r0, r4, lsl #20
    7a0c:	e8bd4070 	pop	{r4, r5, r6, lr}
    7a10:	e12fff1e 	bx	lr
    7a14:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    7a18:	e1860000 	orr	r0, r6, r0
    7a1c:	e1811003 	orr	r1, r1, r3
    7a20:	e0200002 	eor	r0, r0, r2
    7a24:	e05440ac 	subs	r4, r4, ip, lsr #1
    7a28:	c074500c 	rsbsgt	r5, r4, ip
    7a2c:	c1800a04 	orrgt	r0, r0, r4, lsl #20
    7a30:	c8bd4070 	popgt	{r4, r5, r6, lr}
    7a34:	c12fff1e 	bxgt	lr
    7a38:	e3800601 	orr	r0, r0, #1048576	; 0x100000
    7a3c:	e3a0e000 	mov	lr, #0
    7a40:	e2544001 	subs	r4, r4, #1
    7a44:	ca00005d 	bgt	7bc0 <__aeabi_dmul+0x268>
    7a48:	e3740036 	cmn	r4, #54	; 0x36
    7a4c:	d3a01000 	movle	r1, #0
    7a50:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    7a54:	d8bd4070 	pople	{r4, r5, r6, lr}
    7a58:	d12fff1e 	bxle	lr
    7a5c:	e2644000 	rsb	r4, r4, #0
    7a60:	e2544020 	subs	r4, r4, #32
    7a64:	aa00001a 	bge	7ad4 <__aeabi_dmul+0x17c>
    7a68:	e294400c 	adds	r4, r4, #12
    7a6c:	ca00000c 	bgt	7aa4 <__aeabi_dmul+0x14c>
    7a70:	e2844014 	add	r4, r4, #20
    7a74:	e2645020 	rsb	r5, r4, #32
    7a78:	e1a03511 	lsl	r3, r1, r5
    7a7c:	e1a01431 	lsr	r1, r1, r4
    7a80:	e1811510 	orr	r1, r1, r0, lsl r5
    7a84:	e2002102 	and	r2, r0, #-2147483648	; 0x80000000
    7a88:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    7a8c:	e0911fa3 	adds	r1, r1, r3, lsr #31
    7a90:	e0a20430 	adc	r0, r2, r0, lsr r4
    7a94:	e19ee083 	orrs	lr, lr, r3, lsl #1
    7a98:	01c11fa3 	biceq	r1, r1, r3, lsr #31
    7a9c:	e8bd4070 	pop	{r4, r5, r6, lr}
    7aa0:	e12fff1e 	bx	lr
    7aa4:	e264400c 	rsb	r4, r4, #12
    7aa8:	e2645020 	rsb	r5, r4, #32
    7aac:	e1a03411 	lsl	r3, r1, r4
    7ab0:	e1a01531 	lsr	r1, r1, r5
    7ab4:	e1811410 	orr	r1, r1, r0, lsl r4
    7ab8:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    7abc:	e0911fa3 	adds	r1, r1, r3, lsr #31
    7ac0:	e2a00000 	adc	r0, r0, #0
    7ac4:	e19ee083 	orrs	lr, lr, r3, lsl #1
    7ac8:	01c11fa3 	biceq	r1, r1, r3, lsr #31
    7acc:	e8bd4070 	pop	{r4, r5, r6, lr}
    7ad0:	e12fff1e 	bx	lr
    7ad4:	e2645020 	rsb	r5, r4, #32
    7ad8:	e18ee511 	orr	lr, lr, r1, lsl r5
    7adc:	e1a03431 	lsr	r3, r1, r4
    7ae0:	e1833510 	orr	r3, r3, r0, lsl r5
    7ae4:	e1a01430 	lsr	r1, r0, r4
    7ae8:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    7aec:	e1c11430 	bic	r1, r1, r0, lsr r4
    7af0:	e0811fa3 	add	r1, r1, r3, lsr #31
    7af4:	e19ee083 	orrs	lr, lr, r3, lsl #1
    7af8:	01c11fa3 	biceq	r1, r1, r3, lsr #31
    7afc:	e8bd4070 	pop	{r4, r5, r6, lr}
    7b00:	e12fff1e 	bx	lr
    7b04:	e3340000 	teq	r4, #0
    7b08:	1a000008 	bne	7b30 <__aeabi_dmul+0x1d8>
    7b0c:	e2006102 	and	r6, r0, #-2147483648	; 0x80000000
    7b10:	e1b01081 	lsls	r1, r1, #1
    7b14:	e0a00000 	adc	r0, r0, r0
    7b18:	e3100601 	tst	r0, #1048576	; 0x100000
    7b1c:	02444001 	subeq	r4, r4, #1
    7b20:	0afffffa 	beq	7b10 <__aeabi_dmul+0x1b8>
    7b24:	e1800006 	orr	r0, r0, r6
    7b28:	e3350000 	teq	r5, #0
    7b2c:	11a0f00e 	movne	pc, lr
    7b30:	e2026102 	and	r6, r2, #-2147483648	; 0x80000000
    7b34:	e1b03083 	lsls	r3, r3, #1
    7b38:	e0a22002 	adc	r2, r2, r2
    7b3c:	e3120601 	tst	r2, #1048576	; 0x100000
    7b40:	02455001 	subeq	r5, r5, #1
    7b44:	0afffffa 	beq	7b34 <__aeabi_dmul+0x1dc>
    7b48:	e1822006 	orr	r2, r2, r6
    7b4c:	e1a0f00e 	mov	pc, lr
    7b50:	e134000c 	teq	r4, ip
    7b54:	e00c5a22 	and	r5, ip, r2, lsr #20
    7b58:	1135000c 	teqne	r5, ip
    7b5c:	0a000007 	beq	7b80 <__aeabi_dmul+0x228>
    7b60:	e1916080 	orrs	r6, r1, r0, lsl #1
    7b64:	11936082 	orrsne	r6, r3, r2, lsl #1
    7b68:	1affffe5 	bne	7b04 <__aeabi_dmul+0x1ac>
    7b6c:	e0200002 	eor	r0, r0, r2
    7b70:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    7b74:	e3a01000 	mov	r1, #0
    7b78:	e8bd4070 	pop	{r4, r5, r6, lr}
    7b7c:	e12fff1e 	bx	lr
    7b80:	e1916080 	orrs	r6, r1, r0, lsl #1
    7b84:	01a01003 	moveq	r1, r3
    7b88:	01a00002 	moveq	r0, r2
    7b8c:	11936082 	orrsne	r6, r3, r2, lsl #1
    7b90:	0a000010 	beq	7bd8 <__aeabi_dmul+0x280>
    7b94:	e134000c 	teq	r4, ip
    7b98:	1a000001 	bne	7ba4 <__aeabi_dmul+0x24c>
    7b9c:	e1916600 	orrs	r6, r1, r0, lsl #12
    7ba0:	1a00000c 	bne	7bd8 <__aeabi_dmul+0x280>
    7ba4:	e135000c 	teq	r5, ip
    7ba8:	1a000003 	bne	7bbc <__aeabi_dmul+0x264>
    7bac:	e1936602 	orrs	r6, r3, r2, lsl #12
    7bb0:	11a01003 	movne	r1, r3
    7bb4:	11a00002 	movne	r0, r2
    7bb8:	1a000006 	bne	7bd8 <__aeabi_dmul+0x280>
    7bbc:	e0200002 	eor	r0, r0, r2
    7bc0:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    7bc4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    7bc8:	e380060f 	orr	r0, r0, #15728640	; 0xf00000
    7bcc:	e3a01000 	mov	r1, #0
    7bd0:	e8bd4070 	pop	{r4, r5, r6, lr}
    7bd4:	e12fff1e 	bx	lr
    7bd8:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    7bdc:	e380073e 	orr	r0, r0, #16252928	; 0xf80000
    7be0:	e8bd4070 	pop	{r4, r5, r6, lr}
    7be4:	e12fff1e 	bx	lr

00007be8 <__aeabi_ddiv>:
    7be8:	e92d4070 	push	{r4, r5, r6, lr}
    7bec:	e3a0c0ff 	mov	ip, #255	; 0xff
    7bf0:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    7bf4:	e01c4a20 	ands	r4, ip, r0, lsr #20
    7bf8:	101c5a22 	andsne	r5, ip, r2, lsr #20
    7bfc:	1134000c 	teqne	r4, ip
    7c00:	1135000c 	teqne	r5, ip
    7c04:	0b00005e 	bleq	7d84 <__aeabi_ddiv+0x19c>
    7c08:	e0444005 	sub	r4, r4, r5
    7c0c:	e020e002 	eor	lr, r0, r2
    7c10:	e1935602 	orrs	r5, r3, r2, lsl #12
    7c14:	e1a00600 	lsl	r0, r0, #12
    7c18:	0a00004c 	beq	7d50 <__aeabi_ddiv+0x168>
    7c1c:	e1a02602 	lsl	r2, r2, #12
    7c20:	e3a05201 	mov	r5, #268435456	; 0x10000000
    7c24:	e1852222 	orr	r2, r5, r2, lsr #4
    7c28:	e1822c23 	orr	r2, r2, r3, lsr #24
    7c2c:	e1a03403 	lsl	r3, r3, #8
    7c30:	e1855220 	orr	r5, r5, r0, lsr #4
    7c34:	e1855c21 	orr	r5, r5, r1, lsr #24
    7c38:	e1a06401 	lsl	r6, r1, #8
    7c3c:	e20e0102 	and	r0, lr, #-2147483648	; 0x80000000
    7c40:	e1550002 	cmp	r5, r2
    7c44:	01560003 	cmpeq	r6, r3
    7c48:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    7c4c:	e2844c03 	add	r4, r4, #768	; 0x300
    7c50:	2a000001 	bcs	7c5c <__aeabi_ddiv+0x74>
    7c54:	e1b020a2 	lsrs	r2, r2, #1
    7c58:	e1a03063 	rrx	r3, r3
    7c5c:	e0566003 	subs	r6, r6, r3
    7c60:	e0c55002 	sbc	r5, r5, r2
    7c64:	e1b020a2 	lsrs	r2, r2, #1
    7c68:	e1a03063 	rrx	r3, r3
    7c6c:	e3a01601 	mov	r1, #1048576	; 0x100000
    7c70:	e3a0c702 	mov	ip, #524288	; 0x80000
    7c74:	e056e003 	subs	lr, r6, r3
    7c78:	e0d5e002 	sbcs	lr, r5, r2
    7c7c:	20466003 	subcs	r6, r6, r3
    7c80:	21a0500e 	movcs	r5, lr
    7c84:	2181100c 	orrcs	r1, r1, ip
    7c88:	e1b020a2 	lsrs	r2, r2, #1
    7c8c:	e1a03063 	rrx	r3, r3
    7c90:	e056e003 	subs	lr, r6, r3
    7c94:	e0d5e002 	sbcs	lr, r5, r2
    7c98:	20466003 	subcs	r6, r6, r3
    7c9c:	21a0500e 	movcs	r5, lr
    7ca0:	218110ac 	orrcs	r1, r1, ip, lsr #1
    7ca4:	e1b020a2 	lsrs	r2, r2, #1
    7ca8:	e1a03063 	rrx	r3, r3
    7cac:	e056e003 	subs	lr, r6, r3
    7cb0:	e0d5e002 	sbcs	lr, r5, r2
    7cb4:	20466003 	subcs	r6, r6, r3
    7cb8:	21a0500e 	movcs	r5, lr
    7cbc:	2181112c 	orrcs	r1, r1, ip, lsr #2
    7cc0:	e1b020a2 	lsrs	r2, r2, #1
    7cc4:	e1a03063 	rrx	r3, r3
    7cc8:	e056e003 	subs	lr, r6, r3
    7ccc:	e0d5e002 	sbcs	lr, r5, r2
    7cd0:	20466003 	subcs	r6, r6, r3
    7cd4:	21a0500e 	movcs	r5, lr
    7cd8:	218111ac 	orrcs	r1, r1, ip, lsr #3
    7cdc:	e195e006 	orrs	lr, r5, r6
    7ce0:	0a00000d 	beq	7d1c <__aeabi_ddiv+0x134>
    7ce4:	e1a05205 	lsl	r5, r5, #4
    7ce8:	e1855e26 	orr	r5, r5, r6, lsr #28
    7cec:	e1a06206 	lsl	r6, r6, #4
    7cf0:	e1a02182 	lsl	r2, r2, #3
    7cf4:	e1822ea3 	orr	r2, r2, r3, lsr #29
    7cf8:	e1a03183 	lsl	r3, r3, #3
    7cfc:	e1b0c22c 	lsrs	ip, ip, #4
    7d00:	1affffdb 	bne	7c74 <__aeabi_ddiv+0x8c>
    7d04:	e3100601 	tst	r0, #1048576	; 0x100000
    7d08:	1a000006 	bne	7d28 <__aeabi_ddiv+0x140>
    7d0c:	e1800001 	orr	r0, r0, r1
    7d10:	e3a01000 	mov	r1, #0
    7d14:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
    7d18:	eaffffd5 	b	7c74 <__aeabi_ddiv+0x8c>
    7d1c:	e3100601 	tst	r0, #1048576	; 0x100000
    7d20:	01800001 	orreq	r0, r0, r1
    7d24:	03a01000 	moveq	r1, #0
    7d28:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    7d2c:	835c0c07 	cmphi	ip, #1792	; 0x700
    7d30:	8affff43 	bhi	7a44 <__aeabi_dmul+0xec>
    7d34:	e055c002 	subs	ip, r5, r2
    7d38:	0056c003 	subseq	ip, r6, r3
    7d3c:	01b0c0a1 	lsrseq	ip, r1, #1
    7d40:	e2b11000 	adcs	r1, r1, #0
    7d44:	e0a00a04 	adc	r0, r0, r4, lsl #20
    7d48:	e8bd4070 	pop	{r4, r5, r6, lr}
    7d4c:	e12fff1e 	bx	lr
    7d50:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    7d54:	e18e0620 	orr	r0, lr, r0, lsr #12
    7d58:	e09440ac 	adds	r4, r4, ip, lsr #1
    7d5c:	c074500c 	rsbsgt	r5, r4, ip
    7d60:	c1800a04 	orrgt	r0, r0, r4, lsl #20
    7d64:	c8bd4070 	popgt	{r4, r5, r6, lr}
    7d68:	c12fff1e 	bxgt	lr
    7d6c:	e3800601 	orr	r0, r0, #1048576	; 0x100000
    7d70:	e3a0e000 	mov	lr, #0
    7d74:	e2544001 	subs	r4, r4, #1
    7d78:	eaffff31 	b	7a44 <__aeabi_dmul+0xec>
    7d7c:	e185e006 	orr	lr, r5, r6
    7d80:	eaffff2f 	b	7a44 <__aeabi_dmul+0xec>
    7d84:	e00c5a22 	and	r5, ip, r2, lsr #20
    7d88:	e134000c 	teq	r4, ip
    7d8c:	0135000c 	teqeq	r5, ip
    7d90:	0affff90 	beq	7bd8 <__aeabi_dmul+0x280>
    7d94:	e134000c 	teq	r4, ip
    7d98:	1a000006 	bne	7db8 <__aeabi_ddiv+0x1d0>
    7d9c:	e1914600 	orrs	r4, r1, r0, lsl #12
    7da0:	1affff8c 	bne	7bd8 <__aeabi_dmul+0x280>
    7da4:	e135000c 	teq	r5, ip
    7da8:	1affff83 	bne	7bbc <__aeabi_dmul+0x264>
    7dac:	e1a01003 	mov	r1, r3
    7db0:	e1a00002 	mov	r0, r2
    7db4:	eaffff87 	b	7bd8 <__aeabi_dmul+0x280>
    7db8:	e135000c 	teq	r5, ip
    7dbc:	1a000004 	bne	7dd4 <__aeabi_ddiv+0x1ec>
    7dc0:	e1935602 	orrs	r5, r3, r2, lsl #12
    7dc4:	0affff68 	beq	7b6c <__aeabi_dmul+0x214>
    7dc8:	e1a01003 	mov	r1, r3
    7dcc:	e1a00002 	mov	r0, r2
    7dd0:	eaffff80 	b	7bd8 <__aeabi_dmul+0x280>
    7dd4:	e1916080 	orrs	r6, r1, r0, lsl #1
    7dd8:	11936082 	orrsne	r6, r3, r2, lsl #1
    7ddc:	1affff48 	bne	7b04 <__aeabi_dmul+0x1ac>
    7de0:	e1914080 	orrs	r4, r1, r0, lsl #1
    7de4:	1affff74 	bne	7bbc <__aeabi_dmul+0x264>
    7de8:	e1935082 	orrs	r5, r3, r2, lsl #1
    7dec:	1affff5e 	bne	7b6c <__aeabi_dmul+0x214>
    7df0:	eaffff78 	b	7bd8 <__aeabi_dmul+0x280>
    7df4:	e1a0c00d 	.word	0xe1a0c00d
    7df8:	e92dd8f0 	.word	0xe92dd8f0
    7dfc:	e24cb004 	.word	0xe24cb004
    7e00:	e24dd014 	.word	0xe24dd014
    7e04:	e50b0020 	.word	0xe50b0020
    7e08:	e50b1024 	.word	0xe50b1024
    7e0c:	e50b2028 	.word	0xe50b2028
    7e10:	e50b302c 	.word	0xe50b302c
    7e14:	e51b3020 	.word	0xe51b3020
    7e18:	e50b3030 	.word	0xe50b3030
    7e1c:	e51b3030 	.word	0xe51b3030
    7e20:	e3530000 	.word	0xe3530000
    7e24:	0a000002 	.word	0x0a000002
    7e28:	e51b3030 	.word	0xe51b3030
    7e2c:	e3530001 	.word	0xe3530001
    7e30:	0a000220 	.word	0x0a000220
    7e34:	e51b3024 	.word	0xe51b3024
    7e38:	e5932000 	.word	0xe5932000
    7e3c:	e59f3bd8 	.word	0xe59f3bd8
    7e40:	e5832000 	.word	0xe5832000
    7e44:	e59f2bc8 	.word	0xe59f2bc8
    7e48:	e59f3c00 	.word	0xe59f3c00
    7e4c:	e5823000 	.word	0xe5823000
    7e50:	e59f3c00 	.word	0xe59f3c00
    7e54:	e5931000 	.word	0xe5931000
    7e58:	e59f2b08 	.word	0xe59f2b08
    7e5c:	e59f3b08 	.word	0xe59f3b08
    7e60:	e5823000 	.word	0xe5823000
    7e64:	e59f3afc 	.word	0xe59f3afc
    7e68:	e5933000 	.word	0xe5933000
    7e6c:	e5813000 	.word	0xe5813000
    7e70:	e5912000 	.word	0xe5912000
    7e74:	e59f3b9c 	.word	0xe59f3b9c
    7e78:	e5832000 	.word	0xe5832000
    7e7c:	e59f2be0 	.word	0xe59f2be0
    7e80:	e59f3bc8 	.word	0xe59f3bc8
    7e84:	e5823000 	.word	0xe5823000
    7e88:	e59f2ae0 	.word	0xe59f2ae0
    7e8c:	e59f3ae0 	.word	0xe59f3ae0
    7e90:	e5823000 	.word	0xe5823000
    7e94:	e59f2adc 	.word	0xe59f2adc
    7e98:	e59f3adc 	.word	0xe59f3adc
    7e9c:	e5823000 	.word	0xe5823000
    7ea0:	e59f2b78 	.word	0xe59f2b78
    7ea4:	e59f3ad4 	.word	0xe59f3ad4
    7ea8:	e5823000 	.word	0xe5823000
    7eac:	e59f3abc 	.word	0xe59f3abc
    7eb0:	e5932000 	.word	0xe5932000
    7eb4:	e59f3ab4 	.word	0xe59f3ab4
    7eb8:	e5933000 	.word	0xe5933000
    7ebc:	e1a00002 	.word	0xe1a00002
    7ec0:	e1a01003 	.word	0xe1a01003
    7ec4:	eb001530 	.word	0xeb001530
    7ec8:	e1a03000 	.word	0xe1a03000
    7ecc:	e1a02003 	.word	0xe1a02003
    7ed0:	e59f3b10 	.word	0xe59f3b10
    7ed4:	e5832000 	.word	0xe5832000
    7ed8:	e59f3a98 	.word	0xe59f3a98
    7edc:	e5932000 	.word	0xe5932000
    7ee0:	e59f3a90 	.word	0xe59f3a90
    7ee4:	e5933000 	.word	0xe5933000
    7ee8:	e1a00002 	.word	0xe1a00002
    7eec:	e1a01003 	.word	0xe1a01003
    7ef0:	eb001525 	.word	0xeb001525
    7ef4:	e1a03000 	.word	0xe1a03000
    7ef8:	e1a02003 	.word	0xe1a02003
    7efc:	e59f3aec 	.word	0xe59f3aec
    7f00:	e5832000 	.word	0xe5832000
    7f04:	e59f3adc 	.word	0xe59f3adc
    7f08:	e5932000 	.word	0xe5932000
    7f0c:	e59f3adc 	.word	0xe59f3adc
    7f10:	e5933000 	.word	0xe5933000
    7f14:	e1a00002 	.word	0xe1a00002
    7f18:	e1a01003 	.word	0xe1a01003
    7f1c:	eb001471 	.word	0xeb001471
    7f20:	e1a03000 	.word	0xe1a03000
    7f24:	e1a02003 	.word	0xe1a02003
    7f28:	e59f3acc 	.word	0xe59f3acc
    7f2c:	e5832000 	.word	0xe5832000
    7f30:	e59f3ab0 	.word	0xe59f3ab0
    7f34:	e5932000 	.word	0xe5932000
    7f38:	e59f3aa8 	.word	0xe59f3aa8
    7f3c:	e5933000 	.word	0xe5933000
    7f40:	e1a00002 	.word	0xe1a00002
    7f44:	e1a01003 	.word	0xe1a01003
    7f48:	eb00150f 	.word	0xeb00150f
    7f4c:	e1a03000 	.word	0xe1a03000
    7f50:	e1a02003 	.word	0xe1a02003
    7f54:	e59f3a7c 	.word	0xe59f3a7c
    7f58:	e5832000 	.word	0xe5832000
    7f5c:	e59f3a8c 	.word	0xe59f3a8c
    7f60:	e5932000 	.word	0xe5932000
    7f64:	e59f3a84 	.word	0xe59f3a84
    7f68:	e5933000 	.word	0xe5933000
    7f6c:	e1a00002 	.word	0xe1a00002
    7f70:	e1a01003 	.word	0xe1a01003
    7f74:	eb001504 	.word	0xeb001504
    7f78:	e1a03000 	.word	0xe1a03000
    7f7c:	e1a02003 	.word	0xe1a02003
    7f80:	e59f39fc 	.word	0xe59f39fc
    7f84:	e5832000 	.word	0xe5832000
    7f88:	e59f3a48 	.word	0xe59f3a48
    7f8c:	e5932000 	.word	0xe5932000
    7f90:	e59f39ec 	.word	0xe59f39ec
    7f94:	e5933000 	.word	0xe5933000
    7f98:	e1a00002 	.word	0xe1a00002
    7f9c:	e1a01003 	.word	0xe1a01003
    7fa0:	eb001450 	.word	0xeb001450
    7fa4:	e1a03000 	.word	0xe1a03000
    7fa8:	e1a02003 	.word	0xe1a02003
    7fac:	e59f3a28 	.word	0xe59f3a28
    7fb0:	e5832000 	.word	0xe5832000
    7fb4:	e59f29cc 	.word	0xe59f29cc
    7fb8:	e59f39cc 	.word	0xe59f39cc
    7fbc:	e5823000 	.word	0xe5823000
    7fc0:	e59f29c8 	.word	0xe59f29c8
    7fc4:	e59f39a0 	.word	0xe59f39a0
    7fc8:	e5823000 	.word	0xe5823000
    7fcc:	e59f2a9c 	.word	0xe59f2a9c
    7fd0:	e3a03001 	.word	0xe3a03001
    7fd4:	e5823000 	.word	0xe5823000
    7fd8:	ea00019d 	.word	0xea00019d
    7fdc:	e59f3a8c 	.word	0xe59f3a8c
    7fe0:	e5933000 	.word	0xe5933000
    7fe4:	e1a03103 	.word	0xe1a03103
    7fe8:	e1a02003 	.word	0xe1a02003
    7fec:	e59f399c 	.word	0xe59f399c
    7ff0:	e0825003 	.word	0xe0825003
    7ff4:	e59f3a74 	.word	0xe59f3a74
    7ff8:	e5933000 	.word	0xe5933000
    7ffc:	e1a03103 	.word	0xe1a03103
    8000:	e1a02003 	.word	0xe1a02003
    8004:	e59f3984 	.word	0xe59f3984
    8008:	e2433004 	.word	0xe2433004
    800c:	e0823003 	.word	0xe0823003
    8010:	e5934000 	.word	0xe5934000
    8014:	e59f3a54 	.word	0xe59f3a54
    8018:	e5933000 	.word	0xe5933000
    801c:	e1a03083 	.word	0xe1a03083
    8020:	e2433001 	.word	0xe2433001
    8024:	e1a00003 	.word	0xe1a00003
    8028:	eb0014a0 	.word	0xeb0014a0
    802c:	e1a03000 	.word	0xe1a03000
    8030:	e1a00004 	.word	0xe1a00004
    8034:	e1a01003 	.word	0xe1a01003
    8038:	eb0014d3 	.word	0xeb0014d3
    803c:	e1a03000 	.word	0xe1a03000
    8040:	e1a04003 	.word	0xe1a04003
    8044:	e59f3a24 	.word	0xe59f3a24
    8048:	e5933000 	.word	0xe5933000
    804c:	e1a00003 	.word	0xe1a00003
    8050:	eb001496 	.word	0xeb001496
    8054:	e1a03000 	.word	0xe1a03000
    8058:	e1a00004 	.word	0xe1a00004
    805c:	e1a01003 	.word	0xe1a01003
    8060:	eb00152f 	.word	0xeb00152f
    8064:	e1a03000 	.word	0xe1a03000
    8068:	e5853000 	.word	0xe5853000
    806c:	e59f2920 	.word	0xe59f2920
    8070:	e3a03002 	.word	0xe3a03002
    8074:	e5823000 	.word	0xe5823000
    8078:	e59f2a00 	.word	0xe59f2a00
    807c:	e3a03000 	.word	0xe3a03000
    8080:	e5823000 	.word	0xe5823000
    8084:	e59f290c 	.word	0xe59f290c
    8088:	e3a03001 	.word	0xe3a03001
    808c:	e5823000 	.word	0xe5823000
    8090:	e59f39d8 	.word	0xe59f39d8
    8094:	e5932000 	.word	0xe5932000
    8098:	e59f39e0 	.word	0xe59f39e0
    809c:	e5933000 	.word	0xe5933000
    80a0:	e0632002 	.word	0xe0632002
    80a4:	e59f38ec 	.word	0xe59f38ec
    80a8:	e5933000 	.word	0xe5933000
    80ac:	e0822003 	.word	0xe0822003
    80b0:	e59f38e0 	.word	0xe59f38e0
    80b4:	e5933000 	.word	0xe5933000
    80b8:	e1a00002 	.word	0xe1a00002
    80bc:	e1a01003 	.word	0xe1a01003
    80c0:	eb0015d0 	.word	0xeb0015d0
    80c4:	e1a03000 	.word	0xe1a03000
    80c8:	e1a02003 	.word	0xe1a02003
    80cc:	e59f38c8 	.word	0xe59f38c8
    80d0:	e5832000 	.word	0xe5832000
    80d4:	ea000142 	.word	0xea000142
    80d8:	e59f39a0 	.word	0xe59f39a0
    80dc:	e5934000 	.word	0xe5934000
    80e0:	e59f3988 	.word	0xe59f3988
    80e4:	e5935000 	.word	0xe5935000
    80e8:	e59f3980 	.word	0xe59f3980
    80ec:	e5933000 	.word	0xe5933000
    80f0:	e2432001 	.word	0xe2432001
    80f4:	e59f3974 	.word	0xe59f3974
    80f8:	e5933000 	.word	0xe5933000
    80fc:	e2433001 	.word	0xe2433001
    8100:	e0010293 	.word	0xe0010293
    8104:	e59f3974 	.word	0xe59f3974
    8108:	e5932000 	.word	0xe5932000
    810c:	e59f396c 	.word	0xe59f396c
    8110:	e5933000 	.word	0xe5933000
    8114:	e0030392 	.word	0xe0030392
    8118:	e0633001 	.word	0xe0633001
    811c:	e1a00003 	.word	0xe1a00003
    8120:	eb001462 	.word	0xeb001462
    8124:	e1a06000 	.word	0xe1a06000
    8128:	e59f3940 	.word	0xe59f3940
    812c:	e5933000 	.word	0xe5933000
    8130:	e1a03083 	.word	0xe1a03083
    8134:	e2432001 	.word	0xe2432001
    8138:	e59f3930 	.word	0xe59f3930
    813c:	e5933000 	.word	0xe5933000
    8140:	e1a03083 	.word	0xe1a03083
    8144:	e2433003 	.word	0xe2433003
    8148:	e0030392 	.word	0xe0030392
    814c:	e1a00003 	.word	0xe1a00003
    8150:	eb001456 	.word	0xeb001456
    8154:	e1a03000 	.word	0xe1a03000
    8158:	e1a00006 	.word	0xe1a00006
    815c:	e1a01003 	.word	0xe1a01003
    8160:	eb0014ef 	.word	0xeb0014ef
    8164:	e1a03000 	.word	0xe1a03000
    8168:	e1a02003 	.word	0xe1a02003
    816c:	e59f18ec 	.word	0xe59f18ec
    8170:	e1a03004 	.word	0xe1a03004
    8174:	e1a03083 	.word	0xe1a03083
    8178:	e0833004 	.word	0xe0833004
    817c:	e1a03103 	.word	0xe1a03103
    8180:	e0833004 	.word	0xe0833004
    8184:	e0833005 	.word	0xe0833005
    8188:	e7812103 	.word	0xe7812103
    818c:	e59f38ec 	.word	0xe59f38ec
    8190:	e5933000 	.word	0xe5933000
    8194:	e3530000 	.word	0xe3530000
    8198:	da0000af 	.word	0xda0000af
    819c:	e59f38cc 	.word	0xe59f38cc
    81a0:	e5932000 	.word	0xe5932000
    81a4:	e59f38d4 	.word	0xe59f38d4
    81a8:	e5933000 	.word	0xe5933000
    81ac:	e0633002 	.word	0xe0633002
    81b0:	e2832001 	.word	0xe2832001
    81b4:	e59f37d8 	.word	0xe59f37d8
    81b8:	e5933000 	.word	0xe5933000
    81bc:	e0030392 	.word	0xe0030392
    81c0:	e1a00003 	.word	0xe1a00003
    81c4:	eb001439 	.word	0xeb001439
    81c8:	e1a04000 	.word	0xe1a04000
    81cc:	e59f389c 	.word	0xe59f389c
    81d0:	e5932000 	.word	0xe5932000
    81d4:	e59f38a4 	.word	0xe59f38a4
    81d8:	e5933000 	.word	0xe5933000
    81dc:	e0823003 	.word	0xe0823003
    81e0:	e1a00003 	.word	0xe1a00003
    81e4:	eb001431 	.word	0xeb001431
    81e8:	e1a03000 	.word	0xe1a03000
    81ec:	e1a00004 	.word	0xe1a00004
    81f0:	e1a01003 	.word	0xe1a01003
    81f4:	eb0014ca 	.word	0xeb0014ca
    81f8:	e1a03000 	.word	0xe1a03000
    81fc:	e1a02003 	.word	0xe1a02003
    8200:	e59f3798 	.word	0xe59f3798
    8204:	e5832000 	.word	0xe5832000
    8208:	e59f3870 	.word	0xe59f3870
    820c:	e5932000 	.word	0xe5932000
    8210:	e1a03002 	.word	0xe1a03002
    8214:	e1a03083 	.word	0xe1a03083
    8218:	e0833002 	.word	0xe0833002
    821c:	e1a03103 	.word	0xe1a03103
    8220:	e0832002 	.word	0xe0832002
    8224:	e59f3844 	.word	0xe59f3844
    8228:	e5933000 	.word	0xe5933000
    822c:	e0823003 	.word	0xe0823003
    8230:	e1a02103 	.word	0xe1a02103
    8234:	e59f3754 	.word	0xe59f3754
    8238:	e0827003 	.word	0xe0827003
    823c:	e59f383c 	.word	0xe59f383c
    8240:	e5932000 	.word	0xe5932000
    8244:	e1a03002 	.word	0xe1a03002
    8248:	e1a03083 	.word	0xe1a03083
    824c:	e0833002 	.word	0xe0833002
    8250:	e1a03103 	.word	0xe1a03103
    8254:	e0832002 	.word	0xe0832002
    8258:	e59f3810 	.word	0xe59f3810
    825c:	e5933000 	.word	0xe5933000
    8260:	e0823003 	.word	0xe0823003
    8264:	e1a01103 	.word	0xe1a01103
    8268:	e3e02033 	.word	0xe3e02033
    826c:	e59f371c 	.word	0xe59f371c
    8270:	e0823003 	.word	0xe0823003
    8274:	e0813003 	.word	0xe0813003
    8278:	e5933000 	.word	0xe5933000
    827c:	e1a00003 	.word	0xe1a00003
    8280:	ebfffd84 	.word	0xebfffd84
    8284:	e1a05000 	.word	0xe1a05000
    8288:	e1a06001 	.word	0xe1a06001
    828c:	e59f370c 	.word	0xe59f370c
    8290:	e5933000 	.word	0xe5933000
    8294:	e1a00003 	.word	0xe1a00003
    8298:	ebfffd7e 	.word	0xebfffd7e
    829c:	e1a03000 	.word	0xe1a03000
    82a0:	e1a04001 	.word	0xe1a04001
    82a4:	e1a00003 	.word	0xe1a00003
    82a8:	e1a01004 	.word	0xe1a01004
    82ac:	eb00155e 	.word	0xeb00155e
    82b0:	e1a03000 	.word	0xe1a03000
    82b4:	e1a04001 	.word	0xe1a04001
    82b8:	e1a00005 	.word	0xe1a00005
    82bc:	e1a01006 	.word	0xe1a01006
    82c0:	e1a02003 	.word	0xe1a02003
    82c4:	e1a03004 	.word	0xe1a03004
    82c8:	ebfffda2 	.word	0xebfffda2
    82cc:	e1a03000 	.word	0xe1a03000
    82d0:	e1a04001 	.word	0xe1a04001
    82d4:	e1a00003 	.word	0xe1a00003
    82d8:	e1a01004 	.word	0xe1a01004
    82dc:	eb001357 	.word	0xeb001357
    82e0:	e1a03000 	.word	0xe1a03000
    82e4:	e5873000 	.word	0xe5873000
    82e8:	e59f26a4 	.word	0xe59f26a4
    82ec:	e3a03001 	.word	0xe3a03001
    82f0:	e5823000 	.word	0xe5823000
    82f4:	e59f3774 	.word	0xe59f3774
    82f8:	e5932000 	.word	0xe5932000
    82fc:	e1a03002 	.word	0xe1a03002
    8300:	e1a03083 	.word	0xe1a03083
    8304:	e0833002 	.word	0xe0833002
    8308:	e1a03103 	.word	0xe1a03103
    830c:	e0832002 	.word	0xe0832002
    8310:	e59f3768 	.word	0xe59f3768
    8314:	e5933000 	.word	0xe5933000
    8318:	e0823003 	.word	0xe0823003
    831c:	e2434001 	.word	0xe2434001
    8320:	e59f3758 	.word	0xe59f3758
    8324:	e5932000 	.word	0xe5932000
    8328:	e1a03002 	.word	0xe1a03002
    832c:	e1a03083 	.word	0xe1a03083
    8330:	e0833002 	.word	0xe0833002
    8334:	e1a03103 	.word	0xe1a03103
    8338:	e0832002 	.word	0xe0832002
    833c:	e59f372c 	.word	0xe59f372c
    8340:	e5933000 	.word	0xe5933000
    8344:	e0823003 	.word	0xe0823003
    8348:	e1a02103 	.word	0xe1a02103
    834c:	e59f363c 	.word	0xe59f363c
    8350:	e0823003 	.word	0xe0823003
    8354:	e5931000 	.word	0xe5931000
    8358:	e59f3710 	.word	0xe59f3710
    835c:	e5932000 	.word	0xe5932000
    8360:	e1a03002 	.word	0xe1a03002
    8364:	e1a03083 	.word	0xe1a03083
    8368:	e0833002 	.word	0xe0833002
    836c:	e1a03103 	.word	0xe1a03103
    8370:	e0832002 	.word	0xe0832002
    8374:	e59f3704 	.word	0xe59f3704
    8378:	e5933000 	.word	0xe5933000
    837c:	e0823003 	.word	0xe0823003
    8380:	e2432001 	.word	0xe2432001
    8384:	e59f36e0 	.word	0xe59f36e0
    8388:	e7933102 	.word	0xe7933102
    838c:	e1a00001 	.word	0xe1a00001
    8390:	e1a01003 	.word	0xe1a01003
    8394:	eb0013fc 	.word	0xeb0013fc
    8398:	e1a03000 	.word	0xe1a03000
    839c:	e1a02003 	.word	0xe1a02003
    83a0:	e59f36c4 	.word	0xe59f36c4
    83a4:	e7832104 	.word	0xe7832104
    83a8:	e59f36c0 	.word	0xe59f36c0
    83ac:	e5932000 	.word	0xe5932000
    83b0:	e1a03002 	.word	0xe1a03002
    83b4:	e1a03083 	.word	0xe1a03083
    83b8:	e0833002 	.word	0xe0833002
    83bc:	e1a03103 	.word	0xe1a03103
    83c0:	e0832002 	.word	0xe0832002
    83c4:	e59f36b4 	.word	0xe59f36b4
    83c8:	e5933000 	.word	0xe5933000
    83cc:	e0823003 	.word	0xe0823003
    83d0:	e2434001 	.word	0xe2434001
    83d4:	e59f36a4 	.word	0xe59f36a4
    83d8:	e5932000 	.word	0xe5932000
    83dc:	e1a03002 	.word	0xe1a03002
    83e0:	e1a03083 	.word	0xe1a03083
    83e4:	e0833002 	.word	0xe0833002
    83e8:	e1a03103 	.word	0xe1a03103
    83ec:	e0832002 	.word	0xe0832002
    83f0:	e59f3678 	.word	0xe59f3678
    83f4:	e5933000 	.word	0xe5933000
    83f8:	e0823003 	.word	0xe0823003
    83fc:	e1a02103 	.word	0xe1a02103
    8400:	e59f3588 	.word	0xe59f3588
    8404:	e0823003 	.word	0xe0823003
    8408:	e5931000 	.word	0xe5931000
    840c:	e59f365c 	.word	0xe59f365c
    8410:	e5932000 	.word	0xe5932000
    8414:	e1a03002 	.word	0xe1a03002
    8418:	e1a03083 	.word	0xe1a03083
    841c:	e0833002 	.word	0xe0833002
    8420:	e1a03103 	.word	0xe1a03103
    8424:	e0832002 	.word	0xe0832002
    8428:	e59f3650 	.word	0xe59f3650
    842c:	e5933000 	.word	0xe5933000
    8430:	e0823003 	.word	0xe0823003
    8434:	e2432001 	.word	0xe2432001
    8438:	e59f3634 	.word	0xe59f3634
    843c:	e7933102 	.word	0xe7933102
    8440:	e1a00001 	.word	0xe1a00001
    8444:	e1a01003 	.word	0xe1a01003
    8448:	eb0013cf 	.word	0xeb0013cf
    844c:	e1a03000 	.word	0xe1a03000
    8450:	e1a02003 	.word	0xe1a02003
    8454:	e59f3618 	.word	0xe59f3618
    8458:	e7832104 	.word	0xe7832104
    845c:	e59f361c 	.word	0xe59f361c
    8460:	e5932000 	.word	0xe5932000
    8464:	e1a03002 	.word	0xe1a03002
    8468:	e1a03083 	.word	0xe1a03083
    846c:	e0833002 	.word	0xe0833002
    8470:	e1a03103 	.word	0xe1a03103
    8474:	e0832002 	.word	0xe0832002
    8478:	e59f35f0 	.word	0xe59f35f0
    847c:	e5933000 	.word	0xe5933000
    8480:	e0824003 	.word	0xe0824003
    8484:	e59f35f4 	.word	0xe59f35f4
    8488:	e5932000 	.word	0xe5932000
    848c:	e1a03002 	.word	0xe1a03002
    8490:	e1a03083 	.word	0xe1a03083
    8494:	e0833002 	.word	0xe0833002
    8498:	e1a03103 	.word	0xe1a03103
    849c:	e0832002 	.word	0xe0832002
    84a0:	e59f35c8 	.word	0xe59f35c8
    84a4:	e5933000 	.word	0xe5933000
    84a8:	e0823003 	.word	0xe0823003
    84ac:	e1a02103 	.word	0xe1a02103
    84b0:	e59f34d8 	.word	0xe59f34d8
    84b4:	e0823003 	.word	0xe0823003
    84b8:	e5931000 	.word	0xe5931000
    84bc:	e59f35bc 	.word	0xe59f35bc
    84c0:	e5932000 	.word	0xe5932000
    84c4:	e1a03002 	.word	0xe1a03002
    84c8:	e1a03083 	.word	0xe1a03083
    84cc:	e0833002 	.word	0xe0833002
    84d0:	e1a03103 	.word	0xe1a03103
    84d4:	e0832002 	.word	0xe0832002
    84d8:	e59f3590 	.word	0xe59f3590
    84dc:	e5933000 	.word	0xe5933000
    84e0:	e0822003 	.word	0xe0822003
    84e4:	e59f3580 	.word	0xe59f3580
    84e8:	e7933102 	.word	0xe7933102
    84ec:	e1a00001 	.word	0xe1a00001
    84f0:	e1a01003 	.word	0xe1a01003
    84f4:	eb0013a4 	.word	0xeb0013a4
    84f8:	e1a03000 	.word	0xe1a03000
    84fc:	e1a02003 	.word	0xe1a02003
    8500:	e59f3564 	.word	0xe59f3564
    8504:	e7832104 	.word	0xe7832104
    8508:	e59f3570 	.word	0xe59f3570
    850c:	e5932000 	.word	0xe5932000
    8510:	e1a03002 	.word	0xe1a03002
    8514:	e1a03083 	.word	0xe1a03083
    8518:	e0833002 	.word	0xe0833002
    851c:	e1a03103 	.word	0xe1a03103
    8520:	e0832002 	.word	0xe0832002
    8524:	e59f3544 	.word	0xe59f3544
    8528:	e5933000 	.word	0xe5933000
    852c:	e0824003 	.word	0xe0824003
    8530:	e59f3548 	.word	0xe59f3548
    8534:	e5932000 	.word	0xe5932000
    8538:	e1a03002 	.word	0xe1a03002
    853c:	e1a03083 	.word	0xe1a03083
    8540:	e0833002 	.word	0xe0833002
    8544:	e1a03103 	.word	0xe1a03103
    8548:	e0832002 	.word	0xe0832002
    854c:	e59f351c 	.word	0xe59f351c
    8550:	e5933000 	.word	0xe5933000
    8554:	e0823003 	.word	0xe0823003
    8558:	e1a02103 	.word	0xe1a02103
    855c:	e59f342c 	.word	0xe59f342c
    8560:	e0823003 	.word	0xe0823003
    8564:	e5931000 	.word	0xe5931000
    8568:	e59f3510 	.word	0xe59f3510
    856c:	e5932000 	.word	0xe5932000
    8570:	e1a03002 	.word	0xe1a03002
    8574:	e1a03083 	.word	0xe1a03083
    8578:	e0833002 	.word	0xe0833002
    857c:	e1a03103 	.word	0xe1a03103
    8580:	e0832002 	.word	0xe0832002
    8584:	e59f34e4 	.word	0xe59f34e4
    8588:	e5933000 	.word	0xe5933000
    858c:	e0822003 	.word	0xe0822003
    8590:	e59f34dc 	.word	0xe59f34dc
    8594:	e7933102 	.word	0xe7933102
    8598:	e1a00001 	.word	0xe1a00001
    859c:	e1a01003 	.word	0xe1a01003
    85a0:	eb001379 	.word	0xeb001379
    85a4:	e1a03000 	.word	0xe1a03000
    85a8:	e1a02003 	.word	0xe1a02003
    85ac:	e59f34c0 	.word	0xe59f34c0
    85b0:	e7832104 	.word	0xe7832104
    85b4:	e59f33e0 	.word	0xe59f33e0
    85b8:	e5933000 	.word	0xe5933000
    85bc:	e2432001 	.word	0xe2432001
    85c0:	e59f33d4 	.word	0xe59f33d4
    85c4:	e5832000 	.word	0xe5832000
    85c8:	e59f34b0 	.word	0xe59f34b0
    85cc:	e5932000 	.word	0xe5932000
    85d0:	e59f33c0 	.word	0xe59f33c0
    85d4:	e5933000 	.word	0xe5933000
    85d8:	e0822003 	.word	0xe0822003
    85dc:	e59f349c 	.word	0xe59f349c
    85e0:	e5832000 	.word	0xe5832000
    85e4:	e59f33b0 	.word	0xe59f33b0
    85e8:	e5933000 	.word	0xe5933000
    85ec:	e3530000 	.word	0xe3530000
    85f0:	cafffeb8 	.word	0xcafffeb8
    85f4:	e59f3474 	.word	0xe59f3474
    85f8:	e5934000 	.word	0xe5934000
    85fc:	e59f346c 	.word	0xe59f346c
    8600:	e5933000 	.word	0xe5933000
    8604:	e2833001 	.word	0xe2833001
    8608:	e1a00003 	.word	0xe1a00003
    860c:	eb001327 	.word	0xeb001327
    8610:	e1a02000 	.word	0xe1a02000
    8614:	e59f3388 	.word	0xe59f3388
    8618:	e7832104 	.word	0xe7832104
    861c:	e59f344c 	.word	0xe59f344c
    8620:	e5934000 	.word	0xe5934000
    8624:	e59f3444 	.word	0xe59f3444
    8628:	e5933000 	.word	0xe5933000
    862c:	e1a00003 	.word	0xe1a00003
    8630:	eb00131e 	.word	0xeb00131e
    8634:	e1a02000 	.word	0xe1a02000
    8638:	e59f3368 	.word	0xe59f3368
    863c:	e7832104 	.word	0xe7832104
    8640:	e59f3428 	.word	0xe59f3428
    8644:	e5933000 	.word	0xe5933000
    8648:	e2832001 	.word	0xe2832001
    864c:	e59f341c 	.word	0xe59f341c
    8650:	e5832000 	.word	0xe5832000
    8654:	e59f3414 	.word	0xe59f3414
    8658:	e5932000 	.word	0xe5932000
    865c:	e59f33b8 	.word	0xe59f33b8
    8660:	e5933000 	.word	0xe5933000
    8664:	e1520003 	.word	0xe1520003
    8668:	dafffe5b 	.word	0xdafffe5b
    866c:	e59f23ec 	.word	0xe59f23ec
    8670:	e59f33d8 	.word	0xe59f33d8
    8674:	e5823038 	.word	0xe5823038
    8678:	e59f2390 	.word	0xe59f2390
    867c:	e59f3328 	.word	0xe59f3328
    8680:	e5823000 	.word	0xe5823000
    8684:	e59f3384 	.word	0xe59f3384
    8688:	e5932000 	.word	0xe5932000
    868c:	e59f33b8 	.word	0xe59f33b8
    8690:	e5832000 	.word	0xe5832000
    8694:	e59f33b0 	.word	0xe59f33b0
    8698:	e5932000 	.word	0xe5932000
    869c:	e59f33a4 	.word	0xe59f33a4
    86a0:	e5832000 	.word	0xe5832000
    86a4:	e59f339c 	.word	0xe59f339c
    86a8:	e5932000 	.word	0xe5932000
    86ac:	e59f33b4 	.word	0xe59f33b4
    86b0:	e5832000 	.word	0xe5832000
    86b4:	ea00082f 	.word	0xea00082f
    86b8:	e59f32c8 	.word	0xe59f32c8
    86bc:	e5933000 	.word	0xe5933000
    86c0:	e59b0008 	.word	0xe59b0008
    86c4:	e1a01003 	.word	0xe1a01003
    86c8:	eb001286 	.word	0xeb001286
    86cc:	e1a03000 	.word	0xe1a03000
    86d0:	e1a02003 	.word	0xe1a02003
    86d4:	e59f339c 	.word	0xe59f339c
    86d8:	e5832000 	.word	0xe5832000
    86dc:	e59f3384 	.word	0xe59f3384
    86e0:	e5933000 	.word	0xe5933000
    86e4:	e1a00003 	.word	0xe1a00003
    86e8:	e59f1360 	.word	0xe59f1360
    86ec:	eb0013e6 	.word	0xeb0013e6
    86f0:	e1a03000 	.word	0xe1a03000
    86f4:	e3530000 	.word	0xe3530000
    86f8:	ba000000 	.word	0xba000000
    86fc:	ea000008 	.word	0xea000008
    8700:	e59f3370 	.word	0xe59f3370
    8704:	e5933000 	.word	0xe5933000
    8708:	e1a00003 	.word	0xe1a00003
    870c:	e59f133c 	.word	0xe59f133c
    8710:	eb0013dd 	.word	0xeb0013dd
    8714:	e1a03000 	.word	0xe1a03000
    8718:	e3530000 	.word	0xe3530000
    871c:	ba000000 	.word	0xba000000
    8720:	eaffffff 	.word	0xeaffffff
    8724:	e59f2284 	.word	0xe59f2284
    8728:	e59f3284 	.word	0xe59f3284
    872c:	e5823000 	.word	0xe5823000
    8730:	e59f3278 	.word	0xe59f3278
    8734:	e5933000 	.word	0xe5933000
    8738:	e1a00003 	.word	0xe1a00003
    873c:	e59f1274 	.word	0xe59f1274
    8740:	eb001377 	.word	0xeb001377
    8744:	e1a03000 	.word	0xe1a03000
    8748:	e1a02003 	.word	0xe1a02003
    874c:	e59f3268 	.word	0xe59f3268
    8750:	e5832000 	.word	0xe5832000
    8754:	e59f3260 	.word	0xe59f3260
    8758:	e5933000 	.word	0xe5933000
    875c:	e1a00003 	.word	0xe1a00003
    8760:	e59b1004 	.word	0xe59b1004
    8764:	eb001308 	.word	0xeb001308
    8768:	e1a03000 	.word	0xe1a03000
    876c:	e1a02003 	.word	0xe1a02003
    8770:	e59f3248 	.word	0xe59f3248
    8774:	e5832000 	.word	0xe5832000
    8778:	e59f323c 	.word	0xe59f323c
    877c:	e5933000 	.word	0xe5933000
    8780:	e1a00003 	.word	0xe1a00003
    8784:	e51b102c 	.word	0xe51b102c
    8788:	eb0012ff 	.word	0xeb0012ff
    878c:	e1a03000 	.word	0xe1a03000
    8790:	e1a02003 	.word	0xe1a02003
    8794:	e59f3228 	.word	0xe59f3228
    8798:	e5832000 	.word	0xe5832000
    879c:	e59f321c 	.word	0xe59f321c
    87a0:	e5933000 	.word	0xe5933000
    87a4:	e1a00003 	.word	0xe1a00003
    87a8:	ebfffc3a 	.word	0xebfffc3a
    87ac:	e1a03000 	.word	0xe1a03000
    87b0:	e1a04001 	.word	0xe1a04001
    87b4:	e1a00003 	.word	0xe1a00003
    87b8:	e1a01004 	.word	0xe1a01004
    87bc:	eb00141d 	.word	0xeb00141d
    87c0:	e1a03000 	.word	0xe1a03000
    87c4:	e1a04001 	.word	0xe1a04001
    87c8:	e1a00003 	.word	0xe1a00003
    87cc:	e1a01004 	.word	0xe1a01004
    87d0:	eb00121a 	.word	0xeb00121a
    87d4:	e1a02000 	.word	0xe1a02000
    87d8:	e59f31e8 	.word	0xe59f31e8
    87dc:	e5832000 	.word	0xe5832000
    87e0:	e59f31dc 	.word	0xe59f31dc
    87e4:	e5933000 	.word	0xe5933000
    87e8:	e1a00003 	.word	0xe1a00003
    87ec:	ebfffc29 	.word	0xebfffc29
    87f0:	e1a03000 	.word	0xe1a03000
    87f4:	e1a04001 	.word	0xe1a04001
    87f8:	e1a00003 	.word	0xe1a00003
    87fc:	e1a01004 	.word	0xe1a01004
    8800:	eb00140c 	.word	0xeb00140c
    8804:	e1a03000 	.word	0xe1a03000
    8808:	e1a04001 	.word	0xe1a04001
    880c:	e1a00003 	.word	0xe1a00003
    8810:	e1a01004 	.word	0xe1a01004
    8814:	eb001209 	.word	0xeb001209
    8818:	e1a02000 	.word	0xe1a02000
    881c:	e59f31e0 	.word	0xe59f31e0
    8820:	e5832000 	.word	0xe5832000
    8824:	e59f3194 	.word	0xe59f3194
    8828:	e5933000 	.word	0xe5933000
    882c:	e1a00003 	.word	0xe1a00003
    8830:	ebfffc18 	.word	0xebfffc18
    8834:	e1a03000 	.word	0xe1a03000
    8838:	e1a04001 	.word	0xe1a04001
    883c:	e1a00003 	.word	0xe1a00003
    8840:	e1a01004 	.word	0xe1a01004
    8844:	eb0013f2 	.word	0xeb0013f2
    8848:	e1a03000 	.word	0xe1a03000
    884c:	e1a04001 	.word	0xe1a04001
    8850:	e1a00003 	.word	0xe1a00003
    8854:	e1a01004 	.word	0xe1a01004
    8858:	eb0011f8 	.word	0xeb0011f8
    885c:	e1a02000 	.word	0xe1a02000
    8860:	e59f3164 	.word	0xe59f3164
    8864:	e5832000 	.word	0xe5832000
    8868:	e59f3154 	.word	0xe59f3154
    886c:	e5933000 	.word	0xe5933000
    8870:	e1a00003 	.word	0xe1a00003
    8874:	ebfffc07 	.word	0xebfffc07
    8878:	e1a03000 	.word	0xe1a03000
    887c:	e1a04001 	.word	0xe1a04001
    8880:	e1a00003 	.word	0xe1a00003
    8884:	e1a01004 	.word	0xe1a01004
    8888:	eb0013e1 	.word	0xeb0013e1
    888c:	e1a03000 	.word	0xe1a03000
    8890:	e1a04001 	.word	0xe1a04001
    8894:	e1a00003 	.word	0xe1a00003
    8898:	e1a01004 	.word	0xe1a01004
    889c:	eb0011e7 	.word	0xeb0011e7
    88a0:	e1a02000 	.word	0xe1a02000
    88a4:	e59f3154 	.word	0xe59f3154
    88a8:	e5832000 	.word	0xe5832000
    88ac:	e59f3150 	.word	0xe59f3150
    88b0:	e5932000 	.word	0xe5932000
    88b4:	e59f3148 	.word	0xe59f3148
    88b8:	e5933000 	.word	0xe5933000
    88bc:	e1a00002 	.word	0xe1a00002
    88c0:	e1a01003 	.word	0xe1a01003
    88c4:	eb0012b0 	.word	0xeb0012b0
    88c8:	e1a03000 	.word	0xe1a03000
    88cc:	e1a02003 	.word	0xe1a02003
    88d0:	e59f311c 	.word	0xe59f311c
    88d4:	e5832000 	.word	0xe5832000
    88d8:	e59f3120 	.word	0xe59f3120
    88dc:	e5932000 	.word	0xe5932000
    88e0:	e59f3118 	.word	0xe59f3118
    88e4:	e5933000 	.word	0xe5933000
    88e8:	e1a00002 	.word	0xe1a00002
    88ec:	e1a01003 	.word	0xe1a01003
    88f0:	eb0012a5 	.word	0xeb0012a5
    88f4:	e1a03000 	.word	0xe1a03000
    88f8:	e1a02003 	.word	0xe1a02003
    88fc:	e59f30e8 	.word	0xe59f30e8
    8900:	e5832000 	.word	0xe5832000
    8904:	e59f30bc 	.word	0xe59f30bc
    8908:	e5932000 	.word	0xe5932000
    890c:	e59f3100 	.word	0xe59f3100
    8910:	e5832004 	.word	0xe5832004
    8914:	e59f30b0 	.word	0xe59f30b0
    8918:	e5932000 	.word	0xe5932000
    891c:	e59f30f4 	.word	0xe59f30f4
    8920:	e5832004 	.word	0xe5832004
    8924:	e59f311c 	.word	0xe59f311c
    8928:	e5933000 	.word	0xe5933000
    892c:	e51b0028 	.word	0xe51b0028
    8930:	e1a01003 	.word	0xe1a01003
    8934:	eb001356 	.word	0xeb001356
    8938:	e1a03000 	.word	0xe1a03000
    893c:	e3530000 	.word	0xe3530000
    8940:	1a00004f 	.word	0x1a00004f
    8944:	e59f3100 	.word	0xe59f3100
    8948:	e5933000 	.word	0xe5933000
    894c:	e51b002c 	.word	0xe51b002c
    8950:	e1a01003 	.word	0xe1a01003
    8954:	eb00134e 	.word	0xeb00134e
    8958:	e1a03000 	.word	0xe1a03000
    895c:	e3530000 	.word	0xe3530000
    8960:	1a000047 	.word	0x1a000047
    8964:	ea000196 	.word	0xea000196
    8968:	40000db0 	.word	0x40000db0
    896c:	3f800000 	.word	0x3f800000
    8970:	40000b00 	.word	0x40000b00
    8974:	45c75119 	.word	0x45c75119
    8978:	40000afc 	.word	0x40000afc
    897c:	45c6a605 	.word	0x45c6a605
    8980:	45c7199a 	.word	0x45c7199a
    8984:	40000ae4 	.word	0x40000ae4
    8988:	40000adc 	.word	0x40000adc
    898c:	44faa000 	.word	0x44faa000
    8990:	40000eb4 	.word	0x40000eb4
    8994:	400016b0 	.word	0x400016b0
    8998:	400016ac 	.word	0x400016ac
    899c:	400016a8 	.word	0x400016a8
    89a0:	40000ad8 	.word	0x40000ad8
    89a4:	40000e18 	.word	0x40000e18
    89a8:	40000de4 	.word	0x40000de4
    89ac:	c47a0000 	.word	0xc47a0000
    89b0:	40000b08 	.word	0x40000b08
    89b4:	40490fdb 	.word	0x40490fdb
    89b8:	43340000 	.word	0x43340000
    89bc:	40000b04 	.word	0x40000b04
    89c0:	40000ac0 	.word	0x40000ac0
    89c4:	40000abc 	.word	0x40000abc
    89c8:	40000ab8 	.word	0x40000ab8
    89cc:	40000ab0 	.word	0x40000ab0
    89d0:	40000a98 	.word	0x40000a98
    89d4:	40000a9c 	.word	0x40000a9c
    89d8:	40000ae8 	.word	0x40000ae8
    89dc:	40000ae0 	.word	0x40000ae0
    89e0:	40000aa0 	.word	0x40000aa0
    89e4:	40000a8c 	.word	0x40000a8c
    89e8:	40000af4 	.word	0x40000af4
    89ec:	40000aa4 	.word	0x40000aa4
    89f0:	40000af0 	.word	0x40000af0
    89f4:	40000aa8 	.word	0x40000aa8
    89f8:	40000a80 	.word	0x40000a80
    89fc:	40000aec 	.word	0x40000aec
    8a00:	40000aac 	.word	0x40000aac
    8a04:	40000ab4 	.word	0x40000ab4
    8a08:	40000a84 	.word	0x40000a84
    8a0c:	40000a7c 	.word	0x40000a7c
    8a10:	40000ac8 	.word	0x40000ac8
    8a14:	40000e80 	.word	0x40000e80
    8a18:	40000e4c 	.word	0x40000e4c
    8a1c:	400016bc 	.word	0x400016bc
    8a20:	40000af8 	.word	0x40000af8
    8a24:	40000a88 	.word	0x40000a88
    8a28:	40000a64 	.word	0x40000a64
    8a2c:	40000a68 	.word	0x40000a68
    8a30:	40000a6c 	.word	0x40000a6c
    8a34:	40000a70 	.word	0x40000a70
    8a38:	40000a78 	.word	0x40000a78
    8a3c:	40000a74 	.word	0x40000a74
    8a40:	400016a4 	.word	0x400016a4
    8a44:	400016a0 	.word	0x400016a0
    8a48:	40000ad0 	.word	0x40000ad0
    8a4c:	40000acc 	.word	0x40000acc
    8a50:	00000000 	.word	0x00000000
    8a54:	40000a94 	.word	0x40000a94
    8a58:	40000014 	.word	0x40000014
    8a5c:	40000a90 	.word	0x40000a90
    8a60:	40000b0c 	.word	0x40000b0c
    8a64:	40001158 	.word	0x40001158
    8a68:	40000ad4 	.word	0x40000ad4
    8a6c:	40000018 	.word	0x40000018
    8a70:	400016b8 	.word	0x400016b8
    8a74:	400002bc 	.word	0x400002bc
    8a78:	40000ac4 	.word	0x40000ac4
    8a7c:	400013fc 	.word	0x400013fc
    8a80:	400016b4 	.word	0x400016b4
    8a84:	e51f30a4 	.word	0xe51f30a4
    8a88:	e5934000 	.word	0xe5934000
    8a8c:	e51f3098 	.word	0xe51f3098
    8a90:	e5932000 	.word	0xe5932000
    8a94:	e51f30a8 	.word	0xe51f30a8
    8a98:	e5933000 	.word	0xe5933000
    8a9c:	e1a00002 	.word	0xe1a00002
    8aa0:	e1a01003 	.word	0xe1a01003
    8aa4:	eb001238 	.word	0xeb001238
    8aa8:	e1a03000 	.word	0xe1a03000
    8aac:	e1a00004 	.word	0xe1a00004
    8ab0:	e1a01003 	.word	0xe1a01003
    8ab4:	eb00118b 	.word	0xeb00118b
    8ab8:	e1a03000 	.word	0xe1a03000
    8abc:	e1a00003 	.word	0xe1a00003
    8ac0:	ebfffb74 	.word	0xebfffb74
    8ac4:	e1a03000 	.word	0xe1a03000
    8ac8:	e1a04001 	.word	0xe1a04001
    8acc:	e1a00003 	.word	0xe1a00003
    8ad0:	e1a01004 	.word	0xe1a01004
    8ad4:	eb001354 	.word	0xeb001354
    8ad8:	e1a03000 	.word	0xe1a03000
    8adc:	e1a04001 	.word	0xe1a04001
    8ae0:	e1a00003 	.word	0xe1a00003
    8ae4:	e1a01004 	.word	0xe1a01004
    8ae8:	eb001154 	.word	0xeb001154
    8aec:	e1a02000 	.word	0xe1a02000
    8af0:	e51f3118 	.word	0xe51f3118
    8af4:	e5832000 	.word	0xe5832000
    8af8:	e51f3120 	.word	0xe51f3120
    8afc:	e5933000 	.word	0xe5933000
    8b00:	e1a00003 	.word	0xe1a00003
    8b04:	e51b1028 	.word	0xe51b1028
    8b08:	eb00121f 	.word	0xeb00121f
    8b0c:	e1a03000 	.word	0xe1a03000
    8b10:	e1a02003 	.word	0xe1a02003
    8b14:	e51f3148 	.word	0xe51f3148
    8b18:	e5832000 	.word	0xe5832000
    8b1c:	e51f3150 	.word	0xe51f3150
    8b20:	e5932000 	.word	0xe5932000
    8b24:	e51f3144 	.word	0xe51f3144
    8b28:	e5933000 	.word	0xe5933000
    8b2c:	e1a00002 	.word	0xe1a00002
    8b30:	e1a01003 	.word	0xe1a01003
    8b34:	eb00116c 	.word	0xeb00116c
    8b38:	e1a03000 	.word	0xe1a03000
    8b3c:	e1a04003 	.word	0xe1a04003
    8b40:	e51f3174 	.word	0xe51f3174
    8b44:	e5932000 	.word	0xe5932000
    8b48:	e51f3160 	.word	0xe51f3160
    8b4c:	e5933000 	.word	0xe5933000
    8b50:	e1a00002 	.word	0xe1a00002
    8b54:	e1a01003 	.word	0xe1a01003
    8b58:	eb001163 	.word	0xeb001163
    8b5c:	e1a03000 	.word	0xe1a03000
    8b60:	e1a00004 	.word	0xe1a00004
    8b64:	e1a01003 	.word	0xe1a01003
    8b68:	eb00126d 	.word	0xeb00126d
    8b6c:	e1a03000 	.word	0xe1a03000
    8b70:	e1a05003 	.word	0xe1a05003
    8b74:	e51f31a8 	.word	0xe51f31a8
    8b78:	e5932000 	.word	0xe5932000
    8b7c:	e51f319c 	.word	0xe51f319c
    8b80:	e5933000 	.word	0xe5933000
    8b84:	e1a00002 	.word	0xe1a00002
    8b88:	e1a01003 	.word	0xe1a01003
    8b8c:	eb001156 	.word	0xeb001156
    8b90:	e1a03000 	.word	0xe1a03000
    8b94:	e1a04003 	.word	0xe1a04003
    8b98:	e51f31cc 	.word	0xe51f31cc
    8b9c:	e5932000 	.word	0xe5932000
    8ba0:	e51f31b8 	.word	0xe51f31b8
    8ba4:	e5933000 	.word	0xe5933000
    8ba8:	e1a00002 	.word	0xe1a00002
    8bac:	e1a01003 	.word	0xe1a01003
    8bb0:	eb00114d 	.word	0xeb00114d
    8bb4:	e1a03000 	.word	0xe1a03000
    8bb8:	e1a00004 	.word	0xe1a00004
    8bbc:	e1a01003 	.word	0xe1a01003
    8bc0:	eb001257 	.word	0xeb001257
    8bc4:	e1a03000 	.word	0xe1a03000
    8bc8:	e1a00005 	.word	0xe1a00005
    8bcc:	e1a01003 	.word	0xe1a01003
    8bd0:	eb0011ed 	.word	0xeb0011ed
    8bd4:	e1a03000 	.word	0xe1a03000
    8bd8:	e1a02003 	.word	0xe1a02003
    8bdc:	e51f3214 	.word	0xe51f3214
    8be0:	e5832000 	.word	0xe5832000
    8be4:	e51f31e8 	.word	0xe51f31e8
    8be8:	e5933000 	.word	0xe5933000
    8bec:	e1a00003 	.word	0xe1a00003
    8bf0:	ebfffb28 	.word	0xebfffb28
    8bf4:	e1a05000 	.word	0xe1a05000
    8bf8:	e1a06001 	.word	0xe1a06001
    8bfc:	e51f3234 	.word	0xe51f3234
    8c00:	e5932000 	.word	0xe5932000
    8c04:	e51f3220 	.word	0xe51f3220
    8c08:	e5933000 	.word	0xe5933000
    8c0c:	e1a00002 	.word	0xe1a00002
    8c10:	e1a01003 	.word	0xe1a01003
    8c14:	eb0011dc 	.word	0xeb0011dc
    8c18:	e1a03000 	.word	0xe1a03000
    8c1c:	e1a02003 	.word	0xe1a02003
    8c20:	e51f3234 	.word	0xe51f3234
    8c24:	e5933000 	.word	0xe5933000
    8c28:	e1a00002 	.word	0xe1a00002
    8c2c:	e1a01003 	.word	0xe1a01003
    8c30:	eb00112d 	.word	0xeb00112d
    8c34:	e1a03000 	.word	0xe1a03000
    8c38:	e1a00003 	.word	0xe1a00003
    8c3c:	ebfffb15 	.word	0xebfffb15
    8c40:	e1a03000 	.word	0xe1a03000
    8c44:	e1a04001 	.word	0xe1a04001
    8c48:	e1a00003 	.word	0xe1a00003
    8c4c:	e1a01004 	.word	0xe1a01004
    8c50:	eb0012f5 	.word	0xeb0012f5
    8c54:	e1a03000 	.word	0xe1a03000
    8c58:	e1a04001 	.word	0xe1a04001
    8c5c:	e1a00005 	.word	0xe1a00005
    8c60:	e1a01006 	.word	0xe1a01006
    8c64:	e1a02003 	.word	0xe1a02003
    8c68:	e1a03004 	.word	0xe1a03004
    8c6c:	ebfffbdd 	.word	0xebfffbdd
    8c70:	e1a03000 	.word	0xe1a03000
    8c74:	e1a04001 	.word	0xe1a04001
    8c78:	e1a00003 	.word	0xe1a00003
    8c7c:	e1a01004 	.word	0xe1a01004
    8c80:	eb0010ee 	.word	0xeb0010ee
    8c84:	e1a02000 	.word	0xe1a02000
    8c88:	e51f323c 	.word	0xe51f323c
    8c8c:	e5832000 	.word	0xe5832000
    8c90:	e51f3244 	.word	0xe51f3244
    8c94:	e5932000 	.word	0xe5932000
    8c98:	e51f324c 	.word	0xe51f324c
    8c9c:	e5933000 	.word	0xe5933000
    8ca0:	e1a00002 	.word	0xe1a00002
    8ca4:	e1a01003 	.word	0xe1a01003
    8ca8:	eb0011b7 	.word	0xeb0011b7
    8cac:	e1a03000 	.word	0xe1a03000
    8cb0:	e1a00003 	.word	0xe1a00003
    8cb4:	ebfffaf7 	.word	0xebfffaf7
    8cb8:	e1a03000 	.word	0xe1a03000
    8cbc:	e1a04001 	.word	0xe1a04001
    8cc0:	e3a005ff 	.word	0xe3a005ff
    8cc4:	e2800603 	.word	0xe2800603
    8cc8:	e3a01000 	.word	0xe3a01000
    8ccc:	e1a02003 	.word	0xe1a02003
    8cd0:	e1a03004 	.word	0xe1a03004
    8cd4:	ebfffa15 	.word	0xebfffa15
    8cd8:	e1a03000 	.word	0xe1a03000
    8cdc:	e1a04001 	.word	0xe1a04001
    8ce0:	e1a00003 	.word	0xe1a00003
    8ce4:	e1a01004 	.word	0xe1a01004
    8ce8:	eb0012cf 	.word	0xeb0012cf
    8cec:	e1a03000 	.word	0xe1a03000
    8cf0:	e1a04001 	.word	0xe1a04001
    8cf4:	e1a00003 	.word	0xe1a00003
    8cf8:	e1a01004 	.word	0xe1a01004
    8cfc:	eb0010cf 	.word	0xeb0010cf
    8d00:	e1a02000 	.word	0xe1a02000
    8d04:	e51f32b0 	.word	0xe51f32b0
    8d08:	e5832000 	.word	0xe5832000
    8d0c:	e51b0028 	.word	0xe51b0028
    8d10:	e51b1028 	.word	0xe51b1028
    8d14:	eb00119c 	.word	0xeb00119c
    8d18:	e1a03000 	.word	0xe1a03000
    8d1c:	e1a00003 	.word	0xe1a00003
    8d20:	ebfffadc 	.word	0xebfffadc
    8d24:	e1a05000 	.word	0xe1a05000
    8d28:	e1a06001 	.word	0xe1a06001
    8d2c:	e51f3360 	.word	0xe51f3360
    8d30:	e5933000 	.word	0xe5933000
    8d34:	e1a00003 	.word	0xe1a00003
    8d38:	ebfffad6 	.word	0xebfffad6
    8d3c:	e1a03000 	.word	0xe1a03000
    8d40:	e1a04001 	.word	0xe1a04001
    8d44:	e1a00003 	.word	0xe1a00003
    8d48:	e1a01004 	.word	0xe1a01004
    8d4c:	e1a02003 	.word	0xe1a02003
    8d50:	e1a03004 	.word	0xe1a03004
    8d54:	ebfff9f6 	.word	0xebfff9f6
    8d58:	e1a03000 	.word	0xe1a03000
    8d5c:	e1a04001 	.word	0xe1a04001
    8d60:	e1a00005 	.word	0xe1a00005
    8d64:	e1a01006 	.word	0xe1a01006
    8d68:	e1a02003 	.word	0xe1a02003
    8d6c:	e1a03004 	.word	0xe1a03004
    8d70:	ebfff9ef 	.word	0xebfff9ef
    8d74:	e1a03000 	.word	0xe1a03000
    8d78:	e1a04001 	.word	0xe1a04001
    8d7c:	e1a05003 	.word	0xe1a05003
    8d80:	e1a06004 	.word	0xe1a06004
    8d84:	e51f33b4 	.word	0xe51f33b4
    8d88:	e5934000 	.word	0xe5934000
    8d8c:	e51f33b8 	.word	0xe51f33b8
    8d90:	e5932000 	.word	0xe5932000
    8d94:	e51f33a8 	.word	0xe51f33a8
    8d98:	e5933000 	.word	0xe5933000
    8d9c:	e1a00002 	.word	0xe1a00002
    8da0:	e1a01003 	.word	0xe1a01003
    8da4:	eb001178 	.word	0xeb001178
    8da8:	e1a03000 	.word	0xe1a03000
    8dac:	e1a00004 	.word	0xe1a00004
    8db0:	e1a01003 	.word	0xe1a01003
    8db4:	eb0010cb 	.word	0xeb0010cb
    8db8:	e1a03000 	.word	0xe1a03000
    8dbc:	e1a04003 	.word	0xe1a04003
    8dc0:	e51f33e8 	.word	0xe51f33e8
    8dc4:	e5932000 	.word	0xe5932000
    8dc8:	e51f33f0 	.word	0xe51f33f0
    8dcc:	e5933000 	.word	0xe5933000
    8dd0:	e1a00002 	.word	0xe1a00002
    8dd4:	e1a01003 	.word	0xe1a01003
    8dd8:	eb00116b 	.word	0xeb00116b
    8ddc:	e1a03000 	.word	0xe1a03000
    8de0:	e1a00004 	.word	0xe1a00004
    8de4:	e1a01003 	.word	0xe1a01003
    8de8:	eb0011cd 	.word	0xeb0011cd
    8dec:	e1a03000 	.word	0xe1a03000
    8df0:	e1a00003 	.word	0xe1a00003
    8df4:	ebfffaa7 	.word	0xebfffaa7
    8df8:	e1a03000 	.word	0xe1a03000
    8dfc:	e1a04001 	.word	0xe1a04001
    8e00:	e1a00005 	.word	0xe1a00005
    8e04:	e1a01006 	.word	0xe1a01006
    8e08:	e1a02003 	.word	0xe1a02003
    8e0c:	e1a03004 	.word	0xe1a03004
    8e10:	ebfff9c7 	.word	0xebfff9c7
    8e14:	e1a03000 	.word	0xe1a03000
    8e18:	e1a04001 	.word	0xe1a04001
    8e1c:	e1a00003 	.word	0xe1a00003
    8e20:	e1a01004 	.word	0xe1a01004
    8e24:	eb001085 	.word	0xeb001085
    8e28:	e1a02000 	.word	0xe1a02000
    8e2c:	e51f3450 	.word	0xe51f3450
    8e30:	e5832000 	.word	0xe5832000
    8e34:	e51f3458 	.word	0xe51f3458
    8e38:	e5933000 	.word	0xe5933000
    8e3c:	e1a00003 	.word	0xe1a00003
    8e40:	ebfffa94 	.word	0xebfffa94
    8e44:	e1a03000 	.word	0xe1a03000
    8e48:	e1a04001 	.word	0xe1a04001
    8e4c:	e1a00003 	.word	0xe1a00003
    8e50:	e1a01004 	.word	0xe1a01004
    8e54:	eb001274 	.word	0xeb001274
    8e58:	e1a03000 	.word	0xe1a03000
    8e5c:	e1a04001 	.word	0xe1a04001
    8e60:	e1a00003 	.word	0xe1a00003
    8e64:	e1a01004 	.word	0xe1a01004
    8e68:	eb001074 	.word	0xeb001074
    8e6c:	e1a02000 	.word	0xe1a02000
    8e70:	e51f3454 	.word	0xe51f3454
    8e74:	e5832000 	.word	0xe5832000
    8e78:	e51f3498 	.word	0xe51f3498
    8e7c:	e5932000 	.word	0xe5932000
    8e80:	e51f349c 	.word	0xe51f349c
    8e84:	e5933000 	.word	0xe5933000
    8e88:	e1a00002 	.word	0xe1a00002
    8e8c:	e1a01003 	.word	0xe1a01003
    8e90:	eb00113d 	.word	0xeb00113d
    8e94:	e1a03000 	.word	0xe1a03000
    8e98:	e1a04003 	.word	0xe1a04003
    8e9c:	e51f34b4 	.word	0xe51f34b4
    8ea0:	e5932000 	.word	0xe5932000
    8ea4:	e51f34b8 	.word	0xe51f34b8
    8ea8:	e5933000 	.word	0xe5933000
    8eac:	e1a00002 	.word	0xe1a00002
    8eb0:	e1a01003 	.word	0xe1a01003
    8eb4:	eb001134 	.word	0xeb001134
    8eb8:	e1a03000 	.word	0xe1a03000
    8ebc:	e1a00004 	.word	0xe1a00004
    8ec0:	e1a01003 	.word	0xe1a01003
    8ec4:	eb001088 	.word	0xeb001088
    8ec8:	e1a03000 	.word	0xe1a03000
    8ecc:	e1a00003 	.word	0xe1a00003
    8ed0:	ebfffa70 	.word	0xebfffa70
    8ed4:	e1a03000 	.word	0xe1a03000
    8ed8:	e1a04001 	.word	0xe1a04001
    8edc:	e1a00003 	.word	0xe1a00003
    8ee0:	e1a01004 	.word	0xe1a01004
    8ee4:	eb001250 	.word	0xeb001250
    8ee8:	e1a03000 	.word	0xe1a03000
    8eec:	e1a04001 	.word	0xe1a04001
    8ef0:	e1a00003 	.word	0xe1a00003
    8ef4:	e1a01004 	.word	0xe1a01004
    8ef8:	eb001050 	.word	0xeb001050
    8efc:	e1a02000 	.word	0xe1a02000
    8f00:	e51f3500 	.word	0xe51f3500
    8f04:	e5832000 	.word	0xe5832000
    8f08:	e51f3508 	.word	0xe51f3508
    8f0c:	e5933000 	.word	0xe5933000
    8f10:	e1a00003 	.word	0xe1a00003
    8f14:	e51b1028 	.word	0xe51b1028
    8f18:	eb001073 	.word	0xeb001073
    8f1c:	e1a03000 	.word	0xe1a03000
    8f20:	e1a02003 	.word	0xe1a02003
    8f24:	e51f3508 	.word	0xe51f3508
    8f28:	e5933000 	.word	0xe5933000
    8f2c:	e1a00002 	.word	0xe1a00002
    8f30:	e1a01003 	.word	0xe1a01003
    8f34:	eb00117a 	.word	0xeb00117a
    8f38:	e1a03000 	.word	0xe1a03000
    8f3c:	e1a02003 	.word	0xe1a02003
    8f40:	e51f3550 	.word	0xe51f3550
    8f44:	e5832000 	.word	0xe5832000
    8f48:	e51f3554 	.word	0xe51f3554
    8f4c:	e5932000 	.word	0xe5932000
    8f50:	e51f3558 	.word	0xe51f3558
    8f54:	e5933000 	.word	0xe5933000
    8f58:	e1a00002 	.word	0xe1a00002
    8f5c:	e1a01003 	.word	0xe1a01003
    8f60:	eb001109 	.word	0xeb001109
    8f64:	e1a03000 	.word	0xe1a03000
    8f68:	e1a02003 	.word	0xe1a02003
    8f6c:	e51f3570 	.word	0xe51f3570
    8f70:	e5933000 	.word	0xe5933000
    8f74:	e1a00002 	.word	0xe1a00002
    8f78:	e1a01003 	.word	0xe1a01003
    8f7c:	eb001102 	.word	0xeb001102
    8f80:	e1a03000 	.word	0xe1a03000
    8f84:	e1a04003 	.word	0xe1a04003
    8f88:	e51f356c 	.word	0xe51f356c
    8f8c:	e5932000 	.word	0xe5932000
    8f90:	e51f3590 	.word	0xe51f3590
    8f94:	e5933000 	.word	0xe5933000
    8f98:	e1a00002 	.word	0xe1a00002
    8f9c:	e1a01003 	.word	0xe1a01003
    8fa0:	eb0010f9 	.word	0xeb0010f9
    8fa4:	e1a03000 	.word	0xe1a03000
    8fa8:	e1a00004 	.word	0xe1a00004
    8fac:	e1a01003 	.word	0xe1a01003
    8fb0:	eb00115b 	.word	0xeb00115b
    8fb4:	e1a03000 	.word	0xe1a03000
    8fb8:	e1a02003 	.word	0xe1a02003
    8fbc:	e51f35b8 	.word	0xe51f35b8
    8fc0:	e5832000 	.word	0xe5832000
    8fc4:	e51f35bc 	.word	0xe51f35bc
    8fc8:	e5933000 	.word	0xe5933000
    8fcc:	e59b0004 	.word	0xe59b0004
    8fd0:	e1a01003 	.word	0xe1a01003
    8fd4:	eb0011ae 	.word	0xeb0011ae
    8fd8:	e1a03000 	.word	0xe1a03000
    8fdc:	e3530000 	.word	0xe3530000
    8fe0:	1a000000 	.word	0x1a000000
    8fe4:	ea00004e 	.word	0xea00004e
    8fe8:	e51f2570 	.word	0xe51f2570
    8fec:	e3a03002 	.word	0xe3a03002
    8ff0:	e5823000 	.word	0xe5823000
    8ff4:	ea000044 	.word	0xea000044
    8ff8:	e51f3580 	.word	0xe51f3580
    8ffc:	e5934000 	.word	0xe5934000
    9000:	e51f35f4 	.word	0xe51f35f4
    9004:	e5931004 	.word	0xe5931004
    9008:	e51f3590 	.word	0xe51f3590
    900c:	e5933000 	.word	0xe5933000
    9010:	e2432001 	.word	0xe2432001
    9014:	e51f3604 	.word	0xe51f3604
    9018:	e7933102 	.word	0xe7933102
    901c:	e1a00001 	.word	0xe1a00001
    9020:	e1a01003 	.word	0xe1a01003
    9024:	eb0010d8 	.word	0xeb0010d8
    9028:	e1a03000 	.word	0xe1a03000
    902c:	e1a05003 	.word	0xe1a05003
    9030:	e51f3620 	.word	0xe51f3620
    9034:	e5931004 	.word	0xe5931004
    9038:	e51f35c0 	.word	0xe51f35c0
    903c:	e5933000 	.word	0xe5933000
    9040:	e2432001 	.word	0xe2432001
    9044:	e51f3638 	.word	0xe51f3638
    9048:	e7933102 	.word	0xe7933102
    904c:	e1a00001 	.word	0xe1a00001
    9050:	e1a01003 	.word	0xe1a01003
    9054:	eb0010cc 	.word	0xeb0010cc
    9058:	e1a03000 	.word	0xe1a03000
    905c:	e1a00005 	.word	0xe1a00005
    9060:	e1a01003 	.word	0xe1a01003
    9064:	eb001020 	.word	0xeb001020
    9068:	e1a03000 	.word	0xe1a03000
    906c:	e1a02003 	.word	0xe1a02003
    9070:	e51f3664 	.word	0xe51f3664
    9074:	e7832104 	.word	0xe7832104
    9078:	e51f3600 	.word	0xe51f3600
    907c:	e5934000 	.word	0xe5934000
    9080:	e51f3670 	.word	0xe51f3670
    9084:	e5931004 	.word	0xe5931004
    9088:	e51f3610 	.word	0xe51f3610
    908c:	e5933000 	.word	0xe5933000
    9090:	e2432001 	.word	0xe2432001
    9094:	e51f3684 	.word	0xe51f3684
    9098:	e7933102 	.word	0xe7933102
    909c:	e1a00001 	.word	0xe1a00001
    90a0:	e1a01003 	.word	0xe1a01003
    90a4:	eb0010b8 	.word	0xeb0010b8
    90a8:	e1a03000 	.word	0xe1a03000
    90ac:	e1a05003 	.word	0xe1a05003
    90b0:	e51f36a4 	.word	0xe51f36a4
    90b4:	e5931004 	.word	0xe5931004
    90b8:	e51f3640 	.word	0xe51f3640
    90bc:	e5933000 	.word	0xe5933000
    90c0:	e2432001 	.word	0xe2432001
    90c4:	e51f36b8 	.word	0xe51f36b8
    90c8:	e7933102 	.word	0xe7933102
    90cc:	e1a00001 	.word	0xe1a00001
    90d0:	e1a01003 	.word	0xe1a01003
    90d4:	eb0010ac 	.word	0xeb0010ac
    90d8:	e1a03000 	.word	0xe1a03000
    90dc:	e1a00005 	.word	0xe1a00005
    90e0:	e1a01003 	.word	0xe1a01003
    90e4:	eb000fff 	.word	0xeb000fff
    90e8:	e1a03000 	.word	0xe1a03000
    90ec:	e1a02003 	.word	0xe1a02003
    90f0:	e51f36e0 	.word	0xe51f36e0
    90f4:	e7832104 	.word	0xe7832104
    90f8:	e51f3680 	.word	0xe51f3680
    90fc:	e5933000 	.word	0xe5933000
    9100:	e2832001 	.word	0xe2832001
    9104:	e51f368c 	.word	0xe51f368c
    9108:	e5832000 	.word	0xe5832000
    910c:	e51f3694 	.word	0xe51f3694
    9110:	e5932000 	.word	0xe5932000
    9114:	e51f3700 	.word	0xe51f3700
    9118:	e5933000 	.word	0xe5933000
    911c:	e1520003 	.word	0xe1520003
    9120:	daffffb4 	.word	0xdaffffb4
    9124:	e51f370c 	.word	0xe51f370c
    9128:	e5932000 	.word	0xe5932000
    912c:	e51f3710 	.word	0xe51f3710
    9130:	e5933000 	.word	0xe5933000
    9134:	e1a00002 	.word	0xe1a00002
    9138:	e1a01003 	.word	0xe1a01003
    913c:	eb0010f8 	.word	0xeb0010f8
    9140:	e1a03000 	.word	0xe1a03000
    9144:	e1a02003 	.word	0xe1a02003
    9148:	e51f3718 	.word	0xe51f3718
    914c:	e5832000 	.word	0xe5832000
    9150:	e51f3720 	.word	0xe51f3720
    9154:	e5932000 	.word	0xe5932000
    9158:	e51f3728 	.word	0xe51f3728
    915c:	e5933000 	.word	0xe5933000
    9160:	e1a00002 	.word	0xe1a00002
    9164:	e1a01003 	.word	0xe1a01003
    9168:	eb001087 	.word	0xeb001087
    916c:	e1a03000 	.word	0xe1a03000
    9170:	e1a02003 	.word	0xe1a02003
    9174:	e51f3740 	.word	0xe51f3740
    9178:	e5832000 	.word	0xe5832000
    917c:	e51f275c 	.word	0xe51f275c
    9180:	e51f3738 	.word	0xe51f3738
    9184:	e5823000 	.word	0xe5823000
    9188:	e51f3768 	.word	0xe51f3768
    918c:	e5932000 	.word	0xe5932000
    9190:	e51f376c 	.word	0xe51f376c
    9194:	e5832000 	.word	0xe5832000
    9198:	e51f3774 	.word	0xe51f3774
    919c:	e5932000 	.word	0xe5932000
    91a0:	e51f3778 	.word	0xe51f3778
    91a4:	e5832000 	.word	0xe5832000
    91a8:	e51f3780 	.word	0xe51f3780
    91ac:	e5932000 	.word	0xe5932000
    91b0:	e51f3784 	.word	0xe51f3784
    91b4:	e5832000 	.word	0xe5832000
    91b8:	e51f2750 	.word	0xe51f2750
    91bc:	e3a03001 	.word	0xe3a03001
    91c0:	e5823000 	.word	0xe5823000
    91c4:	ea0003e7 	.word	0xea0003e7
    91c8:	e51f3794 	.word	0xe51f3794
    91cc:	e5932000 	.word	0xe5932000
    91d0:	e51f37a0 	.word	0xe51f37a0
    91d4:	e5933000 	.word	0xe5933000
    91d8:	e1a00002 	.word	0xe1a00002
    91dc:	e1a01003 	.word	0xe1a01003
    91e0:	eb001069 	.word	0xeb001069
    91e4:	e1a03000 	.word	0xe1a03000
    91e8:	e1a02003 	.word	0xe1a02003
    91ec:	e51f37b8 	.word	0xe51f37b8
    91f0:	e5832000 	.word	0xe5832000
    91f4:	e51f277c 	.word	0xe51f277c
    91f8:	e3a03000 	.word	0xe3a03000
    91fc:	e5823000 	.word	0xe5823000
    9200:	e51f27c8 	.word	0xe51f27c8
    9204:	e3a03001 	.word	0xe3a03001
    9208:	e5823000 	.word	0xe5823000
    920c:	e51f37a4 	.word	0xe51f37a4
    9210:	e5932000 	.word	0xe5932000
    9214:	e51f379c 	.word	0xe51f379c
    9218:	e5933000 	.word	0xe5933000
    921c:	e0822003 	.word	0xe0822003
    9220:	e51f37e8 	.word	0xe51f37e8
    9224:	e5933000 	.word	0xe5933000
    9228:	e0822003 	.word	0xe0822003
    922c:	e51f37f4 	.word	0xe51f37f4
    9230:	e5933000 	.word	0xe5933000
    9234:	e1a00002 	.word	0xe1a00002
    9238:	e1a01003 	.word	0xe1a01003
    923c:	eb001171 	.word	0xeb001171
    9240:	e1a03000 	.word	0xe1a03000
    9244:	e1a02003 	.word	0xe1a02003
    9248:	e51f380c 	.word	0xe51f380c
    924c:	e5832000 	.word	0xe5832000
    9250:	ea0003bb 	.word	0xea0003bb
    9254:	e51f3814 	.word	0xe51f3814
    9258:	e5933000 	.word	0xe5933000
    925c:	e51b0028 	.word	0xe51b0028
    9260:	e1a01003 	.word	0xe1a01003
    9264:	eb00110a 	.word	0xeb00110a
    9268:	e1a03000 	.word	0xe1a03000
    926c:	e3530000 	.word	0xe3530000
    9270:	1a000008 	.word	0x1a000008
    9274:	e51f3830 	.word	0xe51f3830
    9278:	e5933000 	.word	0xe5933000
    927c:	e51b002c 	.word	0xe51b002c
    9280:	e1a01003 	.word	0xe1a01003
    9284:	eb001102 	.word	0xeb001102
    9288:	e1a03000 	.word	0xe1a03000
    928c:	e3530000 	.word	0xe3530000
    9290:	1a000000 	.word	0x1a000000
    9294:	ea0001be 	.word	0xea0001be
    9298:	e51f3830 	.word	0xe51f3830
    929c:	e5932000 	.word	0xe5932000
    92a0:	e51f3828 	.word	0xe51f3828
    92a4:	e5933000 	.word	0xe5933000
    92a8:	e1520003 	.word	0xe1520003
    92ac:	1a000065 	.word	0x1a000065
    92b0:	e51f3838 	.word	0xe51f3838
    92b4:	e5932000 	.word	0xe5932000
    92b8:	e1a03002 	.word	0xe1a03002
    92bc:	e1a03083 	.word	0xe1a03083
    92c0:	e0833002 	.word	0xe0833002
    92c4:	e1a03103 	.word	0xe1a03103
    92c8:	e0832002 	.word	0xe0832002
    92cc:	e51f3864 	.word	0xe51f3864
    92d0:	e5933000 	.word	0xe5933000
    92d4:	e0823003 	.word	0xe0823003
    92d8:	e1a02103 	.word	0xe1a02103
    92dc:	e51f388c 	.word	0xe51f388c
    92e0:	e5933000 	.word	0xe5933000
    92e4:	e0824003 	.word	0xe0824003
    92e8:	e51f3880 	.word	0xe51f3880
    92ec:	e5933000 	.word	0xe5933000
    92f0:	e1a03103 	.word	0xe1a03103
    92f4:	e1a02003 	.word	0xe1a02003
    92f8:	e51f38a8 	.word	0xe51f38a8
    92fc:	e5933000 	.word	0xe5933000
    9300:	e0821003 	.word	0xe0821003
    9304:	e51f388c 	.word	0xe51f388c
    9308:	e5932000 	.word	0xe5932000
    930c:	e1a03002 	.word	0xe1a03002
    9310:	e1a03083 	.word	0xe1a03083
    9314:	e0833002 	.word	0xe0833002
    9318:	e1a03103 	.word	0xe1a03103
    931c:	e0833002 	.word	0xe0833002
    9320:	e1a03103 	.word	0xe1a03103
    9324:	e0813003 	.word	0xe0813003
    9328:	e2433038 	.word	0xe2433038
    932c:	e5932000 	.word	0xe5932000
    9330:	e51f38dc 	.word	0xe51f38dc
    9334:	e5933000 	.word	0xe5933000
    9338:	e1a00002 	.word	0xe1a00002
    933c:	e1a01003 	.word	0xe1a01003
    9340:	eb001011 	.word	0xeb001011
    9344:	e1a03000 	.word	0xe1a03000
    9348:	e5843000 	.word	0xe5843000
    934c:	e51f38d4 	.word	0xe51f38d4
    9350:	e5934000 	.word	0xe5934000
    9354:	e51f38ec 	.word	0xe51f38ec
    9358:	e5935000 	.word	0xe5935000
    935c:	e51f38e4 	.word	0xe51f38e4
    9360:	e5933000 	.word	0xe5933000
    9364:	e2432001 	.word	0xe2432001
    9368:	e51f3900 	.word	0xe51f3900
    936c:	e5933000 	.word	0xe5933000
    9370:	e2431001 	.word	0xe2431001
    9374:	e51f0918 	.word	0xe51f0918
    9378:	e1a03002 	.word	0xe1a03002
    937c:	e1a03083 	.word	0xe1a03083
    9380:	e0833002 	.word	0xe0833002
    9384:	e1a03103 	.word	0xe1a03103
    9388:	e0833002 	.word	0xe0833002
    938c:	e0833001 	.word	0xe0833001
    9390:	e7902103 	.word	0xe7902103
    9394:	e51f3940 	.word	0xe51f3940
    9398:	e5933000 	.word	0xe5933000
    939c:	e1a00002 	.word	0xe1a00002
    93a0:	e1a01003 	.word	0xe1a01003
    93a4:	eb000ff8 	.word	0xeb000ff8
    93a8:	e1a03000 	.word	0xe1a03000
    93ac:	e1a06003 	.word	0xe1a06003
    93b0:	e51f3948 	.word	0xe51f3948
    93b4:	e5933000 	.word	0xe5933000
    93b8:	e1a03103 	.word	0xe1a03103
    93bc:	e1a02003 	.word	0xe1a02003
    93c0:	e51f3970 	.word	0xe51f3970
    93c4:	e5933000 	.word	0xe5933000
    93c8:	e0821003 	.word	0xe0821003
    93cc:	e51f3954 	.word	0xe51f3954
    93d0:	e5932000 	.word	0xe5932000
    93d4:	e1a03002 	.word	0xe1a03002
    93d8:	e1a03083 	.word	0xe1a03083
    93dc:	e0833002 	.word	0xe0833002
    93e0:	e1a03103 	.word	0xe1a03103
    93e4:	e0833002 	.word	0xe0833002
    93e8:	e1a03103 	.word	0xe1a03103
    93ec:	e0813003 	.word	0xe0813003
    93f0:	e2433038 	.word	0xe2433038
    93f4:	e5932000 	.word	0xe5932000
    93f8:	e51f39ac 	.word	0xe51f39ac
    93fc:	e5933000 	.word	0xe5933000
    9400:	e1a00002 	.word	0xe1a00002
    9404:	e1a01003 	.word	0xe1a01003
    9408:	eb000fdf 	.word	0xeb000fdf
    940c:	e1a03000 	.word	0xe1a03000
    9410:	e1a00006 	.word	0xe1a00006
    9414:	e1a01003 	.word	0xe1a01003
    9418:	eb000f33 	.word	0xeb000f33
    941c:	e1a03000 	.word	0xe1a03000
    9420:	e1a02003 	.word	0xe1a02003
    9424:	e51f19c8 	.word	0xe51f19c8
    9428:	e1a03004 	.word	0xe1a03004
    942c:	e1a03083 	.word	0xe1a03083
    9430:	e0833004 	.word	0xe0833004
    9434:	e1a03103 	.word	0xe1a03103
    9438:	e0833004 	.word	0xe0833004
    943c:	e0833005 	.word	0xe0833005
    9440:	e7812103 	.word	0xe7812103
    9444:	ea000152 	.word	0xea000152
    9448:	e51f39e0 	.word	0xe51f39e0
    944c:	e5933000 	.word	0xe5933000
    9450:	e3530001 	.word	0xe3530001
    9454:	1a000068 	.word	0x1a000068
    9458:	e51f39e0 	.word	0xe51f39e0
    945c:	e5933000 	.word	0xe5933000
    9460:	e3530000 	.word	0xe3530000
    9464:	1a000064 	.word	0x1a000064
    9468:	e51f39f0 	.word	0xe51f39f0
    946c:	e5932000 	.word	0xe5932000
    9470:	e1a03002 	.word	0xe1a03002
    9474:	e1a03083 	.word	0xe1a03083
    9478:	e0833002 	.word	0xe0833002
    947c:	e1a03103 	.word	0xe1a03103
    9480:	e0832002 	.word	0xe0832002
    9484:	e51f3a1c 	.word	0xe51f3a1c
    9488:	e5933000 	.word	0xe5933000
    948c:	e0823003 	.word	0xe0823003
    9490:	e1a02103 	.word	0xe1a02103
    9494:	e51f3a44 	.word	0xe51f3a44
    9498:	e5933000 	.word	0xe5933000
    949c:	e0824003 	.word	0xe0824003
    94a0:	e51f3a38 	.word	0xe51f3a38
    94a4:	e5933000 	.word	0xe5933000
    94a8:	e1a03103 	.word	0xe1a03103
    94ac:	e1a02003 	.word	0xe1a02003
    94b0:	e51f3a60 	.word	0xe51f3a60
    94b4:	e5933000 	.word	0xe5933000
    94b8:	e0821003 	.word	0xe0821003
    94bc:	e51f3a44 	.word	0xe51f3a44
    94c0:	e5932000 	.word	0xe5932000
    94c4:	e1a03002 	.word	0xe1a03002
    94c8:	e1a03083 	.word	0xe1a03083
    94cc:	e0833002 	.word	0xe0833002
    94d0:	e1a03103 	.word	0xe1a03103
    94d4:	e0833002 	.word	0xe0833002
    94d8:	e1a03103 	.word	0xe1a03103
    94dc:	e0813003 	.word	0xe0813003
    94e0:	e2433004 	.word	0xe2433004
    94e4:	e5932000 	.word	0xe5932000
    94e8:	e51f3a9c 	.word	0xe51f3a9c
    94ec:	e5933000 	.word	0xe5933000
    94f0:	e1a00002 	.word	0xe1a00002
    94f4:	e1a01003 	.word	0xe1a01003
    94f8:	eb000fa3 	.word	0xeb000fa3
    94fc:	e1a03000 	.word	0xe1a03000
    9500:	e5843000 	.word	0xe5843000
    9504:	e51f3a8c 	.word	0xe51f3a8c
    9508:	e5934000 	.word	0xe5934000
    950c:	e51f3aa4 	.word	0xe51f3aa4
    9510:	e5935000 	.word	0xe5935000
    9514:	e51f3a9c 	.word	0xe51f3a9c
    9518:	e5932000 	.word	0xe5932000
    951c:	e51f3ab4 	.word	0xe51f3ab4
    9520:	e5933000 	.word	0xe5933000
    9524:	e2431001 	.word	0xe2431001
    9528:	e51f0acc 	.word	0xe51f0acc
    952c:	e1a03002 	.word	0xe1a03002
    9530:	e1a03083 	.word	0xe1a03083
    9534:	e0833002 	.word	0xe0833002
    9538:	e1a03103 	.word	0xe1a03103
    953c:	e0833002 	.word	0xe0833002
    9540:	e0833001 	.word	0xe0833001
    9544:	e7902103 	.word	0xe7902103
    9548:	e51f3afc 	.word	0xe51f3afc
    954c:	e5933000 	.word	0xe5933000
    9550:	e1a00002 	.word	0xe1a00002
    9554:	e1a01003 	.word	0xe1a01003
    9558:	eb000f8b 	.word	0xeb000f8b
    955c:	e1a03000 	.word	0xe1a03000
    9560:	e1a06003 	.word	0xe1a06003
    9564:	e51f3afc 	.word	0xe51f3afc
    9568:	e5933000 	.word	0xe5933000
    956c:	e1a03103 	.word	0xe1a03103
    9570:	e1a02003 	.word	0xe1a02003
    9574:	e51f3b24 	.word	0xe51f3b24
    9578:	e5933000 	.word	0xe5933000
    957c:	e0821003 	.word	0xe0821003
    9580:	e51f3b08 	.word	0xe51f3b08
    9584:	e5932000 	.word	0xe5932000
    9588:	e1a03002 	.word	0xe1a03002
    958c:	e1a03083 	.word	0xe1a03083
    9590:	e0833002 	.word	0xe0833002
    9594:	e1a03103 	.word	0xe1a03103
    9598:	e0833002 	.word	0xe0833002
    959c:	e1a03103 	.word	0xe1a03103
    95a0:	e0813003 	.word	0xe0813003
    95a4:	e2433004 	.word	0xe2433004
    95a8:	e5932000 	.word	0xe5932000
    95ac:	e51f3b58 	.word	0xe51f3b58
    95b0:	e5933000 	.word	0xe5933000
    95b4:	e1a00002 	.word	0xe1a00002
    95b8:	e1a01003 	.word	0xe1a01003
    95bc:	eb000f72 	.word	0xeb000f72
    95c0:	e1a03000 	.word	0xe1a03000
    95c4:	e1a00006 	.word	0xe1a00006
    95c8:	e1a01003 	.word	0xe1a01003
    95cc:	eb000ec5 	.word	0xeb000ec5
    95d0:	e1a03000 	.word	0xe1a03000
    95d4:	e1a02003 	.word	0xe1a02003
    95d8:	e51f1b7c 	.word	0xe51f1b7c
    95dc:	e1a03004 	.word	0xe1a03004
    95e0:	e1a03083 	.word	0xe1a03083
    95e4:	e0833004 	.word	0xe0833004
    95e8:	e1a03103 	.word	0xe1a03103
    95ec:	e0833004 	.word	0xe0833004
    95f0:	e0833005 	.word	0xe0833005
    95f4:	e7812103 	.word	0xe7812103
    95f8:	ea0000e5 	.word	0xea0000e5
    95fc:	e51f3b94 	.word	0xe51f3b94
    9600:	e5933000 	.word	0xe5933000
    9604:	e3530001 	.word	0xe3530001
    9608:	da0000e1 	.word	0xda0000e1
    960c:	e51f3ba4 	.word	0xe51f3ba4
    9610:	e5932000 	.word	0xe5932000
    9614:	e51f3b9c 	.word	0xe51f3b9c
    9618:	e5933000 	.word	0xe5933000
    961c:	e1520003 	.word	0xe1520003
    9620:	0a0000db 	.word	0x0a0000db
    9624:	e51f3bbc 	.word	0xe51f3bbc
    9628:	e5933000 	.word	0xe5933000
    962c:	e2432002 	.word	0xe2432002
    9630:	e51f3bb8 	.word	0xe51f3bb8
    9634:	e5933000 	.word	0xe5933000
    9638:	e1520003 	.word	0xe1520003
    963c:	aa000012 	.word	0xaa000012
    9640:	e51f3bd8 	.word	0xe51f3bd8
    9644:	e5933000 	.word	0xe5933000
    9648:	e1a03103 	.word	0xe1a03103
    964c:	e1a02003 	.word	0xe1a02003
    9650:	e51f3c00 	.word	0xe51f3c00
    9654:	e5933000 	.word	0xe5933000
    9658:	e0821003 	.word	0xe0821003
    965c:	e51f3be4 	.word	0xe51f3be4
    9660:	e5932000 	.word	0xe5932000
    9664:	e1a03002 	.word	0xe1a03002
    9668:	e1a03083 	.word	0xe1a03083
    966c:	e0833002 	.word	0xe0833002
    9670:	e1a03103 	.word	0xe1a03103
    9674:	e0833002 	.word	0xe0833002
    9678:	e1a03103 	.word	0xe1a03103
    967c:	e0813003 	.word	0xe0813003
    9680:	e2432008 	.word	0xe2432008
    9684:	e51f3c3c 	.word	0xe51f3c3c
    9688:	e5823000 	.word	0xe5823000
    968c:	e51f3c24 	.word	0xe51f3c24
    9690:	e5933000 	.word	0xe5933000
    9694:	e2432002 	.word	0xe2432002
    9698:	e51f3c20 	.word	0xe51f3c20
    969c:	e5933000 	.word	0xe5933000
    96a0:	e1520003 	.word	0xe1520003
    96a4:	aa00000d 	.word	0xaa00000d
    96a8:	e51f3c30 	.word	0xe51f3c30
    96ac:	e5932000 	.word	0xe5932000
    96b0:	e51f3c48 	.word	0xe51f3c48
    96b4:	e5933000 	.word	0xe5933000
    96b8:	e2431002 	.word	0xe2431002
    96bc:	e51f0c60 	.word	0xe51f0c60
    96c0:	e1a03002 	.word	0xe1a03002
    96c4:	e1a03083 	.word	0xe1a03083
    96c8:	e0833002 	.word	0xe0833002
    96cc:	e1a03103 	.word	0xe1a03103
    96d0:	e0833002 	.word	0xe0833002
    96d4:	e0832001 	.word	0xe0832001
    96d8:	e51f3c90 	.word	0xe51f3c90
    96dc:	e7803102 	.word	0xe7803102
    96e0:	e51f3c68 	.word	0xe51f3c68
    96e4:	e5932000 	.word	0xe5932000
    96e8:	e1a03002 	.word	0xe1a03002
    96ec:	e1a03083 	.word	0xe1a03083
    96f0:	e0833002 	.word	0xe0833002
    96f4:	e1a03103 	.word	0xe1a03103
    96f8:	e0832002 	.word	0xe0832002
    96fc:	e51f3c94 	.word	0xe51f3c94
    9700:	e5933000 	.word	0xe5933000
    9704:	e0823003 	.word	0xe0823003
    9708:	e1a02103 	.word	0xe1a02103
    970c:	e51f3cbc 	.word	0xe51f3cbc
    9710:	e5933000 	.word	0xe5933000
    9714:	e0824003 	.word	0xe0824003
    9718:	e51f3cb0 	.word	0xe51f3cb0
    971c:	e5933000 	.word	0xe5933000
    9720:	e1a03103 	.word	0xe1a03103
    9724:	e1a02003 	.word	0xe1a02003
    9728:	e51f3cd8 	.word	0xe51f3cd8
    972c:	e5933000 	.word	0xe5933000
    9730:	e0821003 	.word	0xe0821003
    9734:	e51f3cbc 	.word	0xe51f3cbc
    9738:	e5932000 	.word	0xe5932000
    973c:	e1a03002 	.word	0xe1a03002
    9740:	e1a03083 	.word	0xe1a03083
    9744:	e0833002 	.word	0xe0833002
    9748:	e1a03103 	.word	0xe1a03103
    974c:	e0833002 	.word	0xe0833002
    9750:	e1a03103 	.word	0xe1a03103
    9754:	e0813003 	.word	0xe0813003
    9758:	e2433004 	.word	0xe2433004
    975c:	e5932000 	.word	0xe5932000
    9760:	e51f3d14 	.word	0xe51f3d14
    9764:	e5933000 	.word	0xe5933000
    9768:	e1a00002 	.word	0xe1a00002
    976c:	e1a01003 	.word	0xe1a01003
    9770:	eb000f05 	.word	0xeb000f05
    9774:	e1a03000 	.word	0xe1a03000
    9778:	e1a05003 	.word	0xe1a05003
    977c:	e51f3d04 	.word	0xe51f3d04
    9780:	e5932000 	.word	0xe5932000
    9784:	e51f3d1c 	.word	0xe51f3d1c
    9788:	e5931000 	.word	0xe5931000
    978c:	e51f0d34 	.word	0xe51f0d34
    9790:	e1a03002 	.word	0xe1a03002
    9794:	e1a03083 	.word	0xe1a03083
    9798:	e0833002 	.word	0xe0833002
    979c:	e1a03103 	.word	0xe1a03103
    97a0:	e0833002 	.word	0xe0833002
    97a4:	e0833001 	.word	0xe0833001
    97a8:	e7901103 	.word	0xe7901103
    97ac:	e51f3d44 	.word	0xe51f3d44
    97b0:	e5933000 	.word	0xe5933000
    97b4:	e1a03103 	.word	0xe1a03103
    97b8:	e1a02003 	.word	0xe1a02003
    97bc:	e51f3d6c 	.word	0xe51f3d6c
    97c0:	e5933000 	.word	0xe5933000
    97c4:	e0820003 	.word	0xe0820003
    97c8:	e51f3d50 	.word	0xe51f3d50
    97cc:	e5932000 	.word	0xe5932000
    97d0:	e1a03002 	.word	0xe1a03002
    97d4:	e1a03083 	.word	0xe1a03083
    97d8:	e0833002 	.word	0xe0833002
    97dc:	e1a03103 	.word	0xe1a03103
    97e0:	e0833002 	.word	0xe0833002
    97e4:	e1a03103 	.word	0xe1a03103
    97e8:	e0803003 	.word	0xe0803003
    97ec:	e2433008 	.word	0xe2433008
    97f0:	e5933000 	.word	0xe5933000
    97f4:	e1a00001 	.word	0xe1a00001
    97f8:	e1a01003 	.word	0xe1a01003
    97fc:	eb000ee2 	.word	0xeb000ee2
    9800:	e1a03000 	.word	0xe1a03000
    9804:	e1a00005 	.word	0xe1a00005
    9808:	e1a01003 	.word	0xe1a01003
    980c:	eb000e35 	.word	0xeb000e35
    9810:	e1a03000 	.word	0xe1a03000
    9814:	e5843000 	.word	0xe5843000
    9818:	e51f3da0 	.word	0xe51f3da0
    981c:	e5934000 	.word	0xe5934000
    9820:	e51f3db8 	.word	0xe51f3db8
    9824:	e5935000 	.word	0xe5935000
    9828:	e51f3db0 	.word	0xe51f3db0
    982c:	e5932000 	.word	0xe5932000
    9830:	e51f3dc8 	.word	0xe51f3dc8
    9834:	e5933000 	.word	0xe5933000
    9838:	e2431001 	.word	0xe2431001
    983c:	e51f0de0 	.word	0xe51f0de0
    9840:	e1a03002 	.word	0xe1a03002
    9844:	e1a03083 	.word	0xe1a03083
    9848:	e0833002 	.word	0xe0833002
    984c:	e1a03103 	.word	0xe1a03103
    9850:	e0833002 	.word	0xe0833002
    9854:	e0833001 	.word	0xe0833001
    9858:	e7902103 	.word	0xe7902103
    985c:	e51f3e10 	.word	0xe51f3e10
    9860:	e5933000 	.word	0xe5933000
    9864:	e1a00002 	.word	0xe1a00002
    9868:	e1a01003 	.word	0xe1a01003
    986c:	eb000ec6 	.word	0xeb000ec6
    9870:	e1a03000 	.word	0xe1a03000
    9874:	e1a06003 	.word	0xe1a06003
    9878:	e51f3e10 	.word	0xe51f3e10
    987c:	e5933000 	.word	0xe5933000
    9880:	e1a03103 	.word	0xe1a03103
    9884:	e1a02003 	.word	0xe1a02003
    9888:	e51f3e38 	.word	0xe51f3e38
    988c:	e5933000 	.word	0xe5933000
    9890:	e0821003 	.word	0xe0821003
    9894:	e51f3e1c 	.word	0xe51f3e1c
    9898:	e5932000 	.word	0xe5932000
    989c:	e1a03002 	.word	0xe1a03002
    98a0:	e1a03083 	.word	0xe1a03083
    98a4:	e0833002 	.word	0xe0833002
    98a8:	e1a03103 	.word	0xe1a03103
    98ac:	e0833002 	.word	0xe0833002
    98b0:	e1a03103 	.word	0xe1a03103
    98b4:	e0813003 	.word	0xe0813003
    98b8:	e2433004 	.word	0xe2433004
    98bc:	e5932000 	.word	0xe5932000
    98c0:	e51f3e6c 	.word	0xe51f3e6c
    98c4:	e5933000 	.word	0xe5933000
    98c8:	e1a00002 	.word	0xe1a00002
    98cc:	e1a01003 	.word	0xe1a01003
    98d0:	eb000ead 	.word	0xeb000ead
    98d4:	e1a03000 	.word	0xe1a03000
    98d8:	e1a00006 	.word	0xe1a00006
    98dc:	e1a01003 	.word	0xe1a01003
    98e0:	eb000e00 	.word	0xeb000e00
    98e4:	e1a03000 	.word	0xe1a03000
    98e8:	e1a06003 	.word	0xe1a06003
    98ec:	e51f3e74 	.word	0xe51f3e74
    98f0:	e5932000 	.word	0xe5932000
    98f4:	e51f3e8c 	.word	0xe51f3e8c
    98f8:	e5931000 	.word	0xe5931000
    98fc:	e51f0ea4 	.word	0xe51f0ea4
    9900:	e1a03002 	.word	0xe1a03002
    9904:	e1a03083 	.word	0xe1a03083
    9908:	e0833002 	.word	0xe0833002
    990c:	e1a03103 	.word	0xe1a03103
    9910:	e0833002 	.word	0xe0833002
    9914:	e0833001 	.word	0xe0833001
    9918:	e790c103 	.word	0xe790c103
    991c:	e51f3ea4 	.word	0xe51f3ea4
    9920:	e5932000 	.word	0xe5932000
    9924:	e51f3ebc 	.word	0xe51f3ebc
    9928:	e5933000 	.word	0xe5933000
    992c:	e2431002 	.word	0xe2431002
    9930:	e51f0ed4 	.word	0xe51f0ed4
    9934:	e1a03002 	.word	0xe1a03002
    9938:	e1a03083 	.word	0xe1a03083
    993c:	e0833002 	.word	0xe0833002
    9940:	e1a03103 	.word	0xe1a03103
    9944:	e0833002 	.word	0xe0833002
    9948:	e0833001 	.word	0xe0833001
    994c:	e7903103 	.word	0xe7903103
    9950:	e1a0000c 	.word	0xe1a0000c
    9954:	e1a01003 	.word	0xe1a01003
    9958:	eb000e8b 	.word	0xeb000e8b
    995c:	e1a03000 	.word	0xe1a03000
    9960:	e1a00006 	.word	0xe1a00006
    9964:	e1a01003 	.word	0xe1a01003
    9968:	eb000dde 	.word	0xeb000dde
    996c:	e1a03000 	.word	0xe1a03000
    9970:	e1a02003 	.word	0xe1a02003
    9974:	e51f1f18 	.word	0xe51f1f18
    9978:	e1a03004 	.word	0xe1a03004
    997c:	e1a03083 	.word	0xe1a03083
    9980:	e0833004 	.word	0xe0833004
    9984:	e1a03103 	.word	0xe1a03103
    9988:	e0833004 	.word	0xe0833004
    998c:	e0833005 	.word	0xe0833005
    9990:	e7812103 	.word	0xe7812103
    9994:	e51f3f34 	.word	0xe51f3f34
    9998:	e5933000 	.word	0xe5933000
    999c:	e59b0008 	.word	0xe59b0008
    99a0:	e1a01003 	.word	0xe1a01003
    99a4:	eb000f3a 	.word	0xeb000f3a
    99a8:	e1a03000 	.word	0xe1a03000
    99ac:	e3530000 	.word	0xe3530000
    99b0:	1a000000 	.word	0x1a000000
    99b4:	ea000064 	.word	0xea000064
    99b8:	e51f3f40 	.word	0xe51f3f40
    99bc:	e5934000 	.word	0xe5934000
    99c0:	e51f3f58 	.word	0xe51f3f58
    99c4:	e5935000 	.word	0xe5935000
    99c8:	e51f3f50 	.word	0xe51f3f50
    99cc:	e5932000 	.word	0xe5932000
    99d0:	e1a03002 	.word	0xe1a03002
    99d4:	e1a03083 	.word	0xe1a03083
    99d8:	e0833002 	.word	0xe0833002
    99dc:	e1a03103 	.word	0xe1a03103
    99e0:	e0832002 	.word	0xe0832002
    99e4:	e51f3f7c 	.word	0xe51f3f7c
    99e8:	e5933000 	.word	0xe5933000
    99ec:	e0822003 	.word	0xe0822003
    99f0:	e51f3f8c 	.word	0xe51f3f8c
    99f4:	e7936102 	.word	0xe7936102
    99f8:	e51f3f80 	.word	0xe51f3f80
    99fc:	e5932000 	.word	0xe5932000
    9a00:	e1a03002 	.word	0xe1a03002
    9a04:	e1a03083 	.word	0xe1a03083
    9a08:	e0833002 	.word	0xe0833002
    9a0c:	e1a03103 	.word	0xe1a03103
    9a10:	e0832002 	.word	0xe0832002
    9a14:	e51f3fac 	.word	0xe51f3fac
    9a18:	e5933000 	.word	0xe5933000
    9a1c:	e0822003 	.word	0xe0822003
    9a20:	e51f3fb4 	.word	0xe51f3fb4
    9a24:	e7932102 	.word	0xe7932102
    9a28:	e51f3fb8 	.word	0xe51f3fb8
    9a2c:	e5933000 	.word	0xe5933000
    9a30:	e1a00002 	.word	0xe1a00002
    9a34:	e1a01003 	.word	0xe1a01003
    9a38:	eb000e53 	.word	0xeb000e53
    9a3c:	e1a03000 	.word	0xe1a03000
    9a40:	e1a00006 	.word	0xe1a00006
    9a44:	e1a01003 	.word	0xe1a01003
    9a48:	eb000da7 	.word	0xeb000da7
    9a4c:	e1a03000 	.word	0xe1a03000
    9a50:	e1a02003 	.word	0xe1a02003
    9a54:	e51f1fe0 	.word	0xe51f1fe0
    9a58:	e1a03004 	.word	0xe1a03004
    9a5c:	e1a03083 	.word	0xe1a03083
    9a60:	e0833004 	.word	0xe0833004
    9a64:	e1a03103 	.word	0xe1a03103
    9a68:	e0833004 	.word	0xe0833004
    9a6c:	e0833005 	.word	0xe0833005
    9a70:	e7812103 	.word	0xe7812103
    9a74:	e51f3ffc 	.word	0xe51f3ffc
    9a78:	e5933000 	.word	0xe5933000
    9a7c:	e3530000 	.word	0xe3530000
    9a80:	0a000031 	.word	0x0a000031
    9a84:	e59f3cf8 	.word	0xe59f3cf8
    9a88:	e5934000 	.word	0xe5934000
    9a8c:	e59f3cf4 	.word	0xe59f3cf4
    9a90:	e5933000 	.word	0xe5933000
    9a94:	e2435001 	.word	0xe2435001
    9a98:	e59f3ce4 	.word	0xe59f3ce4
    9a9c:	e5932000 	.word	0xe5932000
    9aa0:	e1a03002 	.word	0xe1a03002
    9aa4:	e1a03083 	.word	0xe1a03083
    9aa8:	e0833002 	.word	0xe0833002
    9aac:	e1a03103 	.word	0xe1a03103
    9ab0:	e0832002 	.word	0xe0832002
    9ab4:	e59f3ccc 	.word	0xe59f3ccc
    9ab8:	e5933000 	.word	0xe5933000
    9abc:	e0823003 	.word	0xe0823003
    9ac0:	e2432001 	.word	0xe2432001
    9ac4:	e59f3cc0 	.word	0xe59f3cc0
    9ac8:	e7936102 	.word	0xe7936102
    9acc:	e59f3cb0 	.word	0xe59f3cb0
    9ad0:	e5932000 	.word	0xe5932000
    9ad4:	e1a03002 	.word	0xe1a03002
    9ad8:	e1a03083 	.word	0xe1a03083
    9adc:	e0833002 	.word	0xe0833002
    9ae0:	e1a03103 	.word	0xe1a03103
    9ae4:	e0832002 	.word	0xe0832002
    9ae8:	e59f3c98 	.word	0xe59f3c98
    9aec:	e5933000 	.word	0xe5933000
    9af0:	e0823003 	.word	0xe0823003
    9af4:	e2432001 	.word	0xe2432001
    9af8:	e59f3c90 	.word	0xe59f3c90
    9afc:	e7932102 	.word	0xe7932102
    9b00:	e59f3c8c 	.word	0xe59f3c8c
    9b04:	e5933000 	.word	0xe5933000
    9b08:	e1a00002 	.word	0xe1a00002
    9b0c:	e1a01003 	.word	0xe1a01003
    9b10:	eb000e1d 	.word	0xeb000e1d
    9b14:	e1a03000 	.word	0xe1a03000
    9b18:	e1a00006 	.word	0xe1a00006
    9b1c:	e1a01003 	.word	0xe1a01003
    9b20:	eb000d71 	.word	0xeb000d71
    9b24:	e1a03000 	.word	0xe1a03000
    9b28:	e1a02003 	.word	0xe1a02003
    9b2c:	e59f1c64 	.word	0xe59f1c64
    9b30:	e1a03004 	.word	0xe1a03004
    9b34:	e1a03083 	.word	0xe1a03083
    9b38:	e0833004 	.word	0xe0833004
    9b3c:	e1a03103 	.word	0xe1a03103
    9b40:	e0833004 	.word	0xe0833004
    9b44:	e0833005 	.word	0xe0833005
    9b48:	e7812103 	.word	0xe7812103
    9b4c:	e59f3c34 	.word	0xe59f3c34
    9b50:	e5932000 	.word	0xe5932000
    9b54:	e1a03002 	.word	0xe1a03002
    9b58:	e1a03083 	.word	0xe1a03083
    9b5c:	e0833002 	.word	0xe0833002
    9b60:	e1a03103 	.word	0xe1a03103
    9b64:	e0832002 	.word	0xe0832002
    9b68:	e59f3c14 	.word	0xe59f3c14
    9b6c:	e5933000 	.word	0xe5933000
    9b70:	e0823003 	.word	0xe0823003
    9b74:	e1a02103 	.word	0xe1a02103
    9b78:	e59f3c1c 	.word	0xe59f3c1c
    9b7c:	e5933000 	.word	0xe5933000
    9b80:	e0823003 	.word	0xe0823003
    9b84:	e5932000 	.word	0xe5932000
    9b88:	e59f3c10 	.word	0xe59f3c10
    9b8c:	e5933000 	.word	0xe5933000
    9b90:	e1a00002 	.word	0xe1a00002
    9b94:	e1a01003 	.word	0xe1a01003
    9b98:	eb000dfb 	.word	0xeb000dfb
    9b9c:	e1a03000 	.word	0xe1a03000
    9ba0:	e1a02003 	.word	0xe1a02003
    9ba4:	e59f3bf8 	.word	0xe59f3bf8
    9ba8:	e5832000 	.word	0xe5832000
    9bac:	e59f3bd4 	.word	0xe59f3bd4
    9bb0:	e5933000 	.word	0xe5933000
    9bb4:	e3530000 	.word	0xe3530000
    9bb8:	1a00002e 	.word	0x1a00002e
    9bbc:	e59f3bc4 	.word	0xe59f3bc4
    9bc0:	e5932000 	.word	0xe5932000
    9bc4:	e59f3bb8 	.word	0xe59f3bb8
    9bc8:	e5931000 	.word	0xe5931000
    9bcc:	e59f0bc4 	.word	0xe59f0bc4
    9bd0:	e1a03002 	.word	0xe1a03002
    9bd4:	e1a03083 	.word	0xe1a03083
    9bd8:	e0833002 	.word	0xe0833002
    9bdc:	e1a03103 	.word	0xe1a03103
    9be0:	e0833002 	.word	0xe0833002
    9be4:	e0833001 	.word	0xe0833001
    9be8:	e7901103 	.word	0xe7901103
    9bec:	e59f3b94 	.word	0xe59f3b94
    9bf0:	e5932000 	.word	0xe5932000
    9bf4:	e59f3bac 	.word	0xe59f3bac
    9bf8:	e7933102 	.word	0xe7933102
    9bfc:	e1a00001 	.word	0xe1a00001
    9c00:	e1a01003 	.word	0xe1a01003
    9c04:	eb000de0 	.word	0xeb000de0
    9c08:	e1a03000 	.word	0xe1a03000
    9c0c:	e1a02003 	.word	0xe1a02003
    9c10:	e59f3b94 	.word	0xe59f3b94
    9c14:	e5832000 	.word	0xe5832000
    9c18:	e59f3b68 	.word	0xe59f3b68
    9c1c:	e5932000 	.word	0xe5932000
    9c20:	e59f3b5c 	.word	0xe59f3b5c
    9c24:	e5931000 	.word	0xe5931000
    9c28:	e59f0b68 	.word	0xe59f0b68
    9c2c:	e1a03002 	.word	0xe1a03002
    9c30:	e1a03083 	.word	0xe1a03083
    9c34:	e0833002 	.word	0xe0833002
    9c38:	e1a03103 	.word	0xe1a03103
    9c3c:	e0833002 	.word	0xe0833002
    9c40:	e0833001 	.word	0xe0833001
    9c44:	e7901103 	.word	0xe7901103
    9c48:	e59f3b38 	.word	0xe59f3b38
    9c4c:	e5932000 	.word	0xe5932000
    9c50:	e59f3b58 	.word	0xe59f3b58
    9c54:	e7933102 	.word	0xe7933102
    9c58:	e1a00001 	.word	0xe1a00001
    9c5c:	e1a01003 	.word	0xe1a01003
    9c60:	eb000dc9 	.word	0xeb000dc9
    9c64:	e1a03000 	.word	0xe1a03000
    9c68:	e1a02003 	.word	0xe1a02003
    9c6c:	e59f3b40 	.word	0xe59f3b40
    9c70:	e5832000 	.word	0xe5832000
    9c74:	ea000061 	.word	0xea000061
    9c78:	e59f3b08 	.word	0xe59f3b08
    9c7c:	e5932000 	.word	0xe5932000
    9c80:	e59f3afc 	.word	0xe59f3afc
    9c84:	e5931000 	.word	0xe5931000
    9c88:	e59f0b08 	.word	0xe59f0b08
    9c8c:	e1a03002 	.word	0xe1a03002
    9c90:	e1a03083 	.word	0xe1a03083
    9c94:	e0833002 	.word	0xe0833002
    9c98:	e1a03103 	.word	0xe1a03103
    9c9c:	e0833002 	.word	0xe0833002
    9ca0:	e0833001 	.word	0xe0833001
    9ca4:	e7901103 	.word	0xe7901103
    9ca8:	e59f3ad8 	.word	0xe59f3ad8
    9cac:	e5932000 	.word	0xe5932000
    9cb0:	e59f3af0 	.word	0xe59f3af0
    9cb4:	e7933102 	.word	0xe7933102
    9cb8:	e1a00001 	.word	0xe1a00001
    9cbc:	e1a01003 	.word	0xe1a01003
    9cc0:	eb000db1 	.word	0xeb000db1
    9cc4:	e1a03000 	.word	0xe1a03000
    9cc8:	e1a04003 	.word	0xe1a04003
    9ccc:	e59f3ab0 	.word	0xe59f3ab0
    9cd0:	e5932000 	.word	0xe5932000
    9cd4:	e59f3aac 	.word	0xe59f3aac
    9cd8:	e5933000 	.word	0xe5933000
    9cdc:	e2431001 	.word	0xe2431001
    9ce0:	e59f0ab0 	.word	0xe59f0ab0
    9ce4:	e1a03002 	.word	0xe1a03002
    9ce8:	e1a03083 	.word	0xe1a03083
    9cec:	e0833002 	.word	0xe0833002
    9cf0:	e1a03103 	.word	0xe1a03103
    9cf4:	e0833002 	.word	0xe0833002
    9cf8:	e0833001 	.word	0xe0833001
    9cfc:	e7901103 	.word	0xe7901103
    9d00:	e59f3a80 	.word	0xe59f3a80
    9d04:	e5932000 	.word	0xe5932000
    9d08:	e59f3aa0 	.word	0xe59f3aa0
    9d0c:	e7933102 	.word	0xe7933102
    9d10:	e1a00001 	.word	0xe1a00001
    9d14:	e1a01003 	.word	0xe1a01003
    9d18:	eb000d9b 	.word	0xeb000d9b
    9d1c:	e1a03000 	.word	0xe1a03000
    9d20:	e1a00004 	.word	0xe1a00004
    9d24:	e1a01003 	.word	0xe1a01003
    9d28:	eb000cef 	.word	0xeb000cef
    9d2c:	e1a03000 	.word	0xe1a03000
    9d30:	e1a02003 	.word	0xe1a02003
    9d34:	e59f3a70 	.word	0xe59f3a70
    9d38:	e5832000 	.word	0xe5832000
    9d3c:	e59f3a44 	.word	0xe59f3a44
    9d40:	e5932000 	.word	0xe5932000
    9d44:	e59f3a38 	.word	0xe59f3a38
    9d48:	e5931000 	.word	0xe5931000
    9d4c:	e59f0a44 	.word	0xe59f0a44
    9d50:	e1a03002 	.word	0xe1a03002
    9d54:	e1a03083 	.word	0xe1a03083
    9d58:	e0833002 	.word	0xe0833002
    9d5c:	e1a03103 	.word	0xe1a03103
    9d60:	e0833002 	.word	0xe0833002
    9d64:	e0833001 	.word	0xe0833001
    9d68:	e7901103 	.word	0xe7901103
    9d6c:	e59f3a14 	.word	0xe59f3a14
    9d70:	e5932000 	.word	0xe5932000
    9d74:	e59f3a34 	.word	0xe59f3a34
    9d78:	e7933102 	.word	0xe7933102
    9d7c:	e1a00001 	.word	0xe1a00001
    9d80:	e1a01003 	.word	0xe1a01003
    9d84:	eb000d80 	.word	0xeb000d80
    9d88:	e1a03000 	.word	0xe1a03000
    9d8c:	e1a04003 	.word	0xe1a04003
    9d90:	e59f39ec 	.word	0xe59f39ec
    9d94:	e5932000 	.word	0xe5932000
    9d98:	e59f39e8 	.word	0xe59f39e8
    9d9c:	e5933000 	.word	0xe5933000
    9da0:	e2431001 	.word	0xe2431001
    9da4:	e59f09ec 	.word	0xe59f09ec
    9da8:	e1a03002 	.word	0xe1a03002
    9dac:	e1a03083 	.word	0xe1a03083
    9db0:	e0833002 	.word	0xe0833002
    9db4:	e1a03103 	.word	0xe1a03103
    9db8:	e0833002 	.word	0xe0833002
    9dbc:	e0833001 	.word	0xe0833001
    9dc0:	e7901103 	.word	0xe7901103
    9dc4:	e59f39bc 	.word	0xe59f39bc
    9dc8:	e5932000 	.word	0xe5932000
    9dcc:	e59f39d4 	.word	0xe59f39d4
    9dd0:	e7933102 	.word	0xe7933102
    9dd4:	e1a00001 	.word	0xe1a00001
    9dd8:	e1a01003 	.word	0xe1a01003
    9ddc:	eb000d6a 	.word	0xeb000d6a
    9de0:	e1a03000 	.word	0xe1a03000
    9de4:	e1a00004 	.word	0xe1a00004
    9de8:	e1a01003 	.word	0xe1a01003
    9dec:	eb000cbd 	.word	0xeb000cbd
    9df0:	e1a03000 	.word	0xe1a03000
    9df4:	e1a02003 	.word	0xe1a02003
    9df8:	e59f39b4 	.word	0xe59f39b4
    9dfc:	e5832000 	.word	0xe5832000
    9e00:	e59f39b0 	.word	0xe59f39b0
    9e04:	e5934000 	.word	0xe5934000
    9e08:	e59f3990 	.word	0xe59f3990
    9e0c:	e5932000 	.word	0xe5932000
    9e10:	e59f3994 	.word	0xe59f3994
    9e14:	e5933000 	.word	0xe5933000
    9e18:	e1a00002 	.word	0xe1a00002
    9e1c:	e1a01003 	.word	0xe1a01003
    9e20:	eb000d59 	.word	0xeb000d59
    9e24:	e1a03000 	.word	0xe1a03000
    9e28:	e1a0c003 	.word	0xe1a0c003
    9e2c:	e59f3954 	.word	0xe59f3954
    9e30:	e5932000 	.word	0xe5932000
    9e34:	e59f3948 	.word	0xe59f3948
    9e38:	e5931000 	.word	0xe5931000
    9e3c:	e59f0978 	.word	0xe59f0978
    9e40:	e1a03002 	.word	0xe1a03002
    9e44:	e1a03083 	.word	0xe1a03083
    9e48:	e0833002 	.word	0xe0833002
    9e4c:	e1a03103 	.word	0xe1a03103
    9e50:	e0833002 	.word	0xe0833002
    9e54:	e0833001 	.word	0xe0833001
    9e58:	e7903103 	.word	0xe7903103
    9e5c:	e1a0000c 	.word	0xe1a0000c
    9e60:	e1a01003 	.word	0xe1a01003
    9e64:	eb000d48 	.word	0xeb000d48
    9e68:	e1a03000 	.word	0xe1a03000
    9e6c:	e1a00004 	.word	0xe1a00004
    9e70:	e1a01003 	.word	0xe1a01003
    9e74:	eb000c9b 	.word	0xeb000c9b
    9e78:	e1a03000 	.word	0xe1a03000
    9e7c:	e1a02003 	.word	0xe1a02003
    9e80:	e59f3930 	.word	0xe59f3930
    9e84:	e5832000 	.word	0xe5832000
    9e88:	e59f38f8 	.word	0xe59f38f8
    9e8c:	e5932000 	.word	0xe5932000
    9e90:	e59f3928 	.word	0xe59f3928
    9e94:	e7932102 	.word	0xe7932102
    9e98:	e59f3914 	.word	0xe59f3914
    9e9c:	e5933000 	.word	0xe5933000
    9ea0:	e1a00002 	.word	0xe1a00002
    9ea4:	e1a01003 	.word	0xe1a01003
    9ea8:	eb000d37 	.word	0xeb000d37
    9eac:	e1a03000 	.word	0xe1a03000
    9eb0:	e1a02003 	.word	0xe1a02003
    9eb4:	e59f38e8 	.word	0xe59f38e8
    9eb8:	e5933000 	.word	0xe5933000
    9ebc:	e1a00002 	.word	0xe1a00002
    9ec0:	e1a01003 	.word	0xe1a01003
    9ec4:	eb000d30 	.word	0xeb000d30
    9ec8:	e1a03000 	.word	0xe1a03000
    9ecc:	e1a02003 	.word	0xe1a02003
    9ed0:	e59f38ec 	.word	0xe59f38ec
    9ed4:	e5933000 	.word	0xe5933000
    9ed8:	e1a00002 	.word	0xe1a00002
    9edc:	e1a01003 	.word	0xe1a01003
    9ee0:	eb000c81 	.word	0xeb000c81
    9ee4:	e1a03000 	.word	0xe1a03000
    9ee8:	e1a02003 	.word	0xe1a02003
    9eec:	e59f38d0 	.word	0xe59f38d0
    9ef0:	e5832000 	.word	0xe5832000
    9ef4:	e59f3888 	.word	0xe59f3888
    9ef8:	e5932000 	.word	0xe5932000
    9efc:	e59f38c4 	.word	0xe59f38c4
    9f00:	e7932102 	.word	0xe7932102
    9f04:	e59f38a0 	.word	0xe59f38a0
    9f08:	e5933000 	.word	0xe5933000
    9f0c:	e1a00002 	.word	0xe1a00002
    9f10:	e1a01003 	.word	0xe1a01003
    9f14:	eb000d1c 	.word	0xeb000d1c
    9f18:	e1a03000 	.word	0xe1a03000
    9f1c:	e1a02003 	.word	0xe1a02003
    9f20:	e59f387c 	.word	0xe59f387c
    9f24:	e5933000 	.word	0xe5933000
    9f28:	e1a00002 	.word	0xe1a00002
    9f2c:	e1a01003 	.word	0xe1a01003
    9f30:	eb000d15 	.word	0xeb000d15
    9f34:	e1a03000 	.word	0xe1a03000
    9f38:	e1a02003 	.word	0xe1a02003
    9f3c:	e59f3888 	.word	0xe59f3888
    9f40:	e5933000 	.word	0xe5933000
    9f44:	e1a00002 	.word	0xe1a00002
    9f48:	e1a01003 	.word	0xe1a01003
    9f4c:	eb000c66 	.word	0xeb000c66
    9f50:	e1a03000 	.word	0xe1a03000
    9f54:	e1a02003 	.word	0xe1a02003
    9f58:	e59f386c 	.word	0xe59f386c
    9f5c:	e5832000 	.word	0xe5832000
    9f60:	e59f3868 	.word	0xe59f3868
    9f64:	e5933000 	.word	0xe5933000
    9f68:	e1a00003 	.word	0xe1a00003
    9f6c:	e59f1860 	.word	0xe59f1860
    9f70:	eb000dc7 	.word	0xeb000dc7
    9f74:	e1a03000 	.word	0xe1a03000
    9f78:	e3530000 	.word	0xe3530000
    9f7c:	0a000000 	.word	0x0a000000
    9f80:	ea000063 	.word	0xea000063
    9f84:	e59f37fc 	.word	0xe59f37fc
    9f88:	e5933000 	.word	0xe5933000
    9f8c:	e3530001 	.word	0xe3530001
    9f90:	1a00005f 	.word	0x1a00005f
    9f94:	e59f37e8 	.word	0xe59f37e8
    9f98:	e5933000 	.word	0xe5933000
    9f9c:	e3530001 	.word	0xe3530001
    9fa0:	1a000009 	.word	0x1a000009
    9fa4:	e59f37d8 	.word	0xe59f37d8
    9fa8:	e5931000 	.word	0xe5931000
    9fac:	e59f37d0 	.word	0xe59f37d0
    9fb0:	e5933000 	.word	0xe5933000
    9fb4:	e2432001 	.word	0xe2432001
    9fb8:	e59f3818 	.word	0xe59f3818
    9fbc:	e7932102 	.word	0xe7932102
    9fc0:	e59f3810 	.word	0xe59f3810
    9fc4:	e7832101 	.word	0xe7832101
    9fc8:	ea000029 	.word	0xea000029
    9fcc:	e59f37b0 	.word	0xe59f37b0
    9fd0:	e5934000 	.word	0xe5934000
    9fd4:	e59f37a8 	.word	0xe59f37a8
    9fd8:	e5933000 	.word	0xe5933000
    9fdc:	e2432001 	.word	0xe2432001
    9fe0:	e59f37f0 	.word	0xe59f37f0
    9fe4:	e7932102 	.word	0xe7932102
    9fe8:	e59f37ec 	.word	0xe59f37ec
    9fec:	e5933000 	.word	0xe5933000
    9ff0:	e1a00002 	.word	0xe1a00002
    9ff4:	e1a01003 	.word	0xe1a01003
    9ff8:	eb000ce3 	.word	0xeb000ce3
    9ffc:	e1a03000 	.word	0xe1a03000
    a000:	e1a05003 	.word	0xe1a05003
    a004:	e59f377c 	.word	0xe59f377c
    a008:	e5932000 	.word	0xe5932000
    a00c:	e59f3770 	.word	0xe59f3770
    a010:	e5931000 	.word	0xe5931000
    a014:	e59f07c4 	.word	0xe59f07c4
    a018:	e1a03002 	.word	0xe1a03002
    a01c:	e1a03083 	.word	0xe1a03083
    a020:	e0833002 	.word	0xe0833002
    a024:	e1a03103 	.word	0xe1a03103
    a028:	e0833002 	.word	0xe0833002
    a02c:	e0833001 	.word	0xe0833001
    a030:	e7901103 	.word	0xe7901103
    a034:	e59f3748 	.word	0xe59f3748
    a038:	e5933000 	.word	0xe5933000
    a03c:	e2432002 	.word	0xe2432002
    a040:	e59f3790 	.word	0xe59f3790
    a044:	e7933102 	.word	0xe7933102
    a048:	e1a00001 	.word	0xe1a00001
    a04c:	e1a01003 	.word	0xe1a01003
    a050:	eb000ccd 	.word	0xeb000ccd
    a054:	e1a03000 	.word	0xe1a03000
    a058:	e1a00005 	.word	0xe1a00005
    a05c:	e1a01003 	.word	0xe1a01003
    a060:	eb000c20 	.word	0xeb000c20
    a064:	e1a03000 	.word	0xe1a03000
    a068:	e1a02003 	.word	0xe1a02003
    a06c:	e59f3764 	.word	0xe59f3764
    a070:	e7832104 	.word	0xe7832104
    a074:	e59f3708 	.word	0xe59f3708
    a078:	e5932000 	.word	0xe5932000
    a07c:	e59f3754 	.word	0xe59f3754
    a080:	e7932102 	.word	0xe7932102
    a084:	e59f3714 	.word	0xe59f3714
    a088:	e5933000 	.word	0xe5933000
    a08c:	e1a00002 	.word	0xe1a00002
    a090:	e1a01003 	.word	0xe1a01003
    a094:	eb000cbc 	.word	0xeb000cbc
    a098:	e1a03000 	.word	0xe1a03000
    a09c:	e1a02003 	.word	0xe1a02003
    a0a0:	e59f373c 	.word	0xe59f373c
    a0a4:	e5832000 	.word	0xe5832000
    a0a8:	e59f36d8 	.word	0xe59f36d8
    a0ac:	e5932000 	.word	0xe5932000
    a0b0:	e59f3708 	.word	0xe59f3708
    a0b4:	e7932102 	.word	0xe7932102
    a0b8:	e59f36f4 	.word	0xe59f36f4
    a0bc:	e5933000 	.word	0xe5933000
    a0c0:	e1a00002 	.word	0xe1a00002
    a0c4:	e1a01003 	.word	0xe1a01003
    a0c8:	eb000caf 	.word	0xeb000caf
    a0cc:	e1a03000 	.word	0xe1a03000
    a0d0:	e1a02003 	.word	0xe1a02003
    a0d4:	e59f3708 	.word	0xe59f3708
    a0d8:	e5933000 	.word	0xe5933000
    a0dc:	e1a00002 	.word	0xe1a00002
    a0e0:	e1a01003 	.word	0xe1a01003
    a0e4:	eb000ca8 	.word	0xeb000ca8
    a0e8:	e1a03000 	.word	0xe1a03000
    a0ec:	e1a02003 	.word	0xe1a02003
    a0f0:	e59f36f0 	.word	0xe59f36f0
    a0f4:	e5933000 	.word	0xe5933000
    a0f8:	e1a00002 	.word	0xe1a00002
    a0fc:	e1a01003 	.word	0xe1a01003
    a100:	eb000bf9 	.word	0xeb000bf9
    a104:	e1a03000 	.word	0xe1a03000
    a108:	e1a02003 	.word	0xe1a02003
    a10c:	e59f36d4 	.word	0xe59f36d4
    a110:	e5832000 	.word	0xe5832000
    a114:	e59f36d0 	.word	0xe59f36d0
    a118:	e5933000 	.word	0xe5933000
    a11c:	e2432001 	.word	0xe2432001
    a120:	e59f36c4 	.word	0xe59f36c4
    a124:	e5832000 	.word	0xe5832000
    a128:	e59f3658 	.word	0xe59f3658
    a12c:	e5932000 	.word	0xe5932000
    a130:	e59f36b8 	.word	0xe59f36b8
    a134:	e5933000 	.word	0xe5933000
    a138:	e0822003 	.word	0xe0822003
    a13c:	e59f3644 	.word	0xe59f3644
    a140:	e5832000 	.word	0xe5832000
    a144:	e59f36a0 	.word	0xe59f36a0
    a148:	e5933000 	.word	0xe5933000
    a14c:	e3530000 	.word	0xe3530000
    a150:	cafffc3f 	.word	0xcafffc3f
    a154:	e59f3628 	.word	0xe59f3628
    a158:	e5933000 	.word	0xe5933000
    a15c:	e2832001 	.word	0xe2832001
    a160:	e59f361c 	.word	0xe59f361c
    a164:	e5832000 	.word	0xe5832000
    a168:	e59f3614 	.word	0xe59f3614
    a16c:	e5932000 	.word	0xe5932000
    a170:	e59f367c 	.word	0xe59f367c
    a174:	e5933000 	.word	0xe5933000
    a178:	e1520003 	.word	0xe1520003
    a17c:	dafffc11 	.word	0xdafffc11
    a180:	e59f3648 	.word	0xe59f3648
    a184:	e5933000 	.word	0xe5933000
    a188:	e1a00003 	.word	0xe1a00003
    a18c:	e59f1640 	.word	0xe59f1640
    a190:	eb000d3f 	.word	0xeb000d3f
    a194:	e1a03000 	.word	0xe1a03000
    a198:	e3530000 	.word	0xe3530000
    a19c:	0a000000 	.word	0x0a000000
    a1a0:	ea000004 	.word	0xea000004
    a1a4:	e59f363c 	.word	0xe59f363c
    a1a8:	e5932000 	.word	0xe5932000
    a1ac:	e59f3610 	.word	0xe59f3610
    a1b0:	e5832000 	.word	0xe5832000
    a1b4:	ea00000a 	.word	0xea00000a
    a1b8:	e59f3604 	.word	0xe59f3604
    a1bc:	e5932000 	.word	0xe5932000
    a1c0:	e59f3608 	.word	0xe59f3608
    a1c4:	e5933000 	.word	0xe5933000
    a1c8:	e1a00002 	.word	0xe1a00002
    a1cc:	e1a01003 	.word	0xe1a01003
    a1d0:	eb000cd3 	.word	0xeb000cd3
    a1d4:	e1a03000 	.word	0xe1a03000
    a1d8:	e1a02003 	.word	0xe1a02003
    a1dc:	e59f35e0 	.word	0xe59f35e0
    a1e0:	e5832000 	.word	0xe5832000
    a1e4:	e59f35cc 	.word	0xe59f35cc
    a1e8:	e5933000 	.word	0xe5933000
    a1ec:	e2232102 	.word	0xe2232102
    a1f0:	e59f3600 	.word	0xe59f3600
    a1f4:	e5933000 	.word	0xe5933000
    a1f8:	e1a00002 	.word	0xe1a00002
    a1fc:	e1a01003 	.word	0xe1a01003
    a200:	eb000c61 	.word	0xeb000c61
    a204:	e1a03000 	.word	0xe1a03000
    a208:	e1a04003 	.word	0xe1a04003
    a20c:	e59f35b8 	.word	0xe59f35b8
    a210:	e5932000 	.word	0xe5932000
    a214:	e59f35e0 	.word	0xe59f35e0
    a218:	e5933000 	.word	0xe5933000
    a21c:	e1a00002 	.word	0xe1a00002
    a220:	e1a01003 	.word	0xe1a01003
    a224:	eb000c58 	.word	0xeb000c58
    a228:	e1a03000 	.word	0xe1a03000
    a22c:	e1a00004 	.word	0xe1a00004
    a230:	e1a01003 	.word	0xe1a01003
    a234:	eb000bab 	.word	0xeb000bab
    a238:	e1a03000 	.word	0xe1a03000
    a23c:	e1a02003 	.word	0xe1a02003
    a240:	e59f35b8 	.word	0xe59f35b8
    a244:	e5832000 	.word	0xe5832000
    a248:	e59f3574 	.word	0xe59f3574
    a24c:	e5932000 	.word	0xe5932000
    a250:	e59f35ac 	.word	0xe59f35ac
    a254:	e5832000 	.word	0xe5832000
    a258:	e59f3558 	.word	0xe59f3558
    a25c:	e5932000 	.word	0xe5932000
    a260:	e59f3594 	.word	0xe59f3594
    a264:	e5933000 	.word	0xe5933000
    a268:	e1a00002 	.word	0xe1a00002
    a26c:	e1a01003 	.word	0xe1a01003
    a270:	eb000c45 	.word	0xeb000c45
    a274:	e1a03000 	.word	0xe1a03000
    a278:	e1a04003 	.word	0xe1a04003
    a27c:	e59f3548 	.word	0xe59f3548
    a280:	e5932000 	.word	0xe5932000
    a284:	e59f356c 	.word	0xe59f356c
    a288:	e5933000 	.word	0xe5933000
    a28c:	e1a00002 	.word	0xe1a00002
    a290:	e1a01003 	.word	0xe1a01003
    a294:	eb000c3c 	.word	0xeb000c3c
    a298:	e1a03000 	.word	0xe1a03000
    a29c:	e1a00004 	.word	0xe1a00004
    a2a0:	e1a01003 	.word	0xe1a01003
    a2a4:	eb000b8f 	.word	0xeb000b8f
    a2a8:	e1a03000 	.word	0xe1a03000
    a2ac:	e1a02003 	.word	0xe1a02003
    a2b0:	e59f3550 	.word	0xe59f3550
    a2b4:	e5832000 	.word	0xe5832000
    a2b8:	e59f3540 	.word	0xe59f3540
    a2bc:	e5932000 	.word	0xe5932000
    a2c0:	e59f3538 	.word	0xe59f3538
    a2c4:	e5933000 	.word	0xe5933000
    a2c8:	e1a00002 	.word	0xe1a00002
    a2cc:	e1a01003 	.word	0xe1a01003
    a2d0:	eb000c2d 	.word	0xeb000c2d
    a2d4:	e1a03000 	.word	0xe1a03000
    a2d8:	e1a04003 	.word	0xe1a04003
    a2dc:	e59f3520 	.word	0xe59f3520
    a2e0:	e5932000 	.word	0xe5932000
    a2e4:	e59f3518 	.word	0xe59f3518
    a2e8:	e5933000 	.word	0xe5933000
    a2ec:	e1a00002 	.word	0xe1a00002
    a2f0:	e1a01003 	.word	0xe1a01003
    a2f4:	eb000c24 	.word	0xeb000c24
    a2f8:	e1a03000 	.word	0xe1a03000
    a2fc:	e1a00004 	.word	0xe1a00004
    a300:	e1a01003 	.word	0xe1a01003
    a304:	eb000b78 	.word	0xeb000b78
    a308:	e1a03000 	.word	0xe1a03000
    a30c:	e1a00003 	.word	0xe1a00003
    a310:	ebfff560 	.word	0xebfff560
    a314:	e1a03000 	.word	0xe1a03000
    a318:	e1a04001 	.word	0xe1a04001
    a31c:	e1a00003 	.word	0xe1a00003
    a320:	e1a01004 	.word	0xe1a01004
    a324:	eb000d40 	.word	0xeb000d40
    a328:	e1a03000 	.word	0xe1a03000
    a32c:	e1a04001 	.word	0xe1a04001
    a330:	e1a00003 	.word	0xe1a00003
    a334:	e1a01004 	.word	0xe1a01004
    a338:	eb000b40 	.word	0xeb000b40
    a33c:	e1a02000 	.word	0xe1a02000
    a340:	e59f34c4 	.word	0xe59f34c4
    a344:	e5832000 	.word	0xe5832000
    a348:	e59f34bc 	.word	0xe59f34bc
    a34c:	e5932000 	.word	0xe5932000
    a350:	e59f34b4 	.word	0xe59f34b4
    a354:	e5933000 	.word	0xe5933000
    a358:	e1a00002 	.word	0xe1a00002
    a35c:	e1a01003 	.word	0xe1a01003
    a360:	eb000c09 	.word	0xeb000c09
    a364:	e1a03000 	.word	0xe1a03000
    a368:	e1a04003 	.word	0xe1a04003
    a36c:	e59f3494 	.word	0xe59f3494
    a370:	e5932000 	.word	0xe5932000
    a374:	e59f348c 	.word	0xe59f348c
    a378:	e5933000 	.word	0xe5933000
    a37c:	e1a00002 	.word	0xe1a00002
    a380:	e1a01003 	.word	0xe1a01003
    a384:	eb000c00 	.word	0xeb000c00
    a388:	e1a03000 	.word	0xe1a03000
    a38c:	e1a00004 	.word	0xe1a00004
    a390:	e1a01003 	.word	0xe1a01003
    a394:	eb000b54 	.word	0xeb000b54
    a398:	e1a03000 	.word	0xe1a03000
    a39c:	e1a00003 	.word	0xe1a00003
    a3a0:	ebfff53c 	.word	0xebfff53c
    a3a4:	e1a03000 	.word	0xe1a03000
    a3a8:	e1a04001 	.word	0xe1a04001
    a3ac:	e1a00003 	.word	0xe1a00003
    a3b0:	e1a01004 	.word	0xe1a01004
    a3b4:	eb000d1c 	.word	0xeb000d1c
    a3b8:	e1a03000 	.word	0xe1a03000
    a3bc:	e1a04001 	.word	0xe1a04001
    a3c0:	e1a00003 	.word	0xe1a00003
    a3c4:	e1a01004 	.word	0xe1a01004
    a3c8:	eb000b1c 	.word	0xeb000b1c
    a3cc:	e1a02000 	.word	0xe1a02000
    a3d0:	e59b3014 	.word	0xe59b3014
    a3d4:	e5832000 	.word	0xe5832000
    a3d8:	e59f3424 	.word	0xe59f3424
    a3dc:	e5933000 	.word	0xe5933000
    a3e0:	e1a00003 	.word	0xe1a00003
    a3e4:	ebfff52b 	.word	0xebfff52b
    a3e8:	e1a05000 	.word	0xe1a05000
    a3ec:	e1a06001 	.word	0xe1a06001
    a3f0:	e59f3408 	.word	0xe59f3408
    a3f4:	e5933000 	.word	0xe5933000
    a3f8:	e1a00003 	.word	0xe1a00003
    a3fc:	ebfff525 	.word	0xebfff525
    a400:	e1a03000 	.word	0xe1a03000
    a404:	e1a04001 	.word	0xe1a04001
    a408:	e1a00005 	.word	0xe1a00005
    a40c:	e1a01006 	.word	0xe1a01006
    a410:	e1a02003 	.word	0xe1a02003
    a414:	e1a03004 	.word	0xe1a03004
    a418:	eb000d09 	.word	0xeb000d09
    a41c:	e1a05000 	.word	0xe1a05000
    a420:	e1a06001 	.word	0xe1a06001
    a424:	e59f33e4 	.word	0xe59f33e4
    a428:	e5933000 	.word	0xe5933000
    a42c:	e1a00003 	.word	0xe1a00003
    a430:	ebfff518 	.word	0xebfff518
    a434:	e1a03000 	.word	0xe1a03000
    a438:	e1a04001 	.word	0xe1a04001
    a43c:	e1a00005 	.word	0xe1a00005
    a440:	e1a01006 	.word	0xe1a01006
    a444:	e1a02003 	.word	0xe1a02003
    a448:	e1a03004 	.word	0xe1a03004
    a44c:	ebfff5e5 	.word	0xebfff5e5
    a450:	e1a03000 	.word	0xe1a03000
    a454:	e1a04001 	.word	0xe1a04001
    a458:	e1a00003 	.word	0xe1a00003
    a45c:	e1a01004 	.word	0xe1a01004
    a460:	eb000af6 	.word	0xeb000af6
    a464:	e1a02000 	.word	0xe1a02000
    a468:	e59b300c 	.word	0xe59b300c
    a46c:	e5832000 	.word	0xe5832000
    a470:	e59f3390 	.word	0xe59f3390
    a474:	e5933000 	.word	0xe5933000
    a478:	e1a00003 	.word	0xe1a00003
    a47c:	ebfff505 	.word	0xebfff505
    a480:	e1a05000 	.word	0xe1a05000
    a484:	e1a06001 	.word	0xe1a06001
    a488:	e59f337c 	.word	0xe59f337c
    a48c:	e5933000 	.word	0xe5933000
    a490:	e1a00003 	.word	0xe1a00003
    a494:	ebfff4ff 	.word	0xebfff4ff
    a498:	e1a03000 	.word	0xe1a03000
    a49c:	e1a04001 	.word	0xe1a04001
    a4a0:	e1a00005 	.word	0xe1a00005
    a4a4:	e1a01006 	.word	0xe1a01006
    a4a8:	e1a02003 	.word	0xe1a02003
    a4ac:	e1a03004 	.word	0xe1a03004
    a4b0:	eb000ce3 	.word	0xeb000ce3
    a4b4:	e1a05000 	.word	0xe1a05000
    a4b8:	e1a06001 	.word	0xe1a06001
    a4bc:	e59f334c 	.word	0xe59f334c
    a4c0:	e5933000 	.word	0xe5933000
    a4c4:	e1a00003 	.word	0xe1a00003
    a4c8:	ebfff4f2 	.word	0xebfff4f2
    a4cc:	e1a03000 	.word	0xe1a03000
    a4d0:	e1a04001 	.word	0xe1a04001
    a4d4:	e1a00005 	.word	0xe1a00005
    a4d8:	e1a01006 	.word	0xe1a01006
    a4dc:	e1a02003 	.word	0xe1a02003
    a4e0:	e1a03004 	.word	0xe1a03004
    a4e4:	ebfff5bf 	.word	0xebfff5bf
    a4e8:	e1a03000 	.word	0xe1a03000
    a4ec:	e1a04001 	.word	0xe1a04001
    a4f0:	e1a00003 	.word	0xe1a00003
    a4f4:	e1a01004 	.word	0xe1a01004
    a4f8:	eb000ad0 	.word	0xeb000ad0
    a4fc:	e1a02000 	.word	0xe1a02000
    a500:	e59b3010 	.word	0xe59b3010
    a504:	e5832000 	.word	0xe5832000
    a508:	e59b2018 	.word	0xe59b2018
    a50c:	e59f3300 	.word	0xe59f3300
    a510:	e5823000 	.word	0xe5823000
    a514:	e51b302c 	.word	0xe51b302c
    a518:	e3c33102 	.word	0xe3c33102
    a51c:	e1a00003 	.word	0xe1a00003
    a520:	e59f12f0 	.word	0xe59f12f0
    a524:	eb000c56 	.word	0xeb000c56
    a528:	e1a03000 	.word	0xe1a03000
    a52c:	e3530000 	.word	0xe3530000
    a530:	aa000000 	.word	0xaa000000
    a534:	ea000083 	.word	0xea000083
    a538:	e51b002c 	.word	0xe51b002c
    a53c:	e59f1290 	.word	0xe59f1290
    a540:	eb000c4f 	.word	0xeb000c4f
    a544:	e1a03000 	.word	0xe1a03000
    a548:	e3530000 	.word	0xe3530000
    a54c:	ca000000 	.word	0xca000000
    a550:	ea00000f 	.word	0xea00000f
    a554:	e59b0004 	.word	0xe59b0004
    a558:	e59f1274 	.word	0xe59f1274
    a55c:	eb000c48 	.word	0xeb000c48
    a560:	e1a03000 	.word	0xe1a03000
    a564:	e3530000 	.word	0xe3530000
    a568:	aa000000 	.word	0xaa000000
    a56c:	ea000008 	.word	0xea000008
    a570:	e59b300c 	.word	0xe59b300c
    a574:	e5933000 	.word	0xe5933000
    a578:	e1a00003 	.word	0xe1a00003
    a57c:	e59b1004 	.word	0xe59b1004
    a580:	eb000ad8 	.word	0xeb000ad8
    a584:	e1a03000 	.word	0xe1a03000
    a588:	e1a02003 	.word	0xe1a02003
    a58c:	e59b3018 	.word	0xe59b3018
    a590:	e5832000 	.word	0xe5832000
    a594:	e51b002c 	.word	0xe51b002c
    a598:	e59f1234 	.word	0xe59f1234
    a59c:	eb000c38 	.word	0xeb000c38
    a5a0:	e1a03000 	.word	0xe1a03000
    a5a4:	e3530000 	.word	0xe3530000
    a5a8:	ca000000 	.word	0xca000000
    a5ac:	ea000011 	.word	0xea000011
    a5b0:	e59b0004 	.word	0xe59b0004
    a5b4:	e59f1218 	.word	0xe59f1218
    a5b8:	eb000c33 	.word	0xeb000c33
    a5bc:	e1a03000 	.word	0xe1a03000
    a5c0:	e3530000 	.word	0xe3530000
    a5c4:	ba000000 	.word	0xba000000
    a5c8:	ea00000a 	.word	0xea00000a
    a5cc:	e59b300c 	.word	0xe59b300c
    a5d0:	e5932000 	.word	0xe5932000
    a5d4:	e59b3004 	.word	0xe59b3004
    a5d8:	e3c33102 	.word	0xe3c33102
    a5dc:	e1a00002 	.word	0xe1a00002
    a5e0:	e1a01003 	.word	0xe1a01003
    a5e4:	eb000ac0 	.word	0xeb000ac0
    a5e8:	e1a03000 	.word	0xe1a03000
    a5ec:	e1a02003 	.word	0xe1a02003
    a5f0:	e59b3018 	.word	0xe59b3018
    a5f4:	e5832000 	.word	0xe5832000
    a5f8:	e51b002c 	.word	0xe51b002c
    a5fc:	e59f11d0 	.word	0xe59f11d0
    a600:	eb000c21 	.word	0xeb000c21
    a604:	e1a03000 	.word	0xe1a03000
    a608:	e3530000 	.word	0xe3530000
    a60c:	ba000000 	.word	0xba000000
    a610:	ea00000f 	.word	0xea00000f
    a614:	e59b0004 	.word	0xe59b0004
    a618:	e59f11b4 	.word	0xe59f11b4
    a61c:	eb000c18 	.word	0xeb000c18
    a620:	e1a03000 	.word	0xe1a03000
    a624:	e3530000 	.word	0xe3530000
    a628:	aa000000 	.word	0xaa000000
    a62c:	ea000008 	.word	0xea000008
    a630:	e59b300c 	.word	0xe59b300c
    a634:	e5933000 	.word	0xe5933000
    a638:	e1a00003 	.word	0xe1a00003
    a63c:	e59b1004 	.word	0xe59b1004
    a640:	eb000aa9 	.word	0xeb000aa9
    a644:	e1a03000 	.word	0xe1a03000
    a648:	e1a02003 	.word	0xe1a02003
    a64c:	e59b3018 	.word	0xe59b3018
    a650:	e5832000 	.word	0xe5832000
    a654:	e51b002c 	.word	0xe51b002c
    a658:	e59f1174 	.word	0xe59f1174
    a65c:	eb000c0a 	.word	0xeb000c0a
    a660:	e1a03000 	.word	0xe1a03000
    a664:	e3530000 	.word	0xe3530000
    a668:	ba000000 	.word	0xba000000
    a66c:	ea000011 	.word	0xea000011
    a670:	e59b0004 	.word	0xe59b0004
    a674:	e59f1158 	.word	0xe59f1158
    a678:	eb000c03 	.word	0xeb000c03
    a67c:	e1a03000 	.word	0xe1a03000
    a680:	e3530000 	.word	0xe3530000
    a684:	ba000000 	.word	0xba000000
    a688:	ea00000a 	.word	0xea00000a
    a68c:	e59b300c 	.word	0xe59b300c
    a690:	e5932000 	.word	0xe5932000
    a694:	e59b3004 	.word	0xe59b3004
    a698:	e3c33102 	.word	0xe3c33102
    a69c:	e1a00002 	.word	0xe1a00002
    a6a0:	e1a01003 	.word	0xe1a01003
    a6a4:	eb000a8f 	.word	0xeb000a8f
    a6a8:	e1a03000 	.word	0xe1a03000
    a6ac:	e1a02003 	.word	0xe1a02003
    a6b0:	e59b3018 	.word	0xe59b3018
    a6b4:	e5832000 	.word	0xe5832000
    a6b8:	e59b3018 	.word	0xe59b3018
    a6bc:	e5933000 	.word	0xe5933000
    a6c0:	e1a00003 	.word	0xe1a00003
    a6c4:	e59f1150 	.word	0xe59f1150
    a6c8:	eb000bed 	.word	0xeb000bed
    a6cc:	e1a03000 	.word	0xe1a03000
    a6d0:	e3530000 	.word	0xe3530000
    a6d4:	ca000000 	.word	0xca000000
    a6d8:	ea000008 	.word	0xea000008
    a6dc:	e59b3018 	.word	0xe59b3018
    a6e0:	e5933000 	.word	0xe5933000
    a6e4:	e1a00003 	.word	0xe1a00003
    a6e8:	e59f1130 	.word	0xe59f1130
    a6ec:	eb000a7d 	.word	0xeb000a7d
    a6f0:	e1a03000 	.word	0xe1a03000
    a6f4:	e1a02003 	.word	0xe1a02003
    a6f8:	e59b3018 	.word	0xe59b3018
    a6fc:	e5832000 	.word	0xe5832000
    a700:	e59b3018 	.word	0xe59b3018
    a704:	e5933000 	.word	0xe5933000
    a708:	e1a00003 	.word	0xe1a00003
    a70c:	e59f1110 	.word	0xe59f1110
    a710:	eb000bdd 	.word	0xeb000bdd
    a714:	e1a03000 	.word	0xe1a03000
    a718:	e3530000 	.word	0xe3530000
    a71c:	ba000000 	.word	0xba000000
    a720:	ea000008 	.word	0xea000008
    a724:	e59b3018 	.word	0xe59b3018
    a728:	e5933000 	.word	0xe5933000
    a72c:	e1a00003 	.word	0xe1a00003
    a730:	e59f10e8 	.word	0xe59f10e8
    a734:	eb000a6c 	.word	0xeb000a6c
    a738:	e1a03000 	.word	0xe1a03000
    a73c:	e1a02003 	.word	0xe1a02003
    a740:	e59b3018 	.word	0xe59b3018
    a744:	e5832000 	.word	0xe5832000
    a748:	e59f20d8 	.word	0xe59f20d8
    a74c:	e59b3008 	.word	0xe59b3008
    a750:	e5823000 	.word	0xe5823000
    a754:	e59f20d0 	.word	0xe59f20d0
    a758:	e51b3028 	.word	0xe51b3028
    a75c:	e5823000 	.word	0xe5823000
    a760:	e59f20c8 	.word	0xe59f20c8
    a764:	e51b302c 	.word	0xe51b302c
    a768:	e5823000 	.word	0xe5823000
    a76c:	e59f20c0 	.word	0xe59f20c0
    a770:	e59b3004 	.word	0xe59b3004
    a774:	e5823000 	.word	0xe5823000
    a778:	e24bd01c 	.word	0xe24bd01c
    a77c:	e89d68f0 	.word	0xe89d68f0
    a780:	e12fff1e 	.word	0xe12fff1e
    a784:	400016b8 	.word	0x400016b8
    a788:	400016b4 	.word	0x400016b4
    a78c:	40000018 	.word	0x40000018
    a790:	400002bc 	.word	0x400002bc
    a794:	40000ac4 	.word	0x40000ac4
    a798:	400013fc 	.word	0x400013fc
    a79c:	40000014 	.word	0x40000014
    a7a0:	40000a74 	.word	0x40000a74
    a7a4:	40000a60 	.word	0x40000a60
    a7a8:	40000e4c 	.word	0x40000e4c
    a7ac:	40000a5c 	.word	0x40000a5c
    a7b0:	40000e80 	.word	0x40000e80
    a7b4:	40000a58 	.word	0x40000a58
    a7b8:	40000a6c 	.word	0x40000a6c
    a7bc:	40001158 	.word	0x40001158
    a7c0:	40000de4 	.word	0x40000de4
    a7c4:	40000a68 	.word	0x40000a68
    a7c8:	40000e18 	.word	0x40000e18
    a7cc:	40000a70 	.word	0x40000a70
    a7d0:	40000a90 	.word	0x40000a90
    a7d4:	00000000 	.word	0x00000000
    a7d8:	40000db0 	.word	0x40000db0
    a7dc:	40000a94 	.word	0x40000a94
    a7e0:	40000b0c 	.word	0x40000b0c
    a7e4:	40000a54 	.word	0x40000a54
    a7e8:	40000a64 	.word	0x40000a64
    a7ec:	400016a0 	.word	0x400016a0
    a7f0:	400016a4 	.word	0x400016a4
    a7f4:	400016bc 	.word	0x400016bc
    a7f8:	40000a80 	.word	0x40000a80
    a7fc:	40000a7c 	.word	0x40000a7c
    a800:	40000a50 	.word	0x40000a50
    a804:	40000a4c 	.word	0x40000a4c
    a808:	40000a48 	.word	0x40000a48
    a80c:	40000a44 	.word	0x40000a44
    a810:	40000b04 	.word	0x40000b04
    a814:	c479c000 	.word	0xc479c000
    a818:	425c0000 	.word	0x425c0000
    a81c:	43340000 	.word	0x43340000
    a820:	43b40000 	.word	0x43b40000
    a824:	c3340000 	.word	0xc3340000
    a828:	40000ad4 	.word	0x40000ad4
    a82c:	40000ad0 	.word	0x40000ad0
    a830:	40000acc 	.word	0x40000acc
    a834:	40000ac8 	.word	0x40000ac8

0000a838 <geomag>:
    a838:	e1a0c00d 	.word	0xe1a0c00d
    a83c:	e92dd800 	.word	0xe92dd800
    a840:	e24cb004 	.word	0xe24cb004
    a844:	e24dd01c 	.word	0xe24dd01c
    a848:	e50b0010 	.word	0xe50b0010
    a84c:	e59f3048 	.word	0xe59f3048
    a850:	e58d3000 	.word	0xe58d3000
    a854:	e59f3040 	.word	0xe59f3040
    a858:	e58d3004 	.word	0xe58d3004
    a85c:	e3a03000 	.word	0xe3a03000
    a860:	e58d3008 	.word	0xe58d3008
    a864:	e3a03000 	.word	0xe3a03000
    a868:	e58d300c 	.word	0xe58d300c
    a86c:	e3a03000 	.word	0xe3a03000
    a870:	e58d3010 	.word	0xe58d3010
    a874:	e3a03000 	.word	0xe3a03000
    a878:	e58d3014 	.word	0xe58d3014
    a87c:	e3a00000 	.word	0xe3a00000
    a880:	e51b1010 	.word	0xe51b1010
    a884:	e59f2010 	.word	0xe59f2010
    a888:	e59f300c 	.word	0xe59f300c
    a88c:	ebfff558 	.word	0xebfff558
    a890:	e24bd00c 	.word	0xe24bd00c
    a894:	e89d6800 	.word	0xe89d6800
    a898:	e12fff1e 	.word	0xe12fff1e
    a89c:	00000000 	.word	0x00000000

0000a8a0 <geomg1>:
    a8a0:	e1a0c00d 	.word	0xe1a0c00d
    a8a4:	e92dd800 	.word	0xe92dd800
    a8a8:	e24cb004 	.word	0xe24cb004
    a8ac:	e24dd028 	.word	0xe24dd028
    a8b0:	e50b0010 	.word	0xe50b0010
    a8b4:	e50b1014 	.word	0xe50b1014
    a8b8:	e50b2018 	.word	0xe50b2018
    a8bc:	e50b301c 	.word	0xe50b301c
    a8c0:	e51b3018 	.word	0xe51b3018
    a8c4:	e58d3000 	.word	0xe58d3000
    a8c8:	e51b301c 	.word	0xe51b301c
    a8cc:	e58d3004 	.word	0xe58d3004
    a8d0:	e59b3004 	.word	0xe59b3004
    a8d4:	e58d3008 	.word	0xe58d3008
    a8d8:	e59b3008 	.word	0xe59b3008
    a8dc:	e58d300c 	.word	0xe58d300c
    a8e0:	e59b300c 	.word	0xe59b300c
    a8e4:	e58d3010 	.word	0xe58d3010
    a8e8:	e59b3010 	.word	0xe59b3010
    a8ec:	e58d3014 	.word	0xe58d3014
    a8f0:	e3a00001 	.word	0xe3a00001
    a8f4:	e3a01000 	.word	0xe3a01000
    a8f8:	e51b2010 	.word	0xe51b2010
    a8fc:	e51b3014 	.word	0xe51b3014
    a900:	ebfff53b 	.word	0xebfff53b
    a904:	e24bd00c 	.word	0xe24bd00c
    a908:	e89d6800 	.word	0xe89d6800
    a90c:	e12fff1e 	.word	0xe12fff1e

0000a910 <getDeclination>:
    a910:	e1a0c00d 	.word	0xe1a0c00d
    a914:	e92dd9f0 	.word	0xe92dd9f0
    a918:	e24cb004 	.word	0xe24cb004
    a91c:	e24dd060 	.word	0xe24dd060
    a920:	e50b0060 	.word	0xe50b0060
    a924:	e50b1064 	.word	0xe50b1064
    a928:	e50b2068 	.word	0xe50b2068
    a92c:	e50b306c 	.word	0xe50b306c
    a930:	e59f36ac 	.word	0xe59f36ac
    a934:	e50b3038 	.word	0xe50b3038
    a938:	e59f36a8 	.word	0xe59f36a8
    a93c:	e50b3034 	.word	0xe50b3034
    a940:	e59f36a4 	.word	0xe59f36a4
    a944:	e50b302c 	.word	0xe50b302c
    a948:	e59f26a0 	.word	0xe59f26a0
    a94c:	e3a0300c 	.word	0xe3a0300c
    a950:	e5823000 	.word	0xe5823000
    a954:	e3a03000 	.word	0xe3a03000
    a958:	e50b305c 	.word	0xe50b305c
    a95c:	e59f3690 	.word	0xe59f3690
    a960:	e50b3028 	.word	0xe50b3028
    a964:	e3a03000 	.word	0xe3a03000
    a968:	e50b3058 	.word	0xe50b3058
    a96c:	e59f3680 	.word	0xe59f3680
    a970:	e50b3024 	.word	0xe50b3024
    a974:	e3a03000 	.word	0xe3a03000
    a978:	e50b3054 	.word	0xe50b3054
    a97c:	e59f066c 	.word	0xe59f066c
    a980:	ebffffac 	.word	0xebffffac
    a984:	e51b0060 	.word	0xe51b0060
    a988:	eb000a48 	.word	0xeb000a48
    a98c:	e1a03000 	.word	0xe1a03000
    a990:	e1a00003 	.word	0xe1a00003
    a994:	e59f165c 	.word	0xe59f165c
    a998:	eb000ae1 	.word	0xeb000ae1
    a99c:	e1a03000 	.word	0xe1a03000
    a9a0:	e1a02003 	.word	0xe1a02003
    a9a4:	e59f3650 	.word	0xe59f3650
    a9a8:	e5832000 	.word	0xe5832000
    a9ac:	e51b0064 	.word	0xe51b0064
    a9b0:	eb000a3e 	.word	0xeb000a3e
    a9b4:	e1a03000 	.word	0xe1a03000
    a9b8:	e1a00003 	.word	0xe1a00003
    a9bc:	e59f1634 	.word	0xe59f1634
    a9c0:	eb000ad7 	.word	0xeb000ad7
    a9c4:	e1a03000 	.word	0xe1a03000
    a9c8:	e1a02003 	.word	0xe1a02003
    a9cc:	e59f362c 	.word	0xe59f362c
    a9d0:	e5832000 	.word	0xe5832000
    a9d4:	e51b0068 	.word	0xe51b0068
    a9d8:	eb000a34 	.word	0xeb000a34
    a9dc:	e1a02000 	.word	0xe1a02000
    a9e0:	e59f361c 	.word	0xe59f361c
    a9e4:	e5832000 	.word	0xe5832000
    a9e8:	e59f3614 	.word	0xe59f3614
    a9ec:	e5933000 	.word	0xe5933000
    a9f0:	e1a00003 	.word	0xe1a00003
    a9f4:	e59f160c 	.word	0xe59f160c
    a9f8:	eb000ac9 	.word	0xeb000ac9
    a9fc:	e1a03000 	.word	0xe1a03000
    aa00:	e1a02003 	.word	0xe1a02003
    aa04:	e59f3600 	.word	0xe59f3600
    aa08:	e5832000 	.word	0xe5832000
    aa0c:	e51b0034 	.word	0xe51b0034
    aa10:	e51b102c 	.word	0xe51b102c
    aa14:	eb0009b4 	.word	0xeb0009b4
    aa18:	e1a03000 	.word	0xe1a03000
    aa1c:	e50b3030 	.word	0xe50b3030
    aa20:	e51b006c 	.word	0xe51b006c
    aa24:	eb000a21 	.word	0xeb000a21
    aa28:	e1a02000 	.word	0xe1a02000
    aa2c:	e59f35dc 	.word	0xe59f35dc
    aa30:	e5832000 	.word	0xe5832000
    aa34:	e59f35d0 	.word	0xe59f35d0
    aa38:	e5932000 	.word	0xe5932000
    aa3c:	e59f35b8 	.word	0xe59f35b8
    aa40:	e5931000 	.word	0xe5931000
    aa44:	e59f35b4 	.word	0xe59f35b4
    aa48:	e593c000 	.word	0xe593c000
    aa4c:	e59f35bc 	.word	0xe59f35bc
    aa50:	e593e000 	.word	0xe593e000
    aa54:	e59f35b8 	.word	0xe59f35b8
    aa58:	e58d3000 	.word	0xe58d3000
    aa5c:	e59f35b4 	.word	0xe59f35b4
    aa60:	e58d3004 	.word	0xe58d3004
    aa64:	e59f35b0 	.word	0xe59f35b0
    aa68:	e58d3008 	.word	0xe58d3008
    aa6c:	e59f35ac 	.word	0xe59f35ac
    aa70:	e58d300c 	.word	0xe58d300c
    aa74:	e1a00002 	.word	0xe1a00002
    aa78:	e1a0200c 	.word	0xe1a0200c
    aa7c:	e1a0300e 	.word	0xe1a0300e
    aa80:	ebffff86 	.word	0xebffff86
    aa84:	e59f3584 	.word	0xe59f3584
    aa88:	e5932000 	.word	0xe5932000
    aa8c:	e59f3590 	.word	0xe59f3590
    aa90:	e5832000 	.word	0xe5832000
    aa94:	e59f3578 	.word	0xe59f3578
    aa98:	e5932000 	.word	0xe5932000
    aa9c:	e59f3584 	.word	0xe59f3584
    aaa0:	e5832000 	.word	0xe5832000
    aaa4:	e59f356c 	.word	0xe59f356c
    aaa8:	e5932000 	.word	0xe5932000
    aaac:	e59f3578 	.word	0xe59f3578
    aab0:	e5832000 	.word	0xe5832000
    aab4:	e59f3560 	.word	0xe59f3560
    aab8:	e5932000 	.word	0xe5932000
    aabc:	e59f356c 	.word	0xe59f356c
    aac0:	e5832000 	.word	0xe5832000
    aac4:	e59f3564 	.word	0xe59f3564
    aac8:	e5933000 	.word	0xe5933000
    aacc:	e1a00003 	.word	0xe1a00003
    aad0:	ebfff370 	.word	0xebfff370
    aad4:	e1a07000 	.word	0xe1a07000
    aad8:	e1a08001 	.word	0xe1a08001
    aadc:	e59f3544 	.word	0xe59f3544
    aae0:	e5933000 	.word	0xe5933000
    aae4:	e1a00003 	.word	0xe1a00003
    aae8:	e51b1038 	.word	0xe51b1038
    aaec:	eb000a26 	.word	0xeb000a26
    aaf0:	e1a03000 	.word	0xe1a03000
    aaf4:	e1a00003 	.word	0xe1a00003
    aaf8:	ebfff366 	.word	0xebfff366
    aafc:	e1a03000 	.word	0xe1a03000
    ab00:	e1a04001 	.word	0xe1a04001
    ab04:	e1a00003 	.word	0xe1a00003
    ab08:	e1a01004 	.word	0xe1a01004
    ab0c:	eb000b40 	.word	0xeb000b40
    ab10:	e1a05000 	.word	0xe1a05000
    ab14:	e1a06001 	.word	0xe1a06001
    ab18:	e59f350c 	.word	0xe59f350c
    ab1c:	e5933000 	.word	0xe5933000
    ab20:	e1a00003 	.word	0xe1a00003
    ab24:	e51b1038 	.word	0xe51b1038
    ab28:	eb000a17 	.word	0xeb000a17
    ab2c:	e1a03000 	.word	0xe1a03000
    ab30:	e1a00003 	.word	0xe1a00003
    ab34:	ebfff357 	.word	0xebfff357
    ab38:	e1a03000 	.word	0xe1a03000
    ab3c:	e1a04001 	.word	0xe1a04001
    ab40:	e1a00003 	.word	0xe1a00003
    ab44:	e1a01004 	.word	0xe1a01004
    ab48:	eb000b31 	.word	0xeb000b31
    ab4c:	e1a03000 	.word	0xe1a03000
    ab50:	e1a04001 	.word	0xe1a04001
    ab54:	e1a00005 	.word	0xe1a00005
    ab58:	e1a01006 	.word	0xe1a01006
    ab5c:	e1a02003 	.word	0xe1a02003
    ab60:	e1a03004 	.word	0xe1a03004
    ab64:	ebfff37b 	.word	0xebfff37b
    ab68:	e1a03000 	.word	0xe1a03000
    ab6c:	e1a04001 	.word	0xe1a04001
    ab70:	e1a00007 	.word	0xe1a00007
    ab74:	e1a01008 	.word	0xe1a01008
    ab78:	e1a02003 	.word	0xe1a02003
    ab7c:	e1a03004 	.word	0xe1a03004
    ab80:	ebfff374 	.word	0xebfff374
    ab84:	e1a03000 	.word	0xe1a03000
    ab88:	e1a04001 	.word	0xe1a04001
    ab8c:	e1a00003 	.word	0xe1a00003
    ab90:	e1a01004 	.word	0xe1a01004
    ab94:	eb000929 	.word	0xeb000929
    ab98:	e1a03000 	.word	0xe1a03000
    ab9c:	e50b3050 	.word	0xe50b3050
    aba0:	e59f3488 	.word	0xe59f3488
    aba4:	e5933000 	.word	0xe5933000
    aba8:	e1a00003 	.word	0xe1a00003
    abac:	ebfff339 	.word	0xebfff339
    abb0:	e1a07000 	.word	0xe1a07000
    abb4:	e1a08001 	.word	0xe1a08001
    abb8:	e59f346c 	.word	0xe59f346c
    abbc:	e5933000 	.word	0xe5933000
    abc0:	e1a00003 	.word	0xe1a00003
    abc4:	e51b1038 	.word	0xe51b1038
    abc8:	eb0009ef 	.word	0xeb0009ef
    abcc:	e1a03000 	.word	0xe1a03000
    abd0:	e1a00003 	.word	0xe1a00003
    abd4:	ebfff32f 	.word	0xebfff32f
    abd8:	e1a03000 	.word	0xe1a03000
    abdc:	e1a04001 	.word	0xe1a04001
    abe0:	e1a00003 	.word	0xe1a00003
    abe4:	e1a01004 	.word	0xe1a01004
    abe8:	eb000b09 	.word	0xeb000b09
    abec:	e1a05000 	.word	0xe1a05000
    abf0:	e1a06001 	.word	0xe1a06001
    abf4:	e59f342c 	.word	0xe59f342c
    abf8:	e5933000 	.word	0xe5933000
    abfc:	e1a00003 	.word	0xe1a00003
    ac00:	e51b1038 	.word	0xe51b1038
    ac04:	eb0009e0 	.word	0xeb0009e0
    ac08:	e1a03000 	.word	0xe1a03000
    ac0c:	e1a00003 	.word	0xe1a00003
    ac10:	ebfff320 	.word	0xebfff320
    ac14:	e1a03000 	.word	0xe1a03000
    ac18:	e1a04001 	.word	0xe1a04001
    ac1c:	e1a00003 	.word	0xe1a00003
    ac20:	e1a01004 	.word	0xe1a01004
    ac24:	eb000b03 	.word	0xeb000b03
    ac28:	e1a03000 	.word	0xe1a03000
    ac2c:	e1a04001 	.word	0xe1a04001
    ac30:	e1a00005 	.word	0xe1a00005
    ac34:	e1a01006 	.word	0xe1a01006
    ac38:	e1a02003 	.word	0xe1a02003
    ac3c:	e1a03004 	.word	0xe1a03004
    ac40:	ebfff344 	.word	0xebfff344
    ac44:	e1a03000 	.word	0xe1a03000
    ac48:	e1a04001 	.word	0xe1a04001
    ac4c:	e1a00007 	.word	0xe1a00007
    ac50:	e1a01008 	.word	0xe1a01008
    ac54:	e1a02003 	.word	0xe1a02003
    ac58:	e1a03004 	.word	0xe1a03004
    ac5c:	ebfff33d 	.word	0xebfff33d
    ac60:	e1a03000 	.word	0xe1a03000
    ac64:	e1a04001 	.word	0xe1a04001
    ac68:	e1a00003 	.word	0xe1a00003
    ac6c:	e1a01004 	.word	0xe1a01004
    ac70:	eb0008f2 	.word	0xeb0008f2
    ac74:	e1a03000 	.word	0xe1a03000
    ac78:	e50b304c 	.word	0xe50b304c
    ac7c:	e59f33ac 	.word	0xe59f33ac
    ac80:	e5933000 	.word	0xe5933000
    ac84:	e1a00003 	.word	0xe1a00003
    ac88:	ebfff302 	.word	0xebfff302
    ac8c:	e1a05000 	.word	0xe1a05000
    ac90:	e1a06001 	.word	0xe1a06001
    ac94:	e59f3390 	.word	0xe59f3390
    ac98:	e5933000 	.word	0xe5933000
    ac9c:	e1a00003 	.word	0xe1a00003
    aca0:	e51b1038 	.word	0xe51b1038
    aca4:	eb0009b8 	.word	0xeb0009b8
    aca8:	e1a03000 	.word	0xe1a03000
    acac:	e1a00003 	.word	0xe1a00003
    acb0:	ebfff2f8 	.word	0xebfff2f8
    acb4:	e1a03000 	.word	0xe1a03000
    acb8:	e1a04001 	.word	0xe1a04001
    acbc:	e1a00003 	.word	0xe1a00003
    acc0:	e1a01004 	.word	0xe1a01004
    acc4:	eb000adb 	.word	0xeb000adb
    acc8:	e1a03000 	.word	0xe1a03000
    accc:	e1a04001 	.word	0xe1a04001
    acd0:	e1a00005 	.word	0xe1a00005
    acd4:	e1a01006 	.word	0xe1a01006
    acd8:	e1a02003 	.word	0xe1a02003
    acdc:	e1a03004 	.word	0xe1a03004
    ace0:	ebfff31c 	.word	0xebfff31c
    ace4:	e1a03000 	.word	0xe1a03000
    ace8:	e1a04001 	.word	0xe1a04001
    acec:	e1a00003 	.word	0xe1a00003
    acf0:	e1a01004 	.word	0xe1a01004
    acf4:	eb0008d1 	.word	0xeb0008d1
    acf8:	e1a03000 	.word	0xe1a03000
    acfc:	e50b3048 	.word	0xe50b3048
    ad00:	e59f3328 	.word	0xe59f3328
    ad04:	e5933000 	.word	0xe5933000
    ad08:	e1a00003 	.word	0xe1a00003
    ad0c:	ebfff2e1 	.word	0xebfff2e1
    ad10:	e1a05000 	.word	0xe1a05000
    ad14:	e1a06001 	.word	0xe1a06001
    ad18:	e59f330c 	.word	0xe59f330c
    ad1c:	e5933000 	.word	0xe5933000
    ad20:	e1a00003 	.word	0xe1a00003
    ad24:	e51b1038 	.word	0xe51b1038
    ad28:	eb000997 	.word	0xeb000997
    ad2c:	e1a03000 	.word	0xe1a03000
    ad30:	e1a00003 	.word	0xe1a00003
    ad34:	ebfff2d7 	.word	0xebfff2d7
    ad38:	e1a03000 	.word	0xe1a03000
    ad3c:	e1a04001 	.word	0xe1a04001
    ad40:	e1a00003 	.word	0xe1a00003
    ad44:	e1a01004 	.word	0xe1a01004
    ad48:	eb000ab1 	.word	0xeb000ab1
    ad4c:	e1a03000 	.word	0xe1a03000
    ad50:	e1a04001 	.word	0xe1a04001
    ad54:	e1a00005 	.word	0xe1a00005
    ad58:	e1a01006 	.word	0xe1a01006
    ad5c:	e1a02003 	.word	0xe1a02003
    ad60:	e1a03004 	.word	0xe1a03004
    ad64:	ebfff2fb 	.word	0xebfff2fb
    ad68:	e1a03000 	.word	0xe1a03000
    ad6c:	e1a04001 	.word	0xe1a04001
    ad70:	e1a00003 	.word	0xe1a00003
    ad74:	e1a01004 	.word	0xe1a01004
    ad78:	eb0008b0 	.word	0xeb0008b0
    ad7c:	e1a03000 	.word	0xe1a03000
    ad80:	e50b3044 	.word	0xe50b3044
    ad84:	e51b0044 	.word	0xe51b0044
    ad88:	e59f12a4 	.word	0xe59f12a4
    ad8c:	eb000a3e 	.word	0xeb000a3e
    ad90:	e1a03000 	.word	0xe1a03000
    ad94:	e3530000 	.word	0xe3530000
    ad98:	ba000000 	.word	0xba000000
    ad9c:	ea000005 	.word	0xea000005
    ada0:	e59f2280 	.word	0xe59f2280
    ada4:	e59f323c 	.word	0xe59f323c
    ada8:	e5823000 	.word	0xe5823000
    adac:	e59f2284 	.word	0xe59f2284
    adb0:	e59f3230 	.word	0xe59f3230
    adb4:	e5823000 	.word	0xe5823000
    adb8:	e51b0044 	.word	0xe51b0044
    adbc:	e59f1244 	.word	0xe59f1244
    adc0:	eb000a31 	.word	0xeb000a31
    adc4:	e1a03000 	.word	0xe1a03000
    adc8:	e3530000 	.word	0xe3530000
    adcc:	ba000000 	.word	0xba000000
    add0:	ea000006 	.word	0xea000006
    add4:	e3a03000 	.word	0xe3a03000
    add8:	e50b305c 	.word	0xe50b305c
    addc:	e3a03001 	.word	0xe3a03001
    ade0:	e50b3058 	.word	0xe50b3058
    ade4:	e51b3044 	.word	0xe51b3044
    ade8:	e50b3024 	.word	0xe50b3024
    adec:	ea00000d 	.word	0xea00000d
    adf0:	e51b0044 	.word	0xe51b0044
    adf4:	e59f1240 	.word	0xe59f1240
    adf8:	eb000a23 	.word	0xeb000a23
    adfc:	e1a03000 	.word	0xe1a03000
    ae00:	e3530000 	.word	0xe3530000
    ae04:	ba000000 	.word	0xba000000
    ae08:	ea000006 	.word	0xea000006
    ae0c:	e51b3058 	.word	0xe51b3058
    ae10:	e3530000 	.word	0xe3530000
    ae14:	1a000003 	.word	0x1a000003
    ae18:	e3a03001 	.word	0xe3a03001
    ae1c:	e50b305c 	.word	0xe50b305c
    ae20:	e51b3044 	.word	0xe51b3044
    ae24:	e50b3028 	.word	0xe50b3028
    ae28:	e59f31cc 	.word	0xe59f31cc
    ae2c:	e5933000 	.word	0xe5933000
    ae30:	e3c33102 	.word	0xe3c33102
    ae34:	e1a00003 	.word	0xe1a00003
    ae38:	ebfff296 	.word	0xebfff296
    ae3c:	e1a03000 	.word	0xe1a03000
    ae40:	e1a04001 	.word	0xe1a04001
    ae44:	e3a00101 	.word	0xe3a00101
    ae48:	e2800856 	.word	0xe2800856
    ae4c:	e2800902 	.word	0xe2800902
    ae50:	e3a01000 	.word	0xe3a01000
    ae54:	e1a02003 	.word	0xe1a02003
    ae58:	e1a03004 	.word	0xe1a03004
    ae5c:	ebfff1b3 	.word	0xebfff1b3
    ae60:	e1a03000 	.word	0xe1a03000
    ae64:	e1a04001 	.word	0xe1a04001
    ae68:	e1a00003 	.word	0xe1a00003
    ae6c:	e1a01004 	.word	0xe1a01004
    ae70:	e28f2f59 	.word	0xe28f2f59
    ae74:	e892000c 	.word	0xe892000c
    ae78:	eb00080b 	.word	0xeb00080b
    ae7c:	e1a03000 	.word	0xe1a03000
    ae80:	e3530000 	.word	0xe3530000
    ae84:	da000000 	.word	0xda000000
    ae88:	ea000013 	.word	0xea000013
    ae8c:	e59f3154 	.word	0xe59f3154
    ae90:	e50b3050 	.word	0xe50b3050
    ae94:	e59f314c 	.word	0xe59f314c
    ae98:	e50b304c 	.word	0xe50b304c
    ae9c:	e59f2184 	.word	0xe59f2184
    aea0:	e59f3140 	.word	0xe59f3140
    aea4:	e5823000 	.word	0xe5823000
    aea8:	e59f3138 	.word	0xe59f3138
    aeac:	e50b3040 	.word	0xe50b3040
    aeb0:	e59f3130 	.word	0xe59f3130
    aeb4:	e50b303c 	.word	0xe50b303c
    aeb8:	e59f2178 	.word	0xe59f2178
    aebc:	e59f3124 	.word	0xe59f3124
    aec0:	e5823000 	.word	0xe5823000
    aec4:	e3a03001 	.word	0xe3a03001
    aec8:	e50b3054 	.word	0xe50b3054
    aecc:	e3a03000 	.word	0xe3a03000
    aed0:	e50b305c 	.word	0xe50b305c
    aed4:	e3a03000 	.word	0xe3a03000
    aed8:	e50b3058 	.word	0xe50b3058
    aedc:	e59b3004 	.word	0xe59b3004
    aee0:	e3a02000 	.word	0xe3a02000
    aee4:	e5832000 	.word	0xe5832000
    aee8:	e51b305c 	.word	0xe51b305c
    aeec:	e3530000 	.word	0xe3530000
    aef0:	0a000004 	.word	0x0a000004
    aef4:	e59b3004 	.word	0xe59b3004
    aef8:	e5933000 	.word	0xe5933000
    aefc:	e3832001 	.word	0xe3832001
    af00:	e59b3004 	.word	0xe59b3004
    af04:	e5832000 	.word	0xe5832000
    af08:	e51b3058 	.word	0xe51b3058
    af0c:	e3530000 	.word	0xe3530000
    af10:	0a000004 	.word	0x0a000004
    af14:	e59b3004 	.word	0xe59b3004
    af18:	e5933000 	.word	0xe5933000
    af1c:	e3832002 	.word	0xe3832002
    af20:	e59b3004 	.word	0xe59b3004
    af24:	e5832000 	.word	0xe5832000
    af28:	e51b3054 	.word	0xe51b3054
    af2c:	e3530000 	.word	0xe3530000
    af30:	0a000007 	.word	0x0a000007
    af34:	e59b3004 	.word	0xe59b3004
    af38:	e5933000 	.word	0xe5933000
    af3c:	e3832004 	.word	0xe3832004
    af40:	e59b3004 	.word	0xe59b3004
    af44:	e5832000 	.word	0xe5832000
    af48:	e3a03000 	.word	0xe3a03000
    af4c:	e50b3070 	.word	0xe50b3070
    af50:	ea00001c 	.word	0xea00001c
    af54:	e59f30d0 	.word	0xe59f30d0
    af58:	e5933000 	.word	0xe5933000
    af5c:	e1a00003 	.word	0xe1a00003
    af60:	ebfff24c 	.word	0xebfff24c
    af64:	e1a03000 	.word	0xe1a03000
    af68:	e1a04001 	.word	0xe1a04001
    af6c:	e1a00003 	.word	0xe1a00003
    af70:	e1a01004 	.word	0xe1a01004
    af74:	e3a02101 	.word	0xe3a02101
    af78:	e2822709 	.word	0xe2822709
    af7c:	e3a03000 	.word	0xe3a03000
    af80:	ebfff274 	.word	0xebfff274
    af84:	e1a03000 	.word	0xe1a03000
    af88:	e1a04001 	.word	0xe1a04001
    af8c:	e1a00003 	.word	0xe1a00003
    af90:	e1a01004 	.word	0xe1a01004
    af94:	eb000812 	.word	0xeb000812
    af98:	e1a02000 	.word	0xe1a02000
    af9c:	e59f309c 	.word	0xe59f309c
    afa0:	e5832000 	.word	0xe5832000
    afa4:	e59f307c 	.word	0xe59f307c
    afa8:	e5933000 	.word	0xe5933000
    afac:	e1a00003 	.word	0xe1a00003
    afb0:	e59f1050 	.word	0xe59f1050
    afb4:	eb0008f4 	.word	0xeb0008f4
    afb8:	e1a03000 	.word	0xe1a03000
    afbc:	e1a00003 	.word	0xe1a00003
    afc0:	eb0009f3 	.word	0xeb0009f3
    afc4:	e50b0070 	.word	0xe50b0070
    afc8:	e51b3070 	.word	0xe51b3070
    afcc:	e1a00003 	.word	0xe1a00003
    afd0:	e24bd020 	.word	0xe24bd020
    afd4:	e89d69f0 	.word	0xe89d69f0
    afd8:	e12fff1e 	.word	0xe12fff1e
    afdc:	3f50624d 	.word	0x3f50624d
    afe0:	d2f1a9fc 	.word	0xd2f1a9fc
    afe4:	3c8efa35 	.word	0x3c8efa35
    afe8:	00000000 	.word	0x00000000
    afec:	40a00000 	.word	0x40a00000
    aff0:	400016f8 	.word	0x400016f8
    aff4:	47c34f80 	.word	0x47c34f80
    aff8:	4b189680 	.word	0x4b189680
    affc:	400016f0 	.word	0x400016f0
    b000:	400016ec 	.word	0x400016ec
    b004:	400016f4 	.word	0x400016f4
    b008:	447a0000 	.word	0x447a0000
    b00c:	400016e4 	.word	0x400016e4
    b010:	400016e0 	.word	0x400016e0
    b014:	400016dc 	.word	0x400016dc
    b018:	400016d8 	.word	0x400016d8
    b01c:	400016d4 	.word	0x400016d4
    b020:	400016d0 	.word	0x400016d0
    b024:	400016cc 	.word	0x400016cc
    b028:	400016c8 	.word	0x400016c8
    b02c:	400016c4 	.word	0x400016c4
    b030:	400016c0 	.word	0x400016c0
    b034:	42c80000 	.word	0x42c80000
    b038:	400016e8 	.word	0x400016e8
    b03c:	459c4000 	.word	0x459c4000
    b040:	40000a3c 	.word	0x40000a3c

0000b044 <cos>:
    b044:	b570      	push	{r4, r5, r6, lr}
    b046:	4a28      	ldr	r2, [pc, #160]	; (b0e8 <cos+0xa4>)
    b048:	4b28      	ldr	r3, [pc, #160]	; (b0ec <cos+0xa8>)
    b04a:	4002      	ands	r2, r0
    b04c:	b085      	sub	sp, #20
    b04e:	1c05      	adds	r5, r0, #0
    b050:	1c0e      	adds	r6, r1, #0
    b052:	429a      	cmp	r2, r3
    b054:	dd23      	ble.n	b09e <cos+0x5a>
    b056:	4b26      	ldr	r3, [pc, #152]	; (b0f0 <cos+0xac>)
    b058:	429a      	cmp	r2, r3
    b05a:	dd0b      	ble.n	b074 <cos+0x30>
    b05c:	1c33      	adds	r3, r6, #0
    b05e:	1c2a      	adds	r2, r5, #0
    b060:	f002 fc12 	bl	d888 <____subdf3_from_thumb>
    b064:	1c03      	adds	r3, r0, #0
    b066:	1c0c      	adds	r4, r1, #0
    b068:	1c18      	adds	r0, r3, #0
    b06a:	1c21      	adds	r1, r4, #0
    b06c:	b005      	add	sp, #20
    b06e:	bc70      	pop	{r4, r5, r6}
    b070:	bc04      	pop	{r2}
    b072:	4710      	bx	r2
    b074:	aa01      	add	r2, sp, #4
    b076:	f000 fa79 	bl	b56c <__ieee754_rem_pio2>
    b07a:	2303      	movs	r3, #3
    b07c:	1c04      	adds	r4, r0, #0
    b07e:	401c      	ands	r4, r3
    b080:	2c01      	cmp	r4, #1
    b082:	d013      	beq.n	b0ac <cos+0x68>
    b084:	2c02      	cmp	r4, #2
    b086:	d028      	beq.n	b0da <cos+0x96>
    b088:	2c00      	cmp	r4, #0
    b08a:	d11b      	bne.n	b0c4 <cos+0x80>
    b08c:	9a03      	ldr	r2, [sp, #12]
    b08e:	9b04      	ldr	r3, [sp, #16]
    b090:	9801      	ldr	r0, [sp, #4]
    b092:	9902      	ldr	r1, [sp, #8]
    b094:	f000 fd76 	bl	bb84 <__kernel_cos>
    b098:	1c03      	adds	r3, r0, #0
    b09a:	1c0c      	adds	r4, r1, #0
    b09c:	e7e4      	b.n	b068 <cos+0x24>
    b09e:	4a15      	ldr	r2, [pc, #84]	; (b0f4 <cos+0xb0>)
    b0a0:	4b15      	ldr	r3, [pc, #84]	; (b0f8 <cos+0xb4>)
    b0a2:	f000 fd6f 	bl	bb84 <__kernel_cos>
    b0a6:	1c03      	adds	r3, r0, #0
    b0a8:	1c0c      	adds	r4, r1, #0
    b0aa:	e7dd      	b.n	b068 <cos+0x24>
    b0ac:	9801      	ldr	r0, [sp, #4]
    b0ae:	9902      	ldr	r1, [sp, #8]
    b0b0:	9a03      	ldr	r2, [sp, #12]
    b0b2:	9b04      	ldr	r3, [sp, #16]
    b0b4:	9400      	str	r4, [sp, #0]
    b0b6:	f001 faf9 	bl	c6ac <__kernel_sin>
    b0ba:	2280      	movs	r2, #128	; 0x80
    b0bc:	0612      	lsls	r2, r2, #24
    b0be:	1883      	adds	r3, r0, r2
    b0c0:	1c0c      	adds	r4, r1, #0
    b0c2:	e7d1      	b.n	b068 <cos+0x24>
    b0c4:	9a03      	ldr	r2, [sp, #12]
    b0c6:	9b04      	ldr	r3, [sp, #16]
    b0c8:	2401      	movs	r4, #1
    b0ca:	9801      	ldr	r0, [sp, #4]
    b0cc:	9902      	ldr	r1, [sp, #8]
    b0ce:	9400      	str	r4, [sp, #0]
    b0d0:	f001 faec 	bl	c6ac <__kernel_sin>
    b0d4:	1c03      	adds	r3, r0, #0
    b0d6:	1c0c      	adds	r4, r1, #0
    b0d8:	e7c6      	b.n	b068 <cos+0x24>
    b0da:	9801      	ldr	r0, [sp, #4]
    b0dc:	9902      	ldr	r1, [sp, #8]
    b0de:	9a03      	ldr	r2, [sp, #12]
    b0e0:	9b04      	ldr	r3, [sp, #16]
    b0e2:	f000 fd4f 	bl	bb84 <__kernel_cos>
    b0e6:	e7e8      	b.n	b0ba <cos+0x76>
    b0e8:	7fffffff 	.word	0x7fffffff
    b0ec:	3fe921fb 	.word	0x3fe921fb
    b0f0:	7fefffff 	.word	0x7fefffff
	...

0000b0fc <sin>:
    b0fc:	b570      	push	{r4, r5, r6, lr}
    b0fe:	4a29      	ldr	r2, [pc, #164]	; (b1a4 <sin+0xa8>)
    b100:	4b29      	ldr	r3, [pc, #164]	; (b1a8 <sin+0xac>)
    b102:	4002      	ands	r2, r0
    b104:	b085      	sub	sp, #20
    b106:	1c05      	adds	r5, r0, #0
    b108:	1c0e      	adds	r6, r1, #0
    b10a:	429a      	cmp	r2, r3
    b10c:	dd24      	ble.n	b158 <sin+0x5c>
    b10e:	4b27      	ldr	r3, [pc, #156]	; (b1ac <sin+0xb0>)
    b110:	429a      	cmp	r2, r3
    b112:	dd0b      	ble.n	b12c <sin+0x30>
    b114:	1c33      	adds	r3, r6, #0
    b116:	1c2a      	adds	r2, r5, #0
    b118:	f002 fbb6 	bl	d888 <____subdf3_from_thumb>
    b11c:	1c03      	adds	r3, r0, #0
    b11e:	1c0c      	adds	r4, r1, #0
    b120:	1c18      	adds	r0, r3, #0
    b122:	1c21      	adds	r1, r4, #0
    b124:	b005      	add	sp, #20
    b126:	bc70      	pop	{r4, r5, r6}
    b128:	bc04      	pop	{r2}
    b12a:	4710      	bx	r2
    b12c:	aa01      	add	r2, sp, #4
    b12e:	f000 fa1d 	bl	b56c <__ieee754_rem_pio2>
    b132:	2303      	movs	r3, #3
    b134:	4018      	ands	r0, r3
    b136:	2801      	cmp	r0, #1
    b138:	d017      	beq.n	b16a <sin+0x6e>
    b13a:	2802      	cmp	r0, #2
    b13c:	d029      	beq.n	b192 <sin+0x96>
    b13e:	2800      	cmp	r0, #0
    b140:	d11c      	bne.n	b17c <sin+0x80>
    b142:	9a03      	ldr	r2, [sp, #12]
    b144:	9b04      	ldr	r3, [sp, #16]
    b146:	2401      	movs	r4, #1
    b148:	9801      	ldr	r0, [sp, #4]
    b14a:	9902      	ldr	r1, [sp, #8]
    b14c:	9400      	str	r4, [sp, #0]
    b14e:	f001 faad 	bl	c6ac <__kernel_sin>
    b152:	1c03      	adds	r3, r0, #0
    b154:	1c0c      	adds	r4, r1, #0
    b156:	e7e3      	b.n	b120 <sin+0x24>
    b158:	2300      	movs	r3, #0
    b15a:	9300      	str	r3, [sp, #0]
    b15c:	4a14      	ldr	r2, [pc, #80]	; (b1b0 <sin+0xb4>)
    b15e:	4b15      	ldr	r3, [pc, #84]	; (b1b4 <sin+0xb8>)
    b160:	f001 faa4 	bl	c6ac <__kernel_sin>
    b164:	1c03      	adds	r3, r0, #0
    b166:	1c0c      	adds	r4, r1, #0
    b168:	e7da      	b.n	b120 <sin+0x24>
    b16a:	9a03      	ldr	r2, [sp, #12]
    b16c:	9b04      	ldr	r3, [sp, #16]
    b16e:	9801      	ldr	r0, [sp, #4]
    b170:	9902      	ldr	r1, [sp, #8]
    b172:	f000 fd07 	bl	bb84 <__kernel_cos>
    b176:	1c03      	adds	r3, r0, #0
    b178:	1c0c      	adds	r4, r1, #0
    b17a:	e7d1      	b.n	b120 <sin+0x24>
    b17c:	9801      	ldr	r0, [sp, #4]
    b17e:	9902      	ldr	r1, [sp, #8]
    b180:	9a03      	ldr	r2, [sp, #12]
    b182:	9b04      	ldr	r3, [sp, #16]
    b184:	f000 fcfe 	bl	bb84 <__kernel_cos>
    b188:	2280      	movs	r2, #128	; 0x80
    b18a:	0612      	lsls	r2, r2, #24
    b18c:	1883      	adds	r3, r0, r2
    b18e:	1c0c      	adds	r4, r1, #0
    b190:	e7c6      	b.n	b120 <sin+0x24>
    b192:	2401      	movs	r4, #1
    b194:	9801      	ldr	r0, [sp, #4]
    b196:	9902      	ldr	r1, [sp, #8]
    b198:	9a03      	ldr	r2, [sp, #12]
    b19a:	9b04      	ldr	r3, [sp, #16]
    b19c:	9400      	str	r4, [sp, #0]
    b19e:	f001 fa85 	bl	c6ac <__kernel_sin>
    b1a2:	e7f1      	b.n	b188 <sin+0x8c>
    b1a4:	7fffffff 	.word	0x7fffffff
    b1a8:	3fe921fb 	.word	0x3fe921fb
    b1ac:	7fefffff 	.word	0x7fefffff
	...

0000b1b8 <atan2>:
    b1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1ba:	4657      	mov	r7, sl
    b1bc:	4646      	mov	r6, r8
    b1be:	b4c0      	push	{r6, r7}
    b1c0:	b08b      	sub	sp, #44	; 0x2c
    b1c2:	1c1d      	adds	r5, r3, #0
    b1c4:	1c06      	adds	r6, r0, #0
    b1c6:	1c0f      	adds	r7, r1, #0
    b1c8:	1c14      	adds	r4, r2, #0
    b1ca:	f000 f8bf 	bl	b34c <__ieee754_atan2>
    b1ce:	4b2a      	ldr	r3, [pc, #168]	; (b278 <atan2+0xc0>)
    b1d0:	681b      	ldr	r3, [r3, #0]
    b1d2:	9000      	str	r0, [sp, #0]
    b1d4:	9101      	str	r1, [sp, #4]
    b1d6:	4698      	mov	r8, r3
    b1d8:	3301      	adds	r3, #1
    b1da:	d005      	beq.n	b1e8 <atan2+0x30>
    b1dc:	1c20      	adds	r0, r4, #0
    b1de:	1c29      	adds	r1, r5, #0
    b1e0:	f001 fda6 	bl	cd30 <isnan>
    b1e4:	2800      	cmp	r0, #0
    b1e6:	d008      	beq.n	b1fa <atan2+0x42>
    b1e8:	9800      	ldr	r0, [sp, #0]
    b1ea:	9901      	ldr	r1, [sp, #4]
    b1ec:	b00b      	add	sp, #44	; 0x2c
    b1ee:	bc0c      	pop	{r2, r3}
    b1f0:	4690      	mov	r8, r2
    b1f2:	469a      	mov	sl, r3
    b1f4:	bcf0      	pop	{r4, r5, r6, r7}
    b1f6:	bc04      	pop	{r2}
    b1f8:	4710      	bx	r2
    b1fa:	1c30      	adds	r0, r6, #0
    b1fc:	1c39      	adds	r1, r7, #0
    b1fe:	f001 fd97 	bl	cd30 <isnan>
    b202:	4682      	mov	sl, r0
    b204:	2800      	cmp	r0, #0
    b206:	d1ef      	bne.n	b1e8 <atan2+0x30>
    b208:	1c20      	adds	r0, r4, #0
    b20a:	1c29      	adds	r1, r5, #0
    b20c:	4a1b      	ldr	r2, [pc, #108]	; (b27c <atan2+0xc4>)
    b20e:	4b1c      	ldr	r3, [pc, #112]	; (b280 <atan2+0xc8>)
    b210:	f002 fb2a 	bl	d868 <____eqdf2_from_thumb>
    b214:	2800      	cmp	r0, #0
    b216:	d1e7      	bne.n	b1e8 <atan2+0x30>
    b218:	1c30      	adds	r0, r6, #0
    b21a:	1c39      	adds	r1, r7, #0
    b21c:	4a17      	ldr	r2, [pc, #92]	; (b27c <atan2+0xc4>)
    b21e:	4b18      	ldr	r3, [pc, #96]	; (b280 <atan2+0xc8>)
    b220:	f002 fb22 	bl	d868 <____eqdf2_from_thumb>
    b224:	2800      	cmp	r0, #0
    b226:	d1df      	bne.n	b1e8 <atan2+0x30>
    b228:	2301      	movs	r3, #1
    b22a:	9302      	str	r3, [sp, #8]
    b22c:	4b15      	ldr	r3, [pc, #84]	; (b284 <atan2+0xcc>)
    b22e:	9406      	str	r4, [sp, #24]
    b230:	9507      	str	r5, [sp, #28]
    b232:	4654      	mov	r4, sl
    b234:	9303      	str	r3, [sp, #12]
    b236:	940a      	str	r4, [sp, #40]	; 0x28
    b238:	4b10      	ldr	r3, [pc, #64]	; (b27c <atan2+0xc4>)
    b23a:	4c11      	ldr	r4, [pc, #68]	; (b280 <atan2+0xc8>)
    b23c:	9308      	str	r3, [sp, #32]
    b23e:	9409      	str	r4, [sp, #36]	; 0x24
    b240:	4644      	mov	r4, r8
    b242:	9604      	str	r6, [sp, #16]
    b244:	9705      	str	r7, [sp, #20]
    b246:	2c02      	cmp	r4, #2
    b248:	d00c      	beq.n	b264 <atan2+0xac>
    b24a:	a802      	add	r0, sp, #8
    b24c:	f001 fd7e 	bl	cd4c <matherr>
    b250:	2800      	cmp	r0, #0
    b252:	d007      	beq.n	b264 <atan2+0xac>
    b254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b256:	2b00      	cmp	r3, #0
    b258:	d109      	bne.n	b26e <atan2+0xb6>
    b25a:	9b08      	ldr	r3, [sp, #32]
    b25c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b25e:	9300      	str	r3, [sp, #0]
    b260:	9401      	str	r4, [sp, #4]
    b262:	e7c1      	b.n	b1e8 <atan2+0x30>
    b264:	f002 fac4 	bl	d7f0 <__errno>
    b268:	2321      	movs	r3, #33	; 0x21
    b26a:	6003      	str	r3, [r0, #0]
    b26c:	e7f2      	b.n	b254 <atan2+0x9c>
    b26e:	f002 fabf 	bl	d7f0 <__errno>
    b272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b274:	6003      	str	r3, [r0, #0]
    b276:	e7f0      	b.n	b25a <atan2+0xa2>
    b278:	0000db34 	.word	0x0000db34
	...
    b284:	0000d90c 	.word	0x0000d90c

0000b288 <sqrt>:
    b288:	b5f0      	push	{r4, r5, r6, r7, lr}
    b28a:	4657      	mov	r7, sl
    b28c:	4646      	mov	r6, r8
    b28e:	b4c0      	push	{r6, r7}
    b290:	b089      	sub	sp, #36	; 0x24
    b292:	1c04      	adds	r4, r0, #0
    b294:	1c0d      	adds	r5, r1, #0
    b296:	f000 fb89 	bl	b9ac <__ieee754_sqrt>
    b29a:	4b28      	ldr	r3, [pc, #160]	; (b33c <sqrt+0xb4>)
    b29c:	681b      	ldr	r3, [r3, #0]
    b29e:	1c06      	adds	r6, r0, #0
    b2a0:	1c0f      	adds	r7, r1, #0
    b2a2:	4698      	mov	r8, r3
    b2a4:	3301      	adds	r3, #1
    b2a6:	d00e      	beq.n	b2c6 <sqrt+0x3e>
    b2a8:	1c20      	adds	r0, r4, #0
    b2aa:	1c29      	adds	r1, r5, #0
    b2ac:	f001 fd40 	bl	cd30 <isnan>
    b2b0:	4682      	mov	sl, r0
    b2b2:	2800      	cmp	r0, #0
    b2b4:	d107      	bne.n	b2c6 <sqrt+0x3e>
    b2b6:	1c20      	adds	r0, r4, #0
    b2b8:	1c29      	adds	r1, r5, #0
    b2ba:	4a21      	ldr	r2, [pc, #132]	; (b340 <sqrt+0xb8>)
    b2bc:	4b21      	ldr	r3, [pc, #132]	; (b344 <sqrt+0xbc>)
    b2be:	f002 facb 	bl	d858 <____ltdf2_from_thumb>
    b2c2:	2800      	cmp	r0, #0
    b2c4:	db08      	blt.n	b2d8 <sqrt+0x50>
    b2c6:	1c30      	adds	r0, r6, #0
    b2c8:	1c39      	adds	r1, r7, #0
    b2ca:	b009      	add	sp, #36	; 0x24
    b2cc:	bc0c      	pop	{r2, r3}
    b2ce:	4690      	mov	r8, r2
    b2d0:	469a      	mov	sl, r3
    b2d2:	bcf0      	pop	{r4, r5, r6, r7}
    b2d4:	bc04      	pop	{r2}
    b2d6:	4710      	bx	r2
    b2d8:	2301      	movs	r3, #1
    b2da:	9300      	str	r3, [sp, #0]
    b2dc:	4b1a      	ldr	r3, [pc, #104]	; (b348 <sqrt+0xc0>)
    b2de:	9404      	str	r4, [sp, #16]
    b2e0:	9505      	str	r5, [sp, #20]
    b2e2:	9301      	str	r3, [sp, #4]
    b2e4:	9402      	str	r4, [sp, #8]
    b2e6:	9503      	str	r5, [sp, #12]
    b2e8:	4653      	mov	r3, sl
    b2ea:	4644      	mov	r4, r8
    b2ec:	9308      	str	r3, [sp, #32]
    b2ee:	2c00      	cmp	r4, #0
    b2f0:	d10e      	bne.n	b310 <sqrt+0x88>
    b2f2:	4b13      	ldr	r3, [pc, #76]	; (b340 <sqrt+0xb8>)
    b2f4:	4c13      	ldr	r4, [pc, #76]	; (b344 <sqrt+0xbc>)
    b2f6:	9306      	str	r3, [sp, #24]
    b2f8:	9407      	str	r4, [sp, #28]
    b2fa:	4668      	mov	r0, sp
    b2fc:	f001 fd26 	bl	cd4c <matherr>
    b300:	2800      	cmp	r0, #0
    b302:	d010      	beq.n	b326 <sqrt+0x9e>
    b304:	9b08      	ldr	r3, [sp, #32]
    b306:	2b00      	cmp	r3, #0
    b308:	d112      	bne.n	b330 <sqrt+0xa8>
    b30a:	9e06      	ldr	r6, [sp, #24]
    b30c:	9f07      	ldr	r7, [sp, #28]
    b30e:	e7da      	b.n	b2c6 <sqrt+0x3e>
    b310:	480b      	ldr	r0, [pc, #44]	; (b340 <sqrt+0xb8>)
    b312:	490c      	ldr	r1, [pc, #48]	; (b344 <sqrt+0xbc>)
    b314:	1c02      	adds	r2, r0, #0
    b316:	1c0b      	adds	r3, r1, #0
    b318:	f002 faa2 	bl	d860 <____divdf3_from_thumb>
    b31c:	4644      	mov	r4, r8
    b31e:	9006      	str	r0, [sp, #24]
    b320:	9107      	str	r1, [sp, #28]
    b322:	2c02      	cmp	r4, #2
    b324:	d1e9      	bne.n	b2fa <sqrt+0x72>
    b326:	f002 fa63 	bl	d7f0 <__errno>
    b32a:	2321      	movs	r3, #33	; 0x21
    b32c:	6003      	str	r3, [r0, #0]
    b32e:	e7e9      	b.n	b304 <sqrt+0x7c>
    b330:	f002 fa5e 	bl	d7f0 <__errno>
    b334:	9b08      	ldr	r3, [sp, #32]
    b336:	6003      	str	r3, [r0, #0]
    b338:	e7e7      	b.n	b30a <sqrt+0x82>
    b33a:	46c0      	nop			; (mov r8, r8)
    b33c:	0000db34 	.word	0x0000db34
	...
    b348:	0000d914 	.word	0x0000d914

0000b34c <__ieee754_atan2>:
    b34c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b34e:	4657      	mov	r7, sl
    b350:	464e      	mov	r6, r9
    b352:	4645      	mov	r5, r8
    b354:	b4e0      	push	{r5, r6, r7}
    b356:	1c1c      	adds	r4, r3, #0
    b358:	1c0e      	adds	r6, r1, #0
    b35a:	496b      	ldr	r1, [pc, #428]	; (b508 <__ieee754_atan2+0x1bc>)
    b35c:	b082      	sub	sp, #8
    b35e:	1c05      	adds	r5, r0, #0
    b360:	1c20      	adds	r0, r4, #0
    b362:	9200      	str	r2, [sp, #0]
    b364:	9301      	str	r3, [sp, #4]
    b366:	4692      	mov	sl, r2
    b368:	4243      	negs	r3, r0
    b36a:	400a      	ands	r2, r1
    b36c:	4690      	mov	r8, r2
    b36e:	4303      	orrs	r3, r0
    b370:	4647      	mov	r7, r8
    b372:	0fdb      	lsrs	r3, r3, #31
    b374:	433b      	orrs	r3, r7
    b376:	4f65      	ldr	r7, [pc, #404]	; (b50c <__ieee754_atan2+0x1c0>)
    b378:	468c      	mov	ip, r1
    b37a:	42bb      	cmp	r3, r7
    b37c:	d80a      	bhi.n	b394 <__ieee754_atan2+0x48>
    b37e:	4273      	negs	r3, r6
    b380:	4662      	mov	r2, ip
    b382:	1c29      	adds	r1, r5, #0
    b384:	4333      	orrs	r3, r6
    b386:	4011      	ands	r1, r2
    b388:	0fdb      	lsrs	r3, r3, #31
    b38a:	430b      	orrs	r3, r1
    b38c:	46a9      	mov	r9, r5
    b38e:	468c      	mov	ip, r1
    b390:	42bb      	cmp	r3, r7
    b392:	d911      	bls.n	b3b8 <__ieee754_atan2+0x6c>
    b394:	1c28      	adds	r0, r5, #0
    b396:	1c31      	adds	r1, r6, #0
    b398:	9a00      	ldr	r2, [sp, #0]
    b39a:	9b01      	ldr	r3, [sp, #4]
    b39c:	f002 fa70 	bl	d880 <____adddf3_from_thumb>
    b3a0:	1c05      	adds	r5, r0, #0
    b3a2:	1c0e      	adds	r6, r1, #0
    b3a4:	1c28      	adds	r0, r5, #0
    b3a6:	1c31      	adds	r1, r6, #0
    b3a8:	b002      	add	sp, #8
    b3aa:	bc1c      	pop	{r2, r3, r4}
    b3ac:	4690      	mov	r8, r2
    b3ae:	4699      	mov	r9, r3
    b3b0:	46a2      	mov	sl, r4
    b3b2:	bcf0      	pop	{r4, r5, r6, r7}
    b3b4:	bc04      	pop	{r2}
    b3b6:	4710      	bx	r2
    b3b8:	4b55      	ldr	r3, [pc, #340]	; (b510 <__ieee754_atan2+0x1c4>)
    b3ba:	4453      	add	r3, sl
    b3bc:	4303      	orrs	r3, r0
    b3be:	d012      	beq.n	b3e6 <__ieee754_atan2+0x9a>
    b3c0:	4651      	mov	r1, sl
    b3c2:	178a      	asrs	r2, r1, #30
    b3c4:	0feb      	lsrs	r3, r5, #31
    b3c6:	2102      	movs	r1, #2
    b3c8:	400a      	ands	r2, r1
    b3ca:	1c1f      	adds	r7, r3, #0
    b3cc:	4317      	orrs	r7, r2
    b3ce:	4662      	mov	r2, ip
    b3d0:	4332      	orrs	r2, r6
    b3d2:	d111      	bne.n	b3f8 <__ieee754_atan2+0xac>
    b3d4:	2f02      	cmp	r7, #2
    b3d6:	d04a      	beq.n	b46e <__ieee754_atan2+0x122>
    b3d8:	2f02      	cmp	r7, #2
    b3da:	dd0b      	ble.n	b3f4 <__ieee754_atan2+0xa8>
    b3dc:	2f03      	cmp	r7, #3
    b3de:	d10b      	bne.n	b3f8 <__ieee754_atan2+0xac>
    b3e0:	4d4c      	ldr	r5, [pc, #304]	; (b514 <__ieee754_atan2+0x1c8>)
    b3e2:	4e4d      	ldr	r6, [pc, #308]	; (b518 <__ieee754_atan2+0x1cc>)
    b3e4:	e7de      	b.n	b3a4 <__ieee754_atan2+0x58>
    b3e6:	1c28      	adds	r0, r5, #0
    b3e8:	1c31      	adds	r1, r6, #0
    b3ea:	f001 fa1f 	bl	c82c <atan>
    b3ee:	1c05      	adds	r5, r0, #0
    b3f0:	1c0e      	adds	r6, r1, #0
    b3f2:	e7d7      	b.n	b3a4 <__ieee754_atan2+0x58>
    b3f4:	2f00      	cmp	r7, #0
    b3f6:	dad5      	bge.n	b3a4 <__ieee754_atan2+0x58>
    b3f8:	4643      	mov	r3, r8
    b3fa:	4303      	orrs	r3, r0
    b3fc:	d105      	bne.n	b40a <__ieee754_atan2+0xbe>
    b3fe:	464f      	mov	r7, r9
    b400:	2f00      	cmp	r7, #0
    b402:	db26      	blt.n	b452 <__ieee754_atan2+0x106>
    b404:	4d45      	ldr	r5, [pc, #276]	; (b51c <__ieee754_atan2+0x1d0>)
    b406:	4e46      	ldr	r6, [pc, #280]	; (b520 <__ieee754_atan2+0x1d4>)
    b408:	e7cc      	b.n	b3a4 <__ieee754_atan2+0x58>
    b40a:	4b40      	ldr	r3, [pc, #256]	; (b50c <__ieee754_atan2+0x1c0>)
    b40c:	4598      	cmp	r8, r3
    b40e:	d023      	beq.n	b458 <__ieee754_atan2+0x10c>
    b410:	4b3e      	ldr	r3, [pc, #248]	; (b50c <__ieee754_atan2+0x1c0>)
    b412:	459c      	cmp	ip, r3
    b414:	d01a      	beq.n	b44c <__ieee754_atan2+0x100>
    b416:	4661      	mov	r1, ip
    b418:	4642      	mov	r2, r8
    b41a:	1a8b      	subs	r3, r1, r2
    b41c:	151b      	asrs	r3, r3, #20
    b41e:	2b3c      	cmp	r3, #60	; 0x3c
    b420:	dd2e      	ble.n	b480 <__ieee754_atan2+0x134>
    b422:	4b3e      	ldr	r3, [pc, #248]	; (b51c <__ieee754_atan2+0x1d0>)
    b424:	4c3e      	ldr	r4, [pc, #248]	; (b520 <__ieee754_atan2+0x1d4>)
    b426:	2f01      	cmp	r7, #1
    b428:	d024      	beq.n	b474 <__ieee754_atan2+0x128>
    b42a:	2f02      	cmp	r7, #2
    b42c:	d038      	beq.n	b4a0 <__ieee754_atan2+0x154>
    b42e:	2f00      	cmp	r7, #0
    b430:	d023      	beq.n	b47a <__ieee754_atan2+0x12e>
    b432:	1c18      	adds	r0, r3, #0
    b434:	1c21      	adds	r1, r4, #0
    b436:	4a3b      	ldr	r2, [pc, #236]	; (b524 <__ieee754_atan2+0x1d8>)
    b438:	4b3b      	ldr	r3, [pc, #236]	; (b528 <__ieee754_atan2+0x1dc>)
    b43a:	f002 fa25 	bl	d888 <____subdf3_from_thumb>
    b43e:	4a3b      	ldr	r2, [pc, #236]	; (b52c <__ieee754_atan2+0x1e0>)
    b440:	4b3b      	ldr	r3, [pc, #236]	; (b530 <__ieee754_atan2+0x1e4>)
    b442:	f002 fa21 	bl	d888 <____subdf3_from_thumb>
    b446:	1c05      	adds	r5, r0, #0
    b448:	1c0e      	adds	r6, r1, #0
    b44a:	e7ab      	b.n	b3a4 <__ieee754_atan2+0x58>
    b44c:	4648      	mov	r0, r9
    b44e:	2800      	cmp	r0, #0
    b450:	dad8      	bge.n	b404 <__ieee754_atan2+0xb8>
    b452:	4d38      	ldr	r5, [pc, #224]	; (b534 <__ieee754_atan2+0x1e8>)
    b454:	4e38      	ldr	r6, [pc, #224]	; (b538 <__ieee754_atan2+0x1ec>)
    b456:	e7a5      	b.n	b3a4 <__ieee754_atan2+0x58>
    b458:	45c4      	cmp	ip, r8
    b45a:	d035      	beq.n	b4c8 <__ieee754_atan2+0x17c>
    b45c:	2f01      	cmp	r7, #1
    b45e:	d03e      	beq.n	b4de <__ieee754_atan2+0x192>
    b460:	2f01      	cmp	r7, #1
    b462:	dd3f      	ble.n	b4e4 <__ieee754_atan2+0x198>
    b464:	2f02      	cmp	r7, #2
    b466:	d002      	beq.n	b46e <__ieee754_atan2+0x122>
    b468:	2f03      	cmp	r7, #3
    b46a:	d1d1      	bne.n	b410 <__ieee754_atan2+0xc4>
    b46c:	e7b8      	b.n	b3e0 <__ieee754_atan2+0x94>
    b46e:	4d2f      	ldr	r5, [pc, #188]	; (b52c <__ieee754_atan2+0x1e0>)
    b470:	4e2f      	ldr	r6, [pc, #188]	; (b530 <__ieee754_atan2+0x1e4>)
    b472:	e797      	b.n	b3a4 <__ieee754_atan2+0x58>
    b474:	2780      	movs	r7, #128	; 0x80
    b476:	063f      	lsls	r7, r7, #24
    b478:	19db      	adds	r3, r3, r7
    b47a:	1c1d      	adds	r5, r3, #0
    b47c:	1c26      	adds	r6, r4, #0
    b47e:	e791      	b.n	b3a4 <__ieee754_atan2+0x58>
    b480:	4650      	mov	r0, sl
    b482:	2800      	cmp	r0, #0
    b484:	db1b      	blt.n	b4be <__ieee754_atan2+0x172>
    b486:	9a00      	ldr	r2, [sp, #0]
    b488:	9b01      	ldr	r3, [sp, #4]
    b48a:	1c28      	adds	r0, r5, #0
    b48c:	1c31      	adds	r1, r6, #0
    b48e:	f002 f9e7 	bl	d860 <____divdf3_from_thumb>
    b492:	f001 fb8b 	bl	cbac <fabs>
    b496:	f001 f9c9 	bl	c82c <atan>
    b49a:	1c03      	adds	r3, r0, #0
    b49c:	1c0c      	adds	r4, r1, #0
    b49e:	e7c2      	b.n	b426 <__ieee754_atan2+0xda>
    b4a0:	1c18      	adds	r0, r3, #0
    b4a2:	1c21      	adds	r1, r4, #0
    b4a4:	4a1f      	ldr	r2, [pc, #124]	; (b524 <__ieee754_atan2+0x1d8>)
    b4a6:	4b20      	ldr	r3, [pc, #128]	; (b528 <__ieee754_atan2+0x1dc>)
    b4a8:	f002 f9ee 	bl	d888 <____subdf3_from_thumb>
    b4ac:	1c02      	adds	r2, r0, #0
    b4ae:	1c0b      	adds	r3, r1, #0
    b4b0:	481e      	ldr	r0, [pc, #120]	; (b52c <__ieee754_atan2+0x1e0>)
    b4b2:	491f      	ldr	r1, [pc, #124]	; (b530 <__ieee754_atan2+0x1e4>)
    b4b4:	f002 f9e8 	bl	d888 <____subdf3_from_thumb>
    b4b8:	1c05      	adds	r5, r0, #0
    b4ba:	1c0e      	adds	r6, r1, #0
    b4bc:	e772      	b.n	b3a4 <__ieee754_atan2+0x58>
    b4be:	333c      	adds	r3, #60	; 0x3c
    b4c0:	dae1      	bge.n	b486 <__ieee754_atan2+0x13a>
    b4c2:	4b1e      	ldr	r3, [pc, #120]	; (b53c <__ieee754_atan2+0x1f0>)
    b4c4:	4c1e      	ldr	r4, [pc, #120]	; (b540 <__ieee754_atan2+0x1f4>)
    b4c6:	e7ae      	b.n	b426 <__ieee754_atan2+0xda>
    b4c8:	2f01      	cmp	r7, #1
    b4ca:	d010      	beq.n	b4ee <__ieee754_atan2+0x1a2>
    b4cc:	2f01      	cmp	r7, #1
    b4ce:	dd14      	ble.n	b4fa <__ieee754_atan2+0x1ae>
    b4d0:	2f02      	cmp	r7, #2
    b4d2:	d00f      	beq.n	b4f4 <__ieee754_atan2+0x1a8>
    b4d4:	2f03      	cmp	r7, #3
    b4d6:	d19b      	bne.n	b410 <__ieee754_atan2+0xc4>
    b4d8:	4d1a      	ldr	r5, [pc, #104]	; (b544 <__ieee754_atan2+0x1f8>)
    b4da:	4e1b      	ldr	r6, [pc, #108]	; (b548 <__ieee754_atan2+0x1fc>)
    b4dc:	e762      	b.n	b3a4 <__ieee754_atan2+0x58>
    b4de:	4d1b      	ldr	r5, [pc, #108]	; (b54c <__ieee754_atan2+0x200>)
    b4e0:	4e1b      	ldr	r6, [pc, #108]	; (b550 <__ieee754_atan2+0x204>)
    b4e2:	e75f      	b.n	b3a4 <__ieee754_atan2+0x58>
    b4e4:	2f00      	cmp	r7, #0
    b4e6:	d193      	bne.n	b410 <__ieee754_atan2+0xc4>
    b4e8:	4d14      	ldr	r5, [pc, #80]	; (b53c <__ieee754_atan2+0x1f0>)
    b4ea:	4e15      	ldr	r6, [pc, #84]	; (b540 <__ieee754_atan2+0x1f4>)
    b4ec:	e75a      	b.n	b3a4 <__ieee754_atan2+0x58>
    b4ee:	4d19      	ldr	r5, [pc, #100]	; (b554 <__ieee754_atan2+0x208>)
    b4f0:	4e19      	ldr	r6, [pc, #100]	; (b558 <__ieee754_atan2+0x20c>)
    b4f2:	e757      	b.n	b3a4 <__ieee754_atan2+0x58>
    b4f4:	4d19      	ldr	r5, [pc, #100]	; (b55c <__ieee754_atan2+0x210>)
    b4f6:	4e1a      	ldr	r6, [pc, #104]	; (b560 <__ieee754_atan2+0x214>)
    b4f8:	e754      	b.n	b3a4 <__ieee754_atan2+0x58>
    b4fa:	2f00      	cmp	r7, #0
    b4fc:	d000      	beq.n	b500 <__ieee754_atan2+0x1b4>
    b4fe:	e787      	b.n	b410 <__ieee754_atan2+0xc4>
    b500:	4d18      	ldr	r5, [pc, #96]	; (b564 <__ieee754_atan2+0x218>)
    b502:	4e19      	ldr	r6, [pc, #100]	; (b568 <__ieee754_atan2+0x21c>)
    b504:	e74e      	b.n	b3a4 <__ieee754_atan2+0x58>
    b506:	46c0      	nop			; (mov r8, r8)
    b508:	7fffffff 	.word	0x7fffffff
    b50c:	7ff00000 	.word	0x7ff00000
    b510:	c0100000 	.word	0xc0100000
    b514:	c00921fb 	.word	0xc00921fb
    b518:	54442d18 	.word	0x54442d18
    b51c:	3ff921fb 	.word	0x3ff921fb
    b520:	54442d18 	.word	0x54442d18
    b524:	3ca1a626 	.word	0x3ca1a626
    b528:	33145c07 	.word	0x33145c07
    b52c:	400921fb 	.word	0x400921fb
    b530:	54442d18 	.word	0x54442d18
    b534:	bff921fb 	.word	0xbff921fb
    b538:	54442d18 	.word	0x54442d18
	...
    b544:	c002d97c 	.word	0xc002d97c
    b548:	7f3321d2 	.word	0x7f3321d2
    b54c:	80000000 	.word	0x80000000
    b550:	00000000 	.word	0x00000000
    b554:	bfe921fb 	.word	0xbfe921fb
    b558:	54442d18 	.word	0x54442d18
    b55c:	4002d97c 	.word	0x4002d97c
    b560:	7f3321d2 	.word	0x7f3321d2
    b564:	3fe921fb 	.word	0x3fe921fb
    b568:	54442d18 	.word	0x54442d18

0000b56c <__ieee754_rem_pio2>:
    b56c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b56e:	465f      	mov	r7, fp
    b570:	4656      	mov	r6, sl
    b572:	464d      	mov	r5, r9
    b574:	4644      	mov	r4, r8
    b576:	b4f0      	push	{r4, r5, r6, r7}
    b578:	4bd2      	ldr	r3, [pc, #840]	; (b8c4 <__ieee754_rem_pio2+0x358>)
    b57a:	1c07      	adds	r7, r0, #0
    b57c:	401f      	ands	r7, r3
    b57e:	4bd2      	ldr	r3, [pc, #840]	; (b8c8 <__ieee754_rem_pio2+0x35c>)
    b580:	b08e      	sub	sp, #56	; 0x38
    b582:	1c05      	adds	r5, r0, #0
    b584:	1c0e      	adds	r6, r1, #0
    b586:	4690      	mov	r8, r2
    b588:	4681      	mov	r9, r0
    b58a:	429f      	cmp	r7, r3
    b58c:	dc10      	bgt.n	b5b0 <__ieee754_rem_pio2+0x44>
    b58e:	4bcf      	ldr	r3, [pc, #828]	; (b8cc <__ieee754_rem_pio2+0x360>)
    b590:	4ccf      	ldr	r4, [pc, #828]	; (b8d0 <__ieee754_rem_pio2+0x364>)
    b592:	6015      	str	r5, [r2, #0]
    b594:	6056      	str	r6, [r2, #4]
    b596:	6093      	str	r3, [r2, #8]
    b598:	60d4      	str	r4, [r2, #12]
    b59a:	469a      	mov	sl, r3
    b59c:	4650      	mov	r0, sl
    b59e:	b00e      	add	sp, #56	; 0x38
    b5a0:	bc3c      	pop	{r2, r3, r4, r5}
    b5a2:	4690      	mov	r8, r2
    b5a4:	4699      	mov	r9, r3
    b5a6:	46a2      	mov	sl, r4
    b5a8:	46ab      	mov	fp, r5
    b5aa:	bcf0      	pop	{r4, r5, r6, r7}
    b5ac:	bc02      	pop	{r1}
    b5ae:	4708      	bx	r1
    b5b0:	4bc8      	ldr	r3, [pc, #800]	; (b8d4 <__ieee754_rem_pio2+0x368>)
    b5b2:	429f      	cmp	r7, r3
    b5b4:	dd13      	ble.n	b5de <__ieee754_rem_pio2+0x72>
    b5b6:	4bc8      	ldr	r3, [pc, #800]	; (b8d8 <__ieee754_rem_pio2+0x36c>)
    b5b8:	429f      	cmp	r7, r3
    b5ba:	dd34      	ble.n	b626 <__ieee754_rem_pio2+0xba>
    b5bc:	4bc7      	ldr	r3, [pc, #796]	; (b8dc <__ieee754_rem_pio2+0x370>)
    b5be:	429f      	cmp	r7, r3
    b5c0:	dc00      	bgt.n	b5c4 <__ieee754_rem_pio2+0x58>
    b5c2:	e0eb      	b.n	b79c <__ieee754_rem_pio2+0x230>
    b5c4:	1c2a      	adds	r2, r5, #0
    b5c6:	1c33      	adds	r3, r6, #0
    b5c8:	f002 f95e 	bl	d888 <____subdf3_from_thumb>
    b5cc:	2400      	movs	r4, #0
    b5ce:	4642      	mov	r2, r8
    b5d0:	4643      	mov	r3, r8
    b5d2:	46a2      	mov	sl, r4
    b5d4:	6090      	str	r0, [r2, #8]
    b5d6:	60d1      	str	r1, [r2, #12]
    b5d8:	6018      	str	r0, [r3, #0]
    b5da:	6059      	str	r1, [r3, #4]
    b5dc:	e7de      	b.n	b59c <__ieee754_rem_pio2+0x30>
    b5de:	2800      	cmp	r0, #0
    b5e0:	dc00      	bgt.n	b5e4 <__ieee754_rem_pio2+0x78>
    b5e2:	e0b9      	b.n	b758 <__ieee754_rem_pio2+0x1ec>
    b5e4:	4abe      	ldr	r2, [pc, #760]	; (b8e0 <__ieee754_rem_pio2+0x374>)
    b5e6:	4bbf      	ldr	r3, [pc, #764]	; (b8e4 <__ieee754_rem_pio2+0x378>)
    b5e8:	f002 f94e 	bl	d888 <____subdf3_from_thumb>
    b5ec:	4bbe      	ldr	r3, [pc, #760]	; (b8e8 <__ieee754_rem_pio2+0x37c>)
    b5ee:	1c04      	adds	r4, r0, #0
    b5f0:	1c0d      	adds	r5, r1, #0
    b5f2:	429f      	cmp	r7, r3
    b5f4:	d100      	bne.n	b5f8 <__ieee754_rem_pio2+0x8c>
    b5f6:	e127      	b.n	b848 <__ieee754_rem_pio2+0x2dc>
    b5f8:	4abc      	ldr	r2, [pc, #752]	; (b8ec <__ieee754_rem_pio2+0x380>)
    b5fa:	4bbd      	ldr	r3, [pc, #756]	; (b8f0 <__ieee754_rem_pio2+0x384>)
    b5fc:	f002 f944 	bl	d888 <____subdf3_from_thumb>
    b600:	1c02      	adds	r2, r0, #0
    b602:	1c0b      	adds	r3, r1, #0
    b604:	4641      	mov	r1, r8
    b606:	600a      	str	r2, [r1, #0]
    b608:	604b      	str	r3, [r1, #4]
    b60a:	1c20      	adds	r0, r4, #0
    b60c:	1c29      	adds	r1, r5, #0
    b60e:	f002 f93b 	bl	d888 <____subdf3_from_thumb>
    b612:	4ab6      	ldr	r2, [pc, #728]	; (b8ec <__ieee754_rem_pio2+0x380>)
    b614:	4bb6      	ldr	r3, [pc, #728]	; (b8f0 <__ieee754_rem_pio2+0x384>)
    b616:	f002 f937 	bl	d888 <____subdf3_from_thumb>
    b61a:	2301      	movs	r3, #1
    b61c:	4642      	mov	r2, r8
    b61e:	469a      	mov	sl, r3
    b620:	6090      	str	r0, [r2, #8]
    b622:	60d1      	str	r1, [r2, #12]
    b624:	e7ba      	b.n	b59c <__ieee754_rem_pio2+0x30>
    b626:	f001 fac1 	bl	cbac <fabs>
    b62a:	4ab2      	ldr	r2, [pc, #712]	; (b8f4 <__ieee754_rem_pio2+0x388>)
    b62c:	4bb2      	ldr	r3, [pc, #712]	; (b8f8 <__ieee754_rem_pio2+0x38c>)
    b62e:	1c0d      	adds	r5, r1, #0
    b630:	1c04      	adds	r4, r0, #0
    b632:	f002 f921 	bl	d878 <____muldf3_from_thumb>
    b636:	4ab1      	ldr	r2, [pc, #708]	; (b8fc <__ieee754_rem_pio2+0x390>)
    b638:	4bb1      	ldr	r3, [pc, #708]	; (b900 <__ieee754_rem_pio2+0x394>)
    b63a:	f002 f921 	bl	d880 <____adddf3_from_thumb>
    b63e:	f002 f927 	bl	d890 <____fixdfsi_from_thumb>
    b642:	4682      	mov	sl, r0
    b644:	f002 f904 	bl	d850 <____floatsidf_from_thumb>
    b648:	4aae      	ldr	r2, [pc, #696]	; (b904 <__ieee754_rem_pio2+0x398>)
    b64a:	4baf      	ldr	r3, [pc, #700]	; (b908 <__ieee754_rem_pio2+0x39c>)
    b64c:	9004      	str	r0, [sp, #16]
    b64e:	9105      	str	r1, [sp, #20]
    b650:	f002 f912 	bl	d878 <____muldf3_from_thumb>
    b654:	1c02      	adds	r2, r0, #0
    b656:	1c0b      	adds	r3, r1, #0
    b658:	1c20      	adds	r0, r4, #0
    b65a:	1c29      	adds	r1, r5, #0
    b65c:	f002 f910 	bl	d880 <____adddf3_from_thumb>
    b660:	4aa2      	ldr	r2, [pc, #648]	; (b8ec <__ieee754_rem_pio2+0x380>)
    b662:	4ba3      	ldr	r3, [pc, #652]	; (b8f0 <__ieee754_rem_pio2+0x384>)
    b664:	9002      	str	r0, [sp, #8]
    b666:	9103      	str	r1, [sp, #12]
    b668:	9804      	ldr	r0, [sp, #16]
    b66a:	9905      	ldr	r1, [sp, #20]
    b66c:	f002 f904 	bl	d878 <____muldf3_from_thumb>
    b670:	1c0e      	adds	r6, r1, #0
    b672:	4651      	mov	r1, sl
    b674:	1c05      	adds	r5, r0, #0
    b676:	291f      	cmp	r1, #31
    b678:	dc00      	bgt.n	b67c <__ieee754_rem_pio2+0x110>
    b67a:	e0fb      	b.n	b874 <__ieee754_rem_pio2+0x308>
    b67c:	1c33      	adds	r3, r6, #0
    b67e:	9802      	ldr	r0, [sp, #8]
    b680:	9903      	ldr	r1, [sp, #12]
    b682:	1c2a      	adds	r2, r5, #0
    b684:	f002 f900 	bl	d888 <____subdf3_from_thumb>
    b688:	4ca0      	ldr	r4, [pc, #640]	; (b90c <__ieee754_rem_pio2+0x3a0>)
    b68a:	4643      	mov	r3, r8
    b68c:	6018      	str	r0, [r3, #0]
    b68e:	6059      	str	r1, [r3, #4]
    b690:	0d03      	lsrs	r3, r0, #20
    b692:	153f      	asrs	r7, r7, #20
    b694:	4023      	ands	r3, r4
    b696:	1afb      	subs	r3, r7, r3
    b698:	46bb      	mov	fp, r7
    b69a:	2b10      	cmp	r3, #16
    b69c:	dd3e      	ble.n	b71c <__ieee754_rem_pio2+0x1b0>
    b69e:	4a9c      	ldr	r2, [pc, #624]	; (b910 <__ieee754_rem_pio2+0x3a4>)
    b6a0:	4b9c      	ldr	r3, [pc, #624]	; (b914 <__ieee754_rem_pio2+0x3a8>)
    b6a2:	9804      	ldr	r0, [sp, #16]
    b6a4:	9905      	ldr	r1, [sp, #20]
    b6a6:	f002 f8e7 	bl	d878 <____muldf3_from_thumb>
    b6aa:	1c06      	adds	r6, r0, #0
    b6ac:	1c0f      	adds	r7, r1, #0
    b6ae:	1c32      	adds	r2, r6, #0
    b6b0:	1c3b      	adds	r3, r7, #0
    b6b2:	9802      	ldr	r0, [sp, #8]
    b6b4:	9903      	ldr	r1, [sp, #12]
    b6b6:	f002 f8e7 	bl	d888 <____subdf3_from_thumb>
    b6ba:	4a97      	ldr	r2, [pc, #604]	; (b918 <__ieee754_rem_pio2+0x3ac>)
    b6bc:	4b97      	ldr	r3, [pc, #604]	; (b91c <__ieee754_rem_pio2+0x3b0>)
    b6be:	9006      	str	r0, [sp, #24]
    b6c0:	9107      	str	r1, [sp, #28]
    b6c2:	9804      	ldr	r0, [sp, #16]
    b6c4:	9905      	ldr	r1, [sp, #20]
    b6c6:	f002 f8d7 	bl	d878 <____muldf3_from_thumb>
    b6ca:	9a06      	ldr	r2, [sp, #24]
    b6cc:	9b07      	ldr	r3, [sp, #28]
    b6ce:	1c04      	adds	r4, r0, #0
    b6d0:	1c0d      	adds	r5, r1, #0
    b6d2:	9802      	ldr	r0, [sp, #8]
    b6d4:	9903      	ldr	r1, [sp, #12]
    b6d6:	f002 f8d7 	bl	d888 <____subdf3_from_thumb>
    b6da:	1c32      	adds	r2, r6, #0
    b6dc:	1c3b      	adds	r3, r7, #0
    b6de:	f002 f8d3 	bl	d888 <____subdf3_from_thumb>
    b6e2:	1c02      	adds	r2, r0, #0
    b6e4:	1c0b      	adds	r3, r1, #0
    b6e6:	1c20      	adds	r0, r4, #0
    b6e8:	1c29      	adds	r1, r5, #0
    b6ea:	f002 f8cd 	bl	d888 <____subdf3_from_thumb>
    b6ee:	1c05      	adds	r5, r0, #0
    b6f0:	1c0e      	adds	r6, r1, #0
    b6f2:	1c2a      	adds	r2, r5, #0
    b6f4:	1c33      	adds	r3, r6, #0
    b6f6:	9806      	ldr	r0, [sp, #24]
    b6f8:	9907      	ldr	r1, [sp, #28]
    b6fa:	f002 f8c5 	bl	d888 <____subdf3_from_thumb>
    b6fe:	4c83      	ldr	r4, [pc, #524]	; (b90c <__ieee754_rem_pio2+0x3a0>)
    b700:	4642      	mov	r2, r8
    b702:	0d03      	lsrs	r3, r0, #20
    b704:	6010      	str	r0, [r2, #0]
    b706:	6051      	str	r1, [r2, #4]
    b708:	4023      	ands	r3, r4
    b70a:	4659      	mov	r1, fp
    b70c:	1acb      	subs	r3, r1, r3
    b70e:	2b31      	cmp	r3, #49	; 0x31
    b710:	dd00      	ble.n	b714 <__ieee754_rem_pio2+0x1a8>
    b712:	e10f      	b.n	b934 <__ieee754_rem_pio2+0x3c8>
    b714:	9a06      	ldr	r2, [sp, #24]
    b716:	9b07      	ldr	r3, [sp, #28]
    b718:	9202      	str	r2, [sp, #8]
    b71a:	9303      	str	r3, [sp, #12]
    b71c:	4644      	mov	r4, r8
    b71e:	6822      	ldr	r2, [r4, #0]
    b720:	6863      	ldr	r3, [r4, #4]
    b722:	9802      	ldr	r0, [sp, #8]
    b724:	9903      	ldr	r1, [sp, #12]
    b726:	f002 f8af 	bl	d888 <____subdf3_from_thumb>
    b72a:	1c2a      	adds	r2, r5, #0
    b72c:	1c33      	adds	r3, r6, #0
    b72e:	f002 f8ab 	bl	d888 <____subdf3_from_thumb>
    b732:	4642      	mov	r2, r8
    b734:	464b      	mov	r3, r9
    b736:	6090      	str	r0, [r2, #8]
    b738:	60d1      	str	r1, [r2, #12]
    b73a:	2b00      	cmp	r3, #0
    b73c:	db00      	blt.n	b740 <__ieee754_rem_pio2+0x1d4>
    b73e:	e72d      	b.n	b59c <__ieee754_rem_pio2+0x30>
    b740:	6813      	ldr	r3, [r2, #0]
    b742:	2480      	movs	r4, #128	; 0x80
    b744:	0624      	lsls	r4, r4, #24
    b746:	191b      	adds	r3, r3, r4
    b748:	4651      	mov	r1, sl
    b74a:	6013      	str	r3, [r2, #0]
    b74c:	6893      	ldr	r3, [r2, #8]
    b74e:	4249      	negs	r1, r1
    b750:	191b      	adds	r3, r3, r4
    b752:	468a      	mov	sl, r1
    b754:	6093      	str	r3, [r2, #8]
    b756:	e721      	b.n	b59c <__ieee754_rem_pio2+0x30>
    b758:	4a61      	ldr	r2, [pc, #388]	; (b8e0 <__ieee754_rem_pio2+0x374>)
    b75a:	4b62      	ldr	r3, [pc, #392]	; (b8e4 <__ieee754_rem_pio2+0x378>)
    b75c:	f002 f890 	bl	d880 <____adddf3_from_thumb>
    b760:	4b61      	ldr	r3, [pc, #388]	; (b8e8 <__ieee754_rem_pio2+0x37c>)
    b762:	1c04      	adds	r4, r0, #0
    b764:	1c0d      	adds	r5, r1, #0
    b766:	429f      	cmp	r7, r3
    b768:	d100      	bne.n	b76c <__ieee754_rem_pio2+0x200>
    b76a:	e095      	b.n	b898 <__ieee754_rem_pio2+0x32c>
    b76c:	4a5f      	ldr	r2, [pc, #380]	; (b8ec <__ieee754_rem_pio2+0x380>)
    b76e:	4b60      	ldr	r3, [pc, #384]	; (b8f0 <__ieee754_rem_pio2+0x384>)
    b770:	f002 f886 	bl	d880 <____adddf3_from_thumb>
    b774:	1c02      	adds	r2, r0, #0
    b776:	1c0b      	adds	r3, r1, #0
    b778:	4641      	mov	r1, r8
    b77a:	600a      	str	r2, [r1, #0]
    b77c:	604b      	str	r3, [r1, #4]
    b77e:	1c20      	adds	r0, r4, #0
    b780:	1c29      	adds	r1, r5, #0
    b782:	f002 f881 	bl	d888 <____subdf3_from_thumb>
    b786:	4a59      	ldr	r2, [pc, #356]	; (b8ec <__ieee754_rem_pio2+0x380>)
    b788:	4b59      	ldr	r3, [pc, #356]	; (b8f0 <__ieee754_rem_pio2+0x384>)
    b78a:	f002 f879 	bl	d880 <____adddf3_from_thumb>
    b78e:	2301      	movs	r3, #1
    b790:	425c      	negs	r4, r3
    b792:	4642      	mov	r2, r8
    b794:	46a2      	mov	sl, r4
    b796:	6090      	str	r0, [r2, #8]
    b798:	60d1      	str	r1, [r2, #12]
    b79a:	e6ff      	b.n	b59c <__ieee754_rem_pio2+0x30>
    b79c:	4960      	ldr	r1, [pc, #384]	; (b920 <__ieee754_rem_pio2+0x3b4>)
    b79e:	153a      	asrs	r2, r7, #20
    b7a0:	1889      	adds	r1, r1, r2
    b7a2:	050a      	lsls	r2, r1, #20
    b7a4:	1abb      	subs	r3, r7, r2
    b7a6:	1c18      	adds	r0, r3, #0
    b7a8:	468a      	mov	sl, r1
    b7aa:	1c31      	adds	r1, r6, #0
    b7ac:	1c1c      	adds	r4, r3, #0
    b7ae:	f002 f86f 	bl	d890 <____fixdfsi_from_thumb>
    b7b2:	f002 f84d 	bl	d850 <____floatsidf_from_thumb>
    b7b6:	1c02      	adds	r2, r0, #0
    b7b8:	1c0b      	adds	r3, r1, #0
    b7ba:	1c20      	adds	r0, r4, #0
    b7bc:	1c31      	adds	r1, r6, #0
    b7be:	9208      	str	r2, [sp, #32]
    b7c0:	9309      	str	r3, [sp, #36]	; 0x24
    b7c2:	f002 f861 	bl	d888 <____subdf3_from_thumb>
    b7c6:	4a57      	ldr	r2, [pc, #348]	; (b924 <__ieee754_rem_pio2+0x3b8>)
    b7c8:	4b57      	ldr	r3, [pc, #348]	; (b928 <__ieee754_rem_pio2+0x3bc>)
    b7ca:	f002 f855 	bl	d878 <____muldf3_from_thumb>
    b7ce:	1c0d      	adds	r5, r1, #0
    b7d0:	1c04      	adds	r4, r0, #0
    b7d2:	f002 f85d 	bl	d890 <____fixdfsi_from_thumb>
    b7d6:	f002 f83b 	bl	d850 <____floatsidf_from_thumb>
    b7da:	1c02      	adds	r2, r0, #0
    b7dc:	1c0b      	adds	r3, r1, #0
    b7de:	1c20      	adds	r0, r4, #0
    b7e0:	1c29      	adds	r1, r5, #0
    b7e2:	920a      	str	r2, [sp, #40]	; 0x28
    b7e4:	930b      	str	r3, [sp, #44]	; 0x2c
    b7e6:	f002 f84f 	bl	d888 <____subdf3_from_thumb>
    b7ea:	4a4e      	ldr	r2, [pc, #312]	; (b924 <__ieee754_rem_pio2+0x3b8>)
    b7ec:	4b4e      	ldr	r3, [pc, #312]	; (b928 <__ieee754_rem_pio2+0x3bc>)
    b7ee:	f002 f843 	bl	d878 <____muldf3_from_thumb>
    b7f2:	2603      	movs	r6, #3
    b7f4:	ad0c      	add	r5, sp, #48	; 0x30
    b7f6:	900c      	str	r0, [sp, #48]	; 0x30
    b7f8:	910d      	str	r1, [sp, #52]	; 0x34
    b7fa:	e001      	b.n	b800 <__ieee754_rem_pio2+0x294>
    b7fc:	1c26      	adds	r6, r4, #0
    b7fe:	3d08      	subs	r5, #8
    b800:	6828      	ldr	r0, [r5, #0]
    b802:	6869      	ldr	r1, [r5, #4]
    b804:	4a31      	ldr	r2, [pc, #196]	; (b8cc <__ieee754_rem_pio2+0x360>)
    b806:	4b32      	ldr	r3, [pc, #200]	; (b8d0 <__ieee754_rem_pio2+0x364>)
    b808:	1e74      	subs	r4, r6, #1
    b80a:	f002 f82d 	bl	d868 <____eqdf2_from_thumb>
    b80e:	2800      	cmp	r0, #0
    b810:	d0f4      	beq.n	b7fc <__ieee754_rem_pio2+0x290>
    b812:	2302      	movs	r3, #2
    b814:	9300      	str	r3, [sp, #0]
    b816:	4b45      	ldr	r3, [pc, #276]	; (b92c <__ieee754_rem_pio2+0x3c0>)
    b818:	4652      	mov	r2, sl
    b81a:	9301      	str	r3, [sp, #4]
    b81c:	a808      	add	r0, sp, #32
    b81e:	4641      	mov	r1, r8
    b820:	1c33      	adds	r3, r6, #0
    b822:	f000 faf5 	bl	be10 <__kernel_rem_pio2>
    b826:	464a      	mov	r2, r9
    b828:	4682      	mov	sl, r0
    b82a:	2a00      	cmp	r2, #0
    b82c:	db00      	blt.n	b830 <__ieee754_rem_pio2+0x2c4>
    b82e:	e6b5      	b.n	b59c <__ieee754_rem_pio2+0x30>
    b830:	4644      	mov	r4, r8
    b832:	6823      	ldr	r3, [r4, #0]
    b834:	2180      	movs	r1, #128	; 0x80
    b836:	0609      	lsls	r1, r1, #24
    b838:	185b      	adds	r3, r3, r1
    b83a:	6023      	str	r3, [r4, #0]
    b83c:	68a3      	ldr	r3, [r4, #8]
    b83e:	4242      	negs	r2, r0
    b840:	185b      	adds	r3, r3, r1
    b842:	4692      	mov	sl, r2
    b844:	60a3      	str	r3, [r4, #8]
    b846:	e6a9      	b.n	b59c <__ieee754_rem_pio2+0x30>
    b848:	4a31      	ldr	r2, [pc, #196]	; (b910 <__ieee754_rem_pio2+0x3a4>)
    b84a:	4b32      	ldr	r3, [pc, #200]	; (b914 <__ieee754_rem_pio2+0x3a8>)
    b84c:	f002 f81c 	bl	d888 <____subdf3_from_thumb>
    b850:	4a31      	ldr	r2, [pc, #196]	; (b918 <__ieee754_rem_pio2+0x3ac>)
    b852:	4b32      	ldr	r3, [pc, #200]	; (b91c <__ieee754_rem_pio2+0x3b0>)
    b854:	1c04      	adds	r4, r0, #0
    b856:	1c0d      	adds	r5, r1, #0
    b858:	f002 f816 	bl	d888 <____subdf3_from_thumb>
    b85c:	1c02      	adds	r2, r0, #0
    b85e:	1c0b      	adds	r3, r1, #0
    b860:	4641      	mov	r1, r8
    b862:	600a      	str	r2, [r1, #0]
    b864:	604b      	str	r3, [r1, #4]
    b866:	1c20      	adds	r0, r4, #0
    b868:	1c29      	adds	r1, r5, #0
    b86a:	f002 f80d 	bl	d888 <____subdf3_from_thumb>
    b86e:	4a2a      	ldr	r2, [pc, #168]	; (b918 <__ieee754_rem_pio2+0x3ac>)
    b870:	4b2a      	ldr	r3, [pc, #168]	; (b91c <__ieee754_rem_pio2+0x3b0>)
    b872:	e6d0      	b.n	b616 <__ieee754_rem_pio2+0xaa>
    b874:	4b2e      	ldr	r3, [pc, #184]	; (b930 <__ieee754_rem_pio2+0x3c4>)
    b876:	008a      	lsls	r2, r1, #2
    b878:	18d2      	adds	r2, r2, r3
    b87a:	3a04      	subs	r2, #4
    b87c:	6813      	ldr	r3, [r2, #0]
    b87e:	429f      	cmp	r7, r3
    b880:	d100      	bne.n	b884 <__ieee754_rem_pio2+0x318>
    b882:	e6fb      	b.n	b67c <__ieee754_rem_pio2+0x110>
    b884:	1c2a      	adds	r2, r5, #0
    b886:	9802      	ldr	r0, [sp, #8]
    b888:	9903      	ldr	r1, [sp, #12]
    b88a:	1c33      	adds	r3, r6, #0
    b88c:	f001 fffc 	bl	d888 <____subdf3_from_thumb>
    b890:	4642      	mov	r2, r8
    b892:	6010      	str	r0, [r2, #0]
    b894:	6051      	str	r1, [r2, #4]
    b896:	e741      	b.n	b71c <__ieee754_rem_pio2+0x1b0>
    b898:	4a1d      	ldr	r2, [pc, #116]	; (b910 <__ieee754_rem_pio2+0x3a4>)
    b89a:	4b1e      	ldr	r3, [pc, #120]	; (b914 <__ieee754_rem_pio2+0x3a8>)
    b89c:	f001 fff0 	bl	d880 <____adddf3_from_thumb>
    b8a0:	4a1d      	ldr	r2, [pc, #116]	; (b918 <__ieee754_rem_pio2+0x3ac>)
    b8a2:	4b1e      	ldr	r3, [pc, #120]	; (b91c <__ieee754_rem_pio2+0x3b0>)
    b8a4:	1c04      	adds	r4, r0, #0
    b8a6:	1c0d      	adds	r5, r1, #0
    b8a8:	f001 ffea 	bl	d880 <____adddf3_from_thumb>
    b8ac:	1c02      	adds	r2, r0, #0
    b8ae:	1c0b      	adds	r3, r1, #0
    b8b0:	4641      	mov	r1, r8
    b8b2:	600a      	str	r2, [r1, #0]
    b8b4:	604b      	str	r3, [r1, #4]
    b8b6:	1c20      	adds	r0, r4, #0
    b8b8:	1c29      	adds	r1, r5, #0
    b8ba:	f001 ffe5 	bl	d888 <____subdf3_from_thumb>
    b8be:	4a16      	ldr	r2, [pc, #88]	; (b918 <__ieee754_rem_pio2+0x3ac>)
    b8c0:	4b16      	ldr	r3, [pc, #88]	; (b91c <__ieee754_rem_pio2+0x3b0>)
    b8c2:	e762      	b.n	b78a <__ieee754_rem_pio2+0x21e>
    b8c4:	7fffffff 	.word	0x7fffffff
    b8c8:	3fe921fb 	.word	0x3fe921fb
	...
    b8d4:	4002d97b 	.word	0x4002d97b
    b8d8:	413921fb 	.word	0x413921fb
    b8dc:	7fefffff 	.word	0x7fefffff
    b8e0:	3ff921fb 	.word	0x3ff921fb
    b8e4:	54400000 	.word	0x54400000
    b8e8:	3ff921fb 	.word	0x3ff921fb
    b8ec:	3dd0b461 	.word	0x3dd0b461
    b8f0:	1a626331 	.word	0x1a626331
    b8f4:	3fe45f30 	.word	0x3fe45f30
    b8f8:	6dc9c883 	.word	0x6dc9c883
    b8fc:	3fe00000 	.word	0x3fe00000
    b900:	00000000 	.word	0x00000000
    b904:	bff921fb 	.word	0xbff921fb
    b908:	54400000 	.word	0x54400000
    b90c:	000007ff 	.word	0x000007ff
    b910:	3dd0b461 	.word	0x3dd0b461
    b914:	1a600000 	.word	0x1a600000
    b918:	3ba3198a 	.word	0x3ba3198a
    b91c:	2e037073 	.word	0x2e037073
    b920:	fffffbea 	.word	0xfffffbea
    b924:	41700000 	.word	0x41700000
    b928:	00000000 	.word	0x00000000
    b92c:	0000d99c 	.word	0x0000d99c
    b930:	0000d91c 	.word	0x0000d91c
    b934:	4b1a      	ldr	r3, [pc, #104]	; (b9a0 <__ieee754_rem_pio2+0x434>)
    b936:	4a19      	ldr	r2, [pc, #100]	; (b99c <__ieee754_rem_pio2+0x430>)
    b938:	9804      	ldr	r0, [sp, #16]
    b93a:	9905      	ldr	r1, [sp, #20]
    b93c:	f001 ff9c 	bl	d878 <____muldf3_from_thumb>
    b940:	1c06      	adds	r6, r0, #0
    b942:	1c0f      	adds	r7, r1, #0
    b944:	1c32      	adds	r2, r6, #0
    b946:	1c3b      	adds	r3, r7, #0
    b948:	9806      	ldr	r0, [sp, #24]
    b94a:	9907      	ldr	r1, [sp, #28]
    b94c:	f001 ff9c 	bl	d888 <____subdf3_from_thumb>
    b950:	4a14      	ldr	r2, [pc, #80]	; (b9a4 <__ieee754_rem_pio2+0x438>)
    b952:	4b15      	ldr	r3, [pc, #84]	; (b9a8 <__ieee754_rem_pio2+0x43c>)
    b954:	9002      	str	r0, [sp, #8]
    b956:	9103      	str	r1, [sp, #12]
    b958:	9804      	ldr	r0, [sp, #16]
    b95a:	9905      	ldr	r1, [sp, #20]
    b95c:	f001 ff8c 	bl	d878 <____muldf3_from_thumb>
    b960:	9a02      	ldr	r2, [sp, #8]
    b962:	9b03      	ldr	r3, [sp, #12]
    b964:	1c0d      	adds	r5, r1, #0
    b966:	1c04      	adds	r4, r0, #0
    b968:	9806      	ldr	r0, [sp, #24]
    b96a:	9907      	ldr	r1, [sp, #28]
    b96c:	f001 ff8c 	bl	d888 <____subdf3_from_thumb>
    b970:	1c32      	adds	r2, r6, #0
    b972:	1c3b      	adds	r3, r7, #0
    b974:	f001 ff88 	bl	d888 <____subdf3_from_thumb>
    b978:	1c02      	adds	r2, r0, #0
    b97a:	1c0b      	adds	r3, r1, #0
    b97c:	1c20      	adds	r0, r4, #0
    b97e:	1c29      	adds	r1, r5, #0
    b980:	f001 ff82 	bl	d888 <____subdf3_from_thumb>
    b984:	1c05      	adds	r5, r0, #0
    b986:	1c0e      	adds	r6, r1, #0
    b988:	1c33      	adds	r3, r6, #0
    b98a:	9802      	ldr	r0, [sp, #8]
    b98c:	9903      	ldr	r1, [sp, #12]
    b98e:	1c2a      	adds	r2, r5, #0
    b990:	f001 ff7a 	bl	d888 <____subdf3_from_thumb>
    b994:	4643      	mov	r3, r8
    b996:	6018      	str	r0, [r3, #0]
    b998:	6059      	str	r1, [r3, #4]
    b99a:	e6bf      	b.n	b71c <__ieee754_rem_pio2+0x1b0>
    b99c:	3ba3198a 	.word	0x3ba3198a
    b9a0:	2e000000 	.word	0x2e000000
    b9a4:	397b839a 	.word	0x397b839a
    b9a8:	252049c1 	.word	0x252049c1

0000b9ac <__ieee754_sqrt>:
    b9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9ae:	4657      	mov	r7, sl
    b9b0:	464e      	mov	r6, r9
    b9b2:	4645      	mov	r5, r8
    b9b4:	b4e0      	push	{r5, r6, r7}
    b9b6:	2200      	movs	r2, #0
    b9b8:	2300      	movs	r3, #0
    b9ba:	b082      	sub	sp, #8
    b9bc:	9200      	str	r2, [sp, #0]
    b9be:	9301      	str	r3, [sp, #4]
    b9c0:	1c05      	adds	r5, r0, #0
    b9c2:	4a6b      	ldr	r2, [pc, #428]	; (bb70 <__ieee754_sqrt+0x1c4>)
    b9c4:	1c2b      	adds	r3, r5, #0
    b9c6:	1c0e      	adds	r6, r1, #0
    b9c8:	4013      	ands	r3, r2
    b9ca:	1c07      	adds	r7, r0, #0
    b9cc:	1c01      	adds	r1, r0, #0
    b9ce:	1c30      	adds	r0, r6, #0
    b9d0:	4293      	cmp	r3, r2
    b9d2:	d100      	bne.n	b9d6 <__ieee754_sqrt+0x2a>
    b9d4:	e0a1      	b.n	bb1a <__ieee754_sqrt+0x16e>
    b9d6:	2d00      	cmp	r5, #0
    b9d8:	dc00      	bgt.n	b9dc <__ieee754_sqrt+0x30>
    b9da:	e0ad      	b.n	bb38 <__ieee754_sqrt+0x18c>
    b9dc:	150a      	asrs	r2, r1, #20
    b9de:	2a00      	cmp	r2, #0
    b9e0:	d118      	bne.n	ba14 <__ieee754_sqrt+0x68>
    b9e2:	2f00      	cmp	r7, #0
    b9e4:	d104      	bne.n	b9f0 <__ieee754_sqrt+0x44>
    b9e6:	0ac1      	lsrs	r1, r0, #11
    b9e8:	3a15      	subs	r2, #21
    b9ea:	0540      	lsls	r0, r0, #21
    b9ec:	2900      	cmp	r1, #0
    b9ee:	d0fa      	beq.n	b9e6 <__ieee754_sqrt+0x3a>
    b9f0:	2380      	movs	r3, #128	; 0x80
    b9f2:	035b      	lsls	r3, r3, #13
    b9f4:	4219      	tst	r1, r3
    b9f6:	d000      	beq.n	b9fa <__ieee754_sqrt+0x4e>
    b9f8:	e0b6      	b.n	bb68 <__ieee754_sqrt+0x1bc>
    b9fa:	2400      	movs	r4, #0
    b9fc:	0049      	lsls	r1, r1, #1
    b9fe:	3401      	adds	r4, #1
    ba00:	4219      	tst	r1, r3
    ba02:	d0fb      	beq.n	b9fc <__ieee754_sqrt+0x50>
    ba04:	2320      	movs	r3, #32
    ba06:	1b1d      	subs	r5, r3, r4
    ba08:	1b13      	subs	r3, r2, r4
    ba0a:	1c5a      	adds	r2, r3, #1
    ba0c:	1c03      	adds	r3, r0, #0
    ba0e:	40eb      	lsrs	r3, r5
    ba10:	4319      	orrs	r1, r3
    ba12:	40a0      	lsls	r0, r4
    ba14:	4b57      	ldr	r3, [pc, #348]	; (bb74 <__ieee754_sqrt+0x1c8>)
    ba16:	189b      	adds	r3, r3, r2
    ba18:	4699      	mov	r9, r3
    ba1a:	4b57      	ldr	r3, [pc, #348]	; (bb78 <__ieee754_sqrt+0x1cc>)
    ba1c:	1c0a      	adds	r2, r1, #0
    ba1e:	401a      	ands	r2, r3
    ba20:	2380      	movs	r3, #128	; 0x80
    ba22:	035b      	lsls	r3, r3, #13
    ba24:	464c      	mov	r4, r9
    ba26:	431a      	orrs	r2, r3
    ba28:	07e4      	lsls	r4, r4, #31
    ba2a:	d468      	bmi.n	bafe <__ieee754_sqrt+0x152>
    ba2c:	0fc3      	lsrs	r3, r0, #31
    ba2e:	189b      	adds	r3, r3, r2
    ba30:	2180      	movs	r1, #128	; 0x80
    ba32:	2500      	movs	r5, #0
    ba34:	18d2      	adds	r2, r2, r3
    ba36:	0040      	lsls	r0, r0, #1
    ba38:	0389      	lsls	r1, r1, #14
    ba3a:	46aa      	mov	sl, r5
    ba3c:	2600      	movs	r6, #0
    ba3e:	194b      	adds	r3, r1, r5
    ba40:	4293      	cmp	r3, r2
    ba42:	dc02      	bgt.n	ba4a <__ieee754_sqrt+0x9e>
    ba44:	18cd      	adds	r5, r1, r3
    ba46:	1ad2      	subs	r2, r2, r3
    ba48:	448a      	add	sl, r1
    ba4a:	0fc3      	lsrs	r3, r0, #31
    ba4c:	2480      	movs	r4, #128	; 0x80
    ba4e:	189b      	adds	r3, r3, r2
    ba50:	3601      	adds	r6, #1
    ba52:	0624      	lsls	r4, r4, #24
    ba54:	18d2      	adds	r2, r2, r3
    ba56:	0040      	lsls	r0, r0, #1
    ba58:	0849      	lsrs	r1, r1, #1
    ba5a:	2e16      	cmp	r6, #22
    ba5c:	d1ef      	bne.n	ba3e <__ieee754_sqrt+0x92>
    ba5e:	2700      	movs	r7, #0
    ba60:	46b8      	mov	r8, r7
    ba62:	2600      	movs	r6, #0
    ba64:	46a4      	mov	ip, r4
    ba66:	e009      	b.n	ba7c <__ieee754_sqrt+0xd0>
    ba68:	42aa      	cmp	r2, r5
    ba6a:	d044      	beq.n	baf6 <__ieee754_sqrt+0x14a>
    ba6c:	0fc3      	lsrs	r3, r0, #31
    ba6e:	189b      	adds	r3, r3, r2
    ba70:	3601      	adds	r6, #1
    ba72:	18d2      	adds	r2, r2, r3
    ba74:	0040      	lsls	r0, r0, #1
    ba76:	0864      	lsrs	r4, r4, #1
    ba78:	2e20      	cmp	r6, #32
    ba7a:	d017      	beq.n	baac <__ieee754_sqrt+0x100>
    ba7c:	19e1      	adds	r1, r4, r7
    ba7e:	42aa      	cmp	r2, r5
    ba80:	ddf2      	ble.n	ba68 <__ieee754_sqrt+0xbc>
    ba82:	4663      	mov	r3, ip
    ba84:	400b      	ands	r3, r1
    ba86:	190f      	adds	r7, r1, r4
    ba88:	4563      	cmp	r3, ip
    ba8a:	d02f      	beq.n	baec <__ieee754_sqrt+0x140>
    ba8c:	1c2b      	adds	r3, r5, #0
    ba8e:	1b52      	subs	r2, r2, r5
    ba90:	4281      	cmp	r1, r0
    ba92:	d900      	bls.n	ba96 <__ieee754_sqrt+0xea>
    ba94:	3a01      	subs	r2, #1
    ba96:	1a40      	subs	r0, r0, r1
    ba98:	1c1d      	adds	r5, r3, #0
    ba9a:	0fc3      	lsrs	r3, r0, #31
    ba9c:	189b      	adds	r3, r3, r2
    ba9e:	3601      	adds	r6, #1
    baa0:	44a0      	add	r8, r4
    baa2:	18d2      	adds	r2, r2, r3
    baa4:	0040      	lsls	r0, r0, #1
    baa6:	0864      	lsrs	r4, r4, #1
    baa8:	2e20      	cmp	r6, #32
    baaa:	d1e7      	bne.n	ba7c <__ieee754_sqrt+0xd0>
    baac:	4302      	orrs	r2, r0
    baae:	d12b      	bne.n	bb08 <__ieee754_sqrt+0x15c>
    bab0:	4644      	mov	r4, r8
    bab2:	0861      	lsrs	r1, r4, #1
    bab4:	4650      	mov	r0, sl
    bab6:	07c0      	lsls	r0, r0, #31
    bab8:	d502      	bpl.n	bac0 <__ieee754_sqrt+0x114>
    baba:	2380      	movs	r3, #128	; 0x80
    babc:	061b      	lsls	r3, r3, #24
    babe:	4319      	orrs	r1, r3
    bac0:	4653      	mov	r3, sl
    bac2:	4c2e      	ldr	r4, [pc, #184]	; (bb7c <__ieee754_sqrt+0x1d0>)
    bac4:	4648      	mov	r0, r9
    bac6:	105a      	asrs	r2, r3, #1
    bac8:	1043      	asrs	r3, r0, #1
    baca:	1912      	adds	r2, r2, r4
    bacc:	051b      	lsls	r3, r3, #20
    bace:	18d3      	adds	r3, r2, r3
    bad0:	9300      	str	r3, [sp, #0]
    bad2:	9101      	str	r1, [sp, #4]
    bad4:	9d00      	ldr	r5, [sp, #0]
    bad6:	9e01      	ldr	r6, [sp, #4]
    bad8:	1c28      	adds	r0, r5, #0
    bada:	1c31      	adds	r1, r6, #0
    badc:	b002      	add	sp, #8
    bade:	bc1c      	pop	{r2, r3, r4}
    bae0:	4690      	mov	r8, r2
    bae2:	4699      	mov	r9, r3
    bae4:	46a2      	mov	sl, r4
    bae6:	bcf0      	pop	{r4, r5, r6, r7}
    bae8:	bc04      	pop	{r2}
    baea:	4710      	bx	r2
    baec:	4663      	mov	r3, ip
    baee:	421f      	tst	r7, r3
    baf0:	d1cc      	bne.n	ba8c <__ieee754_sqrt+0xe0>
    baf2:	1c6b      	adds	r3, r5, #1
    baf4:	e7cb      	b.n	ba8e <__ieee754_sqrt+0xe2>
    baf6:	4281      	cmp	r1, r0
    baf8:	d9c3      	bls.n	ba82 <__ieee754_sqrt+0xd6>
    bafa:	1c15      	adds	r5, r2, #0
    bafc:	e7b6      	b.n	ba6c <__ieee754_sqrt+0xc0>
    bafe:	0fc3      	lsrs	r3, r0, #31
    bb00:	189b      	adds	r3, r3, r2
    bb02:	18d2      	adds	r2, r2, r3
    bb04:	0040      	lsls	r0, r0, #1
    bb06:	e791      	b.n	ba2c <__ieee754_sqrt+0x80>
    bb08:	4640      	mov	r0, r8
    bb0a:	3001      	adds	r0, #1
    bb0c:	d028      	beq.n	bb60 <__ieee754_sqrt+0x1b4>
    bb0e:	2301      	movs	r3, #1
    bb10:	4644      	mov	r4, r8
    bb12:	4023      	ands	r3, r4
    bb14:	4443      	add	r3, r8
    bb16:	0859      	lsrs	r1, r3, #1
    bb18:	e7cc      	b.n	bab4 <__ieee754_sqrt+0x108>
    bb1a:	1c2a      	adds	r2, r5, #0
    bb1c:	1c33      	adds	r3, r6, #0
    bb1e:	1c28      	adds	r0, r5, #0
    bb20:	1c31      	adds	r1, r6, #0
    bb22:	f001 fea9 	bl	d878 <____muldf3_from_thumb>
    bb26:	1c02      	adds	r2, r0, #0
    bb28:	1c0b      	adds	r3, r1, #0
    bb2a:	1c28      	adds	r0, r5, #0
    bb2c:	1c31      	adds	r1, r6, #0
    bb2e:	f001 fea7 	bl	d880 <____adddf3_from_thumb>
    bb32:	1c05      	adds	r5, r0, #0
    bb34:	1c0e      	adds	r6, r1, #0
    bb36:	e7cf      	b.n	bad8 <__ieee754_sqrt+0x12c>
    bb38:	4b11      	ldr	r3, [pc, #68]	; (bb80 <__ieee754_sqrt+0x1d4>)
    bb3a:	402b      	ands	r3, r5
    bb3c:	4333      	orrs	r3, r6
    bb3e:	d0cb      	beq.n	bad8 <__ieee754_sqrt+0x12c>
    bb40:	2d00      	cmp	r5, #0
    bb42:	d100      	bne.n	bb46 <__ieee754_sqrt+0x19a>
    bb44:	e74a      	b.n	b9dc <__ieee754_sqrt+0x30>
    bb46:	1c2a      	adds	r2, r5, #0
    bb48:	1c33      	adds	r3, r6, #0
    bb4a:	1c28      	adds	r0, r5, #0
    bb4c:	1c31      	adds	r1, r6, #0
    bb4e:	f001 fe9b 	bl	d888 <____subdf3_from_thumb>
    bb52:	1c02      	adds	r2, r0, #0
    bb54:	1c0b      	adds	r3, r1, #0
    bb56:	f001 fe83 	bl	d860 <____divdf3_from_thumb>
    bb5a:	1c05      	adds	r5, r0, #0
    bb5c:	1c0e      	adds	r6, r1, #0
    bb5e:	e7bb      	b.n	bad8 <__ieee754_sqrt+0x12c>
    bb60:	2201      	movs	r2, #1
    bb62:	4492      	add	sl, r2
    bb64:	2100      	movs	r1, #0
    bb66:	e7a5      	b.n	bab4 <__ieee754_sqrt+0x108>
    bb68:	2400      	movs	r4, #0
    bb6a:	2520      	movs	r5, #32
    bb6c:	e74c      	b.n	ba08 <__ieee754_sqrt+0x5c>
    bb6e:	46c0      	nop			; (mov r8, r8)
    bb70:	7ff00000 	.word	0x7ff00000
    bb74:	fffffc01 	.word	0xfffffc01
    bb78:	000fffff 	.word	0x000fffff
    bb7c:	3fe00000 	.word	0x3fe00000
    bb80:	7fffffff 	.word	0x7fffffff

0000bb84 <__kernel_cos>:
    bb84:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb86:	4647      	mov	r7, r8
    bb88:	b480      	push	{r7}
    bb8a:	b08e      	sub	sp, #56	; 0x38
    bb8c:	9204      	str	r2, [sp, #16]
    bb8e:	9305      	str	r3, [sp, #20]
    bb90:	4a86      	ldr	r2, [pc, #536]	; (bdac <__kernel_cos+0x228>)
    bb92:	4b87      	ldr	r3, [pc, #540]	; (bdb0 <__kernel_cos+0x22c>)
    bb94:	4002      	ands	r2, r0
    bb96:	2400      	movs	r4, #0
    bb98:	2500      	movs	r5, #0
    bb9a:	4690      	mov	r8, r2
    bb9c:	9406      	str	r4, [sp, #24]
    bb9e:	9507      	str	r5, [sp, #28]
    bba0:	1c06      	adds	r6, r0, #0
    bba2:	1c0f      	adds	r7, r1, #0
    bba4:	4598      	cmp	r8, r3
    bba6:	dd00      	ble.n	bbaa <__kernel_cos+0x26>
    bba8:	e072      	b.n	bc90 <__kernel_cos+0x10c>
    bbaa:	f001 fe71 	bl	d890 <____fixdfsi_from_thumb>
    bbae:	2800      	cmp	r0, #0
    bbb0:	d100      	bne.n	bbb4 <__kernel_cos+0x30>
    bbb2:	e0e7      	b.n	bd84 <__kernel_cos+0x200>
    bbb4:	1c32      	adds	r2, r6, #0
    bbb6:	1c3b      	adds	r3, r7, #0
    bbb8:	1c30      	adds	r0, r6, #0
    bbba:	1c39      	adds	r1, r7, #0
    bbbc:	f001 fe5c 	bl	d878 <____muldf3_from_thumb>
    bbc0:	4a7c      	ldr	r2, [pc, #496]	; (bdb4 <__kernel_cos+0x230>)
    bbc2:	4b7d      	ldr	r3, [pc, #500]	; (bdb8 <__kernel_cos+0x234>)
    bbc4:	1c04      	adds	r4, r0, #0
    bbc6:	1c0d      	adds	r5, r1, #0
    bbc8:	f001 fe56 	bl	d878 <____muldf3_from_thumb>
    bbcc:	4a7b      	ldr	r2, [pc, #492]	; (bdbc <__kernel_cos+0x238>)
    bbce:	4b7c      	ldr	r3, [pc, #496]	; (bdc0 <__kernel_cos+0x23c>)
    bbd0:	f001 fe56 	bl	d880 <____adddf3_from_thumb>
    bbd4:	1c02      	adds	r2, r0, #0
    bbd6:	1c0b      	adds	r3, r1, #0
    bbd8:	1c20      	adds	r0, r4, #0
    bbda:	1c29      	adds	r1, r5, #0
    bbdc:	f001 fe4c 	bl	d878 <____muldf3_from_thumb>
    bbe0:	4a78      	ldr	r2, [pc, #480]	; (bdc4 <__kernel_cos+0x240>)
    bbe2:	4b79      	ldr	r3, [pc, #484]	; (bdc8 <__kernel_cos+0x244>)
    bbe4:	f001 fe50 	bl	d888 <____subdf3_from_thumb>
    bbe8:	1c02      	adds	r2, r0, #0
    bbea:	1c0b      	adds	r3, r1, #0
    bbec:	1c20      	adds	r0, r4, #0
    bbee:	1c29      	adds	r1, r5, #0
    bbf0:	f001 fe42 	bl	d878 <____muldf3_from_thumb>
    bbf4:	4a75      	ldr	r2, [pc, #468]	; (bdcc <__kernel_cos+0x248>)
    bbf6:	4b76      	ldr	r3, [pc, #472]	; (bdd0 <__kernel_cos+0x24c>)
    bbf8:	f001 fe42 	bl	d880 <____adddf3_from_thumb>
    bbfc:	1c02      	adds	r2, r0, #0
    bbfe:	1c0b      	adds	r3, r1, #0
    bc00:	1c20      	adds	r0, r4, #0
    bc02:	1c29      	adds	r1, r5, #0
    bc04:	f001 fe38 	bl	d878 <____muldf3_from_thumb>
    bc08:	4a72      	ldr	r2, [pc, #456]	; (bdd4 <__kernel_cos+0x250>)
    bc0a:	4b73      	ldr	r3, [pc, #460]	; (bdd8 <__kernel_cos+0x254>)
    bc0c:	f001 fe3c 	bl	d888 <____subdf3_from_thumb>
    bc10:	1c02      	adds	r2, r0, #0
    bc12:	1c0b      	adds	r3, r1, #0
    bc14:	1c20      	adds	r0, r4, #0
    bc16:	1c29      	adds	r1, r5, #0
    bc18:	f001 fe2e 	bl	d878 <____muldf3_from_thumb>
    bc1c:	4a6f      	ldr	r2, [pc, #444]	; (bddc <__kernel_cos+0x258>)
    bc1e:	4b70      	ldr	r3, [pc, #448]	; (bde0 <__kernel_cos+0x25c>)
    bc20:	f001 fe2e 	bl	d880 <____adddf3_from_thumb>
    bc24:	1c02      	adds	r2, r0, #0
    bc26:	1c0b      	adds	r3, r1, #0
    bc28:	1c20      	adds	r0, r4, #0
    bc2a:	1c29      	adds	r1, r5, #0
    bc2c:	f001 fe24 	bl	d878 <____muldf3_from_thumb>
    bc30:	9008      	str	r0, [sp, #32]
    bc32:	9109      	str	r1, [sp, #36]	; 0x24
    bc34:	1c20      	adds	r0, r4, #0
    bc36:	1c29      	adds	r1, r5, #0
    bc38:	4a6a      	ldr	r2, [pc, #424]	; (bde4 <__kernel_cos+0x260>)
    bc3a:	4b6b      	ldr	r3, [pc, #428]	; (bde8 <__kernel_cos+0x264>)
    bc3c:	f001 fe1c 	bl	d878 <____muldf3_from_thumb>
    bc40:	9a08      	ldr	r2, [sp, #32]
    bc42:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bc44:	9002      	str	r0, [sp, #8]
    bc46:	9103      	str	r1, [sp, #12]
    bc48:	1c20      	adds	r0, r4, #0
    bc4a:	1c29      	adds	r1, r5, #0
    bc4c:	f001 fe14 	bl	d878 <____muldf3_from_thumb>
    bc50:	9a04      	ldr	r2, [sp, #16]
    bc52:	9b05      	ldr	r3, [sp, #20]
    bc54:	1c04      	adds	r4, r0, #0
    bc56:	1c0d      	adds	r5, r1, #0
    bc58:	1c30      	adds	r0, r6, #0
    bc5a:	1c39      	adds	r1, r7, #0
    bc5c:	f001 fe0c 	bl	d878 <____muldf3_from_thumb>
    bc60:	1c02      	adds	r2, r0, #0
    bc62:	1c0b      	adds	r3, r1, #0
    bc64:	1c20      	adds	r0, r4, #0
    bc66:	1c29      	adds	r1, r5, #0
    bc68:	f001 fe0e 	bl	d888 <____subdf3_from_thumb>
    bc6c:	1c02      	adds	r2, r0, #0
    bc6e:	1c0b      	adds	r3, r1, #0
    bc70:	9802      	ldr	r0, [sp, #8]
    bc72:	9903      	ldr	r1, [sp, #12]
    bc74:	f001 fe08 	bl	d888 <____subdf3_from_thumb>
    bc78:	1c02      	adds	r2, r0, #0
    bc7a:	1c0b      	adds	r3, r1, #0
    bc7c:	485b      	ldr	r0, [pc, #364]	; (bdec <__kernel_cos+0x268>)
    bc7e:	495c      	ldr	r1, [pc, #368]	; (bdf0 <__kernel_cos+0x26c>)
    bc80:	f001 fe02 	bl	d888 <____subdf3_from_thumb>
    bc84:	b00e      	add	sp, #56	; 0x38
    bc86:	bc04      	pop	{r2}
    bc88:	4690      	mov	r8, r2
    bc8a:	bcf0      	pop	{r4, r5, r6, r7}
    bc8c:	bc04      	pop	{r2}
    bc8e:	4710      	bx	r2
    bc90:	1c32      	adds	r2, r6, #0
    bc92:	1c3b      	adds	r3, r7, #0
    bc94:	f001 fdf0 	bl	d878 <____muldf3_from_thumb>
    bc98:	4a46      	ldr	r2, [pc, #280]	; (bdb4 <__kernel_cos+0x230>)
    bc9a:	4b47      	ldr	r3, [pc, #284]	; (bdb8 <__kernel_cos+0x234>)
    bc9c:	1c04      	adds	r4, r0, #0
    bc9e:	1c0d      	adds	r5, r1, #0
    bca0:	f001 fdea 	bl	d878 <____muldf3_from_thumb>
    bca4:	4a45      	ldr	r2, [pc, #276]	; (bdbc <__kernel_cos+0x238>)
    bca6:	4b46      	ldr	r3, [pc, #280]	; (bdc0 <__kernel_cos+0x23c>)
    bca8:	f001 fdea 	bl	d880 <____adddf3_from_thumb>
    bcac:	1c02      	adds	r2, r0, #0
    bcae:	1c0b      	adds	r3, r1, #0
    bcb0:	1c20      	adds	r0, r4, #0
    bcb2:	1c29      	adds	r1, r5, #0
    bcb4:	f001 fde0 	bl	d878 <____muldf3_from_thumb>
    bcb8:	4a42      	ldr	r2, [pc, #264]	; (bdc4 <__kernel_cos+0x240>)
    bcba:	4b43      	ldr	r3, [pc, #268]	; (bdc8 <__kernel_cos+0x244>)
    bcbc:	f001 fde4 	bl	d888 <____subdf3_from_thumb>
    bcc0:	1c02      	adds	r2, r0, #0
    bcc2:	1c0b      	adds	r3, r1, #0
    bcc4:	1c20      	adds	r0, r4, #0
    bcc6:	1c29      	adds	r1, r5, #0
    bcc8:	f001 fdd6 	bl	d878 <____muldf3_from_thumb>
    bccc:	4a3f      	ldr	r2, [pc, #252]	; (bdcc <__kernel_cos+0x248>)
    bcce:	4b40      	ldr	r3, [pc, #256]	; (bdd0 <__kernel_cos+0x24c>)
    bcd0:	f001 fdd6 	bl	d880 <____adddf3_from_thumb>
    bcd4:	1c02      	adds	r2, r0, #0
    bcd6:	1c0b      	adds	r3, r1, #0
    bcd8:	1c20      	adds	r0, r4, #0
    bcda:	1c29      	adds	r1, r5, #0
    bcdc:	f001 fdcc 	bl	d878 <____muldf3_from_thumb>
    bce0:	4a3c      	ldr	r2, [pc, #240]	; (bdd4 <__kernel_cos+0x250>)
    bce2:	4b3d      	ldr	r3, [pc, #244]	; (bdd8 <__kernel_cos+0x254>)
    bce4:	f001 fdd0 	bl	d888 <____subdf3_from_thumb>
    bce8:	1c02      	adds	r2, r0, #0
    bcea:	1c0b      	adds	r3, r1, #0
    bcec:	1c20      	adds	r0, r4, #0
    bcee:	1c29      	adds	r1, r5, #0
    bcf0:	f001 fdc2 	bl	d878 <____muldf3_from_thumb>
    bcf4:	4a39      	ldr	r2, [pc, #228]	; (bddc <__kernel_cos+0x258>)
    bcf6:	4b3a      	ldr	r3, [pc, #232]	; (bde0 <__kernel_cos+0x25c>)
    bcf8:	f001 fdc2 	bl	d880 <____adddf3_from_thumb>
    bcfc:	1c0b      	adds	r3, r1, #0
    bcfe:	1c02      	adds	r2, r0, #0
    bd00:	1c29      	adds	r1, r5, #0
    bd02:	1c20      	adds	r0, r4, #0
    bd04:	f001 fdb8 	bl	d878 <____muldf3_from_thumb>
    bd08:	4b3a      	ldr	r3, [pc, #232]	; (bdf4 <__kernel_cos+0x270>)
    bd0a:	9008      	str	r0, [sp, #32]
    bd0c:	9109      	str	r1, [sp, #36]	; 0x24
    bd0e:	4598      	cmp	r8, r3
    bd10:	dc00      	bgt.n	bd14 <__kernel_cos+0x190>
    bd12:	e78f      	b.n	bc34 <__kernel_cos+0xb0>
    bd14:	4b38      	ldr	r3, [pc, #224]	; (bdf8 <__kernel_cos+0x274>)
    bd16:	4598      	cmp	r8, r3
    bd18:	dd37      	ble.n	bd8a <__kernel_cos+0x206>
    bd1a:	4a38      	ldr	r2, [pc, #224]	; (bdfc <__kernel_cos+0x278>)
    bd1c:	4b38      	ldr	r3, [pc, #224]	; (be00 <__kernel_cos+0x27c>)
    bd1e:	920a      	str	r2, [sp, #40]	; 0x28
    bd20:	930b      	str	r3, [sp, #44]	; 0x2c
    bd22:	4a38      	ldr	r2, [pc, #224]	; (be04 <__kernel_cos+0x280>)
    bd24:	4b38      	ldr	r3, [pc, #224]	; (be08 <__kernel_cos+0x284>)
    bd26:	920c      	str	r2, [sp, #48]	; 0x30
    bd28:	930d      	str	r3, [sp, #52]	; 0x34
    bd2a:	1c20      	adds	r0, r4, #0
    bd2c:	1c29      	adds	r1, r5, #0
    bd2e:	4a2d      	ldr	r2, [pc, #180]	; (bde4 <__kernel_cos+0x260>)
    bd30:	4b2d      	ldr	r3, [pc, #180]	; (bde8 <__kernel_cos+0x264>)
    bd32:	f001 fda1 	bl	d878 <____muldf3_from_thumb>
    bd36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bd38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bd3a:	f001 fda5 	bl	d888 <____subdf3_from_thumb>
    bd3e:	9a08      	ldr	r2, [sp, #32]
    bd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bd42:	9000      	str	r0, [sp, #0]
    bd44:	9101      	str	r1, [sp, #4]
    bd46:	1c20      	adds	r0, r4, #0
    bd48:	1c29      	adds	r1, r5, #0
    bd4a:	f001 fd95 	bl	d878 <____muldf3_from_thumb>
    bd4e:	9a04      	ldr	r2, [sp, #16]
    bd50:	9b05      	ldr	r3, [sp, #20]
    bd52:	1c04      	adds	r4, r0, #0
    bd54:	1c0d      	adds	r5, r1, #0
    bd56:	1c30      	adds	r0, r6, #0
    bd58:	1c39      	adds	r1, r7, #0
    bd5a:	f001 fd8d 	bl	d878 <____muldf3_from_thumb>
    bd5e:	1c02      	adds	r2, r0, #0
    bd60:	1c0b      	adds	r3, r1, #0
    bd62:	1c20      	adds	r0, r4, #0
    bd64:	1c29      	adds	r1, r5, #0
    bd66:	f001 fd8f 	bl	d888 <____subdf3_from_thumb>
    bd6a:	1c02      	adds	r2, r0, #0
    bd6c:	1c0b      	adds	r3, r1, #0
    bd6e:	9800      	ldr	r0, [sp, #0]
    bd70:	9901      	ldr	r1, [sp, #4]
    bd72:	f001 fd89 	bl	d888 <____subdf3_from_thumb>
    bd76:	1c02      	adds	r2, r0, #0
    bd78:	1c0b      	adds	r3, r1, #0
    bd7a:	980c      	ldr	r0, [sp, #48]	; 0x30
    bd7c:	990d      	ldr	r1, [sp, #52]	; 0x34
    bd7e:	f001 fd83 	bl	d888 <____subdf3_from_thumb>
    bd82:	e77f      	b.n	bc84 <__kernel_cos+0x100>
    bd84:	4819      	ldr	r0, [pc, #100]	; (bdec <__kernel_cos+0x268>)
    bd86:	491a      	ldr	r1, [pc, #104]	; (bdf0 <__kernel_cos+0x26c>)
    bd88:	e77c      	b.n	bc84 <__kernel_cos+0x100>
    bd8a:	4b20      	ldr	r3, [pc, #128]	; (be0c <__kernel_cos+0x288>)
    bd8c:	2200      	movs	r2, #0
    bd8e:	4443      	add	r3, r8
    bd90:	9306      	str	r3, [sp, #24]
    bd92:	9207      	str	r2, [sp, #28]
    bd94:	9a06      	ldr	r2, [sp, #24]
    bd96:	9b07      	ldr	r3, [sp, #28]
    bd98:	4814      	ldr	r0, [pc, #80]	; (bdec <__kernel_cos+0x268>)
    bd9a:	4915      	ldr	r1, [pc, #84]	; (bdf0 <__kernel_cos+0x26c>)
    bd9c:	920a      	str	r2, [sp, #40]	; 0x28
    bd9e:	930b      	str	r3, [sp, #44]	; 0x2c
    bda0:	f001 fd72 	bl	d888 <____subdf3_from_thumb>
    bda4:	900c      	str	r0, [sp, #48]	; 0x30
    bda6:	910d      	str	r1, [sp, #52]	; 0x34
    bda8:	e7bf      	b.n	bd2a <__kernel_cos+0x1a6>
    bdaa:	46c0      	nop			; (mov r8, r8)
    bdac:	7fffffff 	.word	0x7fffffff
    bdb0:	3e3fffff 	.word	0x3e3fffff
    bdb4:	bda8fae9 	.word	0xbda8fae9
    bdb8:	be8838d4 	.word	0xbe8838d4
    bdbc:	3e21ee9e 	.word	0x3e21ee9e
    bdc0:	bdb4b1c4 	.word	0xbdb4b1c4
    bdc4:	3e927e4f 	.word	0x3e927e4f
    bdc8:	809c52ad 	.word	0x809c52ad
    bdcc:	3efa01a0 	.word	0x3efa01a0
    bdd0:	19cb1590 	.word	0x19cb1590
    bdd4:	3f56c16c 	.word	0x3f56c16c
    bdd8:	16c15177 	.word	0x16c15177
    bddc:	3fa55555 	.word	0x3fa55555
    bde0:	5555554c 	.word	0x5555554c
    bde4:	3fe00000 	.word	0x3fe00000
    bde8:	00000000 	.word	0x00000000
    bdec:	3ff00000 	.word	0x3ff00000
    bdf0:	00000000 	.word	0x00000000
    bdf4:	3fd33332 	.word	0x3fd33332
    bdf8:	3fe90000 	.word	0x3fe90000
    bdfc:	3fd20000 	.word	0x3fd20000
    be00:	00000000 	.word	0x00000000
    be04:	3fe70000 	.word	0x3fe70000
    be08:	00000000 	.word	0x00000000
    be0c:	ffe00000 	.word	0xffe00000

0000be10 <__kernel_rem_pio2>:
    be10:	b5f0      	push	{r4, r5, r6, r7, lr}
    be12:	465f      	mov	r7, fp
    be14:	4656      	mov	r6, sl
    be16:	464d      	mov	r5, r9
    be18:	4644      	mov	r4, r8
    be1a:	b4f0      	push	{r4, r5, r6, r7}
    be1c:	4cd7      	ldr	r4, [pc, #860]	; (c17c <__kernel_rem_pio2+0x36c>)
    be1e:	44a5      	add	sp, r4
    be20:	9303      	str	r3, [sp, #12]
    be22:	9005      	str	r0, [sp, #20]
    be24:	98a6      	ldr	r0, [sp, #664]	; 0x298
    be26:	9104      	str	r1, [sp, #16]
    be28:	4bd5      	ldr	r3, [pc, #852]	; (c180 <__kernel_rem_pio2+0x370>)
    be2a:	9903      	ldr	r1, [sp, #12]
    be2c:	1c14      	adds	r4, r2, #0
    be2e:	0082      	lsls	r2, r0, #2
    be30:	58d2      	ldr	r2, [r2, r3]
    be32:	3901      	subs	r1, #1
    be34:	9106      	str	r1, [sp, #24]
    be36:	1ee0      	subs	r0, r4, #3
    be38:	2118      	movs	r1, #24
    be3a:	9207      	str	r2, [sp, #28]
    be3c:	f7fb fb20 	bl	7480 <__aeabi_idiv>
    be40:	9010      	str	r0, [sp, #64]	; 0x40
    be42:	2800      	cmp	r0, #0
    be44:	da00      	bge.n	be48 <__kernel_rem_pio2+0x38>
    be46:	e392      	b.n	c56e <__kernel_rem_pio2+0x75e>
    be48:	9d10      	ldr	r5, [sp, #64]	; 0x40
    be4a:	06eb      	lsls	r3, r5, #27
    be4c:	1b5b      	subs	r3, r3, r5
    be4e:	009b      	lsls	r3, r3, #2
    be50:	195b      	adds	r3, r3, r5
    be52:	00db      	lsls	r3, r3, #3
    be54:	18e3      	adds	r3, r4, r3
    be56:	9e07      	ldr	r6, [sp, #28]
    be58:	9806      	ldr	r0, [sp, #24]
    be5a:	3b18      	subs	r3, #24
    be5c:	9309      	str	r3, [sp, #36]	; 0x24
    be5e:	1836      	adds	r6, r6, r0
    be60:	46b0      	mov	r8, r6
    be62:	d41a      	bmi.n	be9a <__kernel_rem_pio2+0x8a>
    be64:	1a2d      	subs	r5, r5, r0
    be66:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    be68:	00ab      	lsls	r3, r5, #2
    be6a:	18cc      	adds	r4, r1, r3
    be6c:	2700      	movs	r7, #0
    be6e:	ae61      	add	r6, sp, #388	; 0x184
    be70:	e00a      	b.n	be88 <__kernel_rem_pio2+0x78>
    be72:	6820      	ldr	r0, [r4, #0]
    be74:	f001 fcec 	bl	d850 <____floatsidf_from_thumb>
    be78:	3404      	adds	r4, #4
    be7a:	6030      	str	r0, [r6, #0]
    be7c:	6071      	str	r1, [r6, #4]
    be7e:	4547      	cmp	r7, r8
    be80:	d00b      	beq.n	be9a <__kernel_rem_pio2+0x8a>
    be82:	3501      	adds	r5, #1
    be84:	3701      	adds	r7, #1
    be86:	3608      	adds	r6, #8
    be88:	2d00      	cmp	r5, #0
    be8a:	daf2      	bge.n	be72 <__kernel_rem_pio2+0x62>
    be8c:	48bd      	ldr	r0, [pc, #756]	; (c184 <__kernel_rem_pio2+0x374>)
    be8e:	49be      	ldr	r1, [pc, #760]	; (c188 <__kernel_rem_pio2+0x378>)
    be90:	3404      	adds	r4, #4
    be92:	6030      	str	r0, [r6, #0]
    be94:	6071      	str	r1, [r6, #4]
    be96:	4547      	cmp	r7, r8
    be98:	d1f3      	bne.n	be82 <__kernel_rem_pio2+0x72>
    be9a:	9a07      	ldr	r2, [sp, #28]
    be9c:	2a00      	cmp	r2, #0
    be9e:	db32      	blt.n	bf06 <__kernel_rem_pio2+0xf6>
    bea0:	9d03      	ldr	r5, [sp, #12]
    bea2:	9b06      	ldr	r3, [sp, #24]
    bea4:	ac11      	add	r4, sp, #68	; 0x44
    bea6:	1952      	adds	r2, r2, r5
    bea8:	469a      	mov	sl, r3
    beaa:	46a3      	mov	fp, r4
    beac:	4691      	mov	r9, r2
    beae:	9906      	ldr	r1, [sp, #24]
    beb0:	2900      	cmp	r1, #0
    beb2:	da00      	bge.n	beb6 <__kernel_rem_pio2+0xa6>
    beb4:	e1d4      	b.n	c260 <__kernel_rem_pio2+0x450>
    beb6:	9a05      	ldr	r2, [sp, #20]
    beb8:	4653      	mov	r3, sl
    beba:	4690      	mov	r8, r2
    bebc:	4cb1      	ldr	r4, [pc, #708]	; (c184 <__kernel_rem_pio2+0x374>)
    bebe:	4db2      	ldr	r5, [pc, #712]	; (c188 <__kernel_rem_pio2+0x378>)
    bec0:	00da      	lsls	r2, r3, #3
    bec2:	ab61      	add	r3, sp, #388	; 0x184
    bec4:	189f      	adds	r7, r3, r2
    bec6:	2600      	movs	r6, #0
    bec8:	4642      	mov	r2, r8
    beca:	3208      	adds	r2, #8
    becc:	4690      	mov	r8, r2
    bece:	3a08      	subs	r2, #8
    bed0:	ca03      	ldmia	r2!, {r0, r1}
    bed2:	683a      	ldr	r2, [r7, #0]
    bed4:	687b      	ldr	r3, [r7, #4]
    bed6:	f001 fccf 	bl	d878 <____muldf3_from_thumb>
    beda:	1c0b      	adds	r3, r1, #0
    bedc:	1c02      	adds	r2, r0, #0
    bede:	1c29      	adds	r1, r5, #0
    bee0:	1c20      	adds	r0, r4, #0
    bee2:	f001 fccd 	bl	d880 <____adddf3_from_thumb>
    bee6:	9b03      	ldr	r3, [sp, #12]
    bee8:	3601      	adds	r6, #1
    beea:	1c04      	adds	r4, r0, #0
    beec:	1c0d      	adds	r5, r1, #0
    beee:	3f08      	subs	r7, #8
    bef0:	42b3      	cmp	r3, r6
    bef2:	d1e9      	bne.n	bec8 <__kernel_rem_pio2+0xb8>
    bef4:	465e      	mov	r6, fp
    bef6:	3608      	adds	r6, #8
    bef8:	2001      	movs	r0, #1
    befa:	46b3      	mov	fp, r6
    befc:	4482      	add	sl, r0
    befe:	3e08      	subs	r6, #8
    bf00:	c630      	stmia	r6!, {r4, r5}
    bf02:	45ca      	cmp	sl, r9
    bf04:	d1d3      	bne.n	beae <__kernel_rem_pio2+0x9e>
    bf06:	9c07      	ldr	r4, [sp, #28]
    bf08:	00a5      	lsls	r5, r4, #2
    bf0a:	9502      	str	r5, [sp, #8]
    bf0c:	46a3      	mov	fp, r4
    bf0e:	465e      	mov	r6, fp
    bf10:	00f2      	lsls	r2, r6, #3
    bf12:	a811      	add	r0, sp, #68	; 0x44
    bf14:	1813      	adds	r3, r2, r0
    bf16:	4659      	mov	r1, fp
    bf18:	681e      	ldr	r6, [r3, #0]
    bf1a:	685f      	ldr	r7, [r3, #4]
    bf1c:	2900      	cmp	r1, #0
    bf1e:	dd34      	ble.n	bf8a <__kernel_rem_pio2+0x17a>
    bf20:	1c13      	adds	r3, r2, #0
    bf22:	2489      	movs	r4, #137	; 0x89
    bf24:	3b08      	subs	r3, #8
    bf26:	00a4      	lsls	r4, r4, #2
    bf28:	18c2      	adds	r2, r0, r3
    bf2a:	446c      	add	r4, sp
    bf2c:	2300      	movs	r3, #0
    bf2e:	4690      	mov	r8, r2
    bf30:	469a      	mov	sl, r3
    bf32:	46a1      	mov	r9, r4
    bf34:	4a95      	ldr	r2, [pc, #596]	; (c18c <__kernel_rem_pio2+0x37c>)
    bf36:	4b96      	ldr	r3, [pc, #600]	; (c190 <__kernel_rem_pio2+0x380>)
    bf38:	1c30      	adds	r0, r6, #0
    bf3a:	1c39      	adds	r1, r7, #0
    bf3c:	f001 fc9c 	bl	d878 <____muldf3_from_thumb>
    bf40:	f001 fca6 	bl	d890 <____fixdfsi_from_thumb>
    bf44:	f001 fc84 	bl	d850 <____floatsidf_from_thumb>
    bf48:	4a92      	ldr	r2, [pc, #584]	; (c194 <__kernel_rem_pio2+0x384>)
    bf4a:	4b93      	ldr	r3, [pc, #588]	; (c198 <__kernel_rem_pio2+0x388>)
    bf4c:	1c04      	adds	r4, r0, #0
    bf4e:	1c0d      	adds	r5, r1, #0
    bf50:	f001 fc92 	bl	d878 <____muldf3_from_thumb>
    bf54:	1c32      	adds	r2, r6, #0
    bf56:	1c3b      	adds	r3, r7, #0
    bf58:	f001 fc92 	bl	d880 <____adddf3_from_thumb>
    bf5c:	f001 fc98 	bl	d890 <____fixdfsi_from_thumb>
    bf60:	464e      	mov	r6, r9
    bf62:	3604      	adds	r6, #4
    bf64:	46b1      	mov	r9, r6
    bf66:	3e04      	subs	r6, #4
    bf68:	c601      	stmia	r6!, {r0}
    bf6a:	1c20      	adds	r0, r4, #0
    bf6c:	4644      	mov	r4, r8
    bf6e:	1c29      	adds	r1, r5, #0
    bf70:	6822      	ldr	r2, [r4, #0]
    bf72:	6863      	ldr	r3, [r4, #4]
    bf74:	f001 fc84 	bl	d880 <____adddf3_from_thumb>
    bf78:	2501      	movs	r5, #1
    bf7a:	1c06      	adds	r6, r0, #0
    bf7c:	2008      	movs	r0, #8
    bf7e:	4240      	negs	r0, r0
    bf80:	44aa      	add	sl, r5
    bf82:	1c0f      	adds	r7, r1, #0
    bf84:	4480      	add	r8, r0
    bf86:	45d3      	cmp	fp, sl
    bf88:	d1d4      	bne.n	bf34 <__kernel_rem_pio2+0x124>
    bf8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bf8c:	1c30      	adds	r0, r6, #0
    bf8e:	1c39      	adds	r1, r7, #0
    bf90:	f000 fede 	bl	cd50 <scalbn>
    bf94:	4a81      	ldr	r2, [pc, #516]	; (c19c <__kernel_rem_pio2+0x38c>)
    bf96:	4b82      	ldr	r3, [pc, #520]	; (c1a0 <__kernel_rem_pio2+0x390>)
    bf98:	1c04      	adds	r4, r0, #0
    bf9a:	1c0d      	adds	r5, r1, #0
    bf9c:	f001 fc6c 	bl	d878 <____muldf3_from_thumb>
    bfa0:	f000 fe10 	bl	cbc4 <floor>
    bfa4:	4a7f      	ldr	r2, [pc, #508]	; (c1a4 <__kernel_rem_pio2+0x394>)
    bfa6:	4b80      	ldr	r3, [pc, #512]	; (c1a8 <__kernel_rem_pio2+0x398>)
    bfa8:	f001 fc66 	bl	d878 <____muldf3_from_thumb>
    bfac:	1c02      	adds	r2, r0, #0
    bfae:	1c0b      	adds	r3, r1, #0
    bfb0:	1c20      	adds	r0, r4, #0
    bfb2:	1c29      	adds	r1, r5, #0
    bfb4:	f001 fc64 	bl	d880 <____adddf3_from_thumb>
    bfb8:	1c0d      	adds	r5, r1, #0
    bfba:	1c04      	adds	r4, r0, #0
    bfbc:	f001 fc68 	bl	d890 <____fixdfsi_from_thumb>
    bfc0:	9008      	str	r0, [sp, #32]
    bfc2:	f001 fc45 	bl	d850 <____floatsidf_from_thumb>
    bfc6:	1c02      	adds	r2, r0, #0
    bfc8:	1c0b      	adds	r3, r1, #0
    bfca:	1c20      	adds	r0, r4, #0
    bfcc:	1c29      	adds	r1, r5, #0
    bfce:	f001 fc5b 	bl	d888 <____subdf3_from_thumb>
    bfd2:	1c0d      	adds	r5, r1, #0
    bfd4:	9909      	ldr	r1, [sp, #36]	; 0x24
    bfd6:	1c04      	adds	r4, r0, #0
    bfd8:	2900      	cmp	r1, #0
    bfda:	dc00      	bgt.n	bfde <__kernel_rem_pio2+0x1ce>
    bfdc:	e106      	b.n	c1ec <__kernel_rem_pio2+0x3dc>
    bfde:	4658      	mov	r0, fp
    bfe0:	3801      	subs	r0, #1
    bfe2:	2389      	movs	r3, #137	; 0x89
    bfe4:	0080      	lsls	r0, r0, #2
    bfe6:	009b      	lsls	r3, r3, #2
    bfe8:	181b      	adds	r3, r3, r0
    bfea:	466a      	mov	r2, sp
    bfec:	5899      	ldr	r1, [r3, r2]
    bfee:	9e09      	ldr	r6, [sp, #36]	; 0x24
    bff0:	2218      	movs	r2, #24
    bff2:	1b92      	subs	r2, r2, r6
    bff4:	1c0b      	adds	r3, r1, #0
    bff6:	9e08      	ldr	r6, [sp, #32]
    bff8:	4113      	asrs	r3, r2
    bffa:	18f6      	adds	r6, r6, r3
    bffc:	4093      	lsls	r3, r2
    bffe:	1ac9      	subs	r1, r1, r3
    c000:	2389      	movs	r3, #137	; 0x89
    c002:	009b      	lsls	r3, r3, #2
    c004:	181b      	adds	r3, r3, r0
    c006:	9608      	str	r6, [sp, #32]
    c008:	466a      	mov	r2, sp
    c00a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c00c:	5099      	str	r1, [r3, r2]
    c00e:	2317      	movs	r3, #23
    c010:	1b9b      	subs	r3, r3, r6
    c012:	4119      	asrs	r1, r3
    c014:	910a      	str	r1, [sp, #40]	; 0x28
    c016:	980a      	ldr	r0, [sp, #40]	; 0x28
    c018:	2800      	cmp	r0, #0
    c01a:	dd2c      	ble.n	c076 <__kernel_rem_pio2+0x266>
    c01c:	9908      	ldr	r1, [sp, #32]
    c01e:	465a      	mov	r2, fp
    c020:	3101      	adds	r1, #1
    c022:	9108      	str	r1, [sp, #32]
    c024:	2a00      	cmp	r2, #0
    c026:	dc00      	bgt.n	c02a <__kernel_rem_pio2+0x21a>
    c028:	e1f8      	b.n	c41c <__kernel_rem_pio2+0x60c>
    c02a:	2080      	movs	r0, #128	; 0x80
    c02c:	4e5f      	ldr	r6, [pc, #380]	; (c1ac <__kernel_rem_pio2+0x39c>)
    c02e:	2700      	movs	r7, #0
    c030:	2100      	movs	r1, #0
    c032:	aa89      	add	r2, sp, #548	; 0x224
    c034:	0440      	lsls	r0, r0, #17
    c036:	e008      	b.n	c04a <__kernel_rem_pio2+0x23a>
    c038:	2b00      	cmp	r3, #0
    c03a:	d002      	beq.n	c042 <__kernel_rem_pio2+0x232>
    c03c:	1ac3      	subs	r3, r0, r3
    c03e:	6013      	str	r3, [r2, #0]
    c040:	2701      	movs	r7, #1
    c042:	3101      	adds	r1, #1
    c044:	3204      	adds	r2, #4
    c046:	458b      	cmp	fp, r1
    c048:	d008      	beq.n	c05c <__kernel_rem_pio2+0x24c>
    c04a:	6813      	ldr	r3, [r2, #0]
    c04c:	2f00      	cmp	r7, #0
    c04e:	d0f3      	beq.n	c038 <__kernel_rem_pio2+0x228>
    c050:	1af3      	subs	r3, r6, r3
    c052:	3101      	adds	r1, #1
    c054:	6013      	str	r3, [r2, #0]
    c056:	3204      	adds	r2, #4
    c058:	458b      	cmp	fp, r1
    c05a:	d1f6      	bne.n	c04a <__kernel_rem_pio2+0x23a>
    c05c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c05e:	2b00      	cmp	r3, #0
    c060:	dd05      	ble.n	c06e <__kernel_rem_pio2+0x25e>
    c062:	2b01      	cmp	r3, #1
    c064:	d100      	bne.n	c068 <__kernel_rem_pio2+0x258>
    c066:	e0cd      	b.n	c204 <__kernel_rem_pio2+0x3f4>
    c068:	2b02      	cmp	r3, #2
    c06a:	d100      	bne.n	c06e <__kernel_rem_pio2+0x25e>
    c06c:	e0d6      	b.n	c21c <__kernel_rem_pio2+0x40c>
    c06e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c070:	2a02      	cmp	r2, #2
    c072:	d100      	bne.n	c076 <__kernel_rem_pio2+0x266>
    c074:	e0a1      	b.n	c1ba <__kernel_rem_pio2+0x3aa>
    c076:	1c20      	adds	r0, r4, #0
    c078:	1c29      	adds	r1, r5, #0
    c07a:	4a42      	ldr	r2, [pc, #264]	; (c184 <__kernel_rem_pio2+0x374>)
    c07c:	4b42      	ldr	r3, [pc, #264]	; (c188 <__kernel_rem_pio2+0x378>)
    c07e:	f001 fbf3 	bl	d868 <____eqdf2_from_thumb>
    c082:	2800      	cmp	r0, #0
    c084:	d000      	beq.n	c088 <__kernel_rem_pio2+0x278>
    c086:	e0ee      	b.n	c266 <__kernel_rem_pio2+0x456>
    c088:	465c      	mov	r4, fp
    c08a:	9b07      	ldr	r3, [sp, #28]
    c08c:	3c01      	subs	r4, #1
    c08e:	42a3      	cmp	r3, r4
    c090:	dc0d      	bgt.n	c0ae <__kernel_rem_pio2+0x29e>
    c092:	00a5      	lsls	r5, r4, #2
    c094:	ae89      	add	r6, sp, #548	; 0x224
    c096:	1971      	adds	r1, r6, r5
    c098:	1c22      	adds	r2, r4, #0
    c09a:	680b      	ldr	r3, [r1, #0]
    c09c:	4318      	orrs	r0, r3
    c09e:	9b07      	ldr	r3, [sp, #28]
    c0a0:	3a01      	subs	r2, #1
    c0a2:	3904      	subs	r1, #4
    c0a4:	4293      	cmp	r3, r2
    c0a6:	ddf8      	ble.n	c09a <__kernel_rem_pio2+0x28a>
    c0a8:	2800      	cmp	r0, #0
    c0aa:	d000      	beq.n	c0ae <__kernel_rem_pio2+0x29e>
    c0ac:	e0e7      	b.n	c27e <__kernel_rem_pio2+0x46e>
    c0ae:	9c02      	ldr	r4, [sp, #8]
    c0b0:	ad89      	add	r5, sp, #548	; 0x224
    c0b2:	1963      	adds	r3, r4, r5
    c0b4:	3b04      	subs	r3, #4
    c0b6:	681b      	ldr	r3, [r3, #0]
    c0b8:	2b00      	cmp	r3, #0
    c0ba:	d000      	beq.n	c0be <__kernel_rem_pio2+0x2ae>
    c0bc:	e0c6      	b.n	c24c <__kernel_rem_pio2+0x43c>
    c0be:	9b02      	ldr	r3, [sp, #8]
    c0c0:	ae89      	add	r6, sp, #548	; 0x224
    c0c2:	3b08      	subs	r3, #8
    c0c4:	18f2      	adds	r2, r6, r3
    c0c6:	2101      	movs	r1, #1
    c0c8:	6813      	ldr	r3, [r2, #0]
    c0ca:	3101      	adds	r1, #1
    c0cc:	3a04      	subs	r2, #4
    c0ce:	2b00      	cmp	r3, #0
    c0d0:	d0fa      	beq.n	c0c8 <__kernel_rem_pio2+0x2b8>
    c0d2:	2001      	movs	r0, #1
    c0d4:	4458      	add	r0, fp
    c0d6:	465a      	mov	r2, fp
    c0d8:	4680      	mov	r8, r0
    c0da:	1857      	adds	r7, r2, r1
    c0dc:	45b8      	cmp	r8, r7
    c0de:	dd01      	ble.n	c0e4 <__kernel_rem_pio2+0x2d4>
    c0e0:	46bb      	mov	fp, r7
    c0e2:	e714      	b.n	bf0e <__kernel_rem_pio2+0xfe>
    c0e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c0e6:	9ca7      	ldr	r4, [sp, #668]	; 0x29c
    c0e8:	445b      	add	r3, fp
    c0ea:	009b      	lsls	r3, r3, #2
    c0ec:	9a03      	ldr	r2, [sp, #12]
    c0ee:	18e3      	adds	r3, r4, r3
    c0f0:	445a      	add	r2, fp
    c0f2:	3304      	adds	r3, #4
    c0f4:	930b      	str	r3, [sp, #44]	; 0x2c
    c0f6:	ad61      	add	r5, sp, #388	; 0x184
    c0f8:	00d3      	lsls	r3, r2, #3
    c0fa:	18ed      	adds	r5, r5, r3
    c0fc:	ae11      	add	r6, sp, #68	; 0x44
    c0fe:	00c3      	lsls	r3, r0, #3
    c100:	18f6      	adds	r6, r6, r3
    c102:	46a9      	mov	r9, r5
    c104:	46b3      	mov	fp, r6
    c106:	4692      	mov	sl, r2
    c108:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c10a:	6808      	ldr	r0, [r1, #0]
    c10c:	f001 fba0 	bl	d850 <____floatsidf_from_thumb>
    c110:	9b06      	ldr	r3, [sp, #24]
    c112:	464a      	mov	r2, r9
    c114:	6010      	str	r0, [r2, #0]
    c116:	6051      	str	r1, [r2, #4]
    c118:	2b00      	cmp	r3, #0
    c11a:	db49      	blt.n	c1b0 <__kernel_rem_pio2+0x3a0>
    c11c:	4819      	ldr	r0, [pc, #100]	; (c184 <__kernel_rem_pio2+0x374>)
    c11e:	491a      	ldr	r1, [pc, #104]	; (c188 <__kernel_rem_pio2+0x378>)
    c120:	4655      	mov	r5, sl
    c122:	900c      	str	r0, [sp, #48]	; 0x30
    c124:	910d      	str	r1, [sp, #52]	; 0x34
    c126:	ae61      	add	r6, sp, #388	; 0x184
    c128:	00eb      	lsls	r3, r5, #3
    c12a:	9c05      	ldr	r4, [sp, #20]
    c12c:	18f5      	adds	r5, r6, r3
    c12e:	2600      	movs	r6, #0
    c130:	682a      	ldr	r2, [r5, #0]
    c132:	686b      	ldr	r3, [r5, #4]
    c134:	cc03      	ldmia	r4!, {r0, r1}
    c136:	f001 fb9f 	bl	d878 <____muldf3_from_thumb>
    c13a:	1c02      	adds	r2, r0, #0
    c13c:	1c0b      	adds	r3, r1, #0
    c13e:	980c      	ldr	r0, [sp, #48]	; 0x30
    c140:	990d      	ldr	r1, [sp, #52]	; 0x34
    c142:	f001 fb9d 	bl	d880 <____adddf3_from_thumb>
    c146:	900c      	str	r0, [sp, #48]	; 0x30
    c148:	910d      	str	r1, [sp, #52]	; 0x34
    c14a:	9903      	ldr	r1, [sp, #12]
    c14c:	3601      	adds	r6, #1
    c14e:	3d08      	subs	r5, #8
    c150:	42b1      	cmp	r1, r6
    c152:	d1ed      	bne.n	c130 <__kernel_rem_pio2+0x320>
    c154:	465c      	mov	r4, fp
    c156:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c158:	3408      	adds	r4, #8
    c15a:	2501      	movs	r5, #1
    c15c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c15e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c160:	46a3      	mov	fp, r4
    c162:	3604      	adds	r6, #4
    c164:	3c08      	subs	r4, #8
    c166:	2008      	movs	r0, #8
    c168:	44a8      	add	r8, r5
    c16a:	c40c      	stmia	r4!, {r2, r3}
    c16c:	960b      	str	r6, [sp, #44]	; 0x2c
    c16e:	4481      	add	r9, r0
    c170:	44aa      	add	sl, r5
    c172:	45b8      	cmp	r8, r7
    c174:	ddc8      	ble.n	c108 <__kernel_rem_pio2+0x2f8>
    c176:	46bb      	mov	fp, r7
    c178:	e6c9      	b.n	bf0e <__kernel_rem_pio2+0xfe>
    c17a:	46c0      	nop			; (mov r8, r8)
    c17c:	fffffd8c 	.word	0xfffffd8c
    c180:	0000daa4 	.word	0x0000daa4
	...
    c18c:	3e700000 	.word	0x3e700000
    c190:	00000000 	.word	0x00000000
    c194:	c1700000 	.word	0xc1700000
    c198:	00000000 	.word	0x00000000
    c19c:	3fc00000 	.word	0x3fc00000
    c1a0:	00000000 	.word	0x00000000
    c1a4:	c0200000 	.word	0xc0200000
    c1a8:	00000000 	.word	0x00000000
    c1ac:	00ffffff 	.word	0x00ffffff
    c1b0:	4d9e      	ldr	r5, [pc, #632]	; (c42c <__kernel_rem_pio2+0x61c>)
    c1b2:	4c9d      	ldr	r4, [pc, #628]	; (c428 <__kernel_rem_pio2+0x618>)
    c1b4:	940c      	str	r4, [sp, #48]	; 0x30
    c1b6:	950d      	str	r5, [sp, #52]	; 0x34
    c1b8:	e7cc      	b.n	c154 <__kernel_rem_pio2+0x344>
    c1ba:	1c22      	adds	r2, r4, #0
    c1bc:	1c2b      	adds	r3, r5, #0
    c1be:	489c      	ldr	r0, [pc, #624]	; (c430 <__kernel_rem_pio2+0x620>)
    c1c0:	499c      	ldr	r1, [pc, #624]	; (c434 <__kernel_rem_pio2+0x624>)
    c1c2:	f001 fb61 	bl	d888 <____subdf3_from_thumb>
    c1c6:	1c04      	adds	r4, r0, #0
    c1c8:	1c0d      	adds	r5, r1, #0
    c1ca:	2f00      	cmp	r7, #0
    c1cc:	d100      	bne.n	c1d0 <__kernel_rem_pio2+0x3c0>
    c1ce:	e752      	b.n	c076 <__kernel_rem_pio2+0x266>
    c1d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c1d2:	4897      	ldr	r0, [pc, #604]	; (c430 <__kernel_rem_pio2+0x620>)
    c1d4:	4997      	ldr	r1, [pc, #604]	; (c434 <__kernel_rem_pio2+0x624>)
    c1d6:	f000 fdbb 	bl	cd50 <scalbn>
    c1da:	1c02      	adds	r2, r0, #0
    c1dc:	1c0b      	adds	r3, r1, #0
    c1de:	1c20      	adds	r0, r4, #0
    c1e0:	1c29      	adds	r1, r5, #0
    c1e2:	f001 fb51 	bl	d888 <____subdf3_from_thumb>
    c1e6:	1c04      	adds	r4, r0, #0
    c1e8:	1c0d      	adds	r5, r1, #0
    c1ea:	e744      	b.n	c076 <__kernel_rem_pio2+0x266>
    c1ec:	9809      	ldr	r0, [sp, #36]	; 0x24
    c1ee:	2800      	cmp	r0, #0
    c1f0:	d120      	bne.n	c234 <__kernel_rem_pio2+0x424>
    c1f2:	4659      	mov	r1, fp
    c1f4:	008b      	lsls	r3, r1, #2
    c1f6:	aa89      	add	r2, sp, #548	; 0x224
    c1f8:	189b      	adds	r3, r3, r2
    c1fa:	3b04      	subs	r3, #4
    c1fc:	681b      	ldr	r3, [r3, #0]
    c1fe:	15db      	asrs	r3, r3, #23
    c200:	930a      	str	r3, [sp, #40]	; 0x28
    c202:	e708      	b.n	c016 <__kernel_rem_pio2+0x206>
    c204:	465b      	mov	r3, fp
    c206:	3b01      	subs	r3, #1
    c208:	2089      	movs	r0, #137	; 0x89
    c20a:	009b      	lsls	r3, r3, #2
    c20c:	0080      	lsls	r0, r0, #2
    c20e:	18c0      	adds	r0, r0, r3
    c210:	466e      	mov	r6, sp
    c212:	5982      	ldr	r2, [r0, r6]
    c214:	4988      	ldr	r1, [pc, #544]	; (c438 <__kernel_rem_pio2+0x628>)
    c216:	400a      	ands	r2, r1
    c218:	5182      	str	r2, [r0, r6]
    c21a:	e728      	b.n	c06e <__kernel_rem_pio2+0x25e>
    c21c:	465b      	mov	r3, fp
    c21e:	3b01      	subs	r3, #1
    c220:	2089      	movs	r0, #137	; 0x89
    c222:	009b      	lsls	r3, r3, #2
    c224:	0080      	lsls	r0, r0, #2
    c226:	18c0      	adds	r0, r0, r3
    c228:	466e      	mov	r6, sp
    c22a:	5982      	ldr	r2, [r0, r6]
    c22c:	4983      	ldr	r1, [pc, #524]	; (c43c <__kernel_rem_pio2+0x62c>)
    c22e:	400a      	ands	r2, r1
    c230:	5182      	str	r2, [r0, r6]
    c232:	e71c      	b.n	c06e <__kernel_rem_pio2+0x25e>
    c234:	1c20      	adds	r0, r4, #0
    c236:	1c29      	adds	r1, r5, #0
    c238:	4a81      	ldr	r2, [pc, #516]	; (c440 <__kernel_rem_pio2+0x630>)
    c23a:	4b82      	ldr	r3, [pc, #520]	; (c444 <__kernel_rem_pio2+0x634>)
    c23c:	f001 fb18 	bl	d870 <____gedf2_from_thumb>
    c240:	2800      	cmp	r0, #0
    c242:	db00      	blt.n	c246 <__kernel_rem_pio2+0x436>
    c244:	e0ec      	b.n	c420 <__kernel_rem_pio2+0x610>
    c246:	2300      	movs	r3, #0
    c248:	930a      	str	r3, [sp, #40]	; 0x28
    c24a:	e714      	b.n	c076 <__kernel_rem_pio2+0x266>
    c24c:	2001      	movs	r0, #1
    c24e:	2101      	movs	r1, #1
    c250:	4458      	add	r0, fp
    c252:	465a      	mov	r2, fp
    c254:	4680      	mov	r8, r0
    c256:	1857      	adds	r7, r2, r1
    c258:	45b8      	cmp	r8, r7
    c25a:	dd00      	ble.n	c25e <__kernel_rem_pio2+0x44e>
    c25c:	e740      	b.n	c0e0 <__kernel_rem_pio2+0x2d0>
    c25e:	e741      	b.n	c0e4 <__kernel_rem_pio2+0x2d4>
    c260:	4d72      	ldr	r5, [pc, #456]	; (c42c <__kernel_rem_pio2+0x61c>)
    c262:	4c71      	ldr	r4, [pc, #452]	; (c428 <__kernel_rem_pio2+0x618>)
    c264:	e646      	b.n	bef4 <__kernel_rem_pio2+0xe4>
    c266:	1c20      	adds	r0, r4, #0
    c268:	1c29      	adds	r1, r5, #0
    c26a:	4b70      	ldr	r3, [pc, #448]	; (c42c <__kernel_rem_pio2+0x61c>)
    c26c:	4a6e      	ldr	r2, [pc, #440]	; (c428 <__kernel_rem_pio2+0x618>)
    c26e:	f001 fafb 	bl	d868 <____eqdf2_from_thumb>
    c272:	2800      	cmp	r0, #0
    c274:	d000      	beq.n	c278 <__kernel_rem_pio2+0x468>
    c276:	e182      	b.n	c57e <__kernel_rem_pio2+0x76e>
    c278:	465c      	mov	r4, fp
    c27a:	3c01      	subs	r4, #1
    c27c:	00a5      	lsls	r5, r4, #2
    c27e:	2689      	movs	r6, #137	; 0x89
    c280:	00b6      	lsls	r6, r6, #2
    c282:	9909      	ldr	r1, [sp, #36]	; 0x24
    c284:	1976      	adds	r6, r6, r5
    c286:	466a      	mov	r2, sp
    c288:	58b3      	ldr	r3, [r6, r2]
    c28a:	3918      	subs	r1, #24
    c28c:	9109      	str	r1, [sp, #36]	; 0x24
    c28e:	2b00      	cmp	r3, #0
    c290:	d000      	beq.n	c294 <__kernel_rem_pio2+0x484>
    c292:	e1ce      	b.n	c632 <__kernel_rem_pio2+0x822>
    c294:	1f2b      	subs	r3, r5, #4
    c296:	a889      	add	r0, sp, #548	; 0x224
    c298:	18c2      	adds	r2, r0, r3
    c29a:	46a3      	mov	fp, r4
    c29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c29e:	3b18      	subs	r3, #24
    c2a0:	2101      	movs	r1, #1
    c2a2:	9309      	str	r3, [sp, #36]	; 0x24
    c2a4:	6813      	ldr	r3, [r2, #0]
    c2a6:	4249      	negs	r1, r1
    c2a8:	448b      	add	fp, r1
    c2aa:	3a04      	subs	r2, #4
    c2ac:	2b00      	cmp	r3, #0
    c2ae:	d0f5      	beq.n	c29c <__kernel_rem_pio2+0x48c>
    c2b0:	485f      	ldr	r0, [pc, #380]	; (c430 <__kernel_rem_pio2+0x620>)
    c2b2:	4960      	ldr	r1, [pc, #384]	; (c434 <__kernel_rem_pio2+0x624>)
    c2b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c2b6:	f000 fd4b 	bl	cd50 <scalbn>
    c2ba:	1c04      	adds	r4, r0, #0
    c2bc:	4658      	mov	r0, fp
    c2be:	1c0d      	adds	r5, r1, #0
    c2c0:	2800      	cmp	r0, #0
    c2c2:	db5c      	blt.n	c37e <__kernel_rem_pio2+0x56e>
    c2c4:	0083      	lsls	r3, r0, #2
    c2c6:	a989      	add	r1, sp, #548	; 0x224
    c2c8:	18c9      	adds	r1, r1, r3
    c2ca:	aa11      	add	r2, sp, #68	; 0x44
    c2cc:	00c3      	lsls	r3, r0, #3
    c2ce:	4688      	mov	r8, r1
    c2d0:	18d7      	adds	r7, r2, r3
    c2d2:	465e      	mov	r6, fp
    c2d4:	4643      	mov	r3, r8
    c2d6:	6818      	ldr	r0, [r3, #0]
    c2d8:	f001 faba 	bl	d850 <____floatsidf_from_thumb>
    c2dc:	1c22      	adds	r2, r4, #0
    c2de:	1c2b      	adds	r3, r5, #0
    c2e0:	f001 faca 	bl	d878 <____muldf3_from_thumb>
    c2e4:	4a58      	ldr	r2, [pc, #352]	; (c448 <__kernel_rem_pio2+0x638>)
    c2e6:	4b59      	ldr	r3, [pc, #356]	; (c44c <__kernel_rem_pio2+0x63c>)
    c2e8:	6038      	str	r0, [r7, #0]
    c2ea:	6079      	str	r1, [r7, #4]
    c2ec:	1c20      	adds	r0, r4, #0
    c2ee:	1c29      	adds	r1, r5, #0
    c2f0:	f001 fac2 	bl	d878 <____muldf3_from_thumb>
    c2f4:	1c04      	adds	r4, r0, #0
    c2f6:	2004      	movs	r0, #4
    c2f8:	4240      	negs	r0, r0
    c2fa:	1c0d      	adds	r5, r1, #0
    c2fc:	4480      	add	r8, r0
    c2fe:	3f08      	subs	r7, #8
    c300:	3e01      	subs	r6, #1
    c302:	d2e7      	bcs.n	c2d4 <__kernel_rem_pio2+0x4c4>
    c304:	2100      	movs	r1, #0
    c306:	46d9      	mov	r9, fp
    c308:	468a      	mov	sl, r1
    c30a:	9807      	ldr	r0, [sp, #28]
    c30c:	2800      	cmp	r0, #0
    c30e:	da00      	bge.n	c312 <__kernel_rem_pio2+0x502>
    c310:	e123      	b.n	c55a <__kernel_rem_pio2+0x74a>
    c312:	4652      	mov	r2, sl
    c314:	2a00      	cmp	r2, #0
    c316:	da00      	bge.n	c31a <__kernel_rem_pio2+0x50a>
    c318:	e124      	b.n	c564 <__kernel_rem_pio2+0x754>
    c31a:	464c      	mov	r4, r9
    c31c:	00e3      	lsls	r3, r4, #3
    c31e:	ad11      	add	r5, sp, #68	; 0x44
    c320:	18ed      	adds	r5, r5, r3
    c322:	4942      	ldr	r1, [pc, #264]	; (c42c <__kernel_rem_pio2+0x61c>)
    c324:	4840      	ldr	r0, [pc, #256]	; (c428 <__kernel_rem_pio2+0x618>)
    c326:	4f4a      	ldr	r7, [pc, #296]	; (c450 <__kernel_rem_pio2+0x640>)
    c328:	46a8      	mov	r8, r5
    c32a:	2400      	movs	r4, #0
    c32c:	9000      	str	r0, [sp, #0]
    c32e:	9101      	str	r1, [sp, #4]
    c330:	e004      	b.n	c33c <__kernel_rem_pio2+0x52c>
    c332:	2008      	movs	r0, #8
    c334:	3708      	adds	r7, #8
    c336:	4480      	add	r8, r0
    c338:	4554      	cmp	r4, sl
    c33a:	dc12      	bgt.n	c362 <__kernel_rem_pio2+0x552>
    c33c:	4645      	mov	r5, r8
    c33e:	682a      	ldr	r2, [r5, #0]
    c340:	686b      	ldr	r3, [r5, #4]
    c342:	6838      	ldr	r0, [r7, #0]
    c344:	6879      	ldr	r1, [r7, #4]
    c346:	f001 fa97 	bl	d878 <____muldf3_from_thumb>
    c34a:	1c02      	adds	r2, r0, #0
    c34c:	1c0b      	adds	r3, r1, #0
    c34e:	9800      	ldr	r0, [sp, #0]
    c350:	9901      	ldr	r1, [sp, #4]
    c352:	f001 fa95 	bl	d880 <____adddf3_from_thumb>
    c356:	9e07      	ldr	r6, [sp, #28]
    c358:	3401      	adds	r4, #1
    c35a:	9000      	str	r0, [sp, #0]
    c35c:	9101      	str	r1, [sp, #4]
    c35e:	42a6      	cmp	r6, r4
    c360:	dae7      	bge.n	c332 <__kernel_rem_pio2+0x522>
    c362:	4651      	mov	r1, sl
    c364:	9c00      	ldr	r4, [sp, #0]
    c366:	9d01      	ldr	r5, [sp, #4]
    c368:	00cb      	lsls	r3, r1, #3
    c36a:	aa39      	add	r2, sp, #228	; 0xe4
    c36c:	189b      	adds	r3, r3, r2
    c36e:	601c      	str	r4, [r3, #0]
    c370:	605d      	str	r5, [r3, #4]
    c372:	464e      	mov	r6, r9
    c374:	2501      	movs	r5, #1
    c376:	44aa      	add	sl, r5
    c378:	3e01      	subs	r6, #1
    c37a:	46b1      	mov	r9, r6
    c37c:	d2c5      	bcs.n	c30a <__kernel_rem_pio2+0x4fa>
    c37e:	99a6      	ldr	r1, [sp, #664]	; 0x298
    c380:	2902      	cmp	r1, #2
    c382:	dc67      	bgt.n	c454 <__kernel_rem_pio2+0x644>
    c384:	2901      	cmp	r1, #1
    c386:	da00      	bge.n	c38a <__kernel_rem_pio2+0x57a>
    c388:	e138      	b.n	c5fc <__kernel_rem_pio2+0x7ec>
    c38a:	465c      	mov	r4, fp
    c38c:	2c00      	cmp	r4, #0
    c38e:	da00      	bge.n	c392 <__kernel_rem_pio2+0x582>
    c390:	e173      	b.n	c67a <__kernel_rem_pio2+0x86a>
    c392:	4658      	mov	r0, fp
    c394:	00c3      	lsls	r3, r0, #3
    c396:	a939      	add	r1, sp, #228	; 0xe4
    c398:	18cd      	adds	r5, r1, r3
    c39a:	4b24      	ldr	r3, [pc, #144]	; (c42c <__kernel_rem_pio2+0x61c>)
    c39c:	4a22      	ldr	r2, [pc, #136]	; (c428 <__kernel_rem_pio2+0x618>)
    c39e:	465c      	mov	r4, fp
    c3a0:	1c10      	adds	r0, r2, #0
    c3a2:	1c19      	adds	r1, r3, #0
    c3a4:	682a      	ldr	r2, [r5, #0]
    c3a6:	686b      	ldr	r3, [r5, #4]
    c3a8:	f001 fa6a 	bl	d880 <____adddf3_from_thumb>
    c3ac:	3d08      	subs	r5, #8
    c3ae:	1c02      	adds	r2, r0, #0
    c3b0:	1c0b      	adds	r3, r1, #0
    c3b2:	3c01      	subs	r4, #1
    c3b4:	d2f4      	bcs.n	c3a0 <__kernel_rem_pio2+0x590>
    c3b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c3b8:	2c00      	cmp	r4, #0
    c3ba:	d000      	beq.n	c3be <__kernel_rem_pio2+0x5ae>
    c3bc:	e0da      	b.n	c574 <__kernel_rem_pio2+0x764>
    c3be:	1c10      	adds	r0, r2, #0
    c3c0:	1c19      	adds	r1, r3, #0
    c3c2:	9e04      	ldr	r6, [sp, #16]
    c3c4:	6030      	str	r0, [r6, #0]
    c3c6:	6071      	str	r1, [r6, #4]
    c3c8:	9839      	ldr	r0, [sp, #228]	; 0xe4
    c3ca:	993a      	ldr	r1, [sp, #232]	; 0xe8
    c3cc:	f001 fa5c 	bl	d888 <____subdf3_from_thumb>
    c3d0:	465a      	mov	r2, fp
    c3d2:	2a00      	cmp	r2, #0
    c3d4:	dd0a      	ble.n	c3ec <__kernel_rem_pio2+0x5dc>
    c3d6:	465e      	mov	r6, fp
    c3d8:	ac39      	add	r4, sp, #228	; 0xe4
    c3da:	2501      	movs	r5, #1
    c3dc:	3601      	adds	r6, #1
    c3de:	3408      	adds	r4, #8
    c3e0:	cc0c      	ldmia	r4!, {r2, r3}
    c3e2:	3501      	adds	r5, #1
    c3e4:	f001 fa4c 	bl	d880 <____adddf3_from_thumb>
    c3e8:	42ae      	cmp	r6, r5
    c3ea:	d1f9      	bne.n	c3e0 <__kernel_rem_pio2+0x5d0>
    c3ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c3ee:	2b00      	cmp	r3, #0
    c3f0:	d003      	beq.n	c3fa <__kernel_rem_pio2+0x5ea>
    c3f2:	2580      	movs	r5, #128	; 0x80
    c3f4:	062d      	lsls	r5, r5, #24
    c3f6:	1943      	adds	r3, r0, r5
    c3f8:	1c18      	adds	r0, r3, #0
    c3fa:	9e04      	ldr	r6, [sp, #16]
    c3fc:	60b0      	str	r0, [r6, #8]
    c3fe:	60f1      	str	r1, [r6, #12]
    c400:	9808      	ldr	r0, [sp, #32]
    c402:	2307      	movs	r3, #7
    c404:	4018      	ands	r0, r3
    c406:	239d      	movs	r3, #157	; 0x9d
    c408:	009b      	lsls	r3, r3, #2
    c40a:	449d      	add	sp, r3
    c40c:	bc3c      	pop	{r2, r3, r4, r5}
    c40e:	4690      	mov	r8, r2
    c410:	4699      	mov	r9, r3
    c412:	46a2      	mov	sl, r4
    c414:	46ab      	mov	fp, r5
    c416:	bcf0      	pop	{r4, r5, r6, r7}
    c418:	bc02      	pop	{r1}
    c41a:	4708      	bx	r1
    c41c:	2700      	movs	r7, #0
    c41e:	e61d      	b.n	c05c <__kernel_rem_pio2+0x24c>
    c420:	2602      	movs	r6, #2
    c422:	960a      	str	r6, [sp, #40]	; 0x28
    c424:	e5fa      	b.n	c01c <__kernel_rem_pio2+0x20c>
    c426:	46c0      	nop			; (mov r8, r8)
	...
    c430:	3ff00000 	.word	0x3ff00000
    c434:	00000000 	.word	0x00000000
    c438:	007fffff 	.word	0x007fffff
    c43c:	003fffff 	.word	0x003fffff
    c440:	3fe00000 	.word	0x3fe00000
    c444:	00000000 	.word	0x00000000
    c448:	3e700000 	.word	0x3e700000
    c44c:	00000000 	.word	0x00000000
    c450:	0000dab4 	.word	0x0000dab4
    c454:	9aa6      	ldr	r2, [sp, #664]	; 0x298
    c456:	2a03      	cmp	r2, #3
    c458:	d1d2      	bne.n	c400 <__kernel_rem_pio2+0x5f0>
    c45a:	465d      	mov	r5, fp
    c45c:	2d00      	cmp	r5, #0
    c45e:	dd2c      	ble.n	c4ba <__kernel_rem_pio2+0x6aa>
    c460:	4658      	mov	r0, fp
    c462:	00c3      	lsls	r3, r0, #3
    c464:	3b08      	subs	r3, #8
    c466:	a939      	add	r1, sp, #228	; 0xe4
    c468:	18c9      	adds	r1, r1, r3
    c46a:	4688      	mov	r8, r1
    c46c:	46da      	mov	sl, fp
    c46e:	4643      	mov	r3, r8
    c470:	681c      	ldr	r4, [r3, #0]
    c472:	685d      	ldr	r5, [r3, #4]
    c474:	689e      	ldr	r6, [r3, #8]
    c476:	68df      	ldr	r7, [r3, #12]
    c478:	2201      	movs	r2, #1
    c47a:	4252      	negs	r2, r2
    c47c:	4492      	add	sl, r2
    c47e:	1c20      	adds	r0, r4, #0
    c480:	1c29      	adds	r1, r5, #0
    c482:	1c32      	adds	r2, r6, #0
    c484:	1c3b      	adds	r3, r7, #0
    c486:	f001 f9fb 	bl	d880 <____adddf3_from_thumb>
    c48a:	4642      	mov	r2, r8
    c48c:	6010      	str	r0, [r2, #0]
    c48e:	6051      	str	r1, [r2, #4]
    c490:	1c20      	adds	r0, r4, #0
    c492:	6853      	ldr	r3, [r2, #4]
    c494:	6812      	ldr	r2, [r2, #0]
    c496:	1c29      	adds	r1, r5, #0
    c498:	f001 f9f6 	bl	d888 <____subdf3_from_thumb>
    c49c:	1c0b      	adds	r3, r1, #0
    c49e:	1c02      	adds	r2, r0, #0
    c4a0:	1c39      	adds	r1, r7, #0
    c4a2:	1c30      	adds	r0, r6, #0
    c4a4:	f001 f9ec 	bl	d880 <____adddf3_from_thumb>
    c4a8:	2408      	movs	r4, #8
    c4aa:	4643      	mov	r3, r8
    c4ac:	4264      	negs	r4, r4
    c4ae:	4655      	mov	r5, sl
    c4b0:	6098      	str	r0, [r3, #8]
    c4b2:	60d9      	str	r1, [r3, #12]
    c4b4:	44a0      	add	r8, r4
    c4b6:	2d00      	cmp	r5, #0
    c4b8:	d1d9      	bne.n	c46e <__kernel_rem_pio2+0x65e>
    c4ba:	465e      	mov	r6, fp
    c4bc:	2e01      	cmp	r6, #1
    c4be:	dc00      	bgt.n	c4c2 <__kernel_rem_pio2+0x6b2>
    c4c0:	e0de      	b.n	c680 <__kernel_rem_pio2+0x870>
    c4c2:	4658      	mov	r0, fp
    c4c4:	00c0      	lsls	r0, r0, #3
    c4c6:	1c03      	adds	r3, r0, #0
    c4c8:	3b08      	subs	r3, #8
    c4ca:	a939      	add	r1, sp, #228	; 0xe4
    c4cc:	18c9      	adds	r1, r1, r3
    c4ce:	4681      	mov	r9, r0
    c4d0:	4688      	mov	r8, r1
    c4d2:	46da      	mov	sl, fp
    c4d4:	4643      	mov	r3, r8
    c4d6:	681c      	ldr	r4, [r3, #0]
    c4d8:	685d      	ldr	r5, [r3, #4]
    c4da:	689e      	ldr	r6, [r3, #8]
    c4dc:	68df      	ldr	r7, [r3, #12]
    c4de:	2201      	movs	r2, #1
    c4e0:	4252      	negs	r2, r2
    c4e2:	4492      	add	sl, r2
    c4e4:	1c20      	adds	r0, r4, #0
    c4e6:	1c29      	adds	r1, r5, #0
    c4e8:	1c32      	adds	r2, r6, #0
    c4ea:	1c3b      	adds	r3, r7, #0
    c4ec:	f001 f9c8 	bl	d880 <____adddf3_from_thumb>
    c4f0:	4642      	mov	r2, r8
    c4f2:	6010      	str	r0, [r2, #0]
    c4f4:	6051      	str	r1, [r2, #4]
    c4f6:	1c20      	adds	r0, r4, #0
    c4f8:	6853      	ldr	r3, [r2, #4]
    c4fa:	6812      	ldr	r2, [r2, #0]
    c4fc:	1c29      	adds	r1, r5, #0
    c4fe:	f001 f9c3 	bl	d888 <____subdf3_from_thumb>
    c502:	1c0b      	adds	r3, r1, #0
    c504:	1c02      	adds	r2, r0, #0
    c506:	1c39      	adds	r1, r7, #0
    c508:	1c30      	adds	r0, r6, #0
    c50a:	f001 f9b9 	bl	d880 <____adddf3_from_thumb>
    c50e:	2408      	movs	r4, #8
    c510:	4643      	mov	r3, r8
    c512:	4264      	negs	r4, r4
    c514:	4655      	mov	r5, sl
    c516:	6098      	str	r0, [r3, #8]
    c518:	60d9      	str	r1, [r3, #12]
    c51a:	44a0      	add	r8, r4
    c51c:	2d01      	cmp	r5, #1
    c51e:	d1d9      	bne.n	c4d4 <__kernel_rem_pio2+0x6c4>
    c520:	ad39      	add	r5, sp, #228	; 0xe4
    c522:	495b      	ldr	r1, [pc, #364]	; (c690 <__kernel_rem_pio2+0x880>)
    c524:	4859      	ldr	r0, [pc, #356]	; (c68c <__kernel_rem_pio2+0x87c>)
    c526:	444d      	add	r5, r9
    c528:	465c      	mov	r4, fp
    c52a:	682a      	ldr	r2, [r5, #0]
    c52c:	686b      	ldr	r3, [r5, #4]
    c52e:	3c01      	subs	r4, #1
    c530:	f001 f9a6 	bl	d880 <____adddf3_from_thumb>
    c534:	3d08      	subs	r5, #8
    c536:	2c01      	cmp	r4, #1
    c538:	d1f7      	bne.n	c52a <__kernel_rem_pio2+0x71a>
    c53a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c53c:	2e00      	cmp	r6, #0
    c53e:	d000      	beq.n	c542 <__kernel_rem_pio2+0x732>
    c540:	e085      	b.n	c64e <__kernel_rem_pio2+0x83e>
    c542:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    c544:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
    c546:	9a04      	ldr	r2, [sp, #16]
    c548:	6013      	str	r3, [r2, #0]
    c54a:	6054      	str	r4, [r2, #4]
    c54c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    c54e:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
    c550:	6110      	str	r0, [r2, #16]
    c552:	6151      	str	r1, [r2, #20]
    c554:	6093      	str	r3, [r2, #8]
    c556:	60d4      	str	r4, [r2, #12]
    c558:	e752      	b.n	c400 <__kernel_rem_pio2+0x5f0>
    c55a:	4a4d      	ldr	r2, [pc, #308]	; (c690 <__kernel_rem_pio2+0x880>)
    c55c:	494b      	ldr	r1, [pc, #300]	; (c68c <__kernel_rem_pio2+0x87c>)
    c55e:	9100      	str	r1, [sp, #0]
    c560:	9201      	str	r2, [sp, #4]
    c562:	e6fe      	b.n	c362 <__kernel_rem_pio2+0x552>
    c564:	4c4a      	ldr	r4, [pc, #296]	; (c690 <__kernel_rem_pio2+0x880>)
    c566:	4b49      	ldr	r3, [pc, #292]	; (c68c <__kernel_rem_pio2+0x87c>)
    c568:	9300      	str	r3, [sp, #0]
    c56a:	9401      	str	r4, [sp, #4]
    c56c:	e6f9      	b.n	c362 <__kernel_rem_pio2+0x552>
    c56e:	2200      	movs	r2, #0
    c570:	9210      	str	r2, [sp, #64]	; 0x40
    c572:	e469      	b.n	be48 <__kernel_rem_pio2+0x38>
    c574:	2580      	movs	r5, #128	; 0x80
    c576:	062d      	lsls	r5, r5, #24
    c578:	1950      	adds	r0, r2, r5
    c57a:	1c19      	adds	r1, r3, #0
    c57c:	e721      	b.n	c3c2 <__kernel_rem_pio2+0x5b2>
    c57e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c580:	1c20      	adds	r0, r4, #0
    c582:	4272      	negs	r2, r6
    c584:	1c29      	adds	r1, r5, #0
    c586:	f000 fbe3 	bl	cd50 <scalbn>
    c58a:	4a42      	ldr	r2, [pc, #264]	; (c694 <__kernel_rem_pio2+0x884>)
    c58c:	4b42      	ldr	r3, [pc, #264]	; (c698 <__kernel_rem_pio2+0x888>)
    c58e:	900e      	str	r0, [sp, #56]	; 0x38
    c590:	910f      	str	r1, [sp, #60]	; 0x3c
    c592:	f001 f96d 	bl	d870 <____gedf2_from_thumb>
    c596:	2800      	cmp	r0, #0
    c598:	db4d      	blt.n	c636 <__kernel_rem_pio2+0x826>
    c59a:	4a40      	ldr	r2, [pc, #256]	; (c69c <__kernel_rem_pio2+0x88c>)
    c59c:	4b40      	ldr	r3, [pc, #256]	; (c6a0 <__kernel_rem_pio2+0x890>)
    c59e:	980e      	ldr	r0, [sp, #56]	; 0x38
    c5a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c5a2:	f001 f969 	bl	d878 <____muldf3_from_thumb>
    c5a6:	f001 f973 	bl	d890 <____fixdfsi_from_thumb>
    c5aa:	f001 f951 	bl	d850 <____floatsidf_from_thumb>
    c5ae:	1c05      	adds	r5, r0, #0
    c5b0:	4658      	mov	r0, fp
    c5b2:	0084      	lsls	r4, r0, #2
    c5b4:	4a3b      	ldr	r2, [pc, #236]	; (c6a4 <__kernel_rem_pio2+0x894>)
    c5b6:	4b3c      	ldr	r3, [pc, #240]	; (c6a8 <__kernel_rem_pio2+0x898>)
    c5b8:	1c28      	adds	r0, r5, #0
    c5ba:	1c0e      	adds	r6, r1, #0
    c5bc:	f001 f95c 	bl	d878 <____muldf3_from_thumb>
    c5c0:	1c02      	adds	r2, r0, #0
    c5c2:	1c0b      	adds	r3, r1, #0
    c5c4:	980e      	ldr	r0, [sp, #56]	; 0x38
    c5c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c5c8:	f001 f95a 	bl	d880 <____adddf3_from_thumb>
    c5cc:	f001 f960 	bl	d890 <____fixdfsi_from_thumb>
    c5d0:	2289      	movs	r2, #137	; 0x89
    c5d2:	0092      	lsls	r2, r2, #2
    c5d4:	1912      	adds	r2, r2, r4
    c5d6:	2301      	movs	r3, #1
    c5d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c5da:	4669      	mov	r1, sp
    c5dc:	449b      	add	fp, r3
    c5de:	5050      	str	r0, [r2, r1]
    c5e0:	3418      	adds	r4, #24
    c5e2:	4658      	mov	r0, fp
    c5e4:	9409      	str	r4, [sp, #36]	; 0x24
    c5e6:	1c31      	adds	r1, r6, #0
    c5e8:	0084      	lsls	r4, r0, #2
    c5ea:	1c28      	adds	r0, r5, #0
    c5ec:	f001 f950 	bl	d890 <____fixdfsi_from_thumb>
    c5f0:	2289      	movs	r2, #137	; 0x89
    c5f2:	0092      	lsls	r2, r2, #2
    c5f4:	1912      	adds	r2, r2, r4
    c5f6:	4669      	mov	r1, sp
    c5f8:	5050      	str	r0, [r2, r1]
    c5fa:	e659      	b.n	c2b0 <__kernel_rem_pio2+0x4a0>
    c5fc:	2900      	cmp	r1, #0
    c5fe:	d000      	beq.n	c602 <__kernel_rem_pio2+0x7f2>
    c600:	e6fe      	b.n	c400 <__kernel_rem_pio2+0x5f0>
    c602:	465b      	mov	r3, fp
    c604:	2b00      	cmp	r3, #0
    c606:	db3e      	blt.n	c686 <__kernel_rem_pio2+0x876>
    c608:	465e      	mov	r6, fp
    c60a:	00f2      	lsls	r2, r6, #3
    c60c:	ab39      	add	r3, sp, #228	; 0xe4
    c60e:	4920      	ldr	r1, [pc, #128]	; (c690 <__kernel_rem_pio2+0x880>)
    c610:	481e      	ldr	r0, [pc, #120]	; (c68c <__kernel_rem_pio2+0x87c>)
    c612:	189d      	adds	r5, r3, r2
    c614:	465c      	mov	r4, fp
    c616:	682a      	ldr	r2, [r5, #0]
    c618:	686b      	ldr	r3, [r5, #4]
    c61a:	f001 f931 	bl	d880 <____adddf3_from_thumb>
    c61e:	3d08      	subs	r5, #8
    c620:	3c01      	subs	r4, #1
    c622:	d2f8      	bcs.n	c616 <__kernel_rem_pio2+0x806>
    c624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c626:	2a00      	cmp	r2, #0
    c628:	d122      	bne.n	c670 <__kernel_rem_pio2+0x860>
    c62a:	9e04      	ldr	r6, [sp, #16]
    c62c:	6030      	str	r0, [r6, #0]
    c62e:	6071      	str	r1, [r6, #4]
    c630:	e6e6      	b.n	c400 <__kernel_rem_pio2+0x5f0>
    c632:	46a3      	mov	fp, r4
    c634:	e63c      	b.n	c2b0 <__kernel_rem_pio2+0x4a0>
    c636:	465b      	mov	r3, fp
    c638:	980e      	ldr	r0, [sp, #56]	; 0x38
    c63a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c63c:	009c      	lsls	r4, r3, #2
    c63e:	f001 f927 	bl	d890 <____fixdfsi_from_thumb>
    c642:	2689      	movs	r6, #137	; 0x89
    c644:	00b6      	lsls	r6, r6, #2
    c646:	1936      	adds	r6, r6, r4
    c648:	466d      	mov	r5, sp
    c64a:	5170      	str	r0, [r6, r5]
    c64c:	e630      	b.n	c2b0 <__kernel_rem_pio2+0x4a0>
    c64e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    c650:	2280      	movs	r2, #128	; 0x80
    c652:	9c04      	ldr	r4, [sp, #16]
    c654:	0612      	lsls	r2, r2, #24
    c656:	189b      	adds	r3, r3, r2
    c658:	6023      	str	r3, [r4, #0]
    c65a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    c65c:	6063      	str	r3, [r4, #4]
    c65e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    c660:	189b      	adds	r3, r3, r2
    c662:	60a3      	str	r3, [r4, #8]
    c664:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    c666:	60e3      	str	r3, [r4, #12]
    c668:	1883      	adds	r3, r0, r2
    c66a:	6123      	str	r3, [r4, #16]
    c66c:	6161      	str	r1, [r4, #20]
    c66e:	e6c7      	b.n	c400 <__kernel_rem_pio2+0x5f0>
    c670:	2580      	movs	r5, #128	; 0x80
    c672:	062d      	lsls	r5, r5, #24
    c674:	1943      	adds	r3, r0, r5
    c676:	1c18      	adds	r0, r3, #0
    c678:	e7d7      	b.n	c62a <__kernel_rem_pio2+0x81a>
    c67a:	4b05      	ldr	r3, [pc, #20]	; (c690 <__kernel_rem_pio2+0x880>)
    c67c:	4a03      	ldr	r2, [pc, #12]	; (c68c <__kernel_rem_pio2+0x87c>)
    c67e:	e69a      	b.n	c3b6 <__kernel_rem_pio2+0x5a6>
    c680:	4903      	ldr	r1, [pc, #12]	; (c690 <__kernel_rem_pio2+0x880>)
    c682:	4802      	ldr	r0, [pc, #8]	; (c68c <__kernel_rem_pio2+0x87c>)
    c684:	e759      	b.n	c53a <__kernel_rem_pio2+0x72a>
    c686:	4902      	ldr	r1, [pc, #8]	; (c690 <__kernel_rem_pio2+0x880>)
    c688:	4800      	ldr	r0, [pc, #0]	; (c68c <__kernel_rem_pio2+0x87c>)
    c68a:	e7cb      	b.n	c624 <__kernel_rem_pio2+0x814>
	...
    c694:	41700000 	.word	0x41700000
    c698:	00000000 	.word	0x00000000
    c69c:	3e700000 	.word	0x3e700000
    c6a0:	00000000 	.word	0x00000000
    c6a4:	c1700000 	.word	0xc1700000
    c6a8:	00000000 	.word	0x00000000

0000c6ac <__kernel_sin>:
    c6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6ae:	b088      	sub	sp, #32
    c6b0:	9200      	str	r2, [sp, #0]
    c6b2:	9301      	str	r3, [sp, #4]
    c6b4:	4a4d      	ldr	r2, [pc, #308]	; (c7ec <__kernel_sin+0x140>)
    c6b6:	4b4e      	ldr	r3, [pc, #312]	; (c7f0 <__kernel_sin+0x144>)
    c6b8:	4002      	ands	r2, r0
    c6ba:	9002      	str	r0, [sp, #8]
    c6bc:	9103      	str	r1, [sp, #12]
    c6be:	429a      	cmp	r2, r3
    c6c0:	dc03      	bgt.n	c6ca <__kernel_sin+0x1e>
    c6c2:	f001 f8e5 	bl	d890 <____fixdfsi_from_thumb>
    c6c6:	2800      	cmp	r0, #0
    c6c8:	d070      	beq.n	c7ac <__kernel_sin+0x100>
    c6ca:	9802      	ldr	r0, [sp, #8]
    c6cc:	9903      	ldr	r1, [sp, #12]
    c6ce:	1c02      	adds	r2, r0, #0
    c6d0:	1c0b      	adds	r3, r1, #0
    c6d2:	f001 f8d1 	bl	d878 <____muldf3_from_thumb>
    c6d6:	1c06      	adds	r6, r0, #0
    c6d8:	1c0f      	adds	r7, r1, #0
    c6da:	1c32      	adds	r2, r6, #0
    c6dc:	1c3b      	adds	r3, r7, #0
    c6de:	9802      	ldr	r0, [sp, #8]
    c6e0:	9903      	ldr	r1, [sp, #12]
    c6e2:	f001 f8c9 	bl	d878 <____muldf3_from_thumb>
    c6e6:	4a43      	ldr	r2, [pc, #268]	; (c7f4 <__kernel_sin+0x148>)
    c6e8:	4b43      	ldr	r3, [pc, #268]	; (c7f8 <__kernel_sin+0x14c>)
    c6ea:	9006      	str	r0, [sp, #24]
    c6ec:	9107      	str	r1, [sp, #28]
    c6ee:	1c30      	adds	r0, r6, #0
    c6f0:	1c39      	adds	r1, r7, #0
    c6f2:	f001 f8c1 	bl	d878 <____muldf3_from_thumb>
    c6f6:	4a41      	ldr	r2, [pc, #260]	; (c7fc <__kernel_sin+0x150>)
    c6f8:	4b41      	ldr	r3, [pc, #260]	; (c800 <__kernel_sin+0x154>)
    c6fa:	f001 f8c5 	bl	d888 <____subdf3_from_thumb>
    c6fe:	1c02      	adds	r2, r0, #0
    c700:	1c0b      	adds	r3, r1, #0
    c702:	1c30      	adds	r0, r6, #0
    c704:	1c39      	adds	r1, r7, #0
    c706:	f001 f8b7 	bl	d878 <____muldf3_from_thumb>
    c70a:	4a3e      	ldr	r2, [pc, #248]	; (c804 <__kernel_sin+0x158>)
    c70c:	4b3e      	ldr	r3, [pc, #248]	; (c808 <__kernel_sin+0x15c>)
    c70e:	f001 f8b7 	bl	d880 <____adddf3_from_thumb>
    c712:	1c02      	adds	r2, r0, #0
    c714:	1c0b      	adds	r3, r1, #0
    c716:	1c30      	adds	r0, r6, #0
    c718:	1c39      	adds	r1, r7, #0
    c71a:	f001 f8ad 	bl	d878 <____muldf3_from_thumb>
    c71e:	4a3b      	ldr	r2, [pc, #236]	; (c80c <__kernel_sin+0x160>)
    c720:	4b3b      	ldr	r3, [pc, #236]	; (c810 <__kernel_sin+0x164>)
    c722:	f001 f8b1 	bl	d888 <____subdf3_from_thumb>
    c726:	1c02      	adds	r2, r0, #0
    c728:	1c0b      	adds	r3, r1, #0
    c72a:	1c30      	adds	r0, r6, #0
    c72c:	1c39      	adds	r1, r7, #0
    c72e:	f001 f8a3 	bl	d878 <____muldf3_from_thumb>
    c732:	4a38      	ldr	r2, [pc, #224]	; (c814 <__kernel_sin+0x168>)
    c734:	4b38      	ldr	r3, [pc, #224]	; (c818 <__kernel_sin+0x16c>)
    c736:	f001 f8a3 	bl	d880 <____adddf3_from_thumb>
    c73a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c73c:	9004      	str	r0, [sp, #16]
    c73e:	9105      	str	r1, [sp, #20]
    c740:	2b00      	cmp	r3, #0
    c742:	d039      	beq.n	c7b8 <__kernel_sin+0x10c>
    c744:	4a35      	ldr	r2, [pc, #212]	; (c81c <__kernel_sin+0x170>)
    c746:	4b36      	ldr	r3, [pc, #216]	; (c820 <__kernel_sin+0x174>)
    c748:	9800      	ldr	r0, [sp, #0]
    c74a:	9901      	ldr	r1, [sp, #4]
    c74c:	f001 f894 	bl	d878 <____muldf3_from_thumb>
    c750:	9a04      	ldr	r2, [sp, #16]
    c752:	9b05      	ldr	r3, [sp, #20]
    c754:	1c04      	adds	r4, r0, #0
    c756:	1c0d      	adds	r5, r1, #0
    c758:	9806      	ldr	r0, [sp, #24]
    c75a:	9907      	ldr	r1, [sp, #28]
    c75c:	f001 f88c 	bl	d878 <____muldf3_from_thumb>
    c760:	1c02      	adds	r2, r0, #0
    c762:	1c0b      	adds	r3, r1, #0
    c764:	1c20      	adds	r0, r4, #0
    c766:	1c29      	adds	r1, r5, #0
    c768:	f001 f88e 	bl	d888 <____subdf3_from_thumb>
    c76c:	1c02      	adds	r2, r0, #0
    c76e:	1c0b      	adds	r3, r1, #0
    c770:	1c30      	adds	r0, r6, #0
    c772:	1c39      	adds	r1, r7, #0
    c774:	f001 f880 	bl	d878 <____muldf3_from_thumb>
    c778:	9a00      	ldr	r2, [sp, #0]
    c77a:	9b01      	ldr	r3, [sp, #4]
    c77c:	f001 f884 	bl	d888 <____subdf3_from_thumb>
    c780:	4a28      	ldr	r2, [pc, #160]	; (c824 <__kernel_sin+0x178>)
    c782:	4b29      	ldr	r3, [pc, #164]	; (c828 <__kernel_sin+0x17c>)
    c784:	1c04      	adds	r4, r0, #0
    c786:	1c0d      	adds	r5, r1, #0
    c788:	9806      	ldr	r0, [sp, #24]
    c78a:	9907      	ldr	r1, [sp, #28]
    c78c:	f001 f874 	bl	d878 <____muldf3_from_thumb>
    c790:	1c02      	adds	r2, r0, #0
    c792:	1c0b      	adds	r3, r1, #0
    c794:	1c20      	adds	r0, r4, #0
    c796:	1c29      	adds	r1, r5, #0
    c798:	f001 f872 	bl	d880 <____adddf3_from_thumb>
    c79c:	1c02      	adds	r2, r0, #0
    c79e:	1c0b      	adds	r3, r1, #0
    c7a0:	9802      	ldr	r0, [sp, #8]
    c7a2:	9903      	ldr	r1, [sp, #12]
    c7a4:	f001 f870 	bl	d888 <____subdf3_from_thumb>
    c7a8:	9002      	str	r0, [sp, #8]
    c7aa:	9103      	str	r1, [sp, #12]
    c7ac:	9802      	ldr	r0, [sp, #8]
    c7ae:	9903      	ldr	r1, [sp, #12]
    c7b0:	b008      	add	sp, #32
    c7b2:	bcf0      	pop	{r4, r5, r6, r7}
    c7b4:	bc04      	pop	{r2}
    c7b6:	4710      	bx	r2
    c7b8:	9a04      	ldr	r2, [sp, #16]
    c7ba:	9b05      	ldr	r3, [sp, #20]
    c7bc:	1c30      	adds	r0, r6, #0
    c7be:	1c39      	adds	r1, r7, #0
    c7c0:	f001 f85a 	bl	d878 <____muldf3_from_thumb>
    c7c4:	4a17      	ldr	r2, [pc, #92]	; (c824 <__kernel_sin+0x178>)
    c7c6:	4b18      	ldr	r3, [pc, #96]	; (c828 <__kernel_sin+0x17c>)
    c7c8:	f001 f85e 	bl	d888 <____subdf3_from_thumb>
    c7cc:	1c02      	adds	r2, r0, #0
    c7ce:	1c0b      	adds	r3, r1, #0
    c7d0:	9806      	ldr	r0, [sp, #24]
    c7d2:	9907      	ldr	r1, [sp, #28]
    c7d4:	f001 f850 	bl	d878 <____muldf3_from_thumb>
    c7d8:	1c02      	adds	r2, r0, #0
    c7da:	1c0b      	adds	r3, r1, #0
    c7dc:	9802      	ldr	r0, [sp, #8]
    c7de:	9903      	ldr	r1, [sp, #12]
    c7e0:	f001 f84e 	bl	d880 <____adddf3_from_thumb>
    c7e4:	9002      	str	r0, [sp, #8]
    c7e6:	9103      	str	r1, [sp, #12]
    c7e8:	e7e0      	b.n	c7ac <__kernel_sin+0x100>
    c7ea:	46c0      	nop			; (mov r8, r8)
    c7ec:	7fffffff 	.word	0x7fffffff
    c7f0:	3e3fffff 	.word	0x3e3fffff
    c7f4:	3de5d93a 	.word	0x3de5d93a
    c7f8:	5acfd57c 	.word	0x5acfd57c
    c7fc:	3e5ae5e6 	.word	0x3e5ae5e6
    c800:	8a2b9ceb 	.word	0x8a2b9ceb
    c804:	3ec71de3 	.word	0x3ec71de3
    c808:	57b1fe7d 	.word	0x57b1fe7d
    c80c:	3f2a01a0 	.word	0x3f2a01a0
    c810:	19c161d5 	.word	0x19c161d5
    c814:	3f811111 	.word	0x3f811111
    c818:	1110f8a6 	.word	0x1110f8a6
    c81c:	3fe00000 	.word	0x3fe00000
    c820:	00000000 	.word	0x00000000
    c824:	3fc55555 	.word	0x3fc55555
    c828:	55555549 	.word	0x55555549

0000c82c <atan>:
    c82c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c82e:	4657      	mov	r7, sl
    c830:	4646      	mov	r6, r8
    c832:	b4c0      	push	{r6, r7}
    c834:	4baf      	ldr	r3, [pc, #700]	; (caf4 <atan+0x2c8>)
    c836:	1c05      	adds	r5, r0, #0
    c838:	401d      	ands	r5, r3
    c83a:	4baf      	ldr	r3, [pc, #700]	; (caf8 <atan+0x2cc>)
    c83c:	b084      	sub	sp, #16
    c83e:	1c06      	adds	r6, r0, #0
    c840:	1c0f      	adds	r7, r1, #0
    c842:	4680      	mov	r8, r0
    c844:	429d      	cmp	r5, r3
    c846:	dd14      	ble.n	c872 <atan+0x46>
    c848:	4aac      	ldr	r2, [pc, #688]	; (cafc <atan+0x2d0>)
    c84a:	4295      	cmp	r5, r2
    c84c:	dc00      	bgt.n	c850 <atan+0x24>
    c84e:	e0b8      	b.n	c9c2 <atan+0x196>
    c850:	1c30      	adds	r0, r6, #0
    c852:	1c39      	adds	r1, r7, #0
    c854:	1c32      	adds	r2, r6, #0
    c856:	1c3b      	adds	r3, r7, #0
    c858:	f001 f812 	bl	d880 <____adddf3_from_thumb>
    c85c:	1c06      	adds	r6, r0, #0
    c85e:	1c0f      	adds	r7, r1, #0
    c860:	1c30      	adds	r0, r6, #0
    c862:	1c39      	adds	r1, r7, #0
    c864:	b004      	add	sp, #16
    c866:	bc0c      	pop	{r2, r3}
    c868:	4690      	mov	r8, r2
    c86a:	469a      	mov	sl, r3
    c86c:	bcf0      	pop	{r4, r5, r6, r7}
    c86e:	bc04      	pop	{r2}
    c870:	4710      	bx	r2
    c872:	4ba3      	ldr	r3, [pc, #652]	; (cb00 <atan+0x2d4>)
    c874:	429d      	cmp	r5, r3
    c876:	dd00      	ble.n	c87a <atan+0x4e>
    c878:	e0b7      	b.n	c9ea <atan+0x1be>
    c87a:	4ba2      	ldr	r3, [pc, #648]	; (cb04 <atan+0x2d8>)
    c87c:	429d      	cmp	r5, r3
    c87e:	dc00      	bgt.n	c882 <atan+0x56>
    c880:	e0a7      	b.n	c9d2 <atan+0x1a6>
    c882:	2301      	movs	r3, #1
    c884:	4259      	negs	r1, r3
    c886:	468a      	mov	sl, r1
    c888:	1c32      	adds	r2, r6, #0
    c88a:	1c3b      	adds	r3, r7, #0
    c88c:	1c30      	adds	r0, r6, #0
    c88e:	1c39      	adds	r1, r7, #0
    c890:	f000 fff2 	bl	d878 <____muldf3_from_thumb>
    c894:	1c02      	adds	r2, r0, #0
    c896:	1c0b      	adds	r3, r1, #0
    c898:	9000      	str	r0, [sp, #0]
    c89a:	9101      	str	r1, [sp, #4]
    c89c:	f000 ffec 	bl	d878 <____muldf3_from_thumb>
    c8a0:	4a99      	ldr	r2, [pc, #612]	; (cb08 <atan+0x2dc>)
    c8a2:	4b9a      	ldr	r3, [pc, #616]	; (cb0c <atan+0x2e0>)
    c8a4:	1c04      	adds	r4, r0, #0
    c8a6:	1c0d      	adds	r5, r1, #0
    c8a8:	f000 ffe6 	bl	d878 <____muldf3_from_thumb>
    c8ac:	4a98      	ldr	r2, [pc, #608]	; (cb10 <atan+0x2e4>)
    c8ae:	4b99      	ldr	r3, [pc, #612]	; (cb14 <atan+0x2e8>)
    c8b0:	f000 ffe6 	bl	d880 <____adddf3_from_thumb>
    c8b4:	1c02      	adds	r2, r0, #0
    c8b6:	1c0b      	adds	r3, r1, #0
    c8b8:	1c20      	adds	r0, r4, #0
    c8ba:	1c29      	adds	r1, r5, #0
    c8bc:	f000 ffdc 	bl	d878 <____muldf3_from_thumb>
    c8c0:	4a95      	ldr	r2, [pc, #596]	; (cb18 <atan+0x2ec>)
    c8c2:	4b96      	ldr	r3, [pc, #600]	; (cb1c <atan+0x2f0>)
    c8c4:	f000 ffdc 	bl	d880 <____adddf3_from_thumb>
    c8c8:	1c02      	adds	r2, r0, #0
    c8ca:	1c0b      	adds	r3, r1, #0
    c8cc:	1c20      	adds	r0, r4, #0
    c8ce:	1c29      	adds	r1, r5, #0
    c8d0:	f000 ffd2 	bl	d878 <____muldf3_from_thumb>
    c8d4:	4a92      	ldr	r2, [pc, #584]	; (cb20 <atan+0x2f4>)
    c8d6:	4b93      	ldr	r3, [pc, #588]	; (cb24 <atan+0x2f8>)
    c8d8:	f000 ffd2 	bl	d880 <____adddf3_from_thumb>
    c8dc:	1c02      	adds	r2, r0, #0
    c8de:	1c0b      	adds	r3, r1, #0
    c8e0:	1c20      	adds	r0, r4, #0
    c8e2:	1c29      	adds	r1, r5, #0
    c8e4:	f000 ffc8 	bl	d878 <____muldf3_from_thumb>
    c8e8:	4a8f      	ldr	r2, [pc, #572]	; (cb28 <atan+0x2fc>)
    c8ea:	4b90      	ldr	r3, [pc, #576]	; (cb2c <atan+0x300>)
    c8ec:	f000 ffc8 	bl	d880 <____adddf3_from_thumb>
    c8f0:	1c02      	adds	r2, r0, #0
    c8f2:	1c0b      	adds	r3, r1, #0
    c8f4:	1c20      	adds	r0, r4, #0
    c8f6:	1c29      	adds	r1, r5, #0
    c8f8:	f000 ffbe 	bl	d878 <____muldf3_from_thumb>
    c8fc:	4a8c      	ldr	r2, [pc, #560]	; (cb30 <atan+0x304>)
    c8fe:	4b8d      	ldr	r3, [pc, #564]	; (cb34 <atan+0x308>)
    c900:	f000 ffbe 	bl	d880 <____adddf3_from_thumb>
    c904:	1c02      	adds	r2, r0, #0
    c906:	1c0b      	adds	r3, r1, #0
    c908:	9800      	ldr	r0, [sp, #0]
    c90a:	9901      	ldr	r1, [sp, #4]
    c90c:	f000 ffb4 	bl	d878 <____muldf3_from_thumb>
    c910:	4a89      	ldr	r2, [pc, #548]	; (cb38 <atan+0x30c>)
    c912:	4b8a      	ldr	r3, [pc, #552]	; (cb3c <atan+0x310>)
    c914:	9002      	str	r0, [sp, #8]
    c916:	9103      	str	r1, [sp, #12]
    c918:	1c20      	adds	r0, r4, #0
    c91a:	1c29      	adds	r1, r5, #0
    c91c:	f000 ffac 	bl	d878 <____muldf3_from_thumb>
    c920:	4a87      	ldr	r2, [pc, #540]	; (cb40 <atan+0x314>)
    c922:	4b88      	ldr	r3, [pc, #544]	; (cb44 <atan+0x318>)
    c924:	f000 ffb0 	bl	d888 <____subdf3_from_thumb>
    c928:	1c02      	adds	r2, r0, #0
    c92a:	1c0b      	adds	r3, r1, #0
    c92c:	1c20      	adds	r0, r4, #0
    c92e:	1c29      	adds	r1, r5, #0
    c930:	f000 ffa2 	bl	d878 <____muldf3_from_thumb>
    c934:	4a84      	ldr	r2, [pc, #528]	; (cb48 <atan+0x31c>)
    c936:	4b85      	ldr	r3, [pc, #532]	; (cb4c <atan+0x320>)
    c938:	f000 ffa6 	bl	d888 <____subdf3_from_thumb>
    c93c:	1c02      	adds	r2, r0, #0
    c93e:	1c0b      	adds	r3, r1, #0
    c940:	1c20      	adds	r0, r4, #0
    c942:	1c29      	adds	r1, r5, #0
    c944:	f000 ff98 	bl	d878 <____muldf3_from_thumb>
    c948:	4a81      	ldr	r2, [pc, #516]	; (cb50 <atan+0x324>)
    c94a:	4b82      	ldr	r3, [pc, #520]	; (cb54 <atan+0x328>)
    c94c:	f000 ff9c 	bl	d888 <____subdf3_from_thumb>
    c950:	1c02      	adds	r2, r0, #0
    c952:	1c0b      	adds	r3, r1, #0
    c954:	1c20      	adds	r0, r4, #0
    c956:	1c29      	adds	r1, r5, #0
    c958:	f000 ff8e 	bl	d878 <____muldf3_from_thumb>
    c95c:	4a7e      	ldr	r2, [pc, #504]	; (cb58 <atan+0x32c>)
    c95e:	4b7f      	ldr	r3, [pc, #508]	; (cb5c <atan+0x330>)
    c960:	f000 ff92 	bl	d888 <____subdf3_from_thumb>
    c964:	1c02      	adds	r2, r0, #0
    c966:	1c0b      	adds	r3, r1, #0
    c968:	1c20      	adds	r0, r4, #0
    c96a:	1c29      	adds	r1, r5, #0
    c96c:	f000 ff84 	bl	d878 <____muldf3_from_thumb>
    c970:	1c0b      	adds	r3, r1, #0
    c972:	4651      	mov	r1, sl
    c974:	1c02      	adds	r2, r0, #0
    c976:	2900      	cmp	r1, #0
    c978:	db61      	blt.n	ca3e <atan+0x212>
    c97a:	4651      	mov	r1, sl
    c97c:	00cc      	lsls	r4, r1, #3
    c97e:	9802      	ldr	r0, [sp, #8]
    c980:	9903      	ldr	r1, [sp, #12]
    c982:	f000 ff7d 	bl	d880 <____adddf3_from_thumb>
    c986:	1c02      	adds	r2, r0, #0
    c988:	1c0b      	adds	r3, r1, #0
    c98a:	1c30      	adds	r0, r6, #0
    c98c:	1c39      	adds	r1, r7, #0
    c98e:	f000 ff73 	bl	d878 <____muldf3_from_thumb>
    c992:	4d73      	ldr	r5, [pc, #460]	; (cb60 <atan+0x334>)
    c994:	4b73      	ldr	r3, [pc, #460]	; (cb64 <atan+0x338>)
    c996:	1965      	adds	r5, r4, r5
    c998:	18e4      	adds	r4, r4, r3
    c99a:	6822      	ldr	r2, [r4, #0]
    c99c:	6863      	ldr	r3, [r4, #4]
    c99e:	f000 ff73 	bl	d888 <____subdf3_from_thumb>
    c9a2:	1c32      	adds	r2, r6, #0
    c9a4:	1c3b      	adds	r3, r7, #0
    c9a6:	f000 ff6f 	bl	d888 <____subdf3_from_thumb>
    c9aa:	1c02      	adds	r2, r0, #0
    c9ac:	1c0b      	adds	r3, r1, #0
    c9ae:	6828      	ldr	r0, [r5, #0]
    c9b0:	6869      	ldr	r1, [r5, #4]
    c9b2:	f000 ff69 	bl	d888 <____subdf3_from_thumb>
    c9b6:	4642      	mov	r2, r8
    c9b8:	2a00      	cmp	r2, #0
    c9ba:	db37      	blt.n	ca2c <atan+0x200>
    c9bc:	1c06      	adds	r6, r0, #0
    c9be:	1c0f      	adds	r7, r1, #0
    c9c0:	e74e      	b.n	c860 <atan+0x34>
    c9c2:	4295      	cmp	r5, r2
    c9c4:	d038      	beq.n	ca38 <atan+0x20c>
    c9c6:	4641      	mov	r1, r8
    c9c8:	2900      	cmp	r1, #0
    c9ca:	dd59      	ble.n	ca80 <atan+0x254>
    c9cc:	4e66      	ldr	r6, [pc, #408]	; (cb68 <atan+0x33c>)
    c9ce:	4f67      	ldr	r7, [pc, #412]	; (cb6c <atan+0x340>)
    c9d0:	e746      	b.n	c860 <atan+0x34>
    c9d2:	4a67      	ldr	r2, [pc, #412]	; (cb70 <atan+0x344>)
    c9d4:	4b67      	ldr	r3, [pc, #412]	; (cb74 <atan+0x348>)
    c9d6:	f000 ff53 	bl	d880 <____adddf3_from_thumb>
    c9da:	4a67      	ldr	r2, [pc, #412]	; (cb78 <atan+0x34c>)
    c9dc:	4b67      	ldr	r3, [pc, #412]	; (cb7c <atan+0x350>)
    c9de:	f000 ff5b 	bl	d898 <____gtdf2_from_thumb>
    c9e2:	2800      	cmp	r0, #0
    c9e4:	dd00      	ble.n	c9e8 <atan+0x1bc>
    c9e6:	e73b      	b.n	c860 <atan+0x34>
    c9e8:	e74b      	b.n	c882 <atan+0x56>
    c9ea:	f000 f8df 	bl	cbac <fabs>
    c9ee:	4b64      	ldr	r3, [pc, #400]	; (cb80 <atan+0x354>)
    c9f0:	1c06      	adds	r6, r0, #0
    c9f2:	1c0f      	adds	r7, r1, #0
    c9f4:	429d      	cmp	r5, r3
    c9f6:	dc35      	bgt.n	ca64 <atan+0x238>
    c9f8:	4b62      	ldr	r3, [pc, #392]	; (cb84 <atan+0x358>)
    c9fa:	429d      	cmp	r5, r3
    c9fc:	dd43      	ble.n	ca86 <atan+0x25a>
    c9fe:	4a5e      	ldr	r2, [pc, #376]	; (cb78 <atan+0x34c>)
    ca00:	4b5e      	ldr	r3, [pc, #376]	; (cb7c <atan+0x350>)
    ca02:	f000 ff41 	bl	d888 <____subdf3_from_thumb>
    ca06:	4a5c      	ldr	r2, [pc, #368]	; (cb78 <atan+0x34c>)
    ca08:	4b5c      	ldr	r3, [pc, #368]	; (cb7c <atan+0x350>)
    ca0a:	1c04      	adds	r4, r0, #0
    ca0c:	1c0d      	adds	r5, r1, #0
    ca0e:	1c30      	adds	r0, r6, #0
    ca10:	1c39      	adds	r1, r7, #0
    ca12:	f000 ff35 	bl	d880 <____adddf3_from_thumb>
    ca16:	1c0b      	adds	r3, r1, #0
    ca18:	1c02      	adds	r2, r0, #0
    ca1a:	1c29      	adds	r1, r5, #0
    ca1c:	1c20      	adds	r0, r4, #0
    ca1e:	f000 ff1f 	bl	d860 <____divdf3_from_thumb>
    ca22:	2301      	movs	r3, #1
    ca24:	1c06      	adds	r6, r0, #0
    ca26:	1c0f      	adds	r7, r1, #0
    ca28:	469a      	mov	sl, r3
    ca2a:	e72d      	b.n	c888 <atan+0x5c>
    ca2c:	2280      	movs	r2, #128	; 0x80
    ca2e:	0612      	lsls	r2, r2, #24
    ca30:	1883      	adds	r3, r0, r2
    ca32:	1c1e      	adds	r6, r3, #0
    ca34:	1c0f      	adds	r7, r1, #0
    ca36:	e713      	b.n	c860 <atan+0x34>
    ca38:	2900      	cmp	r1, #0
    ca3a:	d0c4      	beq.n	c9c6 <atan+0x19a>
    ca3c:	e708      	b.n	c850 <atan+0x24>
    ca3e:	9802      	ldr	r0, [sp, #8]
    ca40:	9903      	ldr	r1, [sp, #12]
    ca42:	f000 ff1d 	bl	d880 <____adddf3_from_thumb>
    ca46:	1c02      	adds	r2, r0, #0
    ca48:	1c0b      	adds	r3, r1, #0
    ca4a:	1c30      	adds	r0, r6, #0
    ca4c:	1c39      	adds	r1, r7, #0
    ca4e:	f000 ff13 	bl	d878 <____muldf3_from_thumb>
    ca52:	1c02      	adds	r2, r0, #0
    ca54:	1c0b      	adds	r3, r1, #0
    ca56:	1c30      	adds	r0, r6, #0
    ca58:	1c39      	adds	r1, r7, #0
    ca5a:	f000 ff15 	bl	d888 <____subdf3_from_thumb>
    ca5e:	1c06      	adds	r6, r0, #0
    ca60:	1c0f      	adds	r7, r1, #0
    ca62:	e6fd      	b.n	c860 <atan+0x34>
    ca64:	4b48      	ldr	r3, [pc, #288]	; (cb88 <atan+0x35c>)
    ca66:	429d      	cmp	r5, r3
    ca68:	dd28      	ble.n	cabc <atan+0x290>
    ca6a:	1c32      	adds	r2, r6, #0
    ca6c:	1c3b      	adds	r3, r7, #0
    ca6e:	4847      	ldr	r0, [pc, #284]	; (cb8c <atan+0x360>)
    ca70:	4947      	ldr	r1, [pc, #284]	; (cb90 <atan+0x364>)
    ca72:	f000 fef5 	bl	d860 <____divdf3_from_thumb>
    ca76:	2203      	movs	r2, #3
    ca78:	1c06      	adds	r6, r0, #0
    ca7a:	1c0f      	adds	r7, r1, #0
    ca7c:	4692      	mov	sl, r2
    ca7e:	e703      	b.n	c888 <atan+0x5c>
    ca80:	4e44      	ldr	r6, [pc, #272]	; (cb94 <atan+0x368>)
    ca82:	4f45      	ldr	r7, [pc, #276]	; (cb98 <atan+0x36c>)
    ca84:	e6ec      	b.n	c860 <atan+0x34>
    ca86:	1c32      	adds	r2, r6, #0
    ca88:	1c3b      	adds	r3, r7, #0
    ca8a:	f000 fef9 	bl	d880 <____adddf3_from_thumb>
    ca8e:	4a3a      	ldr	r2, [pc, #232]	; (cb78 <atan+0x34c>)
    ca90:	4b3a      	ldr	r3, [pc, #232]	; (cb7c <atan+0x350>)
    ca92:	f000 fef9 	bl	d888 <____subdf3_from_thumb>
    ca96:	4a41      	ldr	r2, [pc, #260]	; (cb9c <atan+0x370>)
    ca98:	4b41      	ldr	r3, [pc, #260]	; (cba0 <atan+0x374>)
    ca9a:	1c04      	adds	r4, r0, #0
    ca9c:	1c0d      	adds	r5, r1, #0
    ca9e:	1c30      	adds	r0, r6, #0
    caa0:	1c39      	adds	r1, r7, #0
    caa2:	f000 feed 	bl	d880 <____adddf3_from_thumb>
    caa6:	1c02      	adds	r2, r0, #0
    caa8:	1c0b      	adds	r3, r1, #0
    caaa:	1c20      	adds	r0, r4, #0
    caac:	1c29      	adds	r1, r5, #0
    caae:	f000 fed7 	bl	d860 <____divdf3_from_thumb>
    cab2:	2200      	movs	r2, #0
    cab4:	1c06      	adds	r6, r0, #0
    cab6:	1c0f      	adds	r7, r1, #0
    cab8:	4692      	mov	sl, r2
    caba:	e6e5      	b.n	c888 <atan+0x5c>
    cabc:	4a39      	ldr	r2, [pc, #228]	; (cba4 <atan+0x378>)
    cabe:	4b3a      	ldr	r3, [pc, #232]	; (cba8 <atan+0x37c>)
    cac0:	f000 fee2 	bl	d888 <____subdf3_from_thumb>
    cac4:	4a37      	ldr	r2, [pc, #220]	; (cba4 <atan+0x378>)
    cac6:	4b38      	ldr	r3, [pc, #224]	; (cba8 <atan+0x37c>)
    cac8:	1c04      	adds	r4, r0, #0
    caca:	1c0d      	adds	r5, r1, #0
    cacc:	1c30      	adds	r0, r6, #0
    cace:	1c39      	adds	r1, r7, #0
    cad0:	f000 fed2 	bl	d878 <____muldf3_from_thumb>
    cad4:	4a28      	ldr	r2, [pc, #160]	; (cb78 <atan+0x34c>)
    cad6:	4b29      	ldr	r3, [pc, #164]	; (cb7c <atan+0x350>)
    cad8:	f000 fed2 	bl	d880 <____adddf3_from_thumb>
    cadc:	1c02      	adds	r2, r0, #0
    cade:	1c0b      	adds	r3, r1, #0
    cae0:	1c20      	adds	r0, r4, #0
    cae2:	1c29      	adds	r1, r5, #0
    cae4:	f000 febc 	bl	d860 <____divdf3_from_thumb>
    cae8:	1c0f      	adds	r7, r1, #0
    caea:	2102      	movs	r1, #2
    caec:	1c06      	adds	r6, r0, #0
    caee:	468a      	mov	sl, r1
    caf0:	e6ca      	b.n	c888 <atan+0x5c>
    caf2:	46c0      	nop			; (mov r8, r8)
    caf4:	7fffffff 	.word	0x7fffffff
    caf8:	440fffff 	.word	0x440fffff
    cafc:	7ff00000 	.word	0x7ff00000
    cb00:	3fdbffff 	.word	0x3fdbffff
    cb04:	3e1fffff 	.word	0x3e1fffff
    cb08:	3f90ad3a 	.word	0x3f90ad3a
    cb0c:	e322da11 	.word	0xe322da11
    cb10:	3fa97b4b 	.word	0x3fa97b4b
    cb14:	24760deb 	.word	0x24760deb
    cb18:	3fb10d66 	.word	0x3fb10d66
    cb1c:	a0d03d51 	.word	0xa0d03d51
    cb20:	3fb745cd 	.word	0x3fb745cd
    cb24:	c54c206e 	.word	0xc54c206e
    cb28:	3fc24924 	.word	0x3fc24924
    cb2c:	920083ff 	.word	0x920083ff
    cb30:	3fd55555 	.word	0x3fd55555
    cb34:	5555550d 	.word	0x5555550d
    cb38:	bfa2b444 	.word	0xbfa2b444
    cb3c:	2c6a6c2f 	.word	0x2c6a6c2f
    cb40:	3fadde2d 	.word	0x3fadde2d
    cb44:	52defd9a 	.word	0x52defd9a
    cb48:	3fb3b0f2 	.word	0x3fb3b0f2
    cb4c:	af749a6d 	.word	0xaf749a6d
    cb50:	3fbc71c6 	.word	0x3fbc71c6
    cb54:	fe231671 	.word	0xfe231671
    cb58:	3fc99999 	.word	0x3fc99999
    cb5c:	9998ebc4 	.word	0x9998ebc4
    cb60:	0000daf4 	.word	0x0000daf4
    cb64:	0000db14 	.word	0x0000db14
    cb68:	3ff921fb 	.word	0x3ff921fb
    cb6c:	54442d18 	.word	0x54442d18
    cb70:	7e37e43c 	.word	0x7e37e43c
    cb74:	8800759c 	.word	0x8800759c
    cb78:	3ff00000 	.word	0x3ff00000
    cb7c:	00000000 	.word	0x00000000
    cb80:	3ff2ffff 	.word	0x3ff2ffff
    cb84:	3fe5ffff 	.word	0x3fe5ffff
    cb88:	40037fff 	.word	0x40037fff
    cb8c:	bff00000 	.word	0xbff00000
    cb90:	00000000 	.word	0x00000000
    cb94:	bff921fb 	.word	0xbff921fb
    cb98:	54442d18 	.word	0x54442d18
    cb9c:	40000000 	.word	0x40000000
    cba0:	00000000 	.word	0x00000000
    cba4:	3ff80000 	.word	0x3ff80000
    cba8:	00000000 	.word	0x00000000

0000cbac <fabs>:
    cbac:	b510      	push	{r4, lr}
    cbae:	1c03      	adds	r3, r0, #0
    cbb0:	4803      	ldr	r0, [pc, #12]	; (cbc0 <fabs+0x14>)
    cbb2:	1c0a      	adds	r2, r1, #0
    cbb4:	4003      	ands	r3, r0
    cbb6:	1c18      	adds	r0, r3, #0
    cbb8:	1c11      	adds	r1, r2, #0
    cbba:	bc10      	pop	{r4}
    cbbc:	bc04      	pop	{r2}
    cbbe:	4710      	bx	r2
    cbc0:	7fffffff 	.word	0x7fffffff

0000cbc4 <floor>:
    cbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbc6:	465f      	mov	r7, fp
    cbc8:	4656      	mov	r6, sl
    cbca:	464d      	mov	r5, r9
    cbcc:	4644      	mov	r4, r8
    cbce:	b4f0      	push	{r4, r5, r6, r7}
    cbd0:	2200      	movs	r2, #0
    cbd2:	2300      	movs	r3, #0
    cbd4:	b082      	sub	sp, #8
    cbd6:	9200      	str	r2, [sp, #0]
    cbd8:	9301      	str	r3, [sp, #4]
    cbda:	0043      	lsls	r3, r0, #1
    cbdc:	0d5a      	lsrs	r2, r3, #21
    cbde:	4b4b      	ldr	r3, [pc, #300]	; (cd0c <floor+0x148>)
    cbe0:	189b      	adds	r3, r3, r2
    cbe2:	1c04      	adds	r4, r0, #0
    cbe4:	1c0d      	adds	r5, r1, #0
    cbe6:	1c06      	adds	r6, r0, #0
    cbe8:	4682      	mov	sl, r0
    cbea:	4689      	mov	r9, r1
    cbec:	4698      	mov	r8, r3
    cbee:	2b13      	cmp	r3, #19
    cbf0:	dc2e      	bgt.n	cc50 <floor+0x8c>
    cbf2:	2b00      	cmp	r3, #0
    cbf4:	db53      	blt.n	cc9e <floor+0xda>
    cbf6:	4b46      	ldr	r3, [pc, #280]	; (cd10 <floor+0x14c>)
    cbf8:	4642      	mov	r2, r8
    cbfa:	4113      	asrs	r3, r2
    cbfc:	469b      	mov	fp, r3
    cbfe:	1c0a      	adds	r2, r1, #0
    cc00:	4003      	ands	r3, r0
    cc02:	4682      	mov	sl, r0
    cc04:	4689      	mov	r9, r1
    cc06:	431a      	orrs	r2, r3
    cc08:	d017      	beq.n	cc3a <floor+0x76>
    cc0a:	4a42      	ldr	r2, [pc, #264]	; (cd14 <floor+0x150>)
    cc0c:	4b42      	ldr	r3, [pc, #264]	; (cd18 <floor+0x154>)
    cc0e:	f000 fe37 	bl	d880 <____adddf3_from_thumb>
    cc12:	4a42      	ldr	r2, [pc, #264]	; (cd1c <floor+0x158>)
    cc14:	4b42      	ldr	r3, [pc, #264]	; (cd20 <floor+0x15c>)
    cc16:	f000 fe3f 	bl	d898 <____gtdf2_from_thumb>
    cc1a:	2800      	cmp	r0, #0
    cc1c:	dd07      	ble.n	cc2e <floor+0x6a>
    cc1e:	2c00      	cmp	r4, #0
    cc20:	db4d      	blt.n	ccbe <floor+0xfa>
    cc22:	4652      	mov	r2, sl
    cc24:	465b      	mov	r3, fp
    cc26:	439a      	bics	r2, r3
    cc28:	2400      	movs	r4, #0
    cc2a:	4692      	mov	sl, r2
    cc2c:	46a1      	mov	r9, r4
    cc2e:	4654      	mov	r4, sl
    cc30:	464a      	mov	r2, r9
    cc32:	9400      	str	r4, [sp, #0]
    cc34:	9201      	str	r2, [sp, #4]
    cc36:	9c00      	ldr	r4, [sp, #0]
    cc38:	9d01      	ldr	r5, [sp, #4]
    cc3a:	1c29      	adds	r1, r5, #0
    cc3c:	1c20      	adds	r0, r4, #0
    cc3e:	b002      	add	sp, #8
    cc40:	bc3c      	pop	{r2, r3, r4, r5}
    cc42:	4690      	mov	r8, r2
    cc44:	4699      	mov	r9, r3
    cc46:	46a2      	mov	sl, r4
    cc48:	46ab      	mov	fp, r5
    cc4a:	bcf0      	pop	{r4, r5, r6, r7}
    cc4c:	bc04      	pop	{r2}
    cc4e:	4710      	bx	r2
    cc50:	2b33      	cmp	r3, #51	; 0x33
    cc52:	dc19      	bgt.n	cc88 <floor+0xc4>
    cc54:	4b33      	ldr	r3, [pc, #204]	; (cd24 <floor+0x160>)
    cc56:	18d2      	adds	r2, r2, r3
    cc58:	2301      	movs	r3, #1
    cc5a:	425b      	negs	r3, r3
    cc5c:	40d3      	lsrs	r3, r2
    cc5e:	469b      	mov	fp, r3
    cc60:	4689      	mov	r9, r1
    cc62:	420b      	tst	r3, r1
    cc64:	d0e9      	beq.n	cc3a <floor+0x76>
    cc66:	4a2b      	ldr	r2, [pc, #172]	; (cd14 <floor+0x150>)
    cc68:	4b2b      	ldr	r3, [pc, #172]	; (cd18 <floor+0x154>)
    cc6a:	f000 fe09 	bl	d880 <____adddf3_from_thumb>
    cc6e:	4a2b      	ldr	r2, [pc, #172]	; (cd1c <floor+0x158>)
    cc70:	4b2b      	ldr	r3, [pc, #172]	; (cd20 <floor+0x15c>)
    cc72:	f000 fe11 	bl	d898 <____gtdf2_from_thumb>
    cc76:	2800      	cmp	r0, #0
    cc78:	dd27      	ble.n	ccca <floor+0x106>
    cc7a:	2c00      	cmp	r4, #0
    cc7c:	db27      	blt.n	ccce <floor+0x10a>
    cc7e:	464a      	mov	r2, r9
    cc80:	465b      	mov	r3, fp
    cc82:	439a      	bics	r2, r3
    cc84:	4691      	mov	r9, r2
    cc86:	e7d2      	b.n	cc2e <floor+0x6a>
    cc88:	2380      	movs	r3, #128	; 0x80
    cc8a:	00db      	lsls	r3, r3, #3
    cc8c:	4598      	cmp	r8, r3
    cc8e:	d1d4      	bne.n	cc3a <floor+0x76>
    cc90:	1c22      	adds	r2, r4, #0
    cc92:	1c2b      	adds	r3, r5, #0
    cc94:	f000 fdf4 	bl	d880 <____adddf3_from_thumb>
    cc98:	1c04      	adds	r4, r0, #0
    cc9a:	1c0d      	adds	r5, r1, #0
    cc9c:	e7cd      	b.n	cc3a <floor+0x76>
    cc9e:	4a1d      	ldr	r2, [pc, #116]	; (cd14 <floor+0x150>)
    cca0:	4b1d      	ldr	r3, [pc, #116]	; (cd18 <floor+0x154>)
    cca2:	f000 fded 	bl	d880 <____adddf3_from_thumb>
    cca6:	4a1d      	ldr	r2, [pc, #116]	; (cd1c <floor+0x158>)
    cca8:	4b1d      	ldr	r3, [pc, #116]	; (cd20 <floor+0x15c>)
    ccaa:	f000 fdf5 	bl	d898 <____gtdf2_from_thumb>
    ccae:	2800      	cmp	r0, #0
    ccb0:	ddbd      	ble.n	cc2e <floor+0x6a>
    ccb2:	2c00      	cmp	r4, #0
    ccb4:	db1a      	blt.n	ccec <floor+0x128>
    ccb6:	2200      	movs	r2, #0
    ccb8:	4692      	mov	sl, r2
    ccba:	4691      	mov	r9, r2
    ccbc:	e7b7      	b.n	cc2e <floor+0x6a>
    ccbe:	2380      	movs	r3, #128	; 0x80
    ccc0:	035b      	lsls	r3, r3, #13
    ccc2:	4644      	mov	r4, r8
    ccc4:	4123      	asrs	r3, r4
    ccc6:	449a      	add	sl, r3
    ccc8:	e7ab      	b.n	cc22 <floor+0x5e>
    ccca:	46a2      	mov	sl, r4
    cccc:	e7af      	b.n	cc2e <floor+0x6a>
    ccce:	4644      	mov	r4, r8
    ccd0:	2c14      	cmp	r4, #20
    ccd2:	d018      	beq.n	cd06 <floor+0x142>
    ccd4:	4643      	mov	r3, r8
    ccd6:	2234      	movs	r2, #52	; 0x34
    ccd8:	1ad2      	subs	r2, r2, r3
    ccda:	2301      	movs	r3, #1
    ccdc:	4093      	lsls	r3, r2
    ccde:	444b      	add	r3, r9
    cce0:	4599      	cmp	r9, r3
    cce2:	d901      	bls.n	cce8 <floor+0x124>
    cce4:	2401      	movs	r4, #1
    cce6:	44a2      	add	sl, r4
    cce8:	4699      	mov	r9, r3
    ccea:	e7c8      	b.n	cc7e <floor+0xba>
    ccec:	4b0e      	ldr	r3, [pc, #56]	; (cd28 <floor+0x164>)
    ccee:	1c2a      	adds	r2, r5, #0
    ccf0:	4033      	ands	r3, r6
    ccf2:	431a      	orrs	r2, r3
    ccf4:	d004      	beq.n	cd00 <floor+0x13c>
    ccf6:	4b0d      	ldr	r3, [pc, #52]	; (cd2c <floor+0x168>)
    ccf8:	2400      	movs	r4, #0
    ccfa:	469a      	mov	sl, r3
    ccfc:	46a1      	mov	r9, r4
    ccfe:	e796      	b.n	cc2e <floor+0x6a>
    cd00:	46b2      	mov	sl, r6
    cd02:	46a9      	mov	r9, r5
    cd04:	e793      	b.n	cc2e <floor+0x6a>
    cd06:	2201      	movs	r2, #1
    cd08:	4492      	add	sl, r2
    cd0a:	e7b8      	b.n	cc7e <floor+0xba>
    cd0c:	fffffc01 	.word	0xfffffc01
    cd10:	000fffff 	.word	0x000fffff
    cd14:	7e37e43c 	.word	0x7e37e43c
    cd18:	8800759c 	.word	0x8800759c
	...
    cd24:	fffffbed 	.word	0xfffffbed
    cd28:	7fffffff 	.word	0x7fffffff
    cd2c:	bff00000 	.word	0xbff00000

0000cd30 <isnan>:
    cd30:	424a      	negs	r2, r1
    cd32:	4b04      	ldr	r3, [pc, #16]	; (cd44 <isnan+0x14>)
    cd34:	430a      	orrs	r2, r1
    cd36:	4003      	ands	r3, r0
    cd38:	0fd2      	lsrs	r2, r2, #31
    cd3a:	4803      	ldr	r0, [pc, #12]	; (cd48 <isnan+0x18>)
    cd3c:	431a      	orrs	r2, r3
    cd3e:	1a80      	subs	r0, r0, r2
    cd40:	0fc0      	lsrs	r0, r0, #31
    cd42:	4770      	bx	lr
    cd44:	7fffffff 	.word	0x7fffffff
    cd48:	7ff00000 	.word	0x7ff00000

0000cd4c <matherr>:
    cd4c:	2000      	movs	r0, #0
    cd4e:	4770      	bx	lr

0000cd50 <scalbn>:
    cd50:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd52:	4647      	mov	r7, r8
    cd54:	b480      	push	{r7}
    cd56:	4f3b      	ldr	r7, [pc, #236]	; (ce44 <scalbn+0xf4>)
    cd58:	1c03      	adds	r3, r0, #0
    cd5a:	403b      	ands	r3, r7
    cd5c:	4690      	mov	r8, r2
    cd5e:	151a      	asrs	r2, r3, #20
    cd60:	1c05      	adds	r5, r0, #0
    cd62:	1c0e      	adds	r6, r1, #0
    cd64:	2a00      	cmp	r2, #0
    cd66:	d121      	bne.n	cdac <scalbn+0x5c>
    cd68:	4b37      	ldr	r3, [pc, #220]	; (ce48 <scalbn+0xf8>)
    cd6a:	4003      	ands	r3, r0
    cd6c:	4319      	orrs	r1, r3
    cd6e:	d011      	beq.n	cd94 <scalbn+0x44>
    cd70:	1c28      	adds	r0, r5, #0
    cd72:	1c31      	adds	r1, r6, #0
    cd74:	4a35      	ldr	r2, [pc, #212]	; (ce4c <scalbn+0xfc>)
    cd76:	4b36      	ldr	r3, [pc, #216]	; (ce50 <scalbn+0x100>)
    cd78:	f000 fd7e 	bl	d878 <____muldf3_from_thumb>
    cd7c:	4b35      	ldr	r3, [pc, #212]	; (ce54 <scalbn+0x104>)
    cd7e:	1c05      	adds	r5, r0, #0
    cd80:	1c0e      	adds	r6, r1, #0
    cd82:	4598      	cmp	r8, r3
    cd84:	da0d      	bge.n	cda2 <scalbn+0x52>
    cd86:	1c28      	adds	r0, r5, #0
    cd88:	4a33      	ldr	r2, [pc, #204]	; (ce58 <scalbn+0x108>)
    cd8a:	4b34      	ldr	r3, [pc, #208]	; (ce5c <scalbn+0x10c>)
    cd8c:	f000 fd74 	bl	d878 <____muldf3_from_thumb>
    cd90:	1c05      	adds	r5, r0, #0
    cd92:	1c0e      	adds	r6, r1, #0
    cd94:	1c28      	adds	r0, r5, #0
    cd96:	1c31      	adds	r1, r6, #0
    cd98:	bc04      	pop	{r2}
    cd9a:	4690      	mov	r8, r2
    cd9c:	bcf0      	pop	{r4, r5, r6, r7}
    cd9e:	bc04      	pop	{r2}
    cda0:	4710      	bx	r2
    cda2:	1c03      	adds	r3, r0, #0
    cda4:	403b      	ands	r3, r7
    cda6:	151b      	asrs	r3, r3, #20
    cda8:	1c1a      	adds	r2, r3, #0
    cdaa:	3a36      	subs	r2, #54	; 0x36
    cdac:	4b2c      	ldr	r3, [pc, #176]	; (ce60 <scalbn+0x110>)
    cdae:	429a      	cmp	r2, r3
    cdb0:	d00e      	beq.n	cdd0 <scalbn+0x80>
    cdb2:	4643      	mov	r3, r8
    cdb4:	18d7      	adds	r7, r2, r3
    cdb6:	4b2b      	ldr	r3, [pc, #172]	; (ce64 <scalbn+0x114>)
    cdb8:	429f      	cmp	r7, r3
    cdba:	dc12      	bgt.n	cde2 <scalbn+0x92>
    cdbc:	2f00      	cmp	r7, #0
    cdbe:	dd1d      	ble.n	cdfc <scalbn+0xac>
    cdc0:	4a29      	ldr	r2, [pc, #164]	; (ce68 <scalbn+0x118>)
    cdc2:	1c01      	adds	r1, r0, #0
    cdc4:	4011      	ands	r1, r2
    cdc6:	1c0b      	adds	r3, r1, #0
    cdc8:	053a      	lsls	r2, r7, #20
    cdca:	4313      	orrs	r3, r2
    cdcc:	1c1d      	adds	r5, r3, #0
    cdce:	e7e1      	b.n	cd94 <scalbn+0x44>
    cdd0:	1c28      	adds	r0, r5, #0
    cdd2:	1c31      	adds	r1, r6, #0
    cdd4:	1c2a      	adds	r2, r5, #0
    cdd6:	1c33      	adds	r3, r6, #0
    cdd8:	f000 fd52 	bl	d880 <____adddf3_from_thumb>
    cddc:	1c05      	adds	r5, r0, #0
    cdde:	1c0e      	adds	r6, r1, #0
    cde0:	e7d8      	b.n	cd94 <scalbn+0x44>
    cde2:	1c2a      	adds	r2, r5, #0
    cde4:	1c33      	adds	r3, r6, #0
    cde6:	4821      	ldr	r0, [pc, #132]	; (ce6c <scalbn+0x11c>)
    cde8:	4921      	ldr	r1, [pc, #132]	; (ce70 <scalbn+0x120>)
    cdea:	f000 f849 	bl	ce80 <copysign>
    cdee:	4a1f      	ldr	r2, [pc, #124]	; (ce6c <scalbn+0x11c>)
    cdf0:	4b1f      	ldr	r3, [pc, #124]	; (ce70 <scalbn+0x120>)
    cdf2:	f000 fd41 	bl	d878 <____muldf3_from_thumb>
    cdf6:	1c05      	adds	r5, r0, #0
    cdf8:	1c0e      	adds	r6, r1, #0
    cdfa:	e7cb      	b.n	cd94 <scalbn+0x44>
    cdfc:	1c3b      	adds	r3, r7, #0
    cdfe:	3336      	adds	r3, #54	; 0x36
    ce00:	dc0f      	bgt.n	ce22 <scalbn+0xd2>
    ce02:	4b1c      	ldr	r3, [pc, #112]	; (ce74 <scalbn+0x124>)
    ce04:	4598      	cmp	r8, r3
    ce06:	dcec      	bgt.n	cde2 <scalbn+0x92>
    ce08:	1c2a      	adds	r2, r5, #0
    ce0a:	1c33      	adds	r3, r6, #0
    ce0c:	4812      	ldr	r0, [pc, #72]	; (ce58 <scalbn+0x108>)
    ce0e:	4913      	ldr	r1, [pc, #76]	; (ce5c <scalbn+0x10c>)
    ce10:	f000 f836 	bl	ce80 <copysign>
    ce14:	4a10      	ldr	r2, [pc, #64]	; (ce58 <scalbn+0x108>)
    ce16:	4b11      	ldr	r3, [pc, #68]	; (ce5c <scalbn+0x10c>)
    ce18:	f000 fd2e 	bl	d878 <____muldf3_from_thumb>
    ce1c:	1c05      	adds	r5, r0, #0
    ce1e:	1c0e      	adds	r6, r1, #0
    ce20:	e7b8      	b.n	cd94 <scalbn+0x44>
    ce22:	4b11      	ldr	r3, [pc, #68]	; (ce68 <scalbn+0x118>)
    ce24:	4018      	ands	r0, r3
    ce26:	1c3b      	adds	r3, r7, #0
    ce28:	3336      	adds	r3, #54	; 0x36
    ce2a:	051b      	lsls	r3, r3, #20
    ce2c:	1c01      	adds	r1, r0, #0
    ce2e:	4319      	orrs	r1, r3
    ce30:	1c08      	adds	r0, r1, #0
    ce32:	4a11      	ldr	r2, [pc, #68]	; (ce78 <scalbn+0x128>)
    ce34:	4b11      	ldr	r3, [pc, #68]	; (ce7c <scalbn+0x12c>)
    ce36:	1c31      	adds	r1, r6, #0
    ce38:	f000 fd1e 	bl	d878 <____muldf3_from_thumb>
    ce3c:	1c05      	adds	r5, r0, #0
    ce3e:	1c0e      	adds	r6, r1, #0
    ce40:	e7a8      	b.n	cd94 <scalbn+0x44>
    ce42:	46c0      	nop			; (mov r8, r8)
    ce44:	7ff00000 	.word	0x7ff00000
    ce48:	7fffffff 	.word	0x7fffffff
    ce4c:	43500000 	.word	0x43500000
    ce50:	00000000 	.word	0x00000000
    ce54:	ffff3cb0 	.word	0xffff3cb0
    ce58:	01a56e1f 	.word	0x01a56e1f
    ce5c:	c2f8f359 	.word	0xc2f8f359
    ce60:	000007ff 	.word	0x000007ff
    ce64:	000007fe 	.word	0x000007fe
    ce68:	800fffff 	.word	0x800fffff
    ce6c:	7e37e43c 	.word	0x7e37e43c
    ce70:	8800759c 	.word	0x8800759c
    ce74:	0000c350 	.word	0x0000c350
    ce78:	3c900000 	.word	0x3c900000
    ce7c:	00000000 	.word	0x00000000

0000ce80 <copysign>:
    ce80:	b530      	push	{r4, r5, lr}
    ce82:	4b07      	ldr	r3, [pc, #28]	; (cea0 <copysign+0x20>)
    ce84:	1c04      	adds	r4, r0, #0
    ce86:	401c      	ands	r4, r3
    ce88:	2380      	movs	r3, #128	; 0x80
    ce8a:	1c15      	adds	r5, r2, #0
    ce8c:	061b      	lsls	r3, r3, #24
    ce8e:	402b      	ands	r3, r5
    ce90:	1c0a      	adds	r2, r1, #0
    ce92:	431c      	orrs	r4, r3
    ce94:	1c20      	adds	r0, r4, #0
    ce96:	1c11      	adds	r1, r2, #0
    ce98:	bc30      	pop	{r4, r5}
    ce9a:	bc04      	pop	{r2}
    ce9c:	4710      	bx	r2
    ce9e:	46c0      	nop			; (mov r8, r8)
    cea0:	7fffffff 	.word	0x7fffffff

0000cea4 <__gedf2>:
    cea4:	e3e0c000 	mvn	ip, #0
    cea8:	ea000002 	b	ceb8 <__cmpdf2+0x4>

0000ceac <__ledf2>:
    ceac:	e3a0c001 	mov	ip, #1
    ceb0:	ea000000 	b	ceb8 <__cmpdf2+0x4>

0000ceb4 <__cmpdf2>:
    ceb4:	e3a0c001 	mov	ip, #1
    ceb8:	e50dc004 	str	ip, [sp, #-4]
    cebc:	e1a0c080 	lsl	ip, r0, #1
    cec0:	e1f0cacc 	mvns	ip, ip, asr #21
    cec4:	e1a0c082 	lsl	ip, r2, #1
    cec8:	11f0cacc 	mvnsne	ip, ip, asr #21
    cecc:	0a00000d 	beq	cf08 <__cmpdf2+0x54>
    ced0:	e191c080 	orrs	ip, r1, r0, lsl #1
    ced4:	0193c082 	orrseq	ip, r3, r2, lsl #1
    ced8:	11300002 	teqne	r0, r2
    cedc:	01310003 	teqeq	r1, r3
    cee0:	03a00000 	moveq	r0, #0
    cee4:	012fff1e 	bxeq	lr
    cee8:	e3700000 	cmn	r0, #0
    ceec:	e1300002 	teq	r0, r2
    cef0:	51500002 	cmppl	r0, r2
    cef4:	01510003 	cmpeq	r1, r3
    cef8:	21a00fc2 	asrcs	r0, r2, #31
    cefc:	31e00fc2 	mvncc	r0, r2, asr #31
    cf00:	e3800001 	orr	r0, r0, #1
    cf04:	e12fff1e 	bx	lr
    cf08:	e1a0c080 	lsl	ip, r0, #1
    cf0c:	e1f0cacc 	mvns	ip, ip, asr #21
    cf10:	1a000001 	bne	cf1c <__cmpdf2+0x68>
    cf14:	e191c600 	orrs	ip, r1, r0, lsl #12
    cf18:	1a000004 	bne	cf30 <__cmpdf2+0x7c>
    cf1c:	e1a0c082 	lsl	ip, r2, #1
    cf20:	e1f0cacc 	mvns	ip, ip, asr #21
    cf24:	1affffe9 	bne	ced0 <__cmpdf2+0x1c>
    cf28:	e193c602 	orrs	ip, r3, r2, lsl #12
    cf2c:	0affffe7 	beq	ced0 <__cmpdf2+0x1c>
    cf30:	e51d0004 	ldr	r0, [sp, #-4]
    cf34:	e12fff1e 	bx	lr

0000cf38 <__aeabi_cdrcmple>:
    cf38:	e1a0c000 	mov	ip, r0
    cf3c:	e1a00002 	mov	r0, r2
    cf40:	e1a0200c 	mov	r2, ip
    cf44:	e1a0c001 	mov	ip, r1
    cf48:	e1a01003 	mov	r1, r3
    cf4c:	e1a0300c 	mov	r3, ip
    cf50:	eaffffff 	b	cf54 <__aeabi_cdcmpeq>

0000cf54 <__aeabi_cdcmpeq>:
    cf54:	e92d4001 	push	{r0, lr}
    cf58:	ebffffd5 	bl	ceb4 <__cmpdf2>
    cf5c:	e3500000 	cmp	r0, #0
    cf60:	43700000 	cmnmi	r0, #0
    cf64:	e8bd4001 	pop	{r0, lr}
    cf68:	e12fff1e 	bx	lr

0000cf6c <__aeabi_dcmpeq>:
    cf6c:	e52de008 	str	lr, [sp, #-8]!
    cf70:	ebfffff7 	bl	cf54 <__aeabi_cdcmpeq>
    cf74:	03a00001 	moveq	r0, #1
    cf78:	13a00000 	movne	r0, #0
    cf7c:	e49de008 	ldr	lr, [sp], #8
    cf80:	e12fff1e 	bx	lr

0000cf84 <__aeabi_dcmplt>:
    cf84:	e52de008 	str	lr, [sp, #-8]!
    cf88:	ebfffff1 	bl	cf54 <__aeabi_cdcmpeq>
    cf8c:	33a00001 	movcc	r0, #1
    cf90:	23a00000 	movcs	r0, #0
    cf94:	e49de008 	ldr	lr, [sp], #8
    cf98:	e12fff1e 	bx	lr

0000cf9c <__aeabi_dcmple>:
    cf9c:	e52de008 	str	lr, [sp, #-8]!
    cfa0:	ebffffeb 	bl	cf54 <__aeabi_cdcmpeq>
    cfa4:	93a00001 	movls	r0, #1
    cfa8:	83a00000 	movhi	r0, #0
    cfac:	e49de008 	ldr	lr, [sp], #8
    cfb0:	e12fff1e 	bx	lr

0000cfb4 <__aeabi_dcmpge>:
    cfb4:	e52de008 	str	lr, [sp, #-8]!
    cfb8:	ebffffde 	bl	cf38 <__aeabi_cdrcmple>
    cfbc:	93a00001 	movls	r0, #1
    cfc0:	83a00000 	movhi	r0, #0
    cfc4:	e49de008 	ldr	lr, [sp], #8
    cfc8:	e12fff1e 	bx	lr

0000cfcc <__aeabi_dcmpgt>:
    cfcc:	e52de008 	str	lr, [sp, #-8]!
    cfd0:	ebffffd8 	bl	cf38 <__aeabi_cdrcmple>
    cfd4:	33a00001 	movcc	r0, #1
    cfd8:	23a00000 	movcs	r0, #0
    cfdc:	e49de008 	ldr	lr, [sp], #8
    cfe0:	e12fff1e 	bx	lr

0000cfe4 <__aeabi_d2iz>:
    cfe4:	e1a02080 	lsl	r2, r0, #1
    cfe8:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    cfec:	2a00000c 	bcs	d024 <__aeabi_d2iz+0x40>
    cff0:	5a000009 	bpl	d01c <__aeabi_d2iz+0x38>
    cff4:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    cff8:	e0532ac2 	subs	r2, r3, r2, asr #21
    cffc:	9a00000a 	bls	d02c <__aeabi_d2iz+0x48>
    d000:	e1a03580 	lsl	r3, r0, #11
    d004:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    d008:	e1833aa1 	orr	r3, r3, r1, lsr #21
    d00c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    d010:	e1a00233 	lsr	r0, r3, r2
    d014:	12600000 	rsbne	r0, r0, #0
    d018:	e12fff1e 	bx	lr
    d01c:	e3a00000 	mov	r0, #0
    d020:	e12fff1e 	bx	lr
    d024:	e1911600 	orrs	r1, r1, r0, lsl #12
    d028:	1a000002 	bne	d038 <__aeabi_d2iz+0x54>
    d02c:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    d030:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    d034:	e12fff1e 	bx	lr
    d038:	e3a00000 	mov	r0, #0
    d03c:	e12fff1e 	bx	lr

0000d040 <__aeabi_d2f>:
    d040:	e1a02080 	lsl	r2, r0, #1
    d044:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
    d048:	2253c602 	subscs	ip, r3, #2097152	; 0x200000
    d04c:	227cc57f 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    d050:	9a000006 	bls	d070 <__aeabi_d2f+0x30>
    d054:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
    d058:	e1a02181 	lsl	r2, r1, #3
    d05c:	e18c1ea1 	orr	r1, ip, r1, lsr #29
    d060:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
    d064:	e0a10103 	adc	r0, r1, r3, lsl #2
    d068:	03c00001 	biceq	r0, r0, #1
    d06c:	e12fff1e 	bx	lr
    d070:	e3100101 	tst	r0, #1073741824	; 0x40000000
    d074:	1a00000f 	bne	d0b8 <__aeabi_d2f+0x78>
    d078:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
    d07c:	b2000102 	andlt	r0, r0, #-2147483648	; 0x80000000
    d080:	b12fff1e 	bxlt	lr
    d084:	e3800601 	orr	r0, r0, #1048576	; 0x100000
    d088:	e1a02aa2 	lsr	r2, r2, #21
    d08c:	e2622018 	rsb	r2, r2, #24
    d090:	e262c020 	rsb	ip, r2, #32
    d094:	e1b03c11 	lsls	r3, r1, ip
    d098:	e1a01231 	lsr	r1, r1, r2
    d09c:	13811001 	orrne	r1, r1, #1
    d0a0:	e1a03580 	lsl	r3, r0, #11
    d0a4:	e1a035a3 	lsr	r3, r3, #11
    d0a8:	e1811c13 	orr	r1, r1, r3, lsl ip
    d0ac:	e1a03233 	lsr	r3, r3, r2
    d0b0:	e1a03083 	lsl	r3, r3, #1
    d0b4:	eaffffe6 	b	d054 <__aeabi_d2f+0x14>
    d0b8:	e1f03ac2 	mvns	r3, r2, asr #21
    d0bc:	1a000003 	bne	d0d0 <__aeabi_d2f+0x90>
    d0c0:	e1913600 	orrs	r3, r1, r0, lsl #12
    d0c4:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
    d0c8:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
    d0cc:	112fff1e 	bxne	lr
    d0d0:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    d0d4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    d0d8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    d0dc:	e12fff1e 	bx	lr

0000d0e0 <__aeabi_frsub>:
    d0e0:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    d0e4:	ea000000 	b	d0ec <__addsf3>

0000d0e8 <__aeabi_fsub>:
    d0e8:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

0000d0ec <__addsf3>:
    d0ec:	e1b02080 	lsls	r2, r0, #1
    d0f0:	11b03081 	lslsne	r3, r1, #1
    d0f4:	11320003 	teqne	r2, r3
    d0f8:	11f0cc42 	mvnsne	ip, r2, asr #24
    d0fc:	11f0cc43 	mvnsne	ip, r3, asr #24
    d100:	0a000047 	beq	d224 <__addsf3+0x138>
    d104:	e1a02c22 	lsr	r2, r2, #24
    d108:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    d10c:	c0822003 	addgt	r2, r2, r3
    d110:	c0201001 	eorgt	r1, r0, r1
    d114:	c0210000 	eorgt	r0, r1, r0
    d118:	c0201001 	eorgt	r1, r0, r1
    d11c:	b2633000 	rsblt	r3, r3, #0
    d120:	e3530019 	cmp	r3, #25
    d124:	812fff1e 	bxhi	lr
    d128:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    d12c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    d130:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    d134:	12600000 	rsbne	r0, r0, #0
    d138:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    d13c:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    d140:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    d144:	12611000 	rsbne	r1, r1, #0
    d148:	e1320003 	teq	r2, r3
    d14c:	0a00002e 	beq	d20c <__addsf3+0x120>
    d150:	e2422001 	sub	r2, r2, #1
    d154:	e0900351 	adds	r0, r0, r1, asr r3
    d158:	e2633020 	rsb	r3, r3, #32
    d15c:	e1a01311 	lsl	r1, r1, r3
    d160:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    d164:	5a000001 	bpl	d170 <__addsf3+0x84>
    d168:	e2711000 	rsbs	r1, r1, #0
    d16c:	e2e00000 	rsc	r0, r0, #0
    d170:	e3500502 	cmp	r0, #8388608	; 0x800000
    d174:	3a00000b 	bcc	d1a8 <__addsf3+0xbc>
    d178:	e3500401 	cmp	r0, #16777216	; 0x1000000
    d17c:	3a000004 	bcc	d194 <__addsf3+0xa8>
    d180:	e1b000a0 	lsrs	r0, r0, #1
    d184:	e1a01061 	rrx	r1, r1
    d188:	e2822001 	add	r2, r2, #1
    d18c:	e35200fe 	cmp	r2, #254	; 0xfe
    d190:	2a000038 	bcs	d278 <__addsf3+0x18c>
    d194:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    d198:	e0a00b82 	adc	r0, r0, r2, lsl #23
    d19c:	03c00001 	biceq	r0, r0, #1
    d1a0:	e1800003 	orr	r0, r0, r3
    d1a4:	e12fff1e 	bx	lr
    d1a8:	e1b01081 	lsls	r1, r1, #1
    d1ac:	e0a00000 	adc	r0, r0, r0
    d1b0:	e3100502 	tst	r0, #8388608	; 0x800000
    d1b4:	e2422001 	sub	r2, r2, #1
    d1b8:	1afffff5 	bne	d194 <__addsf3+0xa8>
    d1bc:	e1b0c620 	lsrs	ip, r0, #12
    d1c0:	01a00600 	lsleq	r0, r0, #12
    d1c4:	0242200c 	subeq	r2, r2, #12
    d1c8:	e31008ff 	tst	r0, #16711680	; 0xff0000
    d1cc:	01a00400 	lsleq	r0, r0, #8
    d1d0:	02422008 	subeq	r2, r2, #8
    d1d4:	e310060f 	tst	r0, #15728640	; 0xf00000
    d1d8:	01a00200 	lsleq	r0, r0, #4
    d1dc:	02422004 	subeq	r2, r2, #4
    d1e0:	e3100503 	tst	r0, #12582912	; 0xc00000
    d1e4:	01a00100 	lsleq	r0, r0, #2
    d1e8:	02422002 	subeq	r2, r2, #2
    d1ec:	e3500502 	cmp	r0, #8388608	; 0x800000
    d1f0:	31a00080 	lslcc	r0, r0, #1
    d1f4:	e2d22000 	sbcs	r2, r2, #0
    d1f8:	a0800b82 	addge	r0, r0, r2, lsl #23
    d1fc:	b2622000 	rsblt	r2, r2, #0
    d200:	a1800003 	orrge	r0, r0, r3
    d204:	b1830230 	orrlt	r0, r3, r0, lsr r2
    d208:	e12fff1e 	bx	lr
    d20c:	e3320000 	teq	r2, #0
    d210:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    d214:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    d218:	02822001 	addeq	r2, r2, #1
    d21c:	12433001 	subne	r3, r3, #1
    d220:	eaffffca 	b	d150 <__addsf3+0x64>
    d224:	e1a03081 	lsl	r3, r1, #1
    d228:	e1f0cc42 	mvns	ip, r2, asr #24
    d22c:	11f0cc43 	mvnsne	ip, r3, asr #24
    d230:	0a000013 	beq	d284 <__addsf3+0x198>
    d234:	e1320003 	teq	r2, r3
    d238:	0a000002 	beq	d248 <__addsf3+0x15c>
    d23c:	e3320000 	teq	r2, #0
    d240:	01a00001 	moveq	r0, r1
    d244:	e12fff1e 	bx	lr
    d248:	e1300001 	teq	r0, r1
    d24c:	13a00000 	movne	r0, #0
    d250:	112fff1e 	bxne	lr
    d254:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    d258:	1a000002 	bne	d268 <__addsf3+0x17c>
    d25c:	e1b00080 	lsls	r0, r0, #1
    d260:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    d264:	e12fff1e 	bx	lr
    d268:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    d26c:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    d270:	312fff1e 	bxcc	lr
    d274:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    d278:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    d27c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    d280:	e12fff1e 	bx	lr
    d284:	e1f02c42 	mvns	r2, r2, asr #24
    d288:	11a00001 	movne	r0, r1
    d28c:	01f03c43 	mvnseq	r3, r3, asr #24
    d290:	11a01000 	movne	r1, r0
    d294:	e1b02480 	lsls	r2, r0, #9
    d298:	01b03481 	lslseq	r3, r1, #9
    d29c:	01300001 	teqeq	r0, r1
    d2a0:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    d2a4:	e12fff1e 	bx	lr

0000d2a8 <__aeabi_ui2f>:
    d2a8:	e3a03000 	mov	r3, #0
    d2ac:	ea000001 	b	d2b8 <__aeabi_i2f+0x8>

0000d2b0 <__aeabi_i2f>:
    d2b0:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    d2b4:	42600000 	rsbmi	r0, r0, #0
    d2b8:	e1b0c000 	movs	ip, r0
    d2bc:	012fff1e 	bxeq	lr
    d2c0:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    d2c4:	e1a01000 	mov	r1, r0
    d2c8:	e3a00000 	mov	r0, #0
    d2cc:	ea00000f 	b	d310 <__aeabi_l2f+0x30>

0000d2d0 <__aeabi_ul2f>:
    d2d0:	e1902001 	orrs	r2, r0, r1
    d2d4:	012fff1e 	bxeq	lr
    d2d8:	e3a03000 	mov	r3, #0
    d2dc:	ea000005 	b	d2f8 <__aeabi_l2f+0x18>

0000d2e0 <__aeabi_l2f>:
    d2e0:	e1902001 	orrs	r2, r0, r1
    d2e4:	012fff1e 	bxeq	lr
    d2e8:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    d2ec:	5a000001 	bpl	d2f8 <__aeabi_l2f+0x18>
    d2f0:	e2700000 	rsbs	r0, r0, #0
    d2f4:	e2e11000 	rsc	r1, r1, #0
    d2f8:	e1b0c001 	movs	ip, r1
    d2fc:	01a0c000 	moveq	ip, r0
    d300:	01a01000 	moveq	r1, r0
    d304:	03a00000 	moveq	r0, #0
    d308:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    d30c:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    d310:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    d314:	e3a02017 	mov	r2, #23
    d318:	e35c0801 	cmp	ip, #65536	; 0x10000
    d31c:	21a0c82c 	lsrcs	ip, ip, #16
    d320:	22422010 	subcs	r2, r2, #16
    d324:	e35c0c01 	cmp	ip, #256	; 0x100
    d328:	21a0c42c 	lsrcs	ip, ip, #8
    d32c:	22422008 	subcs	r2, r2, #8
    d330:	e35c0010 	cmp	ip, #16
    d334:	21a0c22c 	lsrcs	ip, ip, #4
    d338:	22422004 	subcs	r2, r2, #4
    d33c:	e35c0004 	cmp	ip, #4
    d340:	22422002 	subcs	r2, r2, #2
    d344:	304220ac 	subcc	r2, r2, ip, lsr #1
    d348:	e05221ac 	subs	r2, r2, ip, lsr #3
    d34c:	e0433b82 	sub	r3, r3, r2, lsl #23
    d350:	ba000006 	blt	d370 <__aeabi_l2f+0x90>
    d354:	e0833211 	add	r3, r3, r1, lsl r2
    d358:	e1a0c210 	lsl	ip, r0, r2
    d35c:	e2622020 	rsb	r2, r2, #32
    d360:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    d364:	e0a30230 	adc	r0, r3, r0, lsr r2
    d368:	03c00001 	biceq	r0, r0, #1
    d36c:	e12fff1e 	bx	lr
    d370:	e2822020 	add	r2, r2, #32
    d374:	e1a0c211 	lsl	ip, r1, r2
    d378:	e2622020 	rsb	r2, r2, #32
    d37c:	e190008c 	orrs	r0, r0, ip, lsl #1
    d380:	e0a30231 	adc	r0, r3, r1, lsr r2
    d384:	01c00fac 	biceq	r0, r0, ip, lsr #31
    d388:	e12fff1e 	bx	lr

0000d38c <__aeabi_fmul>:
    d38c:	e3a0c0ff 	mov	ip, #255	; 0xff
    d390:	e01c2ba0 	ands	r2, ip, r0, lsr #23
    d394:	101c3ba1 	andsne	r3, ip, r1, lsr #23
    d398:	1132000c 	teqne	r2, ip
    d39c:	1133000c 	teqne	r3, ip
    d3a0:	0a00003e 	beq	d4a0 <__aeabi_fmul+0x114>
    d3a4:	e0822003 	add	r2, r2, r3
    d3a8:	e020c001 	eor	ip, r0, r1
    d3ac:	e1b00480 	lsls	r0, r0, #9
    d3b0:	11b01481 	lslsne	r1, r1, #9
    d3b4:	0a000010 	beq	d3fc <__aeabi_fmul+0x70>
    d3b8:	e3a03302 	mov	r3, #134217728	; 0x8000000
    d3bc:	e18302a0 	orr	r0, r3, r0, lsr #5
    d3c0:	e18312a1 	orr	r1, r3, r1, lsr #5
    d3c4:	e0813190 	umull	r3, r1, r0, r1
    d3c8:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
    d3cc:	e3510502 	cmp	r1, #8388608	; 0x800000
    d3d0:	31a01081 	lslcc	r1, r1, #1
    d3d4:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    d3d8:	31a03083 	lslcc	r3, r3, #1
    d3dc:	e1800001 	orr	r0, r0, r1
    d3e0:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    d3e4:	e35200fd 	cmp	r2, #253	; 0xfd
    d3e8:	8a00000f 	bhi	d42c <__aeabi_fmul+0xa0>
    d3ec:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    d3f0:	e0a00b82 	adc	r0, r0, r2, lsl #23
    d3f4:	03c00001 	biceq	r0, r0, #1
    d3f8:	e12fff1e 	bx	lr
    d3fc:	e3300000 	teq	r0, #0
    d400:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
    d404:	01a01481 	lsleq	r1, r1, #9
    d408:	e18c04a0 	orr	r0, ip, r0, lsr #9
    d40c:	e18004a1 	orr	r0, r0, r1, lsr #9
    d410:	e252207f 	subs	r2, r2, #127	; 0x7f
    d414:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    d418:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    d41c:	c12fff1e 	bxgt	lr
    d420:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    d424:	e3a03000 	mov	r3, #0
    d428:	e2522001 	subs	r2, r2, #1
    d42c:	ca000035 	bgt	d508 <__aeabi_fmul+0x17c>
    d430:	e3720019 	cmn	r2, #25
    d434:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    d438:	d12fff1e 	bxle	lr
    d43c:	e2622000 	rsb	r2, r2, #0
    d440:	e1b01080 	lsls	r1, r0, #1
    d444:	e1a01231 	lsr	r1, r1, r2
    d448:	e2622020 	rsb	r2, r2, #32
    d44c:	e1a0c210 	lsl	ip, r0, r2
    d450:	e1b00061 	rrxs	r0, r1
    d454:	e2a00000 	adc	r0, r0, #0
    d458:	e193308c 	orrs	r3, r3, ip, lsl #1
    d45c:	01c00fac 	biceq	r0, r0, ip, lsr #31
    d460:	e12fff1e 	bx	lr
    d464:	e3320000 	teq	r2, #0
    d468:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
    d46c:	01a00080 	lsleq	r0, r0, #1
    d470:	03100502 	tsteq	r0, #8388608	; 0x800000
    d474:	02422001 	subeq	r2, r2, #1
    d478:	0afffffb 	beq	d46c <__aeabi_fmul+0xe0>
    d47c:	e180000c 	orr	r0, r0, ip
    d480:	e3330000 	teq	r3, #0
    d484:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    d488:	01a01081 	lsleq	r1, r1, #1
    d48c:	03110502 	tsteq	r1, #8388608	; 0x800000
    d490:	02433001 	subeq	r3, r3, #1
    d494:	0afffffb 	beq	d488 <__aeabi_fmul+0xfc>
    d498:	e181100c 	orr	r1, r1, ip
    d49c:	eaffffc0 	b	d3a4 <__aeabi_fmul+0x18>
    d4a0:	e00c3ba1 	and	r3, ip, r1, lsr #23
    d4a4:	e132000c 	teq	r2, ip
    d4a8:	1133000c 	teqne	r3, ip
    d4ac:	0a000005 	beq	d4c8 <__aeabi_fmul+0x13c>
    d4b0:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
    d4b4:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
    d4b8:	1affffe9 	bne	d464 <__aeabi_fmul+0xd8>
    d4bc:	e0200001 	eor	r0, r0, r1
    d4c0:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    d4c4:	e12fff1e 	bx	lr
    d4c8:	e3300000 	teq	r0, #0
    d4cc:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    d4d0:	01a00001 	moveq	r0, r1
    d4d4:	13310000 	teqne	r1, #0
    d4d8:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    d4dc:	0a00000d 	beq	d518 <__aeabi_fmul+0x18c>
    d4e0:	e132000c 	teq	r2, ip
    d4e4:	1a000001 	bne	d4f0 <__aeabi_fmul+0x164>
    d4e8:	e1b02480 	lsls	r2, r0, #9
    d4ec:	1a000009 	bne	d518 <__aeabi_fmul+0x18c>
    d4f0:	e133000c 	teq	r3, ip
    d4f4:	1a000002 	bne	d504 <__aeabi_fmul+0x178>
    d4f8:	e1b03481 	lsls	r3, r1, #9
    d4fc:	11a00001 	movne	r0, r1
    d500:	1a000004 	bne	d518 <__aeabi_fmul+0x18c>
    d504:	e0200001 	eor	r0, r0, r1
    d508:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    d50c:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    d510:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    d514:	e12fff1e 	bx	lr
    d518:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    d51c:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    d520:	e12fff1e 	bx	lr

0000d524 <__aeabi_fdiv>:
    d524:	e3a0c0ff 	mov	ip, #255	; 0xff
    d528:	e01c2ba0 	ands	r2, ip, r0, lsr #23
    d52c:	101c3ba1 	andsne	r3, ip, r1, lsr #23
    d530:	1132000c 	teqne	r2, ip
    d534:	1133000c 	teqne	r3, ip
    d538:	0a00003a 	beq	d628 <__aeabi_fdiv+0x104>
    d53c:	e0422003 	sub	r2, r2, r3
    d540:	e020c001 	eor	ip, r0, r1
    d544:	e1b01481 	lsls	r1, r1, #9
    d548:	e1a00480 	lsl	r0, r0, #9
    d54c:	0a00001c 	beq	d5c4 <__aeabi_fdiv+0xa0>
    d550:	e3a03201 	mov	r3, #268435456	; 0x10000000
    d554:	e1831221 	orr	r1, r3, r1, lsr #4
    d558:	e1833220 	orr	r3, r3, r0, lsr #4
    d55c:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
    d560:	e1530001 	cmp	r3, r1
    d564:	31a03083 	lslcc	r3, r3, #1
    d568:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    d56c:	e3a0c502 	mov	ip, #8388608	; 0x800000
    d570:	e1530001 	cmp	r3, r1
    d574:	20433001 	subcs	r3, r3, r1
    d578:	2180000c 	orrcs	r0, r0, ip
    d57c:	e15300a1 	cmp	r3, r1, lsr #1
    d580:	204330a1 	subcs	r3, r3, r1, lsr #1
    d584:	218000ac 	orrcs	r0, r0, ip, lsr #1
    d588:	e1530121 	cmp	r3, r1, lsr #2
    d58c:	20433121 	subcs	r3, r3, r1, lsr #2
    d590:	2180012c 	orrcs	r0, r0, ip, lsr #2
    d594:	e15301a1 	cmp	r3, r1, lsr #3
    d598:	204331a1 	subcs	r3, r3, r1, lsr #3
    d59c:	218001ac 	orrcs	r0, r0, ip, lsr #3
    d5a0:	e1b03203 	lsls	r3, r3, #4
    d5a4:	11b0c22c 	lsrsne	ip, ip, #4
    d5a8:	1afffff0 	bne	d570 <__aeabi_fdiv+0x4c>
    d5ac:	e35200fd 	cmp	r2, #253	; 0xfd
    d5b0:	8affff9d 	bhi	d42c <__aeabi_fmul+0xa0>
    d5b4:	e1530001 	cmp	r3, r1
    d5b8:	e0a00b82 	adc	r0, r0, r2, lsl #23
    d5bc:	03c00001 	biceq	r0, r0, #1
    d5c0:	e12fff1e 	bx	lr
    d5c4:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
    d5c8:	e18c04a0 	orr	r0, ip, r0, lsr #9
    d5cc:	e292207f 	adds	r2, r2, #127	; 0x7f
    d5d0:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    d5d4:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    d5d8:	c12fff1e 	bxgt	lr
    d5dc:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    d5e0:	e3a03000 	mov	r3, #0
    d5e4:	e2522001 	subs	r2, r2, #1
    d5e8:	eaffff8f 	b	d42c <__aeabi_fmul+0xa0>
    d5ec:	e3320000 	teq	r2, #0
    d5f0:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
    d5f4:	01a00080 	lsleq	r0, r0, #1
    d5f8:	03100502 	tsteq	r0, #8388608	; 0x800000
    d5fc:	02422001 	subeq	r2, r2, #1
    d600:	0afffffb 	beq	d5f4 <__aeabi_fdiv+0xd0>
    d604:	e180000c 	orr	r0, r0, ip
    d608:	e3330000 	teq	r3, #0
    d60c:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    d610:	01a01081 	lsleq	r1, r1, #1
    d614:	03110502 	tsteq	r1, #8388608	; 0x800000
    d618:	02433001 	subeq	r3, r3, #1
    d61c:	0afffffb 	beq	d610 <__aeabi_fdiv+0xec>
    d620:	e181100c 	orr	r1, r1, ip
    d624:	eaffffc4 	b	d53c <__aeabi_fdiv+0x18>
    d628:	e00c3ba1 	and	r3, ip, r1, lsr #23
    d62c:	e132000c 	teq	r2, ip
    d630:	1a000005 	bne	d64c <__aeabi_fdiv+0x128>
    d634:	e1b02480 	lsls	r2, r0, #9
    d638:	1affffb6 	bne	d518 <__aeabi_fmul+0x18c>
    d63c:	e133000c 	teq	r3, ip
    d640:	1affffaf 	bne	d504 <__aeabi_fmul+0x178>
    d644:	e1a00001 	mov	r0, r1
    d648:	eaffffb2 	b	d518 <__aeabi_fmul+0x18c>
    d64c:	e133000c 	teq	r3, ip
    d650:	1a000003 	bne	d664 <__aeabi_fdiv+0x140>
    d654:	e1b03481 	lsls	r3, r1, #9
    d658:	0affff97 	beq	d4bc <__aeabi_fmul+0x130>
    d65c:	e1a00001 	mov	r0, r1
    d660:	eaffffac 	b	d518 <__aeabi_fmul+0x18c>
    d664:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
    d668:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
    d66c:	1affffde 	bne	d5ec <__aeabi_fdiv+0xc8>
    d670:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    d674:	1affffa2 	bne	d504 <__aeabi_fmul+0x178>
    d678:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    d67c:	1affff8e 	bne	d4bc <__aeabi_fmul+0x130>
    d680:	eaffffa4 	b	d518 <__aeabi_fmul+0x18c>

0000d684 <__gesf2>:
    d684:	e3e0c000 	mvn	ip, #0
    d688:	ea000002 	b	d698 <__cmpsf2+0x4>

0000d68c <__lesf2>:
    d68c:	e3a0c001 	mov	ip, #1
    d690:	ea000000 	b	d698 <__cmpsf2+0x4>

0000d694 <__cmpsf2>:
    d694:	e3a0c001 	mov	ip, #1
    d698:	e50dc004 	str	ip, [sp, #-4]
    d69c:	e1a02080 	lsl	r2, r0, #1
    d6a0:	e1a03081 	lsl	r3, r1, #1
    d6a4:	e1f0cc42 	mvns	ip, r2, asr #24
    d6a8:	11f0cc43 	mvnsne	ip, r3, asr #24
    d6ac:	0a000006 	beq	d6cc <__cmpsf2+0x38>
    d6b0:	e192c0a3 	orrs	ip, r2, r3, lsr #1
    d6b4:	11300001 	teqne	r0, r1
    d6b8:	50520003 	subspl	r0, r2, r3
    d6bc:	81a00fc1 	asrhi	r0, r1, #31
    d6c0:	31e00fc1 	mvncc	r0, r1, asr #31
    d6c4:	13800001 	orrne	r0, r0, #1
    d6c8:	e12fff1e 	bx	lr
    d6cc:	e1f0cc42 	mvns	ip, r2, asr #24
    d6d0:	1a000001 	bne	d6dc <__cmpsf2+0x48>
    d6d4:	e1b0c480 	lsls	ip, r0, #9
    d6d8:	1a000003 	bne	d6ec <__cmpsf2+0x58>
    d6dc:	e1f0cc43 	mvns	ip, r3, asr #24
    d6e0:	1afffff2 	bne	d6b0 <__cmpsf2+0x1c>
    d6e4:	e1b0c481 	lsls	ip, r1, #9
    d6e8:	0afffff0 	beq	d6b0 <__cmpsf2+0x1c>
    d6ec:	e51d0004 	ldr	r0, [sp, #-4]
    d6f0:	e12fff1e 	bx	lr

0000d6f4 <__aeabi_cfrcmple>:
    d6f4:	e1a0c000 	mov	ip, r0
    d6f8:	e1a00001 	mov	r0, r1
    d6fc:	e1a0100c 	mov	r1, ip
    d700:	eaffffff 	b	d704 <__aeabi_cfcmpeq>

0000d704 <__aeabi_cfcmpeq>:
    d704:	e92d400f 	push	{r0, r1, r2, r3, lr}
    d708:	ebffffe1 	bl	d694 <__cmpsf2>
    d70c:	e3500000 	cmp	r0, #0
    d710:	43700000 	cmnmi	r0, #0
    d714:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    d718:	e12fff1e 	bx	lr

0000d71c <__aeabi_fcmpeq>:
    d71c:	e52de008 	str	lr, [sp, #-8]!
    d720:	ebfffff7 	bl	d704 <__aeabi_cfcmpeq>
    d724:	03a00001 	moveq	r0, #1
    d728:	13a00000 	movne	r0, #0
    d72c:	e49de008 	ldr	lr, [sp], #8
    d730:	e12fff1e 	bx	lr

0000d734 <__aeabi_fcmplt>:
    d734:	e52de008 	str	lr, [sp, #-8]!
    d738:	ebfffff1 	bl	d704 <__aeabi_cfcmpeq>
    d73c:	33a00001 	movcc	r0, #1
    d740:	23a00000 	movcs	r0, #0
    d744:	e49de008 	ldr	lr, [sp], #8
    d748:	e12fff1e 	bx	lr

0000d74c <__aeabi_fcmple>:
    d74c:	e52de008 	str	lr, [sp, #-8]!
    d750:	ebffffeb 	bl	d704 <__aeabi_cfcmpeq>
    d754:	93a00001 	movls	r0, #1
    d758:	83a00000 	movhi	r0, #0
    d75c:	e49de008 	ldr	lr, [sp], #8
    d760:	e12fff1e 	bx	lr

0000d764 <__aeabi_fcmpge>:
    d764:	e52de008 	str	lr, [sp, #-8]!
    d768:	ebffffe1 	bl	d6f4 <__aeabi_cfrcmple>
    d76c:	93a00001 	movls	r0, #1
    d770:	83a00000 	movhi	r0, #0
    d774:	e49de008 	ldr	lr, [sp], #8
    d778:	e12fff1e 	bx	lr

0000d77c <__aeabi_fcmpgt>:
    d77c:	e52de008 	str	lr, [sp, #-8]!
    d780:	ebffffdb 	bl	d6f4 <__aeabi_cfrcmple>
    d784:	33a00001 	movcc	r0, #1
    d788:	23a00000 	movcs	r0, #0
    d78c:	e49de008 	ldr	lr, [sp], #8
    d790:	e12fff1e 	bx	lr

0000d794 <__aeabi_f2iz>:
    d794:	e1a02080 	lsl	r2, r0, #1
    d798:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    d79c:	3a000008 	bcc	d7c4 <__aeabi_f2iz+0x30>
    d7a0:	e3a0309e 	mov	r3, #158	; 0x9e
    d7a4:	e0532c22 	subs	r2, r3, r2, lsr #24
    d7a8:	9a000007 	bls	d7cc <__aeabi_f2iz+0x38>
    d7ac:	e1a03400 	lsl	r3, r0, #8
    d7b0:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    d7b4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    d7b8:	e1a00233 	lsr	r0, r3, r2
    d7bc:	12600000 	rsbne	r0, r0, #0
    d7c0:	e12fff1e 	bx	lr
    d7c4:	e3a00000 	mov	r0, #0
    d7c8:	e12fff1e 	bx	lr
    d7cc:	e3720061 	cmn	r2, #97	; 0x61
    d7d0:	1a000001 	bne	d7dc <__aeabi_f2iz+0x48>
    d7d4:	e1b02480 	lsls	r2, r0, #9
    d7d8:	1a000002 	bne	d7e8 <__aeabi_f2iz+0x54>
    d7dc:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    d7e0:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    d7e4:	e12fff1e 	bx	lr
    d7e8:	e3a00000 	mov	r0, #0
    d7ec:	e12fff1e 	bx	lr

0000d7f0 <__errno>:
    d7f0:	4b01      	ldr	r3, [pc, #4]	; (d7f8 <__errno+0x8>)
    d7f2:	6818      	ldr	r0, [r3, #0]
    d7f4:	4770      	bx	lr
    d7f6:	46c0      	nop			; (mov r8, r8)
    d7f8:	40000560 	.word	0x40000560

0000d7fc <__memcpy_from_arm>:
    d7fc:	e59fc000 	ldr	ip, [pc]	; d804 <__memcpy_from_arm+0x8>
    d800:	e12fff1c 	bx	ip
    d804:	00007399 	.word	0x00007399

0000d808 <____divsi3_from_arm>:
    d808:	e59fc000 	ldr	ip, [pc]	; d810 <____divsi3_from_arm+0x8>
    d80c:	e12fff1c 	bx	ip
    d810:	00007481 	.word	0x00007481

0000d814 <__cos_from_arm>:
    d814:	e59fc000 	ldr	ip, [pc]	; d81c <__cos_from_arm+0x8>
    d818:	e12fff1c 	bx	ip
    d81c:	0000b045 	.word	0x0000b045

0000d820 <____udivsi3_from_arm>:
    d820:	e59fc000 	ldr	ip, [pc]	; d828 <____udivsi3_from_arm+0x8>
    d824:	e12fff1c 	bx	ip
    d828:	000073f5 	.word	0x000073f5

0000d82c <__sqrt_from_arm>:
    d82c:	e59fc000 	ldr	ip, [pc]	; d834 <__sqrt_from_arm+0x8>
    d830:	e12fff1c 	bx	ip
    d834:	0000b289 	.word	0x0000b289

0000d838 <__sin_from_arm>:
    d838:	e59fc000 	ldr	ip, [pc]	; d840 <__sin_from_arm+0x8>
    d83c:	e12fff1c 	bx	ip
    d840:	0000b0fd 	.word	0x0000b0fd

0000d844 <__atan2_from_arm>:
    d844:	e59fc000 	ldr	ip, [pc]	; d84c <__atan2_from_arm+0x8>
    d848:	e12fff1c 	bx	ip
    d84c:	0000b1b9 	.word	0x0000b1b9

0000d850 <____floatsidf_from_thumb>:
    d850:	4778      	bx	pc
    d852:	46c0      	nop			; (mov r8, r8)
    d854:	eaffe804 	b	786c <__aeabi_i2d>

0000d858 <____ltdf2_from_thumb>:
    d858:	4778      	bx	pc
    d85a:	46c0      	nop			; (mov r8, r8)
    d85c:	eafffd92 	b	ceac <__ledf2>

0000d860 <____divdf3_from_thumb>:
    d860:	4778      	bx	pc
    d862:	46c0      	nop			; (mov r8, r8)
    d864:	eaffe8df 	b	7be8 <__aeabi_ddiv>

0000d868 <____eqdf2_from_thumb>:
    d868:	4778      	bx	pc
    d86a:	46c0      	nop			; (mov r8, r8)
    d86c:	eafffd90 	b	ceb4 <__cmpdf2>

0000d870 <____gedf2_from_thumb>:
    d870:	4778      	bx	pc
    d872:	46c0      	nop			; (mov r8, r8)
    d874:	eafffd8a 	b	cea4 <__gedf2>

0000d878 <____muldf3_from_thumb>:
    d878:	4778      	bx	pc
    d87a:	46c0      	nop			; (mov r8, r8)
    d87c:	eaffe835 	b	7958 <__aeabi_dmul>

0000d880 <____adddf3_from_thumb>:
    d880:	4778      	bx	pc
    d882:	46c0      	nop			; (mov r8, r8)
    d884:	eaffe72a 	b	7534 <__adddf3>

0000d888 <____subdf3_from_thumb>:
    d888:	4778      	bx	pc
    d88a:	46c0      	nop			; (mov r8, r8)
    d88c:	eaffe727 	b	7530 <__aeabi_dsub>

0000d890 <____fixdfsi_from_thumb>:
    d890:	4778      	bx	pc
    d892:	46c0      	nop			; (mov r8, r8)
    d894:	eafffdd2 	b	cfe4 <__aeabi_d2iz>

0000d898 <____gtdf2_from_thumb>:
    d898:	4778      	bx	pc
    d89a:	46c0      	nop			; (mov r8, r8)
    d89c:	eafffd80 	b	cea4 <__gedf2>
    d8a0:	20677541 	.word	0x20677541
    d8a4:	32203931 	.word	0x32203931
    d8a8:	00343130 	.word	0x00343130

0000d8ac <C.0.1302>:
    d8ac:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
    d8bc:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
    d8cc:	7a654476 65444252 75657571 42203a65     vDezRBDequeue: B
    d8dc:	65666675 6d452072 21797470 0000000a     uffer Empty!....
    d8ec:	66754231 20726566 4c4c5546 00000a21     1Buffer FULL!...
    d8fc:	55424544 00003a47 0000003a 0000000a     DEBUG:..:.......
    d90c:	6e617461 00000032 74727173 00000000     atan2...sqrt....

0000d91c <npio2_hw>:
    d91c:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
    d92c:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
    d93c:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
    d94c:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
    d95c:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
    d96c:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
    d97c:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
    d98c:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

0000d99c <two_over_pi>:
    d99c:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
    d9ac:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
    d9bc:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
    d9cc:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
    d9dc:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
    d9ec:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
    d9fc:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
    da0c:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
    da1c:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
    da2c:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
    da3c:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
    da4c:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
    da5c:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
    da6c:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
    da7c:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
    da8c:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
    da9c:	0060e27b 00c08c6b                       {.`.k...

0000daa4 <init_jk>:
    daa4:	00000002 00000003 00000004 00000006     ................

0000dab4 <PIo2>:
    dab4:	3ff921fb 40000000 3e74442d 00000000     .!.?...@-Dt>....
    dac4:	3cf84698 80000000 3b78cc51 60000000     .F.<....Q.x;...`
    dad4:	39f01b83 80000000 387a2520 40000000     ...9.... %z8...@
    dae4:	36e38222 80000000 3569f31d 00000000     "..6......i5....

0000daf4 <atanhi>:
    daf4:	3fddac67 0561bb4f 3fe921fb 54442d18     g..?O.a..!.?.-DT
    db04:	3fef730b d281f69b 3ff921fb 54442d18     .s.?.....!.?.-DT

0000db14 <atanlo>:
    db14:	3c7a2b7f 222f65e2 3c81a626 33145c07     .+z<.e/"&..<.\.3
    db24:	3c700788 7af0cbbd 3c91a626 33145c07     ..p<...z&..<.\.3

0000db34 <__fdlib_version>:
    db34:	00000001                                ....

0000db38 <_global_impure_ptr>:
    db38:	40000564 00000043                       d..@C...
