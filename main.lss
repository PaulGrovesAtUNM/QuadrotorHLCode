
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000dd28  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000096c  40000000  0000dd28  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000015b0  4000096c  0000e694  0001896c  2**2
                  ALLOC
  3 .stack        00001980  40002000  40002000  00018970  2**4
                  CONTENTS
  4 .comment      0000002c  00000000  00000000  0001a2f0  2**0
                  CONTENTS, READONLY
  5 .ARM.attributes 00000010  00000000  00000000  0001a31c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000590  00000000  00000000  0001a330  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000014e9  00000000  00000000  0001a8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000c7c1  00000000  00000000  0001bda9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000026cf  00000000  00000000  0002856a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000871e  00000000  00000000  0002ac39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000014e8  00000000  00000000  00033358  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000040a  00000000  00000000  00034840  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003e91  00000000  00000000  00034c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001f0  00000000  00000000  00038ae0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__Vectors>:

// Exception Vectors
// Mapped to Address 0.
// Absolute addressing mode must be used.

    __Vectors:        LDR     PC,Reset_Addr
       0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <Reset_Addr>
    LDR     PC,Undef_Addr
       4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <Undef_Addr>
    LDR     PC,SWI_Addr
       8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <SWI_Addr>
    LDR     PC,PAbt_Addr
       c:	e59ff018 	ldr	pc, [pc, #24]	; 2c <PAbt_Addr>
    LDR     PC,DAbt_Addr
      10:	e59ff018 	ldr	pc, [pc, #24]	; 30 <DAbt_Addr>
    NOP                            /* Reserved Vector */
      14:	e1a00000 	nop			; (mov r0, r0)
//                LDR     PC,IRQ_Addr
//                LDR     PC,[PC, #-0x0FF0]      /* Vector from VicVectAddr */
    LDR     PC,IRQ_Wrapper_Addr
      18:	e59ff018 	ldr	pc, [pc, #24]	; 38 <IRQ_Wrapper_Addr>
    LDR     PC,FIQ_Addr
      1c:	e59ff018 	ldr	pc, [pc, #24]	; 3c <FIQ_Addr>

00000020 <Reset_Addr>:
      20:	00000168 	.word	0x00000168

00000024 <Undef_Addr>:
      24:	00000040 	.word	0x00000040

00000028 <SWI_Addr>:
      28:	00000098 	.word	0x00000098

0000002c <PAbt_Addr>:
      2c:	00000044 	.word	0x00000044

00000030 <DAbt_Addr>:
      30:	00000048 	.word	0x00000048
      34:	00000000 	.word	0x00000000

00000038 <IRQ_Wrapper_Addr>:
      38:	00000050 	.word	0x00000050

0000003c <FIQ_Addr>:
      3c:	0000004c 	.word	0x0000004c

00000040 <Undef_Handler>:
    .word     0                      /* Reserved Address */
// IRQ_Addr:         .word     __IRQ_Handler
IRQ_Wrapper_Addr: .word    __IRQ_Wrapper
FIQ_Addr:         .word     FIQ_Handler

Undef_Handler:  B       Undef_Handler
      40:	eafffffe 	b	40 <Undef_Handler>

00000044 <PAbt_Handler>:
    /* SWI_Handler:    B       SWI_Handler */
PAbt_Handler:   B       PAbt_Handler
      44:	eafffffe 	b	44 <PAbt_Handler>

00000048 <DAbt_Handler>:
DAbt_Handler:   B       DAbt_Handler
      48:	eafffffe 	b	48 <DAbt_Handler>

0000004c <FIQ_Handler>:
    /* IRQ_Handler:    B       IRQ_Handler */
FIQ_Handler:    B       FIQ_Handler
      4c:	eafffffe 	b	4c <FIQ_Handler>

00000050 <__IRQ_Wrapper>:
                                                                                                                                                   .global __IRQ_Wrapper
                                                                                                                                                   .func   __IRQ_Wrapper
                                                                                                                                               __IRQ_Wrapper:
                                                                                                                                                   /*- Manage Exception Entry  */
                                                                                                                                                   /*- Adjust and save LR_irq in IRQ stack  */
                                                                                                                                                   sub         lr, lr, #4
      50:	e24ee004 	sub	lr, lr, #4
                                                                                                                                                   stmfd       sp!, {lr}
      54:	e92d4000 	push	{lr}

                                                                                                                                                   /*- Save SPSR need to be saved for nested interrupt */
                                                                                                                                                   mrs         r14, SPSR
      58:	e14fe000 	mrs	lr, SPSR
                                                                                                                                                   stmfd       sp!, {r14}
      5c:	e92d4000 	push	{lr}

                                                                                                                                                   /*- Save and r0 in IRQ stack  */
                                                                                                                                                   stmfd       sp!, {r0}
      60:	e92d0001 	push	{r0}

                                                                                                                                                   /*- Write in the IVR to support Protect Mode  */
                                                                                                                                                   /*- No effect in Normal Mode  */
                                                                                                                                                   /*- De-assert the NIRQ and clear the source in Protect Mode */
                                                                                                                                                   /* R14 = LR */
                                                                                                                                                   ldr         r14, =VIC_base_addr
      64:	e59fe028 	ldr	lr, [pc, #40]	; 94 <ABT_Stack_Size+0x14>
                                                                                                                                                           ldr         r0 , [r14, #VIC_vect_offs]
      68:	e59e0030 	ldr	r0, [lr, #48]	; 0x30
                                                                                                                                                           /*str         r14, [r14, #VIC_vect_offs]*/

                                                                                                                                                           /*- Enable Interrupt and Switch in Supervisor Mode */
                                                                                                                                                           msr         CPSR_c, #I_Bit | Mode_SVC
      6c:	e321f093 	msr	CPSR_c, #147	; 0x93

                                                                                                                                                           /*- Save scratch/used registers and LR in User Stack */
                                                                                                                                                           /*stmfd       sp!, { r1-r3, r12, r14}*/
                                                                                                                                                           stmfd       sp!, { r1-r12, r14 }
      70:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

                                                                                                                                                           /*- Branch to the routine pointed by the VIC-Vector-Address  */
                                                                                                                                                           mov         r14, pc
      74:	e1a0e00f 	mov	lr, pc
                                                                                                                                                           bx          r0
      78:	e12fff10 	bx	r0
                                                                                                                                                           /*- Restore scratch/used registers and LR from User Stack*/
                                                                                                                                                           /* ldmia       sp!, { r1-r3, r12, r14} */
                                                                                                                                                           ldmia       sp!, { r1-r12, r14 }
      7c:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

                                                                                                                                                           /*- Disable Interrupt and switch back in IRQ mode */
                                                                                                                                                           msr         CPSR_c, #I_Bit | Mode_IRQ
      80:	e321f092 	msr	CPSR_c, #146	; 0x92
                                                                                                                                                           ldr         r14, =VIC_base_addr
                                                                                                                                                                   str         r14, [r14, #VIC_vect_offs]
#endif

                                                                                                                                                                   /*- Restore SPSR_irq and r0 from IRQ stack */
                                                                                                                                                                   ldmia       sp!, {r0}
      84:	e8bd0001 	pop	{r0}

                                                                                                                                                                   /*- Restore SPSR_irq and r0 from IRQ stack */
                                                                                                                                                                   ldmia       sp!, {r14}
      88:	e8bd4000 	pop	{lr}
                                                                                                                                                                   msr         SPSR_cxsf, r14
      8c:	e16ff00e 	msr	SPSR_fsxc, lr

                                                                                                                                                                   /*- Restore adjusted  LR_irq from IRQ stack directly in the PC */
                                                                                                                                                                   ldmia       sp!, {pc}^
      90:	e8fd8000 	ldm	sp!, {pc}^

                                                                                                                                                   /*- Write in the IVR to support Protect Mode  */
                                                                                                                                                   /*- No effect in Normal Mode  */
                                                                                                                                                   /*- De-assert the NIRQ and clear the source in Protect Mode */
                                                                                                                                                   /* R14 = LR */
                                                                                                                                                   ldr         r14, =VIC_base_addr
      94:	fffff000 	.word	0xfffff000

00000098 <SoftwareInterrupt>:

.global SoftwareInterrupt
.func   SoftwareInterrupt
SoftwareInterrupt:
SWI_HandlerMT:
STMFD   sp!, {r4, lr}      /* store regs. */
      98:	e92d4010 	push	{r4, lr}
MRS     r4, spsr
      9c:	e14f4000 	mrs	r4, SPSR
TST     r4, #T_Bit             /* test for thumb */
      a0:	e3140020 	tst	r4, #32
LDRNEH  r4, [lr, #-2]          /* NE->thumb - get swi instruction code */
      a4:	115e40b2 	ldrhne	r4, [lr, #-2]
BICNE   r4, r4, #0xff00        /* NE->thumb - clear top 8 bits leaving swi "comment field"=number */
      a8:	13c44cff 	bicne	r4, r4, #65280	; 0xff00
LDREQ   r4, [lr, #-4]          /* EQ->arm - get swi instruction code */
      ac:	051e4004 	ldreq	r4, [lr, #-4]
BICEQ   r4, r4, #0xff000000    /* EQ->arm - clear top 8 bits leaving swi "comment field"=number */
      b0:	03c444ff 	biceq	r4, r4, #-16777216	; 0xff000000
CMP     r4, #MAX_SWI           /* range-check */
      b4:	e3540006 	cmp	r4, #6
LDRLS   pc, [pc, r4, LSL #2]   /* jump to routine if <= MAX (LS) */
      b8:	979ff104 	ldrls	pc, [pc, r4, lsl #2]

000000bc <SWIOutOfRange>:
SWIOutOfRange:
B       SWIOutOfRange
      bc:	eafffffe 	b	bc <SWIOutOfRange>

000000c0 <SwiTableStart>:
      c0:	000000dc 	.word	0x000000dc
      c4:	000000ec 	.word	0x000000ec
      c8:	000000fc 	.word	0x000000fc
      cc:	00000110 	.word	0x00000110
      d0:	00000124 	.word	0x00000124
      d4:	0000012c 	.word	0x0000012c
      d8:	00000148 	.word	0x00000148

000000dc <IRQDisable>:
.word FIQRestore	// 6
SwiTableEnd:
.set MAX_SWI, ((SwiTableEnd-SwiTableStart)/4)-1

IRQDisable:
MRS     r0, SPSR                        /* Get SPSR = return value */
      dc:	e14f0000 	mrs	r0, SPSR
ORR     r4, r0, #I_Bit                  /* I_Bit set */
      e0:	e3804080 	orr	r4, r0, #128	; 0x80
MSR     SPSR_c, r4                      /* Set SPSR */
      e4:	e161f004 	msr	SPSR_c, r4
B       EndofSWI
      e8:	ea00001d 	b	164 <EndofSWI>

000000ec <IRQEnable>:

IRQEnable:
MRS     r0, SPSR                        /* Get SPSR = return value */
      ec:	e14f0000 	mrs	r0, SPSR
BIC     r4, r0, #I_Bit                  /* I_Bit clear */
      f0:	e3c04080 	bic	r4, r0, #128	; 0x80
MSR     SPSR_c, r4                      /* Set SPSR */
      f4:	e161f004 	msr	SPSR_c, r4
B       EndofSWI
      f8:	ea000019 	b	164 <EndofSWI>

000000fc <FIQDisable>:

FIQDisable:
MRS     r0, SPSR
      fc:	e14f0000 	mrs	r0, SPSR
ORR     r4, r0, #F_Bit
     100:	e3804040 	orr	r4, r0, #64	; 0x40
AND     r0, r0, #F_Bit
     104:	e2000040 	and	r0, r0, #64	; 0x40
MSR     SPSR_c, r4
     108:	e161f004 	msr	SPSR_c, r4
B       EndofSWI
     10c:	ea000014 	b	164 <EndofSWI>

00000110 <FIQEnable>:

FIQEnable:
MRS     r0, SPSR
     110:	e14f0000 	mrs	r0, SPSR
BIC     r4, r0, #F_Bit
     114:	e3c04040 	bic	r4, r0, #64	; 0x40
AND     r0, r0, #F_Bit
     118:	e2000040 	and	r0, r0, #64	; 0x40
MSR     SPSR_c, r4
     11c:	e161f004 	msr	SPSR_c, r4
B       EndofSWI
     120:	ea00000f 	b	164 <EndofSWI>

00000124 <CPSRget>:

CPSRget:
// LDR r0, =0xdeadbeef
MRS     r0, SPSR                        /* Get SPSR */
     124:	e14f0000 	mrs	r0, SPSR
B       EndofSWI
     128:	ea00000d 	b	164 <EndofSWI>

0000012c <IRQRestore>:

IRQRestore:
MRS     r4, SPSR                        /* Get SPSR */
     12c:	e14f4000 	mrs	r4, SPSR
AND     r0, r0, #I_Bit
     130:	e2000080 	and	r0, r0, #128	; 0x80
TST     r0, #I_Bit             /* Test input for I_Bit */
     134:	e3100080 	tst	r0, #128	; 0x80
BICEQ   r4, r4, #I_Bit
     138:	03c44080 	biceq	r4, r4, #128	; 0x80
ORRNE   r4, r4, #I_Bit
     13c:	13844080 	orrne	r4, r4, #128	; 0x80
MSR     SPSR_c, r4
     140:	e161f004 	msr	SPSR_c, r4
B       EndofSWI
     144:	ea000006 	b	164 <EndofSWI>

00000148 <FIQRestore>:

FIQRestore:
MRS     r4, SPSR                        /* Get SPSR */
     148:	e14f4000 	mrs	r4, SPSR
AND     r0, r0, #F_Bit
     14c:	e2000040 	and	r0, r0, #64	; 0x40
TST     r0, #F_Bit             /* Test input for F_Bit */
     150:	e3100040 	tst	r0, #64	; 0x40
BICEQ   r4, r4, #F_Bit
     154:	03c44040 	biceq	r4, r4, #64	; 0x40
ORRNE   r4, r4, #F_Bit
     158:	13844040 	orrne	r4, r4, #64	; 0x40
MSR     SPSR_c, r4
     15c:	e161f004 	msr	SPSR_c, r4
B       EndofSWI
     160:	eaffffff 	b	164 <EndofSWI>

00000164 <EndofSWI>:

EndofSWI:
LDMFD   sp!, {r4,pc}^
     164:	e8fd8010 	ldm	sp!, {r4, pc}^

00000168 <__startup>:
__startup:

Reset_Handler:

    .if (VPBDIV_SETUP)
    LDR     R0, =VPBDIV
     168:	e59f0128 	ldr	r0, [pc, #296]	; 298 <__exit_THUMB+0x4>
                 LDR     R1, =VPBDIV_Val
     16c:	e3a01000 	mov	r1, #0
                              STR     R1, [R0]
     170:	e5801000 	str	r1, [r0]
                              .endif


                              .if (PLL_SETUP)
                              LDR     R0, =PLL_BASE
     174:	e59f0120 	ldr	r0, [pc, #288]	; 29c <__exit_THUMB+0x8>
                                           MOV     R1, #0xAA
     178:	e3a010aa 	mov	r1, #170	; 0xaa
                                           MOV     R2, #0x55
     17c:	e3a02055 	mov	r2, #85	; 0x55

// Configure and Enable PLL
                                           MOV     R3, #PLLCFG_Val
     180:	e3a03024 	mov	r3, #36	; 0x24
                                           STR     R3, [R0, #PLLCFG_OFS]
     184:	e5803004 	str	r3, [r0, #4]
                                           MOV     R3, #PLLCON_PLLE
     188:	e3a03001 	mov	r3, #1
                                           STR     R3, [R0, #PLLCON_OFS]
     18c:	e5803000 	str	r3, [r0]
                                           STR     R1, [R0, #PLLFEED_OFS]
     190:	e580100c 	str	r1, [r0, #12]
                                           STR     R2, [R0, #PLLFEED_OFS]
     194:	e580200c 	str	r2, [r0, #12]

00000198 <PLL_Loop>:

// Wait until PLL Locked
                                       PLL_Loop:       LDR     R3, [R0, #PLLSTAT_OFS]
     198:	e5903008 	ldr	r3, [r0, #8]
                                           ANDS    R3, R3, #PLLSTAT_PLOCK
     19c:	e2133b01 	ands	r3, r3, #1024	; 0x400
                                           BEQ     PLL_Loop
     1a0:	0afffffc 	beq	198 <PLL_Loop>

// Switch to PLL Clock
                                           MOV     R3, #(PLLCON_PLLE | PLLCON_PLLC)
     1a4:	e3a03003 	mov	r3, #3
                                           STR     R3, [R0, #PLLCON_OFS]
     1a8:	e5803000 	str	r3, [r0]
                                           STR     R1, [R0, #PLLFEED_OFS]
     1ac:	e580100c 	str	r1, [r0, #12]
                                           STR     R2, [R0, #PLLFEED_OFS]
     1b0:	e580200c 	str	r2, [r0, #12]
                                           .endif


                                           .if (MAM_SETUP)
                                           LDR     R0, =MAM_BASE
     1b4:	e59f00e4 	ldr	r0, [pc, #228]	; 2a0 <__exit_THUMB+0xc>
                                                   MOV     R1, #MAMTIM_Val
     1b8:	e3a01004 	mov	r1, #4
                                                   STR     R1, [R0, #MAMTIM_OFS]
     1bc:	e5801004 	str	r1, [r0, #4]
                                                   MOV     R1, #MAMCR_Val
     1c0:	e3a01002 	mov	r1, #2
                                                   STR     R1, [R0, #MAMCR_OFS]
     1c4:	e5801000 	str	r1, [r0]
                                                           .endif
                                                           STR     R1, [R0]
                                                           .endif

// Setup Stack for each mode
                                                           LDR     R0, =Top_Stack
     1c8:	e59f00d4 	ldr	r0, [pc, #212]	; 2a4 <__exit_THUMB+0x10>

// Enter Undefined Instruction Mode and set its Stack Pointer
                                                                   MSR     CPSR_c, #Mode_UND|I_Bit|F_Bit
     1cc:	e321f0db 	msr	CPSR_c, #219	; 0xdb
                                                                   MOV     SP, R0
     1d0:	e1a0d000 	mov	sp, r0
                                                                   SUB     R0, R0, #UND_Stack_Size
     1d4:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter Abort Mode and set its Stack Pointer
                                                                   MSR     CPSR_c, #Mode_ABT|I_Bit|F_Bit
     1d8:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
                                                                   MOV     SP, R0
     1dc:	e1a0d000 	mov	sp, r0
                                                                   SUB     R0, R0, #ABT_Stack_Size
     1e0:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter FIQ Mode and set its Stack Pointer
                                                                   MSR     CPSR_c, #Mode_FIQ|I_Bit|F_Bit
     1e4:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
                                                                   MOV     SP, R0
     1e8:	e1a0d000 	mov	sp, r0
                                                                   SUB     R0, R0, #FIQ_Stack_Size
     1ec:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter IRQ Mode and set its Stack Pointer
                                                                   MSR     CPSR_c, #Mode_IRQ|I_Bit|F_Bit
     1f0:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
                                                                   MOV     SP, R0
     1f4:	e1a0d000 	mov	sp, r0
                                                                   SUB     R0, R0, #IRQ_Stack_Size
     1f8:	e2400b02 	sub	r0, r0, #2048	; 0x800

// Enter Supervisor Mode and set its Stack Pointer
                                                                   MSR     CPSR_c, #Mode_SVC|I_Bit|F_Bit
     1fc:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
                                                                   MOV     SP, R0
     200:	e1a0d000 	mov	sp, r0
                                                                   SUB     R0, R0, #SVC_Stack_Size
     204:	e2400b02 	sub	r0, r0, #2048	; 0x800

// Enter User Mode and set its Stack Pointer
                                                                   MSR     CPSR_c, #Mode_USR /* Interrupts enabled */
     208:	e321f010 	msr	CPSR_c, #16
//				MSR     CPSR_c, #Mode_USR|I_Bit|F_Bit /* Interrupts disabled */
                                                                   MOV     SP, R0
     20c:	e1a0d000 	mov	sp, r0


                                                                   .if (RAM_MODE==0)
                                                                   /* Relocate .data section (Copy from ROM to RAM) */
                                                                   LDR     R1, =_etext
     210:	e59f1090 	ldr	r1, [pc, #144]	; 2a8 <__exit_THUMB+0x14>
                                                                           LDR     R2, =_data
     214:	e59f2090 	ldr	r2, [pc, #144]	; 2ac <__exit_THUMB+0x18>
                                                                                   LDR     R3, =_edata
     218:	e59f3090 	ldr	r3, [pc, #144]	; 2b0 <__exit_THUMB+0x1c>
                                                                                           CMP     R2, R3
     21c:	e1520003 	cmp	r2, r3
                                                                                           BEQ     DataIsEmpty
     220:	0a000003 	beq	234 <DataIsEmpty>

00000224 <LoopRel>:
                                                                                       LoopRel:        CMP     R2, R3
     224:	e1520003 	cmp	r2, r3
                                                                                           LDRLO   R0, [R1], #4
     228:	34910004 	ldrcc	r0, [r1], #4
                                                                                           STRLO   R0, [R2], #4
     22c:	34820004 	strcc	r0, [r2], #4
                                                                                           BLO     LoopRel
     230:	3afffffb 	bcc	224 <LoopRel>

00000234 <DataIsEmpty>:
                                                                                       DataIsEmpty:
                                                                                           .endif

                                                                                           /* Clear .bss section (Zero init) */
                                                                                           MOV     R0, #0
     234:	e3a00000 	mov	r0, #0
                                                                                           LDR     R1, =__bss_start__
     238:	e59f1074 	ldr	r1, [pc, #116]	; 2b4 <__exit_THUMB+0x20>
                                                                                                   LDR     R2, =__bss_end__
     23c:	e59f2074 	ldr	r2, [pc, #116]	; 2b8 <__exit_THUMB+0x24>
                                                                                                           CMP     R1,R2
     240:	e1510002 	cmp	r1, r2
                                                                                                           BEQ     BSSIsEmpty
     244:	0a000002 	beq	254 <BSSIsEmpty>

00000248 <LoopZI>:
                                                                                                       LoopZI:         CMP     R1, R2
     248:	e1510002 	cmp	r1, r2
                                                                                                           STRLO   R0, [R1], #4
     24c:	34810004 	strcc	r0, [r1], #4
                                                                                                           BLO     LoopZI
     250:	3afffffc 	bcc	248 <LoopZI>

00000254 <BSSIsEmpty>:
                                                                                                       BSSIsEmpty:


// call C++ constructors of global objects
                                                                                                           LDR 	r0, =__ctors_start__
     254:	e59f0060 	ldr	r0, [pc, #96]	; 2bc <__exit_THUMB+0x28>
                                                                                                                   LDR 	r1, =__ctors_end__
     258:	e59f1060 	ldr	r1, [pc, #96]	; 2c0 <__exit_THUMB+0x2c>

0000025c <ctor_loop>:
                                                                                                                       ctor_loop:
                                                                                                                           CMP 	r0, r1
     25c:	e1500001 	cmp	r0, r1
                                                                                                                           BEQ 	ctor_end
     260:	0a000005 	beq	27c <ctor_end>
                                                                                                                           LDR 	r2, [r0], #4
     264:	e4902004 	ldr	r2, [r0], #4
                                                                                                                           STMFD 	sp!, {r0-r1}
     268:	e92d0003 	push	{r0, r1}
                                                                                                                           MOV 	lr, pc
     26c:	e1a0e00f 	mov	lr, pc
                                                                                                                           MOV 	pc, r2
     270:	e1a0f002 	mov	pc, r2
                                                                                                                           LDMFD 	sp!, {r0-r1}
     274:	e8bd0003 	pop	{r0, r1}
                                                                                                                           B 		ctor_loop
     278:	eafffff7 	b	25c <ctor_loop>

0000027c <ctor_end>:
                                                                                                                       ctor_end:

// Enter the C code
                                                                                                                           //LDR     R0,=INIT
                                                                                                                           LDR     R0,=main
     27c:	e59f0040 	ldr	r0, [pc, #64]	; 2c4 <__exit_THUMB+0x30>
                                                                                                                                   TST     R0,#1             // Bit-0 set: main is Thumb
     280:	e3100001 	tst	r0, #1
                                                                                                                                   LDREQ   LR,=__exit_ARM    // ARM Mode
     284:	059fe03c 	ldreq	lr, [pc, #60]	; 2c8 <__exit_THUMB+0x34>
                                                                                                                                           LDRNE   LR,=__exit_THUMB  // Thumb Mode
     288:	159fe03c 	ldrne	lr, [pc, #60]	; 2cc <__exit_THUMB+0x38>
                                                                                                                                                   BX      R0
     28c:	e12fff10 	bx	r0

00000290 <__exit_ARM>:

                                                                                                                                                   .arm
                                                                                                                                                   .global __exit_ARM
                                                                                                                                                   .func __exit_ARM
                                                                                                                                               __exit_ARM:
                                                                                                                                                   B       __exit_ARM
     290:	eafffffe 	b	290 <__exit_ARM>

00000294 <__exit_THUMB>:

                                                                                                                                                   .thumb
                                                                                                                                                   .global __exit_THUMB
                                                                                                                                                   .func __exit_THUMB
                                                                                                                                               __exit_THUMB:
                                                                                                                                                   B       __exit_THUMB
     294:	e7fe      	b.n	294 <__exit_THUMB>
     296:	0000      	.short	0x0000
__startup:

Reset_Handler:

    .if (VPBDIV_SETUP)
    LDR     R0, =VPBDIV
     298:	e01fc100 	.word	0xe01fc100
                              STR     R1, [R0]
                              .endif


                              .if (PLL_SETUP)
                              LDR     R0, =PLL_BASE
     29c:	e01fc080 	.word	0xe01fc080
                                           STR     R2, [R0, #PLLFEED_OFS]
                                           .endif


                                           .if (MAM_SETUP)
                                           LDR     R0, =MAM_BASE
     2a0:	e01fc000 	.word	0xe01fc000
                                                           .endif
                                                           STR     R1, [R0]
                                                           .endif

// Setup Stack for each mode
                                                           LDR     R0, =Top_Stack
     2a4:	40003980 	.word	0x40003980
                                                                   MOV     SP, R0


                                                                   .if (RAM_MODE==0)
                                                                   /* Relocate .data section (Copy from ROM to RAM) */
                                                                   LDR     R1, =_etext
     2a8:	0000dd28 	.word	0x0000dd28
                                                                           LDR     R2, =_data
     2ac:	40000000 	.word	0x40000000
                                                                                   LDR     R3, =_edata
     2b0:	4000096c 	.word	0x4000096c
                                                                                       DataIsEmpty:
                                                                                           .endif

                                                                                           /* Clear .bss section (Zero init) */
                                                                                           MOV     R0, #0
                                                                                           LDR     R1, =__bss_start__
     2b4:	4000096c 	.word	0x4000096c
                                                                                                   LDR     R2, =__bss_end__
     2b8:	40001f1c 	.word	0x40001f1c
                                                                                                           BLO     LoopZI
                                                                                                       BSSIsEmpty:


// call C++ constructors of global objects
                                                                                                           LDR 	r0, =__ctors_start__
     2bc:	0000dd28 	.word	0x0000dd28
                                                                                                                   LDR 	r1, =__ctors_end__
     2c0:	0000dd28 	.word	0x0000dd28
                                                                                                                           B 		ctor_loop
                                                                                                                       ctor_end:

// Enter the C code
                                                                                                                           //LDR     R0,=INIT
                                                                                                                           LDR     R0,=main
     2c4:	000026d8 	.word	0x000026d8
                                                                                                                                   TST     R0,#1             // Bit-0 set: main is Thumb
                                                                                                                                   LDREQ   LR,=__exit_ARM    // ARM Mode
     2c8:	00000290 	.word	0x00000290
                                                                                                                                           LDRNE   LR,=__exit_THUMB  // Thumb Mode
     2cc:	00000294 	.word	0x00000294

000002d0 <IntRestore>:
.text
.section .text, "ax"
.global IntRestore
.func   IntRestore
IntRestore:
SWI     SWI_IRQ_REST
     2d0:	ef000005 	svc	0x00000005
BX      lr
     2d4:	e12fff1e 	bx	lr

000002d8 <FiqRestore>:
.text
.section .text, "ax"
.global FiqRestore
.func   FiqRestore
FiqRestore:
SWI     SWI_FIQ_REST
     2d8:	ef000006 	svc	0x00000006
BX      lr
     2dc:	e12fff1e 	bx	lr

000002e0 <IntGetCPSR>:
.text
.section .text, "ax"
.global IntGetCPSR
.func   IntGetCPSR
IntGetCPSR:
SWI     SWI_GET_CPSR
     2e0:	ef000004 	svc	0x00000004
BX      lr
     2e4:	e12fff1e 	bx	lr

000002e8 <IntEnable>:
.text
.section .text, "ax"
.global IntEnable
.func   IntEnable
IntEnable:
SWI     SWI_IRQ_EN
     2e8:	ef000001 	svc	0x00000001
BX      lr
     2ec:	e12fff1e 	bx	lr

000002f0 <IntDisable>:
.arm
.global IntDisable
.section .text, "ax"
.func   IntDisable
IntDisable:
SWI     SWI_IRQ_DIS
     2f0:	ef000000 	svc	0x00000000
BX      lr
     2f4:	e12fff1e 	bx	lr

000002f8 <FiqEnable>:
.text
.section .text, "ax"
.global FiqEnable
.func   FiqEnable
FiqEnable:
SWI     SWI_FIQ_EN
     2f8:	ef000003 	svc	0x00000003
BX      lr
     2fc:	e12fff1e 	bx	lr

00000300 <FiqDisable>:
.arm
.global FiqDisable
.section .text, "ax"
.func   FiqDisable
FiqDisable:
SWI     SWI_FIQ_DIS
     300:	ef000002 	svc	0x00000002
BX      lr
     304:	e12fff1e 	bx	lr

00000308 <LL_write_ctrl_data>:
	SPIWRData[0] = '>';
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;

	if (!page) {
     308:	e31000ff 	tst	r0, #255	; 0xff
		pageselect = 0;
	}
	return (1);
}

void LL_write_ctrl_data(char page) {
     30c:	e92d4030 	push	{r4, r5, lr}

	//initialize syncbytes
	SPIWRData[0] = '>';
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;
     310:	e59fc0f8 	ldr	ip, [pc, #248]	; 410 <PLLSTAT_PLOCK+0x10>
	static volatile short spi_chksum;

	dataptr = (unsigned char *) &LL_1khz_control_input;

	//initialize syncbytes
	SPIWRData[0] = '>';
     314:	e59f50f8 	ldr	r5, [pc, #248]	; 414 <PLLSTAT_PLOCK+0x14>
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;
     318:	e3e03c55 	mvn	r3, #21760	; 0x5500

	if (!page) {
		for (i = 2; i < 40; i++) {
     31c:	159f00f4 	ldrne	r0, [pc, #244]	; 418 <PLLSTAT_PLOCK+0x18>

	dataptr = (unsigned char *) &LL_1khz_control_input;

	//initialize syncbytes
	SPIWRData[0] = '>';
	SPIWRData[1] = '*';
     320:	e3a0102a 	mov	r1, #42	; 0x2a

	spi_chksum = 0xAAAA;
     324:	e2433055 	sub	r3, r3, #85	; 0x55
	static volatile short spi_chksum;

	dataptr = (unsigned char *) &LL_1khz_control_input;

	//initialize syncbytes
	SPIWRData[0] = '>';
     328:	e3a0203e 	mov	r2, #62	; 0x3e
	SPIWRData[1] = '*';
     32c:	e5c51001 	strb	r1, [r5, #1]
	static volatile short spi_chksum;

	dataptr = (unsigned char *) &LL_1khz_control_input;

	//initialize syncbytes
	SPIWRData[0] = '>';
     330:	e5c52000 	strb	r2, [r5]
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;
     334:	e1cc30b0 	strh	r3, [ip]

	if (!page) {
		for (i = 2; i < 40; i++) {
     338:	11a01005 	movne	r1, r5
     33c:	1280e014 	addne	lr, r0, #20
	SPIWRData[0] = '>';
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;

	if (!page) {
     340:	1a000019 	bne	3ac <LL_write_ctrl_data+0xa4>
     344:	e59f00cc 	ldr	r0, [pc, #204]	; 418 <PLLSTAT_PLOCK+0x18>
     348:	e1a01005 	mov	r1, r5
     34c:	e280e026 	add	lr, r0, #38	; 0x26
		for (i = 2; i < 40; i++) {
			SPIWRData[i] = *dataptr++;
     350:	e4d02001 	ldrb	r2, [r0], #1
			spi_chksum += SPIWRData[i];
     354:	e1dc30b0 	ldrh	r3, [ip]
     358:	e0833002 	add	r3, r3, r2
     35c:	e1a03803 	lsl	r3, r3, #16
     360:	e1a03823 	lsr	r3, r3, #16
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;

	if (!page) {
		for (i = 2; i < 40; i++) {
     364:	e15e0000 	cmp	lr, r0
			SPIWRData[i] = *dataptr++;
     368:	e5c12002 	strb	r2, [r1, #2]
			spi_chksum += SPIWRData[i];
     36c:	e1cc30b0 	strh	r3, [ip]
     370:	e2811001 	add	r1, r1, #1
	SPIWRData[1] = '*';

	spi_chksum = 0xAAAA;

	if (!page) {
		for (i = 2; i < 40; i++) {
     374:	1afffff5 	bne	350 <LL_write_ctrl_data+0x48>
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
	}

	SPIWRData[40] = spi_chksum; //chksum LSB
     378:	e1dc00b0 	ldrh	r0, [ip]
	SPIWRData[41] = (spi_chksum >> 8); //chksum MSB
     37c:	e1dc30b0 	ldrh	r3, [ip]
     380:	e1a03423 	lsr	r3, r3, #8
     384:	e5c53029 	strb	r3, [r5, #41]	; 0x29

	SPIWR_num_bytes = 42;
     388:	e59f308c 	ldr	r3, [pc, #140]	; 41c <PLLSTAT_PLOCK+0x1c>
     38c:	e3a0202a 	mov	r2, #42	; 0x2a
     390:	e5832000 	str	r2, [r3]
	data_sent_to_LL = 0;
     394:	e59f3084 	ldr	r3, [pc, #132]	; 420 <PLLSTAT_PLOCK+0x20>
     398:	e3a01000 	mov	r1, #0
     39c:	e5c31000 	strb	r1, [r3]
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
	}

	SPIWRData[40] = spi_chksum; //chksum LSB
     3a0:	e5c50028 	strb	r0, [r5, #40]	; 0x28
	SPIWRData[41] = (spi_chksum >> 8); //chksum MSB

	SPIWR_num_bytes = 42;
	data_sent_to_LL = 0;
}
     3a4:	e8bd4030 	pop	{r4, r5, lr}
     3a8:	e12fff1e 	bx	lr
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
	} else {
		for (i = 2; i < 22; i++) {
			SPIWRData[i] = *dataptr++;
     3ac:	e4d02001 	ldrb	r2, [r0], #1
			spi_chksum += SPIWRData[i];
     3b0:	e1dc30b0 	ldrh	r3, [ip]
     3b4:	e0833002 	add	r3, r3, r2
     3b8:	e1a03803 	lsl	r3, r3, #16
     3bc:	e1a03823 	lsr	r3, r3, #16
		for (i = 2; i < 40; i++) {
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
	} else {
		for (i = 2; i < 22; i++) {
     3c0:	e150000e 	cmp	r0, lr
			SPIWRData[i] = *dataptr++;
     3c4:	e5c12002 	strb	r2, [r1, #2]
			spi_chksum += SPIWRData[i];
     3c8:	e1cc30b0 	strh	r3, [ip]
     3cc:	e2811001 	add	r1, r1, #1
		for (i = 2; i < 40; i++) {
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
	} else {
		for (i = 2; i < 22; i++) {
     3d0:	1afffff5 	bne	3ac <LL_write_ctrl_data+0xa4>
     3d4:	e59fe038 	ldr	lr, [pc, #56]	; 414 <PLLSTAT_PLOCK+0x14>
     3d8:	e2804025 	add	r4, r0, #37	; 0x25
     3dc:	e2801013 	add	r1, r0, #19
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
		dataptr += 18;
		for (i = 22; i < 40; i++) {
			SPIWRData[i] = *dataptr++;
     3e0:	e5512001 	ldrb	r2, [r1, #-1]
			spi_chksum += SPIWRData[i];
     3e4:	e1dc30b0 	ldrh	r3, [ip]
     3e8:	e0833002 	add	r3, r3, r2
     3ec:	e1a03803 	lsl	r3, r3, #16
     3f0:	e2811001 	add	r1, r1, #1
     3f4:	e1a03823 	lsr	r3, r3, #16
		for (i = 2; i < 22; i++) {
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
		dataptr += 18;
		for (i = 22; i < 40; i++) {
     3f8:	e1510004 	cmp	r1, r4
			SPIWRData[i] = *dataptr++;
     3fc:	e5ce2016 	strb	r2, [lr, #22]
			spi_chksum += SPIWRData[i];
     400:	e1cc30b0 	strh	r3, [ip]
     404:	e28ee001 	add	lr, lr, #1
		for (i = 2; i < 22; i++) {
			SPIWRData[i] = *dataptr++;
			spi_chksum += SPIWRData[i];
		}
		dataptr += 18;
		for (i = 22; i < 40; i++) {
     408:	1afffff4 	bne	3e0 <LL_write_ctrl_data+0xd8>
     40c:	eaffffd9 	b	378 <LL_write_ctrl_data+0x70>
     410:	4000097e 	.word	0x4000097e
     414:	40001c9c 	.word	0x40001c9c
     418:	4000176c 	.word	0x4000176c
     41c:	40001c94 	.word	0x40001c94
     420:	40000016 	.word	0x40000016

00000424 <HL2LL_write_cycle>:
		}
	}
}

int HL2LL_write_cycle(void) //write data to low-level processor
{
     424:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned char i;
	static unsigned char jetiValuePartialSyncPending = 0;
	static unsigned char * transmitPtr;
	static unsigned short transmitCnt = 0;

	if (!data_sent_to_LL)
     428:	e59f38c4 	ldr	r3, [pc, #2244]	; cf4 <IRQ_Stack_Size+0x4f4>
     42c:	e5d30000 	ldrb	r0, [r3]
     430:	e3500000 	cmp	r0, #0
		}
	}
}

int HL2LL_write_cycle(void) //write data to low-level processor
{
     434:	e24dd010 	sub	sp, sp, #16
	unsigned char i;
	static unsigned char jetiValuePartialSyncPending = 0;
	static unsigned char * transmitPtr;
	static unsigned short transmitCnt = 0;

	if (!data_sent_to_LL)
     438:	0a00005c 	beq	5b0 <HL2LL_write_cycle+0x18c>

	//update 1kHz data
	LL_1khz_control_input.system_flags = 0 | pageselect;
	//SSP_ack=0;	//reset ack

	if (gpsDataOkTrigger)
     43c:	e59f38b4 	ldr	r3, [pc, #2228]	; cf8 <IRQ_Stack_Size+0x4f8>

	if (!data_sent_to_LL)
		return (0);

	//update 1kHz data
	LL_1khz_control_input.system_flags = 0 | pageselect;
     440:	e59f88b4 	ldr	r8, [pc, #2228]	; cfc <IRQ_Stack_Size+0x4fc>
	//SSP_ack=0;	//reset ack

	if (gpsDataOkTrigger)
     444:	e5932000 	ldr	r2, [r3]

	if (!data_sent_to_LL)
		return (0);

	//update 1kHz data
	LL_1khz_control_input.system_flags = 0 | pageselect;
     448:	e5d89000 	ldrb	r9, [r8]
     44c:	e59fb8ac 	ldr	fp, [pc, #2220]	; d00 <IRQ_Stack_Size+0x500>
	//SSP_ack=0;	//reset ack

	if (gpsDataOkTrigger)
     450:	e3520000 	cmp	r2, #0
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;

	if (WO_SDK.ctrl_enabled)
     454:	e59f28a8 	ldr	r2, [pc, #2216]	; d04 <IRQ_Stack_Size+0x504>
	//update 1kHz data
	LL_1khz_control_input.system_flags = 0 | pageselect;
	//SSP_ack=0;	//reset ack

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;
     458:	13893008 	orrne	r3, r9, #8

	if (!data_sent_to_LL)
		return (0);

	//update 1kHz data
	LL_1khz_control_input.system_flags = 0 | pageselect;
     45c:	e1cb90b0 	strh	r9, [fp]
	//SSP_ack=0;	//reset ack

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;
     460:	11cb30b0 	strhne	r3, [fp]

	if (WO_SDK.ctrl_enabled)
     464:	e5d23001 	ldrb	r3, [r2, #1]
     468:	e3530000 	cmp	r3, #0
		LL_1khz_control_input.system_flags |= SF_HL_CONTROL_ENABLED
     46c:	11db30b0 	ldrhne	r3, [fp]
				| SF_NEW_SDK;
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
     470:	01db30b0 	ldrheq	r3, [fp]

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;

	if (WO_SDK.ctrl_enabled)
		LL_1khz_control_input.system_flags |= SF_HL_CONTROL_ENABLED
     474:	13833143 	orrne	r3, r3, #-1073741808	; 0xc0000010
				| SF_NEW_SDK;
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
     478:	03c33010 	biceq	r3, r3, #16

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;

	if (WO_SDK.ctrl_enabled)
		LL_1khz_control_input.system_flags |= SF_HL_CONTROL_ENABLED
     47c:	138335ff 	orrne	r3, r3, #1069547520	; 0x3fc00000
				| SF_NEW_SDK;
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
     480:	01a03883 	lsleq	r3, r3, #17

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;

	if (WO_SDK.ctrl_enabled)
		LL_1khz_control_input.system_flags |= SF_HL_CONTROL_ENABLED
     484:	138339fe 	orrne	r3, r3, #4161536	; 0x3f8000
				| SF_NEW_SDK;
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
     488:	01a038a3 	lsreq	r3, r3, #17

	if (gpsDataOkTrigger)
		LL_1khz_control_input.system_flags |= SF_GPS_NEW;

	if (WO_SDK.ctrl_enabled)
		LL_1khz_control_input.system_flags |= SF_HL_CONTROL_ENABLED
     48c:	11cb30b0 	strhne	r3, [fp]
				| SF_NEW_SDK;
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
     490:	01cb30b0 	strheq	r3, [fp]
				| SF_NEW_SDK);

	if (WO_SDK.disable_motor_onoff_by_stick)
     494:	e5d23002 	ldrb	r3, [r2, #2]
     498:	e3530000 	cmp	r3, #0
		LL_1khz_control_input.system_flags
     49c:	11db30b0 	ldrhne	r3, [fp]
				|= SF_SDK_DISABLE_MOTORONOFF_BY_STICK;
	else
		LL_1khz_control_input.system_flags
     4a0:	01db30b0 	ldrheq	r3, [fp]
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
				| SF_NEW_SDK);

	if (WO_SDK.disable_motor_onoff_by_stick)
		LL_1khz_control_input.system_flags
     4a4:	13833c01 	orrne	r3, r3, #256	; 0x100
				|= SF_SDK_DISABLE_MOTORONOFF_BY_STICK;
	else
		LL_1khz_control_input.system_flags
     4a8:	03c33c01 	biceq	r3, r3, #256	; 0x100
	else
		LL_1khz_control_input.system_flags &= ~(SF_HL_CONTROL_ENABLED
				| SF_NEW_SDK);

	if (WO_SDK.disable_motor_onoff_by_stick)
		LL_1khz_control_input.system_flags
     4ac:	11cb30b0 	strhne	r3, [fp]
				|= SF_SDK_DISABLE_MOTORONOFF_BY_STICK;
	else
		LL_1khz_control_input.system_flags
     4b0:	01cb30b0 	strheq	r3, [fp]
				&= ~SF_SDK_DISABLE_MOTORONOFF_BY_STICK;

	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
     4b4:	e5d23000 	ldrb	r3, [r2]
     4b8:	e3530000 	cmp	r3, #0
     4bc:	0a00003e 	beq	5bc <HL2LL_write_cycle+0x198>
		for (i = 0; i < 8; i++) {
			LL_1khz_control_input.direct_motor_control[i]
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
		}
	} else if (WO_SDK.ctrl_mode == 0x01) //direct motor control with standard output mapping
     4c0:	e3530001 	cmp	r3, #1
     4c4:	0a00008e 	beq	704 <HL2LL_write_cycle+0x2e0>
				= WO_Direct_Motor_Control.roll;
		LL_1khz_control_input.direct_motor_control[2]
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
     4c8:	e3530002 	cmp	r3, #2
     4cc:	0a000075 	beq	6a8 <HL2LL_write_cycle+0x284>
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
	} else if (WO_SDK.ctrl_mode == 0x03) //gps waypoint control
     4d0:	e3530003 	cmp	r3, #3
     4d4:	0a00013b 	beq	9c8 <IRQ_Stack_Size+0x1c8>
			}
		} else {
			LL_1khz_control_input.ctrl_flags &= 0x00FF;
		}
	} else
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
     4d8:	e1db30b0 	ldrh	r3, [fp]
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE);

	if (pageselect == 0) {
     4dc:	e3590000 	cmp	r9, #0
			}
		} else {
			LL_1khz_control_input.ctrl_flags &= 0x00FF;
		}
	} else
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
     4e0:	e3c330e0 	bic	r3, r3, #224	; 0xe0
     4e4:	e1cb30b0 	strh	r3, [fp]
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE);

	if (pageselect == 0) {
     4e8:	0a000044 	beq	600 <HL2LL_write_cycle+0x1dc>
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
		if (declinationAvailable == 1) {
     4ec:	e59f1814 	ldr	r1, [pc, #2068]	; d08 <IRQ_Stack_Size+0x508>
     4f0:	e5d13000 	ldrb	r3, [r1]
     4f4:	e20300ff 	and	r0, r3, #255	; 0xff
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
     4f8:	e59f380c 	ldr	r3, [pc, #2060]	; d0c <IRQ_Stack_Size+0x50c>
		//set pageselect to other page for next cycle
		pageselect = 1;
	} else //pageselect=1
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
     4fc:	e59f280c 	ldr	r2, [pc, #2060]	; d10 <IRQ_Stack_Size+0x510>
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
     500:	e1d3c0b2 	ldrh	ip, [r3, #2]
     504:	e1cbc3b2 	strh	ip, [fp, #50]	; 0x32
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
     508:	e1d2c2b4 	ldrh	ip, [r2, #36]	; 0x24
     50c:	e1cbc2bc 	strh	ip, [fp, #44]	; 0x2c
		//set pageselect to other page for next cycle
		pageselect = 1;
	} else //pageselect=1
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
     510:	e1d2c1b8 	ldrh	ip, [r2, #24]
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
     514:	e1d330b0 	ldrh	r3, [r3]
		//set pageselect to other page for next cycle
		pageselect = 1;
	} else //pageselect=1
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
     518:	e1cbc2b6 	strh	ip, [fp, #38]	; 0x26
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
     51c:	e1d2c1bc 	ldrh	ip, [r2, #28]
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
     520:	e1d222b0 	ldrh	r2, [r2, #32]
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
		if (declinationAvailable == 1) {
     524:	e3500001 	cmp	r0, #1
		pageselect = 1;
	} else //pageselect=1
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
     528:	e1cbc2b8 	strh	ip, [fp, #40]	; 0x28
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
     52c:	e1cb22ba 	strh	r2, [fp, #42]	; 0x2a
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
     530:	e1cb33b0 	strh	r3, [fp, #48]	; 0x30
		//set pageselect to other page for next cycle
		pageselect = 1;
	} else //pageselect=1
	{
		//fill struct with 500Hz data
		LL_1khz_control_input.hor_accuracy = GPS_Data.horizontal_accuracy;
     534:	e59fe7c4 	ldr	lr, [pc, #1988]	; d00 <IRQ_Stack_Size+0x500>
		LL_1khz_control_input.vert_accuracy = GPS_Data.vertical_accuracy;
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
		if (declinationAvailable == 1) {
     538:	0a00007e 	beq	738 <HL2LL_write_cycle+0x314>
			declinationAvailable = 2;
			LL_1khz_control_input.slowDataChannelSelect = SDC_DECLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedDeclination;

		} else if (declinationAvailable == 2) {
     53c:	e5d13000 	ldrb	r3, [r1]
     540:	e3530002 	cmp	r3, #2
     544:	0a000066 	beq	6e4 <HL2LL_write_cycle+0x2c0>
			declinationAvailable = 3;
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedInclination;

		} else if (transmitBuildInfoTrigger == 1) {
     548:	e59f47c4 	ldr	r4, [pc, #1988]	; d14 <IRQ_Stack_Size+0x514>
     54c:	e5d43000 	ldrb	r3, [r4]
     550:	e20300ff 	and	r0, r3, #255	; 0xff
     554:	e3500001 	cmp	r0, #1
     558:	0a00012f 	beq	a1c <IRQ_Stack_Size+0x21c>
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
     55c:	e5d43000 	ldrb	r3, [r4]
     560:	e3530002 	cmp	r3, #2
     564:	0a00013a 	beq	a54 <IRQ_Stack_Size+0x254>
			transmitPtr++;
			transmitCnt++;

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
		} else if (emergencyModeUpdate) {
     568:	e59f17a8 	ldr	r1, [pc, #1960]	; d18 <IRQ_Stack_Size+0x518>
     56c:	e5d13000 	ldrb	r3, [r1]
     570:	e3530000 	cmp	r3, #0
			LL_1khz_control_input.slowDataChannelSelect = SDC_EM_MODE;
			LL_1khz_control_input.slowDataChannelDataShort = emergencyMode;
     574:	159f37a0 	ldrne	r3, [pc, #1952]	; d1c <IRQ_Stack_Size+0x51c>
     578:	15d32000 	ldrbne	r2, [r3]
			//verify mode
			emergencyModeUpdate = 2;
     57c:	13a03002 	movne	r3, #2

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
		} else if (emergencyModeUpdate) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_EM_MODE;
			LL_1khz_control_input.slowDataChannelDataShort = emergencyMode;
     580:	11ce23b6 	strhne	r2, [lr, #54]	; 0x36
			transmitCnt++;

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
		} else if (emergencyModeUpdate) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_EM_MODE;
     584:	13a02018 	movne	r2, #24
			LL_1khz_control_input.slowDataChannelDataShort = emergencyMode;
			//verify mode
			emergencyModeUpdate = 2;
     588:	15c13000 	strbne	r3, [r1]
			transmitCnt++;

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
		} else if (emergencyModeUpdate) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_EM_MODE;
     58c:	15ce2034 	strbne	r2, [lr, #52]	; 0x34
			//verify mode
			emergencyModeUpdate = 2;
		} else {
			LL_1khz_control_input.slowDataChannelDataShort = 0;
			LL_1khz_control_input.slowDataChannelSelect = 0;
			LL_1khz_control_input.slowDataChannelDataChar = 0;
     590:	05ce3035 	strbeq	r3, [lr, #53]	; 0x35
			LL_1khz_control_input.slowDataChannelSelect = SDC_EM_MODE;
			LL_1khz_control_input.slowDataChannelDataShort = emergencyMode;
			//verify mode
			emergencyModeUpdate = 2;
		} else {
			LL_1khz_control_input.slowDataChannelDataShort = 0;
     594:	01ce33b6 	strheq	r3, [lr, #54]	; 0x36
			LL_1khz_control_input.slowDataChannelSelect = 0;
     598:	05ce3034 	strbeq	r3, [lr, #52]	; 0x34
			LL_1khz_control_input.slowDataChannelDataChar = 0;
		}

		//write data
		LL_write_ctrl_data(pageselect);
     59c:	e1a00009 	mov	r0, r9
     5a0:	ebffff58 	bl	308 <LL_write_ctrl_data>
		//set pageselect to other page for next cycle
		pageselect = 0;
     5a4:	e3a03000 	mov	r3, #0
     5a8:	e5c83000 	strb	r3, [r8]
     5ac:	e3a00001 	mov	r0, #1
	}
	return (1);
}
     5b0:	e28dd010 	add	sp, sp, #16
     5b4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5b8:	e12fff1e 	bx	lr
		LL_1khz_control_input.system_flags
				&= ~SF_SDK_DISABLE_MOTORONOFF_BY_STICK;

	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
	{
		LL_1khz_control_input.system_flags
     5bc:	e1db30b0 	ldrh	r3, [fp]
				|= SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL;
		for (i = 0; i < 8; i++) {
			LL_1khz_control_input.direct_motor_control[i]
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
     5c0:	e59f1758 	ldr	r1, [pc, #1880]	; d20 <IRQ_Stack_Size+0x520>
		LL_1khz_control_input.system_flags
				&= ~SF_SDK_DISABLE_MOTORONOFF_BY_STICK;

	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
	{
		LL_1khz_control_input.system_flags
     5c4:	e3833080 	orr	r3, r3, #128	; 0x80
     5c8:	e1cb30b0 	strh	r3, [fp]
				|= SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL;
		for (i = 0; i < 8; i++) {
			LL_1khz_control_input.direct_motor_control[i]
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
     5cc:	e5d12008 	ldrb	r2, [r1, #8]
     5d0:	e59fb728 	ldr	fp, [pc, #1832]	; d00 <IRQ_Stack_Size+0x500>
     5d4:	e1a02402 	lsl	r2, r2, #8
     5d8:	e1a0000b 	mov	r0, fp
     5dc:	e281c008 	add	ip, r1, #8
	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
	{
		LL_1khz_control_input.system_flags
				|= SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL;
		for (i = 0; i < 8; i++) {
			LL_1khz_control_input.direct_motor_control[i]
     5e0:	e4d13001 	ldrb	r3, [r1], #1

	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
	{
		LL_1khz_control_input.system_flags
				|= SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL;
		for (i = 0; i < 8; i++) {
     5e4:	e151000c 	cmp	r1, ip
			LL_1khz_control_input.direct_motor_control[i]
     5e8:	e5c0300c 	strb	r3, [r0, #12]
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
     5ec:	e2800001 	add	r0, r0, #1

	if (WO_SDK.ctrl_mode == 0x00) //direct individual motor control
	{
		LL_1khz_control_input.system_flags
				|= SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL;
		for (i = 0; i < 8; i++) {
     5f0:	1afffffa 	bne	5e0 <HL2LL_write_cycle+0x1bc>
     5f4:	e1cb20b2 	strh	r2, [fp, #2]
		}
	} else
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE);

	if (pageselect == 0) {
     5f8:	e3590000 	cmp	r9, #0
     5fc:	1affffba 	bne	4ec <HL2LL_write_cycle+0xc8>
		if (LL_1khz_control_input.system_flags & SF_GPS_NEW) {
     600:	e1db30b0 	ldrh	r3, [fp]
     604:	e3130008 	tst	r3, #8
     608:	e59f56f0 	ldr	r5, [pc, #1776]	; d00 <IRQ_Stack_Size+0x500>
     60c:	1a000010 	bne	654 <HL2LL_write_cycle+0x230>

				//default is no command
				LL_1khz_control_input.status = 0;

				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
     610:	e59f670c 	ldr	r6, [pc, #1804]	; d24 <IRQ_Stack_Size+0x524>
     614:	e5d63000 	ldrb	r3, [r6]
     618:	e3530001 	cmp	r3, #1
			LL_1khz_control_input.speed_y = GPS_Data.speed_y;
			LL_1khz_control_input.heading = GPS_Data.heading;
			LL_1khz_control_input.status = GPS_Data.status;
		} else {
			//default is no command
			LL_1khz_control_input.status = 0;
     61c:	e1c592b4 	strh	r9, [r5, #36]	; 0x24
     620:	e1a07009 	mov	r7, r9

				//default is no command
				LL_1khz_control_input.status = 0;

				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
     624:	0a00011c 	beq	a9c <IRQ_Stack_Size+0x29c>
					jetiSyncState++;
					jetiSensorValCnt = 0;
					jetiSensorValUpdateTimeout = 0;

				} else {
					switch (jetiSyncState) {
     628:	e59fa6f8 	ldr	sl, [pc, #1784]	; d28 <IRQ_Stack_Size+0x528>
     62c:	e5da3000 	ldrb	r3, [sl]
     630:	e3530005 	cmp	r3, #5
     634:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
     638:	ea000014 	b	690 <HL2LL_write_cycle+0x26c>
     63c:	00000754 	.word	0x00000754
     640:	0000079c 	.word	0x0000079c
     644:	000007c8 	.word	0x000007c8
     648:	00000820 	.word	0x00000820
     64c:	00000874 	.word	0x00000874
     650:	000008c8 	.word	0x000008c8
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE);

	if (pageselect == 0) {
		if (LL_1khz_control_input.system_flags & SF_GPS_NEW) {
			//fill struct with 500Hz data
			LL_1khz_control_input.latitude = GPS_Data.latitude;
     654:	e59f36b4 	ldr	r3, [pc, #1716]	; d10 <IRQ_Stack_Size+0x510>
     658:	e5932000 	ldr	r2, [r3]
			LL_1khz_control_input.longitude = GPS_Data.longitude;
     65c:	e5931004 	ldr	r1, [r3, #4]
			LL_1khz_control_input.height = GPS_Data.height;
     660:	e5930008 	ldr	r0, [r3, #8]
			LL_1khz_control_input.speed_x = GPS_Data.speed_x;
			LL_1khz_control_input.speed_y = GPS_Data.speed_y;
			LL_1khz_control_input.heading = GPS_Data.heading;
			LL_1khz_control_input.status = GPS_Data.status;
     664:	e1d3c2b8 	ldrh	ip, [r3, #40]	; 0x28
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE);

	if (pageselect == 0) {
		if (LL_1khz_control_input.system_flags & SF_GPS_NEW) {
			//fill struct with 500Hz data
			LL_1khz_control_input.latitude = GPS_Data.latitude;
     668:	e5852014 	str	r2, [r5, #20]
			LL_1khz_control_input.longitude = GPS_Data.longitude;
     66c:	e5851018 	str	r1, [r5, #24]
			LL_1khz_control_input.height = GPS_Data.height;
			LL_1khz_control_input.speed_x = GPS_Data.speed_x;
			LL_1khz_control_input.speed_y = GPS_Data.speed_y;
     670:	e1d321b0 	ldrh	r2, [r3, #16]
		if (LL_1khz_control_input.system_flags & SF_GPS_NEW) {
			//fill struct with 500Hz data
			LL_1khz_control_input.latitude = GPS_Data.latitude;
			LL_1khz_control_input.longitude = GPS_Data.longitude;
			LL_1khz_control_input.height = GPS_Data.height;
			LL_1khz_control_input.speed_x = GPS_Data.speed_x;
     674:	e1d310bc 	ldrh	r1, [r3, #12]
			LL_1khz_control_input.speed_y = GPS_Data.speed_y;
			LL_1khz_control_input.heading = GPS_Data.heading;
     678:	e1d331b4 	ldrh	r3, [r3, #20]
			LL_1khz_control_input.status = GPS_Data.status;
     67c:	e1c5c2b4 	strh	ip, [r5, #36]	; 0x24
	if (pageselect == 0) {
		if (LL_1khz_control_input.system_flags & SF_GPS_NEW) {
			//fill struct with 500Hz data
			LL_1khz_control_input.latitude = GPS_Data.latitude;
			LL_1khz_control_input.longitude = GPS_Data.longitude;
			LL_1khz_control_input.height = GPS_Data.height;
     680:	e585001c 	str	r0, [r5, #28]
			LL_1khz_control_input.speed_x = GPS_Data.speed_x;
     684:	e1c512b0 	strh	r1, [r5, #32]
			LL_1khz_control_input.speed_y = GPS_Data.speed_y;
     688:	e1c522b2 	strh	r2, [r5, #34]	; 0x22
			LL_1khz_control_input.heading = GPS_Data.heading;
     68c:	e1c532be 	strh	r3, [r5, #46]	; 0x2e
				}
			}
		}

		//write data
		LL_write_ctrl_data(pageselect);
     690:	e5d80000 	ldrb	r0, [r8]
     694:	ebffff1b 	bl	308 <LL_write_ctrl_data>
		//set pageselect to other page for next cycle
		pageselect = 1;
     698:	e3a03001 	mov	r3, #1
     69c:	e1a00003 	mov	r0, r3
     6a0:	e5c83000 	strb	r3, [r8]
     6a4:	eaffffc1 	b	5b0 <HL2LL_write_cycle+0x18c>
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
     6a8:	e59f267c 	ldr	r2, [pc, #1660]	; d2c <IRQ_Stack_Size+0x52c>
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
     6ac:	e1db30b0 	ldrh	r3, [fp]
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
     6b0:	e1d210b6 	ldrh	r1, [r2, #6]
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
     6b4:	e3c330e0 	bic	r3, r3, #224	; 0xe0
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
     6b8:	e1d2c0b0 	ldrh	ip, [r2]
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
     6bc:	e1cb30b0 	strh	r3, [fp]
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
     6c0:	e1cb10ba 	strh	r1, [fp, #10]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
     6c4:	e1d230b8 	ldrh	r3, [r2, #8]
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
     6c8:	e1d210b2 	ldrh	r1, [r2, #2]
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
     6cc:	e1d220b4 	ldrh	r2, [r2, #4]
				= WO_Direct_Motor_Control.thrust;
	} else if (WO_SDK.ctrl_mode == 0x02) //attitude control
	{
		LL_1khz_control_input.system_flags &= ~(SF_DIRECT_MOTOR_CONTROL
				| SF_DIRECT_MOTOR_CONTROL_INDIVIDUAL | SF_WAYPOINT_MODE); //no additional system flag => attitude control is "standard mode"
		LL_1khz_control_input.ctrl_flags = WO_CTRL_Input.ctrl;
     6d0:	e1cb30b2 	strh	r3, [fp, #2]
		LL_1khz_control_input.pitch = WO_CTRL_Input.pitch;
     6d4:	e1cbc0b4 	strh	ip, [fp, #4]
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
     6d8:	e1cb10b6 	strh	r1, [fp, #6]
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
     6dc:	e1cb20b8 	strh	r2, [fp, #8]
     6e0:	eaffffc4 	b	5f8 <HL2LL_write_cycle+0x1d4>
			LL_1khz_control_input.slowDataChannelSelect = SDC_DECLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedDeclination;

		} else if (declinationAvailable == 2) {
			declinationAvailable = 3;
     6e4:	e2833001 	add	r3, r3, #1
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
     6e8:	e59f2640 	ldr	r2, [pc, #1600]	; d30 <IRQ_Stack_Size+0x530>
			LL_1khz_control_input.slowDataChannelSelect = SDC_DECLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedDeclination;

		} else if (declinationAvailable == 2) {
			declinationAvailable = 3;
     6ec:	e5c13000 	strb	r3, [r1]
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
     6f0:	e5923000 	ldr	r3, [r2]
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedDeclination;

		} else if (declinationAvailable == 2) {
			declinationAvailable = 3;
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
     6f4:	e3a02012 	mov	r2, #18
			LL_1khz_control_input.slowDataChannelDataShort
     6f8:	e1ce33b6 	strh	r3, [lr, #54]	; 0x36
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedDeclination;

		} else if (declinationAvailable == 2) {
			declinationAvailable = 3;
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
     6fc:	e5ce2034 	strb	r2, [lr, #52]	; 0x34
     700:	eaffffa5 	b	59c <HL2LL_write_cycle+0x178>
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
		}
	} else if (WO_SDK.ctrl_mode == 0x01) //direct motor control with standard output mapping
	{
		LL_1khz_control_input.system_flags |= SF_DIRECT_MOTOR_CONTROL;
		LL_1khz_control_input.direct_motor_control[0]
     704:	e59f3628 	ldr	r3, [pc, #1576]	; d34 <IRQ_Stack_Size+0x534>
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
		}
	} else if (WO_SDK.ctrl_mode == 0x01) //direct motor control with standard output mapping
	{
		LL_1khz_control_input.system_flags |= SF_DIRECT_MOTOR_CONTROL;
     708:	e1db20b0 	ldrh	r2, [fp]
				= WO_Direct_Motor_Control.pitch;
		LL_1khz_control_input.direct_motor_control[1]
				= WO_Direct_Motor_Control.roll;
		LL_1khz_control_input.direct_motor_control[2]
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
     70c:	e5d3e003 	ldrb	lr, [r3, #3]
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
		}
	} else if (WO_SDK.ctrl_mode == 0x01) //direct motor control with standard output mapping
	{
		LL_1khz_control_input.system_flags |= SF_DIRECT_MOTOR_CONTROL;
		LL_1khz_control_input.direct_motor_control[0]
     710:	e5d31000 	ldrb	r1, [r3]
				= WO_Direct_Motor_Control.pitch;
		LL_1khz_control_input.direct_motor_control[1]
     714:	e5d30001 	ldrb	r0, [r3, #1]
				= WO_Direct_Motor_Control.roll;
		LL_1khz_control_input.direct_motor_control[2]
     718:	e5d3c002 	ldrb	ip, [r3, #2]
					= WO_Direct_Individual_Motor_Control.motor[i];
		LL_1khz_control_input.ctrl_flags=WO_Direct_Individual_Motor_Control.motorReverseMask<<8;
		}
	} else if (WO_SDK.ctrl_mode == 0x01) //direct motor control with standard output mapping
	{
		LL_1khz_control_input.system_flags |= SF_DIRECT_MOTOR_CONTROL;
     71c:	e3822020 	orr	r2, r2, #32
     720:	e1cb20b0 	strh	r2, [fp]
		LL_1khz_control_input.direct_motor_control[0]
     724:	e5cb100c 	strb	r1, [fp, #12]
				= WO_Direct_Motor_Control.pitch;
		LL_1khz_control_input.direct_motor_control[1]
     728:	e5cb000d 	strb	r0, [fp, #13]
				= WO_Direct_Motor_Control.roll;
		LL_1khz_control_input.direct_motor_control[2]
     72c:	e5cbc00e 	strb	ip, [fp, #14]
				= WO_Direct_Motor_Control.yaw;
		LL_1khz_control_input.direct_motor_control[3]
     730:	e5cbe00f 	strb	lr, [fp, #15]
     734:	eaffffaf 	b	5f8 <HL2LL_write_cycle+0x1d4>
		LL_1khz_control_input.speed_accuracy = GPS_Data.speed_accuracy;
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
		if (declinationAvailable == 1) {
			declinationAvailable = 2;
     738:	e3a03002 	mov	r3, #2
     73c:	e5c13000 	strb	r3, [r1]
			LL_1khz_control_input.slowDataChannelSelect = SDC_DECLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
     740:	e59f25f0 	ldr	r2, [pc, #1520]	; d38 <IRQ_Stack_Size+0x538>
     744:	e5923000 	ldr	r3, [r2]
		LL_1khz_control_input.numSV = GPS_Data.numSV;
		LL_1khz_control_input.battery_voltage_1 = HL_Status.battery_voltage_1;
		LL_1khz_control_input.battery_voltage_2 = HL_Status.battery_voltage_2;
		if (declinationAvailable == 1) {
			declinationAvailable = 2;
			LL_1khz_control_input.slowDataChannelSelect = SDC_DECLINATION;
     748:	e5ce0034 	strb	r0, [lr, #52]	; 0x34
			LL_1khz_control_input.slowDataChannelDataShort
     74c:	e1ce33b6 	strh	r3, [lr, #54]	; 0x36
     750:	eaffff91 	b	59c <HL2LL_write_cycle+0x178>

				} else {
					switch (jetiSyncState) {
					case 0:
						//sync name
						LL_1khz_control_input.status = PD_JETI_SETNAME;
     754:	e3a0c0a0 	mov	ip, #160	; 0xa0
						memcpy(&LL_1khz_control_input.latitude, &jetiName[0], 4);
     758:	e59f15dc 	ldr	r1, [pc, #1500]	; d3c <IRQ_Stack_Size+0x53c>
     75c:	e3a02004 	mov	r2, #4

				} else {
					switch (jetiSyncState) {
					case 0:
						//sync name
						LL_1khz_control_input.status = PD_JETI_SETNAME;
     760:	e1cbc2b4 	strh	ip, [fp, #36]	; 0x24
						memcpy(&LL_1khz_control_input.latitude, &jetiName[0], 4);
     764:	e59f05d4 	ldr	r0, [pc, #1492]	; d40 <IRQ_Stack_Size+0x540>
     768:	eb003496 	bl	d9c8 <__memcpy_from_arm>
						memcpy(&LL_1khz_control_input.longitude, &jetiName[4],
     76c:	e59f15d0 	ldr	r1, [pc, #1488]	; d44 <IRQ_Stack_Size+0x544>
     770:	e3a02004 	mov	r2, #4
     774:	e59f05cc 	ldr	r0, [pc, #1484]	; d48 <IRQ_Stack_Size+0x548>
     778:	eb003492 	bl	d9c8 <__memcpy_from_arm>
								4);
						memcpy(&LL_1khz_control_input.speed_x, &jetiName[8], 2);
     77c:	e59f05c8 	ldr	r0, [pc, #1480]	; d4c <IRQ_Stack_Size+0x54c>
     780:	e59f15c8 	ldr	r1, [pc, #1480]	; d50 <IRQ_Stack_Size+0x550>
								&jetiDisplayText[4], 4);
						memcpy(&LL_1khz_control_input.height,
								&jetiDisplayText[8], 4);
						memcpy(&LL_1khz_control_input.speed_x,
								&jetiDisplayText[12], 2);
						memcpy(&LL_1khz_control_input.speed_y,
     784:	e3a02002 	mov	r2, #2
     788:	eb00348e 	bl	d9c8 <__memcpy_from_arm>
								&jetiDisplayText[14], 2);
						jetiSyncState++;
     78c:	e5da3000 	ldrb	r3, [sl]
     790:	e2833001 	add	r3, r3, #1
     794:	e5ca3000 	strb	r3, [sl]
     798:	eaffffbc 	b	690 <HL2LL_write_cycle+0x26c>
						jetiSyncState++;
						break;
					case 1:
						//sync alarm
						LL_1khz_control_input.status = PD_JETI_SETALARM;
						LL_1khz_control_input.speed_x = jetiAlarm;
     79c:	e59f35b0 	ldr	r3, [pc, #1456]	; d54 <IRQ_Stack_Size+0x554>
						LL_1khz_control_input.speed_y = jetiAlarmType;
     7a0:	e59f25b0 	ldr	r2, [pc, #1456]	; d58 <IRQ_Stack_Size+0x558>
						jetiSyncState++;
						break;
					case 1:
						//sync alarm
						LL_1khz_control_input.status = PD_JETI_SETALARM;
						LL_1khz_control_input.speed_x = jetiAlarm;
     7a4:	e5d31000 	ldrb	r1, [r3]
						LL_1khz_control_input.speed_y = jetiAlarmType;
     7a8:	e5d23000 	ldrb	r3, [r2]
						jetiSyncState++;
						break;
					case 1:
						//sync alarm
						LL_1khz_control_input.status = PD_JETI_SETALARM;
						LL_1khz_control_input.speed_x = jetiAlarm;
     7ac:	e1cb12b0 	strh	r1, [fp, #32]
						LL_1khz_control_input.speed_y = jetiAlarmType;
						jetiSyncState++;
     7b0:	e3a02002 	mov	r2, #2

						jetiSyncState++;
						break;
					case 1:
						//sync alarm
						LL_1khz_control_input.status = PD_JETI_SETALARM;
     7b4:	e3a010a3 	mov	r1, #163	; 0xa3
						LL_1khz_control_input.speed_x = jetiAlarm;
						LL_1khz_control_input.speed_y = jetiAlarmType;
     7b8:	e1cb32b2 	strh	r3, [fp, #34]	; 0x22
						jetiSyncState++;
     7bc:	e5ca2000 	strb	r2, [sl]

						jetiSyncState++;
						break;
					case 1:
						//sync alarm
						LL_1khz_control_input.status = PD_JETI_SETALARM;
     7c0:	e1cb12b4 	strh	r1, [fp, #36]	; 0x24
     7c4:	eaffffb1 	b	690 <HL2LL_write_cycle+0x26c>
						LL_1khz_control_input.speed_y = jetiAlarmType;
						jetiSyncState++;
						break;
					case 2:
						//sync complete sensor fields
						if (jetiValues[jetiSensorCnt].active) {
     7c8:	e59f558c 	ldr	r5, [pc, #1420]	; d5c <IRQ_Stack_Size+0x55c>
     7cc:	e5d52000 	ldrb	r2, [r5]
     7d0:	e0823102 	add	r3, r2, r2, lsl #2
     7d4:	e59f4584 	ldr	r4, [pc, #1412]	; d60 <IRQ_Stack_Size+0x560>
     7d8:	e0823083 	add	r3, r2, r3, lsl #1
     7dc:	e1a03083 	lsl	r3, r3, #1
     7e0:	e7d3c004 	ldrb	ip, [r3, r4]
     7e4:	e35c0000 	cmp	ip, #0
     7e8:	e0831004 	add	r1, r3, r4
     7ec:	1a0000f8 	bne	bd4 <IRQ_Stack_Size+0x3d4>
									&jetiValues[jetiSensorCnt].name[8], 2);
							LL_1khz_control_input.speed_y
									= jetiValues[jetiSensorCnt].decPoint;
							jetiValuePartialSyncPending = 1;
						} else {
							jetiSensorCnt++;
     7f0:	e2823001 	add	r3, r2, #1
     7f4:	e20330ff 	and	r3, r3, #255	; 0xff
							if (jetiSensorCnt == 15) {
     7f8:	e353000f 	cmp	r3, #15
									&jetiValues[jetiSensorCnt].name[8], 2);
							LL_1khz_control_input.speed_y
									= jetiValues[jetiSensorCnt].decPoint;
							jetiValuePartialSyncPending = 1;
						} else {
							jetiSensorCnt++;
     7fc:	e5c53000 	strb	r3, [r5]
							if (jetiSensorCnt == 15) {
								jetiSensorCnt = 0;
							}

							jetiSyncState++;
     800:	e3a03003 	mov	r3, #3
     804:	e5ca3000 	strb	r3, [sl]
							jetiSensorValCnt = 0;
							jetiSensorValUpdateTimeout = 0;
     808:	e59f2554 	ldr	r2, [pc, #1364]	; d64 <IRQ_Stack_Size+0x564>
							if (jetiSensorCnt == 15) {
								jetiSensorCnt = 0;
							}

							jetiSyncState++;
							jetiSensorValCnt = 0;
     80c:	e59f3554 	ldr	r3, [pc, #1364]	; d68 <IRQ_Stack_Size+0x568>
									= jetiValues[jetiSensorCnt].decPoint;
							jetiValuePartialSyncPending = 1;
						} else {
							jetiSensorCnt++;
							if (jetiSensorCnt == 15) {
								jetiSensorCnt = 0;
     810:	05c5c000 	strbeq	ip, [r5]
							}

							jetiSyncState++;
							jetiSensorValCnt = 0;
							jetiSensorValUpdateTimeout = 0;
     814:	e5c2c000 	strb	ip, [r2]
							if (jetiSensorCnt == 15) {
								jetiSensorCnt = 0;
							}

							jetiSyncState++;
							jetiSensorValCnt = 0;
     818:	e5c3c000 	strb	ip, [r3]
     81c:	eaffff9b 	b	690 <HL2LL_write_cycle+0x26c>
						}
						break;

					case 3:
						//sync text
						LL_1khz_control_input.status = PD_JETI_SETTEXT;
     820:	e3a0c0a4 	mov	ip, #164	; 0xa4
     824:	e1cbc2b4 	strh	ip, [fp, #36]	; 0x24
						memcpy(&LL_1khz_control_input.latitude,
     828:	e59f153c 	ldr	r1, [pc, #1340]	; d6c <IRQ_Stack_Size+0x56c>
     82c:	e3a02004 	mov	r2, #4
     830:	e59f0508 	ldr	r0, [pc, #1288]	; d40 <IRQ_Stack_Size+0x540>
     834:	eb003463 	bl	d9c8 <__memcpy_from_arm>
								&jetiDisplayText[0], 4);
						memcpy(&LL_1khz_control_input.longitude,
     838:	e59f1530 	ldr	r1, [pc, #1328]	; d70 <IRQ_Stack_Size+0x570>
     83c:	e3a02004 	mov	r2, #4
     840:	e59f0500 	ldr	r0, [pc, #1280]	; d48 <IRQ_Stack_Size+0x548>
     844:	eb00345f 	bl	d9c8 <__memcpy_from_arm>
								&jetiDisplayText[4], 4);
						memcpy(&LL_1khz_control_input.height,
     848:	e59f1524 	ldr	r1, [pc, #1316]	; d74 <IRQ_Stack_Size+0x574>
     84c:	e3a02004 	mov	r2, #4
     850:	e59f0520 	ldr	r0, [pc, #1312]	; d78 <IRQ_Stack_Size+0x578>
     854:	eb00345b 	bl	d9c8 <__memcpy_from_arm>
								&jetiDisplayText[8], 4);
						memcpy(&LL_1khz_control_input.speed_x,
     858:	e59f151c 	ldr	r1, [pc, #1308]	; d7c <IRQ_Stack_Size+0x57c>
     85c:	e3a02002 	mov	r2, #2
     860:	e59f04e4 	ldr	r0, [pc, #1252]	; d4c <IRQ_Stack_Size+0x54c>
     864:	eb003457 	bl	d9c8 <__memcpy_from_arm>
								&jetiDisplayText[12], 2);
						memcpy(&LL_1khz_control_input.speed_y,
     868:	e59f0510 	ldr	r0, [pc, #1296]	; d80 <IRQ_Stack_Size+0x580>
     86c:	e59f1510 	ldr	r1, [pc, #1296]	; d84 <IRQ_Stack_Size+0x584>
     870:	eaffffc3 	b	784 <HL2LL_write_cycle+0x360>
						jetiSyncState++;
						break;

					case 4:
						//sync text2
						LL_1khz_control_input.status = PD_JETI_SETTEXT2;
     874:	e3a030a7 	mov	r3, #167	; 0xa7
     878:	e1cb32b4 	strh	r3, [fp, #36]	; 0x24

						memcpy(&LL_1khz_control_input.latitude,
     87c:	e59f1504 	ldr	r1, [pc, #1284]	; d88 <IRQ_Stack_Size+0x588>
     880:	e3a02004 	mov	r2, #4
     884:	e59f04b4 	ldr	r0, [pc, #1204]	; d40 <IRQ_Stack_Size+0x540>
     888:	eb00344e 	bl	d9c8 <__memcpy_from_arm>
								&jetiDisplayText[16], 4);
						memcpy(&LL_1khz_control_input.longitude,
     88c:	e59f14f8 	ldr	r1, [pc, #1272]	; d8c <IRQ_Stack_Size+0x58c>
     890:	e3a02004 	mov	r2, #4
     894:	e59f04ac 	ldr	r0, [pc, #1196]	; d48 <IRQ_Stack_Size+0x548>
     898:	eb00344a 	bl	d9c8 <__memcpy_from_arm>
								&jetiDisplayText[20], 4);
						memcpy(&LL_1khz_control_input.height,
     89c:	e59f14ec 	ldr	r1, [pc, #1260]	; d90 <IRQ_Stack_Size+0x590>
     8a0:	e3a02004 	mov	r2, #4
     8a4:	e59f04cc 	ldr	r0, [pc, #1228]	; d78 <IRQ_Stack_Size+0x578>
     8a8:	eb003446 	bl	d9c8 <__memcpy_from_arm>
								&jetiDisplayText[24], 4);
						memcpy(&LL_1khz_control_input.speed_x,
     8ac:	e59f14e0 	ldr	r1, [pc, #1248]	; d94 <IRQ_Stack_Size+0x594>
     8b0:	e3a02002 	mov	r2, #2
     8b4:	e59f0490 	ldr	r0, [pc, #1168]	; d4c <IRQ_Stack_Size+0x54c>
     8b8:	eb003442 	bl	d9c8 <__memcpy_from_arm>
								&jetiDisplayText[28], 2);
						memcpy(&LL_1khz_control_input.speed_y,
     8bc:	e59f04bc 	ldr	r0, [pc, #1212]	; d80 <IRQ_Stack_Size+0x580>
     8c0:	e59f14d0 	ldr	r1, [pc, #1232]	; d98 <IRQ_Stack_Size+0x598>
     8c4:	eaffffae 	b	784 <HL2LL_write_cycle+0x360>

					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
     8c8:	e59f9498 	ldr	r9, [pc, #1176]	; d68 <IRQ_Stack_Size+0x568>
     8cc:	e5d9c000 	ldrb	ip, [r9]
						LL_1khz_control_input.latitude = jetiValues[3
     8d0:	e08c108c 	add	r1, ip, ip, lsl #1
     8d4:	e0813101 	add	r3, r1, r1, lsl #2
     8d8:	e59f5480 	ldr	r5, [pc, #1152]	; d60 <IRQ_Stack_Size+0x560>
     8dc:	e0811083 	add	r1, r1, r3, lsl #1
     8e0:	e1a01081 	lsl	r1, r1, #1

					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
     8e4:	e58bc01c 	str	ip, [fp, #28]
						LL_1khz_control_input.latitude = jetiValues[3
     8e8:	e0813005 	add	r3, r1, r5
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     8ec:	e2832026 	add	r2, r3, #38	; 0x26
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     8f0:	e2833010 	add	r3, r3, #16
     8f4:	e5d34003 	ldrb	r4, [r3, #3]
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     8f8:	e5d20003 	ldrb	r0, [r2, #3]
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     8fc:	e5d3e002 	ldrb	lr, [r3, #2]
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     900:	e5d2c002 	ldrb	ip, [r2, #2]
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     904:	e5d36004 	ldrb	r6, [r3, #4]
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     908:	e5d27004 	ldrb	r7, [r2, #4]
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     90c:	e18ee404 	orr	lr, lr, r4, lsl #8
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     910:	e18cc400 	orr	ip, ip, r0, lsl #8
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     914:	e5d34005 	ldrb	r4, [r3, #5]
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     918:	e5d20005 	ldrb	r0, [r2, #5]
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     91c:	e18ee806 	orr	lr, lr, r6, lsl #16
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     920:	e18cc807 	orr	ip, ip, r7, lsl #16
     924:	e18ccc00 	orr	ip, ip, r0, lsl #24
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     928:	e18eec04 	orr	lr, lr, r4, lsl #24
						break;

					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
     92c:	e3a030a2 	mov	r3, #162	; 0xa2
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
								* jetiSensorValCnt + 1].value;
						memcpy(&LL_1khz_control_input.speed_y,
     930:	e0811005 	add	r1, r1, r5
     934:	e2811040 	add	r1, r1, #64	; 0x40
     938:	e3a02002 	mov	r2, #2

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
     93c:	e58bc018 	str	ip, [fp, #24]
					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
     940:	e58be014 	str	lr, [fp, #20]
						break;

					case 5:
						//sync all sensor values for 75ms

						LL_1khz_control_input.status = PD_JETI_UPDATESDATA;
     944:	e1cb32b4 	strh	r3, [fp, #36]	; 0x24
						LL_1khz_control_input.height = jetiSensorValCnt;
						LL_1khz_control_input.latitude = jetiValues[3
								* jetiSensorValCnt].value;
						LL_1khz_control_input.longitude = jetiValues[3
								* jetiSensorValCnt + 1].value;
						memcpy(&LL_1khz_control_input.speed_y,
     948:	e59f0430 	ldr	r0, [pc, #1072]	; d80 <IRQ_Stack_Size+0x580>
     94c:	eb00341d 	bl	d9c8 <__memcpy_from_arm>
								(void *) (((unsigned char *) (&jetiValues[3
										* jetiSensorValCnt + 2].value)) + 2), 2);
						memcpy(&LL_1khz_control_input.speed_x, &jetiValues[3
     950:	e5d93000 	ldrb	r3, [r9]
     954:	e0833283 	add	r3, r3, r3, lsl #5
     958:	e0855083 	add	r5, r5, r3, lsl #1
     95c:	e3a02002 	mov	r2, #2
     960:	e285103e 	add	r1, r5, #62	; 0x3e
     964:	e59f03e0 	ldr	r0, [pc, #992]	; d4c <IRQ_Stack_Size+0x54c>
     968:	eb003416 	bl	d9c8 <__memcpy_from_arm>
								* jetiSensorValCnt + 2].value, 2);

						jetiSensorValCnt++;
     96c:	e5d93000 	ldrb	r3, [r9]
     970:	e2833001 	add	r3, r3, #1
     974:	e20330ff 	and	r3, r3, #255	; 0xff
						if (jetiSensorValCnt == 5)
							jetiSensorValCnt = 0;

						if (jetiTriggerTextSync) {
     978:	e59f241c 	ldr	r2, [pc, #1052]	; d9c <IRQ_Stack_Size+0x59c>
										* jetiSensorValCnt + 2].value)) + 2), 2);
						memcpy(&LL_1khz_control_input.speed_x, &jetiValues[3
								* jetiSensorValCnt + 2].value, 2);

						jetiSensorValCnt++;
						if (jetiSensorValCnt == 5)
     97c:	e3530005 	cmp	r3, #5
								(void *) (((unsigned char *) (&jetiValues[3
										* jetiSensorValCnt + 2].value)) + 2), 2);
						memcpy(&LL_1khz_control_input.speed_x, &jetiValues[3
								* jetiSensorValCnt + 2].value, 2);

						jetiSensorValCnt++;
     980:	e5c93000 	strb	r3, [r9]
						if (jetiSensorValCnt == 5)
							jetiSensorValCnt = 0;
     984:	02433005 	subeq	r3, r3, #5
     988:	05c93000 	strbeq	r3, [r9]

						if (jetiTriggerTextSync) {
     98c:	e5d23000 	ldrb	r3, [r2]
     990:	e3530000 	cmp	r3, #0
							jetiSyncState = 3; //trigger text resync
							jetiTriggerTextSync = 0;
     994:	13a03000 	movne	r3, #0
     998:	15c23000 	strbne	r3, [r2]
						jetiSensorValCnt++;
						if (jetiSensorValCnt == 5)
							jetiSensorValCnt = 0;

						if (jetiTriggerTextSync) {
							jetiSyncState = 3; //trigger text resync
     99c:	13a02003 	movne	r2, #3
     9a0:	15ca2000 	strbne	r2, [sl]
							jetiTriggerTextSync = 0;
						}

						jetiSensorValUpdateTimeout++;
     9a4:	e59f23b8 	ldr	r2, [pc, #952]	; d64 <IRQ_Stack_Size+0x564>
     9a8:	e5d23000 	ldrb	r3, [r2]
     9ac:	e2833001 	add	r3, r3, #1
     9b0:	e20330ff 	and	r3, r3, #255	; 0xff
						if (jetiSensorValUpdateTimeout == 75) {
     9b4:	e353004b 	cmp	r3, #75	; 0x4b
						if (jetiTriggerTextSync) {
							jetiSyncState = 3; //trigger text resync
							jetiTriggerTextSync = 0;
						}

						jetiSensorValUpdateTimeout++;
     9b8:	e5c23000 	strb	r3, [r2]
						if (jetiSensorValUpdateTimeout == 75) {
							jetiSyncState = 0;
     9bc:	0243304b 	subeq	r3, r3, #75	; 0x4b
     9c0:	05ca3000 	strbeq	r3, [sl]
     9c4:	eaffff31 	b	690 <HL2LL_write_cycle+0x26c>
	{
		LL_1khz_control_input.system_flags |= SF_WAYPOINT_MODE;

		//check if new command should be send

		if (wpCtrlWpCmdUpdated) {
     9c8:	e59fc3d0 	ldr	ip, [pc, #976]	; da0 <IRQ_Stack_Size+0x5a0>
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
	} else if (WO_SDK.ctrl_mode == 0x03) //gps waypoint control
	{
		LL_1khz_control_input.system_flags |= SF_WAYPOINT_MODE;
     9cc:	e1db30b0 	ldrh	r3, [fp]

		//check if new command should be send

		if (wpCtrlWpCmdUpdated) {
     9d0:	e5dc2000 	ldrb	r2, [ip]
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
	} else if (WO_SDK.ctrl_mode == 0x03) //gps waypoint control
	{
		LL_1khz_control_input.system_flags |= SF_WAYPOINT_MODE;
     9d4:	e59fa324 	ldr	sl, [pc, #804]	; d00 <IRQ_Stack_Size+0x500>
     9d8:	e3833040 	orr	r3, r3, #64	; 0x40

		//check if new command should be send

		if (wpCtrlWpCmdUpdated) {
     9dc:	e3520000 	cmp	r2, #0
		LL_1khz_control_input.roll = WO_CTRL_Input.roll;
		LL_1khz_control_input.yaw = WO_CTRL_Input.yaw;
		LL_1khz_control_input.thrust = WO_CTRL_Input.thrust;
	} else if (WO_SDK.ctrl_mode == 0x03) //gps waypoint control
	{
		LL_1khz_control_input.system_flags |= SF_WAYPOINT_MODE;
     9e0:	e1cb30b0 	strh	r3, [fp]
				LL_1khz_control_input.ctrl_flags &= 0x00FF;
				LL_1khz_control_input.ctrl_flags |= wpCtrlWpCmd << 8;
				wpCtrlWpCmdUpdated = 0;
			}
		} else {
			LL_1khz_control_input.ctrl_flags &= 0x00FF;
     9e4:	05da3002 	ldrbeq	r3, [sl, #2]
     9e8:	01ca30b2 	strheq	r3, [sl, #2]
	{
		LL_1khz_control_input.system_flags |= SF_WAYPOINT_MODE;

		//check if new command should be send

		if (wpCtrlWpCmdUpdated) {
     9ec:	0affff01 	beq	5f8 <HL2LL_write_cycle+0x1d4>

			if (wpCtrlWpCmd == WP_CMD_SINGLE_WP) {
     9f0:	e59f33ac 	ldr	r3, [pc, #940]	; da4 <IRQ_Stack_Size+0x5a4>
     9f4:	e5d31000 	ldrb	r1, [r3]
     9f8:	e3510001 	cmp	r1, #1
     9fc:	0a000054 	beq	b54 <IRQ_Stack_Size+0x354>
					LL_1khz_control_input.direct_motor_control[7] = 0;
					wpCtrlWpCmdUpdated = 0;
					wpCtrlNavStatus = 0;
				}
			} else {
				LL_1khz_control_input.ctrl_flags &= 0x00FF;
     a00:	e5da3002 	ldrb	r3, [sl, #2]
				LL_1khz_control_input.ctrl_flags |= wpCtrlWpCmd << 8;
				wpCtrlWpCmdUpdated = 0;
     a04:	e59fc394 	ldr	ip, [pc, #916]	; da0 <IRQ_Stack_Size+0x5a0>
					wpCtrlWpCmdUpdated = 0;
					wpCtrlNavStatus = 0;
				}
			} else {
				LL_1khz_control_input.ctrl_flags &= 0x00FF;
				LL_1khz_control_input.ctrl_flags |= wpCtrlWpCmd << 8;
     a08:	e1833401 	orr	r3, r3, r1, lsl #8
				wpCtrlWpCmdUpdated = 0;
     a0c:	e3a02000 	mov	r2, #0
					wpCtrlWpCmdUpdated = 0;
					wpCtrlNavStatus = 0;
				}
			} else {
				LL_1khz_control_input.ctrl_flags &= 0x00FF;
				LL_1khz_control_input.ctrl_flags |= wpCtrlWpCmd << 8;
     a10:	e1ca30b2 	strh	r3, [sl, #2]
				wpCtrlWpCmdUpdated = 0;
     a14:	e5cc2000 	strb	r2, [ip]
     a18:	eafffef6 	b	5f8 <HL2LL_write_cycle+0x1d4>
					= estimatedInclination;

		} else if (transmitBuildInfoTrigger == 1) {
			transmitBuildInfoTrigger = 2;
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
     a1c:	e59f1384 	ldr	r1, [pc, #900]	; da8 <IRQ_Stack_Size+0x5a8>
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedInclination;

		} else if (transmitBuildInfoTrigger == 1) {
			transmitBuildInfoTrigger = 2;
     a20:	e3a03002 	mov	r3, #2
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a24:	e4d12001 	ldrb	r2, [r1], #1
			LL_1khz_control_input.slowDataChannelSelect = SDC_INCLINATION;
			LL_1khz_control_input.slowDataChannelDataShort
					= estimatedInclination;

		} else if (transmitBuildInfoTrigger == 1) {
			transmitBuildInfoTrigger = 2;
     a28:	e5c43000 	strb	r3, [r4]
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
     a2c:	e59f3378 	ldr	r3, [pc, #888]	; dac <IRQ_Stack_Size+0x5ac>
			transmitBuildInfoTrigger = 2;
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a30:	e5ce2035 	strb	r2, [lr, #53]	; 0x35
			transmitPtr++;
			transmitCnt++;
     a34:	e59f2374 	ldr	r2, [pc, #884]	; db0 <IRQ_Stack_Size+0x5b0>
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
     a38:	e5831000 	str	r1, [r3]

		} else if (transmitBuildInfoTrigger == 1) {
			transmitBuildInfoTrigger = 2;
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
     a3c:	e3a03005 	mov	r3, #5
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
     a40:	e3a01000 	mov	r1, #0
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;
     a44:	e1c200b0 	strh	r0, [r2]

		} else if (transmitBuildInfoTrigger == 1) {
			transmitBuildInfoTrigger = 2;
			transmitCnt = 0;
			transmitPtr = (unsigned char *) &buildInfo.version_major;
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
     a48:	e5ce3034 	strb	r3, [lr, #52]	; 0x34
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
     a4c:	e1ce13b6 	strh	r1, [lr, #54]	; 0x36
     a50:	eafffed1 	b	59c <HL2LL_write_cycle+0x178>
			transmitPtr++;
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
     a54:	e59fc354 	ldr	ip, [pc, #852]	; db0 <IRQ_Stack_Size+0x5b0>
     a58:	e1dc30b0 	ldrh	r3, [ip]
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a5c:	e59f0348 	ldr	r0, [pc, #840]	; dac <IRQ_Stack_Size+0x5ac>
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
     a60:	e3a02005 	mov	r2, #5
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
     a64:	e1ce33b6 	strh	r3, [lr, #54]	; 0x36
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;
     a68:	e2833001 	add	r3, r3, #1
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
     a6c:	e5ce2034 	strb	r2, [lr, #52]	; 0x34
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;
     a70:	e1a03803 	lsl	r3, r3, #16
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a74:	e5902000 	ldr	r2, [r0]
			transmitPtr++;
			transmitCnt++;
     a78:	e1a03823 	lsr	r3, r3, #16
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a7c:	e4d21001 	ldrb	r1, [r2], #1
			transmitPtr++;
			transmitCnt++;

			if (transmitCnt == sizeof(buildInfo))
     a80:	e3530053 	cmp	r3, #83	; 0x53
		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
			transmitPtr++;
			transmitCnt++;
     a84:	e1cc30b0 	strh	r3, [ip]

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
     a88:	02433050 	subeq	r3, r3, #80	; 0x50
			transmitCnt++;

		} else if (transmitBuildInfoTrigger == 2) {
			LL_1khz_control_input.slowDataChannelSelect = SDC_BUILDINFO;
			LL_1khz_control_input.slowDataChannelDataShort = transmitCnt;
			LL_1khz_control_input.slowDataChannelDataChar = *transmitPtr;
     a8c:	e5ce1035 	strb	r1, [lr, #53]	; 0x35
			transmitPtr++;
     a90:	e5802000 	str	r2, [r0]
			transmitCnt++;

			if (transmitCnt == sizeof(buildInfo))
				transmitBuildInfoTrigger = 3;
     a94:	05c43000 	strbeq	r3, [r4]
     a98:	eafffebf 	b	59c <HL2LL_write_cycle+0x178>
				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
					jetiValuePartialSyncPending = 0;
					LL_1khz_control_input.status = PD_JETI_SETSENSOR2;

					LL_1khz_control_input.height
     a9c:	e59fa2b8 	ldr	sl, [pc, #696]	; d5c <IRQ_Stack_Size+0x55c>
     aa0:	e5da3000 	ldrb	r3, [sl]
     aa4:	e59f42b4 	ldr	r4, [pc, #692]	; d60 <IRQ_Stack_Size+0x560>
     aa8:	e0832103 	add	r2, r3, r3, lsl #2
     aac:	e0833082 	add	r3, r3, r2, lsl #1
     ab0:	e7d4c083 	ldrb	ip, [r4, r3, lsl #1]
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
     ab4:	e0841083 	add	r1, r4, r3, lsl #1
				LL_1khz_control_input.status = 0;

				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
					jetiValuePartialSyncPending = 0;
					LL_1khz_control_input.status = PD_JETI_SETSENSOR2;
     ab8:	e3a030a6 	mov	r3, #166	; 0xa6

					LL_1khz_control_input.height
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
     abc:	e281100b 	add	r1, r1, #11
     ac0:	e3a02004 	mov	r2, #4
				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
					jetiValuePartialSyncPending = 0;
					LL_1khz_control_input.status = PD_JETI_SETSENSOR2;

					LL_1khz_control_input.height
     ac4:	e585c01c 	str	ip, [r5, #28]
				LL_1khz_control_input.status = 0;

				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
					jetiValuePartialSyncPending = 0;
					LL_1khz_control_input.status = PD_JETI_SETSENSOR2;
     ac8:	e1c532b4 	strh	r3, [r5, #36]	; 0x24

					LL_1khz_control_input.height
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
     acc:	e2850014 	add	r0, r5, #20
				//default is no command
				LL_1khz_control_input.status = 0;

				//data fields are used for jeti commands
				if (jetiValuePartialSyncPending == 1) {
					jetiValuePartialSyncPending = 0;
     ad0:	e5c69000 	strb	r9, [r6]
					LL_1khz_control_input.status = PD_JETI_SETSENSOR2;

					LL_1khz_control_input.height
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
     ad4:	eb0033bb 	bl	d9c8 <__memcpy_from_arm>
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
     ad8:	e5da1000 	ldrb	r1, [sl]
     adc:	e0813101 	add	r3, r1, r1, lsl #2
     ae0:	e0813083 	add	r3, r1, r3, lsl #1
     ae4:	e0844083 	add	r4, r4, r3, lsl #1
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
     ae8:	e2842010 	add	r2, r4, #16
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
     aec:	e5d20003 	ldrb	r0, [r2, #3]
     af0:	e5d23002 	ldrb	r3, [r2, #2]
     af4:	e5d2c004 	ldrb	ip, [r2, #4]
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
     af8:	e2811001 	add	r1, r1, #1
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
     afc:	e5d2e005 	ldrb	lr, [r2, #5]
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
     b00:	e20110ff 	and	r1, r1, #255	; 0xff
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
     b04:	e1833400 	orr	r3, r3, r0, lsl #8

					LL_1khz_control_input.height
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
     b08:	e5d4200f 	ldrb	r2, [r4, #15]
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
     b0c:	e5d40010 	ldrb	r0, [r4, #16]
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
     b10:	e351000f 	cmp	r1, #15
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
     b14:	e5ca1000 	strb	r1, [sl]
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
     b18:	e183380c 	orr	r3, r3, ip, lsl #16
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
					}
					jetiSyncState++;
     b1c:	e59f1204 	ldr	r1, [pc, #516]	; d28 <IRQ_Stack_Size+0x528>
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
     b20:	e1833c0e 	orr	r3, r3, lr, lsl #24
     b24:	e5853018 	str	r3, [r5, #24]
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
					}
					jetiSyncState++;
     b28:	e5d13000 	ldrb	r3, [r1]
     b2c:	e2833001 	add	r3, r3, #1

					LL_1khz_control_input.height
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
     b30:	e1c522b0 	strh	r2, [r5, #32]
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
					}
					jetiSyncState++;
     b34:	e5c13000 	strb	r3, [r1]
					jetiSensorValCnt = 0;
					jetiSensorValUpdateTimeout = 0;
     b38:	e59f2224 	ldr	r2, [pc, #548]	; d64 <IRQ_Stack_Size+0x564>
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
					}
					jetiSyncState++;
					jetiSensorValCnt = 0;
     b3c:	e59f3224 	ldr	r3, [pc, #548]	; d68 <IRQ_Stack_Size+0x568>
							= jetiValues[jetiSensorCnt].active;
					memcpy(&LL_1khz_control_input.latitude,
							&jetiValues[jetiSensorCnt].unit[0], 4);
					LL_1khz_control_input.speed_x
							= jetiValues[jetiSensorCnt].unit[4];
					LL_1khz_control_input.speed_y
     b40:	e1c502b2 	strh	r0, [r5, #34]	; 0x22
							= jetiValues[jetiSensorCnt].varType;
					LL_1khz_control_input.longitude
							= jetiValues[jetiSensorCnt].value;
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
     b44:	05ca9000 	strbeq	r9, [sl]
					}
					jetiSyncState++;
					jetiSensorValCnt = 0;
					jetiSensorValUpdateTimeout = 0;
     b48:	e5c29000 	strb	r9, [r2]
					jetiSensorCnt++;
					if (jetiSensorCnt == 15) {
						jetiSensorCnt = 0;
					}
					jetiSyncState++;
					jetiSensorValCnt = 0;
     b4c:	e5c39000 	strb	r9, [r3]
     b50:	eafffece 	b	690 <HL2LL_write_cycle+0x26c>
		//check if new command should be send

		if (wpCtrlWpCmdUpdated) {

			if (wpCtrlWpCmd == WP_CMD_SINGLE_WP) {
				if (wpCtrlWpCmdUpdated == 1) {
     b54:	e3520001 	cmp	r2, #1
     b58:	0a00003d 	beq	c54 <IRQ_Stack_Size+0x454>
							>> 16;
					LL_1khz_control_input.direct_motor_control[7] = wpToLL.yaw
							>> 24;

					wpCtrlWpCmdUpdated++;
				} else if (wpCtrlWpCmdUpdated == 2) {
     b5c:	e3520002 	cmp	r2, #2
     b60:	1afffea4 	bne	5f8 <HL2LL_write_cycle+0x1d4>
							= wpToLL.wp_activated;
					LL_1khz_control_input.direct_motor_control[4] = 0;
					LL_1khz_control_input.direct_motor_control[5] = 0;
					LL_1khz_control_input.direct_motor_control[6] = 0;
					LL_1khz_control_input.direct_motor_control[7] = 0;
					wpCtrlWpCmdUpdated = 0;
     b64:	e59f3234 	ldr	r3, [pc, #564]	; da0 <IRQ_Stack_Size+0x5a0>
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.time;
					LL_1khz_control_input.roll = 0; //wpToLL.cam_angle_pitch;
     b68:	e3a0c000 	mov	ip, #0
							>> 24;

					wpCtrlWpCmdUpdated++;
				} else if (wpCtrlWpCmdUpdated == 2) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
     b6c:	e5da2002 	ldrb	r2, [sl, #2]
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.time;
     b70:	e59f123c 	ldr	r1, [pc, #572]	; db4 <IRQ_Stack_Size+0x5b4>
							= wpToLL.wp_activated;
					LL_1khz_control_input.direct_motor_control[4] = 0;
					LL_1khz_control_input.direct_motor_control[5] = 0;
					LL_1khz_control_input.direct_motor_control[6] = 0;
					LL_1khz_control_input.direct_motor_control[7] = 0;
					wpCtrlWpCmdUpdated = 0;
     b74:	e5c3c000 	strb	ip, [r3]
					wpCtrlNavStatus = 0;
     b78:	e59f3238 	ldr	r3, [pc, #568]	; db8 <IRQ_Stack_Size+0x5b8>
							>> 24;

					wpCtrlWpCmdUpdated++;
				} else if (wpCtrlWpCmdUpdated == 2) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
     b7c:	e3822c82 	orr	r2, r2, #33280	; 0x8200
					LL_1khz_control_input.direct_motor_control[0] = 0; //wpToLL.cam_angle_roll;
					LL_1khz_control_input.direct_motor_control[1]
							= wpToLL.max_speed;
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.properties;
					LL_1khz_control_input.direct_motor_control[3]
     b80:	e5915000 	ldr	r5, [r1]
					LL_1khz_control_input.pitch = wpToLL.time;
					LL_1khz_control_input.roll = 0; //wpToLL.cam_angle_pitch;
					LL_1khz_control_input.thrust = wpToLL.pos_acc;
					LL_1khz_control_input.yaw = wpToLL.chksum;
					LL_1khz_control_input.direct_motor_control[0] = 0; //wpToLL.cam_angle_roll;
					LL_1khz_control_input.direct_motor_control[1]
     b84:	e5d1e005 	ldrb	lr, [r1, #5]
							= wpToLL.max_speed;
					LL_1khz_control_input.direct_motor_control[2]
     b88:	e5d14004 	ldrb	r4, [r1, #4]
					LL_1khz_control_input.direct_motor_control[4] = 0;
					LL_1khz_control_input.direct_motor_control[5] = 0;
					LL_1khz_control_input.direct_motor_control[6] = 0;
					LL_1khz_control_input.direct_motor_control[7] = 0;
					wpCtrlWpCmdUpdated = 0;
					wpCtrlNavStatus = 0;
     b8c:	e1c3c0b0 	strh	ip, [r3]
							>> 24;

					wpCtrlWpCmdUpdated++;
				} else if (wpCtrlWpCmdUpdated == 2) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
     b90:	e1ca20b2 	strh	r2, [sl, #2]
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.time;
					LL_1khz_control_input.roll = 0; //wpToLL.cam_angle_pitch;
					LL_1khz_control_input.thrust = wpToLL.pos_acc;
     b94:	e1d130b8 	ldrh	r3, [r1, #8]
				} else if (wpCtrlWpCmdUpdated == 2) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.time;
     b98:	e1d120b6 	ldrh	r2, [r1, #6]
					LL_1khz_control_input.roll = 0; //wpToLL.cam_angle_pitch;
					LL_1khz_control_input.thrust = wpToLL.pos_acc;
					LL_1khz_control_input.yaw = wpToLL.chksum;
     b9c:	e1d110ba 	ldrh	r1, [r1, #10]
					LL_1khz_control_input.direct_motor_control[0] = 0; //wpToLL.cam_angle_roll;
					LL_1khz_control_input.direct_motor_control[1]
     ba0:	e5cae00d 	strb	lr, [sl, #13]
							= wpToLL.max_speed;
					LL_1khz_control_input.direct_motor_control[2]
     ba4:	e5ca400e 	strb	r4, [sl, #14]
							= wpToLL.properties;
					LL_1khz_control_input.direct_motor_control[3]
     ba8:	e5ca500f 	strb	r5, [sl, #15]
							= wpToLL.wp_activated;
					LL_1khz_control_input.direct_motor_control[4] = 0;
					LL_1khz_control_input.direct_motor_control[5] = 0;
					LL_1khz_control_input.direct_motor_control[6] = 0;
					LL_1khz_control_input.direct_motor_control[7] = 0;
     bac:	e5cac013 	strb	ip, [sl, #19]
				} else if (wpCtrlWpCmdUpdated == 2) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART2
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.time;
     bb0:	e1ca20b4 	strh	r2, [sl, #4]
					LL_1khz_control_input.roll = 0; //wpToLL.cam_angle_pitch;
     bb4:	e1cac0b6 	strh	ip, [sl, #6]
					LL_1khz_control_input.thrust = wpToLL.pos_acc;
     bb8:	e1ca30ba 	strh	r3, [sl, #10]
					LL_1khz_control_input.yaw = wpToLL.chksum;
     bbc:	e1ca10b8 	strh	r1, [sl, #8]
					LL_1khz_control_input.direct_motor_control[0] = 0; //wpToLL.cam_angle_roll;
     bc0:	e5cac00c 	strb	ip, [sl, #12]
							= wpToLL.max_speed;
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.properties;
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.wp_activated;
					LL_1khz_control_input.direct_motor_control[4] = 0;
     bc4:	e5cac010 	strb	ip, [sl, #16]
					LL_1khz_control_input.direct_motor_control[5] = 0;
     bc8:	e5cac011 	strb	ip, [sl, #17]
					LL_1khz_control_input.direct_motor_control[6] = 0;
     bcc:	e5cac012 	strb	ip, [sl, #18]
     bd0:	eafffe88 	b	5f8 <HL2LL_write_cycle+0x1d4>
						jetiSyncState++;
						break;
					case 2:
						//sync complete sensor fields
						if (jetiValues[jetiSensorCnt].active) {
							LL_1khz_control_input.status = PD_JETI_SETSENSOR;
     bd4:	e3a030a1 	mov	r3, #161	; 0xa1
							LL_1khz_control_input.height
     bd8:	e58bc01c 	str	ip, [fp, #28]
									= jetiValues[jetiSensorCnt].active;
							memcpy(&LL_1khz_control_input.latitude,
     bdc:	e2811001 	add	r1, r1, #1
     be0:	e3a02004 	mov	r2, #4
						jetiSyncState++;
						break;
					case 2:
						//sync complete sensor fields
						if (jetiValues[jetiSensorCnt].active) {
							LL_1khz_control_input.status = PD_JETI_SETSENSOR;
     be4:	e1cb32b4 	strh	r3, [fp, #36]	; 0x24
							LL_1khz_control_input.height
									= jetiValues[jetiSensorCnt].active;
							memcpy(&LL_1khz_control_input.latitude,
     be8:	e59f0150 	ldr	r0, [pc, #336]	; d40 <IRQ_Stack_Size+0x540>
     bec:	eb003375 	bl	d9c8 <__memcpy_from_arm>
									&jetiValues[jetiSensorCnt].name[0], 4);
							memcpy(&LL_1khz_control_input.longitude,
     bf0:	e5d51000 	ldrb	r1, [r5]
     bf4:	e0813101 	add	r3, r1, r1, lsl #2
     bf8:	e0811083 	add	r1, r1, r3, lsl #1
     bfc:	e0841081 	add	r1, r4, r1, lsl #1
     c00:	e2811005 	add	r1, r1, #5
     c04:	e3a02004 	mov	r2, #4
     c08:	e59f0138 	ldr	r0, [pc, #312]	; d48 <IRQ_Stack_Size+0x548>
     c0c:	eb00336d 	bl	d9c8 <__memcpy_from_arm>
									&jetiValues[jetiSensorCnt].name[4], 4);
							memcpy(&LL_1khz_control_input.speed_x,
     c10:	e5d51000 	ldrb	r1, [r5]
     c14:	e0813101 	add	r3, r1, r1, lsl #2
     c18:	e0811083 	add	r1, r1, r3, lsl #1
     c1c:	e0841081 	add	r1, r4, r1, lsl #1
     c20:	e3a02002 	mov	r2, #2
     c24:	e2811009 	add	r1, r1, #9
     c28:	e59f011c 	ldr	r0, [pc, #284]	; d4c <IRQ_Stack_Size+0x54c>
     c2c:	eb003365 	bl	d9c8 <__memcpy_from_arm>
									&jetiValues[jetiSensorCnt].name[8], 2);
							LL_1khz_control_input.speed_y
     c30:	e5d53000 	ldrb	r3, [r5]
     c34:	e0832103 	add	r2, r3, r3, lsl #2
     c38:	e0833082 	add	r3, r3, r2, lsl #1
     c3c:	e0843083 	add	r3, r4, r3, lsl #1
     c40:	e5d32011 	ldrb	r2, [r3, #17]
									= jetiValues[jetiSensorCnt].decPoint;
							jetiValuePartialSyncPending = 1;
     c44:	e3a03001 	mov	r3, #1
									&jetiValues[jetiSensorCnt].name[0], 4);
							memcpy(&LL_1khz_control_input.longitude,
									&jetiValues[jetiSensorCnt].name[4], 4);
							memcpy(&LL_1khz_control_input.speed_x,
									&jetiValues[jetiSensorCnt].name[8], 2);
							LL_1khz_control_input.speed_y
     c48:	e1cb22b2 	strh	r2, [fp, #34]	; 0x22
									= jetiValues[jetiSensorCnt].decPoint;
							jetiValuePartialSyncPending = 1;
     c4c:	e5c63000 	strb	r3, [r6]
     c50:	eafffe8e 	b	690 <HL2LL_write_cycle+0x26c>
				if (wpCtrlWpCmdUpdated == 1) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
     c54:	e59f3158 	ldr	r3, [pc, #344]	; db4 <IRQ_Stack_Size+0x5b4>
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
					LL_1khz_control_input.direct_motor_control[0]
     c58:	e2830014 	add	r0, r3, #20
     c5c:	e8901001 	ldm	r0, {r0, ip}
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
     c60:	e283500c 	add	r5, r3, #12
     c64:	e8950060 	ldm	r5, {r5, r6}
							= wpToLL.height;
					LL_1khz_control_input.direct_motor_control[1]
							= wpToLL.height >> 8;
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.height >> 16;
					LL_1khz_control_input.direct_motor_control[3]
     c68:	e1a03c4c 	asr	r3, ip, #24
     c6c:	e58d3008 	str	r3, [sp, #8]
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
     c70:	e1a01846 	asr	r1, r6, #16
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.height >> 16;
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
     c74:	e1a03440 	asr	r3, r0, #8
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
     c78:	e58d100c 	str	r1, [sp, #12]
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.height >> 16;
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
     c7c:	e58d3004 	str	r3, [sp, #4]
							>> 8;
					LL_1khz_control_input.direct_motor_control[6] = wpToLL.yaw
							>> 16;
					LL_1khz_control_input.direct_motor_control[7] = wpToLL.yaw
     c80:	e1a01c40 	asr	r1, r0, #24
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
							>> 8;
					LL_1khz_control_input.direct_motor_control[6] = wpToLL.yaw
     c84:	e1a03840 	asr	r3, r0, #16
     c88:	e58d3000 	str	r3, [sp]
		if (wpCtrlWpCmdUpdated) {

			if (wpCtrlWpCmd == WP_CMD_SINGLE_WP) {
				if (wpCtrlWpCmdUpdated == 1) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
     c8c:	e5da2002 	ldrb	r2, [sl, #2]
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
							>> 8;
					LL_1khz_control_input.direct_motor_control[6] = wpToLL.yaw
							>> 16;
					LL_1khz_control_input.direct_motor_control[7] = wpToLL.yaw
     c90:	e5ca1013 	strb	r1, [sl, #19]
							>> 24;

					wpCtrlWpCmdUpdated++;
     c94:	e59f1104 	ldr	r1, [pc, #260]	; da0 <IRQ_Stack_Size+0x5a0>
     c98:	e3a03002 	mov	r3, #2
     c9c:	e5c13000 	strb	r3, [r1]
		if (wpCtrlWpCmdUpdated) {

			if (wpCtrlWpCmd == WP_CMD_SINGLE_WP) {
				if (wpCtrlWpCmdUpdated == 1) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
     ca0:	e3822c81 	orr	r2, r2, #33024	; 0x8100
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
					LL_1khz_control_input.direct_motor_control[0]
							= wpToLL.height;
					LL_1khz_control_input.direct_motor_control[1]
     ca4:	e1a0e44c 	asr	lr, ip, #8
							= wpToLL.height >> 8;
					LL_1khz_control_input.direct_motor_control[2]
     ca8:	e1a0484c 	asr	r4, ip, #16
		if (wpCtrlWpCmdUpdated) {

			if (wpCtrlWpCmd == WP_CMD_SINGLE_WP) {
				if (wpCtrlWpCmdUpdated == 1) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
     cac:	e1ca20b2 	strh	r2, [sl, #2]
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
     cb0:	e59d200c 	ldr	r2, [sp, #12]
					LL_1khz_control_input.direct_motor_control[0]
							= wpToLL.height;
					LL_1khz_control_input.direct_motor_control[1]
     cb4:	e5cae00d 	strb	lr, [sl, #13]
							= wpToLL.height >> 8;
					LL_1khz_control_input.direct_motor_control[2]
     cb8:	e5ca400e 	strb	r4, [sl, #14]
							= wpToLL.height >> 16;
					LL_1khz_control_input.direct_motor_control[3]
     cbc:	e59d3008 	ldr	r3, [sp, #8]
     cc0:	e5ca300f 	strb	r3, [sl, #15]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
     cc4:	e59d1004 	ldr	r1, [sp, #4]
     cc8:	e5ca1011 	strb	r1, [sl, #17]
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
     ccc:	e1ca20b8 	strh	r2, [sl, #8]
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
							>> 8;
					LL_1khz_control_input.direct_motor_control[6] = wpToLL.yaw
     cd0:	e59d2000 	ldr	r2, [sp]
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
					LL_1khz_control_input.roll = wpToLL.X >> 16;
     cd4:	e1a07845 	asr	r7, r5, #16
     cd8:	e1ca70b6 	strh	r7, [sl, #6]
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
					LL_1khz_control_input.direct_motor_control[5] = wpToLL.yaw
							>> 8;
					LL_1khz_control_input.direct_motor_control[6] = wpToLL.yaw
     cdc:	e5ca2012 	strb	r2, [sl, #18]
				if (wpCtrlWpCmdUpdated == 1) {
					LL_1khz_control_input.ctrl_flags &= 0x00FF;
					LL_1khz_control_input.ctrl_flags |= WP_CMD_SINGLE_WP_PART1
							<< 8;

					LL_1khz_control_input.pitch = wpToLL.X & 0xFFFF;
     ce0:	e1ca50b4 	strh	r5, [sl, #4]
					LL_1khz_control_input.roll = wpToLL.X >> 16;
					LL_1khz_control_input.thrust = wpToLL.Y & 0xFFFF;
     ce4:	e1ca60ba 	strh	r6, [sl, #10]
					LL_1khz_control_input.yaw = wpToLL.Y >> 16;
					LL_1khz_control_input.direct_motor_control[0]
     ce8:	e5cac00c 	strb	ip, [sl, #12]
							= wpToLL.height >> 8;
					LL_1khz_control_input.direct_motor_control[2]
							= wpToLL.height >> 16;
					LL_1khz_control_input.direct_motor_control[3]
							= wpToLL.height >> 24;
					LL_1khz_control_input.direct_motor_control[4] = wpToLL.yaw;
     cec:	e5ca0010 	strb	r0, [sl, #16]
     cf0:	eafffe40 	b	5f8 <HL2LL_write_cycle+0x1d4>
     cf4:	40000016 	.word	0x40000016
     cf8:	40000990 	.word	0x40000990
     cfc:	4000098d 	.word	0x4000098d
     d00:	4000176c 	.word	0x4000176c
     d04:	40001834 	.word	0x40001834
     d08:	40000a50 	.word	0x40000a50
     d0c:	400019b8 	.word	0x400019b8
     d10:	400017c0 	.word	0x400017c0
     d14:	40000976 	.word	0x40000976
     d18:	40000994 	.word	0x40000994
     d1c:	400018e0 	.word	0x400018e0
     d20:	40001828 	.word	0x40001828
     d24:	4000098c 	.word	0x4000098c
     d28:	40000983 	.word	0x40000983
     d2c:	40001818 	.word	0x40001818
     d30:	40000a4c 	.word	0x40000a4c
     d34:	40001824 	.word	0x40001824
     d38:	40000a48 	.word	0x40000a48
     d3c:	40001f06 	.word	0x40001f06
     d40:	40001780 	.word	0x40001780
     d44:	40001f0a 	.word	0x40001f0a
     d48:	40001784 	.word	0x40001784
     d4c:	4000178c 	.word	0x4000178c
     d50:	40001f0e 	.word	0x40001f0e
     d54:	40000a40 	.word	0x40000a40
     d58:	40000a41 	.word	0x40000a41
     d5c:	40000982 	.word	0x40000982
     d60:	40001dbc 	.word	0x40001dbc
     d64:	40000980 	.word	0x40000980
     d68:	40000981 	.word	0x40000981
     d6c:	40001d9c 	.word	0x40001d9c
     d70:	40001da0 	.word	0x40001da0
     d74:	40001da4 	.word	0x40001da4
     d78:	40001788 	.word	0x40001788
     d7c:	40001da8 	.word	0x40001da8
     d80:	4000178e 	.word	0x4000178e
     d84:	40001daa 	.word	0x40001daa
     d88:	40001dac 	.word	0x40001dac
     d8c:	40001db0 	.word	0x40001db0
     d90:	40001db4 	.word	0x40001db4
     d94:	40001db8 	.word	0x40001db8
     d98:	40001dba 	.word	0x40001dba
     d9c:	40000a42 	.word	0x40000a42
     da0:	4000096f 	.word	0x4000096f
     da4:	4000096e 	.word	0x4000096e
     da8:	400018e1 	.word	0x400018e1
     dac:	40000988 	.word	0x40000988
     db0:	40000984 	.word	0x40000984
     db4:	400017a4 	.word	0x400017a4
     db8:	40000972 	.word	0x40000972

00000dbc <SSP_data_distribution_HL>:

struct WAYPOINT wpToLL;

volatile unsigned char transmitBuildInfoTrigger = 0;

void SSP_data_distribution_HL(void) {
     dbc:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
	unsigned char i;
	unsigned char current_page = LL_1khz_attitude_data.system_flags & 0x03;
     dc0:	e59f630c 	ldr	r6, [pc, #780]	; 10d4 <SSP_data_distribution_HL+0x318>
     dc4:	e1d630b0 	ldrh	r3, [r6]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
     dc8:	e3130008 	tst	r3, #8

volatile unsigned char transmitBuildInfoTrigger = 0;

void SSP_data_distribution_HL(void) {
	unsigned char i;
	unsigned char current_page = LL_1khz_attitude_data.system_flags & 0x03;
     dcc:	e2037003 	and	r7, r3, #3
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;
     dd0:	159f3300 	ldrne	r3, [pc, #768]	; 10d8 <SSP_data_distribution_HL+0x31c>
     dd4:	13a02000 	movne	r2, #0
     dd8:	15832000 	strne	r2, [r3]

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
     ddc:	e1d610b6 	ldrh	r1, [r6, #6]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     de0:	e1d630f2 	ldrsh	r3, [r6, #2]
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
     de4:	e1d620f4 	ldrsh	r2, [r6, #4]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     de8:	e59f52ec 	ldr	r5, [pc, #748]	; 10dc <SSP_data_distribution_HL+0x320>

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
     dec:	e59f42ec 	ldr	r4, [pc, #748]	; 10e0 <SSP_data_distribution_HL+0x324>

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
     df0:	e1d600f8 	ldrsh	r0, [r6, #8]
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
     df4:	e1d6c0fa 	ldrsh	ip, [r6, #10]
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
     df8:	e1d6e0fc 	ldrsh	lr, [r6, #12]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     dfc:	e0833103 	add	r3, r3, r3, lsl #2
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
     e00:	e0822102 	add	r2, r2, r2, lsl #2
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
     e04:	e0811101 	add	r1, r1, r1, lsl #2
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     e08:	e1a03083 	lsl	r3, r3, #1
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
     e0c:	e1a02082 	lsl	r2, r2, #1
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
     e10:	e1a01081 	lsl	r1, r1, #1

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
     e14:	e3570000 	cmp	r7, #0

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
     e18:	e584301c 	str	r3, [r4, #28]
	RO_ALL_Data.angle_roll = IMU_CalcData.angle_roll;
     e1c:	e5842020 	str	r2, [r4, #32]
	RO_ALL_Data.angle_yaw = IMU_CalcData.angle_yaw;
     e20:	e5841024 	str	r1, [r4, #36]	; 0x24

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
     e24:	e5840028 	str	r0, [r4, #40]	; 0x28
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
     e28:	e584c02c 	str	ip, [r4, #44]	; 0x2c
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
     e2c:	e584e030 	str	lr, [r4, #48]	; 0x30
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     e30:	e5853000 	str	r3, [r5]
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
     e34:	e5852004 	str	r2, [r5, #4]
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
     e38:	e5851008 	str	r1, [r5, #8]

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
     e3c:	e585000c 	str	r0, [r5, #12]
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
     e40:	e585c010 	str	ip, [r5, #16]
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
     e44:	e585e014 	str	lr, [r5, #20]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
     e48:	e1a08005 	mov	r8, r5

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
     e4c:	e1a0a004 	mov	sl, r4

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
     e50:	1a000026 	bne	ef0 <SSP_data_distribution_HL+0x134>
     e54:	e59f0288 	ldr	r0, [pc, #648]	; 10e4 <SSP_data_distribution_HL+0x328>
     e58:	e1a01004 	mov	r1, r4
     e5c:	e1a02006 	mov	r2, r6
     e60:	e286c008 	add	ip, r6, #8
     e64:	e1a0e006 	mov	lr, r6
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
     e68:	e5d2300e 	ldrb	r3, [r2, #14]
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
     e6c:	e2822001 	add	r2, r2, #1
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
     e70:	e1a03203 	lsl	r3, r3, #4
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
     e74:	e152000c 	cmp	r2, ip
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
     e78:	e1c130bc 	strh	r3, [r1, #12]
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
     e7c:	e0c030b2 	strh	r3, [r0], #2
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
     e80:	e2811002 	add	r1, r1, #2
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
     e84:	1afffff7 	bne	e68 <SSP_data_distribution_HL+0xac>
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
     e88:	e1de32f4 	ldrsh	r3, [lr, #36]	; 0x24
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
     e8c:	e1de22f0 	ldrsh	r2, [lr, #32]
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
     e90:	e1de12f2 	ldrsh	r1, [lr, #34]	; 0x22
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
     e94:	e0833103 	add	r3, r3, r3, lsl #2
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
     e98:	e0822102 	add	r2, r2, r2, lsl #2
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
     e9c:	e0811101 	add	r1, r1, r1, lsl #2
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
     ea0:	e1a03883 	lsl	r3, r3, #17
     ea4:	e1a00823 	lsr	r0, r3, #16
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
     ea8:	e1a02882 	lsl	r2, r2, #17
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
     eac:	e1a01881 	lsl	r1, r1, #17
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
     eb0:	e1a0c822 	lsr	ip, r2, #16
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
     eb4:	e1a01821 	lsr	r1, r1, #16
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
     eb8:	e3500000 	cmp	r0, #0
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
     ebc:	e1c801bc 	strh	r0, [r8, #28]
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
     ec0:	e1c8c1b8 	strh	ip, [r8, #24]
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
     ec4:	e1c811ba 	strh	r1, [r8, #26]
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
     ec8:	1a00003a 	bne	fb8 <SSP_data_distribution_HL+0x1fc>
		RO_ALL_Data.acc_y = IMU_CalcData.acc_y_calib;
		RO_ALL_Data.acc_z = IMU_CalcData.acc_z_calib;

		RO_ALL_Data.fusion_latitude
				= LL_1khz_attitude_data.latitude_best_estimate;
		RO_ALL_Data.fusion_longitude
     ecc:	e2862018 	add	r2, r6, #24
     ed0:	e892000c 	ldm	r2, {r2, r3}
     ed4:	e58a3090 	str	r3, [sl, #144]	; 0x90

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
			SYSTEM_initialized++;

		RO_ALL_Data.acc_x = IMU_CalcData.acc_x_calib;
     ed8:	e1cac3b4 	strh	ip, [sl, #52]	; 0x34
		RO_ALL_Data.acc_y = IMU_CalcData.acc_y_calib;
     edc:	e1ca13b6 	strh	r1, [sl, #54]	; 0x36
		RO_ALL_Data.acc_z = IMU_CalcData.acc_z_calib;
     ee0:	e1ca03b8 	strh	r0, [sl, #56]	; 0x38

		RO_ALL_Data.fusion_latitude
     ee4:	e58a208c 	str	r2, [sl, #140]	; 0x8c
						= LL_1khz_attitude_data.slowDataUpChannelDataShort;
			break;

		}
	}
}
     ee8:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, sl, lr}
     eec:	e12fff1e 	bx	lr
		RO_ALL_Data.fusion_latitude
				= LL_1khz_attitude_data.latitude_best_estimate;
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
     ef0:	e3570001 	cmp	r7, #1
     ef4:	0a000037 	beq	fd8 <SSP_data_distribution_HL+0x21c>
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
     ef8:	e3570002 	cmp	r7, #2
     efc:	1afffff9 	bne	ee8 <SSP_data_distribution_HL+0x12c>
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;
     f00:	e1d634f6 	ldrsh	r3, [r6, #70]	; 0x46
		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
     f04:	e59fc1dc 	ldr	ip, [pc, #476]	; 10e8 <SSP_data_distribution_HL+0x32c>
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;
     f08:	e5853038 	str	r3, [r5, #56]	; 0x38

		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;
     f0c:	e5843044 	str	r3, [r4, #68]	; 0x44

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
     f10:	e1d635b2 	ldrh	r3, [r6, #82]	; 0x52
     f14:	e1c430b0 	strh	r3, [r4]
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
     f18:	e1dc30b0 	ldrh	r3, [ip]
     f1c:	e1c430b6 	strh	r3, [r4, #6]
		RO_ALL_Data.flight_time = HL_Status.flight_time;
     f20:	e1dc30b6 	ldrh	r3, [ip, #6]
     f24:	e1c430b4 	strh	r3, [r4, #4]
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
     f28:	e1dc31b2 	ldrh	r3, [ip, #18]
		RO_ALL_Data.HL_up_time = HL_Status.up_time;

		if (LL_1khz_attitude_data.status2 & 0x01)
     f2c:	e1d625ba 	ldrh	r2, [r6, #90]	; 0x5a
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
		RO_ALL_Data.flight_time = HL_Status.flight_time;
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
     f30:	e1c430b8 	strh	r3, [r4, #8]
		RO_ALL_Data.HL_up_time = HL_Status.up_time;
     f34:	e1dc30b4 	ldrh	r3, [ip, #4]

		if (LL_1khz_attitude_data.status2 & 0x01)
     f38:	e212e001 	ands	lr, r2, #1

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
		RO_ALL_Data.flight_time = HL_Status.flight_time;
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
		RO_ALL_Data.HL_up_time = HL_Status.up_time;
     f3c:	e1c430ba 	strh	r3, [r4, #10]

		if (LL_1khz_attitude_data.status2 & 0x01)
     f40:	e1a02802 	lsl	r2, r2, #16
			RO_ALL_Data.flying = 1;
     f44:	13a03001 	movne	r3, #1
     f48:	15c43002 	strbne	r3, [r4, #2]
		else
			RO_ALL_Data.flying = 0;

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
     f4c:	e1a038c2 	asr	r3, r2, #17
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
     f50:	e1d614f2 	ldrsh	r1, [r6, #66]	; 0x42
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
     f54:	e1d604f4 	ldrsh	r0, [r6, #68]	; 0x44
		else
			RO_ALL_Data.flying = 0;

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
     f58:	e203307f 	and	r3, r3, #127	; 0x7f
     f5c:	e2433001 	sub	r3, r3, #1
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
     f60:	e584103c 	str	r1, [r4, #60]	; 0x3c
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
     f64:	e5840040 	str	r0, [r4, #64]	; 0x40
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
     f68:	e5851030 	str	r1, [r5, #48]	; 0x30
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
     f6c:	e5850034 	str	r0, [r5, #52]	; 0x34
		RO_ALL_Data.HL_up_time = HL_Status.up_time;

		if (LL_1khz_attitude_data.status2 & 0x01)
			RO_ALL_Data.flying = 1;
		else
			RO_ALL_Data.flying = 0;
     f70:	05c4e002 	strbeq	lr, [r4, #2]

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
     f74:	e353000d 	cmp	r3, #13
     f78:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
     f7c:	eaffffd9 	b	ee8 <SSP_data_distribution_HL+0x12c>
     f80:	00001028 	.word	0x00001028
     f84:	00000ee8 	.word	0x00000ee8
     f88:	00000ee8 	.word	0x00000ee8
     f8c:	00000ee8 	.word	0x00000ee8
     f90:	00000ee8 	.word	0x00000ee8
     f94:	00001034 	.word	0x00001034
     f98:	00001044 	.word	0x00001044
     f9c:	00001054 	.word	0x00001054
     fa0:	00000ee8 	.word	0x00000ee8
     fa4:	00000ee8 	.word	0x00000ee8
     fa8:	00000ee8 	.word	0x00000ee8
     fac:	00000ee8 	.word	0x00000ee8
     fb0:	00001064 	.word	0x00001064
     fb4:	00001094 	.word	0x00001094
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
     fb8:	e59f212c 	ldr	r2, [pc, #300]	; 10ec <SSP_data_distribution_HL+0x330>
     fbc:	e5d23000 	ldrb	r3, [r2]
     fc0:	e3530009 	cmp	r3, #9
			SYSTEM_initialized++;
     fc4:	95d23000 	ldrbls	r3, [r2]
     fc8:	92833001 	addls	r3, r3, #1
     fcc:	920330ff 	andls	r3, r3, #255	; 0xff
     fd0:	95c23000 	strbls	r3, [r2]
     fd4:	eaffffbc 	b	ecc <SSP_data_distribution_HL+0x110>
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;
     fd8:	e1d634f0 	ldrsh	r3, [r6, #64]	; 0x40
     fdc:	e5853050 	str	r3, [r5, #80]	; 0x50

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;
     fe0:	e5843088 	str	r3, [r4, #136]	; 0x88

		RO_ALL_Data.fusion_speed_x
     fe4:	e1d633b8 	ldrh	r3, [r6, #56]	; 0x38
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
     fe8:	e596203c 	ldr	r2, [r6, #60]	; 0x3c
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_speed_x
     fec:	e1c439b4 	strh	r3, [r4, #148]	; 0x94
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
     ff0:	e1d633ba 	ldrh	r3, [r6, #58]	; 0x3a
	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
     ff4:	e5842084 	str	r2, [r4, #132]	; 0x84
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
     ff8:	e585204c 	str	r2, [r5, #76]	; 0x4c
		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
     ffc:	e1c439b6 	strh	r3, [r4, #150]	; 0x96
    1000:	e1a00004 	mov	r0, r4
    1004:	e3a01000 	mov	r1, #0
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
    1008:	e0813006 	add	r3, r1, r6
    100c:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
    1010:	e2811001 	add	r1, r1, #1

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
    1014:	e3510006 	cmp	r1, #6
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
    1018:	e5c02048 	strb	r2, [r0, #72]	; 0x48
    101c:	e2800001 	add	r0, r0, #1

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
    1020:	1afffff8 	bne	1008 <SSP_data_distribution_HL+0x24c>
    1024:	eaffffaf 	b	ee8 <SSP_data_distribution_HL+0x12c>
		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
		case SUDC_FLIGHTTIME:

			HL_Status.flight_time
    1028:	e1d665b4 	ldrh	r6, [r6, #84]	; 0x54
    102c:	e1cc60b6 	strh	r6, [ip, #6]
    1030:	eaffffac 	b	ee8 <SSP_data_distribution_HL+0x12c>
					= LL_1khz_attitude_data.slowDataUpChannelDataShort;
			break;
		case SUDC_NAVSTATUS:
			wpCtrlNavStatus = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1034:	e59f30b4 	ldr	r3, [pc, #180]	; 10f0 <SSP_data_distribution_HL+0x334>
    1038:	e1d665b4 	ldrh	r6, [r6, #84]	; 0x54
    103c:	e1c360b0 	strh	r6, [r3]
    1040:	eaffffa8 	b	ee8 <SSP_data_distribution_HL+0x12c>
			break;
		case SUDC_DISTTOWP:
			wpCtrlDistToWp = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1044:	e59f30a8 	ldr	r3, [pc, #168]	; 10f4 <SSP_data_distribution_HL+0x338>
    1048:	e1d665b4 	ldrh	r6, [r6, #84]	; 0x54
    104c:	e1c360b0 	strh	r6, [r3]
    1050:	eaffffa4 	b	ee8 <SSP_data_distribution_HL+0x12c>
			break;
		case SUDC_WPACKTRIGGER:
			wpCtrlAckTrigger = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1054:	e1d625b4 	ldrh	r2, [r6, #84]	; 0x54
    1058:	e59f3098 	ldr	r3, [pc, #152]	; 10f8 <SSP_data_distribution_HL+0x33c>
    105c:	e5c32000 	strb	r2, [r3]
    1060:	eaffffa0 	b	ee8 <SSP_data_distribution_HL+0x12c>
			//if ((LL_1khz_attitude_data.slowDataUpChannelDataShort == OM_HEX)
			//		&& (fireflyLedEnabled == 0))
			//	fireflyLedEnabled = 1;
			break;
		case SUDC_JETIKEYVAL:
			if (oldKey != LL_1khz_attitude_data.slowDataUpChannelDataShort)
    1064:	e59f4090 	ldr	r4, [pc, #144]	; 10fc <SSP_data_distribution_HL+0x340>
    1068:	e1d605b4 	ldrh	r0, [r6, #84]	; 0x54
    106c:	e5d42000 	ldrb	r2, [r4]
    1070:	e1a03800 	lsl	r3, r0, #16
    1074:	e1520843 	cmp	r2, r3, asr #16
    1078:	0a000003 	beq	108c <SSP_data_distribution_HL+0x2d0>
				jetiSetKeyChanged(
    107c:	e20000ff 	and	r0, r0, #255	; 0xff
    1080:	eb00130a 	bl	5cb0 <jetiSetKeyChanged>
    1084:	e59f3048 	ldr	r3, [pc, #72]	; 10d4 <SSP_data_distribution_HL+0x318>
    1088:	e1d305b4 	ldrh	r0, [r3, #84]	; 0x54
						LL_1khz_attitude_data.slowDataUpChannelDataShort);
			oldKey = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    108c:	e5c40000 	strb	r0, [r4]
    1090:	eaffff94 	b	ee8 <SSP_data_distribution_HL+0x12c>
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
    1094:	e59fc064 	ldr	ip, [pc, #100]	; 1100 <SSP_data_distribution_HL+0x344>
    1098:	e5dc3000 	ldrb	r3, [ip]
    109c:	e3530002 	cmp	r3, #2
						!= emergencyMode)
					emergencyModeUpdate = 1;
				else
					emergencyModeUpdate = 0;
			} else
				emergencyMode
    10a0:	11d625b4 	ldrhne	r2, [r6, #84]	; 0x54
    10a4:	159f3058 	ldrne	r3, [pc, #88]	; 1104 <SSP_data_distribution_HL+0x348>
    10a8:	15c32000 	strbne	r2, [r3]
    10ac:	1affff8d 	bne	ee8 <SSP_data_distribution_HL+0x12c>
						LL_1khz_attitude_data.slowDataUpChannelDataShort);
			oldKey = LL_1khz_attitude_data.slowDataUpChannelDataShort;
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
				if (LL_1khz_attitude_data.slowDataUpChannelDataShort
    10b0:	e59f204c 	ldr	r2, [pc, #76]	; 1104 <SSP_data_distribution_HL+0x348>
    10b4:	e1d635f4 	ldrsh	r3, [r6, #84]	; 0x54
    10b8:	e5d21000 	ldrb	r1, [r2]
    10bc:	e1530001 	cmp	r3, r1
						!= emergencyMode)
					emergencyModeUpdate = 1;
    10c0:	13a03001 	movne	r3, #1
				else
					emergencyModeUpdate = 0;
    10c4:	03a03000 	moveq	r3, #0
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
				if (LL_1khz_attitude_data.slowDataUpChannelDataShort
						!= emergencyMode)
					emergencyModeUpdate = 1;
    10c8:	15cc3000 	strbne	r3, [ip]
				else
					emergencyModeUpdate = 0;
    10cc:	05cc3000 	strbeq	r3, [ip]
    10d0:	eaffff84 	b	ee8 <SSP_data_distribution_HL+0x12c>
    10d4:	4000170c 	.word	0x4000170c
    10d8:	40000990 	.word	0x40000990
    10dc:	4000195c 	.word	0x4000195c
    10e0:	40001848 	.word	0x40001848
    10e4:	40001838 	.word	0x40001838
    10e8:	400019b8 	.word	0x400019b8
    10ec:	400009ec 	.word	0x400009ec
    10f0:	40000972 	.word	0x40000972
    10f4:	40000974 	.word	0x40000974
    10f8:	40000970 	.word	0x40000970
    10fc:	4000098e 	.word	0x4000098e
    1100:	40000994 	.word	0x40000994
    1104:	400018e0 	.word	0x400018e0

00001108 <SSP_rx_handler_HL>:
	SPIWR_num_bytes = 42;
	data_sent_to_LL = 0;
}

inline void SSP_rx_handler_HL(unsigned char SPI_rxdata) //rx_handler @ high-level processor
{
    1108:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	static volatile unsigned char SPI_rxcount = 0;
	static volatile unsigned char *SPI_rxptr;
	static volatile unsigned char incoming_page;

	//receive handler
	if (SPI_syncstate == 0) {
    110c:	e59f2464 	ldr	r2, [pc, #1124]	; 1578 <SSP_rx_handler_HL+0x470>
    1110:	e5d23000 	ldrb	r3, [r2]
    1114:	e20330ff 	and	r3, r3, #255	; 0xff
    1118:	e3530000 	cmp	r3, #0
	SPIWR_num_bytes = 42;
	data_sent_to_LL = 0;
}

inline void SSP_rx_handler_HL(unsigned char SPI_rxdata) //rx_handler @ high-level processor
{
    111c:	e20000ff 	and	r0, r0, #255	; 0xff
	static volatile unsigned char SPI_rxcount = 0;
	static volatile unsigned char *SPI_rxptr;
	static volatile unsigned char incoming_page;

	//receive handler
	if (SPI_syncstate == 0) {
    1120:	e1a06002 	mov	r6, r2
    1124:	1a000004 	bne	113c <SSP_rx_handler_HL+0x34>
		if (SPI_rxdata == '>')
    1128:	e350003e 	cmp	r0, #62	; 0x3e
    112c:	0a000011 	beq	1178 <SSP_rx_handler_HL+0x70>
			SSP_data_distribution_HL(); //only distribute data to other structs, if it was received correctly
			//ack data receiption
		}
		SPI_syncstate = 0;
	} else
		SPI_syncstate = 0;
    1130:	e5c23000 	strb	r3, [r2]
}
    1134:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    1138:	e12fff1e 	bx	lr
	if (SPI_syncstate == 0) {
		if (SPI_rxdata == '>')
			SPI_syncstate++;
		else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 1) {
    113c:	e5d23000 	ldrb	r3, [r2]
    1140:	e3530001 	cmp	r3, #1
    1144:	0a000010 	beq	118c <SSP_rx_handler_HL+0x84>
			SPI_syncstate++;
			SPI_rxptr = (unsigned char *) &LL_1khz_attitude_data;
			SPI_rxcount = 40;
		} else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 2) {
    1148:	e5d23000 	ldrb	r3, [r2]
    114c:	e3530002 	cmp	r3, #2
    1150:	0a00001c 	beq	11c8 <SSP_rx_handler_HL+0xc0>
		*SPI_rxptr = SPI_rxdata;
		SPI_rxptr++;
		if (SPI_rxcount == 0) {
			SPI_syncstate++;
		}
	} else if (SPI_syncstate == 3) {
    1154:	e5d23000 	ldrb	r3, [r2]
    1158:	e3530003 	cmp	r3, #3
			SSP_data_distribution_HL(); //only distribute data to other structs, if it was received correctly
			//ack data receiption
		}
		SPI_syncstate = 0;
	} else
		SPI_syncstate = 0;
    115c:	13a03000 	movne	r3, #0
		*SPI_rxptr = SPI_rxdata;
		SPI_rxptr++;
		if (SPI_rxcount == 0) {
			SPI_syncstate++;
		}
	} else if (SPI_syncstate == 3) {
    1160:	1afffff2 	bne	1130 <SSP_rx_handler_HL+0x28>
		if (SPI_rxdata == '<') //last byte ok => data should be valid
    1164:	e350003c 	cmp	r0, #60	; 0x3c
    1168:	0a000039 	beq	1254 <SSP_rx_handler_HL+0x14c>
		{
			SSP_data_distribution_HL(); //only distribute data to other structs, if it was received correctly
			//ack data receiption
		}
		SPI_syncstate = 0;
    116c:	e3a03000 	mov	r3, #0
    1170:	e5c63000 	strb	r3, [r6]
    1174:	eaffffee 	b	1134 <SSP_rx_handler_HL+0x2c>
	static volatile unsigned char incoming_page;

	//receive handler
	if (SPI_syncstate == 0) {
		if (SPI_rxdata == '>')
			SPI_syncstate++;
    1178:	e5d23000 	ldrb	r3, [r2]
    117c:	e2833001 	add	r3, r3, #1
    1180:	e20330ff 	and	r3, r3, #255	; 0xff
    1184:	e5c23000 	strb	r3, [r2]
    1188:	eaffffe9 	b	1134 <SSP_rx_handler_HL+0x2c>
		else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 1) {
		if (SPI_rxdata == '*') {
    118c:	e350002a 	cmp	r0, #42	; 0x2a
			SPI_syncstate++;
			SPI_rxptr = (unsigned char *) &LL_1khz_attitude_data;
			SPI_rxcount = 40;
		} else
			SPI_syncstate = 0;
    1190:	13a03000 	movne	r3, #0
    1194:	15c23000 	strbne	r3, [r2]
		if (SPI_rxdata == '>')
			SPI_syncstate++;
		else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 1) {
		if (SPI_rxdata == '*') {
    1198:	1affffe5 	bne	1134 <SSP_rx_handler_HL+0x2c>
			SPI_syncstate++;
    119c:	e5d23000 	ldrb	r3, [r2]
    11a0:	e2833001 	add	r3, r3, #1
    11a4:	e20330ff 	and	r3, r3, #255	; 0xff
    11a8:	e5c23000 	strb	r3, [r2]
			SPI_rxptr = (unsigned char *) &LL_1khz_attitude_data;
    11ac:	e59f33c8 	ldr	r3, [pc, #968]	; 157c <SSP_rx_handler_HL+0x474>
    11b0:	e59f23c8 	ldr	r2, [pc, #968]	; 1580 <SSP_rx_handler_HL+0x478>
    11b4:	e5832000 	str	r2, [r3]
			SPI_rxcount = 40;
    11b8:	e59f33c4 	ldr	r3, [pc, #964]	; 1584 <SSP_rx_handler_HL+0x47c>
    11bc:	e3a01028 	mov	r1, #40	; 0x28
    11c0:	e5c31000 	strb	r1, [r3]
    11c4:	eaffffda 	b	1134 <SSP_rx_handler_HL+0x2c>
		} else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 2) {
		if (SPI_rxcount == 26) //14 bytes transmitted => select 500Hz page
    11c8:	e59fc3b4 	ldr	ip, [pc, #948]	; 1584 <SSP_rx_handler_HL+0x47c>
    11cc:	e5dc3000 	ldrb	r3, [ip]
    11d0:	e353001a 	cmp	r3, #26
    11d4:	0a00000e 	beq	1214 <SSP_rx_handler_HL+0x10c>
    11d8:	e59f139c 	ldr	r1, [pc, #924]	; 157c <SSP_rx_handler_HL+0x474>
			if (incoming_page == 1)
				SPI_rxptr += 26;
			else if (incoming_page == 2)
				SPI_rxptr += 52;
		}
		SPI_rxcount--;
    11dc:	e5dc3000 	ldrb	r3, [ip]
		*SPI_rxptr = SPI_rxdata;
    11e0:	e5912000 	ldr	r2, [r1]
			if (incoming_page == 1)
				SPI_rxptr += 26;
			else if (incoming_page == 2)
				SPI_rxptr += 52;
		}
		SPI_rxcount--;
    11e4:	e2433001 	sub	r3, r3, #1
    11e8:	e20330ff 	and	r3, r3, #255	; 0xff
    11ec:	e5cc3000 	strb	r3, [ip]
		*SPI_rxptr = SPI_rxdata;
    11f0:	e4c20001 	strb	r0, [r2], #1
		SPI_rxptr++;
		if (SPI_rxcount == 0) {
    11f4:	e5dc3000 	ldrb	r3, [ip]
    11f8:	e3530000 	cmp	r3, #0
			else if (incoming_page == 2)
				SPI_rxptr += 52;
		}
		SPI_rxcount--;
		*SPI_rxptr = SPI_rxdata;
		SPI_rxptr++;
    11fc:	e5812000 	str	r2, [r1]
		if (SPI_rxcount == 0) {
			SPI_syncstate++;
    1200:	05d63000 	ldrbeq	r3, [r6]
    1204:	02833001 	addeq	r3, r3, #1
    1208:	020330ff 	andeq	r3, r3, #255	; 0xff
    120c:	05c63000 	strbeq	r3, [r6]
    1210:	eaffffc7 	b	1134 <SSP_rx_handler_HL+0x2c>
		} else
			SPI_syncstate = 0;
	} else if (SPI_syncstate == 2) {
		if (SPI_rxcount == 26) //14 bytes transmitted => select 500Hz page
		{
			incoming_page = LL_1khz_attitude_data.system_flags & 0x03; //system flags were already received
    1214:	e59f3364 	ldr	r3, [pc, #868]	; 1580 <SSP_rx_handler_HL+0x478>
    1218:	e1d320b0 	ldrh	r2, [r3]
    121c:	e59f1364 	ldr	r1, [pc, #868]	; 1588 <SSP_rx_handler_HL+0x480>
    1220:	e2022003 	and	r2, r2, #3
    1224:	e5c12000 	strb	r2, [r1]
			if (incoming_page == 1)
    1228:	e5d13000 	ldrb	r3, [r1]
    122c:	e3530001 	cmp	r3, #1
    1230:	0a0000ae 	beq	14f0 <SSP_rx_handler_HL+0x3e8>
				SPI_rxptr += 26;
			else if (incoming_page == 2)
    1234:	e5d13000 	ldrb	r3, [r1]
    1238:	e3530002 	cmp	r3, #2
    123c:	1affffe5 	bne	11d8 <SSP_rx_handler_HL+0xd0>
				SPI_rxptr += 52;
    1240:	e59f1334 	ldr	r1, [pc, #820]	; 157c <SSP_rx_handler_HL+0x474>
    1244:	e5913000 	ldr	r3, [r1]
    1248:	e2833034 	add	r3, r3, #52	; 0x34
    124c:	e5813000 	str	r3, [r1]
    1250:	eaffffe1 	b	11dc <SSP_rx_handler_HL+0xd4>

volatile unsigned char transmitBuildInfoTrigger = 0;

void SSP_data_distribution_HL(void) {
	unsigned char i;
	unsigned char current_page = LL_1khz_attitude_data.system_flags & 0x03;
    1254:	e59f7324 	ldr	r7, [pc, #804]	; 1580 <SSP_rx_handler_HL+0x478>
    1258:	e1d730b0 	ldrh	r3, [r7]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
    125c:	e3130008 	tst	r3, #8

volatile unsigned char transmitBuildInfoTrigger = 0;

void SSP_data_distribution_HL(void) {
	unsigned char i;
	unsigned char current_page = LL_1khz_attitude_data.system_flags & 0x03;
    1260:	e2038003 	and	r8, r3, #3
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;
    1264:	159f3320 	ldrne	r3, [pc, #800]	; 158c <SSP_rx_handler_HL+0x484>
    1268:	13a02000 	movne	r2, #0
    126c:	15832000 	strne	r2, [r3]

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
    1270:	e1d710b6 	ldrh	r1, [r7, #6]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    1274:	e1d730f2 	ldrsh	r3, [r7, #2]
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
    1278:	e1d720f4 	ldrsh	r2, [r7, #4]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    127c:	e59f530c 	ldr	r5, [pc, #780]	; 1590 <SSP_rx_handler_HL+0x488>

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
    1280:	e59f430c 	ldr	r4, [pc, #780]	; 1594 <SSP_rx_handler_HL+0x48c>

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
    1284:	e1d700f8 	ldrsh	r0, [r7, #8]
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
    1288:	e1d7c0fa 	ldrsh	ip, [r7, #10]
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
    128c:	e1d7e0fc 	ldrsh	lr, [r7, #12]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    1290:	e0833103 	add	r3, r3, r3, lsl #2
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
    1294:	e0822102 	add	r2, r2, r2, lsl #2
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
    1298:	e0811101 	add	r1, r1, r1, lsl #2
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    129c:	e1a03083 	lsl	r3, r3, #1
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
    12a0:	e1a02082 	lsl	r2, r2, #1
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
    12a4:	e1a01081 	lsl	r1, r1, #1

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
    12a8:	e3580000 	cmp	r8, #0

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
    12ac:	e584301c 	str	r3, [r4, #28]
	RO_ALL_Data.angle_roll = IMU_CalcData.angle_roll;
    12b0:	e5842020 	str	r2, [r4, #32]
	RO_ALL_Data.angle_yaw = IMU_CalcData.angle_yaw;
    12b4:	e5841024 	str	r1, [r4, #36]	; 0x24

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
    12b8:	e5840028 	str	r0, [r4, #40]	; 0x28
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
    12bc:	e584c02c 	str	ip, [r4, #44]	; 0x2c
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
    12c0:	e584e030 	str	lr, [r4, #48]	; 0x30
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    12c4:	e5853000 	str	r3, [r5]
	IMU_CalcData.angle_roll = LL_1khz_attitude_data.angle_roll * 10;
    12c8:	e5852004 	str	r2, [r5, #4]
	IMU_CalcData.angle_yaw = LL_1khz_attitude_data.angle_yaw * 10;
    12cc:	e5851008 	str	r1, [r5, #8]

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
    12d0:	e585000c 	str	r0, [r5, #12]
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
    12d4:	e585c010 	str	ip, [r5, #16]
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;
    12d8:	e585e014 	str	lr, [r5, #20]
	static unsigned char oldKey = 0;

	if (LL_1khz_attitude_data.system_flags & SF_GPS_NEW)
		gpsDataOkTrigger = 0;

	IMU_CalcData.angle_nick = LL_1khz_attitude_data.angle_pitch * 10;
    12dc:	e1a09005 	mov	r9, r5

	IMU_CalcData.angvel_nick = LL_1khz_attitude_data.angvel_pitch;
	IMU_CalcData.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	IMU_CalcData.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	RO_ALL_Data.angle_pitch = IMU_CalcData.angle_nick;
    12e0:	e1a0a004 	mov	sl, r4

	RO_ALL_Data.angvel_pitch = LL_1khz_attitude_data.angvel_pitch;
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
    12e4:	1a00002c 	bne	139c <SSP_rx_handler_HL+0x294>
    12e8:	e59f02a8 	ldr	r0, [pc, #680]	; 1598 <SSP_rx_handler_HL+0x490>
    12ec:	e1a01004 	mov	r1, r4
    12f0:	e1a02007 	mov	r2, r7
    12f4:	e287c008 	add	ip, r7, #8
    12f8:	e1a0e007 	mov	lr, r7
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
    12fc:	e5d2300e 	ldrb	r3, [r2, #14]
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
    1300:	e2822001 	add	r2, r2, #1
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
    1304:	e1a03203 	lsl	r3, r3, #4
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
    1308:	e15c0002 	cmp	ip, r2
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
    130c:	e1c130bc 	strh	r3, [r1, #12]
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
    1310:	e0c030b2 	strh	r3, [r0], #2
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
    1314:	e2811002 	add	r1, r1, #2
	RO_ALL_Data.angvel_roll = LL_1khz_attitude_data.angvel_roll;
	RO_ALL_Data.angvel_yaw = LL_1khz_attitude_data.angvel_yaw;

	if (!current_page) //page 0
	{
		for (i = 0; i < 8; i++) {
    1318:	1afffff7 	bne	12fc <SSP_rx_handler_HL+0x1f4>
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
    131c:	e1de32f4 	ldrsh	r3, [lr, #36]	; 0x24
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
    1320:	e1de22f0 	ldrsh	r2, [lr, #32]
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
    1324:	e1de12f2 	ldrsh	r1, [lr, #34]	; 0x22
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
    1328:	e0833103 	add	r3, r3, r3, lsl #2
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
    132c:	e0822102 	add	r2, r2, r2, lsl #2
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
    1330:	e0811101 	add	r1, r1, r1, lsl #2
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
    1334:	e1a03883 	lsl	r3, r3, #17
    1338:	e1a00823 	lsr	r0, r3, #16
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
    133c:	e1a02882 	lsl	r2, r2, #17
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
    1340:	e1a01881 	lsl	r1, r1, #17
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
    1344:	e1a0c822 	lsr	ip, r2, #16
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
    1348:	e1a01821 	lsr	r1, r1, #16
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
    134c:	e3500000 	cmp	r0, #0
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;
    1350:	e1c901bc 	strh	r0, [r9, #28]
	{
		for (i = 0; i < 8; i++) {
			RO_RC_Data.channel[i] = LL_1khz_attitude_data.RC_data[i] * 16;
			RO_ALL_Data.channel[i] = RO_RC_Data.channel[i];
		}
		IMU_CalcData.acc_x_calib = LL_1khz_attitude_data.acc_x * 10;
    1354:	e1c9c1b8 	strh	ip, [r9, #24]
		IMU_CalcData.acc_y_calib = LL_1khz_attitude_data.acc_y * 10;
    1358:	e1c911ba 	strh	r1, [r9, #26]
		IMU_CalcData.acc_z_calib = LL_1khz_attitude_data.acc_z * 10;

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
    135c:	0a000006 	beq	137c <SSP_rx_handler_HL+0x274>
    1360:	e59f2234 	ldr	r2, [pc, #564]	; 159c <SSP_rx_handler_HL+0x494>
    1364:	e5d23000 	ldrb	r3, [r2]
    1368:	e3530009 	cmp	r3, #9
			SYSTEM_initialized++;
    136c:	95d23000 	ldrbls	r3, [r2]
    1370:	92833001 	addls	r3, r3, #1
    1374:	920330ff 	andls	r3, r3, #255	; 0xff
    1378:	95c23000 	strbls	r3, [r2]
		RO_ALL_Data.acc_y = IMU_CalcData.acc_y_calib;
		RO_ALL_Data.acc_z = IMU_CalcData.acc_z_calib;

		RO_ALL_Data.fusion_latitude
				= LL_1khz_attitude_data.latitude_best_estimate;
		RO_ALL_Data.fusion_longitude
    137c:	e2872018 	add	r2, r7, #24
    1380:	e892000c 	ldm	r2, {r2, r3}
    1384:	e58a3090 	str	r3, [sl, #144]	; 0x90

		//system is initialized as soon as values differ from 0
		if (IMU_CalcData.acc_z_calib && (SYSTEM_initialized < 10))
			SYSTEM_initialized++;

		RO_ALL_Data.acc_x = IMU_CalcData.acc_x_calib;
    1388:	e1cac3b4 	strh	ip, [sl, #52]	; 0x34
		RO_ALL_Data.acc_y = IMU_CalcData.acc_y_calib;
    138c:	e1ca13b6 	strh	r1, [sl, #54]	; 0x36
		RO_ALL_Data.acc_z = IMU_CalcData.acc_z_calib;
    1390:	e1ca03b8 	strh	r0, [sl, #56]	; 0x38

		RO_ALL_Data.fusion_latitude
    1394:	e58a208c 	str	r2, [sl, #140]	; 0x8c
    1398:	eaffff73 	b	116c <SSP_rx_handler_HL+0x64>
				= LL_1khz_attitude_data.latitude_best_estimate;
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
    139c:	e3580001 	cmp	r8, #1
    13a0:	0a000057 	beq	1504 <SSP_rx_handler_HL+0x3fc>
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
    13a4:	e3580002 	cmp	r8, #2
    13a8:	1affff6f 	bne	116c <SSP_rx_handler_HL+0x64>
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;
    13ac:	e1d734f6 	ldrsh	r3, [r7, #70]	; 0x46
		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
    13b0:	e59fc1e8 	ldr	ip, [pc, #488]	; 15a0 <SSP_rx_handler_HL+0x498>
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;
    13b4:	e5853038 	str	r3, [r5, #56]	; 0x38

		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;
    13b8:	e5843044 	str	r3, [r4, #68]	; 0x44

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
    13bc:	e1d735b2 	ldrh	r3, [r7, #82]	; 0x52
    13c0:	e1c430b0 	strh	r3, [r4]
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
    13c4:	e1dc30b0 	ldrh	r3, [ip]
    13c8:	e1c430b6 	strh	r3, [r4, #6]
		RO_ALL_Data.flight_time = HL_Status.flight_time;
    13cc:	e1dc30b6 	ldrh	r3, [ip, #6]
    13d0:	e1c430b4 	strh	r3, [r4, #4]
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
    13d4:	e1dc31b2 	ldrh	r3, [ip, #18]
		RO_ALL_Data.HL_up_time = HL_Status.up_time;

		if (LL_1khz_attitude_data.status2 & 0x01)
    13d8:	e1d725ba 	ldrh	r2, [r7, #90]	; 0x5a
		RO_ALL_Data.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
		RO_ALL_Data.flight_time = HL_Status.flight_time;
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
    13dc:	e1c430b8 	strh	r3, [r4, #8]
		RO_ALL_Data.HL_up_time = HL_Status.up_time;
    13e0:	e1dc30b4 	ldrh	r3, [ip, #4]

		if (LL_1khz_attitude_data.status2 & 0x01)
    13e4:	e212e001 	ands	lr, r2, #1

		RO_ALL_Data.UAV_status = LL_1khz_attitude_data.flightMode;
		RO_ALL_Data.battery_voltage = HL_Status.battery_voltage_1;
		RO_ALL_Data.flight_time = HL_Status.flight_time;
		RO_ALL_Data.HL_cpu_load = HL_Status.cpu_load;
		RO_ALL_Data.HL_up_time = HL_Status.up_time;
    13e8:	e1c430ba 	strh	r3, [r4, #10]

		if (LL_1khz_attitude_data.status2 & 0x01)
    13ec:	e1a02802 	lsl	r2, r2, #16
			RO_ALL_Data.flying = 1;
    13f0:	13a03001 	movne	r3, #1
    13f4:	15c43002 	strbne	r3, [r4, #2]
		else
			RO_ALL_Data.flying = 0;

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
    13f8:	e1a038c2 	asr	r3, r2, #17
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
    13fc:	e1d714f2 	ldrsh	r1, [r7, #66]	; 0x42
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
    1400:	e1d704f4 	ldrsh	r0, [r7, #68]	; 0x44
		else
			RO_ALL_Data.flying = 0;

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
    1404:	e203307f 	and	r3, r3, #127	; 0x7f
    1408:	e2433001 	sub	r3, r3, #1
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
		IMU_CalcData.Hz = LL_1khz_attitude_data.mag_z;

		RO_ALL_Data.Hx = LL_1khz_attitude_data.mag_x;
    140c:	e584103c 	str	r1, [r4, #60]	; 0x3c
		RO_ALL_Data.Hy = LL_1khz_attitude_data.mag_y;
    1410:	e5840040 	str	r0, [r4, #64]	; 0x40
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
		}
	} else if (current_page == 2) {
		IMU_CalcData.Hx = LL_1khz_attitude_data.mag_x;
    1414:	e5851030 	str	r1, [r5, #48]	; 0x30
		IMU_CalcData.Hy = LL_1khz_attitude_data.mag_y;
    1418:	e5850034 	str	r0, [r5, #52]	; 0x34
		RO_ALL_Data.HL_up_time = HL_Status.up_time;

		if (LL_1khz_attitude_data.status2 & 0x01)
			RO_ALL_Data.flying = 1;
		else
			RO_ALL_Data.flying = 0;
    141c:	05c4e002 	strbeq	lr, [r4, #2]

		unsigned char slowDataUpChannelSelect = (LL_1khz_attitude_data.status2
				>> 1) & 0x7F;
		switch (slowDataUpChannelSelect) {
    1420:	e353000d 	cmp	r3, #13
    1424:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    1428:	eaffff4f 	b	116c <SSP_rx_handler_HL+0x64>
    142c:	00001464 	.word	0x00001464
    1430:	0000116c 	.word	0x0000116c
    1434:	0000116c 	.word	0x0000116c
    1438:	0000116c 	.word	0x0000116c
    143c:	0000116c 	.word	0x0000116c
    1440:	00001470 	.word	0x00001470
    1444:	00001480 	.word	0x00001480
    1448:	00001490 	.word	0x00001490
    144c:	0000116c 	.word	0x0000116c
    1450:	0000116c 	.word	0x0000116c
    1454:	0000116c 	.word	0x0000116c
    1458:	0000116c 	.word	0x0000116c
    145c:	000014a0 	.word	0x000014a0
    1460:	000014d0 	.word	0x000014d0
		case SUDC_FLIGHTTIME:

			HL_Status.flight_time
    1464:	e1d775b4 	ldrh	r7, [r7, #84]	; 0x54
    1468:	e1cc70b6 	strh	r7, [ip, #6]
    146c:	eaffff3e 	b	116c <SSP_rx_handler_HL+0x64>
					= LL_1khz_attitude_data.slowDataUpChannelDataShort;
			break;
		case SUDC_NAVSTATUS:
			wpCtrlNavStatus = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1470:	e59f312c 	ldr	r3, [pc, #300]	; 15a4 <SSP_rx_handler_HL+0x49c>
    1474:	e1d775b4 	ldrh	r7, [r7, #84]	; 0x54
    1478:	e1c370b0 	strh	r7, [r3]
    147c:	eaffff3a 	b	116c <SSP_rx_handler_HL+0x64>
			break;
		case SUDC_DISTTOWP:
			wpCtrlDistToWp = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1480:	e59f3120 	ldr	r3, [pc, #288]	; 15a8 <SSP_rx_handler_HL+0x4a0>
    1484:	e1d775b4 	ldrh	r7, [r7, #84]	; 0x54
    1488:	e1c370b0 	strh	r7, [r3]
    148c:	eaffff36 	b	116c <SSP_rx_handler_HL+0x64>
			break;
		case SUDC_WPACKTRIGGER:
			wpCtrlAckTrigger = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    1490:	e1d725b4 	ldrh	r2, [r7, #84]	; 0x54
    1494:	e59f3110 	ldr	r3, [pc, #272]	; 15ac <SSP_rx_handler_HL+0x4a4>
    1498:	e5c32000 	strb	r2, [r3]
    149c:	eaffff32 	b	116c <SSP_rx_handler_HL+0x64>
			//if ((LL_1khz_attitude_data.slowDataUpChannelDataShort == OM_HEX)
			//		&& (fireflyLedEnabled == 0))
			//	fireflyLedEnabled = 1;
			break;
		case SUDC_JETIKEYVAL:
			if (oldKey != LL_1khz_attitude_data.slowDataUpChannelDataShort)
    14a0:	e59f4108 	ldr	r4, [pc, #264]	; 15b0 <SSP_rx_handler_HL+0x4a8>
    14a4:	e1d705b4 	ldrh	r0, [r7, #84]	; 0x54
    14a8:	e5d42000 	ldrb	r2, [r4]
    14ac:	e1a03800 	lsl	r3, r0, #16
    14b0:	e1520843 	cmp	r2, r3, asr #16
    14b4:	0a000003 	beq	14c8 <SSP_rx_handler_HL+0x3c0>
				jetiSetKeyChanged(
    14b8:	e20000ff 	and	r0, r0, #255	; 0xff
    14bc:	eb0011fb 	bl	5cb0 <jetiSetKeyChanged>
    14c0:	e59f30b8 	ldr	r3, [pc, #184]	; 1580 <SSP_rx_handler_HL+0x478>
    14c4:	e1d305b4 	ldrh	r0, [r3, #84]	; 0x54
						LL_1khz_attitude_data.slowDataUpChannelDataShort);
			oldKey = LL_1khz_attitude_data.slowDataUpChannelDataShort;
    14c8:	e5c40000 	strb	r0, [r4]
    14cc:	eaffff26 	b	116c <SSP_rx_handler_HL+0x64>
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
    14d0:	e59f00dc 	ldr	r0, [pc, #220]	; 15b4 <SSP_rx_handler_HL+0x4ac>
    14d4:	e5d03000 	ldrb	r3, [r0]
    14d8:	e3530002 	cmp	r3, #2
    14dc:	0a00001c 	beq	1554 <SSP_rx_handler_HL+0x44c>
						!= emergencyMode)
					emergencyModeUpdate = 1;
				else
					emergencyModeUpdate = 0;
			} else
				emergencyMode
    14e0:	e1d725b4 	ldrh	r2, [r7, #84]	; 0x54
    14e4:	e59f30cc 	ldr	r3, [pc, #204]	; 15b8 <SSP_rx_handler_HL+0x4b0>
    14e8:	e5c32000 	strb	r2, [r3]
    14ec:	eaffff1e 	b	116c <SSP_rx_handler_HL+0x64>
	} else if (SPI_syncstate == 2) {
		if (SPI_rxcount == 26) //14 bytes transmitted => select 500Hz page
		{
			incoming_page = LL_1khz_attitude_data.system_flags & 0x03; //system flags were already received
			if (incoming_page == 1)
				SPI_rxptr += 26;
    14f0:	e59f1084 	ldr	r1, [pc, #132]	; 157c <SSP_rx_handler_HL+0x474>
    14f4:	e5913000 	ldr	r3, [r1]
    14f8:	e283301a 	add	r3, r3, #26
    14fc:	e5813000 	str	r3, [r1]
    1500:	eaffff35 	b	11dc <SSP_rx_handler_HL+0xd4>
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;
    1504:	e1d734f0 	ldrsh	r3, [r7, #64]	; 0x40
    1508:	e5853050 	str	r3, [r5, #80]	; 0x50

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;
    150c:	e5843088 	str	r3, [r4, #136]	; 0x88

		RO_ALL_Data.fusion_speed_x
    1510:	e1d733b8 	ldrh	r3, [r7, #56]	; 0x38
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
    1514:	e597203c 	ldr	r2, [r7, #60]	; 0x3c
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_speed_x
    1518:	e1c439b4 	strh	r3, [r4, #148]	; 0x94
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
    151c:	e1d733ba 	ldrh	r3, [r7, #58]	; 0x3a
	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
		IMU_CalcData.dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
    1520:	e5842084 	str	r2, [r4, #132]	; 0x84
		RO_ALL_Data.fusion_longitude
				= LL_1khz_attitude_data.longitude_best_estimate;

	} else if (current_page == 1) //page 1
	{
		IMU_CalcData.height = LL_1khz_attitude_data.height;
    1524:	e585204c 	str	r2, [r5, #76]	; 0x4c
		RO_ALL_Data.fusion_height = LL_1khz_attitude_data.height;
		RO_ALL_Data.fusion_dheight = LL_1khz_attitude_data.dheight;

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
    1528:	e1c439b6 	strh	r3, [r4, #150]	; 0x96
    152c:	e1a00004 	mov	r0, r4
    1530:	e3a01000 	mov	r1, #0
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
    1534:	e0813007 	add	r3, r1, r7
    1538:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
    153c:	e2811001 	add	r1, r1, #1

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
    1540:	e3510006 	cmp	r1, #6
			RO_ALL_Data.motor_rpm[i] = LL_1khz_attitude_data.motor_data[i + 8];
    1544:	e5c02048 	strb	r2, [r0, #72]	; 0x48
    1548:	e2800001 	add	r0, r0, #1

		RO_ALL_Data.fusion_speed_x
				= LL_1khz_attitude_data.speed_x_best_estimate;
		RO_ALL_Data.fusion_speed_y
				= LL_1khz_attitude_data.speed_y_best_estimate;
		for (i = 0; i < 6; i++) {
    154c:	1afffff8 	bne	1534 <SSP_rx_handler_HL+0x42c>
    1550:	eaffff05 	b	116c <SSP_rx_handler_HL+0x64>
						LL_1khz_attitude_data.slowDataUpChannelDataShort);
			oldKey = LL_1khz_attitude_data.slowDataUpChannelDataShort;
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
				if (LL_1khz_attitude_data.slowDataUpChannelDataShort
    1554:	e59f205c 	ldr	r2, [pc, #92]	; 15b8 <SSP_rx_handler_HL+0x4b0>
    1558:	e1d735f4 	ldrsh	r3, [r7, #84]	; 0x54
    155c:	e5d21000 	ldrb	r1, [r2]
    1560:	e1530001 	cmp	r3, r1
						!= emergencyMode)
					emergencyModeUpdate = 1;
    1564:	13a03001 	movne	r3, #1
				else
					emergencyModeUpdate = 0;
    1568:	03a03000 	moveq	r3, #0
			break;
		case SUDC_EM_MODE:
			if (emergencyModeUpdate == 2) {
				if (LL_1khz_attitude_data.slowDataUpChannelDataShort
						!= emergencyMode)
					emergencyModeUpdate = 1;
    156c:	15c03000 	strbne	r3, [r0]
				else
					emergencyModeUpdate = 0;
    1570:	05c03000 	strbeq	r3, [r0]
    1574:	eafffefc 	b	116c <SSP_rx_handler_HL+0x64>
    1578:	4000097d 	.word	0x4000097d
    157c:	40000978 	.word	0x40000978
    1580:	4000170c 	.word	0x4000170c
    1584:	4000097c 	.word	0x4000097c
    1588:	40000977 	.word	0x40000977
    158c:	40000990 	.word	0x40000990
    1590:	4000195c 	.word	0x4000195c
    1594:	40001848 	.word	0x40001848
    1598:	40001838 	.word	0x40001838
    159c:	400009ec 	.word	0x400009ec
    15a0:	400019b8 	.word	0x400019b8
    15a4:	40000972 	.word	0x40000972
    15a8:	40000974 	.word	0x40000974
    15ac:	40000970 	.word	0x40000970
    15b0:	4000098e 	.word	0x4000098e
    15b4:	40000994 	.word	0x40000994
    15b8:	400018e0 	.word	0x400018e0

000015bc <fast_abs>:
inline int fast_abs(int x)
{

	if(x>0) return x; else return (-x);

}
    15bc:	e3500000 	cmp	r0, #0
    15c0:	b2600000 	rsblt	r0, r0, #0
    15c4:	e12fff1e 	bx	lr

000015c8 <fast_sqrt>:

int fast_sqrt(int x)
{
	int l=0,r=0;
	l=x;
	while(fast_abs(l-r)>1){
    15c8:	e0203fc0 	eor	r3, r0, r0, asr #31
    15cc:	e0433fc0 	sub	r3, r3, r0, asr #31
    15d0:	e3530001 	cmp	r3, #1
	if(x>0) return x; else return (-x);

}

int fast_sqrt(int x)
{
    15d4:	e92d4030 	push	{r4, r5, lr}
    15d8:	e1a05000 	mov	r5, r0
	int l=0,r=0;
	l=x;
	while(fast_abs(l-r)>1){
    15dc:	d1a04000 	movle	r4, r0
    15e0:	da00000b 	ble	1614 <fast_sqrt+0x4c>
    15e4:	e1a04000 	mov	r4, r0
		r=x/l;
    15e8:	e1a01004 	mov	r1, r4
    15ec:	e1a00005 	mov	r0, r5
    15f0:	eb0030f7 	bl	d9d4 <____divsi3_from_arm>
		l=(l+r)/2;
    15f4:	e0843000 	add	r3, r4, r0
    15f8:	e0833fa3 	add	r3, r3, r3, lsr #31
    15fc:	e1a040c3 	asr	r4, r3, #1

int fast_sqrt(int x)
{
	int l=0,r=0;
	l=x;
	while(fast_abs(l-r)>1){
    1600:	e0600004 	rsb	r0, r0, r4
    1604:	e3500000 	cmp	r0, #0
    1608:	b2600000 	rsblt	r0, r0, #0
    160c:	e3500001 	cmp	r0, #1
    1610:	cafffff4 	bgt	15e8 <fast_sqrt+0x20>
		r=x/l;
		l=(l+r)/2;
	}
	return(l);
}
    1614:	e1a00004 	mov	r0, r4
    1618:	e8bd4030 	pop	{r4, r5, lr}
    161c:	e12fff1e 	bx	lr

00001620 <xy2latlon>:
struct GPS_DATA gps_data_temp;

unsigned int gpsDataOkTrigger=0;

void xy2latlon(double lat0, double lon0, double X, double Y, double *lat, double *lon)	//X: East, Y: North in m; lat0,lon0: Reference coordinates; lat,lon: current GPS measurement
{
    1620:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
        *lat=lat0+Y/MEAN_EARTH_DIAMETER*360./PI;
    1624:	e59f40f4 	ldr	r4, [pc, #244]	; 1720 <xy2latlon+0x100>
    1628:	e3a06101 	mov	r6, #1073741824	; 0x40000000
struct GPS_DATA gps_data_temp;

unsigned int gpsDataOkTrigger=0;

void xy2latlon(double lat0, double lon0, double X, double Y, double *lat, double *lon)	//X: East, Y: North in m; lat0,lon0: Reference coordinates; lat,lon: current GPS measurement
{
    162c:	e24dd008 	sub	sp, sp, #8
        *lat=lat0+Y/MEAN_EARTH_DIAMETER*360./PI;
    1630:	e3a05101 	mov	r5, #1073741824	; 0x40000000
    1634:	e2866876 	add	r6, r6, #7733248	; 0x760000
    1638:	e28f80d0 	add	r8, pc, #208	; 0xd0
    163c:	e8980300 	ldm	r8, {r8, r9}
struct GPS_DATA gps_data_temp;

unsigned int gpsDataOkTrigger=0;

void xy2latlon(double lat0, double lon0, double X, double Y, double *lat, double *lon)	//X: East, Y: North in m; lat0,lon0: Reference coordinates; lat,lon: current GPS measurement
{
    1640:	e1a0a000 	mov	sl, r0
    1644:	e1a0b001 	mov	fp, r1
    1648:	e88d000c 	stm	sp, {r2, r3}
        *lat=lat0+Y/MEAN_EARTH_DIAMETER*360./PI;
    164c:	e28d0034 	add	r0, sp, #52	; 0x34
    1650:	e8900003 	ldm	r0, {r0, r1}
    1654:	e1a02004 	mov	r2, r4
    1658:	e1a03005 	mov	r3, r5
    165c:	e2866902 	add	r6, r6, #32768	; 0x8000
    1660:	e3a07000 	mov	r7, #0
    1664:	eb0019d2 	bl	7db4 <__aeabi_ddiv>
    1668:	e1a02006 	mov	r2, r6
    166c:	e1a03007 	mov	r3, r7
    1670:	eb00192b 	bl	7b24 <__aeabi_dmul>
    1674:	e1a02008 	mov	r2, r8
    1678:	e1a03009 	mov	r3, r9
    167c:	eb0019cc 	bl	7db4 <__aeabi_ddiv>
    1680:	e1a0200a 	mov	r2, sl
    1684:	e1a0300b 	mov	r3, fp
    1688:	eb00181c 	bl	7700 <__adddf3>
    168c:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
    1690:	e8830003 	stm	r3, {r0, r1}
        *lon=lon0+X/MEAN_EARTH_DIAMETER*360./PI/cos(lat0*UMR);
    1694:	e1a02004 	mov	r2, r4
    1698:	e1a03005 	mov	r3, r5
    169c:	e28d002c 	add	r0, sp, #44	; 0x2c
    16a0:	e8900003 	ldm	r0, {r0, r1}
    16a4:	eb0019c2 	bl	7db4 <__aeabi_ddiv>
    16a8:	e1a02006 	mov	r2, r6
    16ac:	e1a03007 	mov	r3, r7
    16b0:	eb00191b 	bl	7b24 <__aeabi_dmul>
    16b4:	e1a02008 	mov	r2, r8
    16b8:	e1a03009 	mov	r3, r9
    16bc:	eb0019bc 	bl	7db4 <__aeabi_ddiv>
    16c0:	e28f2050 	add	r2, pc, #80	; 0x50
    16c4:	e892000c 	ldm	r2, {r2, r3}
    16c8:	e1a04000 	mov	r4, r0
    16cc:	e1a05001 	mov	r5, r1
    16d0:	e1a0000a 	mov	r0, sl
    16d4:	e1a0100b 	mov	r1, fp
    16d8:	eb001911 	bl	7b24 <__aeabi_dmul>
    16dc:	eb0030bf 	bl	d9e0 <__cos_from_arm>
    16e0:	e1a02000 	mov	r2, r0
    16e4:	e1a03001 	mov	r3, r1
    16e8:	e1a00004 	mov	r0, r4
    16ec:	e1a01005 	mov	r1, r5
    16f0:	eb0019af 	bl	7db4 <__aeabi_ddiv>
    16f4:	e89d000c 	ldm	sp, {r2, r3}
    16f8:	eb001800 	bl	7700 <__adddf3>
    16fc:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    1700:	e8830003 	stm	r3, {r0, r1}
}
    1704:	e28dd008 	add	sp, sp, #8
    1708:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    170c:	e12fff1e 	bx	lr
    1710:	400921fb 	.word	0x400921fb
    1714:	54442d18 	.word	0x54442d18
    1718:	3f91df46 	.word	0x3f91df46
    171c:	a2529d39 	.word	0xa2529d39
    1720:	416854a6 	.word	0x416854a6

00001724 <SDK_SetEmergencyMode>:
			!= EM_RETURN_AT_MISSION_SUMMIT) && (mode
			!= EM_RETURN_AT_PREDEFINED_HEIGHT))
		return;
	emergencyMode = mode;
	emergencyModeUpdate = 1;
}
    1724:	e12fff1e 	bx	lr

00001728 <SDK_mainloop>:

int errs = 0;
int dmcs = 0;

void SDK_mainloop(void)
{
    1728:	e92d4070 	push	{r4, r5, r6, lr}
	int i;
	char dbgMsg[100];
	QUADFRAME af;
	uint32_t tdata[3] = {1, 1000, 50000};
    172c:	e59f30ec 	ldr	r3, [pc, #236]	; 1820 <SDK_mainloop+0xf8>

int errs = 0;
int dmcs = 0;

void SDK_mainloop(void)
{
    1730:	e24dd020 	sub	sp, sp, #32
	int i;
	char dbgMsg[100];
	QUADFRAME af;
	uint32_t tdata[3] = {1, 1000, 50000};
    1734:	e8930007 	ldm	r3, {r0, r1, r2}
    1738:	e28d4014 	add	r4, sp, #20

	// Read any characters in the recieve buffer into our RingBuffer
	
	emptyUART0();

	loops++;
    173c:	e59f60e0 	ldr	r6, [pc, #224]	; 1824 <SDK_mainloop+0xfc>
void SDK_mainloop(void)
{
	int i;
	char dbgMsg[100];
	QUADFRAME af;
	uint32_t tdata[3] = {1, 1000, 50000};
    1740:	e8840007 	stm	r4, {r0, r1, r2}

	// Read any characters in the recieve buffer into our RingBuffer
	
	emptyUART0();
    1744:	eb000690 	bl	318c <emptyUART0>

	loops++;
    1748:	e596c000 	ldr	ip, [r6]
    174c:	e28cc001 	add	ip, ip, #1

	initFrame(&af, 0x01, (unsigned char)loops, tdata );
    1750:	e1a03004 	mov	r3, r4
    1754:	e20c20ff 	and	r2, ip, #255	; 0xff
    1758:	e3a01001 	mov	r1, #1
    175c:	e1a0000d 	mov	r0, sp

	// Read any characters in the recieve buffer into our RingBuffer
	
	emptyUART0();

	loops++;
    1760:	e586c000 	str	ip, [r6]

	initFrame(&af, 0x01, (unsigned char)loops, tdata );
    1764:	eb00034e 	bl	24a4 <initFrame>
	setFrame(&af);
    1768:	e1a0000d 	mov	r0, sp
    176c:	eb00033a 	bl	245c <setFrame>

	if ( loadFrame() ) //We have received a valid frame...
    1770:	eb001719 	bl	73dc <loadFrame>
    1774:	e3500000 	cmp	r0, #0
	
	emptyUART0();

	loops++;

	initFrame(&af, 0x01, (unsigned char)loops, tdata );
    1778:	e1a0500d 	mov	r5, sp
	setFrame(&af);

	if ( loadFrame() ) //We have received a valid frame...
	{
		 
		switch (frame.command)
    177c:	e59f40a4 	ldr	r4, [pc, #164]	; 1828 <SDK_mainloop+0x100>
	loops++;

	initFrame(&af, 0x01, (unsigned char)loops, tdata );
	setFrame(&af);

	if ( loadFrame() ) //We have received a valid frame...
    1780:	0a000006 	beq	17a0 <SDK_mainloop+0x78>
	{
		 
		switch (frame.command)
    1784:	e5d43001 	ldrb	r3, [r4, #1]
    1788:	e35300cc 	cmp	r3, #204	; 0xcc
    178c:	0a000006 	beq	17ac <SDK_mainloop+0x84>
    1790:	e35300cd 	cmp	r3, #205	; 0xcd
    1794:	0a00001f 	beq	1818 <SDK_mainloop+0xf0>
    1798:	e35300c9 	cmp	r3, #201	; 0xc9
    179c:	0a000005 	beq	17b8 <SDK_mainloop+0x90>
				//sendText(dbgMsg);
			break;
		}
	}
	
}	
    17a0:	e28dd020 	add	sp, sp, #32
    17a4:	e8bd4070 	pop	{r4, r5, r6, lr}
    17a8:	e12fff1e 	bx	lr
				//write data to transmit buffer for immediate transfer to LL processor
				HL2LL_write_cycle();
				dmcs++;	
			break;
			case GPIO: //GPIO Pin P1.16
				GPIO_P1_B16(frame.data[0]);
    17ac:	e5d40002 	ldrb	r0, [r4, #2]
    17b0:	eb0004ac 	bl	2a68 <GPIO_P1_B16>
    17b4:	eafffff9 	b	17a0 <SDK_mainloop+0x78>
	{
		 
		switch (frame.command)
		{
			case DMC: //Direct Motor Command
				GPIO_P1_B16_TOGGLE(); // Toggle when we get a motor command.
    17b8:	eb0004c1 	bl	2ac4 <GPIO_P1_B16_TOGGLE>
				 			  //1: enable control by HL processor

				WO_SDK.disable_motor_onoff_by_stick = 0;

				for (i = 0; i < 4; i++ )
					WO_Direct_Individual_Motor_Control.motor[i] = frame.data[i];
    17bc:	e59f1068 	ldr	r1, [pc, #104]	; 182c <SDK_mainloop+0x104>
		 
		switch (frame.command)
		{
			case DMC: //Direct Motor Command
				GPIO_P1_B16_TOGGLE(); // Toggle when we get a motor command.
				WO_SDK.ctrl_mode=0x00;	//0x00: direct individual motor control: individual commands for motors 0..3
    17c0:	e59f0068 	ldr	r0, [pc, #104]	; 1830 <SDK_mainloop+0x108>
				 			  //1: enable control by HL processor

				WO_SDK.disable_motor_onoff_by_stick = 0;

				for (i = 0; i < 4; i++ )
					WO_Direct_Individual_Motor_Control.motor[i] = frame.data[i];
    17c4:	e5d45005 	ldrb	r5, [r4, #5]
    17c8:	e5d4c002 	ldrb	ip, [r4, #2]
    17cc:	e5d4e003 	ldrb	lr, [r4, #3]
    17d0:	e5d44004 	ldrb	r4, [r4, #4]
		 
		switch (frame.command)
		{
			case DMC: //Direct Motor Command
				GPIO_P1_B16_TOGGLE(); // Toggle when we get a motor command.
				WO_SDK.ctrl_mode=0x00;	//0x00: direct individual motor control: individual commands for motors 0..3
    17d4:	e3a02000 	mov	r2, #0
				WO_SDK.ctrl_enabled = 1;  //0: disable control by HL processor
    17d8:	e3a03001 	mov	r3, #1
				WO_SDK.disable_motor_onoff_by_stick = 0;

				for (i = 0; i < 4; i++ )
					WO_Direct_Individual_Motor_Control.motor[i] = frame.data[i];
				WO_Direct_Individual_Motor_Control.motor[4] = 0;
				WO_Direct_Individual_Motor_Control.motor[5] = 0;
    17dc:	e5c12005 	strb	r2, [r1, #5]
		switch (frame.command)
		{
			case DMC: //Direct Motor Command
				GPIO_P1_B16_TOGGLE(); // Toggle when we get a motor command.
				WO_SDK.ctrl_mode=0x00;	//0x00: direct individual motor control: individual commands for motors 0..3
				WO_SDK.ctrl_enabled = 1;  //0: disable control by HL processor
    17e0:	e5c03001 	strb	r3, [r0, #1]
				 			  //1: enable control by HL processor

				WO_SDK.disable_motor_onoff_by_stick = 0;
    17e4:	e5c02002 	strb	r2, [r0, #2]
		 
		switch (frame.command)
		{
			case DMC: //Direct Motor Command
				GPIO_P1_B16_TOGGLE(); // Toggle when we get a motor command.
				WO_SDK.ctrl_mode=0x00;	//0x00: direct individual motor control: individual commands for motors 0..3
    17e8:	e5c02000 	strb	r2, [r0]

				WO_SDK.disable_motor_onoff_by_stick = 0;

				for (i = 0; i < 4; i++ )
					WO_Direct_Individual_Motor_Control.motor[i] = frame.data[i];
				WO_Direct_Individual_Motor_Control.motor[4] = 0;
    17ec:	e5c12004 	strb	r2, [r1, #4]
				 			  //1: enable control by HL processor

				WO_SDK.disable_motor_onoff_by_stick = 0;

				for (i = 0; i < 4; i++ )
					WO_Direct_Individual_Motor_Control.motor[i] = frame.data[i];
    17f0:	e5c1c000 	strb	ip, [r1]
    17f4:	e5c1e001 	strb	lr, [r1, #1]
    17f8:	e5c14002 	strb	r4, [r1, #2]
    17fc:	e5c15003 	strb	r5, [r1, #3]
				WO_Direct_Individual_Motor_Control.motor[4] = 0;
				WO_Direct_Individual_Motor_Control.motor[5] = 0;
				
				//write data to transmit buffer for immediate transfer to LL processor
				HL2LL_write_cycle();
    1800:	ebfffb07 	bl	424 <HL2LL_write_cycle>
				dmcs++;	
    1804:	e59f2028 	ldr	r2, [pc, #40]	; 1834 <SDK_mainloop+0x10c>
    1808:	e5923000 	ldr	r3, [r2]
    180c:	e2833001 	add	r3, r3, #1
    1810:	e5823000 	str	r3, [r2]
    1814:	eaffffe1 	b	17a0 <SDK_mainloop+0x78>
			break;
			case GPIO: //GPIO Pin P1.16
				GPIO_P1_B16(frame.data[0]);
			break;
			case GPIOTOGGLE:
				GPIO_P1_B16_TOGGLE();
    1818:	eb0004a9 	bl	2ac4 <GPIO_P1_B16_TOGGLE>
    181c:	eaffffdf 	b	17a0 <SDK_mainloop+0x78>
    1820:	0000da70 	.word	0x0000da70
    1824:	40000998 	.word	0x40000998
    1828:	40001f14 	.word	0x40001f14
    182c:	40001828 	.word	0x40001828
    1830:	40001834 	.word	0x40001834
    1834:	400009b4 	.word	0x400009b4

00001838 <buzzer>:


void buzzer(unsigned char offon)
{

	if(offon)	//beeper on
    1838:	e31000ff 	tst	r0, #255	; 0xff
	{
		IOSET1 = (1<<17);
	}
	else
	{
		IOCLR1 = (1<<17);
    183c:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
void buzzer(unsigned char offon)
{

	if(offon)	//beeper on
	{
		IOSET1 = (1<<17);
    1840:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
	}
	else
	{
		IOCLR1 = (1<<17);
    1844:	e281190a 	add	r1, r1, #163840	; 0x28000
void buzzer(unsigned char offon)
{

	if(offon)	//beeper on
	{
		IOSET1 = (1<<17);
    1848:	e282290a 	add	r2, r2, #163840	; 0x28000
    184c:	13a03802 	movne	r3, #131072	; 0x20000
	}
	else
	{
		IOCLR1 = (1<<17);
    1850:	03a03802 	moveq	r3, #131072	; 0x20000
void buzzer(unsigned char offon)
{

	if(offon)	//beeper on
	{
		IOSET1 = (1<<17);
    1854:	15823014 	strne	r3, [r2, #20]
	}
	else
	{
		IOCLR1 = (1<<17);
    1858:	0581301c 	streq	r3, [r1, #28]
    185c:	e12fff1e 	bx	lr

00001860 <buzzer_handler>:
unsigned char buzzer_warnings=BUZZER_WARNING_INIT_BEEP|BUZZER_WARNING_GPS_BEEP;
unsigned short ALARM_battery_warning_voltage_high=10600;
unsigned short ALARM_battery_warning_voltage_low=10100;

void buzzer_handler(unsigned int vbat)	//needs to be triggered at 100 Hz
{
    1860:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	static char bat_warning_enabled=0;

	unsigned char i;


	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;
    1864:	e59f6574 	ldr	r6, [pc, #1396]	; 1de0 <buzzer_handler+0x580>
    1868:	e1d630b0 	ldrh	r3, [r6]
    186c:	e2833001 	add	r3, r3, #1

	//battery warning
	if(++bat_cnt==100){
    1870:	e59f456c 	ldr	r4, [pc, #1388]	; 1de4 <buzzer_handler+0x584>
	static char bat_warning_enabled=0;

	unsigned char i;


	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;
    1874:	e1a03803 	lsl	r3, r3, #16
    1878:	e1a03823 	lsr	r3, r3, #16
    187c:	e35300c7 	cmp	r3, #199	; 0xc7
    1880:	e1c630b0 	strh	r3, [r6]

	//battery warning
	if(++bat_cnt==100){
    1884:	e5943000 	ldr	r3, [r4]
	static char bat_warning_enabled=0;

	unsigned char i;


	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;
    1888:	83a02000 	movhi	r2, #0

	//battery warning
	if(++bat_cnt==100){
    188c:	e2833001 	add	r3, r3, #1
	static char bat_warning_enabled=0;

	unsigned char i;


	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;
    1890:	81c620b0 	strhhi	r2, [r6]

	//battery warning
	if(++bat_cnt==100){
    1894:	e3530064 	cmp	r3, #100	; 0x64
unsigned char buzzer_warnings=BUZZER_WARNING_INIT_BEEP|BUZZER_WARNING_GPS_BEEP;
unsigned short ALARM_battery_warning_voltage_high=10600;
unsigned short ALARM_battery_warning_voltage_low=10100;

void buzzer_handler(unsigned int vbat)	//needs to be triggered at 100 Hz
{
    1898:	e1a0e000 	mov	lr, r0


	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;

	//battery warning
	if(++bat_cnt==100){
    189c:	e5843000 	str	r3, [r4]
    18a0:	159f5540 	ldrne	r5, [pc, #1344]	; 1de8 <buzzer_handler+0x588>
    18a4:	159fc540 	ldrne	ip, [pc, #1344]	; 1dec <buzzer_handler+0x58c>
    18a8:	0a00012f 	beq	1d6c <buzzer_handler+0x50c>
		bat_cnt=0;
		bat_div=(ALARM_battery_warning_voltage_high-ALARM_battery_warning_voltage_low)/100;
	}
	if(vbat<ALARM_battery_warning_voltage_low) vbat=ALARM_battery_warning_voltage_low;
    18ac:	e1dc10b0 	ldrh	r1, [ip]

	if(vbat<ALARM_battery_warning_voltage_high)	//decide if it's really an empty battery
    18b0:	e1d530b0 	ldrh	r3, [r5]
	//battery warning
	if(++bat_cnt==100){
		bat_cnt=0;
		bat_div=(ALARM_battery_warning_voltage_high-ALARM_battery_warning_voltage_low)/100;
	}
	if(vbat<ALARM_battery_warning_voltage_low) vbat=ALARM_battery_warning_voltage_low;
    18b4:	e151000e 	cmp	r1, lr
    18b8:	21a00001 	movcs	r0, r1
    18bc:	31a0000e 	movcc	r0, lr

	if(vbat<ALARM_battery_warning_voltage_high)	//decide if it's really an empty battery
    18c0:	e1500003 	cmp	r0, r3
    18c4:	2a00006b 	bcs	1a78 <buzzer_handler+0x218>
	{
		if(bat_warning<ControllerCyclesPerSecond/5) bat_warning++;
    18c8:	e59f2520 	ldr	r2, [pc, #1312]	; 1df0 <buzzer_handler+0x590>
    18cc:	e5923000 	ldr	r3, [r2]
    18d0:	e35300c7 	cmp	r3, #199	; 0xc7
		else bat_warning_enabled=1;
    18d4:	c59f3518 	ldrgt	r3, [pc, #1304]	; 1df4 <buzzer_handler+0x594>
	}
	if(vbat<ALARM_battery_warning_voltage_low) vbat=ALARM_battery_warning_voltage_low;

	if(vbat<ALARM_battery_warning_voltage_high)	//decide if it's really an empty battery
	{
		if(bat_warning<ControllerCyclesPerSecond/5) bat_warning++;
    18d8:	d2833001 	addle	r3, r3, #1
		else bat_warning_enabled=1;
    18dc:	c3a02001 	movgt	r2, #1
	}
	if(vbat<ALARM_battery_warning_voltage_low) vbat=ALARM_battery_warning_voltage_low;

	if(vbat<ALARM_battery_warning_voltage_high)	//decide if it's really an empty battery
	{
		if(bat_warning<ControllerCyclesPerSecond/5) bat_warning++;
    18e0:	d5823000 	strle	r3, [r2]
		else bat_warning_enabled=1;
    18e4:	c5c32000 	strbgt	r2, [r3]
	}
	if(vbat<ALARM_battery_warning_voltage_low) vbat=ALARM_battery_warning_voltage_low;

	if(vbat<ALARM_battery_warning_voltage_high)	//decide if it's really an empty battery
	{
		if(bat_warning<ControllerCyclesPerSecond/5) bat_warning++;
    18e8:	da000068 	ble	1a90 <buzzer_handler+0x230>
			buz_active&=~BU_BATTERY;
		}
	}
	if(bat_warning_enabled)
	{
		if(bat_cnt>((vbat-ALARM_battery_warning_voltage_low)/bat_div)) buz_active|=BU_BATTERY; //Beeper on
    18ec:	e59f3504 	ldr	r3, [pc, #1284]	; 1df8 <buzzer_handler+0x598>
    18f0:	e0610000 	rsb	r0, r1, r0
    18f4:	e5931000 	ldr	r1, [r3]
    18f8:	eb00303b 	bl	d9ec <____udivsi3_from_arm>
    18fc:	e5943000 	ldr	r3, [r4]
    1900:	e1530000 	cmp	r3, r0
    1904:	83a01010 	movhi	r1, #16
    1908:	81a00001 	movhi	r0, r1
    190c:	93a01000 	movls	r1, #0
    1910:	93a00010 	movls	r0, #16
	{
		buz_active&=~BU_BATTERY;
		buz_priority&=~BU_BATTERY;
	}

	if(buzzer_warnings&BUZZER_WARNING_GPS_BEEP)
    1914:	e59f34e0 	ldr	r3, [pc, #1248]	; 1dfc <buzzer_handler+0x59c>
    1918:	e5d37000 	ldrb	r7, [r3]
    191c:	e3170002 	tst	r7, #2
    1920:	059f24d8 	ldreq	r2, [pc, #1240]	; 1e00 <buzzer_handler+0x5a0>
    1924:	0a000009 	beq	1950 <buzzer_handler+0xf0>
	{
		if(((GPS_Data.status&0xFF)!=3)&&(LL_1khz_attitude_data.RC_data[5]>200))	//no lock and in GPS mode
    1928:	e59f34d4 	ldr	r3, [pc, #1236]	; 1e04 <buzzer_handler+0x5a4>
    192c:	e5d32028 	ldrb	r2, [r3, #40]	; 0x28
    1930:	e3520003 	cmp	r2, #3
    1934:	0a000120 	beq	1dbc <buzzer_handler+0x55c>
    1938:	e59f24c0 	ldr	r2, [pc, #1216]	; 1e00 <buzzer_handler+0x5a0>
    193c:	e5d23013 	ldrb	r3, [r2, #19]
    1940:	e35300c8 	cmp	r3, #200	; 0xc8
    1944:	8a000116 	bhi	1da4 <buzzer_handler+0x544>
			if(buz_cnt<5) buz_active|=BU_GPS_BEEP;
			else buz_active&=~BU_GPS_BEEP;
		}
		else
		{
			buz_active&=~BU_GPS_BEEP;
    1948:	e3c11c01 	bic	r1, r1, #256	; 0x100
			buz_priority&=~BU_GPS_BEEP;
    194c:	e3c00c01 	bic	r0, r0, #256	; 0x100
		}
	}

	//gyro error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_GYROS)&&(SYSTEM_initialized))
    1950:	e1d235b2 	ldrh	r3, [r2, #82]	; 0x52
    1954:	e1a04803 	lsl	r4, r3, #16
    1958:	e1a0c824 	lsr	ip, r4, #16
    195c:	e31c0c02 	tst	ip, #512	; 0x200
    1960:	0a000003 	beq	1974 <buzzer_handler+0x114>
    1964:	e59f349c 	ldr	r3, [pc, #1180]	; 1e08 <buzzer_handler+0x5a8>
    1968:	e5d32000 	ldrb	r2, [r3]
    196c:	e3520000 	cmp	r2, #0
    1970:	1a00009a 	bne	1be0 <buzzer_handler+0x380>
		else if(buz_cnt<165) buz_active|=BU_ERROR_GYRO;
		else buz_active&=~BU_ERROR_GYRO;
	}
	else
	{
		buz_priority&=~BU_ERROR_GYRO;
    1974:	e3c00002 	bic	r0, r0, #2
		buz_active&=~BU_ERROR_GYRO;
    1978:	e3c11002 	bic	r1, r1, #2
	}

	//ACC error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_ACC)&&(SYSTEM_initialized))
    197c:	e31c0b01 	tst	ip, #1024	; 0x400
    1980:	0a000003 	beq	1994 <buzzer_handler+0x134>
    1984:	e59f347c 	ldr	r3, [pc, #1148]	; 1e08 <buzzer_handler+0x5a8>
    1988:	e5d32000 	ldrb	r2, [r3]
    198c:	e3520000 	cmp	r2, #0
    1990:	1a000084 	bne	1ba8 <buzzer_handler+0x348>
		else if(buz_cnt<165) buz_active|=BU_ERROR_ACC;
		else buz_active&=~BU_ERROR_ACC;
	}
	else
	{
		buz_priority&=~BU_ERROR_ACC;
    1994:	e3c00004 	bic	r0, r0, #4
		buz_active&=~BU_ERROR_ACC;
    1998:	e3c11004 	bic	r1, r1, #4
	}

	//ADC error
	if((LL_1khz_attitude_data.flightMode&FM_ADC_STARTUP_ERROR)&&(SYSTEM_initialized))
    199c:	e31c0b02 	tst	ip, #2048	; 0x800
    19a0:	0a000003 	beq	19b4 <buzzer_handler+0x154>
    19a4:	e59f345c 	ldr	r3, [pc, #1116]	; 1e08 <buzzer_handler+0x5a8>
    19a8:	e5d32000 	ldrb	r2, [r3]
    19ac:	e3520000 	cmp	r2, #0
    19b0:	1a00006a 	bne	1b60 <buzzer_handler+0x300>
		else if(buz_cnt<165) buz_active|=BU_ERROR_ADC;
		else buz_active&=~BU_ERROR_ADC;
	}
	else
	{
		buz_priority&=~BU_ERROR_ADC;
    19b4:	e3c0e008 	bic	lr, r0, #8
		buz_active&=~BU_ERROR_ADC;
    19b8:	e3c10008 	bic	r0, r1, #8
	}

	//compass failure: warn 3 seconds only
	if((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE)&&(SYSTEM_initialized)&&(error_cnt_compass++<400))
    19bc:	e31c0010 	tst	ip, #16
    19c0:	0a000003 	beq	19d4 <buzzer_handler+0x174>
    19c4:	e59f343c 	ldr	r3, [pc, #1084]	; 1e08 <buzzer_handler+0x5a8>
    19c8:	e5d32000 	ldrb	r2, [r3]
    19cc:	e3520000 	cmp	r2, #0
    19d0:	1a00003e 	bne	1ad0 <buzzer_handler+0x270>
		else if(buz_cnt%100<50) buz_active&=~BU_COMPASS_FAILURE;
		else buz_active&=~BU_COMPASS_FAILURE;
	}
	else
	{
		buz_priority&=~BU_COMPASS_FAILURE;
    19d4:	e3cee020 	bic	lr, lr, #32
		buz_active&=~BU_COMPASS_FAILURE;
    19d8:	e3c00020 	bic	r0, r0, #32
	}

	//mag fieldstrength warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_FIELD_STRENGTH_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_fs++<400))
    19dc:	e31c0901 	tst	ip, #16384	; 0x4000
    19e0:	0a000003 	beq	19f4 <buzzer_handler+0x194>
    19e4:	e59f341c 	ldr	r3, [pc, #1052]	; 1e08 <buzzer_handler+0x5a8>
    19e8:	e5d32000 	ldrb	r2, [r3]
    19ec:	e3520000 	cmp	r2, #0
    19f0:	1a000084 	bne	1c08 <buzzer_handler+0x3a8>
		else if(buz_cnt%100<30) buz_active&=~BU_WARNING_MAG_FS;
		else buz_active&=~BU_WARNING_MAG_FS;
	}
	else
	{
		buz_priority&=~BU_WARNING_MAG_FS;
    19f4:	e3cec040 	bic	ip, lr, #64	; 0x40
		buz_active&=~BU_WARNING_MAG_FS;
    19f8:	e3c00040 	bic	r0, r0, #64	; 0x40
	}

	//mag inclination warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_INCLINATION_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_inc++<400))
    19fc:	e3540000 	cmp	r4, #0
    1a00:	ba0000b5 	blt	1cdc <buzzer_handler+0x47c>
		else if(buz_cnt%100<40) buz_active&=~BU_WARNING_MAG_INC;
		else buz_active&=~BU_WARNING_MAG_INC;
	}
	else
	{
		buz_priority&=~BU_WARNING_MAG_INC;
    1a04:	e3cc5080 	bic	r5, ip, #128	; 0x80
		buz_active&=~BU_WARNING_MAG_INC;
    1a08:	e3c04080 	bic	r4, r0, #128	; 0x80
	}

	if(buzzer_warnings&BUZZER_WARNING_INIT_BEEP)
    1a0c:	e3170001 	tst	r7, #1
    1a10:	0a000006 	beq	1a30 <buzzer_handler+0x1d0>
	{
		if(!SYSTEM_initialized)
    1a14:	e59f33ec 	ldr	r3, [pc, #1004]	; 1e08 <buzzer_handler+0x5a8>
    1a18:	e5d32000 	ldrb	r2, [r3]
    1a1c:	e20200ff 	and	r0, r2, #255	; 0xff
    1a20:	e3500000 	cmp	r0, #0

#endif
		}
		else
		{
			buz_active&=~BU_INIT;
    1a24:	13c44001 	bicne	r4, r4, #1
			buz_priority&=~BU_INIT;
    1a28:	13c55001 	bicne	r5, r5, #1
		buz_active&=~BU_WARNING_MAG_INC;
	}

	if(buzzer_warnings&BUZZER_WARNING_INIT_BEEP)
	{
		if(!SYSTEM_initialized)
    1a2c:	0a000091 	beq	1c78 <buzzer_handler+0x418>
#endif
		}
		else
		{
			buz_active&=~BU_INIT;
			buz_priority&=~BU_INIT;
    1a30:	e3a02000 	mov	r2, #0
    1a34:	e3a01001 	mov	r1, #1
	}

	//buzzer control
	for(i=0;i<BUZZ_NR_OF_WARNINGS; i++)
	{
		if(buz_priority&(1<<i))
    1a38:	e1a03211 	lsl	r3, r1, r2
    1a3c:	e1150003 	tst	r5, r3
		{
			buz_active&=(1<<i);
    1a40:	e2822001 	add	r2, r2, #1
	}

	//buzzer control
	for(i=0;i<BUZZ_NR_OF_WARNINGS; i++)
	{
		if(buz_priority&(1<<i))
    1a44:	1a000005 	bne	1a60 <buzzer_handler+0x200>
			buz_priority&=~BU_INIT;
		}
	}

	//buzzer control
	for(i=0;i<BUZZ_NR_OF_WARNINGS; i++)
    1a48:	e3520009 	cmp	r2, #9
    1a4c:	0a000004 	beq	1a64 <buzzer_handler+0x204>
	{
		if(buz_priority&(1<<i))
    1a50:	e1a03211 	lsl	r3, r1, r2
    1a54:	e1150003 	tst	r5, r3
		{
			buz_active&=(1<<i);
    1a58:	e2822001 	add	r2, r2, #1
	}

	//buzzer control
	for(i=0;i<BUZZ_NR_OF_WARNINGS; i++)
	{
		if(buz_priority&(1<<i))
    1a5c:	0afffff9 	beq	1a48 <buzzer_handler+0x1e8>
		{
			buz_active&=(1<<i);
    1a60:	e0044003 	and	r4, r4, r3
			i=BUZZ_NR_OF_WARNINGS;
		}
	}

	if(buz_active) buzzer(ON);
    1a64:	e3540000 	cmp	r4, #0
    1a68:	0a00000f 	beq	1aac <buzzer_handler+0x24c>
    1a6c:	e3a00001 	mov	r0, #1
	else buzzer(OFF);
}
    1a70:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
			buz_active&=(1<<i);
			i=BUZZ_NR_OF_WARNINGS;
		}
	}

	if(buz_active) buzzer(ON);
    1a74:	eaffff6f 	b	1838 <buzzer>
		if(bat_warning<ControllerCyclesPerSecond/5) bat_warning++;
		else bat_warning_enabled=1;
	}
	else
	{
		if(bat_warning>10) bat_warning-=2;
    1a78:	e59f2370 	ldr	r2, [pc, #880]	; 1df0 <buzzer_handler+0x590>
    1a7c:	e5923000 	ldr	r3, [r2]
    1a80:	e353000a 	cmp	r3, #10
    1a84:	c2433002 	subgt	r3, r3, #2
    1a88:	c5823000 	strgt	r3, [r2]
    1a8c:	da000009 	ble	1ab8 <buzzer_handler+0x258>
		{
			bat_warning_enabled=0;
			buz_active&=~BU_BATTERY;
		}
	}
	if(bat_warning_enabled)
    1a90:	e59f335c 	ldr	r3, [pc, #860]	; 1df4 <buzzer_handler+0x594>
    1a94:	e5d32000 	ldrb	r2, [r3]
    1a98:	e3520000 	cmp	r2, #0
    1a9c:	01a01002 	moveq	r1, r2
    1aa0:	01a00001 	moveq	r0, r1
    1aa4:	0affff9a 	beq	1914 <buzzer_handler+0xb4>
    1aa8:	eaffff8f 	b	18ec <buzzer_handler+0x8c>
			i=BUZZ_NR_OF_WARNINGS;
		}
	}

	if(buz_active) buzzer(ON);
	else buzzer(OFF);
    1aac:	e1a00004 	mov	r0, r4
}
    1ab0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
			i=BUZZ_NR_OF_WARNINGS;
		}
	}

	if(buz_active) buzzer(ON);
	else buzzer(OFF);
    1ab4:	eaffff5f 	b	1838 <buzzer>
	else
	{
		if(bat_warning>10) bat_warning-=2;
		else
		{
			bat_warning_enabled=0;
    1ab8:	e3a02000 	mov	r2, #0
    1abc:	e59f3330 	ldr	r3, [pc, #816]	; 1df4 <buzzer_handler+0x594>
    1ac0:	e1a01002 	mov	r1, r2
    1ac4:	e1a00002 	mov	r0, r2
    1ac8:	e5c32000 	strb	r2, [r3]
    1acc:	eaffff90 	b	1914 <buzzer_handler+0xb4>
		buz_priority&=~BU_ERROR_ADC;
		buz_active&=~BU_ERROR_ADC;
	}

	//compass failure: warn 3 seconds only
	if((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE)&&(SYSTEM_initialized)&&(error_cnt_compass++<400))
    1ad0:	e59f2334 	ldr	r2, [pc, #820]	; 1e0c <buzzer_handler+0x5ac>
    1ad4:	e1d230b0 	ldrh	r3, [r2]
    1ad8:	e3530e19 	cmp	r3, #400	; 0x190
    1adc:	e2833001 	add	r3, r3, #1
    1ae0:	e1c230b0 	strh	r3, [r2]
    1ae4:	2affffba 	bcs	19d4 <buzzer_handler+0x174>
	{
		buz_priority|=BU_COMPASS_FAILURE;
		if(buz_cnt%100<5) buz_active|=BU_COMPASS_FAILURE;
    1ae8:	e1d610b0 	ldrh	r1, [r6]
    1aec:	e59f231c 	ldr	r2, [pc, #796]	; 1e10 <buzzer_handler+0x5b0>
    1af0:	e0835192 	umull	r5, r3, r2, r1
    1af4:	e1a032a3 	lsr	r3, r3, #5
    1af8:	e0833103 	add	r3, r3, r3, lsl #2
    1afc:	e0833103 	add	r3, r3, r3, lsl #2
    1b00:	e0411103 	sub	r1, r1, r3, lsl #2
    1b04:	e1a01801 	lsl	r1, r1, #16
    1b08:	e1a01821 	lsr	r1, r1, #16
    1b0c:	e3510004 	cmp	r1, #4
	}

	//compass failure: warn 3 seconds only
	if((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE)&&(SYSTEM_initialized)&&(error_cnt_compass++<400))
	{
		buz_priority|=BU_COMPASS_FAILURE;
    1b10:	e38ee020 	orr	lr, lr, #32
		if(buz_cnt%100<5) buz_active|=BU_COMPASS_FAILURE;
    1b14:	9a00000f 	bls	1b58 <buzzer_handler+0x2f8>
		else if(buz_cnt%100<10) buz_active&=~BU_COMPASS_FAILURE;
    1b18:	e3510009 	cmp	r1, #9
    1b1c:	9affffad 	bls	19d8 <buzzer_handler+0x178>
		else if(buz_cnt%100<15) buz_active|=BU_COMPASS_FAILURE;
    1b20:	e351000e 	cmp	r1, #14
    1b24:	9a00000b 	bls	1b58 <buzzer_handler+0x2f8>
		else if(buz_cnt%100<20) buz_active&=~BU_COMPASS_FAILURE;
    1b28:	e3510013 	cmp	r1, #19
    1b2c:	9affffa9 	bls	19d8 <buzzer_handler+0x178>
		else if(buz_cnt%100<25) buz_active|=BU_COMPASS_FAILURE;
    1b30:	e3510018 	cmp	r1, #24
    1b34:	9a000007 	bls	1b58 <buzzer_handler+0x2f8>
		else if(buz_cnt%100<30) buz_active&=~BU_COMPASS_FAILURE;
    1b38:	e351001d 	cmp	r1, #29
    1b3c:	9affffa5 	bls	19d8 <buzzer_handler+0x178>
		else if(buz_cnt%100<35) buz_active|=BU_COMPASS_FAILURE;
    1b40:	e3510022 	cmp	r1, #34	; 0x22
    1b44:	9a000003 	bls	1b58 <buzzer_handler+0x2f8>
		else if(buz_cnt%100<40) buz_active&=~BU_COMPASS_FAILURE;
    1b48:	e3510027 	cmp	r1, #39	; 0x27
    1b4c:	9affffa1 	bls	19d8 <buzzer_handler+0x178>
		else if(buz_cnt%100<45) buz_active|=BU_COMPASS_FAILURE;
    1b50:	e351002c 	cmp	r1, #44	; 0x2c
    1b54:	8affff9f 	bhi	19d8 <buzzer_handler+0x178>
    1b58:	e3800020 	orr	r0, r0, #32
    1b5c:	eaffff9e 	b	19dc <buzzer_handler+0x17c>

	//ADC error
	if((LL_1khz_attitude_data.flightMode&FM_ADC_STARTUP_ERROR)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_ADC;
		if(buz_cnt<135) buz_active|=BU_ERROR_ADC;
    1b60:	e1d630b0 	ldrh	r3, [r6]
    1b64:	e3530086 	cmp	r3, #134	; 0x86
	}

	//ADC error
	if((LL_1khz_attitude_data.flightMode&FM_ADC_STARTUP_ERROR)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_ADC;
    1b68:	e380e008 	orr	lr, r0, #8
		if(buz_cnt<135) buz_active|=BU_ERROR_ADC;
    1b6c:	9a00000b 	bls	1ba0 <buzzer_handler+0x340>
		else if(buz_cnt<140) buz_active&=~BU_ERROR_ADC;
    1b70:	e353008b 	cmp	r3, #139	; 0x8b
    1b74:	9affff8f 	bls	19b8 <buzzer_handler+0x158>
		else if(buz_cnt<145) buz_active|=BU_ERROR_ADC;
    1b78:	e3530090 	cmp	r3, #144	; 0x90
    1b7c:	9a000007 	bls	1ba0 <buzzer_handler+0x340>
		else if(buz_cnt<150) buz_active&=~BU_ERROR_ADC;
    1b80:	e3530095 	cmp	r3, #149	; 0x95
    1b84:	9affff8b 	bls	19b8 <buzzer_handler+0x158>
		else if(buz_cnt<155) buz_active|=BU_ERROR_ADC;
    1b88:	e353009a 	cmp	r3, #154	; 0x9a
    1b8c:	9a000003 	bls	1ba0 <buzzer_handler+0x340>
		else if(buz_cnt<160) buz_active&=~BU_ERROR_ADC;
    1b90:	e353009f 	cmp	r3, #159	; 0x9f
    1b94:	9affff87 	bls	19b8 <buzzer_handler+0x158>
		else if(buz_cnt<165) buz_active|=BU_ERROR_ADC;
    1b98:	e35300a4 	cmp	r3, #164	; 0xa4
    1b9c:	8affff85 	bhi	19b8 <buzzer_handler+0x158>
    1ba0:	e3810008 	orr	r0, r1, #8
    1ba4:	eaffff84 	b	19bc <buzzer_handler+0x15c>

	//ACC error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_ACC)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_ACC;
		if(buz_cnt<145) buz_active|=BU_ERROR_ACC;
    1ba8:	e1d630b0 	ldrh	r3, [r6]
    1bac:	e3530090 	cmp	r3, #144	; 0x90
	}

	//ACC error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_ACC)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_ACC;
    1bb0:	e3800004 	orr	r0, r0, #4
		if(buz_cnt<145) buz_active|=BU_ERROR_ACC;
    1bb4:	9a000007 	bls	1bd8 <buzzer_handler+0x378>
		else if(buz_cnt<150) buz_active&=~BU_ERROR_ACC;
    1bb8:	e3530095 	cmp	r3, #149	; 0x95
    1bbc:	9affff75 	bls	1998 <buzzer_handler+0x138>
		else if(buz_cnt<155) buz_active|=BU_ERROR_ACC;
    1bc0:	e353009a 	cmp	r3, #154	; 0x9a
    1bc4:	9a000003 	bls	1bd8 <buzzer_handler+0x378>
		else if(buz_cnt<160) buz_active&=~BU_ERROR_ACC;
    1bc8:	e353009f 	cmp	r3, #159	; 0x9f
    1bcc:	9affff71 	bls	1998 <buzzer_handler+0x138>
		else if(buz_cnt<165) buz_active|=BU_ERROR_ACC;
    1bd0:	e35300a4 	cmp	r3, #164	; 0xa4
    1bd4:	8affff6f 	bhi	1998 <buzzer_handler+0x138>
    1bd8:	e3811004 	orr	r1, r1, #4
    1bdc:	eaffff6e 	b	199c <buzzer_handler+0x13c>

	//gyro error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_GYROS)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_GYRO;
		if(buz_cnt<155) buz_active|=BU_ERROR_GYRO;
    1be0:	e1d630b0 	ldrh	r3, [r6]
    1be4:	e353009a 	cmp	r3, #154	; 0x9a
	}

	//gyro error
	if((LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_GYROS)&&(SYSTEM_initialized))
	{
		buz_priority|=BU_ERROR_GYRO;
    1be8:	e3800002 	orr	r0, r0, #2
		if(buz_cnt<155) buz_active|=BU_ERROR_GYRO;
    1bec:	9a000003 	bls	1c00 <buzzer_handler+0x3a0>
		else if(buz_cnt<160) buz_active&=~BU_ERROR_GYRO;
    1bf0:	e353009f 	cmp	r3, #159	; 0x9f
    1bf4:	9affff5f 	bls	1978 <buzzer_handler+0x118>
		else if(buz_cnt<165) buz_active|=BU_ERROR_GYRO;
    1bf8:	e35300a4 	cmp	r3, #164	; 0xa4
    1bfc:	8affff5d 	bhi	1978 <buzzer_handler+0x118>
    1c00:	e3811002 	orr	r1, r1, #2
    1c04:	eaffff5c 	b	197c <buzzer_handler+0x11c>
		buz_priority&=~BU_COMPASS_FAILURE;
		buz_active&=~BU_COMPASS_FAILURE;
	}

	//mag fieldstrength warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_FIELD_STRENGTH_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_fs++<400))
    1c08:	e59f2204 	ldr	r2, [pc, #516]	; 1e14 <buzzer_handler+0x5b4>
    1c0c:	e1d230b0 	ldrh	r3, [r2]
    1c10:	e3530e19 	cmp	r3, #400	; 0x190
    1c14:	e2833001 	add	r3, r3, #1
    1c18:	e1c230b0 	strh	r3, [r2]
    1c1c:	2affff74 	bcs	19f4 <buzzer_handler+0x194>
	{
		buz_priority|=BU_WARNING_MAG_FS;
		if(buz_cnt%100<5) buz_active|=BU_WARNING_MAG_FS;
    1c20:	e1d610b0 	ldrh	r1, [r6]
    1c24:	e59f21e4 	ldr	r2, [pc, #484]	; 1e10 <buzzer_handler+0x5b0>
    1c28:	e083c192 	umull	ip, r3, r2, r1
    1c2c:	e1a032a3 	lsr	r3, r3, #5
    1c30:	e0833103 	add	r3, r3, r3, lsl #2
    1c34:	e0833103 	add	r3, r3, r3, lsl #2
    1c38:	e0411103 	sub	r1, r1, r3, lsl #2
    1c3c:	e1a01801 	lsl	r1, r1, #16
    1c40:	e1a01821 	lsr	r1, r1, #16
    1c44:	e3510004 	cmp	r1, #4
	}

	//mag fieldstrength warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_FIELD_STRENGTH_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_fs++<400))
	{
		buz_priority|=BU_WARNING_MAG_FS;
    1c48:	e38ec040 	orr	ip, lr, #64	; 0x40
		if(buz_cnt%100<5) buz_active|=BU_WARNING_MAG_FS;
    1c4c:	9a000007 	bls	1c70 <buzzer_handler+0x410>
		else if(buz_cnt%100<10) buz_active&=~BU_WARNING_MAG_FS;
    1c50:	e3510009 	cmp	r1, #9
    1c54:	9affff67 	bls	19f8 <buzzer_handler+0x198>
		else if(buz_cnt%100<15) buz_active|=BU_WARNING_MAG_FS;
    1c58:	e351000e 	cmp	r1, #14
    1c5c:	9a000003 	bls	1c70 <buzzer_handler+0x410>
		else if(buz_cnt%100<20) buz_active&=~BU_WARNING_MAG_FS;
    1c60:	e3510013 	cmp	r1, #19
    1c64:	9affff63 	bls	19f8 <buzzer_handler+0x198>
		else if(buz_cnt%100<25) buz_active|=BU_WARNING_MAG_FS;
    1c68:	e3510018 	cmp	r1, #24
    1c6c:	8affff61 	bhi	19f8 <buzzer_handler+0x198>
    1c70:	e3800040 	orr	r0, r0, #64	; 0x40
    1c74:	eaffff60 	b	19fc <buzzer_handler+0x19c>
		if(!SYSTEM_initialized)
		{
			buz_priority|=BU_INIT;

#ifndef MATLAB
			if(buz_cnt%100<5){buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}
    1c78:	e1d610b0 	ldrh	r1, [r6]
    1c7c:	e59f218c 	ldr	r2, [pc, #396]	; 1e10 <buzzer_handler+0x5b0>
    1c80:	e083c192 	umull	ip, r3, r2, r1
    1c84:	e1a032a3 	lsr	r3, r3, #5
    1c88:	e0833103 	add	r3, r3, r3, lsl #2
    1c8c:	e0833103 	add	r3, r3, r3, lsl #2
    1c90:	e0411103 	sub	r1, r1, r3, lsl #2
    1c94:	e1a01801 	lsl	r1, r1, #16
    1c98:	e1a01821 	lsr	r1, r1, #16
    1c9c:	e3510004 	cmp	r1, #4

	if(buzzer_warnings&BUZZER_WARNING_INIT_BEEP)
	{
		if(!SYSTEM_initialized)
		{
			buz_priority|=BU_INIT;
    1ca0:	e3855001 	orr	r5, r5, #1

#ifndef MATLAB
			if(buz_cnt%100<5){buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}
    1ca4:	9a000048 	bls	1dcc <buzzer_handler+0x56c>
			else if(buz_cnt%100<10) {buz_active&=~BU_INIT; I2C1_setRGBLed(0, 0, 0);}
    1ca8:	e3510009 	cmp	r1, #9
    1cac:	9a000005 	bls	1cc8 <buzzer_handler+0x468>
			else if(buz_cnt%100<15) {buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}
    1cb0:	e351000e 	cmp	r1, #14
    1cb4:	9a000044 	bls	1dcc <buzzer_handler+0x56c>

			#if ((__BUILD_CONFIG==0x00) || (__BUILD_CONFIG==0x02))
				else if(buz_cnt%100<30) {buz_active&=~BU_INIT; I2C1_setRGBLed(0, 0, 0);}
    1cb8:	e351001d 	cmp	r1, #29
    1cbc:	9a000001 	bls	1cc8 <buzzer_handler+0x468>
				else if(buz_cnt%100<35) {buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}
    1cc0:	e3510022 	cmp	r1, #34	; 0x22
    1cc4:	9a000040 	bls	1dcc <buzzer_handler+0x56c>
			#endif

			else {buz_active&=~BU_INIT; I2C1_setRGBLed(0, 0, 0);}
    1cc8:	e1a01000 	mov	r1, r0
    1ccc:	e1a02000 	mov	r2, r0
    1cd0:	e3c44001 	bic	r4, r4, #1
    1cd4:	eb000cb6 	bl	4fb4 <I2C1_setRGBLed>
    1cd8:	eaffff54 	b	1a30 <buzzer_handler+0x1d0>
		buz_priority&=~BU_WARNING_MAG_FS;
		buz_active&=~BU_WARNING_MAG_FS;
	}

	//mag inclination warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_INCLINATION_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_inc++<400))
    1cdc:	e59f3124 	ldr	r3, [pc, #292]	; 1e08 <buzzer_handler+0x5a8>
    1ce0:	e5d32000 	ldrb	r2, [r3]
    1ce4:	e3520000 	cmp	r2, #0
    1ce8:	0affff45 	beq	1a04 <buzzer_handler+0x1a4>
    1cec:	e59f2124 	ldr	r2, [pc, #292]	; 1e18 <buzzer_handler+0x5b8>
    1cf0:	e1d230b0 	ldrh	r3, [r2]
    1cf4:	e3530e19 	cmp	r3, #400	; 0x190
    1cf8:	e2833001 	add	r3, r3, #1
    1cfc:	e1c230b0 	strh	r3, [r2]
    1d00:	2affff3f 	bcs	1a04 <buzzer_handler+0x1a4>
	{
		buz_priority|=BU_WARNING_MAG_INC;
		if(buz_cnt%100<5) buz_active|=BU_WARNING_MAG_INC;
    1d04:	e1d610b0 	ldrh	r1, [r6]
    1d08:	e59f2100 	ldr	r2, [pc, #256]	; 1e10 <buzzer_handler+0x5b0>
    1d0c:	e083e192 	umull	lr, r3, r2, r1
    1d10:	e1a032a3 	lsr	r3, r3, #5
    1d14:	e0833103 	add	r3, r3, r3, lsl #2
    1d18:	e0833103 	add	r3, r3, r3, lsl #2
    1d1c:	e0411103 	sub	r1, r1, r3, lsl #2
    1d20:	e1a01801 	lsl	r1, r1, #16
    1d24:	e1a01821 	lsr	r1, r1, #16
    1d28:	e3510004 	cmp	r1, #4
	}

	//mag inclination warning: warn 3 times only
	if((LL_1khz_attitude_data.flightMode&FM_MAG_INCLINATION_ERROR)&&(SYSTEM_initialized)&&(error_cnt_mag_inc++<400))
	{
		buz_priority|=BU_WARNING_MAG_INC;
    1d2c:	e38c5080 	orr	r5, ip, #128	; 0x80
		if(buz_cnt%100<5) buz_active|=BU_WARNING_MAG_INC;
    1d30:	9a00000b 	bls	1d64 <buzzer_handler+0x504>
		else if(buz_cnt%100<10) buz_active&=~BU_WARNING_MAG_INC;
    1d34:	e3510009 	cmp	r1, #9
    1d38:	9affff32 	bls	1a08 <buzzer_handler+0x1a8>
		else if(buz_cnt%100<15) buz_active|=BU_WARNING_MAG_INC;
    1d3c:	e351000e 	cmp	r1, #14
    1d40:	9a000007 	bls	1d64 <buzzer_handler+0x504>
		else if(buz_cnt%100<20) buz_active&=~BU_WARNING_MAG_INC;
    1d44:	e3510013 	cmp	r1, #19
    1d48:	9affff2e 	bls	1a08 <buzzer_handler+0x1a8>
		else if(buz_cnt%100<25) buz_active|=BU_WARNING_MAG_INC;
    1d4c:	e3510018 	cmp	r1, #24
    1d50:	9a000003 	bls	1d64 <buzzer_handler+0x504>
		else if(buz_cnt%100<30) buz_active&=~BU_WARNING_MAG_INC;
    1d54:	e351001d 	cmp	r1, #29
    1d58:	9affff2a 	bls	1a08 <buzzer_handler+0x1a8>
		else if(buz_cnt%100<35) buz_active|=BU_WARNING_MAG_INC;
    1d5c:	e3510022 	cmp	r1, #34	; 0x22
    1d60:	8affff28 	bhi	1a08 <buzzer_handler+0x1a8>
    1d64:	e3804080 	orr	r4, r0, #128	; 0x80
    1d68:	eaffff27 	b	1a0c <buzzer_handler+0x1ac>
	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;

	//battery warning
	if(++bat_cnt==100){
		bat_cnt=0;
		bat_div=(ALARM_battery_warning_voltage_high-ALARM_battery_warning_voltage_low)/100;
    1d6c:	e59f5074 	ldr	r5, [pc, #116]	; 1de8 <buzzer_handler+0x588>
    1d70:	e59fc074 	ldr	ip, [pc, #116]	; 1dec <buzzer_handler+0x58c>
    1d74:	e1d530b0 	ldrh	r3, [r5]
    1d78:	e1dc20b0 	ldrh	r2, [ip]
    1d7c:	e59f108c 	ldr	r1, [pc, #140]	; 1e10 <buzzer_handler+0x5b0>
    1d80:	e0623003 	rsb	r3, r2, r3
    1d84:	e0c02391 	smull	r2, r0, r1, r3
    1d88:	e1a03fc3 	asr	r3, r3, #31
    1d8c:	e59f2064 	ldr	r2, [pc, #100]	; 1df8 <buzzer_handler+0x598>
    1d90:	e06332c0 	rsb	r3, r3, r0, asr #5

	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;

	//battery warning
	if(++bat_cnt==100){
		bat_cnt=0;
    1d94:	e3a01000 	mov	r1, #0
		bat_div=(ALARM_battery_warning_voltage_high-ALARM_battery_warning_voltage_low)/100;
    1d98:	e5823000 	str	r3, [r2]

	if(++buz_cnt>=BUZZ_INTERVAL) buz_cnt=0;

	//battery warning
	if(++bat_cnt==100){
		bat_cnt=0;
    1d9c:	e5841000 	str	r1, [r4]
    1da0:	eafffec1 	b	18ac <buzzer_handler+0x4c>
	if(buzzer_warnings&BUZZER_WARNING_GPS_BEEP)
	{
		if(((GPS_Data.status&0xFF)!=3)&&(LL_1khz_attitude_data.RC_data[5]>200))	//no lock and in GPS mode
		{
			buz_priority|=BU_GPS_BEEP;
			if(buz_cnt<5) buz_active|=BU_GPS_BEEP;
    1da4:	e1d630b0 	ldrh	r3, [r6]
    1da8:	e3530004 	cmp	r3, #4

	if(buzzer_warnings&BUZZER_WARNING_GPS_BEEP)
	{
		if(((GPS_Data.status&0xFF)!=3)&&(LL_1khz_attitude_data.RC_data[5]>200))	//no lock and in GPS mode
		{
			buz_priority|=BU_GPS_BEEP;
    1dac:	e3800c01 	orr	r0, r0, #256	; 0x100
			if(buz_cnt<5) buz_active|=BU_GPS_BEEP;
    1db0:	93811c01 	orrls	r1, r1, #256	; 0x100
			else buz_active&=~BU_GPS_BEEP;
    1db4:	83c11c01 	bichi	r1, r1, #256	; 0x100
    1db8:	eafffee4 	b	1950 <buzzer_handler+0xf0>
    1dbc:	e59f203c 	ldr	r2, [pc, #60]	; 1e00 <buzzer_handler+0x5a0>
		}
		else
		{
			buz_active&=~BU_GPS_BEEP;
    1dc0:	e3c11c01 	bic	r1, r1, #256	; 0x100
			buz_priority&=~BU_GPS_BEEP;
    1dc4:	e3c00c01 	bic	r0, r0, #256	; 0x100
    1dc8:	eafffee0 	b	1950 <buzzer_handler+0xf0>
			else if(buz_cnt%100<10) {buz_active&=~BU_INIT; I2C1_setRGBLed(0, 0, 0);}
			else if(buz_cnt%100<15) {buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}

			#if ((__BUILD_CONFIG==0x00) || (__BUILD_CONFIG==0x02))
				else if(buz_cnt%100<30) {buz_active&=~BU_INIT; I2C1_setRGBLed(0, 0, 0);}
				else if(buz_cnt%100<35) {buz_active|=BU_INIT; I2C1_setRGBLed(0, 0, 255);}
    1dcc:	e1a01000 	mov	r1, r0
    1dd0:	e3a020ff 	mov	r2, #255	; 0xff
    1dd4:	e3844001 	orr	r4, r4, #1
    1dd8:	eb000c75 	bl	4fb4 <I2C1_setRGBLed>
    1ddc:	eaffff13 	b	1a30 <buzzer_handler+0x1d0>
    1de0:	400009c4 	.word	0x400009c4
    1de4:	400009c0 	.word	0x400009c0
    1de8:	40000002 	.word	0x40000002
    1dec:	40000004 	.word	0x40000004
    1df0:	400009bc 	.word	0x400009bc
    1df4:	400009b8 	.word	0x400009b8
    1df8:	40000008 	.word	0x40000008
    1dfc:	40000000 	.word	0x40000000
    1e00:	4000170c 	.word	0x4000170c
    1e04:	400017c0 	.word	0x400017c0
    1e08:	400009ec 	.word	0x400009ec
    1e0c:	400009c6 	.word	0x400009c6
    1e10:	51eb851f 	.word	0x51eb851f
    1e14:	400009ca 	.word	0x400009ca
    1e18:	400009c8 	.word	0x400009c8

00001e1c <generateBuildInfo>:
/*
 *  MODIFY THIS FUNCTION TO INCLUDE ALL IMPORTANT DEFINES OF A PROJECT
 */

void generateBuildInfo()
{
    1e1c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e20:	e24dd030 	sub	sp, sp, #48	; 0x30
	char months[12][3]={"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dez"};
    1e24:	e28d4001 	add	r4, sp, #1
    1e28:	e59f119c 	ldr	r1, [pc, #412]	; 1fcc <generateBuildInfo+0x1b0>
    1e2c:	e3a02024 	mov	r2, #36	; 0x24
    1e30:	e1a00004 	mov	r0, r4
	    char dateStr[11]=__DATE__;
    1e34:	e28d6025 	add	r6, sp, #37	; 0x25
 *  MODIFY THIS FUNCTION TO INCLUDE ALL IMPORTANT DEFINES OF A PROJECT
 */

void generateBuildInfo()
{
	char months[12][3]={"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dez"};
    1e38:	eb002ee2 	bl	d9c8 <__memcpy_from_arm>
	    char dateStr[11]=__DATE__;
    1e3c:	e1a00006 	mov	r0, r6
    1e40:	e59f1188 	ldr	r1, [pc, #392]	; 1fd0 <generateBuildInfo+0x1b4>
    1e44:	e3a0200b 	mov	r2, #11
    1e48:	eb002ede 	bl	d9c8 <__memcpy_from_arm>
    1e4c:	e59f5180 	ldr	r5, [pc, #384]	; 1fd4 <generateBuildInfo+0x1b8>
    1e50:	e3a00000 	mov	r0, #0
    1e54:	e5dd7025 	ldrb	r7, [sp, #37]	; 0x25
    1e58:	e5dde026 	ldrb	lr, [sp, #38]	; 0x26
    1e5c:	e5ddc027 	ldrb	ip, [sp, #39]	; 0x27
    1e60:	e1a0a000 	mov	sl, r0
    1e64:	e1a09000 	mov	r9, r0
    1e68:	e1a0b000 	mov	fp, r0
    1e6c:	e1a08000 	mov	r8, r0
    1e70:	ea000005 	b	1e8c <generateBuildInfo+0x70>
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
	                            cnt++;
	            if (cnt==3)
    1e74:	e3510003 	cmp	r1, #3
	    int i,z;


	    m=1;

	    for (z=0;z<11;z++)
    1e78:	e2844003 	add	r4, r4, #3
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
	                            cnt++;
	            if (cnt==3)
    1e7c:	0a000010 	beq	1ec4 <generateBuildInfo+0xa8>
	    int i,z;


	    m=1;

	    for (z=0;z<11;z++)
    1e80:	e2800001 	add	r0, r0, #1
    1e84:	e350000b 	cmp	r0, #11
    1e88:	0a00000f 	beq	1ecc <generateBuildInfo+0xb0>
/*
 *  MODIFY THIS FUNCTION TO INCLUDE ALL IMPORTANT DEFINES OF A PROJECT
 */

void generateBuildInfo()
{
    1e8c:	e5d43000 	ldrb	r3, [r4]

	    for (z=0;z<11;z++)
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
    1e90:	e5d42001 	ldrb	r2, [r4, #1]
/*
 *  MODIFY THIS FUNCTION TO INCLUDE ALL IMPORTANT DEFINES OF A PROJECT
 */

void generateBuildInfo()
{
    1e94:	e1530007 	cmp	r3, r7
    1e98:	13a01000 	movne	r1, #0
    1e9c:	03a01001 	moveq	r1, #1

	    for (z=0;z<11;z++)
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
    1ea0:	e5d43002 	ldrb	r3, [r4, #2]
    1ea4:	e152000e 	cmp	r2, lr
	                            cnt++;
    1ea8:	02811001 	addeq	r1, r1, #1

	    for (z=0;z<11;z++)
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
    1eac:	e153000c 	cmp	r3, ip
    1eb0:	1affffef 	bne	1e74 <generateBuildInfo+0x58>
	                            cnt++;
    1eb4:	e2811001 	add	r1, r1, #1
	            if (cnt==3)
    1eb8:	e3510003 	cmp	r1, #3
	    int i,z;


	    m=1;

	    for (z=0;z<11;z++)
    1ebc:	e2844003 	add	r4, r4, #3
	    {
	            int cnt=0;
	            for (i=0;i<3;i++)
	                    if (months[z][i]==dateStr[i])
	                            cnt++;
	            if (cnt==3)
    1ec0:	1affffee 	bne	1e80 <generateBuildInfo+0x64>
	            {
	                    m=z+1;
    1ec4:	e2804001 	add	r4, r0, #1
    1ec8:	ea000000 	b	1ed0 <generateBuildInfo+0xb4>
	    int i,z;


	    m=1;

	    for (z=0;z<11;z++)
    1ecc:	e3a04001 	mov	r4, #1
    1ed0:	e3a02000 	mov	r2, #0
    1ed4:	e3a01030 	mov	r1, #48	; 0x30
	                    m=z+1;
	                    break;
	            }
	    }
	    for (z=0;z<11;z++)
	            if (dateStr[z]<48)
    1ed8:	e7d23006 	ldrb	r3, [r2, r6]
    1edc:	e353002f 	cmp	r3, #47	; 0x2f
	                    dateStr[z]=48;
    1ee0:	97c21006 	strbls	r1, [r2, r6]
	            {
	                    m=z+1;
	                    break;
	            }
	    }
	    for (z=0;z<11;z++)
    1ee4:	e2822001 	add	r2, r2, #1
    1ee8:	e352000b 	cmp	r2, #11
    1eec:	1afffff9 	bne	1ed8 <generateBuildInfo+0xbc>

	    d=(dateStr[4]-48)*10+(dateStr[5]-48);
	    y=(dateStr[7]-48)*1000+(dateStr[8]-48)*100+(dateStr[9]-48)*10+(dateStr[10]-48);


	 buildInfo.build_date=y+m*10000+d*1000000;
    1ef0:	e5dd302d 	ldrb	r3, [sp, #45]	; 0x2d
    1ef4:	e5dd102c 	ldrb	r1, [sp, #44]	; 0x2c
    1ef8:	e0833103 	add	r3, r3, r3, lsl #2
    1efc:	e5ddc029 	ldrb	ip, [sp, #41]	; 0x29
    1f00:	e0612281 	rsb	r2, r1, r1, lsl #5
    1f04:	e0833103 	add	r3, r3, r3, lsl #2
    1f08:	e5dd002a 	ldrb	r0, [sp, #42]	; 0x2a
    1f0c:	e0811102 	add	r1, r1, r2, lsl #2
    1f10:	e08cc10c 	add	ip, ip, ip, lsl #2
    1f14:	e5dde02f 	ldrb	lr, [sp, #47]	; 0x2f
    1f18:	e1a03103 	lsl	r3, r3, #2
    1f1c:	e5dd202e 	ldrb	r2, [sp, #46]	; 0x2e
    1f20:	e0833181 	add	r3, r3, r1, lsl #3
    1f24:	e080008c 	add	r0, r0, ip, lsl #1
    1f28:	e083300e 	add	r3, r3, lr
    1f2c:	e2400e21 	sub	r0, r0, #528	; 0x210
    1f30:	e0822102 	add	r2, r2, r2, lsl #2
    1f34:	e0833082 	add	r3, r3, r2, lsl #1
    1f38:	e0601280 	rsb	r1, r0, r0, lsl #5
    1f3c:	e0611301 	rsb	r1, r1, r1, lsl #6
    1f40:	e2433a0d 	sub	r3, r3, #53248	; 0xd000
    1f44:	e0642284 	rsb	r2, r4, r4, lsl #5
    1f48:	e0800181 	add	r0, r0, r1, lsl #3
    1f4c:	e0842102 	add	r2, r4, r2, lsl #2
    1f50:	e2433050 	sub	r3, r3, #80	; 0x50
    1f54:	e0833300 	add	r3, r3, r0, lsl #6
    1f58:	e0822102 	add	r2, r2, r2, lsl #2
    1f5c:	e0833202 	add	r3, r3, r2, lsl #4
	 buildInfo.configuration=__BUILD_CONFIG;
	 buildInfo.build_number=0;
	 buildInfo.svn_modified=0;
	 buildInfo.svn_revision=0;
    1f60:	e3a01000 	mov	r1, #0

	    d=(dateStr[4]-48)*10+(dateStr[5]-48);
	    y=(dateStr[7]-48)*1000+(dateStr[8]-48)*100+(dateStr[9]-48)*10+(dateStr[10]-48);


	 buildInfo.build_date=y+m*10000+d*1000000;
    1f64:	e1a0e423 	lsr	lr, r3, #8
    1f68:	e1a0c823 	lsr	ip, r3, #16
    1f6c:	e1a00c23 	lsr	r0, r3, #24
    1f70:	e3a02003 	mov	r2, #3
    1f74:	e5c53004 	strb	r3, [r5, #4]
    1f78:	e5c52000 	strb	r2, [r5]
    1f7c:	e5c51011 	strb	r1, [r5, #17]
    1f80:	e5c58010 	strb	r8, [r5, #16]
    1f84:	e5c5b012 	strb	fp, [r5, #18]
    1f88:	e5c5900b 	strb	r9, [r5, #11]
    1f8c:	e5c5a00a 	strb	sl, [r5, #10]
    1f90:	e5c51009 	strb	r1, [r5, #9]
    1f94:	e5c51008 	strb	r1, [r5, #8]
    1f98:	e5c5100f 	strb	r1, [r5, #15]
    1f9c:	e5c5100e 	strb	r1, [r5, #14]
    1fa0:	e5c5100d 	strb	r1, [r5, #13]
    1fa4:	e5c5100c 	strb	r1, [r5, #12]
    1fa8:	e5c50007 	strb	r0, [r5, #7]
    1fac:	e5c5c006 	strb	ip, [r5, #6]
    1fb0:	e5c5e005 	strb	lr, [r5, #5]
    1fb4:	e5c51003 	strb	r1, [r5, #3]
    1fb8:	e5c51002 	strb	r1, [r5, #2]
    1fbc:	e5c51001 	strb	r1, [r5, #1]
	 buildInfo.svn_modified=0;
	 buildInfo.svn_revision=0;
	 buildInfo.version_major=__VERSION_MAJOR;
	 buildInfo.version_minor=__VERSION_MINOR;

}
    1fc0:	e28dd030 	add	sp, sp, #48	; 0x30
    1fc4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fc8:	e12fff1e 	bx	lr
    1fcc:	0000da88 	.word	0x0000da88
    1fd0:	0000da7c 	.word	0x0000da7c
    1fd4:	400018e1 	.word	0x400018e1

00001fd8 <RBInit>:

void UART0Debug(char *msg, int length);

void RBInit(RING_BUFFER *aBuffer)
{
	aBuffer->EOB = 0;
    1fd8:	e3a02000 	mov	r2, #0
	aBuffer->SOB = -1; //we increment first. 
    1fdc:	e3e03000 	mvn	r3, #0

void UART0Debug(char *msg, int length);

void RBInit(RING_BUFFER *aBuffer)
{
	aBuffer->EOB = 0;
    1fe0:	e5802000 	str	r2, [r0]
	aBuffer->SOB = -1; //we increment first. 
    1fe4:	e5803004 	str	r3, [r0, #4]
	aBuffer->bytes = 0;
    1fe8:	e5c02008 	strb	r2, [r0, #8]
}
    1fec:	e12fff1e 	bx	lr

00001ff0 <showBuffer>:
	for (i = 0; i < aBuffer->bytes; i++)
	{
		sprintf(msg, "Byte %i:%i\n\r", i, aBuffer->buffer[ aBuffer->SOB + i + 1]);
		sendText(msg);
	}
}
    1ff0:	e12fff1e 	bx	lr

00001ff4 <RBPushBack>:
			RBDequeue(aBuffer);
}

void RBPushBack(RING_BUFFER *aBuffer, char aByte)
{
	aBuffer->buffer[ aBuffer->SOB ] = aByte;
    1ff4:	e5902004 	ldr	r2, [r0, #4]
    1ff8:	e0822000 	add	r2, r2, r0
    1ffc:	e2822008 	add	r2, r2, #8
		for ( i = 0; i < numToDiscard; i++)
			RBDequeue(aBuffer);
}

void RBPushBack(RING_BUFFER *aBuffer, char aByte)
{
    2000:	e20110ff 	and	r1, r1, #255	; 0xff
	aBuffer->buffer[ aBuffer->SOB ] = aByte;
    2004:	e5c21001 	strb	r1, [r2, #1]
	aBuffer->SOB--;
    2008:	e5903004 	ldr	r3, [r0, #4]
    200c:	e2433001 	sub	r3, r3, #1
    2010:	e5803004 	str	r3, [r0, #4]
	if ( aBuffer->SOB < 0 )
    2014:	e5902004 	ldr	r2, [r0, #4]
    2018:	e3520000 	cmp	r2, #0
		aBuffer->SOB = BUFF_LEN - 1;
    201c:	b3a03095 	movlt	r3, #149	; 0x95
    2020:	b5803004 	strlt	r3, [r0, #4]
	aBuffer->bytes++;
    2024:	e5d03008 	ldrb	r3, [r0, #8]
    2028:	e2833001 	add	r3, r3, #1
    202c:	e20330ff 	and	r3, r3, #255	; 0xff
    2030:	e5c03008 	strb	r3, [r0, #8]
}
    2034:	e12fff1e 	bx	lr

00002038 <RBPeek>:
char RBPeek(RING_BUFFER *aBuffer)
{
	int idxNByte;
	char aByte;
	
	if ( aBuffer->bytes == 0 )
    2038:	e5d03008 	ldrb	r3, [r0, #8]
    203c:	e20330ff 	and	r3, r3, #255	; 0xff
    2040:	e3530000 	cmp	r3, #0
    2044:	0a000007 	beq	2068 <RBPeek+0x30>
		return 0;
	idxNByte = aBuffer->SOB + 1;
    2048:	e5903004 	ldr	r3, [r0, #4]
    204c:	e2833001 	add	r3, r3, #1
	
	if ( idxNByte >= BUFF_LEN )
    2050:	e3530095 	cmp	r3, #149	; 0x95
    2054:	c3a03000 	movgt	r3, #0
		idxNByte = 0;
	aByte = aBuffer->buffer[ idxNByte ];
    2058:	e0833000 	add	r3, r3, r0
    205c:	e2833008 	add	r3, r3, #8
    2060:	e5d32001 	ldrb	r2, [r3, #1]
    2064:	e20230ff 	and	r3, r2, #255	; 0xff
	return aByte;
}
    2068:	e1a00003 	mov	r0, r3
    206c:	e12fff1e 	bx	lr

00002070 <RBfindInBuffer>:

// Searches the Ring Buffer for a specific character within searchLen characters of start.
//  Returns index if found, -1 if not.
int RBfindInBuffer(RING_BUFFER *aBuffer, int startIndex, int searchLen, unsigned char aByte)
{
    2070:	e92d4030 	push	{r4, r5, lr}
    2074:	e1a05000 	mov	r5, r0
	int x, idx;
	int hit = -1;

	idx = aBuffer->SOB + startIndex + 1;
    2078:	e5900004 	ldr	r0, [r0, #4]
    207c:	e2800001 	add	r0, r0, #1
    2080:	e0811000 	add	r1, r1, r0

	if ( idx >= BUFF_LEN )
    2084:	e3510095 	cmp	r1, #149	; 0x95
		idx = idx - BUFF_LEN;
    2088:	c2411096 	subgt	r1, r1, #150	; 0x96
	
	for (x = 0; x < searchLen && hit == -1; x++)
    208c:	e3520000 	cmp	r2, #0
}

// Searches the Ring Buffer for a specific character within searchLen characters of start.
//  Returns index if found, -1 if not.
int RBfindInBuffer(RING_BUFFER *aBuffer, int startIndex, int searchLen, unsigned char aByte)
{
    2090:	e1a0e002 	mov	lr, r2
    2094:	e20340ff 	and	r4, r3, #255	; 0xff
	idx = aBuffer->SOB + startIndex + 1;

	if ( idx >= BUFF_LEN )
		idx = idx - BUFF_LEN;
	
	for (x = 0; x < searchLen && hit == -1; x++)
    2098:	d3e00000 	mvnle	r0, #0
    209c:	da000011 	ble	20e8 <RBfindInBuffer+0x78>
    20a0:	e3a0c000 	mov	ip, #0
    20a4:	e3e00000 	mvn	r0, #0
	{			
		if ( aBuffer->buffer[idx] == aByte )
    20a8:	e0813005 	add	r3, r1, r5
    20ac:	e2833008 	add	r3, r3, #8
    20b0:	e5d32001 	ldrb	r2, [r3, #1]
    20b4:	e1520004 	cmp	r2, r4
    20b8:	01a0000c 	moveq	r0, ip
	idx = aBuffer->SOB + startIndex + 1;

	if ( idx >= BUFF_LEN )
		idx = idx - BUFF_LEN;
	
	for (x = 0; x < searchLen && hit == -1; x++)
    20bc:	e28cc001 	add	ip, ip, #1
    20c0:	e15e000c 	cmp	lr, ip
    20c4:	d3a03000 	movle	r3, #0
    20c8:	c3a03001 	movgt	r3, #1
	{			
		if ( aBuffer->buffer[idx] == aByte )
			hit = x;
		idx++;	
    20cc:	e2811001 	add	r1, r1, #1
	idx = aBuffer->SOB + startIndex + 1;

	if ( idx >= BUFF_LEN )
		idx = idx - BUFF_LEN;
	
	for (x = 0; x < searchLen && hit == -1; x++)
    20d0:	e3700001 	cmn	r0, #1
    20d4:	13a03000 	movne	r3, #0
	{			
		if ( aBuffer->buffer[idx] == aByte )
			hit = x;
		idx++;	
		if ( idx >= BUFF_LEN )
    20d8:	e3510095 	cmp	r1, #149	; 0x95
    20dc:	c3a01000 	movgt	r1, #0
	idx = aBuffer->SOB + startIndex + 1;

	if ( idx >= BUFF_LEN )
		idx = idx - BUFF_LEN;
	
	for (x = 0; x < searchLen && hit == -1; x++)
    20e0:	e3530000 	cmp	r3, #0
    20e4:	1affffef 	bne	20a8 <RBfindInBuffer+0x38>
		idx++;	
		if ( idx >= BUFF_LEN )
			idx = 0;
	}
	return hit; //Not found...	
}
    20e8:	e8bd4030 	pop	{r4, r5, lr}
    20ec:	e12fff1e 	bx	lr

000020f0 <RBCount>:

int RBCount(RING_BUFFER *aBuffer)
{
	return aBuffer->bytes;
    20f0:	e5d00008 	ldrb	r0, [r0, #8]
}
    20f4:	e12fff1e 	bx	lr

000020f8 <RBDequeue>:
	if (aBuffer->EOB >= BUFF_LEN)
		aBuffer->EOB = 0;
}

char RBDequeue(RING_BUFFER *aBuffer)
{
    20f8:	e92d4010 	push	{r4, lr}
    20fc:	e1a0c000 	mov	ip, r0
	char aByte;
	
	if ( aBuffer->bytes == 0 )
    2100:	e5dc3008 	ldrb	r3, [ip, #8]
    2104:	e20340ff 	and	r4, r3, #255	; 0xff
    2108:	e3540000 	cmp	r4, #0
	{
		UART0Debug("RBDequeue: Buffer Empty!\n",25);
    210c:	e3a01019 	mov	r1, #25
    2110:	e59f0054 	ldr	r0, [pc, #84]	; 216c <RBDequeue+0x74>

char RBDequeue(RING_BUFFER *aBuffer)
{
	char aByte;
	
	if ( aBuffer->bytes == 0 )
    2114:	0a000011 	beq	2160 <RBDequeue+0x68>
		UART0Debug("RBDequeue: Buffer Empty!\n",25);
		return 0; //Empty buffer!
	}
	

	aBuffer->bytes--;
    2118:	e5dc3008 	ldrb	r3, [ip, #8]
    211c:	e2433001 	sub	r3, r3, #1
    2120:	e20330ff 	and	r3, r3, #255	; 0xff
    2124:	e5cc3008 	strb	r3, [ip, #8]
	aBuffer->SOB++;
    2128:	e59c2004 	ldr	r2, [ip, #4]
    212c:	e2822001 	add	r2, r2, #1
    2130:	e58c2004 	str	r2, [ip, #4]
	if ( aBuffer->SOB >= BUFF_LEN)
    2134:	e59c3004 	ldr	r3, [ip, #4]
    2138:	e3530095 	cmp	r3, #149	; 0x95
		aBuffer->SOB = 0;
    213c:	c3a03000 	movgt	r3, #0
    2140:	c58c3004 	strgt	r3, [ip, #4]

	aByte = aBuffer->buffer[ aBuffer->SOB ];
    2144:	e59c3004 	ldr	r3, [ip, #4]
    2148:	e083300c 	add	r3, r3, ip
    214c:	e2833008 	add	r3, r3, #8
    2150:	e5d32001 	ldrb	r2, [r3, #1]
    2154:	e20200ff 	and	r0, r2, #255	; 0xff
	
	
	return aByte;
}
    2158:	e8bd4010 	pop	{r4, lr}
    215c:	e12fff1e 	bx	lr
{
	char aByte;
	
	if ( aBuffer->bytes == 0 )
	{
		UART0Debug("RBDequeue: Buffer Empty!\n",25);
    2160:	eb00045e 	bl	32e0 <UART0Debug>
    2164:	e1a00004 	mov	r0, r4
    2168:	eafffffa 	b	2158 <RBDequeue+0x60>
    216c:	0000daac 	.word	0x0000daac

00002170 <RBDiscard>:
	
	return aByte;
}

void RBDiscard(RING_BUFFER *aBuffer, char numToDiscard)
{
    2170:	e92d4070 	push	{r4, r5, r6, lr}
	int i;
	
	if ( aBuffer->bytes <= numToDiscard )
    2174:	e5d03008 	ldrb	r3, [r0, #8]
	
	return aByte;
}

void RBDiscard(RING_BUFFER *aBuffer, char numToDiscard)
{
    2178:	e20150ff 	and	r5, r1, #255	; 0xff
	int i;
	
	if ( aBuffer->bytes <= numToDiscard )
    217c:	e1530005 	cmp	r3, r5
	
	return aByte;
}

void RBDiscard(RING_BUFFER *aBuffer, char numToDiscard)
{
    2180:	e1a06000 	mov	r6, r0
	int i;
	
	if ( aBuffer->bytes <= numToDiscard )
    2184:	9a000009 	bls	21b0 <RBDiscard+0x40>
		aBuffer->bytes = 0;
		aBuffer->EOB = 0;
		aBuffer->SOB = -1;		
	}
	else
		for ( i = 0; i < numToDiscard; i++)
    2188:	e3550000 	cmp	r5, #0
	
	if ( aBuffer->bytes <= numToDiscard )
	{
		aBuffer->bytes = 0;
		aBuffer->EOB = 0;
		aBuffer->SOB = -1;		
    218c:	c3a04000 	movgt	r4, #0
	}
	else
		for ( i = 0; i < numToDiscard; i++)
    2190:	da000004 	ble	21a8 <RBDiscard+0x38>
    2194:	e2844001 	add	r4, r4, #1
			RBDequeue(aBuffer);
    2198:	e1a00006 	mov	r0, r6
    219c:	ebffffd5 	bl	20f8 <RBDequeue>
		aBuffer->bytes = 0;
		aBuffer->EOB = 0;
		aBuffer->SOB = -1;		
	}
	else
		for ( i = 0; i < numToDiscard; i++)
    21a0:	e1540005 	cmp	r4, r5
    21a4:	1afffffa 	bne	2194 <RBDiscard+0x24>
			RBDequeue(aBuffer);
}
    21a8:	e8bd4070 	pop	{r4, r5, r6, lr}
    21ac:	e12fff1e 	bx	lr
{
	int i;
	
	if ( aBuffer->bytes <= numToDiscard )
	{
		aBuffer->bytes = 0;
    21b0:	e3a02000 	mov	r2, #0
		aBuffer->EOB = 0;
		aBuffer->SOB = -1;		
    21b4:	e3e03000 	mvn	r3, #0
{
	int i;
	
	if ( aBuffer->bytes <= numToDiscard )
	{
		aBuffer->bytes = 0;
    21b8:	e5c02008 	strb	r2, [r0, #8]
		aBuffer->EOB = 0;
    21bc:	e5802000 	str	r2, [r0]
		aBuffer->SOB = -1;		
    21c0:	e5803004 	str	r3, [r0, #4]
    21c4:	eafffff7 	b	21a8 <RBDiscard+0x38>

000021c8 <RBEnqueue>:
		sendText(msg);
	}
}
 
void RBEnqueue(RING_BUFFER *aBuffer, char x)
{
    21c8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    21cc:	e1a0c000 	mov	ip, r0
	if ( aBuffer->bytes >= BUFF_LEN )
    21d0:	e5dc3008 	ldrb	r3, [ip, #8]
		sendText(msg);
	}
}
 
void RBEnqueue(RING_BUFFER *aBuffer, char x)
{
    21d4:	e1a02001 	mov	r2, r1
	if ( aBuffer->bytes >= BUFF_LEN )
    21d8:	e3530095 	cmp	r3, #149	; 0x95
	{
		UART0Debug("1Buffer FULL!\n",13);
    21dc:	e59f0054 	ldr	r0, [pc, #84]	; 2238 <RBEnqueue+0x70>
    21e0:	e3a0100d 	mov	r1, #13
		sendText(msg);
	}
}
 
void RBEnqueue(RING_BUFFER *aBuffer, char x)
{
    21e4:	e20220ff 	and	r2, r2, #255	; 0xff
	if ( aBuffer->bytes >= BUFF_LEN )
    21e8:	8a000010 	bhi	2230 <RBEnqueue+0x68>
	{
		UART0Debug("1Buffer FULL!\n",13);
		return;
	}
	aBuffer->buffer[ aBuffer->EOB ] = x;
    21ec:	e59c3000 	ldr	r3, [ip]
    21f0:	e083300c 	add	r3, r3, ip
    21f4:	e2833008 	add	r3, r3, #8
    21f8:	e5c32001 	strb	r2, [r3, #1]
	aBuffer->EOB++;
    21fc:	e59c2000 	ldr	r2, [ip]
    2200:	e2822001 	add	r2, r2, #1
    2204:	e58c2000 	str	r2, [ip]
	aBuffer->bytes++;
    2208:	e5dc3008 	ldrb	r3, [ip, #8]
    220c:	e2833001 	add	r3, r3, #1
    2210:	e20330ff 	and	r3, r3, #255	; 0xff
    2214:	e5cc3008 	strb	r3, [ip, #8]
	if (aBuffer->EOB >= BUFF_LEN)
    2218:	e59c2000 	ldr	r2, [ip]
    221c:	e3520095 	cmp	r2, #149	; 0x95
		aBuffer->EOB = 0;
    2220:	c3a03000 	movgt	r3, #0
    2224:	c58c3000 	strgt	r3, [ip]
}
    2228:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    222c:	e12fff1e 	bx	lr
 
void RBEnqueue(RING_BUFFER *aBuffer, char x)
{
	if ( aBuffer->bytes >= BUFF_LEN )
	{
		UART0Debug("1Buffer FULL!\n",13);
    2230:	eb00042a 	bl	32e0 <UART0Debug>
    2234:	eafffffb 	b	2228 <RBEnqueue+0x60>
    2238:	0000dac8 	.word	0x0000dac8

0000223c <findInBuffer>:

// Searches the buffer, starting at startIndex, for aByte.
//  Returns the index in the buffer (from 0) the byte first occurs at.
//  Returns -1 if there is no occurrence.
int findInBuffer(int startIndex, int distance, char aByte)
{
    223c:	e1a03002 	mov	r3, r2
    2240:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    2244:	e1a02001 	mov	r2, r1
    2248:	e20330ff 	and	r3, r3, #255	; 0xff
	return RBfindInBuffer(&u0r, startIndex, distance, aByte); 
    224c:	e1a01000 	mov	r1, r0
    2250:	e59f0008 	ldr	r0, [pc, #8]	; 2260 <findInBuffer+0x24>
    2254:	ebffff85 	bl	2070 <RBfindInBuffer>
}
    2258:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    225c:	e12fff1e 	bx	lr
    2260:	40001a2c 	.word	0x40001a2c

00002264 <peekByte>:
}

// peekByte
//  Returns the next byte in the buffer w/o consuming it.
char peekByte()
{
    2264:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	return RBPeek(&u0r);
    2268:	e59f0008 	ldr	r0, [pc, #8]	; 2278 <peekByte+0x14>
    226c:	ebffff71 	bl	2038 <RBPeek>
}
    2270:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    2274:	e12fff1e 	bx	lr
    2278:	40001a2c 	.word	0x40001a2c

0000227c <skipBytes>:
}

// skipBytes
//	Discard num bytes in the buffer.
int skipBytes(int num)
{
    227c:	e92d4010 	push	{r4, lr}
	RBDiscard(&u0r, num);
    2280:	e59f4018 	ldr	r4, [pc, #24]	; 22a0 <skipBytes+0x24>
    2284:	e20010ff 	and	r1, r0, #255	; 0xff
    2288:	e1a00004 	mov	r0, r4
    228c:	ebffffb7 	bl	2170 <RBDiscard>
	return RBCount(&u0r);
    2290:	e1a00004 	mov	r0, r4
    2294:	ebffff95 	bl	20f0 <RBCount>
}
    2298:	e8bd4010 	pop	{r4, lr}
    229c:	e12fff1e 	bx	lr
    22a0:	40001a2c 	.word	0x40001a2c

000022a4 <bytesAvailable>:
		RBEnqueue(&u0s,*msg++);
//	uart0Prime();
}

char bytesAvailable(void)
{
    22a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	return RBCount(&u0r); //Groups of 4...
    22a8:	e59f000c 	ldr	r0, [pc, #12]	; 22bc <bytesAvailable+0x18>
    22ac:	ebffff8f 	bl	20f0 <RBCount>
    22b0:	e20000ff 	and	r0, r0, #255	; 0xff
}
    22b4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    22b8:	e12fff1e 	bx	lr
    22bc:	40001a2c 	.word	0x40001a2c

000022c0 <pushBack>:
		*buffer = getByte();
}

// Pushes a byte back onto the Ring Buffer.
void pushBack(char byte)
{
    22c0:	e20010ff 	and	r1, r0, #255	; 0xff
    22c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	RBPushBack(&u0r, byte);
    22c8:	e59f0008 	ldr	r0, [pc, #8]	; 22d8 <pushBack+0x18>
    22cc:	ebffff48 	bl	1ff4 <RBPushBack>
}
    22d0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    22d4:	e12fff1e 	bx	lr
    22d8:	40001a2c 	.word	0x40001a2c

000022dc <sendText>:
	for (c = 0; c < num; c++)
		UART0WriteChar(bytes[c]);
}

void sendText(char *msg)
{
    22dc:	e92d4010 	push	{r4, lr}
	while (*msg)
    22e0:	e5d01000 	ldrb	r1, [r0]
    22e4:	e3510000 	cmp	r1, #0
    22e8:	0a000005 	beq	2304 <sendText+0x28>
    22ec:	e1a04000 	mov	r4, r0
		RBEnqueue(&u0s,*msg++);
    22f0:	e59f0014 	ldr	r0, [pc, #20]	; 230c <sendText+0x30>
    22f4:	ebffffb3 	bl	21c8 <RBEnqueue>
		UART0WriteChar(bytes[c]);
}

void sendText(char *msg)
{
	while (*msg)
    22f8:	e5f41001 	ldrb	r1, [r4, #1]!
    22fc:	e3510000 	cmp	r1, #0
    2300:	1afffffa 	bne	22f0 <sendText+0x14>
		RBEnqueue(&u0s,*msg++);
//	uart0Prime();
}
    2304:	e8bd4010 	pop	{r4, lr}
    2308:	e12fff1e 	bx	lr
    230c:	40001acc 	.word	0x40001acc

00002310 <debugMsg>:
	return RBfindInBuffer(&u0r, startIndex, distance, aByte); 
}

void debugMsg(char *func, char *msg)
{
	if (!DEBUG_ENABLED)
    2310:	e59f3048 	ldr	r3, [pc, #72]	; 2360 <debugMsg+0x50>
    2314:	e5932000 	ldr	r2, [r3]
    2318:	e3520000 	cmp	r2, #0
{
	return RBfindInBuffer(&u0r, startIndex, distance, aByte); 
}

void debugMsg(char *func, char *msg)
{
    231c:	e92d4030 	push	{r4, r5, lr}
    2320:	e1a04000 	mov	r4, r0
    2324:	e1a05001 	mov	r5, r1
	if (!DEBUG_ENABLED)
		return;
	sendText("DEBUG:");
    2328:	e59f0034 	ldr	r0, [pc, #52]	; 2364 <debugMsg+0x54>
	return RBfindInBuffer(&u0r, startIndex, distance, aByte); 
}

void debugMsg(char *func, char *msg)
{
	if (!DEBUG_ENABLED)
    232c:	1a000001 	bne	2338 <debugMsg+0x28>
	sendText("DEBUG:");
	sendText(func);
	sendText(":");
	sendText(msg);
	sendText("\n");
}
    2330:	e8bd4030 	pop	{r4, r5, lr}
    2334:	e12fff1e 	bx	lr

void debugMsg(char *func, char *msg)
{
	if (!DEBUG_ENABLED)
		return;
	sendText("DEBUG:");
    2338:	ebffffe7 	bl	22dc <sendText>
	sendText(func);
    233c:	e1a00004 	mov	r0, r4
    2340:	ebffffe5 	bl	22dc <sendText>
	sendText(":");
    2344:	e59f001c 	ldr	r0, [pc, #28]	; 2368 <debugMsg+0x58>
    2348:	ebffffe3 	bl	22dc <sendText>
	sendText(msg);
    234c:	e1a00005 	mov	r0, r5
    2350:	ebffffe1 	bl	22dc <sendText>
	sendText("\n");
    2354:	e59f0010 	ldr	r0, [pc, #16]	; 236c <debugMsg+0x5c>
}
    2358:	e8bd4030 	pop	{r4, r5, lr}
		return;
	sendText("DEBUG:");
	sendText(func);
	sendText(":");
	sendText(msg);
	sendText("\n");
    235c:	eaffffde 	b	22dc <sendText>
    2360:	400009cc 	.word	0x400009cc
    2364:	0000dad8 	.word	0x0000dad8
    2368:	0000dae0 	.word	0x0000dae0
    236c:	0000dae4 	.word	0x0000dae4

00002370 <sendNBytes>:
	UART0WriteChar(aByte);
	RBEnqueue(&u0s, aByte);
}

void sendNBytes(char *bytes, int num)
{
    2370:	e92d4070 	push	{r4, r5, r6, lr}
	int c;

	for (c = 0; c < num; c++)
    2374:	e2516000 	subs	r6, r1, #0
	UART0WriteChar(aByte);
	RBEnqueue(&u0s, aByte);
}

void sendNBytes(char *bytes, int num)
{
    2378:	e1a05000 	mov	r5, r0
	int c;

	for (c = 0; c < num; c++)
    237c:	da000005 	ble	2398 <sendNBytes+0x28>
    2380:	e3a04000 	mov	r4, #0
		UART0WriteChar(bytes[c]);
    2384:	e7d40005 	ldrb	r0, [r4, r5]

void sendNBytes(char *bytes, int num)
{
	int c;

	for (c = 0; c < num; c++)
    2388:	e2844001 	add	r4, r4, #1
		UART0WriteChar(bytes[c]);
    238c:	eb0003f2 	bl	335c <UART0WriteChar>

void sendNBytes(char *bytes, int num)
{
	int c;

	for (c = 0; c < num; c++)
    2390:	e1560004 	cmp	r6, r4
    2394:	1afffffa 	bne	2384 <sendNBytes+0x14>
		UART0WriteChar(bytes[c]);
}
    2398:	e8bd4070 	pop	{r4, r5, r6, lr}
    239c:	e12fff1e 	bx	lr

000023a0 <sendByte>:
{
	showBuffer(&u0r);
}

void sendByte(char aByte)
{
    23a0:	e92d4010 	push	{r4, lr}
    23a4:	e20040ff 	and	r4, r0, #255	; 0xff
	UART0WriteChar(aByte);
    23a8:	e1a00004 	mov	r0, r4
    23ac:	eb0003ea 	bl	335c <UART0WriteChar>
	RBEnqueue(&u0s, aByte);
    23b0:	e1a01004 	mov	r1, r4
    23b4:	e59f0008 	ldr	r0, [pc, #8]	; 23c4 <sendByte+0x24>
    23b8:	ebffff82 	bl	21c8 <RBEnqueue>
}
    23bc:	e8bd4010 	pop	{r4, lr}
    23c0:	e12fff1e 	bx	lr
    23c4:	40001acc 	.word	0x40001acc

000023c8 <getByte>:
{
	return RBCount(&u0r); //Groups of 4...
}

char getByte(void)
{
    23c8:	e92d4010 	push	{r4, lr}
	char aByte;

	if ( !RBCount(&u0r) )
    23cc:	e59f0040 	ldr	r0, [pc, #64]	; 2414 <getByte+0x4c>
    23d0:	ebffff46 	bl	20f0 <RBCount>
    23d4:	e2503000 	subs	r3, r0, #0
    23d8:	e1a04003 	mov	r4, r3
		return 0;

 	aByte = RBDequeue(&u0r);
    23dc:	e59f0030 	ldr	r0, [pc, #48]	; 2414 <getByte+0x4c>

char getByte(void)
{
	char aByte;

	if ( !RBCount(&u0r) )
    23e0:	1a000002 	bne	23f0 <getByte+0x28>

	if (ECHOMODE)
		sendByte(aByte);

	return aByte;
}
    23e4:	e1a00004 	mov	r0, r4
    23e8:	e8bd4010 	pop	{r4, lr}
    23ec:	e12fff1e 	bx	lr
	char aByte;

	if ( !RBCount(&u0r) )
		return 0;

 	aByte = RBDequeue(&u0r);
    23f0:	ebffff40 	bl	20f8 <RBDequeue>

	if (ECHOMODE)
    23f4:	e59f301c 	ldr	r3, [pc, #28]	; 2418 <getByte+0x50>
    23f8:	e5932000 	ldr	r2, [r3]
    23fc:	e3520000 	cmp	r2, #0
    2400:	e1a04000 	mov	r4, r0
    2404:	0afffff6 	beq	23e4 <getByte+0x1c>
		sendByte(aByte);
    2408:	e1a04000 	mov	r4, r0
    240c:	ebffffe3 	bl	23a0 <sendByte>
    2410:	eafffff3 	b	23e4 <getByte+0x1c>
    2414:	40001a2c 	.word	0x40001a2c
    2418:	400009d0 	.word	0x400009d0

0000241c <getBytes>:

	return aByte;
}

void getBytes(char *buffer, int num)
{
    241c:	e92d4030 	push	{r4, r5, lr}
	for (; num; num--, buffer++)
    2420:	e2514000 	subs	r4, r1, #0

	return aByte;
}

void getBytes(char *buffer, int num)
{
    2424:	e1a05000 	mov	r5, r0
	for (; num; num--, buffer++)
    2428:	0a000003 	beq	243c <getBytes+0x20>
		*buffer = getByte();
    242c:	ebffffe5 	bl	23c8 <getByte>
	return aByte;
}

void getBytes(char *buffer, int num)
{
	for (; num; num--, buffer++)
    2430:	e2544001 	subs	r4, r4, #1
		*buffer = getByte();
    2434:	e4c50001 	strb	r0, [r5], #1
	return aByte;
}

void getBytes(char *buffer, int num)
{
	for (; num; num--, buffer++)
    2438:	1afffffb 	bne	242c <getBytes+0x10>
		*buffer = getByte();
}
    243c:	e8bd4030 	pop	{r4, r5, lr}
    2440:	e12fff1e 	bx	lr

00002444 <showRBuffer>:

int DEBUG_ENABLED = FALSE; //Debug mode off.
int ECHOMODE = FALSE; // Don't echo.

void showRBuffer(void)
{
    2444:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	showBuffer(&u0r);
    2448:	e59f0008 	ldr	r0, [pc, #8]	; 2458 <showRBuffer+0x14>
    244c:	ebfffee7 	bl	1ff0 <showBuffer>
}
    2450:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    2454:	e12fff1e 	bx	lr
    2458:	40001a2c 	.word	0x40001a2c

0000245c <setFrame>:
{
	int temp = nextFrame;

	nextFrame = 2; // Make sure we don't try to send out this frame while we're working on it.

	temp = abs(1 - currentFrame); //1 - 0 = 1, 1 - 1 = 0, 1 - 2 = 1, valid for all states.
    245c:	e59f3034 	ldr	r3, [pc, #52]	; 2498 <setFrame+0x3c>
	LED(0, 0); //led 0 off.
	currentFrame = 2; //We don't have a ready frame.
}
				
void setFrame(QUADFRAME *data)  //Swaps the current frame and the next frame
{
    2460:	e92d4010 	push	{r4, lr}
	int temp = nextFrame;

	nextFrame = 2; // Make sure we don't try to send out this frame while we're working on it.

	temp = abs(1 - currentFrame); //1 - 0 = 1, 1 - 1 = 0, 1 - 2 = 1, valid for all states.
    2464:	e593e000 	ldr	lr, [r3]
    2468:	e26ee001 	rsb	lr, lr, #1
    246c:	e35e0000 	cmp	lr, #0
    2470:	b26ee000 	rsblt	lr, lr, #0

	memcpy( frames + temp, data, 16);
    2474:	e59fc020 	ldr	ip, [pc, #32]	; 249c <setFrame+0x40>
    2478:	e890000f 	ldm	r0, {r0, r1, r2, r3}
    247c:	e08e410e 	add	r4, lr, lr, lsl #2
    2480:	e08cc104 	add	ip, ip, r4, lsl #2
    2484:	e88c000f 	stm	ip, {r0, r1, r2, r3}
				
void setFrame(QUADFRAME *data)  //Swaps the current frame and the next frame
{
	int temp = nextFrame;

	nextFrame = 2; // Make sure we don't try to send out this frame while we're working on it.
    2488:	e59f2010 	ldr	r2, [pc, #16]	; 24a0 <setFrame+0x44>

	temp = abs(1 - currentFrame); //1 - 0 = 1, 1 - 1 = 0, 1 - 2 = 1, valid for all states.

	memcpy( frames + temp, data, 16);
	
	nextFrame = temp;
    248c:	e582e000 	str	lr, [r2]
}	
    2490:	e8bd4010 	pop	{r4, lr}
    2494:	e12fff1e 	bx	lr
    2498:	4000000c 	.word	0x4000000c
    249c:	40001934 	.word	0x40001934
    24a0:	40000010 	.word	0x40000010

000024a4 <initFrame>:
int currentFrame = 2;
int nextFrame = 2;
int nextByte = 0;

void initFrame(QUADFRAME *frame, unsigned char command, unsigned char count, uint32_t *data)
{
    24a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    24a8:	e1a0c000 	mov	ip, r0
	frame->StartOfFrame = SOF;
	frame->EndOfFrame = EOFm;
    24ac:	e3e0e02a 	mvn	lr, #42	; 0x2a
int nextFrame = 2;
int nextByte = 0;

void initFrame(QUADFRAME *frame, unsigned char command, unsigned char count, uint32_t *data)
{
	frame->StartOfFrame = SOF;
    24b0:	e3e00015 	mvn	r0, #21
    24b4:	e5cc0000 	strb	r0, [ip]
	frame->EndOfFrame = EOFm;
    24b8:	e5cce011 	strb	lr, [ip, #17]
	frame->cmd = command;
    24bc:	e5cc1001 	strb	r1, [ip, #1]
	frame->count = count;
    24c0:	e5cc2010 	strb	r2, [ip, #16]
	memcpy( frame->data, data, 12);
    24c4:	e8930007 	ldm	r3, {r0, r1, r2}
    24c8:	e28cc004 	add	ip, ip, #4
    24cc:	e88c0007 	stm	ip, {r0, r1, r2}
}
    24d0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    24d4:	e12fff1e 	bx	lr

000024d8 <transmitterInit>:

void transmitterInit(void)
{
    24d8:	e92d4010 	push	{r4, lr}
    24dc:	e24dd00c 	sub	sp, sp, #12
	unsigned char data[12] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
    24e0:	e59f104c 	ldr	r1, [pc, #76]	; 2534 <transmitterInit+0x5c>
    24e4:	e3a0200c 	mov	r2, #12
    24e8:	e1a0000d 	mov	r0, sp
    24ec:	eb002d35 	bl	d9c8 <__memcpy_from_arm>

	initFrame(frames, 1, 13, data); 
    24f0:	e1a0300d 	mov	r3, sp
    24f4:	e59f003c 	ldr	r0, [pc, #60]	; 2538 <transmitterInit+0x60>
    24f8:	e3a01001 	mov	r1, #1
    24fc:	e3a0200d 	mov	r2, #13
    2500:	ebffffe7 	bl	24a4 <initFrame>
	currentFrame = 0;
	nextFrame = 1;
    2504:	e59f3030 	ldr	r3, [pc, #48]	; 253c <transmitterInit+0x64>
    2508:	e3a01001 	mov	r1, #1
    250c:	e5831000 	str	r1, [r3]
	nextByte = 0;
    2510:	e59f2028 	ldr	r2, [pc, #40]	; 2540 <transmitterInit+0x68>
void transmitterInit(void)
{
	unsigned char data[12] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};

	initFrame(frames, 1, 13, data); 
	currentFrame = 0;
    2514:	e59f3028 	ldr	r3, [pc, #40]	; 2544 <transmitterInit+0x6c>
    2518:	e3a00000 	mov	r0, #0
	memcpy( frame->data, data, 12);
}

void transmitterInit(void)
{
	unsigned char data[12] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
    251c:	e1a0400d 	mov	r4, sp

	initFrame(frames, 1, 13, data); 
	currentFrame = 0;
	nextFrame = 1;
	nextByte = 0;
    2520:	e5820000 	str	r0, [r2]
void transmitterInit(void)
{
	unsigned char data[12] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};

	initFrame(frames, 1, 13, data); 
	currentFrame = 0;
    2524:	e5830000 	str	r0, [r3]
	nextFrame = 1;
	nextByte = 0;
}
    2528:	e28dd00c 	add	sp, sp, #12
    252c:	e8bd4010 	pop	{r4, lr}
    2530:	e12fff1e 	bx	lr
    2534:	0000dae8 	.word	0x0000dae8
    2538:	40001934 	.word	0x40001934
    253c:	40000010 	.word	0x40000010
    2540:	400009d4 	.word	0x400009d4
    2544:	4000000c 	.word	0x4000000c

00002548 <transmitter>:

// This should only be called from the timer interrupt
void transmitter(void) // Sends the current frame.
{
    2548:	e92d4030 	push	{r4, r5, lr}
	unsigned char *nb;
	int i;

	if ( ( U0LSR & 0x20 ) == 0 ) // Return if transmitter is not empty.
    254c:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    2550:	e2844903 	add	r4, r4, #49152	; 0xc000
    2554:	e5943014 	ldr	r3, [r4, #20]
    2558:	e3130020 	tst	r3, #32
    255c:	0a000016 	beq	25bc <transmitter+0x74>
		return;

	if ( currentFrame == 2 ) // We don't have a current frame. 
    2560:	e59f5078 	ldr	r5, [pc, #120]	; 25e0 <transmitter+0x98>
    2564:	e5953000 	ldr	r3, [r5]
    2568:	e3530002 	cmp	r3, #2
    256c:	0a000014 	beq	25c4 <transmitter+0x7c>
			return; //No frame ready
		currentFrame = nextFrame;
		nextFrame = 2; // Next frame empty
	}

	LED(0,1); //led 0 on.
    2570:	e3a00000 	mov	r0, #0
    2574:	e3a01001 	mov	r1, #1
    2578:	eb000117 	bl	29dc <LED>

	// Dump 16 characters into our buffer.
	nb = (unsigned char *)&frames[currentFrame];
    257c:	e5953000 	ldr	r3, [r5]
    2580:	e59f205c 	ldr	r2, [pc, #92]	; 25e4 <transmitter+0x9c>
    2584:	e0833103 	add	r3, r3, r3, lsl #2
    2588:	e0821103 	add	r1, r2, r3, lsl #2
    258c:	e1a00004 	mov	r0, r4
    2590:	e3a02000 	mov	r2, #0
	for (i = 0; i < 16; i++)
		U0THR = *nb++;
    2594:	e7d23001 	ldrb	r3, [r2, r1]

	LED(0,1); //led 0 on.

	// Dump 16 characters into our buffer.
	nb = (unsigned char *)&frames[currentFrame];
	for (i = 0; i < 16; i++)
    2598:	e2822001 	add	r2, r2, #1
    259c:	e3520010 	cmp	r2, #16
		U0THR = *nb++;
    25a0:	e5803000 	str	r3, [r0]

	LED(0,1); //led 0 on.

	// Dump 16 characters into our buffer.
	nb = (unsigned char *)&frames[currentFrame];
	for (i = 0; i < 16; i++)
    25a4:	1afffffa 	bne	2594 <transmitter+0x4c>
		U0THR = *nb++;
	
	LED(0, 0); //led 0 off.
    25a8:	e3a00000 	mov	r0, #0
    25ac:	e1a01000 	mov	r1, r0
    25b0:	eb000109 	bl	29dc <LED>
	currentFrame = 2; //We don't have a ready frame.
    25b4:	e3a03002 	mov	r3, #2
    25b8:	e5853000 	str	r3, [r5]
}
    25bc:	e8bd4030 	pop	{r4, r5, lr}
    25c0:	e12fff1e 	bx	lr
	if ( ( U0LSR & 0x20 ) == 0 ) // Return if transmitter is not empty.
		return;

	if ( currentFrame == 2 ) // We don't have a current frame. 
	{
		if ( nextFrame == 2 ) //Do we have a next frame?
    25c4:	e59f101c 	ldr	r1, [pc, #28]	; 25e8 <transmitter+0xa0>
    25c8:	e5912000 	ldr	r2, [r1]
    25cc:	e3520002 	cmp	r2, #2
    25d0:	0afffff9 	beq	25bc <transmitter+0x74>
			return; //No frame ready
		currentFrame = nextFrame;
		nextFrame = 2; // Next frame empty
    25d4:	e5813000 	str	r3, [r1]

	if ( currentFrame == 2 ) // We don't have a current frame. 
	{
		if ( nextFrame == 2 ) //Do we have a next frame?
			return; //No frame ready
		currentFrame = nextFrame;
    25d8:	e5852000 	str	r2, [r5]
    25dc:	eaffffe3 	b	2570 <transmitter+0x28>
    25e0:	4000000c 	.word	0x4000000c
    25e4:	40001934 	.word	0x40001934
    25e8:	40000010 	.word	0x40000010

000025ec <timer0ISR>:

extern char updated;
char newvals = 0;

void timer0ISR(void) __irq
{
    25ec:	e1a0c00d 	mov	ip, sp
    25f0:	e92dd800 	push	{fp, ip, lr, pc}
    25f4:	e24cb004 	sub	fp, ip, #4
  T0IR = 0x01;      //Clear the timer 0 interrupt
    25f8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    25fc:	e2833901 	add	r3, r3, #16384	; 0x4000
    2600:	e3a02001 	mov	r2, #1
    2604:	e5832000 	str	r2, [r3]
  IENABLE;

  // Performance Counter
  trigger_cnt++;
    2608:	e59f30b8 	ldr	r3, [pc, #184]	; 26c8 <timer0ISR+0xdc>
    260c:	e5933000 	ldr	r3, [r3]
    2610:	e2832001 	add	r2, r3, #1
    2614:	e59f30ac 	ldr	r3, [pc, #172]	; 26c8 <timer0ISR+0xdc>
    2618:	e5832000 	str	r2, [r3]
  if (trigger_cnt == ControllerCyclesPerSecond)
    261c:	e59f30a4 	ldr	r3, [pc, #164]	; 26c8 <timer0ISR+0xdc>
    2620:	e5933000 	ldr	r3, [r3]
    2624:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    2628:	1a000012 	bne	2678 <timer0ISR+0x8c>
  {
  	trigger_cnt = 0;
    262c:	e59f2094 	ldr	r2, [pc, #148]	; 26c8 <timer0ISR+0xdc>
    2630:	e3a03000 	mov	r3, #0
    2634:	e5823000 	str	r3, [r2]
  	HL_Status.up_time++;
    2638:	e59f308c 	ldr	r3, [pc, #140]	; 26cc <timer0ISR+0xe0>
    263c:	e1d330b4 	ldrh	r3, [r3, #4]
    2640:	e2833001 	add	r3, r3, #1
    2644:	e1a03803 	lsl	r3, r3, #16
    2648:	e1a02823 	lsr	r2, r3, #16
    264c:	e59f3078 	ldr	r3, [pc, #120]	; 26cc <timer0ISR+0xe0>
    2650:	e1c320b4 	strh	r2, [r3, #4]
  	HL_Status.cpu_load = mainloop_cnt;
    2654:	e59f3074 	ldr	r3, [pc, #116]	; 26d0 <timer0ISR+0xe4>
    2658:	e5933000 	ldr	r3, [r3]
    265c:	e1a03803 	lsl	r3, r3, #16
    2660:	e1a02823 	lsr	r2, r3, #16
    2664:	e59f3060 	ldr	r3, [pc, #96]	; 26cc <timer0ISR+0xe0>
    2668:	e1c321b2 	strh	r2, [r3, #18]

  	mainloop_cnt = 0;
    266c:	e59f205c 	ldr	r2, [pc, #92]	; 26d0 <timer0ISR+0xe4>
    2670:	e3a03000 	mov	r3, #0
    2674:	e5823000 	str	r3, [r2]
  }

  if ( mainloop_trigger < 10 ) 
    2678:	e59f3054 	ldr	r3, [pc, #84]	; 26d4 <timer0ISR+0xe8>
    267c:	e5d33000 	ldrb	r3, [r3]
    2680:	e20330ff 	and	r3, r3, #255	; 0xff
    2684:	e3530009 	cmp	r3, #9
    2688:	8a000006 	bhi	26a8 <timer0ISR+0xbc>
    mainloop_trigger++;
    268c:	e59f3040 	ldr	r3, [pc, #64]	; 26d4 <timer0ISR+0xe8>
    2690:	e5d33000 	ldrb	r3, [r3]
    2694:	e20330ff 	and	r3, r3, #255	; 0xff
    2698:	e2833001 	add	r3, r3, #1
    269c:	e20330ff 	and	r3, r3, #255	; 0xff
    26a0:	e59f202c 	ldr	r2, [pc, #44]	; 26d4 <timer0ISR+0xe8>
    26a4:	e5c23000 	strb	r3, [r2]

  transmitter();
    26a8:	ebffffa6 	bl	2548 <transmitter>

  IDISABLE;
  VICVectAddr = 0;		// Acknowledge Interrupt
    26ac:	e3a03000 	mov	r3, #0
    26b0:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    26b4:	e3a02000 	mov	r2, #0
    26b8:	e5832000 	str	r2, [r3]
}
    26bc:	e24bd00c 	sub	sp, fp, #12
    26c0:	e89d6800 	ldm	sp, {fp, sp, lr}
    26c4:	e12fff1e 	bx	lr
    26c8:	400009e8 	.word	0x400009e8
    26cc:	400019b8 	.word	0x400019b8
    26d0:	400009e0 	.word	0x400009e0
    26d4:	400009e4 	.word	0x400009e4

000026d8 <main>:

/**********************************************************
                       MAIN
**********************************************************/
int	main (void) {
    26d8:	e1a0c00d 	mov	ip, sp
    26dc:	e92dd800 	push	{fp, ip, lr, pc}
    26e0:	e24cb004 	sub	fp, ip, #4
    26e4:	e24dd00c 	sub	sp, sp, #12

  static int vbat1; //battery_voltage (lowpass-filtered)
  unsigned int TimerT1, TimerT2;

  init(); //system.c
    26e8:	eb000111 	bl	2b34 <init>
  buzzer(OFF);
    26ec:	e3a00000 	mov	r0, #0
    26f0:	ebfffc50 	bl	1838 <buzzer>
  LL_write_init();
    26f4:	eb000cdb 	bl	5a68 <LL_write_init>

  //initialize AscTec Firefly LED fin on I2C1 (not necessary on AscTec Hummingbird or Pelican)
  I2C1Init();
    26f8:	eb000a6e 	bl	50b8 <I2C1Init>
  I2C1_setRGBLed(255,0,0);
    26fc:	e3a000ff 	mov	r0, #255	; 0xff
    2700:	e3a01000 	mov	r1, #0
    2704:	e3a02000 	mov	r2, #0
    2708:	eb000a29 	bl	4fb4 <I2C1_setRGBLed>

  ADC0triggerSampling( 1<<VOLTAGE_1); //activate ADC sampling
    270c:	e3a00004 	mov	r0, #4
    2710:	eb000c16 	bl	5770 <ADC0triggerSampling>

  generateBuildInfo();
    2714:	ebfffdc0 	bl	1e1c <generateBuildInfo>

  HL_Status.up_time = 0;
    2718:	e59f329c 	ldr	r3, [pc, #668]	; 29bc <main+0x2e4>
    271c:	e3a02000 	mov	r2, #0
    2720:	e1c320b4 	strh	r2, [r3, #4]
    2724:	eaffffff 	b	2728 <main+0x50>
  //update parameters stored by ACI:
  //...

  while(1)
  {
	if (mainloop_trigger)
    2728:	e59f3290 	ldr	r3, [pc, #656]	; 29c0 <main+0x2e8>
    272c:	e5d33000 	ldrb	r3, [r3]
    2730:	e20330ff 	and	r3, r3, #255	; 0xff
    2734:	e3530000 	cmp	r3, #0
    2738:	0afffffa 	beq	2728 <main+0x50>
	{
		TimerT1 =  T0TC;
    273c:	e3a03901 	mov	r3, #16384	; 0x4000
    2740:	e283328e 	add	r3, r3, #-536870904	; 0xe0000008
    2744:	e5933000 	ldr	r3, [r3]
    2748:	e50b3014 	str	r3, [fp, #-20]

		//battery monitoring
		ADC0getSamplingResults(0xFF,adcChannelValues);
    274c:	e3a000ff 	mov	r0, #255	; 0xff
    2750:	e59f126c 	ldr	r1, [pc, #620]	; 29c4 <main+0x2ec>
    2754:	eb000c16 	bl	57b4 <ADC0getSamplingResults>
        vbat1=(vbat1*14+(adcChannelValues[VOLTAGE_1]*9872/579))/15;	//voltage in mV
    2758:	e59f3268 	ldr	r3, [pc, #616]	; 29c8 <main+0x2f0>
    275c:	e5932000 	ldr	r2, [r3]
    2760:	e1a03002 	mov	r3, r2
    2764:	e1a03183 	lsl	r3, r3, #3
    2768:	e0623003 	rsb	r3, r2, r3
    276c:	e1a03083 	lsl	r3, r3, #1
    2770:	e1a00003 	mov	r0, r3
    2774:	e59f3248 	ldr	r3, [pc, #584]	; 29c4 <main+0x2ec>
    2778:	e5931008 	ldr	r1, [r3, #8]
    277c:	e1a02001 	mov	r2, r1
    2780:	e1a02102 	lsl	r2, r2, #2
    2784:	e0822001 	add	r2, r2, r1
    2788:	e1a02082 	lsl	r2, r2, #1
    278c:	e0822001 	add	r2, r2, r1
    2790:	e1a03182 	lsl	r3, r2, #3
    2794:	e0623003 	rsb	r3, r2, r3
    2798:	e1a03183 	lsl	r3, r3, #3
    279c:	e0833001 	add	r3, r3, r1
    27a0:	e1a03203 	lsl	r3, r3, #4
    27a4:	e1a02003 	mov	r2, r3
    27a8:	e3a032be 	mov	r3, #-536870901	; 0xe000000b
    27ac:	e2833626 	add	r3, r3, #39845888	; 0x2600000
    27b0:	e2833c63 	add	r3, r3, #25344	; 0x6300
    27b4:	e0831392 	umull	r1, r3, r2, r3
    27b8:	e1a034a3 	lsr	r3, r3, #9
    27bc:	e0802003 	add	r2, r0, r3
    27c0:	e59f3204 	ldr	r3, [pc, #516]	; 29cc <main+0x2f4>
    27c4:	e0831392 	umull	r1, r3, r2, r3
    27c8:	e1a031a3 	lsr	r3, r3, #3
    27cc:	e1a02003 	mov	r2, r3
    27d0:	e59f31f0 	ldr	r3, [pc, #496]	; 29c8 <main+0x2f0>
    27d4:	e5832000 	str	r2, [r3]
	HL_Status.battery_voltage_1 = vbat1;
    27d8:	e59f31e8 	ldr	r3, [pc, #488]	; 29c8 <main+0x2f0>
    27dc:	e5933000 	ldr	r3, [r3]
    27e0:	e1a03803 	lsl	r3, r3, #16
    27e4:	e1a02823 	lsr	r2, r3, #16
    27e8:	e59f31cc 	ldr	r3, [pc, #460]	; 29bc <main+0x2e4>
    27ec:	e1c320b0 	strh	r2, [r3]
		
        mainloop_cnt++;
    27f0:	e59f31d8 	ldr	r3, [pc, #472]	; 29d0 <main+0x2f8>
    27f4:	e5933000 	ldr	r3, [r3]
    27f8:	e2832001 	add	r2, r3, #1
    27fc:	e59f31cc 	ldr	r3, [pc, #460]	; 29d0 <main+0x2f8>
    2800:	e5832000 	str	r2, [r3]
	if (!(mainloop_cnt % 10)) 
    2804:	e59f31c4 	ldr	r3, [pc, #452]	; 29d0 <main+0x2f8>
    2808:	e5932000 	ldr	r2, [r3]
    280c:	e59f31c0 	ldr	r3, [pc, #448]	; 29d4 <main+0x2fc>
    2810:	e0831392 	umull	r1, r3, r2, r3
    2814:	e1a031a3 	lsr	r3, r3, #3
    2818:	e50b3018 	str	r3, [fp, #-24]
    281c:	e51b3018 	ldr	r3, [fp, #-24]
    2820:	e1a03103 	lsl	r3, r3, #2
    2824:	e51b1018 	ldr	r1, [fp, #-24]
    2828:	e0833001 	add	r3, r3, r1
    282c:	e1a03083 	lsl	r3, r3, #1
    2830:	e0632002 	rsb	r2, r3, r2
    2834:	e50b2018 	str	r2, [fp, #-24]
    2838:	e51b3018 	ldr	r3, [fp, #-24]
    283c:	e3530000 	cmp	r3, #0
    2840:	1a000005 	bne	285c <main+0x184>
        	buzzer_handler(HL_Status.battery_voltage_1);
    2844:	e59f3170 	ldr	r3, [pc, #368]	; 29bc <main+0x2e4>
    2848:	e1d330b0 	ldrh	r3, [r3]
    284c:	e1a03803 	lsl	r3, r3, #16
    2850:	e1a03843 	asr	r3, r3, #16
    2854:	e1a00003 	mov	r0, r3
    2858:	ebfffc00 	bl	1860 <buzzer_handler>

        if (mainloop_trigger) 
    285c:	e59f315c 	ldr	r3, [pc, #348]	; 29c0 <main+0x2e8>
    2860:	e5d33000 	ldrb	r3, [r3]
    2864:	e20330ff 	and	r3, r3, #255	; 0xff
    2868:	e3530000 	cmp	r3, #0
    286c:	0a000006 	beq	288c <main+0x1b4>
		mainloop_trigger--;
    2870:	e59f3148 	ldr	r3, [pc, #328]	; 29c0 <main+0x2e8>
    2874:	e5d33000 	ldrb	r3, [r3]
    2878:	e20330ff 	and	r3, r3, #255	; 0xff
    287c:	e2433001 	sub	r3, r3, #1
    2880:	e20330ff 	and	r3, r3, #255	; 0xff
    2884:	e59f2134 	ldr	r2, [pc, #308]	; 29c0 <main+0x2e8>
    2888:	e5c23000 	strb	r3, [r2]
		  
        SDK_mainloop(); //1000 times per second.
    288c:	ebfffba5 	bl	1728 <SDK_mainloop>

        // CPU Usage calculation
        TimerT2 = T0TC;
    2890:	e3a03901 	mov	r3, #16384	; 0x4000
    2894:	e283328e 	add	r3, r3, #-536870904	; 0xe0000008
    2898:	e5933000 	ldr	r3, [r3]
    289c:	e50b3010 	str	r3, [fp, #-16]
        if ( mainloop_trigger)
    28a0:	e59f3118 	ldr	r3, [pc, #280]	; 29c0 <main+0x2e8>
    28a4:	e5d33000 	ldrb	r3, [r3]
    28a8:	e20330ff 	and	r3, r3, #255	; 0xff
    28ac:	e3530000 	cmp	r3, #0
    28b0:	0a00000a 	beq	28e0 <main+0x208>
        {
        	HL_Status.cpu_load = 1000;
    28b4:	e59f2100 	ldr	r2, [pc, #256]	; 29bc <main+0x2e4>
    28b8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    28bc:	e1c231b2 	strh	r3, [r2, #18]
        	mainloop_overflows++;
    28c0:	e59f3110 	ldr	r3, [pc, #272]	; 29d8 <main+0x300>
    28c4:	e1d330b0 	ldrh	r3, [r3]
    28c8:	e2833001 	add	r3, r3, #1
    28cc:	e1a03803 	lsl	r3, r3, #16
    28d0:	e1a02823 	lsr	r2, r3, #16
    28d4:	e59f30fc 	ldr	r3, [pc, #252]	; 29d8 <main+0x300>
    28d8:	e1c320b0 	strh	r2, [r3]
    28dc:	eaffff91 	b	2728 <main+0x50>
        }
        else
		if (TimerT2 < TimerT1)
    28e0:	e51b2010 	ldr	r2, [fp, #-16]
    28e4:	e51b3014 	ldr	r3, [fp, #-20]
    28e8:	e1520003 	cmp	r2, r3
    28ec:	2a00001b 	bcs	2960 <main+0x288>
        		HL_Status.cpu_load = (T0MR0 - TimerT1 + TimerT2)*1000/T0MR0; // load = "timer cycles" / "timer cycles per controller cycle" * 1000
    28f0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    28f4:	e2833901 	add	r3, r3, #16384	; 0x4000
    28f8:	e2833018 	add	r3, r3, #24
    28fc:	e5932000 	ldr	r2, [r3]
    2900:	e51b3014 	ldr	r3, [fp, #-20]
    2904:	e0632002 	rsb	r2, r3, r2
    2908:	e51b3010 	ldr	r3, [fp, #-16]
    290c:	e0822003 	add	r2, r2, r3
    2910:	e1a03002 	mov	r3, r2
    2914:	e1a03283 	lsl	r3, r3, #5
    2918:	e0623003 	rsb	r3, r2, r3
    291c:	e1a03103 	lsl	r3, r3, #2
    2920:	e0833002 	add	r3, r3, r2
    2924:	e1a03183 	lsl	r3, r3, #3
    2928:	e1a02003 	mov	r2, r3
    292c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2930:	e2833901 	add	r3, r3, #16384	; 0x4000
    2934:	e2833018 	add	r3, r3, #24
    2938:	e5933000 	ldr	r3, [r3]
    293c:	e1a00002 	mov	r0, r2
    2940:	e1a01003 	mov	r1, r3
    2944:	eb002c28 	bl	d9ec <____udivsi3_from_arm>
    2948:	e1a03000 	mov	r3, r0
    294c:	e1a03803 	lsl	r3, r3, #16
    2950:	e1a02823 	lsr	r2, r3, #16
    2954:	e59f3060 	ldr	r3, [pc, #96]	; 29bc <main+0x2e4>
    2958:	e1c321b2 	strh	r2, [r3, #18]
    295c:	eaffff71 	b	2728 <main+0x50>
        	else
        		HL_Status.cpu_load = (TimerT2 - TimerT1)*1000/T0MR0; // load = "timer cycles" / "timer cycles per controller cycle" * 1000
    2960:	e51b2010 	ldr	r2, [fp, #-16]
    2964:	e51b3014 	ldr	r3, [fp, #-20]
    2968:	e0632002 	rsb	r2, r3, r2
    296c:	e1a03002 	mov	r3, r2
    2970:	e1a03283 	lsl	r3, r3, #5
    2974:	e0623003 	rsb	r3, r2, r3
    2978:	e1a03103 	lsl	r3, r3, #2
    297c:	e0833002 	add	r3, r3, r2
    2980:	e1a03183 	lsl	r3, r3, #3
    2984:	e1a02003 	mov	r2, r3
    2988:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    298c:	e2833901 	add	r3, r3, #16384	; 0x4000
    2990:	e2833018 	add	r3, r3, #24
    2994:	e5933000 	ldr	r3, [r3]
    2998:	e1a00002 	mov	r0, r2
    299c:	e1a01003 	mov	r1, r3
    29a0:	eb002c11 	bl	d9ec <____udivsi3_from_arm>
    29a4:	e1a03000 	mov	r3, r0
    29a8:	e1a03803 	lsl	r3, r3, #16
    29ac:	e1a02823 	lsr	r2, r3, #16
    29b0:	e59f3004 	ldr	r3, [pc, #4]	; 29bc <main+0x2e4>
    29b4:	e1c321b2 	strh	r2, [r3, #18]
      }
  }
    29b8:	eaffff5a 	b	2728 <main+0x50>
    29bc:	400019b8 	.word	0x400019b8
    29c0:	400009e4 	.word	0x400009e4
    29c4:	40001c70 	.word	0x40001c70
    29c8:	400009f4 	.word	0x400009f4
    29cc:	88888889 	.word	0x88888889
    29d0:	400009e0 	.word	0x400009e0
    29d4:	cccccccd 	.word	0xcccccccd
    29d8:	400009ee 	.word	0x400009ee

000029dc <LED>:
#include "hardware.h"
#include "irq.h"


void LED(unsigned char nr, unsigned char onoff) //set or reset LED 0..3
{
    29dc:	e1a0c00d 	mov	ip, sp
    29e0:	e92dd800 	push	{fp, ip, lr, pc}
    29e4:	e24cb004 	sub	fp, ip, #4
    29e8:	e24dd008 	sub	sp, sp, #8
    29ec:	e1a03000 	mov	r3, r0
    29f0:	e1a02001 	mov	r2, r1
    29f4:	e54b3010 	strb	r3, [fp, #-16]
    29f8:	e1a03002 	mov	r3, r2
    29fc:	e54b3014 	strb	r3, [fp, #-20]
  if (nr>=2)
    2a00:	e55b3010 	ldrb	r3, [fp, #-16]
    2a04:	e3530001 	cmp	r3, #1
    2a08:	8a000013 	bhi	2a5c <LED+0x80>
  	return;
  if(onoff == OFF)
    2a0c:	e55b3014 	ldrb	r3, [fp, #-20]
    2a10:	e3530000 	cmp	r3, #0
    2a14:	1a000008 	bne	2a3c <LED+0x60>
  {
    IOSET1 = (1<<(24+nr));
    2a18:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2a1c:	e282290a 	add	r2, r2, #163840	; 0x28000
    2a20:	e2822014 	add	r2, r2, #20
    2a24:	e55b3010 	ldrb	r3, [fp, #-16]
    2a28:	e2831018 	add	r1, r3, #24
    2a2c:	e3a03001 	mov	r3, #1
    2a30:	e1a03113 	lsl	r3, r3, r1
    2a34:	e5823000 	str	r3, [r2]
    2a38:	ea000007 	b	2a5c <LED+0x80>
  }
  else
  {
    IOCLR1 = (1<<(24+nr));
    2a3c:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2a40:	e282290a 	add	r2, r2, #163840	; 0x28000
    2a44:	e282201c 	add	r2, r2, #28
    2a48:	e55b3010 	ldrb	r3, [fp, #-16]
    2a4c:	e2831018 	add	r1, r3, #24
    2a50:	e3a03001 	mov	r3, #1
    2a54:	e1a03113 	lsl	r3, r3, r1
    2a58:	e5823000 	str	r3, [r2]
  }
}
    2a5c:	e24bd00c 	sub	sp, fp, #12
    2a60:	e89d6800 	ldm	sp, {fp, sp, lr}
    2a64:	e12fff1e 	bx	lr

00002a68 <GPIO_P1_B16>:

void GPIO_P1_B16(unsigned char onoff)
{
    2a68:	e1a0c00d 	mov	ip, sp
    2a6c:	e92dd800 	push	{fp, ip, lr, pc}
    2a70:	e24cb004 	sub	fp, ip, #4
    2a74:	e24dd004 	sub	sp, sp, #4
    2a78:	e1a03000 	mov	r3, r0
    2a7c:	e54b3010 	strb	r3, [fp, #-16]
	if (onoff == OFF)	
    2a80:	e55b3010 	ldrb	r3, [fp, #-16]
    2a84:	e3530000 	cmp	r3, #0
    2a88:	1a000005 	bne	2aa4 <GPIO_P1_B16+0x3c>
		IOCLR1 = (1 << 16);
    2a8c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2a90:	e283390a 	add	r3, r3, #163840	; 0x28000
    2a94:	e283301c 	add	r3, r3, #28
    2a98:	e3a02801 	mov	r2, #65536	; 0x10000
    2a9c:	e5832000 	str	r2, [r3]
    2aa0:	ea000004 	b	2ab8 <GPIO_P1_B16+0x50>
	else
		IOSET1 = (1 << 16);
    2aa4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2aa8:	e283390a 	add	r3, r3, #163840	; 0x28000
    2aac:	e2833014 	add	r3, r3, #20
    2ab0:	e3a02801 	mov	r2, #65536	; 0x10000
    2ab4:	e5832000 	str	r2, [r3]
}
    2ab8:	e24bd00c 	sub	sp, fp, #12
    2abc:	e89d6800 	ldm	sp, {fp, sp, lr}
    2ac0:	e12fff1e 	bx	lr

00002ac4 <GPIO_P1_B16_TOGGLE>:

int GPIO_STATE = 0;

void GPIO_P1_B16_TOGGLE()
{
    2ac4:	e1a0c00d 	mov	ip, sp
    2ac8:	e92dd800 	push	{fp, ip, lr, pc}
    2acc:	e24cb004 	sub	fp, ip, #4
	if ( GPIO_STATE )
    2ad0:	e59f3058 	ldr	r3, [pc, #88]	; 2b30 <GPIO_P1_B16_TOGGLE+0x6c>
    2ad4:	e5933000 	ldr	r3, [r3]
    2ad8:	e3530000 	cmp	r3, #0
    2adc:	0a000008 	beq	2b04 <GPIO_P1_B16_TOGGLE+0x40>
	{
		GPIO_STATE = 0;
    2ae0:	e59f2048 	ldr	r2, [pc, #72]	; 2b30 <GPIO_P1_B16_TOGGLE+0x6c>
    2ae4:	e3a03000 	mov	r3, #0
    2ae8:	e5823000 	str	r3, [r2]
		IOCLR1 = (1 << 16);
    2aec:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2af0:	e283390a 	add	r3, r3, #163840	; 0x28000
    2af4:	e283301c 	add	r3, r3, #28
    2af8:	e3a02801 	mov	r2, #65536	; 0x10000
    2afc:	e5832000 	str	r2, [r3]
    2b00:	ea000007 	b	2b24 <GPIO_P1_B16_TOGGLE+0x60>
	}
	else
	{
		GPIO_STATE = 1;
    2b04:	e59f2024 	ldr	r2, [pc, #36]	; 2b30 <GPIO_P1_B16_TOGGLE+0x6c>
    2b08:	e3a03001 	mov	r3, #1
    2b0c:	e5823000 	str	r3, [r2]
		IOSET1 = (1 << 16);
    2b10:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2b14:	e283390a 	add	r3, r3, #163840	; 0x28000
    2b18:	e2833014 	add	r3, r3, #20
    2b1c:	e3a02801 	mov	r2, #65536	; 0x10000
    2b20:	e5832000 	str	r2, [r3]
	}
}
    2b24:	e24bd00c 	sub	sp, fp, #12
    2b28:	e89d6800 	ldm	sp, {fp, sp, lr}
    2b2c:	e12fff1e 	bx	lr
    2b30:	400009f8 	.word	0x400009f8

00002b34 <init>:
#include "ssp.h"
#include "adc.h"
#include "options.h" //#defines for irq optoins

void init(void)
{
    2b34:	e1a0c00d 	mov	ip, sp
    2b38:	e92dd800 	push	{fp, ip, lr, pc}
    2b3c:	e24cb004 	sub	fp, ip, #4
  MAMCR = 0x02;  //Memory Acceleration enabled
    2b40:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2b44:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2b48:	e3a02002 	mov	r2, #2
    2b4c:	e5832000 	str	r2, [r3]
  MAMTIM = 0x04;
    2b50:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2b54:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2b58:	e3a02004 	mov	r2, #4
    2b5c:	e5832000 	str	r2, [r3]
  VPBDIV = 0x01;  //0x01: peripheral frequency == cpu frequency, 0x00: per. freq. = crystal freq.
    2b60:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2b64:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2b68:	e2833c01 	add	r3, r3, #256	; 0x100
    2b6c:	e3a02001 	mov	r2, #1
    2b70:	e5832000 	str	r2, [r3]
  pll_init();
    2b74:	eb0000f1 	bl	2f40 <pll_init>
  pll_feed();
    2b78:	eb000100 	bl	2f80 <pll_feed>
  init_ports();
    2b7c:	eb000039 	bl	2c68 <init_ports>
  UART0Initialize(57600);	//debug / command
    2b80:	e3a00ce1 	mov	r0, #57600	; 0xe100
    2b84:	eb000199 	bl	31f0 <UART0Initialize>
  UART1Initialize(57600);	//57600 Servo / GPS, 38400 "indoor GPS"
    2b88:	e3a00ce1 	mov	r0, #57600	; 0xe100
    2b8c:	eb00021b 	bl	3400 <UART1Initialize>
  init_spi();
    2b90:	eb0000b5 	bl	2e6c <init_spi>
  init_spi1();
    2b94:	eb0000c2 	bl	2ea4 <init_spi1>
  init_timer0();
    2b98:	eb00005c 	bl	2d10 <init_timer0>
//  I2CInit(I2CMASTER);
  PWM_Init();
    2b9c:	eb000085 	bl	2db8 <PWM_Init>
  ADCInit(ADC_CLK);
    2ba0:	e3a0093d 	mov	r0, #999424	; 0xf4000
    2ba4:	e2800d09 	add	r0, r0, #576	; 0x240
    2ba8:	eb000a3d 	bl	54a4 <ADCInit>
  init_interrupts();
    2bac:	eb000002 	bl	2bbc <init_interrupts>
 }
    2bb0:	e24bd00c 	sub	sp, fp, #12
    2bb4:	e89d6800 	ldm	sp, {fp, sp, lr}
    2bb8:	e12fff1e 	bx	lr

00002bbc <init_interrupts>:

void init_interrupts(void)
{
    2bbc:	e1a0c00d 	mov	ip, sp
    2bc0:	e92dd800 	push	{fp, ip, lr, pc}
    2bc4:	e24cb004 	sub	fp, ip, #4
  init_VIC();
    2bc8:	eb000989 	bl	51f4 <init_VIC>

  //Timer0 interrupt
  install_irq( TIMER0_INT, (void *) timer0ISR );
    2bcc:	e3a00004 	mov	r0, #4
    2bd0:	e59f1080 	ldr	r1, [pc, #128]	; 2c58 <init_interrupts+0x9c>
    2bd4:	eb0009b7 	bl	52b8 <install_irq>

  //UART1 interrupt
  #ifdef UART1_IRQ
  install_irq( UART1_INT, (void *) uart1ISR );
    2bd8:	e3a00007 	mov	r0, #7
    2bdc:	e59f1078 	ldr	r1, [pc, #120]	; 2c5c <init_interrupts+0xa0>
    2be0:	eb0009b4 	bl	52b8 <install_irq>
  U1IER = 3; //=3; enable THRE and RX interrupt
    2be4:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2be8:	e2833801 	add	r3, r3, #65536	; 0x10000
    2bec:	e3a02003 	mov	r2, #3
    2bf0:	e5832000 	str	r2, [r3]
  #endif

  //UART0 interrupt
  #ifdef UART0_IRQ
  install_irq( UART0_INT, (void *) uart0ISR );
    2bf4:	e3a00006 	mov	r0, #6
    2bf8:	e59f1060 	ldr	r1, [pc, #96]	; 2c60 <init_interrupts+0xa4>
    2bfc:	eb0009ad 	bl	52b8 <install_irq>
  U0IER = 3; //=3; enable THRE and RX interrupt
    2c00:	e3a03903 	mov	r3, #49152	; 0xc000
    2c04:	e283324e 	add	r3, r3, #-536870908	; 0xe0000004
    2c08:	e3a02003 	mov	r2, #3
    2c0c:	e5832000 	str	r2, [r3]
  //I2C0 interrupt
//  install_irq( I2C0_INT, (void *) I2C0MasterHandler );
//  I20CONSET = I2CONSET_I2EN;

  //SSP interrupt
  install_irq( SPI1_INT, (void *) SSPHandler );
    2c10:	e3a0000b 	mov	r0, #11
    2c14:	e59f1048 	ldr	r1, [pc, #72]	; 2c64 <init_interrupts+0xa8>
    2c18:	eb0009a6 	bl	52b8 <install_irq>
  /* Set SSPINMS registers to enable interrupts */
  /* enable all interrupts, Rx overrun, Rx timeout, RX FIFO half full int,
  TX FIFO half empty int */
  SSPIMSC = SSPIMSC_TXIM | SSPIMSC_RXIM | SSPIMSC_RORIM;// | SSPIMSC_RTIM;
    2c1c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2c20:	e283391a 	add	r3, r3, #425984	; 0x68000
    2c24:	e2833014 	add	r3, r3, #20
    2c28:	e3a0200d 	mov	r2, #13
    2c2c:	e5832000 	str	r2, [r3]
  /* SSP Enabled */
  SSPCR1 |= SSPCR1_SSE;
    2c30:	e3a0224e 	mov	r2, #-536870908	; 0xe0000004
    2c34:	e282291a 	add	r2, r2, #425984	; 0x68000
    2c38:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2c3c:	e283391a 	add	r3, r3, #425984	; 0x68000
    2c40:	e5933000 	ldr	r3, [r3]
    2c44:	e3833002 	orr	r3, r3, #2
    2c48:	e5823000 	str	r3, [r2]
}
    2c4c:	e24bd00c 	sub	sp, fp, #12
    2c50:	e89d6800 	ldm	sp, {fp, sp, lr}
    2c54:	e12fff1e 	bx	lr
    2c58:	000025ec 	.word	0x000025ec
    2c5c:	000033c4 	.word	0x000033c4
    2c60:	000030c0 	.word	0x000030c0
    2c64:	00005890 	.word	0x00005890

00002c68 <init_ports>:


void init_ports(void)
{
    2c68:	e1a0c00d 	mov	ip, sp
    2c6c:	e92dd800 	push	{fp, ip, lr, pc}
    2c70:	e24cb004 	sub	fp, ip, #4
 * Byte3_sel = 0b00110000 = 0x30
 * Byte1_io_dir = 0x00
 * or SD_Logging => Byte1_io_dir=0x40
 */

 	PINSEL0=0x30C51555;
    2c74:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2c78:	e283390b 	add	r3, r3, #180224	; 0x2c000
    2c7c:	e59f2084 	ldr	r2, [pc, #132]	; 2d08 <init_ports+0xa0>
    2c80:	e5832000 	str	r2, [r3]
  * P0.30: CURRENT_1: -> 01
  * P0.31: IO_in -> 00
  * Byte3: 0b00010101 = 0x15
  * Byte3_io_dir=0x00
  */
 PINSEL1 = 0x150406A8;
    2c84:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2c88:	e283390b 	add	r3, r3, #180224	; 0x2c000
    2c8c:	e59f2078 	ldr	r2, [pc, #120]	; 2d0c <init_ports+0xa4>
    2c90:	e5832000 	str	r2, [r3]

 PINSEL2 = 0x00000004;
    2c94:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2c98:	e283390b 	add	r3, r3, #180224	; 0x2c000
    2c9c:	e2833014 	add	r3, r3, #20
    2ca0:	e3a02004 	mov	r2, #4
    2ca4:	e5832000 	str	r2, [r3]

 IODIR0 = 0x0030B480;
    2ca8:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    2cac:	e282290a 	add	r2, r2, #163840	; 0x28000
    2cb0:	e3a039c2 	mov	r3, #3178496	; 0x308000
    2cb4:	e2833dd2 	add	r3, r3, #13440	; 0x3480
    2cb8:	e5823000 	str	r3, [r2]

 IOSET0 = (1<<EXT_NCS)|(1<<11); //all nCS high
    2cbc:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2cc0:	e283390a 	add	r3, r3, #163840	; 0x28000
    2cc4:	e3a02d22 	mov	r2, #2176	; 0x880
    2cc8:	e5832000 	str	r2, [r3]
 * P1.24: LED1/IO_out
 * P1.25: LED2/IO_out
 *
 */

 IODIR1 = 0x03030000;
    2ccc:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2cd0:	e282290a 	add	r2, r2, #163840	; 0x28000
    2cd4:	e2822018 	add	r2, r2, #24
    2cd8:	e3a03403 	mov	r3, #50331648	; 0x3000000
    2cdc:	e2833803 	add	r3, r3, #196608	; 0x30000
    2ce0:	e5823000 	str	r3, [r2]
 IOSET1 = ((1<<24)|(1<<16)); //turn off LED1, turn beeper off
    2ce4:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2ce8:	e282290a 	add	r2, r2, #163840	; 0x28000
    2cec:	e2822014 	add	r2, r2, #20
    2cf0:	e3a03401 	mov	r3, #16777216	; 0x1000000
    2cf4:	e2833801 	add	r3, r3, #65536	; 0x10000
    2cf8:	e5823000 	str	r3, [r2]

}
    2cfc:	e24bd00c 	sub	sp, fp, #12
    2d00:	e89d6800 	ldm	sp, {fp, sp, lr}
    2d04:	e12fff1e 	bx	lr
    2d08:	30c51555 	.word	0x30c51555
    2d0c:	150406a8 	.word	0x150406a8

00002d10 <init_timer0>:

void init_timer0(void)
{
    2d10:	e1a0c00d 	mov	ip, sp
    2d14:	e92dd810 	push	{r4, fp, ip, lr, pc}
    2d18:	e24cb004 	sub	fp, ip, #4
  T0TC=0;
    2d1c:	e3a03901 	mov	r3, #16384	; 0x4000
    2d20:	e283328e 	add	r3, r3, #-536870904	; 0xe0000008
    2d24:	e3a02000 	mov	r2, #0
    2d28:	e5832000 	str	r2, [r3]
  T0TCR=0x0;    //Reset timer0
    2d2c:	e3a03901 	mov	r3, #16384	; 0x4000
    2d30:	e283324e 	add	r3, r3, #-536870908	; 0xe0000004
    2d34:	e3a02000 	mov	r2, #0
    2d38:	e5832000 	str	r2, [r3]
  T0MCR=0x3;    //Interrupt on match MR0 and reset counter
    2d3c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2d40:	e2833901 	add	r3, r3, #16384	; 0x4000
    2d44:	e2833014 	add	r3, r3, #20
    2d48:	e3a02003 	mov	r2, #3
    2d4c:	e5832000 	str	r2, [r3]
  T0PR=0;
    2d50:	e3a03901 	mov	r3, #16384	; 0x4000
    2d54:	e28332ce 	add	r3, r3, #-536870900	; 0xe000000c
    2d58:	e3a02000 	mov	r2, #0
    2d5c:	e5832000 	str	r2, [r3]
  T0PC=0;     //Prescale Counter = 0
    2d60:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2d64:	e2833901 	add	r3, r3, #16384	; 0x4000
    2d68:	e2833010 	add	r3, r3, #16
    2d6c:	e3a02000 	mov	r2, #0
    2d70:	e5832000 	str	r2, [r3]
  T0MR0=peripheralClockFrequency()/ControllerCyclesPerSecond; // /200 => 200 Hz Period
    2d74:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    2d78:	e2844901 	add	r4, r4, #16384	; 0x4000
    2d7c:	e2844018 	add	r4, r4, #24
    2d80:	eb000096 	bl	2fe0 <peripheralClockFrequency>
    2d84:	e1a02000 	mov	r2, r0
    2d88:	e59f3024 	ldr	r3, [pc, #36]	; 2db4 <init_timer0+0xa4>
    2d8c:	e0831392 	umull	r1, r3, r2, r3
    2d90:	e1a03323 	lsr	r3, r3, #6
    2d94:	e5843000 	str	r3, [r4]
  T0TCR=0x1;   //Set timer0
    2d98:	e3a03901 	mov	r3, #16384	; 0x4000
    2d9c:	e283324e 	add	r3, r3, #-536870908	; 0xe0000004
    2da0:	e3a02001 	mov	r2, #1
    2da4:	e5832000 	str	r2, [r3]
}
    2da8:	e24bd010 	sub	sp, fp, #16
    2dac:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
    2db0:	e12fff1e 	bx	lr
    2db4:	10624dd3 	.word	0x10624dd3

00002db8 <PWM_Init>:

void PWM_Init( void )
{
    2db8:	e1a0c00d 	mov	ip, sp
    2dbc:	e92dd800 	push	{fp, ip, lr, pc}
    2dc0:	e24cb004 	sub	fp, ip, #4
  //  match_counter = 0;
  //  PINSEL0 = 0x000A800A;	/* set GPIOs for all PWMs */
  //  PINSEL1 = 0x00000400;
    PWMTCR = TCR_RESET;		/* Counter Reset */
    2dc4:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2dc8:	e2833905 	add	r3, r3, #81920	; 0x14000
    2dcc:	e3a02002 	mov	r2, #2
    2dd0:	e5832000 	str	r2, [r3]

    PWMPR = 0x00;		/* count frequency:Fpclk */
    2dd4:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    2dd8:	e2833905 	add	r3, r3, #81920	; 0x14000
    2ddc:	e3a02000 	mov	r2, #0
    2de0:	e5832000 	str	r2, [r3]
    PWMMCR = PWMMR0R;	/* interrupt on PWMMR0, reset on PWMMR0, reset
    2de4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2de8:	e2833905 	add	r3, r3, #81920	; 0x14000
    2dec:	e2833014 	add	r3, r3, #20
    2df0:	e3a02002 	mov	r2, #2
    2df4:	e5832000 	str	r2, [r3]
				TC if PWM0 matches */
    PWMMR0 = 1179648 ;
    2df8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2dfc:	e2833905 	add	r3, r3, #81920	; 0x14000
    2e00:	e2833018 	add	r3, r3, #24
    2e04:	e3a02812 	mov	r2, #1179648	; 0x120000
    2e08:	e5832000 	str	r2, [r3]
    PWMMR5 = 88470;
    2e0c:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2e10:	e2822905 	add	r2, r2, #81920	; 0x14000
    2e14:	e2822044 	add	r2, r2, #68	; 0x44
    2e18:	e3a03b56 	mov	r3, #88064	; 0x15800
    2e1c:	e2833f65 	add	r3, r3, #404	; 0x194
    2e20:	e2833002 	add	r3, r3, #2
    2e24:	e5823000 	str	r3, [r2]

    /* all PWM latch enabled */
    PWMLER = LER5_EN;
    2e28:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2e2c:	e2833905 	add	r3, r3, #81920	; 0x14000
    2e30:	e2833050 	add	r3, r3, #80	; 0x50
    2e34:	e3a02020 	mov	r2, #32
    2e38:	e5832000 	str	r2, [r3]

        /* All single edge, all enable */
    PWMPCR = PWMENA1 | PWMENA2 | PWMENA3 | PWMENA4 | PWMENA5 | PWMENA6;
    2e3c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2e40:	e2833905 	add	r3, r3, #81920	; 0x14000
    2e44:	e283304c 	add	r3, r3, #76	; 0x4c
    2e48:	e3a02c7e 	mov	r2, #32256	; 0x7e00
    2e4c:	e5832000 	str	r2, [r3]
    PWMTCR = TCR_CNT_EN | TCR_PWM_EN;	/* counter enable, PWM enable */
    2e50:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2e54:	e2833905 	add	r3, r3, #81920	; 0x14000
    2e58:	e3a02009 	mov	r2, #9
    2e5c:	e5832000 	str	r2, [r3]
}
    2e60:	e24bd00c 	sub	sp, fp, #12
    2e64:	e89d6800 	ldm	sp, {fp, sp, lr}
    2e68:	e12fff1e 	bx	lr

00002e6c <init_spi>:


void init_spi(void)
{
    2e6c:	e1a0c00d 	mov	ip, sp
    2e70:	e92dd800 	push	{fp, ip, lr, pc}
    2e74:	e24cb004 	sub	fp, ip, #4
  S0SPCCR=0x04; //30 clock-cycles (~60MHz) = 1 SPI cycle => SPI @ 2MHz
    2e78:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    2e7c:	e2833802 	add	r3, r3, #131072	; 0x20000
    2e80:	e3a02004 	mov	r2, #4
    2e84:	e5832000 	str	r2, [r3]
  S0SPCR=0x20;  //LPC is Master
    2e88:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2e8c:	e2833802 	add	r3, r3, #131072	; 0x20000
    2e90:	e3a02020 	mov	r2, #32
    2e94:	e5832000 	str	r2, [r3]
}
    2e98:	e24bd00c 	sub	sp, fp, #12
    2e9c:	e89d6800 	ldm	sp, {fp, sp, lr}
    2ea0:	e12fff1e 	bx	lr

00002ea4 <init_spi1>:

void init_spi1(void)
{
    2ea4:	e1a0c00d 	mov	ip, sp
    2ea8:	e92dd800 	push	{fp, ip, lr, pc}
    2eac:	e24cb004 	sub	fp, ip, #4
    2eb0:	e24dd004 	sub	sp, sp, #4
	unsigned char i, Dummy;

    /* Set DSS data to 8-bit, Frame format SPI, CPOL = 0, CPHA = 0, and SCR is 3 */
    SSPCR0 = 0x040F;
    2eb4:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    2eb8:	e282291a 	add	r2, r2, #425984	; 0x68000
    2ebc:	e3a03b01 	mov	r3, #1024	; 0x400
    2ec0:	e283300f 	add	r3, r3, #15
    2ec4:	e5823000 	str	r3, [r2]

    /* SSPCPSR clock prescale register, master mode, minimum divisor is 0x02 */
    SSPCPSR = 0x1B;
    2ec8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2ecc:	e283391a 	add	r3, r3, #425984	; 0x68000
    2ed0:	e2833010 	add	r3, r3, #16
    2ed4:	e3a0201b 	mov	r2, #27
    2ed8:	e5832000 	str	r2, [r3]

    for ( i = 0; i < FIFOSIZE; i++ )
    2edc:	e3a03000 	mov	r3, #0
    2ee0:	e54b300e 	strb	r3, [fp, #-14]
    2ee4:	ea000006 	b	2f04 <init_spi1+0x60>
    {
	Dummy = SSPDR;		/* clear the RxFIFO */
    2ee8:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    2eec:	e283391a 	add	r3, r3, #425984	; 0x68000
    2ef0:	e5933000 	ldr	r3, [r3]
    2ef4:	e54b300d 	strb	r3, [fp, #-13]
    SSPCR0 = 0x040F;

    /* SSPCPSR clock prescale register, master mode, minimum divisor is 0x02 */
    SSPCPSR = 0x1B;

    for ( i = 0; i < FIFOSIZE; i++ )
    2ef8:	e55b300e 	ldrb	r3, [fp, #-14]
    2efc:	e2833001 	add	r3, r3, #1
    2f00:	e54b300e 	strb	r3, [fp, #-14]
    2f04:	e55b300e 	ldrb	r3, [fp, #-14]
    2f08:	e3530007 	cmp	r3, #7
    2f0c:	9afffff5 	bls	2ee8 <init_spi1+0x44>
    {
	Dummy = SSPDR;		/* clear the RxFIFO */
    }

    /*all ints deactivated*/
	SSPIMSC = 0;
    2f10:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2f14:	e283391a 	add	r3, r3, #425984	; 0x68000
    2f18:	e2833014 	add	r3, r3, #20
    2f1c:	e3a02000 	mov	r2, #0
    2f20:	e5832000 	str	r2, [r3]

    /* Device select as master, SSP Enabled */
    SSPCR1 = 0x00;// | SSPCR1_SSE;
    2f24:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    2f28:	e283391a 	add	r3, r3, #425984	; 0x68000
    2f2c:	e3a02000 	mov	r2, #0
    2f30:	e5832000 	str	r2, [r3]

    return;


}
    2f34:	e24bd00c 	sub	sp, fp, #12
    2f38:	e89d6800 	ldm	sp, {fp, sp, lr}
    2f3c:	e12fff1e 	bx	lr

00002f40 <pll_init>:

void pll_init(void)
{
    2f40:	e1a0c00d 	mov	ip, sp
    2f44:	e92dd800 	push	{fp, ip, lr, pc}
    2f48:	e24cb004 	sub	fp, ip, #4
  PLLCFG=0x23;    //0b00100011; => M=4,0690; P=2;
    2f4c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2f50:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2f54:	e2833084 	add	r3, r3, #132	; 0x84
    2f58:	e3a02023 	mov	r2, #35	; 0x23
    2f5c:	e5832000 	str	r2, [r3]
  PLLCON=0x03;    //PLLE=1, PLLC=1 => PLL enabled as system clock
    2f60:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2f64:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2f68:	e2833080 	add	r3, r3, #128	; 0x80
    2f6c:	e3a02003 	mov	r2, #3
    2f70:	e5832000 	str	r2, [r3]
}
    2f74:	e24bd00c 	sub	sp, fp, #12
    2f78:	e89d6800 	ldm	sp, {fp, sp, lr}
    2f7c:	e12fff1e 	bx	lr

00002f80 <pll_feed>:

void pll_feed(void)
{
    2f80:	e1a0c00d 	mov	ip, sp
    2f84:	e92dd800 	push	{fp, ip, lr, pc}
    2f88:	e24cb004 	sub	fp, ip, #4
  PLLFEED=0xAA;
    2f8c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2f90:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2f94:	e283308c 	add	r3, r3, #140	; 0x8c
    2f98:	e3a020aa 	mov	r2, #170	; 0xaa
    2f9c:	e5832000 	str	r2, [r3]
  PLLFEED=0x55;
    2fa0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2fa4:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2fa8:	e283308c 	add	r3, r3, #140	; 0x8c
    2fac:	e3a02055 	mov	r2, #85	; 0x55
    2fb0:	e5832000 	str	r2, [r3]
}
    2fb4:	e24bd00c 	sub	sp, fp, #12
    2fb8:	e89d6800 	ldm	sp, {fp, sp, lr}
    2fbc:	e12fff1e 	bx	lr

00002fc0 <processorClockFrequency>:

unsigned int processorClockFrequency(void)
{
    2fc0:	e1a0c00d 	mov	ip, sp
    2fc4:	e92dd800 	push	{fp, ip, lr, pc}
    2fc8:	e24cb004 	sub	fp, ip, #4
  return 58982400;
    2fcc:	e3a037e1 	mov	r3, #58982400	; 0x3840000
}
    2fd0:	e1a00003 	mov	r0, r3
    2fd4:	e24bd00c 	sub	sp, fp, #12
    2fd8:	e89d6800 	ldm	sp, {fp, sp, lr}
    2fdc:	e12fff1e 	bx	lr

00002fe0 <peripheralClockFrequency>:

unsigned int peripheralClockFrequency(void)
{
    2fe0:	e1a0c00d 	mov	ip, sp
    2fe4:	e92dd800 	push	{fp, ip, lr, pc}
    2fe8:	e24cb004 	sub	fp, ip, #4
    2fec:	e24dd008 	sub	sp, sp, #8
  unsigned int divider;
  switch (VPBDIV & 3)
    2ff0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    2ff4:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    2ff8:	e2833c01 	add	r3, r3, #256	; 0x100
    2ffc:	e5933000 	ldr	r3, [r3]
    3000:	e2033003 	and	r3, r3, #3
    3004:	e50b3014 	str	r3, [fp, #-20]
    3008:	e51b3014 	ldr	r3, [fp, #-20]
    300c:	e3530001 	cmp	r3, #1
    3010:	0a000009 	beq	303c <peripheralClockFrequency+0x5c>
    3014:	e51b3014 	ldr	r3, [fp, #-20]
    3018:	e3530001 	cmp	r3, #1
    301c:	3a000003 	bcc	3030 <peripheralClockFrequency+0x50>
    3020:	e51b3014 	ldr	r3, [fp, #-20]
    3024:	e3530002 	cmp	r3, #2
    3028:	0a000006 	beq	3048 <peripheralClockFrequency+0x68>
    302c:	ea000007 	b	3050 <peripheralClockFrequency+0x70>
    {
      case 0:
        divider = 4;
    3030:	e3a03004 	mov	r3, #4
    3034:	e50b3010 	str	r3, [fp, #-16]
        break;
    3038:	ea000004 	b	3050 <peripheralClockFrequency+0x70>
      case 1:
        divider = 1;
    303c:	e3a03001 	mov	r3, #1
    3040:	e50b3010 	str	r3, [fp, #-16]
        break;
    3044:	ea000001 	b	3050 <peripheralClockFrequency+0x70>
      case 2:
        divider = 2;
    3048:	e3a03002 	mov	r3, #2
    304c:	e50b3010 	str	r3, [fp, #-16]
        break;
    }
  return processorClockFrequency() / divider;
    3050:	ebffffda 	bl	2fc0 <processorClockFrequency>
    3054:	e1a03000 	mov	r3, r0
    3058:	e1a00003 	mov	r0, r3
    305c:	e51b1010 	ldr	r1, [fp, #-16]
    3060:	eb002a61 	bl	d9ec <____udivsi3_from_arm>
    3064:	e1a03000 	mov	r3, r0
}
    3068:	e1a00003 	mov	r0, r3
    306c:	e24bd00c 	sub	sp, fp, #12
    3070:	e89d6800 	ldm	sp, {fp, sp, lr}
    3074:	e12fff1e 	bx	lr

00003078 <delay>:

void delay(int n)
{
    3078:	e1a0c00d 	mov	ip, sp
    307c:	e92dd800 	push	{fp, ip, lr, pc}
    3080:	e24cb004 	sub	fp, ip, #4
    3084:	e24dd008 	sub	sp, sp, #8
    3088:	e50b0014 	str	r0, [fp, #-20]
  volatile int i;
  for (i = 0; i < n; ++i);
    308c:	e3a03000 	mov	r3, #0
    3090:	e50b3010 	str	r3, [fp, #-16]
    3094:	ea000002 	b	30a4 <delay+0x2c>
    3098:	e51b3010 	ldr	r3, [fp, #-16]
    309c:	e2833001 	add	r3, r3, #1
    30a0:	e50b3010 	str	r3, [fp, #-16]
    30a4:	e51b2010 	ldr	r2, [fp, #-16]
    30a8:	e51b3014 	ldr	r3, [fp, #-20]
    30ac:	e1520003 	cmp	r2, r3
    30b0:	bafffff8 	blt	3098 <delay+0x20>
}
    30b4:	e24bd00c 	sub	sp, fp, #12
    30b8:	e89d6800 	ldm	sp, {fp, sp, lr}
    30bc:	e12fff1e 	bx	lr

000030c0 <uart0ISR>:
volatile int toggle = 0;
volatile int lps = 0;

// user uart
void uart0ISR(void) __irq
{
    30c0:	e1a0c00d 	mov	ip, sp
    30c4:	e92dd810 	push	{r4, fp, ip, lr, pc}
    30c8:	e24cb004 	sub	fp, ip, #4
    30cc:	e24dd004 	sub	sp, sp, #4

  // Read IIR to clear interrupt and find out the cause
  IENABLE;

  // Handle UART interrupt
  iir = (U0IIR >> 1) & 0x7;
    30d0:	e3a03903 	mov	r3, #49152	; 0xc000
    30d4:	e283328e 	add	r3, r3, #-536870904	; 0xe0000008
    30d8:	e5933000 	ldr	r3, [r3]
    30dc:	e1a030a3 	lsr	r3, r3, #1
    30e0:	e2033007 	and	r3, r3, #7
    30e4:	e50b3014 	str	r3, [fp, #-20]
  if (iir == 1) // Transmitter is empty
    30e8:	e51b3014 	ldr	r3, [fp, #-20]
    30ec:	e3530001 	cmp	r3, #1
    30f0:	1a000012 	bne	3140 <uart0ISR+0x80>
  {
	// 0x20 -- On when U0THR (Transmitter Holding Register) is empty...
	while (RBCount(&u0s) != 0 && ((U0LSR & 0x20) != 0))
    30f4:	ea000005 	b	3110 <uart0ISR+0x50>
	{ 
		U0THR = RBDequeue(&u0s);
    30f8:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    30fc:	e2844903 	add	r4, r4, #49152	; 0xc000
    3100:	e59f007c 	ldr	r0, [pc, #124]	; 3184 <uart0ISR+0xc4>
    3104:	ebfffbfb 	bl	20f8 <RBDequeue>
    3108:	e1a03000 	mov	r3, r0
    310c:	e5843000 	str	r3, [r4]
  // Handle UART interrupt
  iir = (U0IIR >> 1) & 0x7;
  if (iir == 1) // Transmitter is empty
  {
	// 0x20 -- On when U0THR (Transmitter Holding Register) is empty...
	while (RBCount(&u0s) != 0 && ((U0LSR & 0x20) != 0))
    3110:	e59f006c 	ldr	r0, [pc, #108]	; 3184 <uart0ISR+0xc4>
    3114:	ebfffbf5 	bl	20f0 <RBCount>
    3118:	e1a03000 	mov	r3, r0
    311c:	e3530000 	cmp	r3, #0
    3120:	0a000006 	beq	3140 <uart0ISR+0x80>
    3124:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3128:	e2833903 	add	r3, r3, #49152	; 0xc000
    312c:	e2833014 	add	r3, r3, #20
    3130:	e5933000 	ldr	r3, [r3]
    3134:	e2033020 	and	r3, r3, #32
    3138:	e3530000 	cmp	r3, #0
    313c:	1affffed 	bne	30f8 <uart0ISR+0x38>
//  	RBEnqueue(&u0r, U0RBR);
 // 	RBEnqueue(&u0r, U0RBR);
  //	RBEnqueue(&u0r, U0RBR);
  //	RBEnqueue(&u0r, U0RBR);
  } 
  if (iir == 6)
    3140:	e51b3014 	ldr	r3, [fp, #-20]
    3144:	e3530006 	cmp	r3, #6
    3148:	1a000006 	bne	3168 <uart0ISR+0xa8>
	 RBEnqueue(&u0r, U0RBR);
    314c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3150:	e2833903 	add	r3, r3, #49152	; 0xc000
    3154:	e5933000 	ldr	r3, [r3]
    3158:	e20330ff 	and	r3, r3, #255	; 0xff
    315c:	e59f0024 	ldr	r0, [pc, #36]	; 3188 <uart0ISR+0xc8>
    3160:	e1a01003 	mov	r1, r3
    3164:	ebfffc17 	bl	21c8 <RBEnqueue>
  IDISABLE; 
  VICVectAddr = 0;		// Acknowledge Interrupt
    3168:	e3a03000 	mov	r3, #0
    316c:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    3170:	e3a02000 	mov	r2, #0
    3174:	e5832000 	str	r2, [r3]
}
    3178:	e24bd010 	sub	sp, fp, #16
    317c:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
    3180:	e12fff1e 	bx	lr
    3184:	40001acc 	.word	0x40001acc
    3188:	40001a2c 	.word	0x40001a2c

0000318c <emptyUART0>:

void emptyUART0(void)
{
    318c:	e1a0c00d 	mov	ip, sp
    3190:	e92dd800 	push	{fp, ip, lr, pc}
    3194:	e24cb004 	sub	fp, ip, #4
    3198:	e24dd004 	sub	sp, sp, #4
	char rcvd;

	while ( LSR0_RDR )
    319c:	ea000007 	b	31c0 <emptyUART0+0x34>
	{
		rcvd = U0RBR;
    31a0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    31a4:	e2833903 	add	r3, r3, #49152	; 0xc000
    31a8:	e5933000 	ldr	r3, [r3]
    31ac:	e54b300d 	strb	r3, [fp, #-13]
		RBEnqueue(&u0r, rcvd);
    31b0:	e55b300d 	ldrb	r3, [fp, #-13]
    31b4:	e59f0030 	ldr	r0, [pc, #48]	; 31ec <emptyUART0+0x60>
    31b8:	e1a01003 	mov	r1, r3
    31bc:	ebfffc01 	bl	21c8 <RBEnqueue>

void emptyUART0(void)
{
	char rcvd;

	while ( LSR0_RDR )
    31c0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    31c4:	e2833903 	add	r3, r3, #49152	; 0xc000
    31c8:	e2833014 	add	r3, r3, #20
    31cc:	e5933000 	ldr	r3, [r3]
    31d0:	e2033001 	and	r3, r3, #1
    31d4:	e20330ff 	and	r3, r3, #255	; 0xff
    31d8:	e3530000 	cmp	r3, #0
    31dc:	1affffef 	bne	31a0 <emptyUART0+0x14>
	{
		rcvd = U0RBR;
		RBEnqueue(&u0r, rcvd);
	}
}
    31e0:	e24bd00c 	sub	sp, fp, #12
    31e4:	e89d6800 	ldm	sp, {fp, sp, lr}
    31e8:	e12fff1e 	bx	lr
    31ec:	40001a2c 	.word	0x40001a2c

000031f0 <UART0Initialize>:

void UART0Initialize(unsigned int baud)
{
    31f0:	e1a0c00d 	mov	ip, sp
    31f4:	e92dd800 	push	{fp, ip, lr, pc}
    31f8:	e24cb004 	sub	fp, ip, #4
    31fc:	e24dd008 	sub	sp, sp, #8
    3200:	e50b0014 	str	r0, [fp, #-20]
  unsigned int divisor = peripheralClockFrequency() / (16 * baud);
    3204:	ebffff75 	bl	2fe0 <peripheralClockFrequency>
    3208:	e1a02000 	mov	r2, r0
    320c:	e51b3014 	ldr	r3, [fp, #-20]
    3210:	e1a03203 	lsl	r3, r3, #4
    3214:	e1a00002 	mov	r0, r2
    3218:	e1a01003 	mov	r1, r3
    321c:	eb0029f2 	bl	d9ec <____udivsi3_from_arm>
    3220:	e1a03000 	mov	r3, r0
    3224:	e50b3010 	str	r3, [fp, #-16]
// U0IER
//  Bit0: RBR enable
//  Bit1: THRE enable

  //UART0
	LED(0,OFF);
    3228:	e3a00000 	mov	r0, #0
    322c:	e3a01000 	mov	r1, #0
    3230:	ebfffde9 	bl	29dc <LED>
	LED(1,OFF);
    3234:	e3a00001 	mov	r0, #1
    3238:	e3a01000 	mov	r1, #0
    323c:	ebfffde6 	bl	29dc <LED>

  RBInit(&u0s);
    3240:	e59f0090 	ldr	r0, [pc, #144]	; 32d8 <UART0Initialize+0xe8>
    3244:	ebfffb63 	bl	1fd8 <RBInit>
  RBInit(&u0r); //Send / Receive uart buffers.
    3248:	e59f008c 	ldr	r0, [pc, #140]	; 32dc <UART0Initialize+0xec>
    324c:	ebfffb61 	bl	1fd8 <RBInit>
  U0LCR = 0x83; /* 8 bit, 1 stop bit, no parity, enable DLAB */
    3250:	e3a03903 	mov	r3, #49152	; 0xc000
    3254:	e28332ce 	add	r3, r3, #-536870900	; 0xe000000c
    3258:	e3a02083 	mov	r2, #131	; 0x83
    325c:	e5832000 	str	r2, [r3]
  U0DLL = divisor & 0xFF;
    3260:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3264:	e2833903 	add	r3, r3, #49152	; 0xc000
    3268:	e51b2010 	ldr	r2, [fp, #-16]
    326c:	e20220ff 	and	r2, r2, #255	; 0xff
    3270:	e5832000 	str	r2, [r3]
  U0DLM = (divisor >> 8) & 0xFF;
    3274:	e3a02903 	mov	r2, #49152	; 0xc000
    3278:	e282224e 	add	r2, r2, #-536870908	; 0xe0000004
    327c:	e51b3010 	ldr	r3, [fp, #-16]
    3280:	e1a03423 	lsr	r3, r3, #8
    3284:	e20330ff 	and	r3, r3, #255	; 0xff
    3288:	e5823000 	str	r3, [r2]
  U0LCR &= ~0x80; /* Disable DLAB */
    328c:	e3a02903 	mov	r2, #49152	; 0xc000
    3290:	e28222ce 	add	r2, r2, #-536870900	; 0xe000000c
    3294:	e3a03903 	mov	r3, #49152	; 0xc000
    3298:	e28332ce 	add	r3, r3, #-536870900	; 0xe000000c
    329c:	e5933000 	ldr	r3, [r3]
    32a0:	e3c33080 	bic	r3, r3, #128	; 0x80
    32a4:	e5823000 	str	r3, [r2]
  U0FCR = FIFO_ENABLE | TL3; // Enable FIFO's, interrupt every 14 characters.
    32a8:	e3a03903 	mov	r3, #49152	; 0xc000
    32ac:	e283328e 	add	r3, r3, #-536870904	; 0xe0000008
    32b0:	e3a020b1 	mov	r2, #177	; 0xb1
    32b4:	e5832000 	str	r2, [r3]
  U0TER = 0x80; //Enable transmitter.
    32b8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    32bc:	e2833903 	add	r3, r3, #49152	; 0xc000
    32c0:	e2833030 	add	r3, r3, #48	; 0x30
    32c4:	e3a02080 	mov	r2, #128	; 0x80
    32c8:	e5832000 	str	r2, [r3]
}
    32cc:	e24bd00c 	sub	sp, fp, #12
    32d0:	e89d6800 	ldm	sp, {fp, sp, lr}
    32d4:	e12fff1e 	bx	lr
    32d8:	40001acc 	.word	0x40001acc
    32dc:	40001a2c 	.word	0x40001a2c

000032e0 <UART0Debug>:

void UART0Debug(char *msg, int length)
{
    32e0:	e1a0c00d 	mov	ip, sp
    32e4:	e92dd800 	push	{fp, ip, lr, pc}
    32e8:	e24cb004 	sub	fp, ip, #4
    32ec:	e24dd008 	sub	sp, sp, #8
    32f0:	e50b0010 	str	r0, [fp, #-16]
    32f4:	e50b1014 	str	r1, [fp, #-20]

  while ( length > 0 )
    32f8:	ea000011 	b	3344 <UART0Debug+0x64>
  {
	while ( (U0LSR & 0x20) == 0 ); // Wait until we can send...
    32fc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3300:	e2833903 	add	r3, r3, #49152	; 0xc000
    3304:	e2833014 	add	r3, r3, #20
    3308:	e5933000 	ldr	r3, [r3]
    330c:	e2033020 	and	r3, r3, #32
    3310:	e3530000 	cmp	r3, #0
    3314:	0afffff8 	beq	32fc <UART0Debug+0x1c>
	length--;
    3318:	e51b3014 	ldr	r3, [fp, #-20]
    331c:	e2433001 	sub	r3, r3, #1
    3320:	e50b3014 	str	r3, [fp, #-20]
	U0THR = *msg;
    3324:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    3328:	e2822903 	add	r2, r2, #49152	; 0xc000
    332c:	e51b3010 	ldr	r3, [fp, #-16]
    3330:	e5d33000 	ldrb	r3, [r3]
    3334:	e5823000 	str	r3, [r2]
	msg++;
    3338:	e51b3010 	ldr	r3, [fp, #-16]
    333c:	e2833001 	add	r3, r3, #1
    3340:	e50b3010 	str	r3, [fp, #-16]
}

void UART0Debug(char *msg, int length)
{

  while ( length > 0 )
    3344:	e51b3014 	ldr	r3, [fp, #-20]
    3348:	e3530000 	cmp	r3, #0
    334c:	caffffea 	bgt	32fc <UART0Debug+0x1c>
	length--;
	U0THR = *msg;
	msg++;
  }

}
    3350:	e24bd00c 	sub	sp, fp, #12
    3354:	e89d6800 	ldm	sp, {fp, sp, lr}
    3358:	e12fff1e 	bx	lr

0000335c <UART0WriteChar>:

//Write to UART0
void UART0WriteChar(unsigned char ch)
{
    335c:	e1a0c00d 	mov	ip, sp
    3360:	e92dd800 	push	{fp, ip, lr, pc}
    3364:	e24cb004 	sub	fp, ip, #4
    3368:	e24dd004 	sub	sp, sp, #4
    336c:	e1a03000 	mov	r3, r0
    3370:	e54b3010 	strb	r3, [fp, #-16]
  if ( U0LSR & 0x20 ) // Transmitter Empty, so we need to write directly to transmitter.
    3374:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3378:	e2833903 	add	r3, r3, #49152	; 0xc000
    337c:	e2833014 	add	r3, r3, #20
    3380:	e5933000 	ldr	r3, [r3]
    3384:	e2033020 	and	r3, r3, #32
    3388:	e3530000 	cmp	r3, #0
    338c:	0a000004 	beq	33a4 <UART0WriteChar+0x48>
    U0THR = ch;
    3390:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3394:	e2833903 	add	r3, r3, #49152	; 0xc000
    3398:	e55b2010 	ldrb	r2, [fp, #-16]
    339c:	e5832000 	str	r2, [r3]
    33a0:	ea000003 	b	33b4 <UART0WriteChar+0x58>
  else
    RBEnqueue(&u0s, ch);
    33a4:	e55b3010 	ldrb	r3, [fp, #-16]
    33a8:	e59f0010 	ldr	r0, [pc, #16]	; 33c0 <UART0WriteChar+0x64>
    33ac:	e1a01003 	mov	r1, r3
    33b0:	ebfffb84 	bl	21c8 <RBEnqueue>
}
    33b4:	e24bd00c 	sub	sp, fp, #12
    33b8:	e89d6800 	ldm	sp, {fp, sp, lr}
    33bc:	e12fff1e 	bx	lr
    33c0:	40001acc 	.word	0x40001acc

000033c4 <uart1ISR>:



// GPS Uart
void uart1ISR(void) __irq
{
    33c4:	e1a0c00d 	mov	ip, sp
    33c8:	e92dd800 	push	{fp, ip, lr, pc}
    33cc:	e24cb004 	sub	fp, ip, #4
    33d0:	e24dd008 	sub	sp, sp, #8
  unsigned char t;
  IENABLE;
  unsigned iir = U1IIR;
    33d4:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    33d8:	e2833801 	add	r3, r3, #65536	; 0x10000
    33dc:	e5933000 	ldr	r3, [r3]
    33e0:	e50b3010 	str	r3, [fp, #-16]
      case 6:
        // CTI interrupt
        break;
   }
  IDISABLE;
  VICVectAddr = 0;		/* Acknowledge Interrupt */
    33e4:	e3a03000 	mov	r3, #0
    33e8:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    33ec:	e3a02000 	mov	r2, #0
    33f0:	e5832000 	str	r2, [r3]
}
    33f4:	e24bd00c 	sub	sp, fp, #12
    33f8:	e89d6800 	ldm	sp, {fp, sp, lr}
    33fc:	e12fff1e 	bx	lr

00003400 <UART1Initialize>:



// Uart1 seems to get used for GPS.
void UART1Initialize(unsigned int baud)
{
    3400:	e1a0c00d 	mov	ip, sp
    3404:	e92dd800 	push	{fp, ip, lr, pc}
    3408:	e24cb004 	sub	fp, ip, #4
    340c:	e24dd008 	sub	sp, sp, #8
    3410:	e50b0014 	str	r0, [fp, #-20]
  unsigned int divisor = peripheralClockFrequency() / (16 * baud);
    3414:	ebfffef1 	bl	2fe0 <peripheralClockFrequency>
    3418:	e1a02000 	mov	r2, r0
    341c:	e51b3014 	ldr	r3, [fp, #-20]
    3420:	e1a03203 	lsl	r3, r3, #4
    3424:	e1a00002 	mov	r0, r2
    3428:	e1a01003 	mov	r1, r3
    342c:	eb00296e 	bl	d9ec <____udivsi3_from_arm>
    3430:	e1a03000 	mov	r3, r0
    3434:	e50b3010 	str	r3, [fp, #-16]
//UART1
  U1LCR = 0x83; /* 8 bit, 1 stop bit, no parity, enable DLAB */
    3438:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    343c:	e2833801 	add	r3, r3, #65536	; 0x10000
    3440:	e3a02083 	mov	r2, #131	; 0x83
    3444:	e5832000 	str	r2, [r3]
  U1DLL = divisor & 0xFF;
    3448:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    344c:	e2833801 	add	r3, r3, #65536	; 0x10000
    3450:	e51b2010 	ldr	r2, [fp, #-16]
    3454:	e20220ff 	and	r2, r2, #255	; 0xff
    3458:	e5832000 	str	r2, [r3]
  U1DLM = (divisor >> 8) & 0xFF;
    345c:	e3a0224e 	mov	r2, #-536870908	; 0xe0000004
    3460:	e2822801 	add	r2, r2, #65536	; 0x10000
    3464:	e51b3010 	ldr	r3, [fp, #-16]
    3468:	e1a03423 	lsr	r3, r3, #8
    346c:	e20330ff 	and	r3, r3, #255	; 0xff
    3470:	e5823000 	str	r3, [r2]
  U1LCR &= ~0x80; /* Disable DLAB */
    3474:	e3a022ce 	mov	r2, #-536870900	; 0xe000000c
    3478:	e2822801 	add	r2, r2, #65536	; 0x10000
    347c:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    3480:	e2833801 	add	r3, r3, #65536	; 0x10000
    3484:	e5933000 	ldr	r3, [r3]
    3488:	e3c33080 	bic	r3, r3, #128	; 0x80
    348c:	e5823000 	str	r3, [r2]
  U1FCR = 1;
    3490:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    3494:	e2833801 	add	r3, r3, #65536	; 0x10000
    3498:	e3a02001 	mov	r2, #1
    349c:	e5832000 	str	r2, [r3]
}
    34a0:	e24bd00c 	sub	sp, fp, #12
    34a4:	e89d6800 	ldm	sp, {fp, sp, lr}
    34a8:	e12fff1e 	bx	lr

000034ac <UART1WriteChar>:


//Write to UART1
void UART1WriteChar(unsigned char ch)
{
    34ac:	e1a0c00d 	mov	ip, sp
    34b0:	e92dd800 	push	{fp, ip, lr, pc}
    34b4:	e24cb004 	sub	fp, ip, #4
    34b8:	e24dd004 	sub	sp, sp, #4
    34bc:	e1a03000 	mov	r3, r0
    34c0:	e54b3010 	strb	r3, [fp, #-16]
  while ((U1LSR & 0x20) == 0);
    34c4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    34c8:	e2833801 	add	r3, r3, #65536	; 0x10000
    34cc:	e2833014 	add	r3, r3, #20
    34d0:	e5933000 	ldr	r3, [r3]
    34d4:	e2033020 	and	r3, r3, #32
    34d8:	e3530000 	cmp	r3, #0
    34dc:	0afffff8 	beq	34c4 <UART1WriteChar+0x18>
  U1THR = ch;
    34e0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    34e4:	e2833801 	add	r3, r3, #65536	; 0x10000
    34e8:	e55b2010 	ldrb	r2, [fp, #-16]
    34ec:	e5832000 	str	r2, [r3]
}
    34f0:	e24bd00c 	sub	sp, fp, #12
    34f4:	e89d6800 	ldm	sp, {fp, sp, lr}
    34f8:	e12fff1e 	bx	lr

000034fc <UART1ReadChar>:

unsigned char UART1ReadChar(void)
{
    34fc:	e1a0c00d 	mov	ip, sp
    3500:	e92dd800 	push	{fp, ip, lr, pc}
    3504:	e24cb004 	sub	fp, ip, #4
  while ((U1LSR & 0x01) == 0);
    3508:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    350c:	e2833801 	add	r3, r3, #65536	; 0x10000
    3510:	e2833014 	add	r3, r3, #20
    3514:	e5933000 	ldr	r3, [r3]
    3518:	e2033001 	and	r3, r3, #1
    351c:	e3530000 	cmp	r3, #0
    3520:	0afffff8 	beq	3508 <UART1ReadChar+0xc>
  return U1RBR;
    3524:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3528:	e2833801 	add	r3, r3, #65536	; 0x10000
    352c:	e5933000 	ldr	r3, [r3]
    3530:	e20330ff 	and	r3, r3, #255	; 0xff
}
    3534:	e1a00003 	mov	r0, r3
    3538:	e24bd00c 	sub	sp, fp, #12
    353c:	e89d6800 	ldm	sp, {fp, sp, lr}
    3540:	e12fff1e 	bx	lr

00003544 <__putchar>:

void __putchar(int ch)
{
    3544:	e1a0c00d 	mov	ip, sp
    3548:	e92dd800 	push	{fp, ip, lr, pc}
    354c:	e24cb004 	sub	fp, ip, #4
    3550:	e24dd004 	sub	sp, sp, #4
    3554:	e50b0010 	str	r0, [fp, #-16]
  if (ch == '\n')
    3558:	e51b3010 	ldr	r3, [fp, #-16]
    355c:	e353000a 	cmp	r3, #10
    3560:	1a000001 	bne	356c <__putchar+0x28>
    UART0WriteChar('\r');
    3564:	e3a0000d 	mov	r0, #13
    3568:	ebffff7b 	bl	335c <UART0WriteChar>
  UART0WriteChar(ch);
    356c:	e51b3010 	ldr	r3, [fp, #-16]
    3570:	e20330ff 	and	r3, r3, #255	; 0xff
    3574:	e1a00003 	mov	r0, r3
    3578:	ebffff77 	bl	335c <UART0WriteChar>
}
    357c:	e24bd00c 	sub	sp, fp, #12
    3580:	e89d6800 	ldm	sp, {fp, sp, lr}
    3584:	e12fff1e 	bx	lr

00003588 <UART1_send>:

void UART1_send(unsigned char *buffer, unsigned char length)
{
    3588:	e1a0c00d 	mov	ip, sp
    358c:	e92dd800 	push	{fp, ip, lr, pc}
    3590:	e24cb004 	sub	fp, ip, #4
    3594:	e24dd00c 	sub	sp, sp, #12
    3598:	e50b0014 	str	r0, [fp, #-20]
    359c:	e1a03001 	mov	r3, r1
    35a0:	e54b3018 	strb	r3, [fp, #-24]
  unsigned char cnt=0;
    35a4:	e3a03000 	mov	r3, #0
    35a8:	e54b300d 	strb	r3, [fp, #-13]
  while(length--)
    35ac:	ea000011 	b	35f8 <UART1_send+0x70>
  {
    while (!(U1LSR & 0x20)); //wait until U1THR is empty
    35b0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    35b4:	e2833801 	add	r3, r3, #65536	; 0x10000
    35b8:	e2833014 	add	r3, r3, #20
    35bc:	e5933000 	ldr	r3, [r3]
    35c0:	e2033020 	and	r3, r3, #32
    35c4:	e3530000 	cmp	r3, #0
    35c8:	0afffff8 	beq	35b0 <UART1_send+0x28>
    U1THR = buffer[cnt++];
    35cc:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    35d0:	e2822801 	add	r2, r2, #65536	; 0x10000
    35d4:	e55b300d 	ldrb	r3, [fp, #-13]
    35d8:	e1a01003 	mov	r1, r3
    35dc:	e51b3014 	ldr	r3, [fp, #-20]
    35e0:	e0813003 	add	r3, r1, r3
    35e4:	e5d33000 	ldrb	r3, [r3]
    35e8:	e5823000 	str	r3, [r2]
    35ec:	e55b300d 	ldrb	r3, [fp, #-13]
    35f0:	e2833001 	add	r3, r3, #1
    35f4:	e54b300d 	strb	r3, [fp, #-13]
}

void UART1_send(unsigned char *buffer, unsigned char length)
{
  unsigned char cnt=0;
  while(length--)
    35f8:	e55b3018 	ldrb	r3, [fp, #-24]
    35fc:	e2433001 	sub	r3, r3, #1
    3600:	e54b3018 	strb	r3, [fp, #-24]
    3604:	e55b3018 	ldrb	r3, [fp, #-24]
    3608:	e35300ff 	cmp	r3, #255	; 0xff
    360c:	1affffe7 	bne	35b0 <UART1_send+0x28>
  {
    while (!(U1LSR & 0x20)); //wait until U1THR is empty
    U1THR = buffer[cnt++];
  }
}
    3610:	e24bd00c 	sub	sp, fp, #12
    3614:	e89d6800 	ldm	sp, {fp, sp, lr}
    3618:	e12fff1e 	bx	lr

0000361c <crc_update>:

//example CRC16 function
unsigned short crc_update (unsigned short crc, unsigned char data)
     {
    361c:	e1a0c00d 	mov	ip, sp
    3620:	e92dd800 	push	{fp, ip, lr, pc}
    3624:	e24cb004 	sub	fp, ip, #4
    3628:	e24dd008 	sub	sp, sp, #8
    362c:	e1a03000 	mov	r3, r0
    3630:	e1a02001 	mov	r2, r1
    3634:	e14b31b0 	strh	r3, [fp, #-16]
    3638:	e1a03002 	mov	r3, r2
    363c:	e54b3014 	strb	r3, [fp, #-20]
         data ^= (crc & 0xff);
    3640:	e15b31b0 	ldrh	r3, [fp, #-16]
    3644:	e20330ff 	and	r3, r3, #255	; 0xff
    3648:	e20330ff 	and	r3, r3, #255	; 0xff
    364c:	e55b2014 	ldrb	r2, [fp, #-20]
    3650:	e1a01003 	mov	r1, r3
    3654:	e1a03002 	mov	r3, r2
    3658:	e0213003 	eor	r3, r1, r3
    365c:	e20330ff 	and	r3, r3, #255	; 0xff
    3660:	e54b3014 	strb	r3, [fp, #-20]
         data ^= data << 4;
    3664:	e55b3014 	ldrb	r3, [fp, #-20]
    3668:	e1a03203 	lsl	r3, r3, #4
    366c:	e20330ff 	and	r3, r3, #255	; 0xff
    3670:	e55b2014 	ldrb	r2, [fp, #-20]
    3674:	e1a01003 	mov	r1, r3
    3678:	e1a03002 	mov	r3, r2
    367c:	e0213003 	eor	r3, r1, r3
    3680:	e20330ff 	and	r3, r3, #255	; 0xff
    3684:	e54b3014 	strb	r3, [fp, #-20]

         return ((((unsigned short )data << 8) | ((crc>>8)&0xff)) ^ (unsigned char )(data >> 4)
    3688:	e55b3014 	ldrb	r3, [fp, #-20]
    368c:	e1a03403 	lsl	r3, r3, #8
    3690:	e1a03803 	lsl	r3, r3, #16
    3694:	e1a02823 	lsr	r2, r3, #16
    3698:	e15b31b0 	ldrh	r3, [fp, #-16]
    369c:	e1a03423 	lsr	r3, r3, #8
    36a0:	e1a03803 	lsl	r3, r3, #16
    36a4:	e1a03823 	lsr	r3, r3, #16
    36a8:	e1a03803 	lsl	r3, r3, #16
    36ac:	e1a03823 	lsr	r3, r3, #16
    36b0:	e20330ff 	and	r3, r3, #255	; 0xff
    36b4:	e1823003 	orr	r3, r2, r3
    36b8:	e1a03803 	lsl	r3, r3, #16
    36bc:	e1a02823 	lsr	r2, r3, #16
    36c0:	e55b3014 	ldrb	r3, [fp, #-20]
    36c4:	e1a03223 	lsr	r3, r3, #4
    36c8:	e20330ff 	and	r3, r3, #255	; 0xff
    36cc:	e0223003 	eor	r3, r2, r3
    36d0:	e1a03803 	lsl	r3, r3, #16
    36d4:	e1a02823 	lsr	r2, r3, #16
    36d8:	e55b3014 	ldrb	r3, [fp, #-20]
    36dc:	e1a03183 	lsl	r3, r3, #3
    36e0:	e1a03803 	lsl	r3, r3, #16
    36e4:	e1a03823 	lsr	r3, r3, #16
    36e8:	e0223003 	eor	r3, r2, r3
    36ec:	e1a03803 	lsl	r3, r3, #16
    36f0:	e1a03823 	lsr	r3, r3, #16
    36f4:	e1a03803 	lsl	r3, r3, #16
    36f8:	e1a03823 	lsr	r3, r3, #16
                 ^ ((unsigned short )data << 3));
     }
    36fc:	e1a00003 	mov	r0, r3
    3700:	e24bd00c 	sub	sp, fp, #12
    3704:	e89d6800 	ldm	sp, {fp, sp, lr}
    3708:	e12fff1e 	bx	lr

0000370c <crc16>:

 unsigned short crc16(void* data, unsigned short cnt)
 {
    370c:	e1a0c00d 	mov	ip, sp
    3710:	e92dd800 	push	{fp, ip, lr, pc}
    3714:	e24cb004 	sub	fp, ip, #4
    3718:	e24dd014 	sub	sp, sp, #20
    371c:	e50b001c 	str	r0, [fp, #-28]
    3720:	e1a03001 	mov	r3, r1
    3724:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
   unsigned short crc=0xff;
    3728:	e3a030ff 	mov	r3, #255	; 0xff
    372c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
   unsigned char * ptr=(unsigned char *) data;
    3730:	e51b301c 	ldr	r3, [fp, #-28]
    3734:	e50b3014 	str	r3, [fp, #-20]
   int i;

   for (i=0;i<cnt;i++)
    3738:	e3a03000 	mov	r3, #0
    373c:	e50b3010 	str	r3, [fp, #-16]
    3740:	ea00000d 	b	377c <crc16+0x70>
     {
       crc=crc_update(crc,*ptr);
    3744:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
    3748:	e51b3014 	ldr	r3, [fp, #-20]
    374c:	e5d33000 	ldrb	r3, [r3]
    3750:	e1a00002 	mov	r0, r2
    3754:	e1a01003 	mov	r1, r3
    3758:	ebffffaf 	bl	361c <crc_update>
    375c:	e1a03000 	mov	r3, r0
    3760:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
       ptr++;
    3764:	e51b3014 	ldr	r3, [fp, #-20]
    3768:	e2833001 	add	r3, r3, #1
    376c:	e50b3014 	str	r3, [fp, #-20]
 {
   unsigned short crc=0xff;
   unsigned char * ptr=(unsigned char *) data;
   int i;

   for (i=0;i<cnt;i++)
    3770:	e51b3010 	ldr	r3, [fp, #-16]
    3774:	e2833001 	add	r3, r3, #1
    3778:	e50b3010 	str	r3, [fp, #-16]
    377c:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
    3780:	e51b3010 	ldr	r3, [fp, #-16]
    3784:	e1520003 	cmp	r2, r3
    3788:	caffffed 	bgt	3744 <crc16+0x38>
     {
       crc=crc_update(crc,*ptr);
       ptr++;
     }
   return crc;
    378c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 }
    3790:	e1a00003 	mov	r0, r3
    3794:	e24bd00c 	sub	sp, fp, #12
    3798:	e89d6800 	ldm	sp, {fp, sp, lr}
    379c:	e12fff1e 	bx	lr

000037a0 <_read_r>:
#include <sys/stat.h>
#include "uart.h"

// new code for _read_r provided by Alexey Shusharin - Thanks
_ssize_t _read_r(struct _reent *r, int file, void *ptr, size_t len)
{
    37a0:	e1a0c00d 	mov	ip, sp
    37a4:	e92dd800 	push	{fp, ip, lr, pc}
    37a8:	e24cb004 	sub	fp, ip, #4
    37ac:	e24dd020 	sub	sp, sp, #32
    37b0:	e50b001c 	str	r0, [fp, #-28]
    37b4:	e50b1020 	str	r1, [fp, #-32]
    37b8:	e50b2024 	str	r2, [fp, #-36]	; 0x24
    37bc:	e50b3028 	str	r3, [fp, #-40]	; 0x28
  char c;
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;
    37c0:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
    37c4:	e50b3010 	str	r3, [fp, #-16]

  for (i = 0; i < len; i++)
    37c8:	e3a03000 	mov	r3, #0
    37cc:	e50b3014 	str	r3, [fp, #-20]
    37d0:	ea000017 	b	3834 <_read_r+0x94>
  {
  //  c = UART0ReadChar();  -- PFG

    *p++ = c;
    37d4:	e51b2010 	ldr	r2, [fp, #-16]
    37d8:	e55b3015 	ldrb	r3, [fp, #-21]
    37dc:	e5c23000 	strb	r3, [r2]
    37e0:	e51b3010 	ldr	r3, [fp, #-16]
    37e4:	e2833001 	add	r3, r3, #1
    37e8:	e50b3010 	str	r3, [fp, #-16]
    //UART0WriteChar(c);  -- PFG

    if (c == 0x0D && i <= (len - 2))
    37ec:	e55b3015 	ldrb	r3, [fp, #-21]
    37f0:	e353000d 	cmp	r3, #13
    37f4:	1a00000b 	bne	3828 <_read_r+0x88>
    37f8:	e51b3014 	ldr	r3, [fp, #-20]
    37fc:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    3800:	e2422002 	sub	r2, r2, #2
    3804:	e1530002 	cmp	r3, r2
    3808:	8a000006 	bhi	3828 <_read_r+0x88>
    {
      *p = 0x0A;
    380c:	e51b2010 	ldr	r2, [fp, #-16]
    3810:	e3a0300a 	mov	r3, #10
    3814:	e5c23000 	strb	r3, [r2]
      //UART0WriteChar(0x0A); -- PFG
      return i + 2;
    3818:	e51b3014 	ldr	r3, [fp, #-20]
    381c:	e2833002 	add	r3, r3, #2
    3820:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
    3824:	ea000008 	b	384c <_read_r+0xac>
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;

  for (i = 0; i < len; i++)
    3828:	e51b3014 	ldr	r3, [fp, #-20]
    382c:	e2833001 	add	r3, r3, #1
    3830:	e50b3014 	str	r3, [fp, #-20]
    3834:	e51b2014 	ldr	r2, [fp, #-20]
    3838:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    383c:	e1520003 	cmp	r2, r3
    3840:	3affffe3 	bcc	37d4 <_read_r+0x34>
      *p = 0x0A;
      //UART0WriteChar(0x0A); -- PFG
      return i + 2;
    }
  }
  return i;
    3844:	e51b3014 	ldr	r3, [fp, #-20]
    3848:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
    384c:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
}
    3850:	e1a00003 	mov	r0, r3
    3854:	e24bd00c 	sub	sp, fp, #12
    3858:	e89d6800 	ldm	sp, {fp, sp, lr}
    385c:	e12fff1e 	bx	lr

00003860 <_write_r>:
_ssize_t _write_r (
    struct _reent *r, 
    int file, 
    const void *ptr, 
    size_t len)
{
    3860:	e1a0c00d 	mov	ip, sp
    3864:	e92dd800 	push	{fp, ip, lr, pc}
    3868:	e24cb004 	sub	fp, ip, #4
    386c:	e24dd018 	sub	sp, sp, #24
    3870:	e50b0018 	str	r0, [fp, #-24]
    3874:	e50b101c 	str	r1, [fp, #-28]
    3878:	e50b2020 	str	r2, [fp, #-32]
    387c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
    3880:	e51b3020 	ldr	r3, [fp, #-32]
    3884:	e50b3010 	str	r3, [fp, #-16]
	
	for (i = 0; i < len; i++) {
    3888:	e3a03000 	mov	r3, #0
    388c:	e50b3014 	str	r3, [fp, #-20]
    3890:	ea000010 	b	38d8 <_write_r+0x78>
		if (*p == '\n' ) UART0WriteChar('\r');
    3894:	e51b3010 	ldr	r3, [fp, #-16]
    3898:	e5d33000 	ldrb	r3, [r3]
    389c:	e353000a 	cmp	r3, #10
    38a0:	1a000001 	bne	38ac <_write_r+0x4c>
    38a4:	e3a0000d 	mov	r0, #13
    38a8:	ebfffeab 	bl	335c <UART0WriteChar>
		UART0WriteChar(*p++);
    38ac:	e51b3010 	ldr	r3, [fp, #-16]
    38b0:	e5d33000 	ldrb	r3, [r3]
    38b4:	e1a02003 	mov	r2, r3
    38b8:	e51b3010 	ldr	r3, [fp, #-16]
    38bc:	e2833001 	add	r3, r3, #1
    38c0:	e50b3010 	str	r3, [fp, #-16]
    38c4:	e1a00002 	mov	r0, r2
    38c8:	ebfffea3 	bl	335c <UART0WriteChar>
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    38cc:	e51b3014 	ldr	r3, [fp, #-20]
    38d0:	e2833001 	add	r3, r3, #1
    38d4:	e50b3014 	str	r3, [fp, #-20]
    38d8:	e51b2014 	ldr	r2, [fp, #-20]
    38dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
    38e0:	e1520003 	cmp	r2, r3
    38e4:	3affffea 	bcc	3894 <_write_r+0x34>
		if (*p == '\n' ) UART0WriteChar('\r');
		UART0WriteChar(*p++);
	}
	
	return len;
    38e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
}
    38ec:	e1a00003 	mov	r0, r3
    38f0:	e24bd00c 	sub	sp, fp, #12
    38f4:	e89d6800 	ldm	sp, {fp, sp, lr}
    38f8:	e12fff1e 	bx	lr

000038fc <_close_r>:

int _close_r(
    struct _reent *r, 
    int file)
{
    38fc:	e1a0c00d 	mov	ip, sp
    3900:	e92dd800 	push	{fp, ip, lr, pc}
    3904:	e24cb004 	sub	fp, ip, #4
    3908:	e24dd008 	sub	sp, sp, #8
    390c:	e50b0010 	str	r0, [fp, #-16]
    3910:	e50b1014 	str	r1, [fp, #-20]
	return 0;
    3914:	e3a03000 	mov	r3, #0
}
    3918:	e1a00003 	mov	r0, r3
    391c:	e24bd00c 	sub	sp, fp, #12
    3920:	e89d6800 	ldm	sp, {fp, sp, lr}
    3924:	e12fff1e 	bx	lr

00003928 <_lseek_r>:
_off_t _lseek_r(
    struct _reent *r, 
    int file, 
    _off_t ptr, 
    int dir)
{
    3928:	e1a0c00d 	mov	ip, sp
    392c:	e92dd800 	push	{fp, ip, lr, pc}
    3930:	e24cb004 	sub	fp, ip, #4
    3934:	e24dd010 	sub	sp, sp, #16
    3938:	e50b0010 	str	r0, [fp, #-16]
    393c:	e50b1014 	str	r1, [fp, #-20]
    3940:	e50b2018 	str	r2, [fp, #-24]
    3944:	e50b301c 	str	r3, [fp, #-28]
	return (_off_t)0;	/*  Always indicate we are at file beginning.	*/
    3948:	e3a03000 	mov	r3, #0
}
    394c:	e1a00003 	mov	r0, r3
    3950:	e24bd00c 	sub	sp, fp, #12
    3954:	e89d6800 	ldm	sp, {fp, sp, lr}
    3958:	e12fff1e 	bx	lr

0000395c <_fstat_r>:

int _fstat_r(
    struct _reent *r, 
    int file, 
    struct stat *st)
{
    395c:	e1a0c00d 	mov	ip, sp
    3960:	e92dd800 	push	{fp, ip, lr, pc}
    3964:	e24cb004 	sub	fp, ip, #4
    3968:	e24dd00c 	sub	sp, sp, #12
    396c:	e50b0010 	str	r0, [fp, #-16]
    3970:	e50b1014 	str	r1, [fp, #-20]
    3974:	e50b2018 	str	r2, [fp, #-24]
	/*  Always set as character device.				*/
	st->st_mode = S_IFCHR;	
    3978:	e51b2018 	ldr	r2, [fp, #-24]
    397c:	e3a03a02 	mov	r3, #8192	; 0x2000
    3980:	e5823004 	str	r3, [r2, #4]
		/* assigned to strong type with implicit 	*/
		/* signed/unsigned conversion.  Required by 	*/
		/* newlib.					*/

	return 0;
    3984:	e3a03000 	mov	r3, #0
}
    3988:	e1a00003 	mov	r0, r3
    398c:	e24bd00c 	sub	sp, fp, #12
    3990:	e89d6800 	ldm	sp, {fp, sp, lr}
    3994:	e12fff1e 	bx	lr

00003998 <isatty>:

int isatty(int file); /* avoid warning */

int isatty(int file)
{
    3998:	e1a0c00d 	mov	ip, sp
    399c:	e92dd800 	push	{fp, ip, lr, pc}
    39a0:	e24cb004 	sub	fp, ip, #4
    39a4:	e24dd004 	sub	sp, sp, #4
    39a8:	e50b0010 	str	r0, [fp, #-16]
	return 1;
    39ac:	e3a03001 	mov	r3, #1
}
    39b0:	e1a00003 	mov	r0, r3
    39b4:	e24bd00c 	sub	sp, fp, #12
    39b8:	e89d6800 	ldm	sp, {fp, sp, lr}
    39bc:	e12fff1e 	bx	lr

000039c0 <_sbrk_r>:
/* messages must be suppressed.						*/

void * _sbrk_r(
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
    39c0:	e1a0c00d 	mov	ip, sp
    39c4:	e92dd800 	push	{fp, ip, lr, pc}
    39c8:	e24cb004 	sub	fp, ip, #4
    39cc:	e24dd00c 	sub	sp, sp, #12
    39d0:	e50b0014 	str	r0, [fp, #-20]
    39d4:	e50b1018 	str	r1, [fp, #-24]
	char  *base;		/*  errno should be set to  ENOMEM on error	*/

	if (!heap_ptr) {	/*  Initialize if first time through.		*/
    39d8:	e59f304c 	ldr	r3, [pc, #76]	; 3a2c <_sbrk_r+0x6c>
    39dc:	e5933000 	ldr	r3, [r3]
    39e0:	e3530000 	cmp	r3, #0
    39e4:	1a000002 	bne	39f4 <_sbrk_r+0x34>
		heap_ptr = _end;
    39e8:	e59f203c 	ldr	r2, [pc, #60]	; 3a2c <_sbrk_r+0x6c>
    39ec:	e59f303c 	ldr	r3, [pc, #60]	; 3a30 <_sbrk_r+0x70>
    39f0:	e5823000 	str	r3, [r2]
	}
	base = heap_ptr;	/*  Point to end of heap.			*/
    39f4:	e59f3030 	ldr	r3, [pc, #48]	; 3a2c <_sbrk_r+0x6c>
    39f8:	e5933000 	ldr	r3, [r3]
    39fc:	e50b3010 	str	r3, [fp, #-16]
	heap_ptr += nbytes;	/*  Increase heap.				*/
    3a00:	e59f3024 	ldr	r3, [pc, #36]	; 3a2c <_sbrk_r+0x6c>
    3a04:	e5932000 	ldr	r2, [r3]
    3a08:	e51b3018 	ldr	r3, [fp, #-24]
    3a0c:	e0822003 	add	r2, r2, r3
    3a10:	e59f3014 	ldr	r3, [pc, #20]	; 3a2c <_sbrk_r+0x6c>
    3a14:	e5832000 	str	r2, [r3]
	
	return base;		/*  Return pointer to start of new heap area.	*/
    3a18:	e51b3010 	ldr	r3, [fp, #-16]
}
    3a1c:	e1a00003 	mov	r0, r3
    3a20:	e24bd00c 	sub	sp, fp, #12
    3a24:	e89d6800 	ldm	sp, {fp, sp, lr}
    3a28:	e12fff1e 	bx	lr
    3a2c:	40000a08 	.word	0x40000a08
    3a30:	40003980 	.word	0x40003980

00003a34 <I2C0MasterHandler>:
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void I2C0MasterHandler (void) __irq 
{
    3a34:	e1a0c00d 	mov	ip, sp
    3a38:	e92dd800 	push	{fp, ip, lr, pc}
    3a3c:	e24cb004 	sub	fp, ip, #4
    3a40:	e24dd004 	sub	sp, sp, #4
    BYTE StatValue;

    /* this handler deals with master read and master write only */
    StatValue = I20STAT;
    3a44:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    3a48:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3a4c:	e5933000 	ldr	r3, [r3]
    3a50:	e54b300d 	strb	r3, [fp, #-13]
    
    IENABLE;   
    switch ( StatValue )
    3a54:	e55b300d 	ldrb	r3, [fp, #-13]
    3a58:	e2433008 	sub	r3, r3, #8
    3a5c:	e3530050 	cmp	r3, #80	; 0x50
    3a60:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    3a64:	ea000106 	b	3e84 <I2C0MasterHandler+0x450>
    3a68:	00003bac 	.word	0x00003bac
    3a6c:	00003e84 	.word	0x00003e84
    3a70:	00003e84 	.word	0x00003e84
    3a74:	00003e84 	.word	0x00003e84
    3a78:	00003e84 	.word	0x00003e84
    3a7c:	00003e84 	.word	0x00003e84
    3a80:	00003e84 	.word	0x00003e84
    3a84:	00003e84 	.word	0x00003e84
    3a88:	00003be4 	.word	0x00003be4
    3a8c:	00003e84 	.word	0x00003e84
    3a90:	00003e84 	.word	0x00003e84
    3a94:	00003e84 	.word	0x00003e84
    3a98:	00003e84 	.word	0x00003e84
    3a9c:	00003e84 	.word	0x00003e84
    3aa0:	00003e84 	.word	0x00003e84
    3aa4:	00003e84 	.word	0x00003e84
    3aa8:	00003c3c 	.word	0x00003c3c
    3aac:	00003e84 	.word	0x00003e84
    3ab0:	00003e84 	.word	0x00003e84
    3ab4:	00003e84 	.word	0x00003e84
    3ab8:	00003e84 	.word	0x00003e84
    3abc:	00003e84 	.word	0x00003e84
    3ac0:	00003e84 	.word	0x00003e84
    3ac4:	00003e84 	.word	0x00003e84
    3ac8:	00003e60 	.word	0x00003e60
    3acc:	00003e84 	.word	0x00003e84
    3ad0:	00003e84 	.word	0x00003e84
    3ad4:	00003e84 	.word	0x00003e84
    3ad8:	00003e84 	.word	0x00003e84
    3adc:	00003e84 	.word	0x00003e84
    3ae0:	00003e84 	.word	0x00003e84
    3ae4:	00003e84 	.word	0x00003e84
    3ae8:	00003ca4 	.word	0x00003ca4
    3aec:	00003e84 	.word	0x00003e84
    3af0:	00003e84 	.word	0x00003e84
    3af4:	00003e84 	.word	0x00003e84
    3af8:	00003e84 	.word	0x00003e84
    3afc:	00003e84 	.word	0x00003e84
    3b00:	00003e84 	.word	0x00003e84
    3b04:	00003e84 	.word	0x00003e84
    3b08:	00003ca4 	.word	0x00003ca4
    3b0c:	00003e84 	.word	0x00003e84
    3b10:	00003e84 	.word	0x00003e84
    3b14:	00003e84 	.word	0x00003e84
    3b18:	00003e84 	.word	0x00003e84
    3b1c:	00003e84 	.word	0x00003e84
    3b20:	00003e84 	.word	0x00003e84
    3b24:	00003e84 	.word	0x00003e84
    3b28:	00003e84 	.word	0x00003e84
    3b2c:	00003e84 	.word	0x00003e84
    3b30:	00003e84 	.word	0x00003e84
    3b34:	00003e84 	.word	0x00003e84
    3b38:	00003e84 	.word	0x00003e84
    3b3c:	00003e84 	.word	0x00003e84
    3b40:	00003e84 	.word	0x00003e84
    3b44:	00003e84 	.word	0x00003e84
    3b48:	00003da8 	.word	0x00003da8
    3b4c:	00003e84 	.word	0x00003e84
    3b50:	00003e84 	.word	0x00003e84
    3b54:	00003e84 	.word	0x00003e84
    3b58:	00003e84 	.word	0x00003e84
    3b5c:	00003e84 	.word	0x00003e84
    3b60:	00003e84 	.word	0x00003e84
    3b64:	00003e84 	.word	0x00003e84
    3b68:	00003e60 	.word	0x00003e60
    3b6c:	00003e84 	.word	0x00003e84
    3b70:	00003e84 	.word	0x00003e84
    3b74:	00003e84 	.word	0x00003e84
    3b78:	00003e84 	.word	0x00003e84
    3b7c:	00003e84 	.word	0x00003e84
    3b80:	00003e84 	.word	0x00003e84
    3b84:	00003e84 	.word	0x00003e84
    3b88:	00003dc0 	.word	0x00003dc0
    3b8c:	00003e84 	.word	0x00003e84
    3b90:	00003e84 	.word	0x00003e84
    3b94:	00003e84 	.word	0x00003e84
    3b98:	00003e84 	.word	0x00003e84
    3b9c:	00003e84 	.word	0x00003e84
    3ba0:	00003e84 	.word	0x00003e84
    3ba4:	00003e84 	.word	0x00003e84
    3ba8:	00003dc0 	.word	0x00003dc0
    {
	case 0x08:			/* A Start condition is issued. */
	I20DAT = I2CMasterBuffer[0];
    3bac:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    3bb0:	e2822907 	add	r2, r2, #114688	; 0x1c000
    3bb4:	e59f32f8 	ldr	r3, [pc, #760]	; 3eb4 <I2C0MasterHandler+0x480>
    3bb8:	e5d33000 	ldrb	r3, [r3]
    3bbc:	e5823000 	str	r3, [r2]
	I20CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    3bc0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3bc4:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3bc8:	e2833018 	add	r3, r3, #24
    3bcc:	e3a02028 	mov	r2, #40	; 0x28
    3bd0:	e5832000 	str	r2, [r3]
	I2CMasterState = I2C_STARTED;
    3bd4:	e59f22dc 	ldr	r2, [pc, #732]	; 3eb8 <I2C0MasterHandler+0x484>
    3bd8:	e3a03001 	mov	r3, #1
    3bdc:	e5823000 	str	r3, [r2]
	break;
    3be0:	ea0000ac 	b	3e98 <I2C0MasterHandler+0x464>
	
	case 0x10:			/* A repeated started is issued */
	if (  I2CCmd == GET_DEVICE_ID || I2CCmd == GET_TEMPERATURE )
    3be4:	e59f32d0 	ldr	r3, [pc, #720]	; 3ebc <I2C0MasterHandler+0x488>
    3be8:	e5933000 	ldr	r3, [r3]
    3bec:	e3530001 	cmp	r3, #1
    3bf0:	0a000003 	beq	3c04 <I2C0MasterHandler+0x1d0>
    3bf4:	e59f32c0 	ldr	r3, [pc, #704]	; 3ebc <I2C0MasterHandler+0x488>
    3bf8:	e5933000 	ldr	r3, [r3]
    3bfc:	e3530002 	cmp	r3, #2
    3c00:	1a000004 	bne	3c18 <I2C0MasterHandler+0x1e4>
	{
	    I20DAT = I2CMasterBuffer[2];
    3c04:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    3c08:	e2822907 	add	r2, r2, #114688	; 0x1c000
    3c0c:	e59f32a0 	ldr	r3, [pc, #672]	; 3eb4 <I2C0MasterHandler+0x480>
    3c10:	e5d33002 	ldrb	r3, [r3, #2]
    3c14:	e5823000 	str	r3, [r2]
	}
	I20CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    3c18:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3c1c:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3c20:	e2833018 	add	r3, r3, #24
    3c24:	e3a02028 	mov	r2, #40	; 0x28
    3c28:	e5832000 	str	r2, [r3]
	I2CMasterState = I2C_RESTARTED;
    3c2c:	e59f2284 	ldr	r2, [pc, #644]	; 3eb8 <I2C0MasterHandler+0x484>
    3c30:	e3a03002 	mov	r3, #2
    3c34:	e5823000 	str	r3, [r2]
	break;
    3c38:	ea000096 	b	3e98 <I2C0MasterHandler+0x464>
	
	case 0x18:			/* Regardless, it's a ACK */
	if ( I2CMasterState == I2C_STARTED )
    3c3c:	e59f3274 	ldr	r3, [pc, #628]	; 3eb8 <I2C0MasterHandler+0x484>
    3c40:	e5933000 	ldr	r3, [r3]
    3c44:	e3530001 	cmp	r3, #1
    3c48:	1a00000f 	bne	3c8c <I2C0MasterHandler+0x258>
	{
	    I20DAT = I2CMasterBuffer[1+WrIndex];
    3c4c:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    3c50:	e2822907 	add	r2, r2, #114688	; 0x1c000
    3c54:	e59f3264 	ldr	r3, [pc, #612]	; 3ec0 <I2C0MasterHandler+0x48c>
    3c58:	e5933000 	ldr	r3, [r3]
    3c5c:	e2831001 	add	r1, r3, #1
    3c60:	e59f324c 	ldr	r3, [pc, #588]	; 3eb4 <I2C0MasterHandler+0x480>
    3c64:	e7d33001 	ldrb	r3, [r3, r1]
    3c68:	e5823000 	str	r3, [r2]
	    WrIndex++;
    3c6c:	e59f324c 	ldr	r3, [pc, #588]	; 3ec0 <I2C0MasterHandler+0x48c>
    3c70:	e5933000 	ldr	r3, [r3]
    3c74:	e2832001 	add	r2, r3, #1
    3c78:	e59f3240 	ldr	r3, [pc, #576]	; 3ec0 <I2C0MasterHandler+0x48c>
    3c7c:	e5832000 	str	r2, [r3]
	    I2CMasterState = DATA_ACK;
    3c80:	e59f2230 	ldr	r2, [pc, #560]	; 3eb8 <I2C0MasterHandler+0x484>
    3c84:	e3a03004 	mov	r3, #4
    3c88:	e5823000 	str	r3, [r2]
	}
	I20CONCLR = I2CONCLR_SIC;
    3c8c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3c90:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3c94:	e2833018 	add	r3, r3, #24
    3c98:	e3a02008 	mov	r2, #8
    3c9c:	e5832000 	str	r2, [r3]
	break;
    3ca0:	ea00007c 	b	3e98 <I2C0MasterHandler+0x464>
	
	case 0x28:	/* Data byte has been transmitted, regardless ACK or NACK */
	case 0x30:
	if ( WrIndex != I2CWriteLength )
    3ca4:	e59f3214 	ldr	r3, [pc, #532]	; 3ec0 <I2C0MasterHandler+0x48c>
    3ca8:	e5932000 	ldr	r2, [r3]
    3cac:	e59f3210 	ldr	r3, [pc, #528]	; 3ec4 <I2C0MasterHandler+0x490>
    3cb0:	e5933000 	ldr	r3, [r3]
    3cb4:	e1520003 	cmp	r2, r3
    3cb8:	0a000025 	beq	3d54 <I2C0MasterHandler+0x320>
	{   
	    I20DAT = I2CMasterBuffer[1+WrIndex]; /* this should be the last one */
    3cbc:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    3cc0:	e2822907 	add	r2, r2, #114688	; 0x1c000
    3cc4:	e59f31f4 	ldr	r3, [pc, #500]	; 3ec0 <I2C0MasterHandler+0x48c>
    3cc8:	e5933000 	ldr	r3, [r3]
    3ccc:	e2831001 	add	r1, r3, #1
    3cd0:	e59f31dc 	ldr	r3, [pc, #476]	; 3eb4 <I2C0MasterHandler+0x480>
    3cd4:	e7d33001 	ldrb	r3, [r3, r1]
    3cd8:	e5823000 	str	r3, [r2]
	    WrIndex++;
    3cdc:	e59f31dc 	ldr	r3, [pc, #476]	; 3ec0 <I2C0MasterHandler+0x48c>
    3ce0:	e5933000 	ldr	r3, [r3]
    3ce4:	e2832001 	add	r2, r3, #1
    3ce8:	e59f31d0 	ldr	r3, [pc, #464]	; 3ec0 <I2C0MasterHandler+0x48c>
    3cec:	e5832000 	str	r2, [r3]
	    if ( WrIndex != I2CWriteLength )
    3cf0:	e59f31c8 	ldr	r3, [pc, #456]	; 3ec0 <I2C0MasterHandler+0x48c>
    3cf4:	e5932000 	ldr	r2, [r3]
    3cf8:	e59f31c4 	ldr	r3, [pc, #452]	; 3ec4 <I2C0MasterHandler+0x490>
    3cfc:	e5933000 	ldr	r3, [r3]
    3d00:	e1520003 	cmp	r2, r3
    3d04:	0a000003 	beq	3d18 <I2C0MasterHandler+0x2e4>
	    {   
		I2CMasterState = DATA_ACK;
    3d08:	e59f21a8 	ldr	r2, [pc, #424]	; 3eb8 <I2C0MasterHandler+0x484>
    3d0c:	e3a03004 	mov	r3, #4
    3d10:	e5823000 	str	r3, [r2]
    3d14:	ea00001d 	b	3d90 <I2C0MasterHandler+0x35c>
	    }
	    else
	    {
		I2CMasterState = DATA_NACK;
    3d18:	e59f2198 	ldr	r2, [pc, #408]	; 3eb8 <I2C0MasterHandler+0x484>
    3d1c:	e3a03005 	mov	r3, #5
    3d20:	e5823000 	str	r3, [r2]
		if ( I2CReadLength != 0 )
    3d24:	e59f319c 	ldr	r3, [pc, #412]	; 3ec8 <I2C0MasterHandler+0x494>
    3d28:	e5933000 	ldr	r3, [r3]
    3d2c:	e3530000 	cmp	r3, #0
    3d30:	0a000016 	beq	3d90 <I2C0MasterHandler+0x35c>
		{
		    I20CONSET = I2CONSET_STA;	/* Set Repeated-start flag */
    3d34:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3d38:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3d3c:	e3a02020 	mov	r2, #32
    3d40:	e5832000 	str	r2, [r3]
		    I2CMasterState = I2C_REPEATED_START;
    3d44:	e59f216c 	ldr	r2, [pc, #364]	; 3eb8 <I2C0MasterHandler+0x484>
    3d48:	e3a03003 	mov	r3, #3
    3d4c:	e5823000 	str	r3, [r2]
    3d50:	ea00000e 	b	3d90 <I2C0MasterHandler+0x35c>
		}
	    }
	}
	else
	{
	    if ( I2CReadLength != 0 )
    3d54:	e59f316c 	ldr	r3, [pc, #364]	; 3ec8 <I2C0MasterHandler+0x494>
    3d58:	e5933000 	ldr	r3, [r3]
    3d5c:	e3530000 	cmp	r3, #0
    3d60:	0a000007 	beq	3d84 <I2C0MasterHandler+0x350>
	    {
		I20CONSET = I2CONSET_STA;	/* Set Repeated-start flag */
    3d64:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3d68:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3d6c:	e3a02020 	mov	r2, #32
    3d70:	e5832000 	str	r2, [r3]
		I2CMasterState = I2C_REPEATED_START;
    3d74:	e59f213c 	ldr	r2, [pc, #316]	; 3eb8 <I2C0MasterHandler+0x484>
    3d78:	e3a03003 	mov	r3, #3
    3d7c:	e5823000 	str	r3, [r2]
    3d80:	ea000002 	b	3d90 <I2C0MasterHandler+0x35c>
	    }
	    else
	    {
		I2CMasterState = DATA_NACK;
    3d84:	e59f212c 	ldr	r2, [pc, #300]	; 3eb8 <I2C0MasterHandler+0x484>
    3d88:	e3a03005 	mov	r3, #5
    3d8c:	e5823000 	str	r3, [r2]
	    }
	}
	I20CONCLR = I2CONCLR_SIC;
    3d90:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3d94:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3d98:	e2833018 	add	r3, r3, #24
    3d9c:	e3a02008 	mov	r2, #8
    3da0:	e5832000 	str	r2, [r3]
	break;
    3da4:	ea00003b 	b	3e98 <I2C0MasterHandler+0x464>
	
	case 0x40:	/* Master Receive, SLA_R has been sent */
	I20CONCLR = I2CONCLR_SIC;
    3da8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3dac:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3db0:	e2833018 	add	r3, r3, #24
    3db4:	e3a02008 	mov	r2, #8
    3db8:	e5832000 	str	r2, [r3]
	break;
    3dbc:	ea000035 	b	3e98 <I2C0MasterHandler+0x464>
	
	case 0x50:	/* Data byte has been received, regardless following ACK or NACK */
	case 0x58:
	I2CMasterBuffer[3+RdIndex] = I20DAT;
    3dc0:	e59f3104 	ldr	r3, [pc, #260]	; 3ecc <I2C0MasterHandler+0x498>
    3dc4:	e5933000 	ldr	r3, [r3]
    3dc8:	e2831003 	add	r1, r3, #3
    3dcc:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    3dd0:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3dd4:	e5933000 	ldr	r3, [r3]
    3dd8:	e20330ff 	and	r3, r3, #255	; 0xff
    3ddc:	e59f20d0 	ldr	r2, [pc, #208]	; 3eb4 <I2C0MasterHandler+0x480>
    3de0:	e7c23001 	strb	r3, [r2, r1]
	RdIndex++;
    3de4:	e59f30e0 	ldr	r3, [pc, #224]	; 3ecc <I2C0MasterHandler+0x498>
    3de8:	e5933000 	ldr	r3, [r3]
    3dec:	e2832001 	add	r2, r3, #1
    3df0:	e59f30d4 	ldr	r3, [pc, #212]	; 3ecc <I2C0MasterHandler+0x498>
    3df4:	e5832000 	str	r2, [r3]
	if ( RdIndex != I2CReadLength )
    3df8:	e59f30cc 	ldr	r3, [pc, #204]	; 3ecc <I2C0MasterHandler+0x498>
    3dfc:	e5932000 	ldr	r2, [r3]
    3e00:	e59f30c0 	ldr	r3, [pc, #192]	; 3ec8 <I2C0MasterHandler+0x494>
    3e04:	e5933000 	ldr	r3, [r3]
    3e08:	e1520003 	cmp	r2, r3
    3e0c:	0a000003 	beq	3e20 <I2C0MasterHandler+0x3ec>
	{   
	    I2CMasterState = DATA_ACK;
    3e10:	e59f20a0 	ldr	r2, [pc, #160]	; 3eb8 <I2C0MasterHandler+0x484>
    3e14:	e3a03004 	mov	r3, #4
    3e18:	e5823000 	str	r3, [r2]
    3e1c:	ea000005 	b	3e38 <I2C0MasterHandler+0x404>
	}
	else
	{
	    RdIndex = 0;
    3e20:	e59f20a4 	ldr	r2, [pc, #164]	; 3ecc <I2C0MasterHandler+0x498>
    3e24:	e3a03000 	mov	r3, #0
    3e28:	e5823000 	str	r3, [r2]
	    I2CMasterState = DATA_NACK;
    3e2c:	e59f2084 	ldr	r2, [pc, #132]	; 3eb8 <I2C0MasterHandler+0x484>
    3e30:	e3a03005 	mov	r3, #5
    3e34:	e5823000 	str	r3, [r2]
	}
	I20CONSET = I2CONSET_AA;	/* assert ACK after data is received */
    3e38:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3e3c:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3e40:	e3a02004 	mov	r2, #4
    3e44:	e5832000 	str	r2, [r3]
	I20CONCLR = I2CONCLR_SIC;
    3e48:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3e4c:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3e50:	e2833018 	add	r3, r3, #24
    3e54:	e3a02008 	mov	r2, #8
    3e58:	e5832000 	str	r2, [r3]
	break;
    3e5c:	ea00000d 	b	3e98 <I2C0MasterHandler+0x464>
	
	case 0x20:			/* regardless, it's a NACK */
	case 0x48:
	I20CONCLR = I2CONCLR_SIC;
    3e60:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3e64:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3e68:	e2833018 	add	r3, r3, #24
    3e6c:	e3a02008 	mov	r2, #8
    3e70:	e5832000 	str	r2, [r3]
	I2CMasterState = DATA_NACK;
    3e74:	e59f203c 	ldr	r2, [pc, #60]	; 3eb8 <I2C0MasterHandler+0x484>
    3e78:	e3a03005 	mov	r3, #5
    3e7c:	e5823000 	str	r3, [r2]
	break;
    3e80:	ea000004 	b	3e98 <I2C0MasterHandler+0x464>
	
	case 0x38:			/* Arbitration lost, in this example, we don't
					deal with multiple master situation */
	default:
	I20CONCLR = I2CONCLR_SIC;	
    3e84:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3e88:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3e8c:	e2833018 	add	r3, r3, #24
    3e90:	e3a02008 	mov	r2, #8
    3e94:	e5832000 	str	r2, [r3]
	break;
    }
    
    IDISABLE;
    VICVectAddr = 0;		/* Acknowledge Interrupt */
    3e98:	e3a03000 	mov	r3, #0
    3e9c:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    3ea0:	e3a02000 	mov	r2, #0
    3ea4:	e5832000 	str	r2, [r3]

}
    3ea8:	e24bd00c 	sub	sp, fp, #12
    3eac:	e89d6800 	ldm	sp, {fp, sp, lr}
    3eb0:	e12fff1e 	bx	lr
    3eb4:	40001be4 	.word	0x40001be4
    3eb8:	40000a0c 	.word	0x40000a0c
    3ebc:	40001c04 	.word	0x40001c04
    3ec0:	40000a1c 	.word	0x40000a1c
    3ec4:	40001c08 	.word	0x40001c08
    3ec8:	40001bbc 	.word	0x40001bbc
    3ecc:	40000a18 	.word	0x40000a18

00003ed0 <I2C0_send_motordata>:


void I2C0_send_motordata(void)
{
    3ed0:	e1a0c00d 	mov	ip, sp
    3ed4:	e92dd800 	push	{fp, ip, lr, pc}
    3ed8:	e24cb004 	sub	fp, ip, #4
	WrIndex=0;
    3edc:	e59f2080 	ldr	r2, [pc, #128]	; 3f64 <I2C0_send_motordata+0x94>
    3ee0:	e3a03000 	mov	r3, #0
    3ee4:	e5823000 	str	r3, [r2]
	RdIndex=0;
    3ee8:	e59f2078 	ldr	r2, [pc, #120]	; 3f68 <I2C0_send_motordata+0x98>
    3eec:	e3a03000 	mov	r3, #0
    3ef0:	e5823000 	str	r3, [r2]
	I2CWriteLength = 5;
    3ef4:	e59f2070 	ldr	r2, [pc, #112]	; 3f6c <I2C0_send_motordata+0x9c>
    3ef8:	e3a03005 	mov	r3, #5
    3efc:	e5823000 	str	r3, [r2]
	I2CReadLength = 0;
    3f00:	e59f2068 	ldr	r2, [pc, #104]	; 3f70 <I2C0_send_motordata+0xa0>
    3f04:	e3a03000 	mov	r3, #0
    3f08:	e5823000 	str	r3, [r2]
    I2CMasterBuffer[0] = 0x02;
    3f0c:	e59f2060 	ldr	r2, [pc, #96]	; 3f74 <I2C0_send_motordata+0xa4>
    3f10:	e3a03002 	mov	r3, #2
    3f14:	e5c23000 	strb	r3, [r2]
    I2CMasterBuffer[1] = 100;
    3f18:	e59f2054 	ldr	r2, [pc, #84]	; 3f74 <I2C0_send_motordata+0xa4>
    3f1c:	e3a03064 	mov	r3, #100	; 0x64
    3f20:	e5c23001 	strb	r3, [r2, #1]
    I2CMasterBuffer[2] = 100;
    3f24:	e59f2048 	ldr	r2, [pc, #72]	; 3f74 <I2C0_send_motordata+0xa4>
    3f28:	e3a03064 	mov	r3, #100	; 0x64
    3f2c:	e5c23002 	strb	r3, [r2, #2]
    I2CMasterBuffer[3] = 100;
    3f30:	e59f203c 	ldr	r2, [pc, #60]	; 3f74 <I2C0_send_motordata+0xa4>
    3f34:	e3a03064 	mov	r3, #100	; 0x64
    3f38:	e5c23003 	strb	r3, [r2, #3]
    I2CMasterBuffer[4] = 1;
    3f3c:	e59f2030 	ldr	r2, [pc, #48]	; 3f74 <I2C0_send_motordata+0xa4>
    3f40:	e3a03001 	mov	r3, #1
    3f44:	e5c23004 	strb	r3, [r2, #4]

    //I20CONSET = I2CONSET_STA;	/* Set Start flag */
    //if ( !I2CStart() ) I2CStop();
    I2CCmd = GET_TEMPERATURE;
    3f48:	e59f2028 	ldr	r2, [pc, #40]	; 3f78 <I2C0_send_motordata+0xa8>
    3f4c:	e3a03002 	mov	r3, #2
    3f50:	e5823000 	str	r3, [r2]
	I2CEngine();
    3f54:	eb000066 	bl	40f4 <I2CEngine>
}
    3f58:	e24bd00c 	sub	sp, fp, #12
    3f5c:	e89d6800 	ldm	sp, {fp, sp, lr}
    3f60:	e12fff1e 	bx	lr
    3f64:	40000a1c 	.word	0x40000a1c
    3f68:	40000a18 	.word	0x40000a18
    3f6c:	40001c08 	.word	0x40001c08
    3f70:	40001bbc 	.word	0x40001bbc
    3f74:	40001be4 	.word	0x40001be4
    3f78:	40001c04 	.word	0x40001c04

00003f7c <I2CStart>:
** parameters:			None
** Returned value:		true or false, return false if timed out
** 
*****************************************************************************/
unsigned int I2CStart( void )
{
    3f7c:	e1a0c00d 	mov	ip, sp
    3f80:	e92dd800 	push	{fp, ip, lr, pc}
    3f84:	e24cb004 	sub	fp, ip, #4
    3f88:	e24dd008 	sub	sp, sp, #8
    unsigned int timeout = 0;
    3f8c:	e3a03000 	mov	r3, #0
    3f90:	e50b3014 	str	r3, [fp, #-20]
    unsigned int returnValue = FALSE;
    3f94:	e3a03000 	mov	r3, #0
    3f98:	e50b3010 	str	r3, [fp, #-16]
 
    /*--- Issue a start condition ---*/
    I20CONSET = I2CONSET_STA;	/* Set Start flag */
    3f9c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3fa0:	e2833907 	add	r3, r3, #114688	; 0x1c000
    3fa4:	e3a02020 	mov	r2, #32
    3fa8:	e5832000 	str	r2, [r3]
    
    /*--- Wait until START transmitted ---*/
    while( 1 )
    {
	if ( I2CMasterState == I2C_STARTED )
    3fac:	e59f3058 	ldr	r3, [pc, #88]	; 400c <I2CStart+0x90>
    3fb0:	e5933000 	ldr	r3, [r3]
    3fb4:	e3530001 	cmp	r3, #1
    3fb8:	1a000002 	bne	3fc8 <I2CStart+0x4c>
	{
	    returnValue = TRUE;
    3fbc:	e3a03001 	mov	r3, #1
    3fc0:	e50b3010 	str	r3, [fp, #-16]
	    break;	
    3fc4:	ea00000b 	b	3ff8 <I2CStart+0x7c>
	}
	if ( timeout >= MAX_TIMEOUT )
    3fc8:	e51b2014 	ldr	r2, [fp, #-20]
    3fcc:	e3a03401 	mov	r3, #16777216	; 0x1000000
    3fd0:	e2433002 	sub	r3, r3, #2
    3fd4:	e1520003 	cmp	r2, r3
    3fd8:	9a000002 	bls	3fe8 <I2CStart+0x6c>
	{
	    returnValue = FALSE;
    3fdc:	e3a03000 	mov	r3, #0
    3fe0:	e50b3010 	str	r3, [fp, #-16]
	    break;
    3fe4:	ea000003 	b	3ff8 <I2CStart+0x7c>
	}
	timeout++;
    3fe8:	e51b3014 	ldr	r3, [fp, #-20]
    3fec:	e2833001 	add	r3, r3, #1
    3ff0:	e50b3014 	str	r3, [fp, #-20]
    }
    3ff4:	eaffffec 	b	3fac <I2CStart+0x30>
    return( returnValue );
    3ff8:	e51b3010 	ldr	r3, [fp, #-16]
}
    3ffc:	e1a00003 	mov	r0, r3
    4000:	e24bd00c 	sub	sp, fp, #12
    4004:	e89d6800 	ldm	sp, {fp, sp, lr}
    4008:	e12fff1e 	bx	lr
    400c:	40000a0c 	.word	0x40000a0c

00004010 <I2CStop>:
** parameters:			None
** Returned value:		true or never return
** 
*****************************************************************************/
unsigned int I2CStop( void )
{
    4010:	e1a0c00d 	mov	ip, sp
    4014:	e92dd800 	push	{fp, ip, lr, pc}
    4018:	e24cb004 	sub	fp, ip, #4
    I20CONSET = I2CONSET_STO;      /* Set Stop flag */ 
    401c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4020:	e2833907 	add	r3, r3, #114688	; 0x1c000
    4024:	e3a02010 	mov	r2, #16
    4028:	e5832000 	str	r2, [r3]
    I20CONCLR = I2CONCLR_SIC;  /* Clear SI flag */ 
    402c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4030:	e2833907 	add	r3, r3, #114688	; 0x1c000
    4034:	e2833018 	add	r3, r3, #24
    4038:	e3a02008 	mov	r2, #8
    403c:	e5832000 	str	r2, [r3]
            
    /*--- Wait for STOP detected ---*/
    while( I20CONSET & I2CONSET_STO );
    4040:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4044:	e2833907 	add	r3, r3, #114688	; 0x1c000
    4048:	e5933000 	ldr	r3, [r3]
    404c:	e2033010 	and	r3, r3, #16
    4050:	e3530000 	cmp	r3, #0
    4054:	1afffff9 	bne	4040 <I2CStop+0x30>
    return TRUE;
    4058:	e3a03001 	mov	r3, #1
}
    405c:	e1a00003 	mov	r0, r3
    4060:	e24bd00c 	sub	sp, fp, #12
    4064:	e89d6800 	ldm	sp, {fp, sp, lr}
    4068:	e12fff1e 	bx	lr

0000406c <I2CInit>:
** Returned value:		true or false, return false if the I2C
**				interrupt handler was not installed correctly
** 
*****************************************************************************/
void I2CInit( unsigned int I2cMode ) 
{
    406c:	e1a0c00d 	mov	ip, sp
    4070:	e92dd800 	push	{fp, ip, lr, pc}
    4074:	e24cb004 	sub	fp, ip, #4
    4078:	e24dd004 	sub	sp, sp, #4
    407c:	e50b0010 	str	r0, [fp, #-16]
    IODIR0|= 0x0C;	/* set port 0.2 and port 0.3 to output, high */
    4080:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    4084:	e282290a 	add	r2, r2, #163840	; 0x28000
    4088:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    408c:	e283390a 	add	r3, r3, #163840	; 0x28000
    4090:	e5933000 	ldr	r3, [r3]
    4094:	e383300c 	orr	r3, r3, #12
    4098:	e5823000 	str	r3, [r2]
    IOSET0 = 0x0C;
    409c:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    40a0:	e283390a 	add	r3, r3, #163840	; 0x28000
    40a4:	e3a0200c 	mov	r2, #12
    40a8:	e5832000 	str	r2, [r3]

    /*--- Clear flags ---*/
    I20CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;    
    40ac:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    40b0:	e2833907 	add	r3, r3, #114688	; 0x1c000
    40b4:	e2833018 	add	r3, r3, #24
    40b8:	e3a0206c 	mov	r2, #108	; 0x6c
    40bc:	e5832000 	str	r2, [r3]

    /*--- Reset registers ---*/
    I20SCLL   = I2SCLL_SCLL;
    40c0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    40c4:	e2833907 	add	r3, r3, #114688	; 0x1c000
    40c8:	e2833014 	add	r3, r3, #20
    40cc:	e3a02080 	mov	r2, #128	; 0x80
    40d0:	e5832000 	str	r2, [r3]
    I20SCLH   = I2SCLH_SCLH;
    40d4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    40d8:	e2833907 	add	r3, r3, #114688	; 0x1c000
    40dc:	e2833010 	add	r3, r3, #16
    40e0:	e3a02080 	mov	r2, #128	; 0x80
    40e4:	e5832000 	str	r2, [r3]
}
    40e8:	e24bd00c 	sub	sp, fp, #12
    40ec:	e89d6800 	ldm	sp, {fp, sp, lr}
    40f0:	e12fff1e 	bx	lr

000040f4 <I2CEngine>:
**				start condition can never be generated and
**				timed out. 
** 
*****************************************************************************/
unsigned int I2CEngine( void ) 
{
    40f4:	e1a0c00d 	mov	ip, sp
    40f8:	e92dd800 	push	{fp, ip, lr, pc}
    40fc:	e24cb004 	sub	fp, ip, #4
    4100:	e24dd004 	sub	sp, sp, #4
    I2CMasterState = I2C_IDLE;
    4104:	e59f206c 	ldr	r2, [pc, #108]	; 4178 <I2CEngine+0x84>
    4108:	e3a03000 	mov	r3, #0
    410c:	e5823000 	str	r3, [r2]
    RdIndex = 0;
    4110:	e59f2064 	ldr	r2, [pc, #100]	; 417c <I2CEngine+0x88>
    4114:	e3a03000 	mov	r3, #0
    4118:	e5823000 	str	r3, [r2]
    WrIndex = 0;
    411c:	e59f205c 	ldr	r2, [pc, #92]	; 4180 <I2CEngine+0x8c>
    4120:	e3a03000 	mov	r3, #0
    4124:	e5823000 	str	r3, [r2]
    if ( I2CStart() != TRUE )
    4128:	ebffff93 	bl	3f7c <I2CStart>
    412c:	e1a03000 	mov	r3, r0
    4130:	e3530001 	cmp	r3, #1
    4134:	0a000003 	beq	4148 <I2CEngine+0x54>
    {
		I2CStop();
    4138:	ebffffb4 	bl	4010 <I2CStop>
	return ( FALSE );
    413c:	e3a03000 	mov	r3, #0
    4140:	e50b3010 	str	r3, [fp, #-16]
    4144:	ea000006 	b	4164 <I2CEngine+0x70>
    }
    while ( 1 )
    {
	if ( I2CMasterState == DATA_NACK )
    4148:	e59f3028 	ldr	r3, [pc, #40]	; 4178 <I2CEngine+0x84>
    414c:	e5933000 	ldr	r3, [r3]
    4150:	e3530005 	cmp	r3, #5
    4154:	1afffffb 	bne	4148 <I2CEngine+0x54>
	{
	    I2CStop();
    4158:	ebffffac 	bl	4010 <I2CStop>
	    break;
	}
    }    
    return ( TRUE );      
    415c:	e3a03001 	mov	r3, #1
    4160:	e50b3010 	str	r3, [fp, #-16]
	if ( I2CMasterState == DATA_NACK )
	{
	    I2CStop();
	    break;
	}
    }    
    4164:	e51b3010 	ldr	r3, [fp, #-16]
    return ( TRUE );      
}
    4168:	e1a00003 	mov	r0, r3
    416c:	e24bd00c 	sub	sp, fp, #12
    4170:	e89d6800 	ldm	sp, {fp, sp, lr}
    4174:	e12fff1e 	bx	lr
    4178:	40000a0c 	.word	0x40000a0c
    417c:	40000a18 	.word	0x40000a18
    4180:	40000a1c 	.word	0x40000a1c

00004184 <I2C1MasterHandler>:
** Returned value:		None
**
*****************************************************************************/

void I2C1MasterHandler (void) __irq
{
    4184:	e1a0c00d 	mov	ip, sp
    4188:	e92dd800 	push	{fp, ip, lr, pc}
    418c:	e24cb004 	sub	fp, ip, #4
    4190:	e24dd004 	sub	sp, sp, #4
    BYTE StatValue;

    /* this handler deals with master read and master write only */
    StatValue = I21STAT;
    4194:	e3a0324e 	mov	r3, #-536870908	; 0xe0000004
    4198:	e2833917 	add	r3, r3, #376832	; 0x5c000
    419c:	e5933000 	ldr	r3, [r3]
    41a0:	e54b300d 	strb	r3, [fp, #-13]

    IENABLE;
    switch ( StatValue )
    41a4:	e55b300d 	ldrb	r3, [fp, #-13]
    41a8:	e2433008 	sub	r3, r3, #8
    41ac:	e3530028 	cmp	r3, #40	; 0x28
    41b0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    41b4:	ea00009e 	b	4434 <I2C1MasterHandler+0x2b0>
    41b8:	0000425c 	.word	0x0000425c
    41bc:	00004434 	.word	0x00004434
    41c0:	00004434 	.word	0x00004434
    41c4:	00004434 	.word	0x00004434
    41c8:	00004434 	.word	0x00004434
    41cc:	00004434 	.word	0x00004434
    41d0:	00004434 	.word	0x00004434
    41d4:	00004434 	.word	0x00004434
    41d8:	00004434 	.word	0x00004434
    41dc:	00004434 	.word	0x00004434
    41e0:	00004434 	.word	0x00004434
    41e4:	00004434 	.word	0x00004434
    41e8:	00004434 	.word	0x00004434
    41ec:	00004434 	.word	0x00004434
    41f0:	00004434 	.word	0x00004434
    41f4:	00004434 	.word	0x00004434
    41f8:	00004294 	.word	0x00004294
    41fc:	00004434 	.word	0x00004434
    4200:	00004434 	.word	0x00004434
    4204:	00004434 	.word	0x00004434
    4208:	00004434 	.word	0x00004434
    420c:	00004434 	.word	0x00004434
    4210:	00004434 	.word	0x00004434
    4214:	00004434 	.word	0x00004434
    4218:	000043e0 	.word	0x000043e0
    421c:	00004434 	.word	0x00004434
    4220:	00004434 	.word	0x00004434
    4224:	00004434 	.word	0x00004434
    4228:	00004434 	.word	0x00004434
    422c:	00004434 	.word	0x00004434
    4230:	00004434 	.word	0x00004434
    4234:	00004434 	.word	0x00004434
    4238:	000042f0 	.word	0x000042f0
    423c:	00004434 	.word	0x00004434
    4240:	00004434 	.word	0x00004434
    4244:	00004434 	.word	0x00004434
    4248:	00004434 	.word	0x00004434
    424c:	00004434 	.word	0x00004434
    4250:	00004434 	.word	0x00004434
    4254:	00004434 	.word	0x00004434
    4258:	000043a0 	.word	0x000043a0
    {
	case 0x08:			/* A Start condition is issued. */
	I21DAT = I2C1MasterBuffer[0];
    425c:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    4260:	e2822917 	add	r2, r2, #376832	; 0x5c000
    4264:	e59f31f8 	ldr	r3, [pc, #504]	; 4464 <I2C1MasterHandler+0x2e0>
    4268:	e5d33000 	ldrb	r3, [r3]
    426c:	e5823000 	str	r3, [r2]
	I21CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
    4270:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4274:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4278:	e2833018 	add	r3, r3, #24
    427c:	e3a02028 	mov	r2, #40	; 0x28
    4280:	e5832000 	str	r2, [r3]
	I2C1MasterState = I2C_STARTED;
    4284:	e59f21dc 	ldr	r2, [pc, #476]	; 4468 <I2C1MasterHandler+0x2e4>
    4288:	e3a03001 	mov	r3, #1
    428c:	e5823000 	str	r3, [r2]
	break;
    4290:	ea00006c 	b	4448 <I2C1MasterHandler+0x2c4>


	case 0x18:			/* Regardless, it's a ACK */
	if ( I2C1MasterState == I2C_STARTED )
    4294:	e59f31cc 	ldr	r3, [pc, #460]	; 4468 <I2C1MasterHandler+0x2e4>
    4298:	e5933000 	ldr	r3, [r3]
    429c:	e3530001 	cmp	r3, #1
    42a0:	1a00000c 	bne	42d8 <I2C1MasterHandler+0x154>
	{
	    I21DAT = I2C1MasterBuffer[1];
    42a4:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    42a8:	e2822917 	add	r2, r2, #376832	; 0x5c000
    42ac:	e59f31b0 	ldr	r3, [pc, #432]	; 4464 <I2C1MasterHandler+0x2e0>
    42b0:	e5d33001 	ldrb	r3, [r3, #1]
    42b4:	e5823000 	str	r3, [r2]
	    WrIndex1++;
    42b8:	e59f31ac 	ldr	r3, [pc, #428]	; 446c <I2C1MasterHandler+0x2e8>
    42bc:	e5933000 	ldr	r3, [r3]
    42c0:	e2832001 	add	r2, r3, #1
    42c4:	e59f31a0 	ldr	r3, [pc, #416]	; 446c <I2C1MasterHandler+0x2e8>
    42c8:	e5832000 	str	r2, [r3]
	    I2C1MasterState = DATA_ACK;
    42cc:	e59f2194 	ldr	r2, [pc, #404]	; 4468 <I2C1MasterHandler+0x2e4>
    42d0:	e3a03004 	mov	r3, #4
    42d4:	e5823000 	str	r3, [r2]
	}
	I21CONCLR = I2CONCLR_SIC;
    42d8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    42dc:	e2833917 	add	r3, r3, #376832	; 0x5c000
    42e0:	e2833018 	add	r3, r3, #24
    42e4:	e3a02008 	mov	r2, #8
    42e8:	e5832000 	str	r2, [r3]
	break;
    42ec:	ea000055 	b	4448 <I2C1MasterHandler+0x2c4>

	case 0x28:	/* Data byte has been transmitted, regardless ACK or NACK */
	if ( WrIndex1 < I2C1WriteLength )
    42f0:	e59f3174 	ldr	r3, [pc, #372]	; 446c <I2C1MasterHandler+0x2e8>
    42f4:	e5932000 	ldr	r2, [r3]
    42f8:	e59f3170 	ldr	r3, [pc, #368]	; 4470 <I2C1MasterHandler+0x2ec>
    42fc:	e5933000 	ldr	r3, [r3]
    4300:	e1520003 	cmp	r2, r3
    4304:	2a000010 	bcs	434c <I2C1MasterHandler+0x1c8>
	{
	    I21DAT = I2C1MasterBuffer[1+WrIndex1]; /* this should be the last one */
    4308:	e3a0228e 	mov	r2, #-536870904	; 0xe0000008
    430c:	e2822917 	add	r2, r2, #376832	; 0x5c000
    4310:	e59f3154 	ldr	r3, [pc, #340]	; 446c <I2C1MasterHandler+0x2e8>
    4314:	e5933000 	ldr	r3, [r3]
    4318:	e2831001 	add	r1, r3, #1
    431c:	e59f3140 	ldr	r3, [pc, #320]	; 4464 <I2C1MasterHandler+0x2e0>
    4320:	e7d33001 	ldrb	r3, [r3, r1]
    4324:	e5823000 	str	r3, [r2]
	    WrIndex1++;
    4328:	e59f313c 	ldr	r3, [pc, #316]	; 446c <I2C1MasterHandler+0x2e8>
    432c:	e5933000 	ldr	r3, [r3]
    4330:	e2832001 	add	r2, r3, #1
    4334:	e59f3130 	ldr	r3, [pc, #304]	; 446c <I2C1MasterHandler+0x2e8>
    4338:	e5832000 	str	r2, [r3]
	    I2C1MasterState = DATA_ACK;
    433c:	e59f2124 	ldr	r2, [pc, #292]	; 4468 <I2C1MasterHandler+0x2e4>
    4340:	e3a03004 	mov	r3, #4
    4344:	e5823000 	str	r3, [r2]
    4348:	ea00000b 	b	437c <I2C1MasterHandler+0x1f8>

	}
	else
	{
		I2C1MasterState = DATA_WRITE_DONE;
    434c:	e59f2114 	ldr	r2, [pc, #276]	; 4468 <I2C1MasterHandler+0x2e4>
    4350:	e3a03007 	mov	r3, #7
    4354:	e5823000 	str	r3, [r2]
		  	//I2C Stop
		I21CONSET = I2CONSET_STO;      /* Set Stop flag */
    4358:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    435c:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4360:	e3a02010 	mov	r2, #16
    4364:	e5832000 	str	r2, [r3]
		I21CONCLR = I2CONCLR_SIC;  /* Clear SI flag */
    4368:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    436c:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4370:	e2833018 	add	r3, r3, #24
    4374:	e3a02008 	mov	r2, #8
    4378:	e5832000 	str	r2, [r3]
	}
	I21CONCLR = I2CONCLR_SIC;
    437c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4380:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4384:	e2833018 	add	r3, r3, #24
    4388:	e3a02008 	mov	r2, #8
    438c:	e5832000 	str	r2, [r3]
	lastI2c1Error=I2C_ERROR_NONE;
    4390:	e59f20dc 	ldr	r2, [pc, #220]	; 4474 <I2C1MasterHandler+0x2f0>
    4394:	e3a03000 	mov	r3, #0
    4398:	e5c23000 	strb	r3, [r2]

	break;
    439c:	ea000029 	b	4448 <I2C1MasterHandler+0x2c4>

	case 0x30: //data has been transmited but NACK was received
		I2C1MasterState = DATA_NACK;
    43a0:	e59f20c0 	ldr	r2, [pc, #192]	; 4468 <I2C1MasterHandler+0x2e4>
    43a4:	e3a03005 	mov	r3, #5
    43a8:	e5823000 	str	r3, [r2]
		  	//I2C Stop
		I21CONSET = I2CONSET_STO;      /* Set Stop flag */
    43ac:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    43b0:	e2833917 	add	r3, r3, #376832	; 0x5c000
    43b4:	e3a02010 	mov	r2, #16
    43b8:	e5832000 	str	r2, [r3]
		I21CONCLR = I2CONCLR_SIC;  /* Clear SI flag */
    43bc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    43c0:	e2833917 	add	r3, r3, #376832	; 0x5c000
    43c4:	e2833018 	add	r3, r3, #24
    43c8:	e3a02008 	mov	r2, #8
    43cc:	e5832000 	str	r2, [r3]
		lastI2c1Error=I2C_ERROR_NACKAFTERWRITE;
    43d0:	e59f209c 	ldr	r2, [pc, #156]	; 4474 <I2C1MasterHandler+0x2f0>
    43d4:	e3a03002 	mov	r3, #2
    43d8:	e5c23000 	strb	r3, [r2]
	break;
    43dc:	ea000019 	b	4448 <I2C1MasterHandler+0x2c4>

	case 0x20: //NACK received, receiver not found
				I21CONCLR = I2CONCLR_SIC;
    43e0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    43e4:	e2833917 	add	r3, r3, #376832	; 0x5c000
    43e8:	e2833018 	add	r3, r3, #24
    43ec:	e3a02008 	mov	r2, #8
    43f0:	e5832000 	str	r2, [r3]
				I2C1MasterState = DATA_NACK;
    43f4:	e59f206c 	ldr	r2, [pc, #108]	; 4468 <I2C1MasterHandler+0x2e4>
    43f8:	e3a03005 	mov	r3, #5
    43fc:	e5823000 	str	r3, [r2]
				//I2C Stop
				I21CONSET = I2CONSET_STO;      /* Set Stop flag */
    4400:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4404:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4408:	e3a02010 	mov	r2, #16
    440c:	e5832000 	str	r2, [r3]
				I21CONCLR = I2CONCLR_SIC;  /* Clear SI flag */
    4410:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4414:	e2833917 	add	r3, r3, #376832	; 0x5c000
    4418:	e2833018 	add	r3, r3, #24
    441c:	e3a02008 	mov	r2, #8
    4420:	e5832000 	str	r2, [r3]
				lastI2c1Error=I2C_ERROR_NACKAFTERSTART;
    4424:	e59f2048 	ldr	r2, [pc, #72]	; 4474 <I2C1MasterHandler+0x2f0>
    4428:	e3a03001 	mov	r3, #1
    442c:	e5c23000 	strb	r3, [r2]
	break;
    4430:	ea000004 	b	4448 <I2C1MasterHandler+0x2c4>



	default:
	I21CONCLR = I2CONCLR_SIC;
    4434:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4438:	e2833917 	add	r3, r3, #376832	; 0x5c000
    443c:	e2833018 	add	r3, r3, #24
    4440:	e3a02008 	mov	r2, #8
    4444:	e5832000 	str	r2, [r3]
	break;
    }

    IDISABLE;
    VICVectAddr = 0;		/* Acknowledge Interrupt */
    4448:	e3a03000 	mov	r3, #0
    444c:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    4450:	e3a02000 	mov	r2, #0
    4454:	e5832000 	str	r2, [r3]

}
    4458:	e24bd00c 	sub	sp, fp, #12
    445c:	e89d6800 	ldm	sp, {fp, sp, lr}
    4460:	e12fff1e 	bx	lr
    4464:	40001c10 	.word	0x40001c10
    4468:	40000a20 	.word	0x40000a20
    446c:	40000a28 	.word	0x40000a28
    4470:	40001c0c 	.word	0x40001c0c
    4474:	40000a2c 	.word	0x40000a2c

00004478 <fireFlyLedHandler>:

void fireFlyLedHandler(void) 	//called with 100Hz
{
    4478:	e1a0c00d 	mov	ip, sp
    447c:	e92dd800 	push	{fp, ip, lr, pc}
    4480:	e24cb004 	sub	fp, ip, #4
    4484:	e24dd00c 	sub	sp, sp, #12
	static unsigned short cnt=0;
	static unsigned char mfsCnt=0;
	static unsigned char mincCnt=0;
	static unsigned char ceCnt=0;

	errorFlags=0;
    4488:	e3a03000 	mov	r3, #0
    448c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee


	if (LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_GYROS)
    4490:	e59f3af4 	ldr	r3, [pc, #2804]	; 4f8c <fireFlyLedHandler+0xb14>
    4494:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    4498:	e1a03803 	lsl	r3, r3, #16
    449c:	e1a03823 	lsr	r3, r3, #16
    44a0:	e2033c02 	and	r3, r3, #512	; 0x200
    44a4:	e3530000 	cmp	r3, #0
    44a8:	0a000002 	beq	44b8 <fireFlyLedHandler+0x40>
	{
		errorFlags|=0x02;
    44ac:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    44b0:	e3833002 	orr	r3, r3, #2
    44b4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	}

	if (LL_1khz_attitude_data.flightMode&FM_CALIBRATION_ERROR_ACC)
    44b8:	e59f3acc 	ldr	r3, [pc, #2764]	; 4f8c <fireFlyLedHandler+0xb14>
    44bc:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    44c0:	e1a03803 	lsl	r3, r3, #16
    44c4:	e1a03823 	lsr	r3, r3, #16
    44c8:	e2033b01 	and	r3, r3, #1024	; 0x400
    44cc:	e3530000 	cmp	r3, #0
    44d0:	0a000002 	beq	44e0 <fireFlyLedHandler+0x68>
	{
		errorFlags|=0x04;
    44d4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    44d8:	e3833004 	orr	r3, r3, #4
    44dc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	}

	if ((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE) && (ceCnt<5))
    44e0:	e59f3aa4 	ldr	r3, [pc, #2724]	; 4f8c <fireFlyLedHandler+0xb14>
    44e4:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    44e8:	e1a03803 	lsl	r3, r3, #16
    44ec:	e1a03823 	lsr	r3, r3, #16
    44f0:	e2033010 	and	r3, r3, #16
    44f4:	e3530000 	cmp	r3, #0
    44f8:	0a000006 	beq	4518 <fireFlyLedHandler+0xa0>
    44fc:	e59f3a8c 	ldr	r3, [pc, #2700]	; 4f90 <fireFlyLedHandler+0xb18>
    4500:	e5d33000 	ldrb	r3, [r3]
    4504:	e3530004 	cmp	r3, #4
    4508:	8a000002 	bhi	4518 <fireFlyLedHandler+0xa0>
	{
		errorFlags|=0x08;
    450c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4510:	e3833008 	orr	r3, r3, #8
    4514:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	}

	if ((LL_1khz_attitude_data.flightMode&FM_MAG_INCLINATION_ERROR) && (mincCnt<5) && ((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE)==0))
    4518:	e59f3a6c 	ldr	r3, [pc, #2668]	; 4f8c <fireFlyLedHandler+0xb14>
    451c:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    4520:	e1a03803 	lsl	r3, r3, #16
    4524:	e1a03843 	asr	r3, r3, #16
    4528:	e3530000 	cmp	r3, #0
    452c:	aa00000d 	bge	4568 <fireFlyLedHandler+0xf0>
    4530:	e59f3a5c 	ldr	r3, [pc, #2652]	; 4f94 <fireFlyLedHandler+0xb1c>
    4534:	e5d33000 	ldrb	r3, [r3]
    4538:	e3530004 	cmp	r3, #4
    453c:	8a000009 	bhi	4568 <fireFlyLedHandler+0xf0>
    4540:	e59f3a44 	ldr	r3, [pc, #2628]	; 4f8c <fireFlyLedHandler+0xb14>
    4544:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    4548:	e1a03803 	lsl	r3, r3, #16
    454c:	e1a03823 	lsr	r3, r3, #16
    4550:	e2033010 	and	r3, r3, #16
    4554:	e3530000 	cmp	r3, #0
    4558:	1a000002 	bne	4568 <fireFlyLedHandler+0xf0>
	{
		errorFlags|=0x10;
    455c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4560:	e3833010 	orr	r3, r3, #16
    4564:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	}

	if ((LL_1khz_attitude_data.flightMode&FM_MAG_FIELD_STRENGTH_ERROR) && (mfsCnt<5) && ((LL_1khz_attitude_data.flightMode&FM_COMPASS_FAILURE)==0))
    4568:	e59f3a1c 	ldr	r3, [pc, #2588]	; 4f8c <fireFlyLedHandler+0xb14>
    456c:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    4570:	e1a03803 	lsl	r3, r3, #16
    4574:	e1a03823 	lsr	r3, r3, #16
    4578:	e2033901 	and	r3, r3, #16384	; 0x4000
    457c:	e3530000 	cmp	r3, #0
    4580:	0a00000d 	beq	45bc <fireFlyLedHandler+0x144>
    4584:	e59f3a0c 	ldr	r3, [pc, #2572]	; 4f98 <fireFlyLedHandler+0xb20>
    4588:	e5d33000 	ldrb	r3, [r3]
    458c:	e3530004 	cmp	r3, #4
    4590:	8a000009 	bhi	45bc <fireFlyLedHandler+0x144>
    4594:	e59f39f0 	ldr	r3, [pc, #2544]	; 4f8c <fireFlyLedHandler+0xb14>
    4598:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
    459c:	e1a03803 	lsl	r3, r3, #16
    45a0:	e1a03823 	lsr	r3, r3, #16
    45a4:	e2033010 	and	r3, r3, #16
    45a8:	e3530000 	cmp	r3, #0
    45ac:	1a000002 	bne	45bc <fireFlyLedHandler+0x144>
	{
		errorFlags|=0x20;
    45b0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    45b4:	e3833020 	orr	r3, r3, #32
    45b8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	}

	cnt++;
    45bc:	e59f39d8 	ldr	r3, [pc, #2520]	; 4f9c <fireFlyLedHandler+0xb24>
    45c0:	e1d330b0 	ldrh	r3, [r3]
    45c4:	e2833001 	add	r3, r3, #1
    45c8:	e1a03803 	lsl	r3, r3, #16
    45cc:	e1a02823 	lsr	r2, r3, #16
    45d0:	e59f39c4 	ldr	r3, [pc, #2500]	; 4f9c <fireFlyLedHandler+0xb24>
    45d4:	e1c320b0 	strh	r2, [r3]
	if (cnt==200)
    45d8:	e59f39bc 	ldr	r3, [pc, #2492]	; 4f9c <fireFlyLedHandler+0xb24>
    45dc:	e1d330b0 	ldrh	r3, [r3]
    45e0:	e35300c8 	cmp	r3, #200	; 0xc8
    45e4:	1a000002 	bne	45f4 <fireFlyLedHandler+0x17c>
		cnt=0;
    45e8:	e59f39ac 	ldr	r3, [pc, #2476]	; 4f9c <fireFlyLedHandler+0xb24>
    45ec:	e3a02000 	mov	r2, #0
    45f0:	e1c320b0 	strh	r2, [r3]
	if(!SYSTEM_initialized)
    45f4:	e59f39a4 	ldr	r3, [pc, #2468]	; 4fa0 <fireFlyLedHandler+0xb28>
    45f8:	e5d33000 	ldrb	r3, [r3]
    45fc:	e20330ff 	and	r3, r3, #255	; 0xff
    4600:	e3530000 	cmp	r3, #0
    4604:	1a000009 	bne	4630 <fireFlyLedHandler+0x1b8>
		{
			errorFlags|=0x01;
    4608:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    460c:	e3833001 	orr	r3, r3, #1
    4610:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
			r=0;
    4614:	e3a03000 	mov	r3, #0
    4618:	e54b3015 	strb	r3, [fp, #-21]
			g=0;
    461c:	e3a03000 	mov	r3, #0
    4620:	e54b3014 	strb	r3, [fp, #-20]
			b=255;
    4624:	e3e03000 	mvn	r3, #0
    4628:	e54b3013 	strb	r3, [fp, #-19]
    462c:	ea000080 	b	4834 <fireFlyLedHandler+0x3bc>
		}
	else if (((GPS_Data.status&0xFF)==3) && (HL_Status.battery_voltage_1>11000))
    4630:	e59f396c 	ldr	r3, [pc, #2412]	; 4fa4 <fireFlyLedHandler+0xb2c>
    4634:	e5933028 	ldr	r3, [r3, #40]	; 0x28
    4638:	e20330ff 	and	r3, r3, #255	; 0xff
    463c:	e3530003 	cmp	r3, #3
    4640:	1a00000e 	bne	4680 <fireFlyLedHandler+0x208>
    4644:	e59f395c 	ldr	r3, [pc, #2396]	; 4fa8 <fireFlyLedHandler+0xb30>
    4648:	e1d330b0 	ldrh	r3, [r3]
    464c:	e1a03803 	lsl	r3, r3, #16
    4650:	e1a02843 	asr	r2, r3, #16
    4654:	e3a03dab 	mov	r3, #10944	; 0x2ac0
    4658:	e2833038 	add	r3, r3, #56	; 0x38
    465c:	e1520003 	cmp	r2, r3
    4660:	da000006 	ble	4680 <fireFlyLedHandler+0x208>
    {
    	r=0;
    4664:	e3a03000 	mov	r3, #0
    4668:	e54b3015 	strb	r3, [fp, #-21]
    	g=255;
    466c:	e3e03000 	mvn	r3, #0
    4670:	e54b3014 	strb	r3, [fp, #-20]
    	b=0;
    4674:	e3a03000 	mov	r3, #0
    4678:	e54b3013 	strb	r3, [fp, #-19]
			errorFlags|=0x01;
			r=0;
			g=0;
			b=255;
		}
	else if (((GPS_Data.status&0xFF)==3) && (HL_Status.battery_voltage_1>11000))
    467c:	ea00006c 	b	4834 <fireFlyLedHandler+0x3bc>
    {
    	r=0;
    	g=255;
    	b=0;
    }else if (HL_Status.battery_voltage_1<11000)
    4680:	e59f3920 	ldr	r3, [pc, #2336]	; 4fa8 <fireFlyLedHandler+0xb30>
    4684:	e1d330b0 	ldrh	r3, [r3]
    4688:	e1a03803 	lsl	r3, r3, #16
    468c:	e1a02843 	asr	r2, r3, #16
    4690:	e3a03dab 	mov	r3, #10944	; 0x2ac0
    4694:	e2833037 	add	r3, r3, #55	; 0x37
    4698:	e1520003 	cmp	r2, r3
    469c:	ca000059 	bgt	4808 <fireFlyLedHandler+0x390>
    {
    	unsigned int dim=11000-HL_Status.battery_voltage_1;
    46a0:	e59f3900 	ldr	r3, [pc, #2304]	; 4fa8 <fireFlyLedHandler+0xb30>
    46a4:	e1d330b0 	ldrh	r3, [r3]
    46a8:	e1a03803 	lsl	r3, r3, #16
    46ac:	e1a03843 	asr	r3, r3, #16
    46b0:	e2633dab 	rsb	r3, r3, #10944	; 0x2ac0
    46b4:	e2833038 	add	r3, r3, #56	; 0x38
    46b8:	e50b3010 	str	r3, [fp, #-16]

    	if (dim>1000)
    46bc:	e51b3010 	ldr	r3, [fp, #-16]
    46c0:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    46c4:	9a000001 	bls	46d0 <fireFlyLedHandler+0x258>
    		dim=1000;
    46c8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    46cc:	e50b3010 	str	r3, [fp, #-16]


    	if ((GPS_Data.status&0xFF)!=3)
    46d0:	e59f38cc 	ldr	r3, [pc, #2252]	; 4fa4 <fireFlyLedHandler+0xb2c>
    46d4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
    46d8:	e20330ff 	and	r3, r3, #255	; 0xff
    46dc:	e3530003 	cmp	r3, #3
    46e0:	0a000018 	beq	4748 <fireFlyLedHandler+0x2d0>
    	{
        	dim/=6;
    46e4:	e51b2010 	ldr	r2, [fp, #-16]
    46e8:	e59f38bc 	ldr	r3, [pc, #2236]	; 4fac <fireFlyLedHandler+0xb34>
    46ec:	e0831392 	umull	r1, r3, r2, r3
    46f0:	e1a03123 	lsr	r3, r3, #2
    46f4:	e50b3010 	str	r3, [fp, #-16]
        	dim+=10;
    46f8:	e51b3010 	ldr	r3, [fp, #-16]
    46fc:	e283300a 	add	r3, r3, #10
    4700:	e50b3010 	str	r3, [fp, #-16]
        	if (dim>165)
    4704:	e51b3010 	ldr	r3, [fp, #-16]
    4708:	e35300a5 	cmp	r3, #165	; 0xa5
    470c:	9a000001 	bls	4718 <fireFlyLedHandler+0x2a0>
        		dim=165;
    4710:	e3a030a5 	mov	r3, #165	; 0xa5
    4714:	e50b3010 	str	r3, [fp, #-16]
    		r=255;
    4718:	e3e03000 	mvn	r3, #0
    471c:	e54b3015 	strb	r3, [fp, #-21]
    		g=165-dim;
    4720:	e51b3010 	ldr	r3, [fp, #-16]
    4724:	e20330ff 	and	r3, r3, #255	; 0xff
    4728:	e26334ff 	rsb	r3, r3, #-16777216	; 0xff000000
    472c:	e28338ff 	add	r3, r3, #16711680	; 0xff0000
    4730:	e2833cff 	add	r3, r3, #65280	; 0xff00
    4734:	e28330a5 	add	r3, r3, #165	; 0xa5
    4738:	e54b3014 	strb	r3, [fp, #-20]
    		b=0;
    473c:	e3a03000 	mov	r3, #0
    4740:	e54b3013 	strb	r3, [fp, #-19]
    4744:	ea000012 	b	4794 <fireFlyLedHandler+0x31c>
    	}else
    	{
        	dim/=4;
    4748:	e51b3010 	ldr	r3, [fp, #-16]
    474c:	e1a03123 	lsr	r3, r3, #2
    4750:	e50b3010 	str	r3, [fp, #-16]
        	dim+=5;
    4754:	e51b3010 	ldr	r3, [fp, #-16]
    4758:	e2833005 	add	r3, r3, #5
    475c:	e50b3010 	str	r3, [fp, #-16]
        	if (dim>255)
    4760:	e51b3010 	ldr	r3, [fp, #-16]
    4764:	e35300ff 	cmp	r3, #255	; 0xff
    4768:	9a000001 	bls	4774 <fireFlyLedHandler+0x2fc>
        		dim=255;
    476c:	e3a030ff 	mov	r3, #255	; 0xff
    4770:	e50b3010 	str	r3, [fp, #-16]
    		r=dim;
    4774:	e51b3010 	ldr	r3, [fp, #-16]
    4778:	e54b3015 	strb	r3, [fp, #-21]
    		g=255-dim;
    477c:	e51b3010 	ldr	r3, [fp, #-16]
    4780:	e20330ff 	and	r3, r3, #255	; 0xff
    4784:	e1e03003 	mvn	r3, r3
    4788:	e54b3014 	strb	r3, [fp, #-20]
    		b=0;
    478c:	e3a03000 	mov	r3, #0
    4790:	e54b3013 	strb	r3, [fp, #-19]
    	}
    	if(HL_Status.battery_voltage_1<10300) //blink LED @ very low voltage
    4794:	e59f380c 	ldr	r3, [pc, #2060]	; 4fa8 <fireFlyLedHandler+0xb30>
    4798:	e1d330b0 	ldrh	r3, [r3]
    479c:	e1a03803 	lsl	r3, r3, #16
    47a0:	e1a02843 	asr	r2, r3, #16
    47a4:	e3a03b0a 	mov	r3, #10240	; 0x2800
    47a8:	e283303b 	add	r3, r3, #59	; 0x3b
    47ac:	e1520003 	cmp	r2, r3
    47b0:	ca00001f 	bgt	4834 <fireFlyLedHandler+0x3bc>
    	{
    		if((cnt%20)<10) {r=0;g=0;b=0;};
    47b4:	e59f37e0 	ldr	r3, [pc, #2016]	; 4f9c <fireFlyLedHandler+0xb24>
    47b8:	e1d310b0 	ldrh	r1, [r3]
    47bc:	e59f37ec 	ldr	r3, [pc, #2028]	; 4fb0 <fireFlyLedHandler+0xb38>
    47c0:	e0832391 	umull	r2, r3, r1, r3
    47c4:	e1a02223 	lsr	r2, r3, #4
    47c8:	e1a03002 	mov	r3, r2
    47cc:	e1a03103 	lsl	r3, r3, #2
    47d0:	e0833002 	add	r3, r3, r2
    47d4:	e1a03103 	lsl	r3, r3, #2
    47d8:	e0633001 	rsb	r3, r3, r1
    47dc:	e1a03803 	lsl	r3, r3, #16
    47e0:	e1a03823 	lsr	r3, r3, #16
    47e4:	e3530009 	cmp	r3, #9
    47e8:	8a000011 	bhi	4834 <fireFlyLedHandler+0x3bc>
    47ec:	e3a03000 	mov	r3, #0
    47f0:	e54b3015 	strb	r3, [fp, #-21]
    47f4:	e3a03000 	mov	r3, #0
    47f8:	e54b3014 	strb	r3, [fp, #-20]
    47fc:	e3a03000 	mov	r3, #0
    4800:	e54b3013 	strb	r3, [fp, #-19]
    4804:	ea00000a 	b	4834 <fireFlyLedHandler+0x3bc>
    	}
    }else if ((GPS_Data.status&0xFF)!=3)
    4808:	e59f3794 	ldr	r3, [pc, #1940]	; 4fa4 <fireFlyLedHandler+0xb2c>
    480c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
    4810:	e20330ff 	and	r3, r3, #255	; 0xff
    4814:	e3530003 	cmp	r3, #3
    4818:	0a000005 	beq	4834 <fireFlyLedHandler+0x3bc>
    {
    	r=255;
    481c:	e3e03000 	mvn	r3, #0
    4820:	e54b3015 	strb	r3, [fp, #-21]
    	g=165;
    4824:	e3e0305a 	mvn	r3, #90	; 0x5a
    4828:	e54b3014 	strb	r3, [fp, #-20]
    	b=0;
    482c:	e3a03000 	mov	r3, #0
    4830:	e54b3013 	strb	r3, [fp, #-19]
    }

	if ((cnt<=100) && (errorFlags))
    4834:	e59f3760 	ldr	r3, [pc, #1888]	; 4f9c <fireFlyLedHandler+0xb24>
    4838:	e1d330b0 	ldrh	r3, [r3]
    483c:	e3530064 	cmp	r3, #100	; 0x64
    4840:	8a000008 	bhi	4868 <fireFlyLedHandler+0x3f0>
    4844:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4848:	e3530000 	cmp	r3, #0
    484c:	0a000005 	beq	4868 <fireFlyLedHandler+0x3f0>
	{
		r=g=b=0;
    4850:	e3a03000 	mov	r3, #0
    4854:	e54b3013 	strb	r3, [fp, #-19]
    4858:	e55b3013 	ldrb	r3, [fp, #-19]
    485c:	e54b3014 	strb	r3, [fp, #-20]
    4860:	e55b3014 	ldrb	r3, [fp, #-20]
    4864:	e54b3015 	strb	r3, [fp, #-21]
	}

	if ((cnt>100) && (cnt<200) && (errorFlags)) //always signal errors for 1 second.
    4868:	e59f372c 	ldr	r3, [pc, #1836]	; 4f9c <fireFlyLedHandler+0xb24>
    486c:	e1d330b0 	ldrh	r3, [r3]
    4870:	e3530064 	cmp	r3, #100	; 0x64
    4874:	9a0001ba 	bls	4f64 <fireFlyLedHandler+0xaec>
    4878:	e59f371c 	ldr	r3, [pc, #1820]	; 4f9c <fireFlyLedHandler+0xb24>
    487c:	e1d330b0 	ldrh	r3, [r3]
    4880:	e35300c7 	cmp	r3, #199	; 0xc7
    4884:	8a0001b6 	bhi	4f64 <fireFlyLedHandler+0xaec>
    4888:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    488c:	e3530000 	cmp	r3, #0
    4890:	0a0001b3 	beq	4f64 <fireFlyLedHandler+0xaec>
	{
		//overwrite rgb with error signaling
		if (errorFlags & 0x02) //gyros
    4894:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4898:	e2033002 	and	r3, r3, #2
    489c:	e3530000 	cmp	r3, #0
    48a0:	0a000027 	beq	4944 <fireFlyLedHandler+0x4cc>
		{
			if (cnt < 125) {
    48a4:	e59f36f0 	ldr	r3, [pc, #1776]	; 4f9c <fireFlyLedHandler+0xb24>
    48a8:	e1d330b0 	ldrh	r3, [r3]
    48ac:	e353007c 	cmp	r3, #124	; 0x7c
    48b0:	8a000006 	bhi	48d0 <fireFlyLedHandler+0x458>
				r = 0;
    48b4:	e3a03000 	mov	r3, #0
    48b8:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    48bc:	e3a03000 	mov	r3, #0
    48c0:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    48c4:	e3a03000 	mov	r3, #0
    48c8:	e54b3013 	strb	r3, [fp, #-19]
    48cc:	ea0001a4 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 150) {
    48d0:	e59f36c4 	ldr	r3, [pc, #1732]	; 4f9c <fireFlyLedHandler+0xb24>
    48d4:	e1d330b0 	ldrh	r3, [r3]
    48d8:	e3530095 	cmp	r3, #149	; 0x95
    48dc:	8a000006 	bhi	48fc <fireFlyLedHandler+0x484>
				r = 255;
    48e0:	e3e03000 	mvn	r3, #0
    48e4:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    48e8:	e3a03000 	mov	r3, #0
    48ec:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    48f0:	e3a03000 	mov	r3, #0
    48f4:	e54b3013 	strb	r3, [fp, #-19]
    48f8:	ea000199 	b	4f64 <fireFlyLedHandler+0xaec>

			} else if (cnt < 175) {
    48fc:	e59f3698 	ldr	r3, [pc, #1688]	; 4f9c <fireFlyLedHandler+0xb24>
    4900:	e1d330b0 	ldrh	r3, [r3]
    4904:	e35300ae 	cmp	r3, #174	; 0xae
    4908:	8a000006 	bhi	4928 <fireFlyLedHandler+0x4b0>
				r = 0;
    490c:	e3a03000 	mov	r3, #0
    4910:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4914:	e3a03000 	mov	r3, #0
    4918:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    491c:	e3a03000 	mov	r3, #0
    4920:	e54b3013 	strb	r3, [fp, #-19]
    4924:	ea00018e 	b	4f64 <fireFlyLedHandler+0xaec>
			} else {
				r = 255;
    4928:	e3e03000 	mvn	r3, #0
    492c:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4930:	e3a03000 	mov	r3, #0
    4934:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4938:	e3a03000 	mov	r3, #0
    493c:	e54b3013 	strb	r3, [fp, #-19]
    4940:	ea000187 	b	4f64 <fireFlyLedHandler+0xaec>
			}
		} else if (errorFlags & 0x04) {
    4944:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4948:	e2033004 	and	r3, r3, #4
    494c:	e3530000 	cmp	r3, #0
    4950:	0a000031 	beq	4a1c <fireFlyLedHandler+0x5a4>
			//blink 3x
			if (cnt < 125) {
    4954:	e59f3640 	ldr	r3, [pc, #1600]	; 4f9c <fireFlyLedHandler+0xb24>
    4958:	e1d330b0 	ldrh	r3, [r3]
    495c:	e353007c 	cmp	r3, #124	; 0x7c
    4960:	8a000005 	bhi	497c <fireFlyLedHandler+0x504>
				r = 255;
    4964:	e3e03000 	mvn	r3, #0
    4968:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    496c:	e3a03000 	mov	r3, #0
    4970:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4974:	e3a03000 	mov	r3, #0
    4978:	e54b3013 	strb	r3, [fp, #-19]
			}
			if (cnt < 140) {
    497c:	e59f3618 	ldr	r3, [pc, #1560]	; 4f9c <fireFlyLedHandler+0xb24>
    4980:	e1d330b0 	ldrh	r3, [r3]
    4984:	e353008b 	cmp	r3, #139	; 0x8b
    4988:	8a000006 	bhi	49a8 <fireFlyLedHandler+0x530>
				r = 0;
    498c:	e3a03000 	mov	r3, #0
    4990:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4994:	e3a03000 	mov	r3, #0
    4998:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    499c:	e3a03000 	mov	r3, #0
    49a0:	e54b3013 	strb	r3, [fp, #-19]
    49a4:	ea00016e 	b	4f64 <fireFlyLedHandler+0xaec>

			} else if (cnt < 175) {
    49a8:	e59f35ec 	ldr	r3, [pc, #1516]	; 4f9c <fireFlyLedHandler+0xb24>
    49ac:	e1d330b0 	ldrh	r3, [r3]
    49b0:	e35300ae 	cmp	r3, #174	; 0xae
    49b4:	8a000006 	bhi	49d4 <fireFlyLedHandler+0x55c>
				r = 255;
    49b8:	e3e03000 	mvn	r3, #0
    49bc:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    49c0:	e3a03000 	mov	r3, #0
    49c4:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    49c8:	e3a03000 	mov	r3, #0
    49cc:	e54b3013 	strb	r3, [fp, #-19]
    49d0:	ea000163 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 190) {
    49d4:	e59f35c0 	ldr	r3, [pc, #1472]	; 4f9c <fireFlyLedHandler+0xb24>
    49d8:	e1d330b0 	ldrh	r3, [r3]
    49dc:	e35300bd 	cmp	r3, #189	; 0xbd
    49e0:	8a000006 	bhi	4a00 <fireFlyLedHandler+0x588>
				r = 0;
    49e4:	e3a03000 	mov	r3, #0
    49e8:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    49ec:	e3a03000 	mov	r3, #0
    49f0:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    49f4:	e3a03000 	mov	r3, #0
    49f8:	e54b3013 	strb	r3, [fp, #-19]
    49fc:	ea000158 	b	4f64 <fireFlyLedHandler+0xaec>
			} else {
				r = 255;
    4a00:	e3e03000 	mvn	r3, #0
    4a04:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4a08:	e3a03000 	mov	r3, #0
    4a0c:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4a10:	e3a03000 	mov	r3, #0
    4a14:	e54b3013 	strb	r3, [fp, #-19]
    4a18:	ea000151 	b	4f64 <fireFlyLedHandler+0xaec>
			}
		} else if (errorFlags & 0x08) {
    4a1c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4a20:	e2033008 	and	r3, r3, #8
    4a24:	e3530000 	cmp	r3, #0
    4a28:	0a000082 	beq	4c38 <fireFlyLedHandler+0x7c0>
			if ((ceCnt < 5) && (cnt == 195))
    4a2c:	e59f355c 	ldr	r3, [pc, #1372]	; 4f90 <fireFlyLedHandler+0xb18>
    4a30:	e5d33000 	ldrb	r3, [r3]
    4a34:	e3530004 	cmp	r3, #4
    4a38:	8a000009 	bhi	4a64 <fireFlyLedHandler+0x5ec>
    4a3c:	e59f3558 	ldr	r3, [pc, #1368]	; 4f9c <fireFlyLedHandler+0xb24>
    4a40:	e1d330b0 	ldrh	r3, [r3]
    4a44:	e35300c3 	cmp	r3, #195	; 0xc3
    4a48:	1a000005 	bne	4a64 <fireFlyLedHandler+0x5ec>
				ceCnt++;
    4a4c:	e59f353c 	ldr	r3, [pc, #1340]	; 4f90 <fireFlyLedHandler+0xb18>
    4a50:	e5d33000 	ldrb	r3, [r3]
    4a54:	e2833001 	add	r3, r3, #1
    4a58:	e20330ff 	and	r3, r3, #255	; 0xff
    4a5c:	e59f252c 	ldr	r2, [pc, #1324]	; 4f90 <fireFlyLedHandler+0xb18>
    4a60:	e5c23000 	strb	r3, [r2]
			//blink 5x
			if (cnt < 105) {
    4a64:	e59f3530 	ldr	r3, [pc, #1328]	; 4f9c <fireFlyLedHandler+0xb24>
    4a68:	e1d330b0 	ldrh	r3, [r3]
    4a6c:	e3530068 	cmp	r3, #104	; 0x68
    4a70:	8a000006 	bhi	4a90 <fireFlyLedHandler+0x618>
				r = 0;
    4a74:	e3a03000 	mov	r3, #0
    4a78:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4a7c:	e3a03000 	mov	r3, #0
    4a80:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4a84:	e3a03000 	mov	r3, #0
    4a88:	e54b3013 	strb	r3, [fp, #-19]
    4a8c:	ea000134 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 115) {
    4a90:	e59f3504 	ldr	r3, [pc, #1284]	; 4f9c <fireFlyLedHandler+0xb24>
    4a94:	e1d330b0 	ldrh	r3, [r3]
    4a98:	e3530072 	cmp	r3, #114	; 0x72
    4a9c:	8a000006 	bhi	4abc <fireFlyLedHandler+0x644>
				r = 255;
    4aa0:	e3e03000 	mvn	r3, #0
    4aa4:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4aa8:	e3a03000 	mov	r3, #0
    4aac:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4ab0:	e3a03000 	mov	r3, #0
    4ab4:	e54b3013 	strb	r3, [fp, #-19]
    4ab8:	ea000129 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 125) {
    4abc:	e59f34d8 	ldr	r3, [pc, #1240]	; 4f9c <fireFlyLedHandler+0xb24>
    4ac0:	e1d330b0 	ldrh	r3, [r3]
    4ac4:	e353007c 	cmp	r3, #124	; 0x7c
    4ac8:	8a000006 	bhi	4ae8 <fireFlyLedHandler+0x670>
				r = 0;
    4acc:	e3a03000 	mov	r3, #0
    4ad0:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4ad4:	e3a03000 	mov	r3, #0
    4ad8:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4adc:	e3a03000 	mov	r3, #0
    4ae0:	e54b3013 	strb	r3, [fp, #-19]
    4ae4:	ea00011e 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 135) {
    4ae8:	e59f34ac 	ldr	r3, [pc, #1196]	; 4f9c <fireFlyLedHandler+0xb24>
    4aec:	e1d330b0 	ldrh	r3, [r3]
    4af0:	e3530086 	cmp	r3, #134	; 0x86
    4af4:	8a000006 	bhi	4b14 <fireFlyLedHandler+0x69c>
				r = 255;
    4af8:	e3e03000 	mvn	r3, #0
    4afc:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4b00:	e3a03000 	mov	r3, #0
    4b04:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4b08:	e3a03000 	mov	r3, #0
    4b0c:	e54b3013 	strb	r3, [fp, #-19]
    4b10:	ea000113 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 145) {
    4b14:	e59f3480 	ldr	r3, [pc, #1152]	; 4f9c <fireFlyLedHandler+0xb24>
    4b18:	e1d330b0 	ldrh	r3, [r3]
    4b1c:	e3530090 	cmp	r3, #144	; 0x90
    4b20:	8a000006 	bhi	4b40 <fireFlyLedHandler+0x6c8>
				r = 0;
    4b24:	e3a03000 	mov	r3, #0
    4b28:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4b2c:	e3a03000 	mov	r3, #0
    4b30:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4b34:	e3a03000 	mov	r3, #0
    4b38:	e54b3013 	strb	r3, [fp, #-19]
    4b3c:	ea000108 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 155) {
    4b40:	e59f3454 	ldr	r3, [pc, #1108]	; 4f9c <fireFlyLedHandler+0xb24>
    4b44:	e1d330b0 	ldrh	r3, [r3]
    4b48:	e353009a 	cmp	r3, #154	; 0x9a
    4b4c:	8a000006 	bhi	4b6c <fireFlyLedHandler+0x6f4>
				r = 255;
    4b50:	e3e03000 	mvn	r3, #0
    4b54:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4b58:	e3a03000 	mov	r3, #0
    4b5c:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4b60:	e3a03000 	mov	r3, #0
    4b64:	e54b3013 	strb	r3, [fp, #-19]
    4b68:	ea0000fd 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 165) {
    4b6c:	e59f3428 	ldr	r3, [pc, #1064]	; 4f9c <fireFlyLedHandler+0xb24>
    4b70:	e1d330b0 	ldrh	r3, [r3]
    4b74:	e35300a4 	cmp	r3, #164	; 0xa4
    4b78:	8a000006 	bhi	4b98 <fireFlyLedHandler+0x720>
				r = 0;
    4b7c:	e3a03000 	mov	r3, #0
    4b80:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4b84:	e3a03000 	mov	r3, #0
    4b88:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4b8c:	e3a03000 	mov	r3, #0
    4b90:	e54b3013 	strb	r3, [fp, #-19]
    4b94:	ea0000f2 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 175) {
    4b98:	e59f33fc 	ldr	r3, [pc, #1020]	; 4f9c <fireFlyLedHandler+0xb24>
    4b9c:	e1d330b0 	ldrh	r3, [r3]
    4ba0:	e35300ae 	cmp	r3, #174	; 0xae
    4ba4:	8a000006 	bhi	4bc4 <fireFlyLedHandler+0x74c>
				r = 255;
    4ba8:	e3e03000 	mvn	r3, #0
    4bac:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4bb0:	e3a03000 	mov	r3, #0
    4bb4:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4bb8:	e3a03000 	mov	r3, #0
    4bbc:	e54b3013 	strb	r3, [fp, #-19]
    4bc0:	ea0000e7 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 185) {
    4bc4:	e59f33d0 	ldr	r3, [pc, #976]	; 4f9c <fireFlyLedHandler+0xb24>
    4bc8:	e1d330b0 	ldrh	r3, [r3]
    4bcc:	e35300b8 	cmp	r3, #184	; 0xb8
    4bd0:	8a000006 	bhi	4bf0 <fireFlyLedHandler+0x778>
				r = 0;
    4bd4:	e3a03000 	mov	r3, #0
    4bd8:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4bdc:	e3a03000 	mov	r3, #0
    4be0:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4be4:	e3a03000 	mov	r3, #0
    4be8:	e54b3013 	strb	r3, [fp, #-19]
    4bec:	ea0000dc 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 195) {
    4bf0:	e59f33a4 	ldr	r3, [pc, #932]	; 4f9c <fireFlyLedHandler+0xb24>
    4bf4:	e1d330b0 	ldrh	r3, [r3]
    4bf8:	e35300c2 	cmp	r3, #194	; 0xc2
    4bfc:	8a000006 	bhi	4c1c <fireFlyLedHandler+0x7a4>
				r = 255;
    4c00:	e3e03000 	mvn	r3, #0
    4c04:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4c08:	e3a03000 	mov	r3, #0
    4c0c:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4c10:	e3a03000 	mov	r3, #0
    4c14:	e54b3013 	strb	r3, [fp, #-19]
    4c18:	ea0000d1 	b	4f64 <fireFlyLedHandler+0xaec>
			} else {
				r = 0;
    4c1c:	e3a03000 	mov	r3, #0
    4c20:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4c24:	e3a03000 	mov	r3, #0
    4c28:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4c2c:	e3a03000 	mov	r3, #0
    4c30:	e54b3013 	strb	r3, [fp, #-19]
    4c34:	ea0000ca 	b	4f64 <fireFlyLedHandler+0xaec>
			}
		} else if (errorFlags & 0x10) {
    4c38:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4c3c:	e2033010 	and	r3, r3, #16
    4c40:	e3530000 	cmp	r3, #0
    4c44:	0a00006c 	beq	4dfc <fireFlyLedHandler+0x984>
			if ((mincCnt < 5) && (cnt == 195))
    4c48:	e59f3344 	ldr	r3, [pc, #836]	; 4f94 <fireFlyLedHandler+0xb1c>
    4c4c:	e5d33000 	ldrb	r3, [r3]
    4c50:	e3530004 	cmp	r3, #4
    4c54:	8a000009 	bhi	4c80 <fireFlyLedHandler+0x808>
    4c58:	e59f333c 	ldr	r3, [pc, #828]	; 4f9c <fireFlyLedHandler+0xb24>
    4c5c:	e1d330b0 	ldrh	r3, [r3]
    4c60:	e35300c3 	cmp	r3, #195	; 0xc3
    4c64:	1a000005 	bne	4c80 <fireFlyLedHandler+0x808>
				mincCnt++;
    4c68:	e59f3324 	ldr	r3, [pc, #804]	; 4f94 <fireFlyLedHandler+0xb1c>
    4c6c:	e5d33000 	ldrb	r3, [r3]
    4c70:	e2833001 	add	r3, r3, #1
    4c74:	e20330ff 	and	r3, r3, #255	; 0xff
    4c78:	e59f2314 	ldr	r2, [pc, #788]	; 4f94 <fireFlyLedHandler+0xb1c>
    4c7c:	e5c23000 	strb	r3, [r2]
			//blink 4x
			if (cnt < 105) {
    4c80:	e59f3314 	ldr	r3, [pc, #788]	; 4f9c <fireFlyLedHandler+0xb24>
    4c84:	e1d330b0 	ldrh	r3, [r3]
    4c88:	e3530068 	cmp	r3, #104	; 0x68
    4c8c:	8a000006 	bhi	4cac <fireFlyLedHandler+0x834>
				r = 0;
    4c90:	e3a03000 	mov	r3, #0
    4c94:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4c98:	e3a03000 	mov	r3, #0
    4c9c:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4ca0:	e3a03000 	mov	r3, #0
    4ca4:	e54b3013 	strb	r3, [fp, #-19]
    4ca8:	ea0000ad 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 115) {
    4cac:	e59f32e8 	ldr	r3, [pc, #744]	; 4f9c <fireFlyLedHandler+0xb24>
    4cb0:	e1d330b0 	ldrh	r3, [r3]
    4cb4:	e3530072 	cmp	r3, #114	; 0x72
    4cb8:	8a000006 	bhi	4cd8 <fireFlyLedHandler+0x860>
				r = 0;
    4cbc:	e3a03000 	mov	r3, #0
    4cc0:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4cc4:	e3a03000 	mov	r3, #0
    4cc8:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4ccc:	e3e03000 	mvn	r3, #0
    4cd0:	e54b3013 	strb	r3, [fp, #-19]
    4cd4:	ea0000a2 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 125) {
    4cd8:	e59f32bc 	ldr	r3, [pc, #700]	; 4f9c <fireFlyLedHandler+0xb24>
    4cdc:	e1d330b0 	ldrh	r3, [r3]
    4ce0:	e353007c 	cmp	r3, #124	; 0x7c
    4ce4:	8a000006 	bhi	4d04 <fireFlyLedHandler+0x88c>
				r = 0;
    4ce8:	e3a03000 	mov	r3, #0
    4cec:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4cf0:	e3a03000 	mov	r3, #0
    4cf4:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4cf8:	e3a03000 	mov	r3, #0
    4cfc:	e54b3013 	strb	r3, [fp, #-19]
    4d00:	ea000097 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 135) {
    4d04:	e59f3290 	ldr	r3, [pc, #656]	; 4f9c <fireFlyLedHandler+0xb24>
    4d08:	e1d330b0 	ldrh	r3, [r3]
    4d0c:	e3530086 	cmp	r3, #134	; 0x86
    4d10:	8a000006 	bhi	4d30 <fireFlyLedHandler+0x8b8>
				r = 0;
    4d14:	e3a03000 	mov	r3, #0
    4d18:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4d1c:	e3a03000 	mov	r3, #0
    4d20:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4d24:	e3e03000 	mvn	r3, #0
    4d28:	e54b3013 	strb	r3, [fp, #-19]
    4d2c:	ea00008c 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 145) {
    4d30:	e59f3264 	ldr	r3, [pc, #612]	; 4f9c <fireFlyLedHandler+0xb24>
    4d34:	e1d330b0 	ldrh	r3, [r3]
    4d38:	e3530090 	cmp	r3, #144	; 0x90
    4d3c:	8a000006 	bhi	4d5c <fireFlyLedHandler+0x8e4>
				r = 0;
    4d40:	e3a03000 	mov	r3, #0
    4d44:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4d48:	e3a03000 	mov	r3, #0
    4d4c:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4d50:	e3a03000 	mov	r3, #0
    4d54:	e54b3013 	strb	r3, [fp, #-19]
    4d58:	ea000081 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 155) {
    4d5c:	e59f3238 	ldr	r3, [pc, #568]	; 4f9c <fireFlyLedHandler+0xb24>
    4d60:	e1d330b0 	ldrh	r3, [r3]
    4d64:	e353009a 	cmp	r3, #154	; 0x9a
    4d68:	8a000006 	bhi	4d88 <fireFlyLedHandler+0x910>
				r = 0;
    4d6c:	e3a03000 	mov	r3, #0
    4d70:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4d74:	e3a03000 	mov	r3, #0
    4d78:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4d7c:	e3e03000 	mvn	r3, #0
    4d80:	e54b3013 	strb	r3, [fp, #-19]
    4d84:	ea000076 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 165) {
    4d88:	e59f320c 	ldr	r3, [pc, #524]	; 4f9c <fireFlyLedHandler+0xb24>
    4d8c:	e1d330b0 	ldrh	r3, [r3]
    4d90:	e35300a4 	cmp	r3, #164	; 0xa4
    4d94:	8a000006 	bhi	4db4 <fireFlyLedHandler+0x93c>
				r = 0;
    4d98:	e3a03000 	mov	r3, #0
    4d9c:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4da0:	e3a03000 	mov	r3, #0
    4da4:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4da8:	e3a03000 	mov	r3, #0
    4dac:	e54b3013 	strb	r3, [fp, #-19]
    4db0:	ea00006b 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 175) {
    4db4:	e59f31e0 	ldr	r3, [pc, #480]	; 4f9c <fireFlyLedHandler+0xb24>
    4db8:	e1d330b0 	ldrh	r3, [r3]
    4dbc:	e35300ae 	cmp	r3, #174	; 0xae
    4dc0:	8a000006 	bhi	4de0 <fireFlyLedHandler+0x968>
				r = 0;
    4dc4:	e3a03000 	mov	r3, #0
    4dc8:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4dcc:	e3a03000 	mov	r3, #0
    4dd0:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4dd4:	e3e03000 	mvn	r3, #0
    4dd8:	e54b3013 	strb	r3, [fp, #-19]
    4ddc:	ea000060 	b	4f64 <fireFlyLedHandler+0xaec>
			} else {
				r = 0;
    4de0:	e3a03000 	mov	r3, #0
    4de4:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4de8:	e3a03000 	mov	r3, #0
    4dec:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4df0:	e3a03000 	mov	r3, #0
    4df4:	e54b3013 	strb	r3, [fp, #-19]
    4df8:	ea000059 	b	4f64 <fireFlyLedHandler+0xaec>
			}
		} else if (errorFlags & 0x20) {
    4dfc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    4e00:	e2033020 	and	r3, r3, #32
    4e04:	e3530000 	cmp	r3, #0
    4e08:	0a000055 	beq	4f64 <fireFlyLedHandler+0xaec>
			if ((mfsCnt < 5) && (cnt == 195))
    4e0c:	e59f3184 	ldr	r3, [pc, #388]	; 4f98 <fireFlyLedHandler+0xb20>
    4e10:	e5d33000 	ldrb	r3, [r3]
    4e14:	e3530004 	cmp	r3, #4
    4e18:	8a000009 	bhi	4e44 <fireFlyLedHandler+0x9cc>
    4e1c:	e59f3178 	ldr	r3, [pc, #376]	; 4f9c <fireFlyLedHandler+0xb24>
    4e20:	e1d330b0 	ldrh	r3, [r3]
    4e24:	e35300c3 	cmp	r3, #195	; 0xc3
    4e28:	1a000005 	bne	4e44 <fireFlyLedHandler+0x9cc>
				mfsCnt++;
    4e2c:	e59f3164 	ldr	r3, [pc, #356]	; 4f98 <fireFlyLedHandler+0xb20>
    4e30:	e5d33000 	ldrb	r3, [r3]
    4e34:	e2833001 	add	r3, r3, #1
    4e38:	e20330ff 	and	r3, r3, #255	; 0xff
    4e3c:	e59f2154 	ldr	r2, [pc, #340]	; 4f98 <fireFlyLedHandler+0xb20>
    4e40:	e5c23000 	strb	r3, [r2]
			//blink 3x !
			if (cnt < 105) {
    4e44:	e59f3150 	ldr	r3, [pc, #336]	; 4f9c <fireFlyLedHandler+0xb24>
    4e48:	e1d330b0 	ldrh	r3, [r3]
    4e4c:	e3530068 	cmp	r3, #104	; 0x68
    4e50:	8a000006 	bhi	4e70 <fireFlyLedHandler+0x9f8>
				r = 0;
    4e54:	e3a03000 	mov	r3, #0
    4e58:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4e5c:	e3a03000 	mov	r3, #0
    4e60:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4e64:	e3a03000 	mov	r3, #0
    4e68:	e54b3013 	strb	r3, [fp, #-19]
    4e6c:	ea00003c 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 115) {
    4e70:	e59f3124 	ldr	r3, [pc, #292]	; 4f9c <fireFlyLedHandler+0xb24>
    4e74:	e1d330b0 	ldrh	r3, [r3]
    4e78:	e3530072 	cmp	r3, #114	; 0x72
    4e7c:	8a000006 	bhi	4e9c <fireFlyLedHandler+0xa24>
				r = 0;
    4e80:	e3a03000 	mov	r3, #0
    4e84:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4e88:	e3a03000 	mov	r3, #0
    4e8c:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4e90:	e3e03000 	mvn	r3, #0
    4e94:	e54b3013 	strb	r3, [fp, #-19]
    4e98:	ea000031 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 125) {
    4e9c:	e59f30f8 	ldr	r3, [pc, #248]	; 4f9c <fireFlyLedHandler+0xb24>
    4ea0:	e1d330b0 	ldrh	r3, [r3]
    4ea4:	e353007c 	cmp	r3, #124	; 0x7c
    4ea8:	8a000006 	bhi	4ec8 <fireFlyLedHandler+0xa50>
				r = 0;
    4eac:	e3a03000 	mov	r3, #0
    4eb0:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4eb4:	e3a03000 	mov	r3, #0
    4eb8:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4ebc:	e3a03000 	mov	r3, #0
    4ec0:	e54b3013 	strb	r3, [fp, #-19]
    4ec4:	ea000026 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 135) {
    4ec8:	e59f30cc 	ldr	r3, [pc, #204]	; 4f9c <fireFlyLedHandler+0xb24>
    4ecc:	e1d330b0 	ldrh	r3, [r3]
    4ed0:	e3530086 	cmp	r3, #134	; 0x86
    4ed4:	8a000006 	bhi	4ef4 <fireFlyLedHandler+0xa7c>
				r = 0;
    4ed8:	e3a03000 	mov	r3, #0
    4edc:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4ee0:	e3a03000 	mov	r3, #0
    4ee4:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4ee8:	e3e03000 	mvn	r3, #0
    4eec:	e54b3013 	strb	r3, [fp, #-19]
    4ef0:	ea00001b 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 145) {
    4ef4:	e59f30a0 	ldr	r3, [pc, #160]	; 4f9c <fireFlyLedHandler+0xb24>
    4ef8:	e1d330b0 	ldrh	r3, [r3]
    4efc:	e3530090 	cmp	r3, #144	; 0x90
    4f00:	8a000006 	bhi	4f20 <fireFlyLedHandler+0xaa8>
				r = 0;
    4f04:	e3a03000 	mov	r3, #0
    4f08:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4f0c:	e3a03000 	mov	r3, #0
    4f10:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4f14:	e3a03000 	mov	r3, #0
    4f18:	e54b3013 	strb	r3, [fp, #-19]
    4f1c:	ea000010 	b	4f64 <fireFlyLedHandler+0xaec>
			} else if (cnt < 155) {
    4f20:	e59f3074 	ldr	r3, [pc, #116]	; 4f9c <fireFlyLedHandler+0xb24>
    4f24:	e1d330b0 	ldrh	r3, [r3]
    4f28:	e353009a 	cmp	r3, #154	; 0x9a
    4f2c:	8a000006 	bhi	4f4c <fireFlyLedHandler+0xad4>
				r = 0;
    4f30:	e3a03000 	mov	r3, #0
    4f34:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4f38:	e3a03000 	mov	r3, #0
    4f3c:	e54b3014 	strb	r3, [fp, #-20]
				b = 255;
    4f40:	e3e03000 	mvn	r3, #0
    4f44:	e54b3013 	strb	r3, [fp, #-19]
    4f48:	ea000005 	b	4f64 <fireFlyLedHandler+0xaec>
			} else {
				r = 0;
    4f4c:	e3a03000 	mov	r3, #0
    4f50:	e54b3015 	strb	r3, [fp, #-21]
				g = 0;
    4f54:	e3a03000 	mov	r3, #0
    4f58:	e54b3014 	strb	r3, [fp, #-20]
				b = 0;
    4f5c:	e3a03000 	mov	r3, #0
    4f60:	e54b3013 	strb	r3, [fp, #-19]
			}
		}
	}
	I2C1_setRGBLed(r, g, b);
    4f64:	e55b3015 	ldrb	r3, [fp, #-21]
    4f68:	e55b2014 	ldrb	r2, [fp, #-20]
    4f6c:	e55bc013 	ldrb	ip, [fp, #-19]
    4f70:	e1a00003 	mov	r0, r3
    4f74:	e1a01002 	mov	r1, r2
    4f78:	e1a0200c 	mov	r2, ip
    4f7c:	eb00000c 	bl	4fb4 <I2C1_setRGBLed>
}
    4f80:	e24bd00c 	sub	sp, fp, #12
    4f84:	e89d6800 	ldm	sp, {fp, sp, lr}
    4f88:	e12fff1e 	bx	lr
    4f8c:	4000170c 	.word	0x4000170c
    4f90:	40000a2d 	.word	0x40000a2d
    4f94:	40000a2e 	.word	0x40000a2e
    4f98:	40000a2f 	.word	0x40000a2f
    4f9c:	40000a30 	.word	0x40000a30
    4fa0:	400009ec 	.word	0x400009ec
    4fa4:	400017c0 	.word	0x400017c0
    4fa8:	400019b8 	.word	0x400019b8
    4fac:	aaaaaaab 	.word	0xaaaaaaab
    4fb0:	cccccccd 	.word	0xcccccccd

00004fb4 <I2C1_setRGBLed>:


char I2C1_setRGBLed(unsigned char r,unsigned char g,unsigned char b)
{
    4fb4:	e1a0c00d 	mov	ip, sp
    4fb8:	e92dd800 	push	{fp, ip, lr, pc}
    4fbc:	e24cb004 	sub	fp, ip, #4
    4fc0:	e24dd010 	sub	sp, sp, #16
    4fc4:	e1a03000 	mov	r3, r0
    4fc8:	e54b3010 	strb	r3, [fp, #-16]
    4fcc:	e1a03001 	mov	r3, r1
    4fd0:	e54b3014 	strb	r3, [fp, #-20]
    4fd4:	e1a03002 	mov	r3, r2
    4fd8:	e54b3018 	strb	r3, [fp, #-24]
	if ((I2C1MasterState == I2C_STARTED) || (I2C1MasterState == DATA_ACK))
    4fdc:	e59f30c4 	ldr	r3, [pc, #196]	; 50a8 <I2C1_setRGBLed+0xf4>
    4fe0:	e5933000 	ldr	r3, [r3]
    4fe4:	e3530001 	cmp	r3, #1
    4fe8:	0a000003 	beq	4ffc <I2C1_setRGBLed+0x48>
    4fec:	e59f30b4 	ldr	r3, [pc, #180]	; 50a8 <I2C1_setRGBLed+0xf4>
    4ff0:	e5933000 	ldr	r3, [r3]
    4ff4:	e3530004 	cmp	r3, #4
    4ff8:	1a000002 	bne	5008 <I2C1_setRGBLed+0x54>
			return I2C_ERROR_BUSBUSY;
    4ffc:	e3a03005 	mov	r3, #5
    5000:	e50b301c 	str	r3, [fp, #-28]
    5004:	ea000022 	b	5094 <I2C1_setRGBLed+0xe0>
	WrIndex1=0;
    5008:	e59f209c 	ldr	r2, [pc, #156]	; 50ac <I2C1_setRGBLed+0xf8>
    500c:	e3a03000 	mov	r3, #0
    5010:	e5823000 	str	r3, [r2]
	I2C1WriteLength = 5;
    5014:	e59f2094 	ldr	r2, [pc, #148]	; 50b0 <I2C1_setRGBLed+0xfc>
    5018:	e3a03005 	mov	r3, #5
    501c:	e5823000 	str	r3, [r2]
	I2C1MasterBuffer[0] = 0x30;	//address
    5020:	e59f208c 	ldr	r2, [pc, #140]	; 50b4 <I2C1_setRGBLed+0x100>
    5024:	e3a03030 	mov	r3, #48	; 0x30
    5028:	e5c23000 	strb	r3, [r2]
    I2C1MasterBuffer[1] = r;
    502c:	e59f2080 	ldr	r2, [pc, #128]	; 50b4 <I2C1_setRGBLed+0x100>
    5030:	e55b3010 	ldrb	r3, [fp, #-16]
    5034:	e5c23001 	strb	r3, [r2, #1]
    I2C1MasterBuffer[2] = g;
    5038:	e59f2074 	ldr	r2, [pc, #116]	; 50b4 <I2C1_setRGBLed+0x100>
    503c:	e55b3014 	ldrb	r3, [fp, #-20]
    5040:	e5c23002 	strb	r3, [r2, #2]
    I2C1MasterBuffer[3] = b;
    5044:	e59f2068 	ldr	r2, [pc, #104]	; 50b4 <I2C1_setRGBLed+0x100>
    5048:	e55b3018 	ldrb	r3, [fp, #-24]
    504c:	e5c23003 	strb	r3, [r2, #3]
    I2C1MasterBuffer[4] = 255-(unsigned char)(r+g+b);
    5050:	e55b2010 	ldrb	r2, [fp, #-16]
    5054:	e55b3014 	ldrb	r3, [fp, #-20]
    5058:	e0823003 	add	r3, r2, r3
    505c:	e20320ff 	and	r2, r3, #255	; 0xff
    5060:	e55b3018 	ldrb	r3, [fp, #-24]
    5064:	e0823003 	add	r3, r2, r3
    5068:	e20330ff 	and	r3, r3, #255	; 0xff
    506c:	e1e03003 	mvn	r3, r3
    5070:	e20330ff 	and	r3, r3, #255	; 0xff
    5074:	e59f2038 	ldr	r2, [pc, #56]	; 50b4 <I2C1_setRGBLed+0x100>
    5078:	e5c23004 	strb	r3, [r2, #4]

    I2C1MasterState = I2C_STARTED;
    507c:	e59f2024 	ldr	r2, [pc, #36]	; 50a8 <I2C1_setRGBLed+0xf4>
    5080:	e3a03001 	mov	r3, #1
    5084:	e5823000 	str	r3, [r2]
    I2C1Engine();
    5088:	eb000027 	bl	512c <I2C1Engine>

    return 0;
    508c:	e3a03000 	mov	r3, #0
    5090:	e50b301c 	str	r3, [fp, #-28]
    5094:	e51b301c 	ldr	r3, [fp, #-28]
}
    5098:	e1a00003 	mov	r0, r3
    509c:	e24bd00c 	sub	sp, fp, #12
    50a0:	e89d6800 	ldm	sp, {fp, sp, lr}
    50a4:	e12fff1e 	bx	lr
    50a8:	40000a20 	.word	0x40000a20
    50ac:	40000a28 	.word	0x40000a28
    50b0:	40001c0c 	.word	0x40001c0c
    50b4:	40001c10 	.word	0x40001c10

000050b8 <I2C1Init>:



void I2C1Init(void)
{
    50b8:	e1a0c00d 	mov	ip, sp
    50bc:	e92dd800 	push	{fp, ip, lr, pc}
    50c0:	e24cb004 	sub	fp, ip, #4
    /*--- Clear flags ---*/
    I21CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;
    50c4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    50c8:	e2833917 	add	r3, r3, #376832	; 0x5c000
    50cc:	e2833018 	add	r3, r3, #24
    50d0:	e3a0206c 	mov	r2, #108	; 0x6c
    50d4:	e5832000 	str	r2, [r3]

    /*--- Reset registers ---*/
    I21SCLL   = I21SCLL_SCLL;
    50d8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    50dc:	e2833917 	add	r3, r3, #376832	; 0x5c000
    50e0:	e2833014 	add	r3, r3, #20
    50e4:	e3a02c02 	mov	r2, #512	; 0x200
    50e8:	e5832000 	str	r2, [r3]
    I21SCLH   = I21SCLH_SCLH;
    50ec:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    50f0:	e2833917 	add	r3, r3, #376832	; 0x5c000
    50f4:	e2833010 	add	r3, r3, #16
    50f8:	e3a02c02 	mov	r2, #512	; 0x200
    50fc:	e5832000 	str	r2, [r3]

    install_irq( I2C1_INT, (void *) I2C1MasterHandler );
    5100:	e3a00013 	mov	r0, #19
    5104:	e59f101c 	ldr	r1, [pc, #28]	; 5128 <I2C1Init+0x70>
    5108:	eb00006a 	bl	52b8 <install_irq>
    I21CONSET = I2CONSET_I2EN;
    510c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5110:	e2833917 	add	r3, r3, #376832	; 0x5c000
    5114:	e3a02040 	mov	r2, #64	; 0x40
    5118:	e5832000 	str	r2, [r3]
}
    511c:	e24bd00c 	sub	sp, fp, #12
    5120:	e89d6800 	ldm	sp, {fp, sp, lr}
    5124:	e12fff1e 	bx	lr
    5128:	00004184 	.word	0x00004184

0000512c <I2C1Engine>:

unsigned int I2C1Engine( void )
{
    512c:	e1a0c00d 	mov	ip, sp
    5130:	e92dd800 	push	{fp, ip, lr, pc}
    5134:	e24cb004 	sub	fp, ip, #4
	I21CONSET = I2CONSET_STO;      /* Set Stop flag */
    5138:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    513c:	e2833917 	add	r3, r3, #376832	; 0x5c000
    5140:	e3a02010 	mov	r2, #16
    5144:	e5832000 	str	r2, [r3]
	I21CONCLR = I2CONCLR_SIC;  /* Clear SI flag */
    5148:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    514c:	e2833917 	add	r3, r3, #376832	; 0x5c000
    5150:	e2833018 	add	r3, r3, #24
    5154:	e3a02008 	mov	r2, #8
    5158:	e5832000 	str	r2, [r3]
	I2C1MasterState = I2C_IDLE;
    515c:	e59f2034 	ldr	r2, [pc, #52]	; 5198 <I2C1Engine+0x6c>
    5160:	e3a03000 	mov	r3, #0
    5164:	e5823000 	str	r3, [r2]
    WrIndex1 = 0;
    5168:	e59f202c 	ldr	r2, [pc, #44]	; 519c <I2C1Engine+0x70>
    516c:	e3a03000 	mov	r3, #0
    5170:	e5823000 	str	r3, [r2]
    I21CONSET = I2CONSET_STA;	/* Set Start flag */
    5174:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5178:	e2833917 	add	r3, r3, #376832	; 0x5c000
    517c:	e3a02020 	mov	r2, #32
    5180:	e5832000 	str	r2, [r3]
    return ( TRUE );
    5184:	e3a03001 	mov	r3, #1
}
    5188:	e1a00003 	mov	r0, r3
    518c:	e24bd00c 	sub	sp, fp, #12
    5190:	e89d6800 	ldm	sp, {fp, sp, lr}
    5194:	e12fff1e 	bx	lr
    5198:	40000a20 	.word	0x40000a20
    519c:	40000a28 	.word	0x40000a28

000051a0 <I2C1State>:

unsigned char I2C1State(void)
{
    51a0:	e1a0c00d 	mov	ip, sp
    51a4:	e92dd800 	push	{fp, ip, lr, pc}
    51a8:	e24cb004 	sub	fp, ip, #4
	return I2C1MasterState;
    51ac:	e59f3014 	ldr	r3, [pc, #20]	; 51c8 <I2C1State+0x28>
    51b0:	e5933000 	ldr	r3, [r3]
    51b4:	e20330ff 	and	r3, r3, #255	; 0xff
}
    51b8:	e1a00003 	mov	r0, r3
    51bc:	e24bd00c 	sub	sp, fp, #12
    51c0:	e89d6800 	ldm	sp, {fp, sp, lr}
    51c4:	e12fff1e 	bx	lr
    51c8:	40000a20 	.word	0x40000a20

000051cc <DefaultVICHandler>:
** Returned value:		None
**
******************************************************************************/
// mthomas: inserted static to avoid gcc-warning
static void DefaultVICHandler (void) __irq
{
    51cc:	e1a0c00d 	mov	ip, sp
    51d0:	e92dd800 	push	{fp, ip, lr, pc}
    51d4:	e24cb004 	sub	fp, ip, #4
    /* if the IRQ is not installed into the VIC, and interrupt occurs, the
    default interrupt VIC address will be used. This could happen in a race
    condition. For debugging, use this endless loop to trace back. */
    /* For more details, see Philips appnote AN10414 */
    VICVectAddr = 0;		/* Acknowledge Interrupt */
    51d8:	e3a03000 	mov	r3, #0
    51dc:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    51e0:	e3a02000 	mov	r2, #0
    51e4:	e5832000 	str	r2, [r3]
    // while ( 1 ); to find unknown interrupts while debugging
}
    51e8:	e24bd00c 	sub	sp, fp, #12
    51ec:	e89d6800 	ldm	sp, {fp, sp, lr}
    51f0:	e12fff1e 	bx	lr

000051f4 <init_VIC>:
** parameters:			None
** Returned value:		None
**
******************************************************************************/
void init_VIC(void)
{
    51f4:	e1a0c00d 	mov	ip, sp
    51f8:	e92dd800 	push	{fp, ip, lr, pc}
    51fc:	e24cb004 	sub	fp, ip, #4
    5200:	e24dd00c 	sub	sp, sp, #12
    unsigned long i = 0;
    5204:	e3a03000 	mov	r3, #0
    5208:	e50b3018 	str	r3, [fp, #-24]
    unsigned long *vect_addr, *vect_cntl;

    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    520c:	e3e03efe 	mvn	r3, #4064	; 0xfe0
    5210:	e243300b 	sub	r3, r3, #11
    5214:	e3e02000 	mvn	r2, #0
    5218:	e5832000 	str	r2, [r3]
    VICVectAddr = 0;
    521c:	e3a03000 	mov	r3, #0
    5220:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    5224:	e3a02000 	mov	r2, #0
    5228:	e5832000 	str	r2, [r3]
    VICIntSelect = 0;
    522c:	e3e03eff 	mvn	r3, #4080	; 0xff0
    5230:	e2433003 	sub	r3, r3, #3
    5234:	e3a02000 	mov	r2, #0
    5238:	e5832000 	str	r2, [r3]

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    523c:	e3a03000 	mov	r3, #0
    5240:	e50b3018 	str	r3, [fp, #-24]
    5244:	ea000010 	b	528c <init_VIC+0x98>
    {
        vect_addr = (unsigned long *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
    5248:	e51b3018 	ldr	r3, [fp, #-24]
    524c:	e1a03103 	lsl	r3, r3, #2
    5250:	e2433c0f 	sub	r3, r3, #3840	; 0xf00
    5254:	e50b3014 	str	r3, [fp, #-20]
        vect_cntl = (unsigned long *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
    5258:	e51b3018 	ldr	r3, [fp, #-24]
    525c:	e1a03103 	lsl	r3, r3, #2
    5260:	e2433c0e 	sub	r3, r3, #3584	; 0xe00
    5264:	e50b3010 	str	r3, [fp, #-16]
        *vect_addr = 0;
    5268:	e51b2014 	ldr	r2, [fp, #-20]
    526c:	e3a03000 	mov	r3, #0
    5270:	e5823000 	str	r3, [r2]
        *vect_cntl = 0;
    5274:	e51b2010 	ldr	r2, [fp, #-16]
    5278:	e3a03000 	mov	r3, #0
    527c:	e5823000 	str	r3, [r2]
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    5280:	e51b3018 	ldr	r3, [fp, #-24]
    5284:	e2833001 	add	r3, r3, #1
    5288:	e50b3018 	str	r3, [fp, #-24]
    528c:	e51b3018 	ldr	r3, [fp, #-24]
    5290:	e353000f 	cmp	r3, #15
    5294:	9affffeb 	bls	5248 <init_VIC+0x54>
        *vect_addr = 0;
        *vect_cntl = 0;
    }

    /* Install the default VIC handler here */
    VICDefVectAddr = (unsigned long)DefaultVICHandler;
    5298:	e3e03d3f 	mvn	r3, #4032	; 0xfc0
    529c:	e243300b 	sub	r3, r3, #11
    52a0:	e59f200c 	ldr	r2, [pc, #12]	; 52b4 <init_VIC+0xc0>
    52a4:	e5832000 	str	r2, [r3]
    return;
}
    52a8:	e24bd00c 	sub	sp, fp, #12
    52ac:	e89d6800 	ldm	sp, {fp, sp, lr}
    52b0:	e12fff1e 	bx	lr
    52b4:	000051cc 	.word	0x000051cc

000052b8 <install_irq>:
** parameters:			Interrupt number and interrupt handler address
** Returned value:		true or false, when the table is full, return false
**
******************************************************************************/
unsigned long install_irq( unsigned long IntNumber, void *HandlerAddr )
{
    52b8:	e1a0c00d 	mov	ip, sp
    52bc:	e92dd800 	push	{fp, ip, lr, pc}
    52c0:	e24cb004 	sub	fp, ip, #4
    52c4:	e24dd018 	sub	sp, sp, #24
    52c8:	e50b001c 	str	r0, [fp, #-28]
    52cc:	e50b1020 	str	r1, [fp, #-32]
    unsigned long i;
    unsigned long *vect_addr;
    unsigned long *vect_cntl;

    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
    52d0:	e3e02efe 	mvn	r2, #4064	; 0xfe0
    52d4:	e242200b 	sub	r2, r2, #11
    52d8:	e51b101c 	ldr	r1, [fp, #-28]
    52dc:	e3a03001 	mov	r3, #1
    52e0:	e1a03113 	lsl	r3, r3, r1
    52e4:	e5823000 	str	r3, [r2]

    for ( i = 0; i < VIC_SIZE; i++ )
    52e8:	e3a03000 	mov	r3, #0
    52ec:	e50b3018 	str	r3, [fp, #-24]
    52f0:	ea000017 	b	5354 <install_irq+0x9c>
    {
        /* find first un-assigned VIC address for the handler */

        vect_addr = (unsigned long *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
    52f4:	e51b3018 	ldr	r3, [fp, #-24]
    52f8:	e1a03103 	lsl	r3, r3, #2
    52fc:	e2433c0f 	sub	r3, r3, #3840	; 0xf00
    5300:	e50b3014 	str	r3, [fp, #-20]
        vect_cntl = (unsigned long *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
    5304:	e51b3018 	ldr	r3, [fp, #-24]
    5308:	e1a03103 	lsl	r3, r3, #2
    530c:	e2433c0e 	sub	r3, r3, #3584	; 0xe00
    5310:	e50b3010 	str	r3, [fp, #-16]
        if ( *vect_addr == (unsigned long)NULL )
    5314:	e51b3014 	ldr	r3, [fp, #-20]
    5318:	e5933000 	ldr	r3, [r3]
    531c:	e3530000 	cmp	r3, #0
    5320:	1a000008 	bne	5348 <install_irq+0x90>
        {
            *vect_addr = (unsigned long)HandlerAddr;	/* set interrupt vector */
    5324:	e51b3020 	ldr	r3, [fp, #-32]
    5328:	e1a02003 	mov	r2, r3
    532c:	e51b3014 	ldr	r3, [fp, #-20]
    5330:	e5832000 	str	r2, [r3]
            *vect_cntl = (unsigned long)(IRQ_SLOT_EN | IntNumber);
    5334:	e51b301c 	ldr	r3, [fp, #-28]
    5338:	e3832020 	orr	r2, r3, #32
    533c:	e51b3010 	ldr	r3, [fp, #-16]
    5340:	e5832000 	str	r2, [r3]
            break;
    5344:	ea000005 	b	5360 <install_irq+0xa8>
    unsigned long *vect_addr;
    unsigned long *vect_cntl;

    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */

    for ( i = 0; i < VIC_SIZE; i++ )
    5348:	e51b3018 	ldr	r3, [fp, #-24]
    534c:	e2833001 	add	r3, r3, #1
    5350:	e50b3018 	str	r3, [fp, #-24]
    5354:	e51b3018 	ldr	r3, [fp, #-24]
    5358:	e353000f 	cmp	r3, #15
    535c:	9affffe4 	bls	52f4 <install_irq+0x3c>
            *vect_addr = (unsigned long)HandlerAddr;	/* set interrupt vector */
            *vect_cntl = (unsigned long)(IRQ_SLOT_EN | IntNumber);
            break;
        }
    }
    if ( i == VIC_SIZE )
    5360:	e51b3018 	ldr	r3, [fp, #-24]
    5364:	e3530010 	cmp	r3, #16
    5368:	1a000002 	bne	5378 <install_irq+0xc0>
    {
        return( FALSE );		/* fatal error, can't find empty vector slot */
    536c:	e3a03000 	mov	r3, #0
    5370:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    5374:	ea000007 	b	5398 <install_irq+0xe0>
    }
    VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
    5378:	e3a02000 	mov	r2, #0
    537c:	e2422eff 	sub	r2, r2, #4080	; 0xff0
    5380:	e51b101c 	ldr	r1, [fp, #-28]
    5384:	e3a03001 	mov	r3, #1
    5388:	e1a03113 	lsl	r3, r3, r1
    538c:	e5823000 	str	r3, [r2]
    return( TRUE );
    5390:	e3a03001 	mov	r3, #1
    5394:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    5398:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
}
    539c:	e1a00003 	mov	r0, r3
    53a0:	e24bd00c 	sub	sp, fp, #12
    53a4:	e89d6800 	ldm	sp, {fp, sp, lr}
    53a8:	e12fff1e 	bx	lr

000053ac <uninstall_irq>:
** Returned value:		true or false, when the interrupt number is not found,
**				return false
**
******************************************************************************/
unsigned long uninstall_irq( unsigned long IntNumber )
{
    53ac:	e1a0c00d 	mov	ip, sp
    53b0:	e92dd800 	push	{fp, ip, lr, pc}
    53b4:	e24cb004 	sub	fp, ip, #4
    53b8:	e24dd014 	sub	sp, sp, #20
    53bc:	e50b001c 	str	r0, [fp, #-28]
    unsigned long i;
    unsigned long *vect_addr;
    unsigned long *vect_cntl;

    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
    53c0:	e3e02efe 	mvn	r2, #4064	; 0xfe0
    53c4:	e242200b 	sub	r2, r2, #11
    53c8:	e51b101c 	ldr	r1, [fp, #-28]
    53cc:	e3a03001 	mov	r3, #1
    53d0:	e1a03113 	lsl	r3, r3, r1
    53d4:	e5823000 	str	r3, [r2]

    for ( i = 0; i < VIC_SIZE; i++ )
    53d8:	e3a03000 	mov	r3, #0
    53dc:	e50b3018 	str	r3, [fp, #-24]
    53e0:	ea000019 	b	544c <uninstall_irq+0xa0>
    {
        /* find first un-assigned VIC address for the handler */
        vect_addr = (unsigned long *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
    53e4:	e51b3018 	ldr	r3, [fp, #-24]
    53e8:	e1a03103 	lsl	r3, r3, #2
    53ec:	e2433c0f 	sub	r3, r3, #3840	; 0xf00
    53f0:	e50b3014 	str	r3, [fp, #-20]
        vect_cntl = (unsigned long *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
    53f4:	e51b3018 	ldr	r3, [fp, #-24]
    53f8:	e1a03103 	lsl	r3, r3, #2
    53fc:	e2433c0e 	sub	r3, r3, #3584	; 0xe00
    5400:	e50b3010 	str	r3, [fp, #-16]
        if ( (*vect_cntl & ~IRQ_SLOT_EN ) == IntNumber )
    5404:	e51b3010 	ldr	r3, [fp, #-16]
    5408:	e5933000 	ldr	r3, [r3]
    540c:	e3c32020 	bic	r2, r3, #32
    5410:	e51b301c 	ldr	r3, [fp, #-28]
    5414:	e1520003 	cmp	r2, r3
    5418:	1a000008 	bne	5440 <uninstall_irq+0x94>
        {
            *vect_addr = (unsigned long)NULL;	/* clear the VIC entry in the VIC table */
    541c:	e51b2014 	ldr	r2, [fp, #-20]
    5420:	e3a03000 	mov	r3, #0
    5424:	e5823000 	str	r3, [r2]
            *vect_cntl &= ~IRQ_SLOT_EN;	/* disable SLOT_EN bit */
    5428:	e51b3010 	ldr	r3, [fp, #-16]
    542c:	e5933000 	ldr	r3, [r3]
    5430:	e3c32020 	bic	r2, r3, #32
    5434:	e51b3010 	ldr	r3, [fp, #-16]
    5438:	e5832000 	str	r2, [r3]
            break;
    543c:	ea000005 	b	5458 <uninstall_irq+0xac>
    unsigned long *vect_addr;
    unsigned long *vect_cntl;

    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */

    for ( i = 0; i < VIC_SIZE; i++ )
    5440:	e51b3018 	ldr	r3, [fp, #-24]
    5444:	e2833001 	add	r3, r3, #1
    5448:	e50b3018 	str	r3, [fp, #-24]
    544c:	e51b3018 	ldr	r3, [fp, #-24]
    5450:	e353000f 	cmp	r3, #15
    5454:	9affffe2 	bls	53e4 <uninstall_irq+0x38>
            *vect_addr = (unsigned long)NULL;	/* clear the VIC entry in the VIC table */
            *vect_cntl &= ~IRQ_SLOT_EN;	/* disable SLOT_EN bit */
            break;
        }
    }
    if ( i == VIC_SIZE )
    5458:	e51b3018 	ldr	r3, [fp, #-24]
    545c:	e3530010 	cmp	r3, #16
    5460:	1a000002 	bne	5470 <uninstall_irq+0xc4>
    {
        return( FALSE );		/* fatal error, can't find interrupt number
    5464:	e3a03000 	mov	r3, #0
    5468:	e50b3020 	str	r3, [fp, #-32]
    546c:	ea000007 	b	5490 <uninstall_irq+0xe4>
					in vector slot */
    }
    VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
    5470:	e3a02000 	mov	r2, #0
    5474:	e2422eff 	sub	r2, r2, #4080	; 0xff0
    5478:	e51b101c 	ldr	r1, [fp, #-28]
    547c:	e3a03001 	mov	r3, #1
    5480:	e1a03113 	lsl	r3, r3, r1
    5484:	e5823000 	str	r3, [r2]
    return( TRUE );
    5488:	e3a03001 	mov	r3, #1
    548c:	e50b3020 	str	r3, [fp, #-32]
    5490:	e51b3020 	ldr	r3, [fp, #-32]
}
    5494:	e1a00003 	mov	r0, r3
    5498:	e24bd00c 	sub	sp, fp, #12
    549c:	e89d6800 	ldm	sp, {fp, sp, lr}
    54a0:	e12fff1e 	bx	lr

000054a4 <ADCInit>:
** parameters:			ADC clock rate
** Returned value:		true or false
**
*****************************************************************************/
unsigned int ADCInit( unsigned int ADC_Clk )
{
    54a4:	e1a0c00d 	mov	ip, sp
    54a8:	e92dd810 	push	{r4, fp, ip, lr, pc}
    54ac:	e24cb004 	sub	fp, ip, #4
    54b0:	e24dd004 	sub	sp, sp, #4
    54b4:	e50b0014 	str	r0, [fp, #-20]
	   AD0CR = ( 0x01 ) | 	// SEL=1,select channel 0, 1 to 4 on ADC0
    54b8:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    54bc:	e284490d 	add	r4, r4, #212992	; 0x34000
    54c0:	e3a008e5 	mov	r0, #15007744	; 0xe50000
    54c4:	e2400d79 	sub	r0, r0, #7744	; 0x1e40
    54c8:	e51b1014 	ldr	r1, [fp, #-20]
    54cc:	eb002146 	bl	d9ec <____udivsi3_from_arm>
    54d0:	e1a03000 	mov	r3, r0
    54d4:	e2433001 	sub	r3, r3, #1
    54d8:	e1a03403 	lsl	r3, r3, #8
    54dc:	e3833821 	orr	r3, r3, #2162688	; 0x210000
    54e0:	e3833001 	orr	r3, r3, #1
    54e4:	e5843000 	str	r3, [r4]
	( 0 << 22 ) |  		// TEST1:0 = 00
	( 0 << 24 ) |  		// START = 0 A/D conversion stops
	( 0 << 27 );		// EDGE = 0 (CAP/MAT singal falling,trigger A/D
				conversion) */

    AD1CR = ( 0x01 << 0 ) | 	// SEL=1,select channel 0, 0 to 7 on ADC1
    54e8:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    54ec:	e2844806 	add	r4, r4, #393216	; 0x60000
    54f0:	e3a008e5 	mov	r0, #15007744	; 0xe50000
    54f4:	e2400d79 	sub	r0, r0, #7744	; 0x1e40
    54f8:	e51b1014 	ldr	r1, [fp, #-20]
    54fc:	eb00213a 	bl	d9ec <____udivsi3_from_arm>
    5500:	e1a03000 	mov	r3, r0
    5504:	e2433001 	sub	r3, r3, #1
    5508:	e1a03403 	lsl	r3, r3, #8
    550c:	e3833602 	orr	r3, r3, #2097152	; 0x200000
    5510:	e3833001 	orr	r3, r3, #1
    5514:	e5843000 	str	r3, [r4]
    {
	return (FALSE);
    }
#endif

    return (TRUE);
    5518:	e3a03001 	mov	r3, #1
}
    551c:	e1a00003 	mov	r0, r3
    5520:	e24bd010 	sub	sp, fp, #16
    5524:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
    5528:	e12fff1e 	bx	lr

0000552c <ADC0Read>:
** parameters:			Channel number
** Returned value:		Value read, if interrupt driven, return channel #
**
*****************************************************************************/
unsigned int ADC0Read( unsigned char channelNum )
{
    552c:	e1a0c00d 	mov	ip, sp
    5530:	e92dd800 	push	{fp, ip, lr, pc}
    5534:	e24cb004 	sub	fp, ip, #4
    5538:	e24dd014 	sub	sp, sp, #20
    553c:	e1a03000 	mov	r3, r0
    5540:	e54b301c 	strb	r3, [fp, #-28]
#if !ADC_INTERRUPT_FLAG
    unsigned int regVal, ADC_Data;
    volatile unsigned int timeout=0;
    5544:	e3a03000 	mov	r3, #0
    5548:	e50b3018 	str	r3, [fp, #-24]
#endif

    /* channel number is 0 through 7 */
    if ( channelNum >= ADC_NUM )
    554c:	e55b301c 	ldrb	r3, [fp, #-28]
    5550:	e3530007 	cmp	r3, #7
    5554:	9a000001 	bls	5560 <ADC0Read+0x34>
    {
	channelNum = 0;		/* reset channel number to 0 */
    5558:	e3a03000 	mov	r3, #0
    555c:	e54b301c 	strb	r3, [fp, #-28]
    }
    AD0CR &= 0xFFFFFF00;
    5560:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    5564:	e282290d 	add	r2, r2, #212992	; 0x34000
    5568:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    556c:	e283390d 	add	r3, r3, #212992	; 0x34000
    5570:	e5933000 	ldr	r3, [r3]
    5574:	e3c330ff 	bic	r3, r3, #255	; 0xff
    5578:	e5823000 	str	r3, [r2]
    AD0CR |= (1 << 24) | (1 << channelNum);
    557c:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
    5580:	e281190d 	add	r1, r1, #212992	; 0x34000
    5584:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5588:	e283390d 	add	r3, r3, #212992	; 0x34000
    558c:	e5930000 	ldr	r0, [r3]
    5590:	e55b201c 	ldrb	r2, [fp, #-28]
    5594:	e3a03001 	mov	r3, #1
    5598:	e1a03213 	lsl	r3, r3, r2
    559c:	e1803003 	orr	r3, r0, r3
    55a0:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
    55a4:	e5813000 	str	r3, [r1]
				/* switch channel,start A/D convert */
#if !ADC_INTERRUPT_FLAG
    while ( timeout++<5000 )			/* wait until end of A/D convert */
    55a8:	ea000009 	b	55d4 <ADC0Read+0xa8>
    {
	regVal = *(volatile unsigned long *)(AD0_BASE_ADDR
    55ac:	e55b301c 	ldrb	r3, [fp, #-28]
    55b0:	e1a03103 	lsl	r3, r3, #2
    55b4:	e283320e 	add	r3, r3, #-536870912	; 0xe0000000
    55b8:	e283390d 	add	r3, r3, #212992	; 0x34000
    55bc:	e2833010 	add	r3, r3, #16
    55c0:	e5933000 	ldr	r3, [r3]
    55c4:	e50b3014 	str	r3, [fp, #-20]
			+ ADC_OFFSET + ADC_INDEX * channelNum);
				/* read result of A/D conversion */
	if ( regVal & ADC_DONE )
    55c8:	e51b3014 	ldr	r3, [fp, #-20]
    55cc:	e3530000 	cmp	r3, #0
    55d0:	ba00000a 	blt	5600 <ADC0Read+0xd4>
    }
    AD0CR &= 0xFFFFFF00;
    AD0CR |= (1 << 24) | (1 << channelNum);
				/* switch channel,start A/D convert */
#if !ADC_INTERRUPT_FLAG
    while ( timeout++<5000 )			/* wait until end of A/D convert */
    55d4:	e51b1018 	ldr	r1, [fp, #-24]
    55d8:	e3a03d4e 	mov	r3, #4992	; 0x1380
    55dc:	e2833007 	add	r3, r3, #7
    55e0:	e1510003 	cmp	r1, r3
    55e4:	83a03000 	movhi	r3, #0
    55e8:	93a03001 	movls	r3, #1
    55ec:	e20320ff 	and	r2, r3, #255	; 0xff
    55f0:	e2813001 	add	r3, r1, #1
    55f4:	e50b3018 	str	r3, [fp, #-24]
    55f8:	e3520000 	cmp	r2, #0
    55fc:	1affffea 	bne	55ac <ADC0Read+0x80>
	{
	    break;
	}
    }

    AD0CR &= 0xF8FFFFFF;	/* stop ADC now */
    5600:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    5604:	e282290d 	add	r2, r2, #212992	; 0x34000
    5608:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    560c:	e283390d 	add	r3, r3, #212992	; 0x34000
    5610:	e5933000 	ldr	r3, [r3]
    5614:	e3c33407 	bic	r3, r3, #117440512	; 0x7000000
    5618:	e5823000 	str	r3, [r2]
    if ( regVal & ADC_OVERRUN )	/* save data when it's not overrun
    561c:	e51b3014 	ldr	r3, [fp, #-20]
    5620:	e2033101 	and	r3, r3, #1073741824	; 0x40000000
    5624:	e3530000 	cmp	r3, #0
    5628:	0a000002 	beq	5638 <ADC0Read+0x10c>
				otherwise, return zero */
    {
	return ( 0 );
    562c:	e3a03000 	mov	r3, #0
    5630:	e50b3020 	str	r3, [fp, #-32]
    5634:	ea000006 	b	5654 <ADC0Read+0x128>
    }
    ADC_Data = ( regVal >> 6 ) & 0x3FF;
    5638:	e51b3014 	ldr	r3, [fp, #-20]
    563c:	e1a03323 	lsr	r3, r3, #6
    5640:	e1a03b03 	lsl	r3, r3, #22
    5644:	e1a03b23 	lsr	r3, r3, #22
    5648:	e50b3010 	str	r3, [fp, #-16]
    return ( ADC_Data );	/* return A/D conversion value */
    564c:	e51b3010 	ldr	r3, [fp, #-16]
    5650:	e50b3020 	str	r3, [fp, #-32]
    5654:	e51b3020 	ldr	r3, [fp, #-32]
#else
    return ( channelNum );	/* if it's interrupt driven, the
				ADC reading is done inside the handler.
				so, return channel number */
#endif
}
    5658:	e1a00003 	mov	r0, r3
    565c:	e24bd00c 	sub	sp, fp, #12
    5660:	e89d6800 	ldm	sp, {fp, sp, lr}
    5664:	e12fff1e 	bx	lr

00005668 <ADC1Read>:
** parameters:			Channel number
** Returned value:		Value read, if interrupt driven, return channel #
**
*****************************************************************************/
unsigned int ADC1Read( unsigned char channelNum )
{
    5668:	e1a0c00d 	mov	ip, sp
    566c:	e92dd800 	push	{fp, ip, lr, pc}
    5670:	e24cb004 	sub	fp, ip, #4
    5674:	e24dd010 	sub	sp, sp, #16
    5678:	e1a03000 	mov	r3, r0
    567c:	e54b3018 	strb	r3, [fp, #-24]
    unsigned int regVal;
	unsigned int ADC_Data;
#endif

    /* channel number is 0 through 7 */
    if ( channelNum >= ADC_NUM )
    5680:	e55b3018 	ldrb	r3, [fp, #-24]
    5684:	e3530007 	cmp	r3, #7
    5688:	9a000001 	bls	5694 <ADC1Read+0x2c>
    {
	channelNum = 0;		/* reset channel number to 0 */
    568c:	e3a03000 	mov	r3, #0
    5690:	e54b3018 	strb	r3, [fp, #-24]
    }
    AD1CR &= 0xFFFFFF00;
    5694:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    5698:	e2822806 	add	r2, r2, #393216	; 0x60000
    569c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    56a0:	e2833806 	add	r3, r3, #393216	; 0x60000
    56a4:	e5933000 	ldr	r3, [r3]
    56a8:	e3c330ff 	bic	r3, r3, #255	; 0xff
    56ac:	e5823000 	str	r3, [r2]
    AD1CR |= (1 << 24) | (1 << channelNum);
    56b0:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
    56b4:	e2811806 	add	r1, r1, #393216	; 0x60000
    56b8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    56bc:	e2833806 	add	r3, r3, #393216	; 0x60000
    56c0:	e5930000 	ldr	r0, [r3]
    56c4:	e55b2018 	ldrb	r2, [fp, #-24]
    56c8:	e3a03001 	mov	r3, #1
    56cc:	e1a03213 	lsl	r3, r3, r2
    56d0:	e1803003 	orr	r3, r0, r3
    56d4:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
    56d8:	e5813000 	str	r3, [r1]
				/* switch channel,start A/D convert */
#if !ADC_INTERRUPT_FLAG
    while ( 1 )			/* wait until end of A/D convert */
    {
	regVal = *(volatile unsigned long *)(AD1_BASE_ADDR
    56dc:	e55b3018 	ldrb	r3, [fp, #-24]
    56e0:	e1a03103 	lsl	r3, r3, #2
    56e4:	e283320e 	add	r3, r3, #-536870912	; 0xe0000000
    56e8:	e2833806 	add	r3, r3, #393216	; 0x60000
    56ec:	e2833010 	add	r3, r3, #16
    56f0:	e5933000 	ldr	r3, [r3]
    56f4:	e50b3014 	str	r3, [fp, #-20]
			+ ADC_OFFSET + ADC_INDEX * channelNum);
				/* read result of A/D conversion */
	if ( regVal & ADC_DONE )
    56f8:	e51b3014 	ldr	r3, [fp, #-20]
    56fc:	e3530000 	cmp	r3, #0
    5700:	ba000000 	blt	5708 <ADC1Read+0xa0>
	{
	    break;
	}
    }
    5704:	eafffff4 	b	56dc <ADC1Read+0x74>

    AD1CR &= 0xF8FFFFFF;	/* stop ADC now */
    5708:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    570c:	e2822806 	add	r2, r2, #393216	; 0x60000
    5710:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5714:	e2833806 	add	r3, r3, #393216	; 0x60000
    5718:	e5933000 	ldr	r3, [r3]
    571c:	e3c33407 	bic	r3, r3, #117440512	; 0x7000000
    5720:	e5823000 	str	r3, [r2]
    if ( regVal & ADC_OVERRUN )	/* save data when it's not overrun
    5724:	e51b3014 	ldr	r3, [fp, #-20]
    5728:	e2033101 	and	r3, r3, #1073741824	; 0x40000000
    572c:	e3530000 	cmp	r3, #0
    5730:	0a000002 	beq	5740 <ADC1Read+0xd8>
				otherwise, return zero */
    {
	return ( 0 );
    5734:	e3a03000 	mov	r3, #0
    5738:	e50b301c 	str	r3, [fp, #-28]
    573c:	ea000006 	b	575c <ADC1Read+0xf4>
    }

    ADC_Data = ( regVal >> 6 ) & 0x3FF;
    5740:	e51b3014 	ldr	r3, [fp, #-20]
    5744:	e1a03323 	lsr	r3, r3, #6
    5748:	e1a03b03 	lsl	r3, r3, #22
    574c:	e1a03b23 	lsr	r3, r3, #22
    5750:	e50b3010 	str	r3, [fp, #-16]
    return ( ADC_Data );	/* return A/D conversion value */
    5754:	e51b3010 	ldr	r3, [fp, #-16]
    5758:	e50b301c 	str	r3, [fp, #-28]
    575c:	e51b301c 	ldr	r3, [fp, #-28]
#else
    return ( channelNum );
#endif
}
    5760:	e1a00003 	mov	r0, r3
    5764:	e24bd00c 	sub	sp, fp, #12
    5768:	e89d6800 	ldm	sp, {fp, sp, lr}
    576c:	e12fff1e 	bx	lr

00005770 <ADC0triggerSampling>:

void ADC0triggerSampling(unsigned char selectChannels)
{
    5770:	e1a0c00d 	mov	ip, sp
    5774:	e92dd800 	push	{fp, ip, lr, pc}
    5778:	e24cb004 	sub	fp, ip, #4
    577c:	e24dd004 	sub	sp, sp, #4
    5780:	e1a03000 	mov	r3, r0
    5784:	e54b3010 	strb	r3, [fp, #-16]
	AD0CR |= (selectChannels);
    5788:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    578c:	e282290d 	add	r2, r2, #212992	; 0x34000
    5790:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    5794:	e283390d 	add	r3, r3, #212992	; 0x34000
    5798:	e5931000 	ldr	r1, [r3]
    579c:	e55b3010 	ldrb	r3, [fp, #-16]
    57a0:	e1813003 	orr	r3, r1, r3
    57a4:	e5823000 	str	r3, [r2]

}
    57a8:	e24bd00c 	sub	sp, fp, #12
    57ac:	e89d6800 	ldm	sp, {fp, sp, lr}
    57b0:	e12fff1e 	bx	lr

000057b4 <ADC0getSamplingResults>:

void ADC0getSamplingResults(unsigned char selectChannels, unsigned int * channelValues)
{
    57b4:	e1a0c00d 	mov	ip, sp
    57b8:	e92dd800 	push	{fp, ip, lr, pc}
    57bc:	e24cb004 	sub	fp, ip, #4
    57c0:	e24dd010 	sub	sp, sp, #16
    57c4:	e1a03000 	mov	r3, r0
    57c8:	e50b101c 	str	r1, [fp, #-28]
    57cc:	e54b3018 	strb	r3, [fp, #-24]
	int i;
	//get last result from all selected channels
	for (i=0;i<8;i++)
    57d0:	e3a03000 	mov	r3, #0
    57d4:	e50b3014 	str	r3, [fp, #-20]
    57d8:	ea000026 	b	5878 <ADC0getSamplingResults+0xc4>
		if (selectChannels&(1<<i))
    57dc:	e55b2018 	ldrb	r2, [fp, #-24]
    57e0:	e51b3014 	ldr	r3, [fp, #-20]
    57e4:	e1a03352 	asr	r3, r2, r3
    57e8:	e2033001 	and	r3, r3, #1
    57ec:	e20330ff 	and	r3, r3, #255	; 0xff
    57f0:	e3530000 	cmp	r3, #0
    57f4:	0a00001c 	beq	586c <ADC0getSamplingResults+0xb8>
		{
		    unsigned int regVal;

			regVal=*(volatile unsigned long *)(AD0_BASE_ADDR
    57f8:	e51b3014 	ldr	r3, [fp, #-20]
    57fc:	e1a03103 	lsl	r3, r3, #2
    5800:	e283320e 	add	r3, r3, #-536870912	; 0xe0000000
    5804:	e283390d 	add	r3, r3, #212992	; 0x34000
    5808:	e2833010 	add	r3, r3, #16
    580c:	e5933000 	ldr	r3, [r3]
    5810:	e50b3010 	str	r3, [fp, #-16]
					+ ADC_OFFSET + ADC_INDEX * i);

			if ((regVal&(ADC_OVERRUN|ADC_DONE))==0)
    5814:	e51b3010 	ldr	r3, [fp, #-16]
    5818:	e2033103 	and	r3, r3, #-1073741824	; 0xc0000000
    581c:	e3530000 	cmp	r3, #0
    5820:	1a000007 	bne	5844 <ADC0getSamplingResults+0x90>
					channelValues[i]=0;
    5824:	e51b3014 	ldr	r3, [fp, #-20]
    5828:	e1a03103 	lsl	r3, r3, #2
    582c:	e1a02003 	mov	r2, r3
    5830:	e51b301c 	ldr	r3, [fp, #-28]
    5834:	e0822003 	add	r2, r2, r3
    5838:	e3a03000 	mov	r3, #0
    583c:	e5823000 	str	r3, [r2]
    5840:	ea000009 	b	586c <ADC0getSamplingResults+0xb8>
			else
					channelValues[i]=( regVal >> 6 ) & 0x3FF;
    5844:	e51b3014 	ldr	r3, [fp, #-20]
    5848:	e1a03103 	lsl	r3, r3, #2
    584c:	e1a02003 	mov	r2, r3
    5850:	e51b301c 	ldr	r3, [fp, #-28]
    5854:	e0822003 	add	r2, r2, r3
    5858:	e51b3010 	ldr	r3, [fp, #-16]
    585c:	e1a03323 	lsr	r3, r3, #6
    5860:	e1a03b03 	lsl	r3, r3, #22
    5864:	e1a03b23 	lsr	r3, r3, #22
    5868:	e5823000 	str	r3, [r2]

void ADC0getSamplingResults(unsigned char selectChannels, unsigned int * channelValues)
{
	int i;
	//get last result from all selected channels
	for (i=0;i<8;i++)
    586c:	e51b3014 	ldr	r3, [fp, #-20]
    5870:	e2833001 	add	r3, r3, #1
    5874:	e50b3014 	str	r3, [fp, #-20]
    5878:	e51b3014 	ldr	r3, [fp, #-20]
    587c:	e3530007 	cmp	r3, #7
    5880:	daffffd5 	ble	57dc <ADC0getSamplingResults+0x28>
			if ((regVal&(ADC_OVERRUN|ADC_DONE))==0)
					channelValues[i]=0;
			else
					channelValues[i]=( regVal >> 6 ) & 0x3FF;
		}
}
    5884:	e24bd00c 	sub	sp, fp, #12
    5888:	e89d6800 	ldm	sp, {fp, sp, lr}
    588c:	e12fff1e 	bx	lr

00005890 <SSPHandler>:
char data_sent_to_HL=1;

inline void SSPReceive(unsigned char);

void SSPHandler (void) __irq
{
    5890:	e1a0c00d 	mov	ip, sp
    5894:	e92dd800 	push	{fp, ip, lr, pc}
    5898:	e24cb004 	sub	fp, ip, #4
    589c:	e24dd008 	sub	sp, sp, #8
    unsigned short input_data;
//    unsigned char timeout=0;

    IENABLE;				/* handles nested interrupt */

    regValue = SSPMIS;
    58a0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    58a4:	e283391a 	add	r3, r3, #425984	; 0x68000
    58a8:	e283301c 	add	r3, r3, #28
    58ac:	e5933000 	ldr	r3, [r3]
    58b0:	e50b3014 	str	r3, [fp, #-20]
    if ( regValue & SSPMIS_RORMIS )	/* Receive overrun interrupt */
    58b4:	e51b3014 	ldr	r3, [fp, #-20]
    58b8:	e2033001 	and	r3, r3, #1
    58bc:	e20330ff 	and	r3, r3, #255	; 0xff
    58c0:	e3530000 	cmp	r3, #0
    58c4:	0a000004 	beq	58dc <SSPHandler+0x4c>
    {
		SSPICR = SSPICR_RORIC;		/* clear interrupt */
    58c8:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    58cc:	e283391a 	add	r3, r3, #425984	; 0x68000
    58d0:	e2833020 	add	r3, r3, #32
    58d4:	e3a02001 	mov	r2, #1
    58d8:	e5832000 	str	r2, [r3]
    }
    if ( regValue & SSPMIS_RTMIS )	/* Receive timeout interrupt */
    58dc:	e51b3014 	ldr	r3, [fp, #-20]
    58e0:	e2033002 	and	r3, r3, #2
    58e4:	e3530000 	cmp	r3, #0
    58e8:	0a000004 	beq	5900 <SSPHandler+0x70>
    {
		SSPICR = SSPICR_RTIC;		/* clear interrupt */
    58ec:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    58f0:	e283391a 	add	r3, r3, #425984	; 0x68000
    58f4:	e2833020 	add	r3, r3, #32
    58f8:	e3a02002 	mov	r2, #2
    58fc:	e5832000 	str	r2, [r3]
    }

    if ( regValue & SSPMIS_RXMIS )	/* Rx at least half full */
    5900:	e51b3014 	ldr	r3, [fp, #-20]
    5904:	e2033004 	and	r3, r3, #4
    5908:	e3530000 	cmp	r3, #0
    590c:	0a000016 	beq	596c <SSPHandler+0xdc>
    {
    			/* receive until it's empty */
	while ( SSPSR & SSPSR_RNE )
    5910:	ea00000f 	b	5954 <SSPHandler+0xc4>
	{
		input_data=SSPDR;
    5914:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    5918:	e283391a 	add	r3, r3, #425984	; 0x68000
    591c:	e5933000 	ldr	r3, [r3]
    5920:	e14b30be 	strh	r3, [fp, #-14]
	    //SSPReceive(input_data&0xFF);
	    //SSPReceive(input_data>>8);

		SSP_rx_handler_HL(input_data&0xFF);
    5924:	e15b30be 	ldrh	r3, [fp, #-14]
    5928:	e20330ff 	and	r3, r3, #255	; 0xff
    592c:	e20330ff 	and	r3, r3, #255	; 0xff
    5930:	e1a00003 	mov	r0, r3
    5934:	ebffedf3 	bl	1108 <SSP_rx_handler_HL>
		SSP_rx_handler_HL(input_data>>8);
    5938:	e15b30be 	ldrh	r3, [fp, #-14]
    593c:	e1a03423 	lsr	r3, r3, #8
    5940:	e1a03803 	lsl	r3, r3, #16
    5944:	e1a03823 	lsr	r3, r3, #16
    5948:	e20330ff 	and	r3, r3, #255	; 0xff
    594c:	e1a00003 	mov	r0, r3
    5950:	ebffedec 	bl	1108 <SSP_rx_handler_HL>
    }

    if ( regValue & SSPMIS_RXMIS )	/* Rx at least half full */
    {
    			/* receive until it's empty */
	while ( SSPSR & SSPSR_RNE )
    5954:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    5958:	e283391a 	add	r3, r3, #425984	; 0x68000
    595c:	e5933000 	ldr	r3, [r3]
    5960:	e2033004 	and	r3, r3, #4
    5964:	e3530000 	cmp	r3, #0
    5968:	1affffe9 	bne	5914 <SSPHandler+0x84>
	//    while ( (!(SSPSR & SSPSR_BSY) )&&(timeout++<50) );
	}				/* interrupt will be cleared when */
					/* data register is read or written */
    }

    if ( regValue & SSPMIS_TXMIS )	/* Tx at least half empty */
    596c:	e51b3014 	ldr	r3, [fp, #-20]
    5970:	e2033008 	and	r3, r3, #8
    5974:	e3530000 	cmp	r3, #0
    5978:	0a00002f 	beq	5a3c <SSPHandler+0x1ac>
    {
	/* transmit until it's full */
	while ( (SSPSR & SSPSR_TNF) )
    597c:	ea000028 	b	5a24 <SSPHandler+0x194>
	{
	    if(CurrentTxIndex<SPIWR_num_bytes)
    5980:	e59f30d0 	ldr	r3, [pc, #208]	; 5a58 <SSPHandler+0x1c8>
    5984:	e5933000 	ldr	r3, [r3]
    5988:	e1a02003 	mov	r2, r3
    598c:	e59f30c8 	ldr	r3, [pc, #200]	; 5a5c <SSPHandler+0x1cc>
    5990:	e5933000 	ldr	r3, [r3]
    5994:	e1520003 	cmp	r2, r3
    5998:	2a000014 	bcs	59f0 <SSPHandler+0x160>
	    {
	    	SSPDR = SPIWRData[CurrentTxIndex]|(SPIWRData[CurrentTxIndex+1]<<8);
    599c:	e3a0128e 	mov	r1, #-536870904	; 0xe0000008
    59a0:	e281191a 	add	r1, r1, #425984	; 0x68000
    59a4:	e59f30ac 	ldr	r3, [pc, #172]	; 5a58 <SSPHandler+0x1c8>
    59a8:	e5932000 	ldr	r2, [r3]
    59ac:	e59f30ac 	ldr	r3, [pc, #172]	; 5a60 <SSPHandler+0x1d0>
    59b0:	e7d33002 	ldrb	r3, [r3, r2]
    59b4:	e1a00003 	mov	r0, r3
    59b8:	e59f3098 	ldr	r3, [pc, #152]	; 5a58 <SSPHandler+0x1c8>
    59bc:	e5933000 	ldr	r3, [r3]
    59c0:	e2832001 	add	r2, r3, #1
    59c4:	e59f3094 	ldr	r3, [pc, #148]	; 5a60 <SSPHandler+0x1d0>
    59c8:	e7d33002 	ldrb	r3, [r3, r2]
    59cc:	e1a03403 	lsl	r3, r3, #8
    59d0:	e1803003 	orr	r3, r0, r3
    59d4:	e5813000 	str	r3, [r1]
	    	CurrentTxIndex+=2;
    59d8:	e59f3078 	ldr	r3, [pc, #120]	; 5a58 <SSPHandler+0x1c8>
    59dc:	e5933000 	ldr	r3, [r3]
    59e0:	e2832002 	add	r2, r3, #2
    59e4:	e59f306c 	ldr	r3, [pc, #108]	; 5a58 <SSPHandler+0x1c8>
    59e8:	e5832000 	str	r2, [r3]
    59ec:	ea00000c 	b	5a24 <SSPHandler+0x194>
	    }
	    else
	    {
	    	CurrentTxIndex=0;
    59f0:	e59f2060 	ldr	r2, [pc, #96]	; 5a58 <SSPHandler+0x1c8>
    59f4:	e3a03000 	mov	r3, #0
    59f8:	e5823000 	str	r3, [r2]
	    	SPIWR_num_bytes=0;
    59fc:	e59f2058 	ldr	r2, [pc, #88]	; 5a5c <SSPHandler+0x1cc>
    5a00:	e3a03000 	mov	r3, #0
    5a04:	e5823000 	str	r3, [r2]
	    	data_sent_to_LL=1;
    5a08:	e59f2054 	ldr	r2, [pc, #84]	; 5a64 <SSPHandler+0x1d4>
    5a0c:	e3a03001 	mov	r3, #1
    5a10:	e5c23000 	strb	r3, [r2]
			SSPDR=0;
    5a14:	e3a0328e 	mov	r3, #-536870904	; 0xe0000008
    5a18:	e283391a 	add	r3, r3, #425984	; 0x68000
    5a1c:	e3a02000 	mov	r2, #0
    5a20:	e5832000 	str	r2, [r3]
    }

    if ( regValue & SSPMIS_TXMIS )	/* Tx at least half empty */
    {
	/* transmit until it's full */
	while ( (SSPSR & SSPSR_TNF) )
    5a24:	e3a032ce 	mov	r3, #-536870900	; 0xe000000c
    5a28:	e283391a 	add	r3, r3, #425984	; 0x68000
    5a2c:	e5933000 	ldr	r3, [r3]
    5a30:	e2033002 	and	r3, r3, #2
    5a34:	e3530000 	cmp	r3, #0
    5a38:	1affffd0 	bne	5980 <SSPHandler+0xf0>
	}				/* interrupt will be cleared when */
					/* data register is read or written */
    }

    IDISABLE;
    VICVectAddr = 0;		/* Acknowledge Interrupt */
    5a3c:	e3a03000 	mov	r3, #0
    5a40:	e2433efd 	sub	r3, r3, #4048	; 0xfd0
    5a44:	e3a02000 	mov	r2, #0
    5a48:	e5832000 	str	r2, [r3]
}
    5a4c:	e24bd00c 	sub	sp, fp, #12
    5a50:	e89d6800 	ldm	sp, {fp, sp, lr}
    5a54:	e12fff1e 	bx	lr
    5a58:	40001c98 	.word	0x40001c98
    5a5c:	40001c94 	.word	0x40001c94
    5a60:	40001c9c 	.word	0x40001c9c
    5a64:	40000016 	.word	0x40000016

00005a68 <LL_write_init>:

void LL_write_init(void)
{
    5a68:	e1a0c00d 	mov	ip, sp
    5a6c:	e92dd800 	push	{fp, ip, lr, pc}
    5a70:	e24cb004 	sub	fp, ip, #4
		SPIWRData[0]='>';
    5a74:	e59f2028 	ldr	r2, [pc, #40]	; 5aa4 <LL_write_init+0x3c>
    5a78:	e3a0303e 	mov	r3, #62	; 0x3e
    5a7c:	e5c23000 	strb	r3, [r2]
		SPIWRData[1]='*';
    5a80:	e59f201c 	ldr	r2, [pc, #28]	; 5aa4 <LL_write_init+0x3c>
    5a84:	e3a0302a 	mov	r3, #42	; 0x2a
    5a88:	e5c23001 	strb	r3, [r2, #1]
		SPIWRData[2]='>';
    5a8c:	e59f2010 	ldr	r2, [pc, #16]	; 5aa4 <LL_write_init+0x3c>
    5a90:	e3a0303e 	mov	r3, #62	; 0x3e
    5a94:	e5c23002 	strb	r3, [r2, #2]
}
    5a98:	e24bd00c 	sub	sp, fp, #12
    5a9c:	e89d6800 	ldm	sp, {fp, sp, lr}
    5aa0:	e12fff1e 	bx	lr
    5aa4:	40001c9c 	.word	0x40001c9c

00005aa8 <LL_write>:

int LL_write(unsigned char *data, unsigned short cnt, unsigned char PD )	//write data to high-level processor
{
    5aa8:	e1a0c00d 	mov	ip, sp
    5aac:	e92dd800 	push	{fp, ip, lr, pc}
    5ab0:	e24cb004 	sub	fp, ip, #4
    5ab4:	e24dd014 	sub	sp, sp, #20
    5ab8:	e50b0014 	str	r0, [fp, #-20]
    5abc:	e1a03001 	mov	r3, r1
    5ac0:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
    5ac4:	e1a03002 	mov	r3, r2
    5ac8:	e54b301c 	strb	r3, [fp, #-28]
	unsigned int i;

	if(data_sent_to_LL)
    5acc:	e59f31d0 	ldr	r3, [pc, #464]	; 5ca4 <LL_write+0x1fc>
    5ad0:	e5d33000 	ldrb	r3, [r3]
    5ad4:	e3530000 	cmp	r3, #0
    5ad8:	0a00001f 	beq	5b5c <LL_write+0xb4>
	{
		SPIWRData[3]=PD;
    5adc:	e59f31c4 	ldr	r3, [pc, #452]	; 5ca8 <LL_write+0x200>
    5ae0:	e55b201c 	ldrb	r2, [fp, #-28]
    5ae4:	e5c32003 	strb	r2, [r3, #3]
		for(i=0; i<cnt; i++)
    5ae8:	e3a03000 	mov	r3, #0
    5aec:	e50b3010 	str	r3, [fp, #-16]
    5af0:	ea00000a 	b	5b20 <LL_write+0x78>
		{
			SPIWRData[i+4]=data[i];
    5af4:	e51b3010 	ldr	r3, [fp, #-16]
    5af8:	e2831004 	add	r1, r3, #4
    5afc:	e51b2010 	ldr	r2, [fp, #-16]
    5b00:	e51b3014 	ldr	r3, [fp, #-20]
    5b04:	e0823003 	add	r3, r2, r3
    5b08:	e5d33000 	ldrb	r3, [r3]
    5b0c:	e59f2194 	ldr	r2, [pc, #404]	; 5ca8 <LL_write+0x200>
    5b10:	e7c23001 	strb	r3, [r2, r1]
	unsigned int i;

	if(data_sent_to_LL)
	{
		SPIWRData[3]=PD;
		for(i=0; i<cnt; i++)
    5b14:	e51b3010 	ldr	r3, [fp, #-16]
    5b18:	e2833001 	add	r3, r3, #1
    5b1c:	e50b3010 	str	r3, [fp, #-16]
    5b20:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
    5b24:	e51b3010 	ldr	r3, [fp, #-16]
    5b28:	e1520003 	cmp	r2, r3
    5b2c:	8afffff0 	bhi	5af4 <LL_write+0x4c>
		{
			SPIWRData[i+4]=data[i];
		}
		SPIWRData[cnt+4]=0;
    5b30:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
    5b34:	e2831004 	add	r1, r3, #4
    5b38:	e59f2168 	ldr	r2, [pc, #360]	; 5ca8 <LL_write+0x200>
    5b3c:	e3a03000 	mov	r3, #0
    5b40:	e7c23001 	strb	r3, [r2, r1]
		SPIWR_num_bytes=cnt+5;
    5b44:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
    5b48:	e2833005 	add	r3, r3, #5
    5b4c:	e1a02003 	mov	r2, r3
    5b50:	e59f3154 	ldr	r3, [pc, #340]	; 5cac <LL_write+0x204>
    5b54:	e5832000 	str	r2, [r3]
    5b58:	ea000047 	b	5c7c <LL_write+0x1d4>
	}
	else if(SPIWR_num_bytes+cnt<127)
    5b5c:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
    5b60:	e59f3144 	ldr	r3, [pc, #324]	; 5cac <LL_write+0x204>
    5b64:	e5933000 	ldr	r3, [r3]
    5b68:	e0823003 	add	r3, r2, r3
    5b6c:	e353007e 	cmp	r3, #126	; 0x7e
    5b70:	8a00003e 	bhi	5c70 <LL_write+0x1c8>
	{
		SPIWRData[SPIWR_num_bytes-1]='>';
    5b74:	e59f3130 	ldr	r3, [pc, #304]	; 5cac <LL_write+0x204>
    5b78:	e5933000 	ldr	r3, [r3]
    5b7c:	e2431001 	sub	r1, r3, #1
    5b80:	e59f2120 	ldr	r2, [pc, #288]	; 5ca8 <LL_write+0x200>
    5b84:	e3a0303e 	mov	r3, #62	; 0x3e
    5b88:	e7c23001 	strb	r3, [r2, r1]
		SPIWRData[0+SPIWR_num_bytes]='*';
    5b8c:	e59f3118 	ldr	r3, [pc, #280]	; 5cac <LL_write+0x204>
    5b90:	e5931000 	ldr	r1, [r3]
    5b94:	e59f210c 	ldr	r2, [pc, #268]	; 5ca8 <LL_write+0x200>
    5b98:	e3a0302a 	mov	r3, #42	; 0x2a
    5b9c:	e7c23001 	strb	r3, [r2, r1]
		SPIWRData[1+SPIWR_num_bytes]='>';
    5ba0:	e59f3104 	ldr	r3, [pc, #260]	; 5cac <LL_write+0x204>
    5ba4:	e5933000 	ldr	r3, [r3]
    5ba8:	e2831001 	add	r1, r3, #1
    5bac:	e59f20f4 	ldr	r2, [pc, #244]	; 5ca8 <LL_write+0x200>
    5bb0:	e3a0303e 	mov	r3, #62	; 0x3e
    5bb4:	e7c23001 	strb	r3, [r2, r1]
		SPIWRData[2+SPIWR_num_bytes]=PD;
    5bb8:	e59f30ec 	ldr	r3, [pc, #236]	; 5cac <LL_write+0x204>
    5bbc:	e5933000 	ldr	r3, [r3]
    5bc0:	e2831002 	add	r1, r3, #2
    5bc4:	e59f20dc 	ldr	r2, [pc, #220]	; 5ca8 <LL_write+0x200>
    5bc8:	e55b301c 	ldrb	r3, [fp, #-28]
    5bcc:	e7c23001 	strb	r3, [r2, r1]
		for(i=SPIWR_num_bytes; i<cnt+SPIWR_num_bytes; i++)
    5bd0:	e59f30d4 	ldr	r3, [pc, #212]	; 5cac <LL_write+0x204>
    5bd4:	e5933000 	ldr	r3, [r3]
    5bd8:	e50b3010 	str	r3, [fp, #-16]
    5bdc:	ea00000e 	b	5c1c <LL_write+0x174>
		{
			SPIWRData[i+3]=data[i-SPIWR_num_bytes];
    5be0:	e51b3010 	ldr	r3, [fp, #-16]
    5be4:	e2831003 	add	r1, r3, #3
    5be8:	e59f30bc 	ldr	r3, [pc, #188]	; 5cac <LL_write+0x204>
    5bec:	e5932000 	ldr	r2, [r3]
    5bf0:	e51b3010 	ldr	r3, [fp, #-16]
    5bf4:	e0623003 	rsb	r3, r2, r3
    5bf8:	e1a02003 	mov	r2, r3
    5bfc:	e51b3014 	ldr	r3, [fp, #-20]
    5c00:	e0823003 	add	r3, r2, r3
    5c04:	e5d33000 	ldrb	r3, [r3]
    5c08:	e59f2098 	ldr	r2, [pc, #152]	; 5ca8 <LL_write+0x200>
    5c0c:	e7c23001 	strb	r3, [r2, r1]
	{
		SPIWRData[SPIWR_num_bytes-1]='>';
		SPIWRData[0+SPIWR_num_bytes]='*';
		SPIWRData[1+SPIWR_num_bytes]='>';
		SPIWRData[2+SPIWR_num_bytes]=PD;
		for(i=SPIWR_num_bytes; i<cnt+SPIWR_num_bytes; i++)
    5c10:	e51b3010 	ldr	r3, [fp, #-16]
    5c14:	e2833001 	add	r3, r3, #1
    5c18:	e50b3010 	str	r3, [fp, #-16]
    5c1c:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
    5c20:	e59f3084 	ldr	r3, [pc, #132]	; 5cac <LL_write+0x204>
    5c24:	e5933000 	ldr	r3, [r3]
    5c28:	e0822003 	add	r2, r2, r3
    5c2c:	e51b3010 	ldr	r3, [fp, #-16]
    5c30:	e1520003 	cmp	r2, r3
    5c34:	8affffe9 	bhi	5be0 <LL_write+0x138>
		{
			SPIWRData[i+3]=data[i-SPIWR_num_bytes];
		}
		SPIWR_num_bytes+=cnt+5;
    5c38:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
    5c3c:	e59f3068 	ldr	r3, [pc, #104]	; 5cac <LL_write+0x204>
    5c40:	e5933000 	ldr	r3, [r3]
    5c44:	e0823003 	add	r3, r2, r3
    5c48:	e2832005 	add	r2, r3, #5
    5c4c:	e59f3058 	ldr	r3, [pc, #88]	; 5cac <LL_write+0x204>
    5c50:	e5832000 	str	r2, [r3]
		SPIWRData[SPIWR_num_bytes-1]=0;
    5c54:	e59f3050 	ldr	r3, [pc, #80]	; 5cac <LL_write+0x204>
    5c58:	e5933000 	ldr	r3, [r3]
    5c5c:	e2431001 	sub	r1, r3, #1
    5c60:	e59f2040 	ldr	r2, [pc, #64]	; 5ca8 <LL_write+0x200>
    5c64:	e3a03000 	mov	r3, #0
    5c68:	e7c23001 	strb	r3, [r2, r1]
    5c6c:	ea000002 	b	5c7c <LL_write+0x1d4>
	}
	else return(0);
    5c70:	e3a03000 	mov	r3, #0
    5c74:	e50b3020 	str	r3, [fp, #-32]
    5c78:	ea000004 	b	5c90 <LL_write+0x1e8>
	data_sent_to_LL=0;
    5c7c:	e59f3020 	ldr	r3, [pc, #32]	; 5ca4 <LL_write+0x1fc>
    5c80:	e3a02000 	mov	r2, #0
    5c84:	e5c32000 	strb	r2, [r3]

	return(1);
    5c88:	e3a03001 	mov	r3, #1
    5c8c:	e50b3020 	str	r3, [fp, #-32]
    5c90:	e51b3020 	ldr	r3, [fp, #-32]
}
    5c94:	e1a00003 	mov	r0, r3
    5c98:	e24bd00c 	sub	sp, fp, #12
    5c9c:	e89d6800 	ldm	sp, {fp, sp, lr}
    5ca0:	e12fff1e 	bx	lr
    5ca4:	40000016 	.word	0x40000016
    5ca8:	40001c9c 	.word	0x40001c9c
    5cac:	40001c94 	.word	0x40001c94

00005cb0 <jetiSetKeyChanged>:
unsigned char jetiKeyChanged=0;
unsigned char jetiKey=0;


void jetiSetKeyChanged(unsigned char key)
{
    5cb0:	e1a0c00d 	mov	ip, sp
    5cb4:	e92dd800 	push	{fp, ip, lr, pc}
    5cb8:	e24cb004 	sub	fp, ip, #4
    5cbc:	e24dd004 	sub	sp, sp, #4
    5cc0:	e1a03000 	mov	r3, r0
    5cc4:	e54b3010 	strb	r3, [fp, #-16]
	jetiKey=key;
    5cc8:	e59f201c 	ldr	r2, [pc, #28]	; 5cec <jetiSetKeyChanged+0x3c>
    5ccc:	e55b3010 	ldrb	r3, [fp, #-16]
    5cd0:	e5c23000 	strb	r3, [r2]
	jetiKeyChanged=1;
    5cd4:	e59f2014 	ldr	r2, [pc, #20]	; 5cf0 <jetiSetKeyChanged+0x40>
    5cd8:	e3a03001 	mov	r3, #1
    5cdc:	e5c23000 	strb	r3, [r2]
}
    5ce0:	e24bd00c 	sub	sp, fp, #12
    5ce4:	e89d6800 	ldm	sp, {fp, sp, lr}
    5ce8:	e12fff1e 	bx	lr
    5cec:	40000a44 	.word	0x40000a44
    5cf0:	40000a43 	.word	0x40000a43

00005cf4 <jetiCheckForKeyChange>:


unsigned char jetiCheckForKeyChange(void)
{
    5cf4:	e1a0c00d 	mov	ip, sp
    5cf8:	e92dd800 	push	{fp, ip, lr, pc}
    5cfc:	e24cb004 	sub	fp, ip, #4
    5d00:	e24dd004 	sub	sp, sp, #4
	if (jetiKeyChanged)
    5d04:	e59f3040 	ldr	r3, [pc, #64]	; 5d4c <jetiCheckForKeyChange+0x58>
    5d08:	e5d33000 	ldrb	r3, [r3]
    5d0c:	e3530000 	cmp	r3, #0
    5d10:	0a000006 	beq	5d30 <jetiCheckForKeyChange+0x3c>
	{
		jetiKeyChanged=0;
    5d14:	e59f2030 	ldr	r2, [pc, #48]	; 5d4c <jetiCheckForKeyChange+0x58>
    5d18:	e3a03000 	mov	r3, #0
    5d1c:	e5c23000 	strb	r3, [r2]
		return jetiKey;
    5d20:	e59f3028 	ldr	r3, [pc, #40]	; 5d50 <jetiCheckForKeyChange+0x5c>
    5d24:	e5d33000 	ldrb	r3, [r3]
    5d28:	e50b3010 	str	r3, [fp, #-16]
    5d2c:	ea000001 	b	5d38 <jetiCheckForKeyChange+0x44>
	}else
		return 0;
    5d30:	e3a03000 	mov	r3, #0
    5d34:	e50b3010 	str	r3, [fp, #-16]
    5d38:	e51b3010 	ldr	r3, [fp, #-16]
}
    5d3c:	e1a00003 	mov	r0, r3
    5d40:	e24bd00c 	sub	sp, fp, #12
    5d44:	e89d6800 	ldm	sp, {fp, sp, lr}
    5d48:	e12fff1e 	bx	lr
    5d4c:	40000a43 	.word	0x40000a43
    5d50:	40000a44 	.word	0x40000a44

00005d54 <jetiSetAlarm>:
unsigned char jetiSetAlarm(unsigned char alarm, unsigned alarmType)
{
    5d54:	e1a0c00d 	mov	ip, sp
    5d58:	e92dd800 	push	{fp, ip, lr, pc}
    5d5c:	e24cb004 	sub	fp, ip, #4
    5d60:	e24dd00c 	sub	sp, sp, #12
    5d64:	e1a03000 	mov	r3, r0
    5d68:	e50b1014 	str	r1, [fp, #-20]
    5d6c:	e54b3010 	strb	r3, [fp, #-16]
	if (((alarm<'A')||(alarm>'Z')) && (alarm))
    5d70:	e55b3010 	ldrb	r3, [fp, #-16]
    5d74:	e3530040 	cmp	r3, #64	; 0x40
    5d78:	9a000002 	bls	5d88 <jetiSetAlarm+0x34>
    5d7c:	e55b3010 	ldrb	r3, [fp, #-16]
    5d80:	e353005a 	cmp	r3, #90	; 0x5a
    5d84:	9a000005 	bls	5da0 <jetiSetAlarm+0x4c>
    5d88:	e55b3010 	ldrb	r3, [fp, #-16]
    5d8c:	e3530000 	cmp	r3, #0
    5d90:	0a000002 	beq	5da0 <jetiSetAlarm+0x4c>
		return JETI_ERROR_ALARM_RANGE;
    5d94:	e3a03050 	mov	r3, #80	; 0x50
    5d98:	e50b3018 	str	r3, [fp, #-24]
    5d9c:	ea00000e 	b	5ddc <jetiSetAlarm+0x88>
	if (alarmType>1)
    5da0:	e51b3014 	ldr	r3, [fp, #-20]
    5da4:	e3530001 	cmp	r3, #1
    5da8:	9a000002 	bls	5db8 <jetiSetAlarm+0x64>
		return JETI_ERROR_ALARM_TYPE;
    5dac:	e3a03051 	mov	r3, #81	; 0x51
    5db0:	e50b3018 	str	r3, [fp, #-24]
    5db4:	ea000008 	b	5ddc <jetiSetAlarm+0x88>
	jetiAlarm=alarm;
    5db8:	e59f2030 	ldr	r2, [pc, #48]	; 5df0 <jetiSetAlarm+0x9c>
    5dbc:	e55b3010 	ldrb	r3, [fp, #-16]
    5dc0:	e5c23000 	strb	r3, [r2]
	jetiAlarmType=alarmType;
    5dc4:	e51b3014 	ldr	r3, [fp, #-20]
    5dc8:	e20330ff 	and	r3, r3, #255	; 0xff
    5dcc:	e59f2020 	ldr	r2, [pc, #32]	; 5df4 <jetiSetAlarm+0xa0>
    5dd0:	e5c23000 	strb	r3, [r2]

	return JETI_NO_ERROR;
    5dd4:	e3a03000 	mov	r3, #0
    5dd8:	e50b3018 	str	r3, [fp, #-24]
    5ddc:	e51b3018 	ldr	r3, [fp, #-24]

}
    5de0:	e1a00003 	mov	r0, r3
    5de4:	e24bd00c 	sub	sp, fp, #12
    5de8:	e89d6800 	ldm	sp, {fp, sp, lr}
    5dec:	e12fff1e 	bx	lr
    5df0:	40000a40 	.word	0x40000a40
    5df4:	40000a41 	.word	0x40000a41

00005df8 <jetiSetDeviceName>:

unsigned char jetiSetDeviceName(char * name)
{
    5df8:	e1a0c00d 	mov	ip, sp
    5dfc:	e92dd800 	push	{fp, ip, lr, pc}
    5e00:	e24cb004 	sub	fp, ip, #4
    5e04:	e24dd010 	sub	sp, sp, #16
    5e08:	e50b001c 	str	r0, [fp, #-28]
	unsigned char nameLength=0;
    5e0c:	e3a03000 	mov	r3, #0
    5e10:	e54b3015 	strb	r3, [fp, #-21]
	int i;
	unsigned char error=JETI_NO_ERROR;
    5e14:	e3a03000 	mov	r3, #0
    5e18:	e54b300d 	strb	r3, [fp, #-13]

	for (i=0;i<11;i++)
    5e1c:	e3a03000 	mov	r3, #0
    5e20:	e50b3014 	str	r3, [fp, #-20]
    5e24:	ea000009 	b	5e50 <jetiSetDeviceName+0x58>
		if (name[i]==0)
    5e28:	e51b3014 	ldr	r3, [fp, #-20]
    5e2c:	e1a02003 	mov	r2, r3
    5e30:	e51b301c 	ldr	r3, [fp, #-28]
    5e34:	e0823003 	add	r3, r2, r3
    5e38:	e5d33000 	ldrb	r3, [r3]
    5e3c:	e3530000 	cmp	r3, #0
    5e40:	0a000005 	beq	5e5c <jetiSetDeviceName+0x64>
{
	unsigned char nameLength=0;
	int i;
	unsigned char error=JETI_NO_ERROR;

	for (i=0;i<11;i++)
    5e44:	e51b3014 	ldr	r3, [fp, #-20]
    5e48:	e2833001 	add	r3, r3, #1
    5e4c:	e50b3014 	str	r3, [fp, #-20]
    5e50:	e51b3014 	ldr	r3, [fp, #-20]
    5e54:	e353000a 	cmp	r3, #10
    5e58:	dafffff2 	ble	5e28 <jetiSetDeviceName+0x30>
		if (name[i]==0)
			break;
	if (i==10)
    5e5c:	e51b3014 	ldr	r3, [fp, #-20]
    5e60:	e353000a 	cmp	r3, #10
    5e64:	1a000001 	bne	5e70 <jetiSetDeviceName+0x78>
		error=JETI_ERROR_STRING_NAME;
    5e68:	e3a03013 	mov	r3, #19
    5e6c:	e54b300d 	strb	r3, [fp, #-13]

	nameLength=i;
    5e70:	e51b3014 	ldr	r3, [fp, #-20]
    5e74:	e54b3015 	strb	r3, [fp, #-21]

	memcpy(&jetiName[0],name,nameLength);
    5e78:	e55b1015 	ldrb	r1, [fp, #-21]
    5e7c:	e59f3028 	ldr	r3, [pc, #40]	; 5eac <jetiSetDeviceName+0xb4>
    5e80:	e51b201c 	ldr	r2, [fp, #-28]
    5e84:	e1a0c001 	mov	ip, r1
    5e88:	e1a00003 	mov	r0, r3
    5e8c:	e1a01002 	mov	r1, r2
    5e90:	e1a0200c 	mov	r2, ip
    5e94:	eb001ecb 	bl	d9c8 <__memcpy_from_arm>

	return error;
    5e98:	e55b300d 	ldrb	r3, [fp, #-13]
}
    5e9c:	e1a00003 	mov	r0, r3
    5ea0:	e24bd00c 	sub	sp, fp, #12
    5ea4:	e89d6800 	ldm	sp, {fp, sp, lr}
    5ea8:	e12fff1e 	bx	lr
    5eac:	40001f06 	.word	0x40001f06

00005eb0 <jetiActivateValue>:

unsigned char jetiActivateValue(unsigned char id)
{
    5eb0:	e1a0c00d 	mov	ip, sp
    5eb4:	e92dd800 	push	{fp, ip, lr, pc}
    5eb8:	e24cb004 	sub	fp, ip, #4
    5ebc:	e24dd008 	sub	sp, sp, #8
    5ec0:	e1a03000 	mov	r3, r0
    5ec4:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    5ec8:	e55b3010 	ldrb	r3, [fp, #-16]
    5ecc:	e353000e 	cmp	r3, #14
    5ed0:	9a000002 	bls	5ee0 <jetiActivateValue+0x30>
		return JETI_ERROR_ID_RANGE;
    5ed4:	e3a03001 	mov	r3, #1
    5ed8:	e50b3014 	str	r3, [fp, #-20]
    5edc:	ea00000f 	b	5f20 <jetiActivateValue+0x70>
	jetiValues[id].active=id+1;
    5ee0:	e55b2010 	ldrb	r2, [fp, #-16]
    5ee4:	e55b3010 	ldrb	r3, [fp, #-16]
    5ee8:	e2833001 	add	r3, r3, #1
    5eec:	e20310ff 	and	r1, r3, #255	; 0xff
    5ef0:	e59f003c 	ldr	r0, [pc, #60]	; 5f34 <jetiActivateValue+0x84>
    5ef4:	e1a03002 	mov	r3, r2
    5ef8:	e1a03103 	lsl	r3, r3, #2
    5efc:	e0833002 	add	r3, r3, r2
    5f00:	e1a03083 	lsl	r3, r3, #1
    5f04:	e0833002 	add	r3, r3, r2
    5f08:	e1a03083 	lsl	r3, r3, #1
    5f0c:	e0832000 	add	r2, r3, r0
    5f10:	e1a03001 	mov	r3, r1
    5f14:	e5c23000 	strb	r3, [r2]

	return JETI_NO_ERROR;
    5f18:	e3a03000 	mov	r3, #0
    5f1c:	e50b3014 	str	r3, [fp, #-20]
    5f20:	e51b3014 	ldr	r3, [fp, #-20]
}
    5f24:	e1a00003 	mov	r0, r3
    5f28:	e24bd00c 	sub	sp, fp, #12
    5f2c:	e89d6800 	ldm	sp, {fp, sp, lr}
    5f30:	e12fff1e 	bx	lr
    5f34:	40001dbc 	.word	0x40001dbc

00005f38 <jetiDeactivateValue>:

unsigned char jetiDeactivateValue(unsigned char id)
{
    5f38:	e1a0c00d 	mov	ip, sp
    5f3c:	e92dd800 	push	{fp, ip, lr, pc}
    5f40:	e24cb004 	sub	fp, ip, #4
    5f44:	e24dd008 	sub	sp, sp, #8
    5f48:	e1a03000 	mov	r3, r0
    5f4c:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    5f50:	e55b3010 	ldrb	r3, [fp, #-16]
    5f54:	e353000e 	cmp	r3, #14
    5f58:	9a000002 	bls	5f68 <jetiDeactivateValue+0x30>
		return JETI_ERROR_ID_RANGE;
    5f5c:	e3a03001 	mov	r3, #1
    5f60:	e50b3014 	str	r3, [fp, #-20]
    5f64:	ea00000c 	b	5f9c <jetiDeactivateValue+0x64>
	jetiValues[id].active=0;
    5f68:	e55b2010 	ldrb	r2, [fp, #-16]
    5f6c:	e59f103c 	ldr	r1, [pc, #60]	; 5fb0 <jetiDeactivateValue+0x78>
    5f70:	e1a03002 	mov	r3, r2
    5f74:	e1a03103 	lsl	r3, r3, #2
    5f78:	e0833002 	add	r3, r3, r2
    5f7c:	e1a03083 	lsl	r3, r3, #1
    5f80:	e0833002 	add	r3, r3, r2
    5f84:	e1a03083 	lsl	r3, r3, #1
    5f88:	e0832001 	add	r2, r3, r1
    5f8c:	e3a03000 	mov	r3, #0
    5f90:	e5c23000 	strb	r3, [r2]

	return JETI_NO_ERROR;
    5f94:	e3a03000 	mov	r3, #0
    5f98:	e50b3014 	str	r3, [fp, #-20]
    5f9c:	e51b3014 	ldr	r3, [fp, #-20]
}
    5fa0:	e1a00003 	mov	r0, r3
    5fa4:	e24bd00c 	sub	sp, fp, #12
    5fa8:	e89d6800 	ldm	sp, {fp, sp, lr}
    5fac:	e12fff1e 	bx	lr
    5fb0:	40001dbc 	.word	0x40001dbc

00005fb4 <jetiSetDecimalPoint>:

unsigned char jetiSetDecimalPoint(unsigned char id, unsigned char decimalPoint)
{
    5fb4:	e1a0c00d 	mov	ip, sp
    5fb8:	e92dd800 	push	{fp, ip, lr, pc}
    5fbc:	e24cb004 	sub	fp, ip, #4
    5fc0:	e24dd00c 	sub	sp, sp, #12
    5fc4:	e1a03000 	mov	r3, r0
    5fc8:	e1a02001 	mov	r2, r1
    5fcc:	e54b3010 	strb	r3, [fp, #-16]
    5fd0:	e1a03002 	mov	r3, r2
    5fd4:	e54b3014 	strb	r3, [fp, #-20]
	if (id>14)
    5fd8:	e55b3010 	ldrb	r3, [fp, #-16]
    5fdc:	e353000e 	cmp	r3, #14
    5fe0:	9a000002 	bls	5ff0 <jetiSetDecimalPoint+0x3c>
		return JETI_ERROR_ID_RANGE;
    5fe4:	e3a03001 	mov	r3, #1
    5fe8:	e50b3018 	str	r3, [fp, #-24]
    5fec:	ea000014 	b	6044 <jetiSetDecimalPoint+0x90>
	if (decimalPoint>3)
    5ff0:	e55b3014 	ldrb	r3, [fp, #-20]
    5ff4:	e3530003 	cmp	r3, #3
    5ff8:	9a000002 	bls	6008 <jetiSetDecimalPoint+0x54>
		return JETI_ERROR_DECPOINT_RANGE;
    5ffc:	e3a03030 	mov	r3, #48	; 0x30
    6000:	e50b3018 	str	r3, [fp, #-24]
    6004:	ea00000e 	b	6044 <jetiSetDecimalPoint+0x90>
	jetiValues[id].decPoint=decimalPoint;
    6008:	e55b2010 	ldrb	r2, [fp, #-16]
    600c:	e59f1044 	ldr	r1, [pc, #68]	; 6058 <jetiSetDecimalPoint+0xa4>
    6010:	e3a00011 	mov	r0, #17
    6014:	e1a03002 	mov	r3, r2
    6018:	e1a03103 	lsl	r3, r3, #2
    601c:	e0833002 	add	r3, r3, r2
    6020:	e1a03083 	lsl	r3, r3, #1
    6024:	e0833002 	add	r3, r3, r2
    6028:	e1a03083 	lsl	r3, r3, #1
    602c:	e0833001 	add	r3, r3, r1
    6030:	e0832000 	add	r2, r3, r0
    6034:	e55b3014 	ldrb	r3, [fp, #-20]
    6038:	e5c23000 	strb	r3, [r2]
	return JETI_NO_ERROR;
    603c:	e3a03000 	mov	r3, #0
    6040:	e50b3018 	str	r3, [fp, #-24]
    6044:	e51b3018 	ldr	r3, [fp, #-24]
}
    6048:	e1a00003 	mov	r0, r3
    604c:	e24bd00c 	sub	sp, fp, #12
    6050:	e89d6800 	ldm	sp, {fp, sp, lr}
    6054:	e12fff1e 	bx	lr
    6058:	40001dbc 	.word	0x40001dbc

0000605c <jetiSetValue30B>:

unsigned char jetiSetValue30B(unsigned char id, int value)
{
    605c:	e1a0c00d 	mov	ip, sp
    6060:	e92dd800 	push	{fp, ip, lr, pc}
    6064:	e24cb004 	sub	fp, ip, #4
    6068:	e24dd00c 	sub	sp, sp, #12
    606c:	e1a03000 	mov	r3, r0
    6070:	e50b1014 	str	r1, [fp, #-20]
    6074:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    6078:	e55b3010 	ldrb	r3, [fp, #-16]
    607c:	e353000e 	cmp	r3, #14
    6080:	9a000002 	bls	6090 <jetiSetValue30B+0x34>
		return JETI_ERROR_ID_RANGE;
    6084:	e3a03001 	mov	r3, #1
    6088:	e50b3018 	str	r3, [fp, #-24]
    608c:	ea000048 	b	61b4 <jetiSetValue30B+0x158>

	if ((value>=(1<<30)) || (value<=-(1<<30)))
    6090:	e51b3014 	ldr	r3, [fp, #-20]
    6094:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
    6098:	ca000002 	bgt	60a8 <jetiSetValue30B+0x4c>
    609c:	e51b3014 	ldr	r3, [fp, #-20]
    60a0:	e3530103 	cmp	r3, #-1073741824	; 0xc0000000
    60a4:	ca000002 	bgt	60b4 <jetiSetValue30B+0x58>
		return JETI_ERROR_VALUE_RANGE;
    60a8:	e3a03020 	mov	r3, #32
    60ac:	e50b3018 	str	r3, [fp, #-24]
    60b0:	ea00003f 	b	61b4 <jetiSetValue30B+0x158>

	jetiValues[id].value=value;
    60b4:	e55b2010 	ldrb	r2, [fp, #-16]
    60b8:	e59f1108 	ldr	r1, [pc, #264]	; 61c8 <jetiSetValue30B+0x16c>
    60bc:	e3a00010 	mov	r0, #16
    60c0:	e1a03002 	mov	r3, r2
    60c4:	e1a03103 	lsl	r3, r3, #2
    60c8:	e0833002 	add	r3, r3, r2
    60cc:	e1a03083 	lsl	r3, r3, #1
    60d0:	e0833002 	add	r3, r3, r2
    60d4:	e1a03083 	lsl	r3, r3, #1
    60d8:	e0833001 	add	r3, r3, r1
    60dc:	e0830000 	add	r0, r3, r0
    60e0:	e55b1014 	ldrb	r1, [fp, #-20]
    60e4:	e3a03000 	mov	r3, #0
    60e8:	e1a02003 	mov	r2, r3
    60ec:	e1a03001 	mov	r3, r1
    60f0:	e1823003 	orr	r3, r2, r3
    60f4:	e5c03002 	strb	r3, [r0, #2]
    60f8:	e55b1013 	ldrb	r1, [fp, #-19]
    60fc:	e3a03000 	mov	r3, #0
    6100:	e1a02003 	mov	r2, r3
    6104:	e1a03001 	mov	r3, r1
    6108:	e1823003 	orr	r3, r2, r3
    610c:	e5c03003 	strb	r3, [r0, #3]
    6110:	e55b1012 	ldrb	r1, [fp, #-18]
    6114:	e3a03000 	mov	r3, #0
    6118:	e1a02003 	mov	r2, r3
    611c:	e1a03001 	mov	r3, r1
    6120:	e1823003 	orr	r3, r2, r3
    6124:	e5c03004 	strb	r3, [r0, #4]
    6128:	e55b1011 	ldrb	r1, [fp, #-17]
    612c:	e3a03000 	mov	r3, #0
    6130:	e1a02003 	mov	r2, r3
    6134:	e1a03001 	mov	r3, r1
    6138:	e1823003 	orr	r3, r2, r3
    613c:	e5c03005 	strb	r3, [r0, #5]
	if (jetiValues[id].varType!=JETI_VART_30B)
    6140:	e55b2010 	ldrb	r2, [fp, #-16]
    6144:	e59f107c 	ldr	r1, [pc, #124]	; 61c8 <jetiSetValue30B+0x16c>
    6148:	e3a00010 	mov	r0, #16
    614c:	e1a03002 	mov	r3, r2
    6150:	e1a03103 	lsl	r3, r3, #2
    6154:	e0833002 	add	r3, r3, r2
    6158:	e1a03083 	lsl	r3, r3, #1
    615c:	e0833002 	add	r3, r3, r2
    6160:	e1a03083 	lsl	r3, r3, #1
    6164:	e0833001 	add	r3, r3, r1
    6168:	e0833000 	add	r3, r3, r0
    616c:	e5d33000 	ldrb	r3, [r3]
    6170:	e3530048 	cmp	r3, #72	; 0x48
    6174:	0a00000c 	beq	61ac <jetiSetValue30B+0x150>
	{
		jetiValues[id].varType=JETI_VART_30B;
    6178:	e55b2010 	ldrb	r2, [fp, #-16]
    617c:	e59f1044 	ldr	r1, [pc, #68]	; 61c8 <jetiSetValue30B+0x16c>
    6180:	e3a00010 	mov	r0, #16
    6184:	e1a03002 	mov	r3, r2
    6188:	e1a03103 	lsl	r3, r3, #2
    618c:	e0833002 	add	r3, r3, r2
    6190:	e1a03083 	lsl	r3, r3, #1
    6194:	e0833002 	add	r3, r3, r2
    6198:	e1a03083 	lsl	r3, r3, #1
    619c:	e0833001 	add	r3, r3, r1
    61a0:	e0832000 	add	r2, r3, r0
    61a4:	e3a03048 	mov	r3, #72	; 0x48
    61a8:	e5c23000 	strb	r3, [r2]
	}

	return JETI_NO_ERROR;
    61ac:	e3a03000 	mov	r3, #0
    61b0:	e50b3018 	str	r3, [fp, #-24]
    61b4:	e51b3018 	ldr	r3, [fp, #-24]

}
    61b8:	e1a00003 	mov	r0, r3
    61bc:	e24bd00c 	sub	sp, fp, #12
    61c0:	e89d6800 	ldm	sp, {fp, sp, lr}
    61c4:	e12fff1e 	bx	lr
    61c8:	40001dbc 	.word	0x40001dbc

000061cc <jetiSetValue22B>:

unsigned char jetiSetValue22B(unsigned char id, int value)
{
    61cc:	e1a0c00d 	mov	ip, sp
    61d0:	e92dd800 	push	{fp, ip, lr, pc}
    61d4:	e24cb004 	sub	fp, ip, #4
    61d8:	e24dd00c 	sub	sp, sp, #12
    61dc:	e1a03000 	mov	r3, r0
    61e0:	e50b1014 	str	r1, [fp, #-20]
    61e4:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    61e8:	e55b3010 	ldrb	r3, [fp, #-16]
    61ec:	e353000e 	cmp	r3, #14
    61f0:	9a000002 	bls	6200 <jetiSetValue22B+0x34>
		return JETI_ERROR_ID_RANGE;
    61f4:	e3a03001 	mov	r3, #1
    61f8:	e50b3018 	str	r3, [fp, #-24]
    61fc:	ea00004a 	b	632c <jetiSetValue22B+0x160>
	if ((value>=(1<<23)) || (value<=-(1<<23)))
    6200:	e51b2014 	ldr	r2, [fp, #-20]
    6204:	e3a03502 	mov	r3, #8388608	; 0x800000
    6208:	e2433001 	sub	r3, r3, #1
    620c:	e1520003 	cmp	r2, r3
    6210:	ca000002 	bgt	6220 <jetiSetValue22B+0x54>
    6214:	e51b3014 	ldr	r3, [fp, #-20]
    6218:	e3730502 	cmn	r3, #8388608	; 0x800000
    621c:	ca000002 	bgt	622c <jetiSetValue22B+0x60>
		return JETI_ERROR_VALUE_RANGE;
    6220:	e3a03020 	mov	r3, #32
    6224:	e50b3018 	str	r3, [fp, #-24]
    6228:	ea00003f 	b	632c <jetiSetValue22B+0x160>

	jetiValues[id].value=value;
    622c:	e55b2010 	ldrb	r2, [fp, #-16]
    6230:	e59f1108 	ldr	r1, [pc, #264]	; 6340 <jetiSetValue22B+0x174>
    6234:	e3a00010 	mov	r0, #16
    6238:	e1a03002 	mov	r3, r2
    623c:	e1a03103 	lsl	r3, r3, #2
    6240:	e0833002 	add	r3, r3, r2
    6244:	e1a03083 	lsl	r3, r3, #1
    6248:	e0833002 	add	r3, r3, r2
    624c:	e1a03083 	lsl	r3, r3, #1
    6250:	e0833001 	add	r3, r3, r1
    6254:	e0830000 	add	r0, r3, r0
    6258:	e55b1014 	ldrb	r1, [fp, #-20]
    625c:	e3a03000 	mov	r3, #0
    6260:	e1a02003 	mov	r2, r3
    6264:	e1a03001 	mov	r3, r1
    6268:	e1823003 	orr	r3, r2, r3
    626c:	e5c03002 	strb	r3, [r0, #2]
    6270:	e55b1013 	ldrb	r1, [fp, #-19]
    6274:	e3a03000 	mov	r3, #0
    6278:	e1a02003 	mov	r2, r3
    627c:	e1a03001 	mov	r3, r1
    6280:	e1823003 	orr	r3, r2, r3
    6284:	e5c03003 	strb	r3, [r0, #3]
    6288:	e55b1012 	ldrb	r1, [fp, #-18]
    628c:	e3a03000 	mov	r3, #0
    6290:	e1a02003 	mov	r2, r3
    6294:	e1a03001 	mov	r3, r1
    6298:	e1823003 	orr	r3, r2, r3
    629c:	e5c03004 	strb	r3, [r0, #4]
    62a0:	e55b1011 	ldrb	r1, [fp, #-17]
    62a4:	e3a03000 	mov	r3, #0
    62a8:	e1a02003 	mov	r2, r3
    62ac:	e1a03001 	mov	r3, r1
    62b0:	e1823003 	orr	r3, r2, r3
    62b4:	e5c03005 	strb	r3, [r0, #5]
	if (jetiValues[id].varType!=JETI_VART_22B)
    62b8:	e55b2010 	ldrb	r2, [fp, #-16]
    62bc:	e59f107c 	ldr	r1, [pc, #124]	; 6340 <jetiSetValue22B+0x174>
    62c0:	e3a00010 	mov	r0, #16
    62c4:	e1a03002 	mov	r3, r2
    62c8:	e1a03103 	lsl	r3, r3, #2
    62cc:	e0833002 	add	r3, r3, r2
    62d0:	e1a03083 	lsl	r3, r3, #1
    62d4:	e0833002 	add	r3, r3, r2
    62d8:	e1a03083 	lsl	r3, r3, #1
    62dc:	e0833001 	add	r3, r3, r1
    62e0:	e0833000 	add	r3, r3, r0
    62e4:	e5d33000 	ldrb	r3, [r3]
    62e8:	e3530034 	cmp	r3, #52	; 0x34
    62ec:	0a00000c 	beq	6324 <jetiSetValue22B+0x158>
	{
		jetiValues[id].varType=JETI_VART_22B;
    62f0:	e55b2010 	ldrb	r2, [fp, #-16]
    62f4:	e59f1044 	ldr	r1, [pc, #68]	; 6340 <jetiSetValue22B+0x174>
    62f8:	e3a00010 	mov	r0, #16
    62fc:	e1a03002 	mov	r3, r2
    6300:	e1a03103 	lsl	r3, r3, #2
    6304:	e0833002 	add	r3, r3, r2
    6308:	e1a03083 	lsl	r3, r3, #1
    630c:	e0833002 	add	r3, r3, r2
    6310:	e1a03083 	lsl	r3, r3, #1
    6314:	e0833001 	add	r3, r3, r1
    6318:	e0832000 	add	r2, r3, r0
    631c:	e3a03034 	mov	r3, #52	; 0x34
    6320:	e5c23000 	strb	r3, [r2]
	}

	return JETI_NO_ERROR;
    6324:	e3a03000 	mov	r3, #0
    6328:	e50b3018 	str	r3, [fp, #-24]
    632c:	e51b3018 	ldr	r3, [fp, #-24]
}
    6330:	e1a00003 	mov	r0, r3
    6334:	e24bd00c 	sub	sp, fp, #12
    6338:	e89d6800 	ldm	sp, {fp, sp, lr}
    633c:	e12fff1e 	bx	lr
    6340:	40001dbc 	.word	0x40001dbc

00006344 <jetiSetValue6B>:

unsigned char jetiSetValue6B(unsigned char id, int value)
{
    6344:	e1a0c00d 	mov	ip, sp
    6348:	e92dd800 	push	{fp, ip, lr, pc}
    634c:	e24cb004 	sub	fp, ip, #4
    6350:	e24dd00c 	sub	sp, sp, #12
    6354:	e1a03000 	mov	r3, r0
    6358:	e50b1014 	str	r1, [fp, #-20]
    635c:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    6360:	e55b3010 	ldrb	r3, [fp, #-16]
    6364:	e353000e 	cmp	r3, #14
    6368:	9a000002 	bls	6378 <jetiSetValue6B+0x34>
		return JETI_ERROR_ID_RANGE;
    636c:	e3a03001 	mov	r3, #1
    6370:	e50b3018 	str	r3, [fp, #-24]
    6374:	ea000048 	b	649c <jetiSetValue6B+0x158>

	if ((value>=(1<<7)) || (value<=-(1<<7)))
    6378:	e51b3014 	ldr	r3, [fp, #-20]
    637c:	e353007f 	cmp	r3, #127	; 0x7f
    6380:	ca000002 	bgt	6390 <jetiSetValue6B+0x4c>
    6384:	e51b3014 	ldr	r3, [fp, #-20]
    6388:	e3730080 	cmn	r3, #128	; 0x80
    638c:	ca000002 	bgt	639c <jetiSetValue6B+0x58>
		return JETI_ERROR_VALUE_RANGE;
    6390:	e3a03020 	mov	r3, #32
    6394:	e50b3018 	str	r3, [fp, #-24]
    6398:	ea00003f 	b	649c <jetiSetValue6B+0x158>

	jetiValues[id].value=value;
    639c:	e55b2010 	ldrb	r2, [fp, #-16]
    63a0:	e59f1108 	ldr	r1, [pc, #264]	; 64b0 <jetiSetValue6B+0x16c>
    63a4:	e3a00010 	mov	r0, #16
    63a8:	e1a03002 	mov	r3, r2
    63ac:	e1a03103 	lsl	r3, r3, #2
    63b0:	e0833002 	add	r3, r3, r2
    63b4:	e1a03083 	lsl	r3, r3, #1
    63b8:	e0833002 	add	r3, r3, r2
    63bc:	e1a03083 	lsl	r3, r3, #1
    63c0:	e0833001 	add	r3, r3, r1
    63c4:	e0830000 	add	r0, r3, r0
    63c8:	e55b1014 	ldrb	r1, [fp, #-20]
    63cc:	e3a03000 	mov	r3, #0
    63d0:	e1a02003 	mov	r2, r3
    63d4:	e1a03001 	mov	r3, r1
    63d8:	e1823003 	orr	r3, r2, r3
    63dc:	e5c03002 	strb	r3, [r0, #2]
    63e0:	e55b1013 	ldrb	r1, [fp, #-19]
    63e4:	e3a03000 	mov	r3, #0
    63e8:	e1a02003 	mov	r2, r3
    63ec:	e1a03001 	mov	r3, r1
    63f0:	e1823003 	orr	r3, r2, r3
    63f4:	e5c03003 	strb	r3, [r0, #3]
    63f8:	e55b1012 	ldrb	r1, [fp, #-18]
    63fc:	e3a03000 	mov	r3, #0
    6400:	e1a02003 	mov	r2, r3
    6404:	e1a03001 	mov	r3, r1
    6408:	e1823003 	orr	r3, r2, r3
    640c:	e5c03004 	strb	r3, [r0, #4]
    6410:	e55b1011 	ldrb	r1, [fp, #-17]
    6414:	e3a03000 	mov	r3, #0
    6418:	e1a02003 	mov	r2, r3
    641c:	e1a03001 	mov	r3, r1
    6420:	e1823003 	orr	r3, r2, r3
    6424:	e5c03005 	strb	r3, [r0, #5]
	if (jetiValues[id].varType!=JETI_VART_6B)
    6428:	e55b2010 	ldrb	r2, [fp, #-16]
    642c:	e59f107c 	ldr	r1, [pc, #124]	; 64b0 <jetiSetValue6B+0x16c>
    6430:	e3a00010 	mov	r0, #16
    6434:	e1a03002 	mov	r3, r2
    6438:	e1a03103 	lsl	r3, r3, #2
    643c:	e0833002 	add	r3, r3, r2
    6440:	e1a03083 	lsl	r3, r3, #1
    6444:	e0833002 	add	r3, r3, r2
    6448:	e1a03083 	lsl	r3, r3, #1
    644c:	e0833001 	add	r3, r3, r1
    6450:	e0833000 	add	r3, r3, r0
    6454:	e5d33000 	ldrb	r3, [r3]
    6458:	e3530010 	cmp	r3, #16
    645c:	0a00000c 	beq	6494 <jetiSetValue6B+0x150>
	{
		jetiValues[id].varType=JETI_VART_6B;
    6460:	e55b2010 	ldrb	r2, [fp, #-16]
    6464:	e59f1044 	ldr	r1, [pc, #68]	; 64b0 <jetiSetValue6B+0x16c>
    6468:	e3a00010 	mov	r0, #16
    646c:	e1a03002 	mov	r3, r2
    6470:	e1a03103 	lsl	r3, r3, #2
    6474:	e0833002 	add	r3, r3, r2
    6478:	e1a03083 	lsl	r3, r3, #1
    647c:	e0833002 	add	r3, r3, r2
    6480:	e1a03083 	lsl	r3, r3, #1
    6484:	e0833001 	add	r3, r3, r1
    6488:	e0832000 	add	r2, r3, r0
    648c:	e3a03010 	mov	r3, #16
    6490:	e5c23000 	strb	r3, [r2]
	}

	return JETI_NO_ERROR;
    6494:	e3a03000 	mov	r3, #0
    6498:	e50b3018 	str	r3, [fp, #-24]
    649c:	e51b3018 	ldr	r3, [fp, #-24]
}
    64a0:	e1a00003 	mov	r0, r3
    64a4:	e24bd00c 	sub	sp, fp, #12
    64a8:	e89d6800 	ldm	sp, {fp, sp, lr}
    64ac:	e12fff1e 	bx	lr
    64b0:	40001dbc 	.word	0x40001dbc

000064b4 <jetiSetValue14B>:

unsigned char jetiSetValue14B(unsigned char id, int value)
{
    64b4:	e1a0c00d 	mov	ip, sp
    64b8:	e92dd800 	push	{fp, ip, lr, pc}
    64bc:	e24cb004 	sub	fp, ip, #4
    64c0:	e24dd00c 	sub	sp, sp, #12
    64c4:	e1a03000 	mov	r3, r0
    64c8:	e50b1014 	str	r1, [fp, #-20]
    64cc:	e54b3010 	strb	r3, [fp, #-16]
	if (id>14)
    64d0:	e55b3010 	ldrb	r3, [fp, #-16]
    64d4:	e353000e 	cmp	r3, #14
    64d8:	9a000002 	bls	64e8 <jetiSetValue14B+0x34>
		return JETI_ERROR_ID_RANGE;
    64dc:	e3a03001 	mov	r3, #1
    64e0:	e50b3018 	str	r3, [fp, #-24]
    64e4:	ea00004a 	b	6614 <jetiSetValue14B+0x160>

	if ((value>=(1<<15)) || (value<=-(1<<15)))
    64e8:	e51b2014 	ldr	r2, [fp, #-20]
    64ec:	e3a03c7f 	mov	r3, #32512	; 0x7f00
    64f0:	e28330ff 	add	r3, r3, #255	; 0xff
    64f4:	e1520003 	cmp	r2, r3
    64f8:	ca000002 	bgt	6508 <jetiSetValue14B+0x54>
    64fc:	e51b3014 	ldr	r3, [fp, #-20]
    6500:	e3730902 	cmn	r3, #32768	; 0x8000
    6504:	ca000002 	bgt	6514 <jetiSetValue14B+0x60>
		return JETI_ERROR_VALUE_RANGE;
    6508:	e3a03020 	mov	r3, #32
    650c:	e50b3018 	str	r3, [fp, #-24]
    6510:	ea00003f 	b	6614 <jetiSetValue14B+0x160>

	jetiValues[id].value=value;
    6514:	e55b2010 	ldrb	r2, [fp, #-16]
    6518:	e59f1108 	ldr	r1, [pc, #264]	; 6628 <jetiSetValue14B+0x174>
    651c:	e3a00010 	mov	r0, #16
    6520:	e1a03002 	mov	r3, r2
    6524:	e1a03103 	lsl	r3, r3, #2
    6528:	e0833002 	add	r3, r3, r2
    652c:	e1a03083 	lsl	r3, r3, #1
    6530:	e0833002 	add	r3, r3, r2
    6534:	e1a03083 	lsl	r3, r3, #1
    6538:	e0833001 	add	r3, r3, r1
    653c:	e0830000 	add	r0, r3, r0
    6540:	e55b1014 	ldrb	r1, [fp, #-20]
    6544:	e3a03000 	mov	r3, #0
    6548:	e1a02003 	mov	r2, r3
    654c:	e1a03001 	mov	r3, r1
    6550:	e1823003 	orr	r3, r2, r3
    6554:	e5c03002 	strb	r3, [r0, #2]
    6558:	e55b1013 	ldrb	r1, [fp, #-19]
    655c:	e3a03000 	mov	r3, #0
    6560:	e1a02003 	mov	r2, r3
    6564:	e1a03001 	mov	r3, r1
    6568:	e1823003 	orr	r3, r2, r3
    656c:	e5c03003 	strb	r3, [r0, #3]
    6570:	e55b1012 	ldrb	r1, [fp, #-18]
    6574:	e3a03000 	mov	r3, #0
    6578:	e1a02003 	mov	r2, r3
    657c:	e1a03001 	mov	r3, r1
    6580:	e1823003 	orr	r3, r2, r3
    6584:	e5c03004 	strb	r3, [r0, #4]
    6588:	e55b1011 	ldrb	r1, [fp, #-17]
    658c:	e3a03000 	mov	r3, #0
    6590:	e1a02003 	mov	r2, r3
    6594:	e1a03001 	mov	r3, r1
    6598:	e1823003 	orr	r3, r2, r3
    659c:	e5c03005 	strb	r3, [r0, #5]
	if (jetiValues[id].varType!=JETI_VART_14B)
    65a0:	e55b2010 	ldrb	r2, [fp, #-16]
    65a4:	e59f107c 	ldr	r1, [pc, #124]	; 6628 <jetiSetValue14B+0x174>
    65a8:	e3a00010 	mov	r0, #16
    65ac:	e1a03002 	mov	r3, r2
    65b0:	e1a03103 	lsl	r3, r3, #2
    65b4:	e0833002 	add	r3, r3, r2
    65b8:	e1a03083 	lsl	r3, r3, #1
    65bc:	e0833002 	add	r3, r3, r2
    65c0:	e1a03083 	lsl	r3, r3, #1
    65c4:	e0833001 	add	r3, r3, r1
    65c8:	e0833000 	add	r3, r3, r0
    65cc:	e5d33000 	ldrb	r3, [r3]
    65d0:	e3530021 	cmp	r3, #33	; 0x21
    65d4:	0a00000c 	beq	660c <jetiSetValue14B+0x158>
	{
		jetiValues[id].varType=JETI_VART_14B;
    65d8:	e55b2010 	ldrb	r2, [fp, #-16]
    65dc:	e59f1044 	ldr	r1, [pc, #68]	; 6628 <jetiSetValue14B+0x174>
    65e0:	e3a00010 	mov	r0, #16
    65e4:	e1a03002 	mov	r3, r2
    65e8:	e1a03103 	lsl	r3, r3, #2
    65ec:	e0833002 	add	r3, r3, r2
    65f0:	e1a03083 	lsl	r3, r3, #1
    65f4:	e0833002 	add	r3, r3, r2
    65f8:	e1a03083 	lsl	r3, r3, #1
    65fc:	e0833001 	add	r3, r3, r1
    6600:	e0832000 	add	r2, r3, r0
    6604:	e3a03021 	mov	r3, #33	; 0x21
    6608:	e5c23000 	strb	r3, [r2]
	}

	return JETI_NO_ERROR;
    660c:	e3a03000 	mov	r3, #0
    6610:	e50b3018 	str	r3, [fp, #-24]
    6614:	e51b3018 	ldr	r3, [fp, #-24]

}
    6618:	e1a00003 	mov	r0, r3
    661c:	e24bd00c 	sub	sp, fp, #12
    6620:	e89d6800 	ldm	sp, {fp, sp, lr}
    6624:	e12fff1e 	bx	lr
    6628:	40001dbc 	.word	0x40001dbc

0000662c <jetiSetValueTime>:

unsigned char jetiSetValueTime(unsigned char id, unsigned char hours, unsigned char minutes, unsigned char seconds)
{
    662c:	e1a0c00d 	mov	ip, sp
    6630:	e92dd800 	push	{fp, ip, lr, pc}
    6634:	e24cb004 	sub	fp, ip, #4
    6638:	e24dd018 	sub	sp, sp, #24
    663c:	e1a0c003 	mov	ip, r3
    6640:	e1a03000 	mov	r3, r0
    6644:	e54b3014 	strb	r3, [fp, #-20]
    6648:	e1a03001 	mov	r3, r1
    664c:	e54b3018 	strb	r3, [fp, #-24]
    6650:	e1a03002 	mov	r3, r2
    6654:	e54b301c 	strb	r3, [fp, #-28]
    6658:	e1a0300c 	mov	r3, ip
    665c:	e54b3020 	strb	r3, [fp, #-32]
	unsigned int value;
	if (id>14)
    6660:	e55b3014 	ldrb	r3, [fp, #-20]
    6664:	e353000e 	cmp	r3, #14
    6668:	9a000002 	bls	6678 <jetiSetValueTime+0x4c>
		return JETI_ERROR_ID_RANGE;
    666c:	e3a03001 	mov	r3, #1
    6670:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6674:	ea000058 	b	67dc <jetiSetValueTime+0x1b0>
	if (seconds>59)
    6678:	e55b3020 	ldrb	r3, [fp, #-32]
    667c:	e353003b 	cmp	r3, #59	; 0x3b
    6680:	9a000002 	bls	6690 <jetiSetValueTime+0x64>
		return JETI_ERROR_SECOND;
    6684:	e3a03046 	mov	r3, #70	; 0x46
    6688:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    668c:	ea000052 	b	67dc <jetiSetValueTime+0x1b0>
	if (minutes>59)
    6690:	e55b301c 	ldrb	r3, [fp, #-28]
    6694:	e353003b 	cmp	r3, #59	; 0x3b
    6698:	9a000002 	bls	66a8 <jetiSetValueTime+0x7c>
		return JETI_ERROR_MINUTE;
    669c:	e3a03045 	mov	r3, #69	; 0x45
    66a0:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    66a4:	ea00004c 	b	67dc <jetiSetValueTime+0x1b0>
	if (hours>23)
    66a8:	e55b3018 	ldrb	r3, [fp, #-24]
    66ac:	e3530017 	cmp	r3, #23
    66b0:	9a000002 	bls	66c0 <jetiSetValueTime+0x94>
		return JETI_ERROR_HOUR;
    66b4:	e3a03044 	mov	r3, #68	; 0x44
    66b8:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    66bc:	ea000046 	b	67dc <jetiSetValueTime+0x1b0>

	value=seconds;
    66c0:	e55b3020 	ldrb	r3, [fp, #-32]
    66c4:	e50b3010 	str	r3, [fp, #-16]
	value|=minutes<<8;
    66c8:	e55b301c 	ldrb	r3, [fp, #-28]
    66cc:	e1a03403 	lsl	r3, r3, #8
    66d0:	e1a02003 	mov	r2, r3
    66d4:	e51b3010 	ldr	r3, [fp, #-16]
    66d8:	e1833002 	orr	r3, r3, r2
    66dc:	e50b3010 	str	r3, [fp, #-16]
	value|=hours<<16;
    66e0:	e55b3018 	ldrb	r3, [fp, #-24]
    66e4:	e1a03803 	lsl	r3, r3, #16
    66e8:	e1a02003 	mov	r2, r3
    66ec:	e51b3010 	ldr	r3, [fp, #-16]
    66f0:	e1833002 	orr	r3, r3, r2
    66f4:	e50b3010 	str	r3, [fp, #-16]

	jetiValues[id].value=value;
    66f8:	e55b2014 	ldrb	r2, [fp, #-20]
    66fc:	e51b0010 	ldr	r0, [fp, #-16]
    6700:	e59f10e8 	ldr	r1, [pc, #232]	; 67f0 <jetiSetValueTime+0x1c4>
    6704:	e3a0c010 	mov	ip, #16
    6708:	e1a03002 	mov	r3, r2
    670c:	e1a03103 	lsl	r3, r3, #2
    6710:	e0833002 	add	r3, r3, r2
    6714:	e1a03083 	lsl	r3, r3, #1
    6718:	e0833002 	add	r3, r3, r2
    671c:	e1a03083 	lsl	r3, r3, #1
    6720:	e0833001 	add	r3, r3, r1
    6724:	e083c00c 	add	ip, r3, ip
    6728:	e20010ff 	and	r1, r0, #255	; 0xff
    672c:	e3a03000 	mov	r3, #0
    6730:	e1a02003 	mov	r2, r3
    6734:	e1a03001 	mov	r3, r1
    6738:	e1823003 	orr	r3, r2, r3
    673c:	e5cc3002 	strb	r3, [ip, #2]
    6740:	e1a03420 	lsr	r3, r0, #8
    6744:	e20310ff 	and	r1, r3, #255	; 0xff
    6748:	e3a03000 	mov	r3, #0
    674c:	e1a02003 	mov	r2, r3
    6750:	e1a03001 	mov	r3, r1
    6754:	e1823003 	orr	r3, r2, r3
    6758:	e5cc3003 	strb	r3, [ip, #3]
    675c:	e1a03820 	lsr	r3, r0, #16
    6760:	e20310ff 	and	r1, r3, #255	; 0xff
    6764:	e3a03000 	mov	r3, #0
    6768:	e1a02003 	mov	r2, r3
    676c:	e1a03001 	mov	r3, r1
    6770:	e1823003 	orr	r3, r2, r3
    6774:	e5cc3004 	strb	r3, [ip, #4]
    6778:	e1a01c20 	lsr	r1, r0, #24
    677c:	e3a03000 	mov	r3, #0
    6780:	e1a02003 	mov	r2, r3
    6784:	e1a03001 	mov	r3, r1
    6788:	e1823003 	orr	r3, r2, r3
    678c:	e5cc3005 	strb	r3, [ip, #5]
	jetiSetDecimalPoint(id,0); //time
    6790:	e55b3014 	ldrb	r3, [fp, #-20]
    6794:	e1a00003 	mov	r0, r3
    6798:	e3a01000 	mov	r1, #0
    679c:	ebfffe04 	bl	5fb4 <jetiSetDecimalPoint>
	jetiValues[id].varType=JETI_VART_DATETIME;
    67a0:	e55b2014 	ldrb	r2, [fp, #-20]
    67a4:	e59f1044 	ldr	r1, [pc, #68]	; 67f0 <jetiSetValueTime+0x1c4>
    67a8:	e3a00010 	mov	r0, #16
    67ac:	e1a03002 	mov	r3, r2
    67b0:	e1a03103 	lsl	r3, r3, #2
    67b4:	e0833002 	add	r3, r3, r2
    67b8:	e1a03083 	lsl	r3, r3, #1
    67bc:	e0833002 	add	r3, r3, r2
    67c0:	e1a03083 	lsl	r3, r3, #1
    67c4:	e0833001 	add	r3, r3, r1
    67c8:	e0832000 	add	r2, r3, r0
    67cc:	e3a03035 	mov	r3, #53	; 0x35
    67d0:	e5c23000 	strb	r3, [r2]

	return JETI_NO_ERROR;
    67d4:	e3a03000 	mov	r3, #0
    67d8:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    67dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
}
    67e0:	e1a00003 	mov	r0, r3
    67e4:	e24bd00c 	sub	sp, fp, #12
    67e8:	e89d6800 	ldm	sp, {fp, sp, lr}
    67ec:	e12fff1e 	bx	lr
    67f0:	40001dbc 	.word	0x40001dbc

000067f4 <jetiSetValueDate>:

unsigned char jetiSetValueDate(unsigned char id, unsigned char day, unsigned char month, unsigned short year)
{
    67f4:	e1a0c00d 	mov	ip, sp
    67f8:	e92dd800 	push	{fp, ip, lr, pc}
    67fc:	e24cb004 	sub	fp, ip, #4
    6800:	e24dd018 	sub	sp, sp, #24
    6804:	e1a0c003 	mov	ip, r3
    6808:	e1a03000 	mov	r3, r0
    680c:	e54b3014 	strb	r3, [fp, #-20]
    6810:	e1a03001 	mov	r3, r1
    6814:	e54b3018 	strb	r3, [fp, #-24]
    6818:	e1a03002 	mov	r3, r2
    681c:	e54b301c 	strb	r3, [fp, #-28]
    6820:	e14bc2b0 	strh	ip, [fp, #-32]	; 0xffffffe0
	unsigned int value;
	if (id>14)
    6824:	e55b3014 	ldrb	r3, [fp, #-20]
    6828:	e353000e 	cmp	r3, #14
    682c:	9a000002 	bls	683c <jetiSetValueDate+0x48>
		return JETI_ERROR_ID_RANGE;
    6830:	e3a03001 	mov	r3, #1
    6834:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6838:	ea000064 	b	69d0 <jetiSetValueDate+0x1dc>

	if (year>2000)
    683c:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
    6840:	e3530e7d 	cmp	r3, #2000	; 0x7d0
    6844:	9a000002 	bls	6854 <jetiSetValueDate+0x60>
		year-=2000;
    6848:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
    684c:	e2433e7d 	sub	r3, r3, #2000	; 0x7d0
    6850:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
	if (year>100)
    6854:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
    6858:	e3530064 	cmp	r3, #100	; 0x64
    685c:	9a000002 	bls	686c <jetiSetValueDate+0x78>
		return JETI_ERROR_YEAR;
    6860:	e3a03041 	mov	r3, #65	; 0x41
    6864:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6868:	ea000058 	b	69d0 <jetiSetValueDate+0x1dc>
	if ((month<1)||(month>12))
    686c:	e55b301c 	ldrb	r3, [fp, #-28]
    6870:	e3530000 	cmp	r3, #0
    6874:	0a000002 	beq	6884 <jetiSetValueDate+0x90>
    6878:	e55b301c 	ldrb	r3, [fp, #-28]
    687c:	e353000c 	cmp	r3, #12
    6880:	9a000002 	bls	6890 <jetiSetValueDate+0x9c>
		return JETI_ERROR_MONTH;
    6884:	e3a03042 	mov	r3, #66	; 0x42
    6888:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    688c:	ea00004f 	b	69d0 <jetiSetValueDate+0x1dc>
	if ((day<1)||(day>31))
    6890:	e55b3018 	ldrb	r3, [fp, #-24]
    6894:	e3530000 	cmp	r3, #0
    6898:	0a000002 	beq	68a8 <jetiSetValueDate+0xb4>
    689c:	e55b3018 	ldrb	r3, [fp, #-24]
    68a0:	e353001f 	cmp	r3, #31
    68a4:	9a000002 	bls	68b4 <jetiSetValueDate+0xc0>
		return JETI_ERROR_DAY;
    68a8:	e3a03043 	mov	r3, #67	; 0x43
    68ac:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    68b0:	ea000046 	b	69d0 <jetiSetValueDate+0x1dc>

	value=year;
    68b4:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
    68b8:	e50b3010 	str	r3, [fp, #-16]
	value|=month<<8;
    68bc:	e55b301c 	ldrb	r3, [fp, #-28]
    68c0:	e1a03403 	lsl	r3, r3, #8
    68c4:	e1a02003 	mov	r2, r3
    68c8:	e51b3010 	ldr	r3, [fp, #-16]
    68cc:	e1833002 	orr	r3, r3, r2
    68d0:	e50b3010 	str	r3, [fp, #-16]
	value|=day<<16;
    68d4:	e55b3018 	ldrb	r3, [fp, #-24]
    68d8:	e1a03803 	lsl	r3, r3, #16
    68dc:	e1a02003 	mov	r2, r3
    68e0:	e51b3010 	ldr	r3, [fp, #-16]
    68e4:	e1833002 	orr	r3, r3, r2
    68e8:	e50b3010 	str	r3, [fp, #-16]

	jetiValues[id].value=value;
    68ec:	e55b2014 	ldrb	r2, [fp, #-20]
    68f0:	e51b0010 	ldr	r0, [fp, #-16]
    68f4:	e59f10e8 	ldr	r1, [pc, #232]	; 69e4 <jetiSetValueDate+0x1f0>
    68f8:	e3a0c010 	mov	ip, #16
    68fc:	e1a03002 	mov	r3, r2
    6900:	e1a03103 	lsl	r3, r3, #2
    6904:	e0833002 	add	r3, r3, r2
    6908:	e1a03083 	lsl	r3, r3, #1
    690c:	e0833002 	add	r3, r3, r2
    6910:	e1a03083 	lsl	r3, r3, #1
    6914:	e0833001 	add	r3, r3, r1
    6918:	e083c00c 	add	ip, r3, ip
    691c:	e20010ff 	and	r1, r0, #255	; 0xff
    6920:	e3a03000 	mov	r3, #0
    6924:	e1a02003 	mov	r2, r3
    6928:	e1a03001 	mov	r3, r1
    692c:	e1823003 	orr	r3, r2, r3
    6930:	e5cc3002 	strb	r3, [ip, #2]
    6934:	e1a03420 	lsr	r3, r0, #8
    6938:	e20310ff 	and	r1, r3, #255	; 0xff
    693c:	e3a03000 	mov	r3, #0
    6940:	e1a02003 	mov	r2, r3
    6944:	e1a03001 	mov	r3, r1
    6948:	e1823003 	orr	r3, r2, r3
    694c:	e5cc3003 	strb	r3, [ip, #3]
    6950:	e1a03820 	lsr	r3, r0, #16
    6954:	e20310ff 	and	r1, r3, #255	; 0xff
    6958:	e3a03000 	mov	r3, #0
    695c:	e1a02003 	mov	r2, r3
    6960:	e1a03001 	mov	r3, r1
    6964:	e1823003 	orr	r3, r2, r3
    6968:	e5cc3004 	strb	r3, [ip, #4]
    696c:	e1a01c20 	lsr	r1, r0, #24
    6970:	e3a03000 	mov	r3, #0
    6974:	e1a02003 	mov	r2, r3
    6978:	e1a03001 	mov	r3, r1
    697c:	e1823003 	orr	r3, r2, r3
    6980:	e5cc3005 	strb	r3, [ip, #5]
	jetiSetDecimalPoint(id,1); //time
    6984:	e55b3014 	ldrb	r3, [fp, #-20]
    6988:	e1a00003 	mov	r0, r3
    698c:	e3a01001 	mov	r1, #1
    6990:	ebfffd87 	bl	5fb4 <jetiSetDecimalPoint>
	jetiValues[id].varType=JETI_VART_DATETIME;
    6994:	e55b2014 	ldrb	r2, [fp, #-20]
    6998:	e59f1044 	ldr	r1, [pc, #68]	; 69e4 <jetiSetValueDate+0x1f0>
    699c:	e3a00010 	mov	r0, #16
    69a0:	e1a03002 	mov	r3, r2
    69a4:	e1a03103 	lsl	r3, r3, #2
    69a8:	e0833002 	add	r3, r3, r2
    69ac:	e1a03083 	lsl	r3, r3, #1
    69b0:	e0833002 	add	r3, r3, r2
    69b4:	e1a03083 	lsl	r3, r3, #1
    69b8:	e0833001 	add	r3, r3, r1
    69bc:	e0832000 	add	r2, r3, r0
    69c0:	e3a03035 	mov	r3, #53	; 0x35
    69c4:	e5c23000 	strb	r3, [r2]

	return JETI_NO_ERROR;
    69c8:	e3a03000 	mov	r3, #0
    69cc:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    69d0:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
}
    69d4:	e1a00003 	mov	r0, r3
    69d8:	e24bd00c 	sub	sp, fp, #12
    69dc:	e89d6800 	ldm	sp, {fp, sp, lr}
    69e0:	e12fff1e 	bx	lr
    69e4:	40001dbc 	.word	0x40001dbc

000069e8 <jetiSetTextDisplay>:

unsigned char jetiSetTextDisplay(char * text)
{
    69e8:	e1a0c00d 	mov	ip, sp
    69ec:	e92dd800 	push	{fp, ip, lr, pc}
    69f0:	e24cb004 	sub	fp, ip, #4
    69f4:	e24dd00c 	sub	sp, sp, #12
    69f8:	e50b0018 	str	r0, [fp, #-24]
	unsigned char textLength=0;
    69fc:	e3a03000 	mov	r3, #0
    6a00:	e54b3013 	strb	r3, [fp, #-19]
	unsigned char error=JETI_NO_ERROR;
    6a04:	e3a03000 	mov	r3, #0
    6a08:	e54b3012 	strb	r3, [fp, #-18]
	unsigned char textChanged=0;
    6a0c:	e3a03000 	mov	r3, #0
    6a10:	e54b3011 	strb	r3, [fp, #-17]
	int i;

	for (i=0;i<33;i++)
    6a14:	e3a03000 	mov	r3, #0
    6a18:	e50b3010 	str	r3, [fp, #-16]
    6a1c:	ea000015 	b	6a78 <jetiSetTextDisplay+0x90>
	{
		if (text[i]!=jetiDisplayText[i])
    6a20:	e51b3010 	ldr	r3, [fp, #-16]
    6a24:	e1a02003 	mov	r2, r3
    6a28:	e51b3018 	ldr	r3, [fp, #-24]
    6a2c:	e0823003 	add	r3, r2, r3
    6a30:	e5d31000 	ldrb	r1, [r3]
    6a34:	e51b2010 	ldr	r2, [fp, #-16]
    6a38:	e59f30ec 	ldr	r3, [pc, #236]	; 6b2c <jetiSetTextDisplay+0x144>
    6a3c:	e7d33002 	ldrb	r3, [r3, r2]
    6a40:	e1510003 	cmp	r1, r3
    6a44:	0a000001 	beq	6a50 <jetiSetTextDisplay+0x68>
			textChanged=1;
    6a48:	e3a03001 	mov	r3, #1
    6a4c:	e54b3011 	strb	r3, [fp, #-17]
		if (text[i]==0)
    6a50:	e51b3010 	ldr	r3, [fp, #-16]
    6a54:	e1a02003 	mov	r2, r3
    6a58:	e51b3018 	ldr	r3, [fp, #-24]
    6a5c:	e0823003 	add	r3, r2, r3
    6a60:	e5d33000 	ldrb	r3, [r3]
    6a64:	e3530000 	cmp	r3, #0
    6a68:	0a000005 	beq	6a84 <jetiSetTextDisplay+0x9c>
	unsigned char textLength=0;
	unsigned char error=JETI_NO_ERROR;
	unsigned char textChanged=0;
	int i;

	for (i=0;i<33;i++)
    6a6c:	e51b3010 	ldr	r3, [fp, #-16]
    6a70:	e2833001 	add	r3, r3, #1
    6a74:	e50b3010 	str	r3, [fp, #-16]
    6a78:	e51b3010 	ldr	r3, [fp, #-16]
    6a7c:	e3530020 	cmp	r3, #32
    6a80:	daffffe6 	ble	6a20 <jetiSetTextDisplay+0x38>
		if (text[i]!=jetiDisplayText[i])
			textChanged=1;
		if (text[i]==0)
			break;
	}
	if (i==32)
    6a84:	e51b3010 	ldr	r3, [fp, #-16]
    6a88:	e3530020 	cmp	r3, #32
    6a8c:	1a000001 	bne	6a98 <jetiSetTextDisplay+0xb0>
		error=JETI_ERROR_STRING_TEXT;
    6a90:	e3a03016 	mov	r3, #22
    6a94:	e54b3012 	strb	r3, [fp, #-18]

	textLength=i;
    6a98:	e51b3010 	ldr	r3, [fp, #-16]
    6a9c:	e54b3013 	strb	r3, [fp, #-19]
	memcpy(&jetiDisplayText[0],text,textLength);
    6aa0:	e55b1013 	ldrb	r1, [fp, #-19]
    6aa4:	e59f3080 	ldr	r3, [pc, #128]	; 6b2c <jetiSetTextDisplay+0x144>
    6aa8:	e51b2018 	ldr	r2, [fp, #-24]
    6aac:	e1a0c001 	mov	ip, r1
    6ab0:	e1a00003 	mov	r0, r3
    6ab4:	e1a01002 	mov	r1, r2
    6ab8:	e1a0200c 	mov	r2, ip
    6abc:	eb001bc1 	bl	d9c8 <__memcpy_from_arm>
	if (textLength<32)
    6ac0:	e55b3013 	ldrb	r3, [fp, #-19]
    6ac4:	e353001f 	cmp	r3, #31
    6ac8:	8a00000c 	bhi	6b00 <jetiSetTextDisplay+0x118>
		for (i=textLength;i<32;i++)
    6acc:	e55b3013 	ldrb	r3, [fp, #-19]
    6ad0:	e50b3010 	str	r3, [fp, #-16]
    6ad4:	ea000006 	b	6af4 <jetiSetTextDisplay+0x10c>
			jetiDisplayText[i]=0;
    6ad8:	e51b1010 	ldr	r1, [fp, #-16]
    6adc:	e59f2048 	ldr	r2, [pc, #72]	; 6b2c <jetiSetTextDisplay+0x144>
    6ae0:	e3a03000 	mov	r3, #0
    6ae4:	e7c23001 	strb	r3, [r2, r1]
		error=JETI_ERROR_STRING_TEXT;

	textLength=i;
	memcpy(&jetiDisplayText[0],text,textLength);
	if (textLength<32)
		for (i=textLength;i<32;i++)
    6ae8:	e51b3010 	ldr	r3, [fp, #-16]
    6aec:	e2833001 	add	r3, r3, #1
    6af0:	e50b3010 	str	r3, [fp, #-16]
    6af4:	e51b3010 	ldr	r3, [fp, #-16]
    6af8:	e353001f 	cmp	r3, #31
    6afc:	dafffff5 	ble	6ad8 <jetiSetTextDisplay+0xf0>
			jetiDisplayText[i]=0;

	if (textChanged)
    6b00:	e55b3011 	ldrb	r3, [fp, #-17]
    6b04:	e3530000 	cmp	r3, #0
    6b08:	0a000002 	beq	6b18 <jetiSetTextDisplay+0x130>
		jetiTriggerTextSync=1;
    6b0c:	e59f301c 	ldr	r3, [pc, #28]	; 6b30 <jetiSetTextDisplay+0x148>
    6b10:	e3a02001 	mov	r2, #1
    6b14:	e5c32000 	strb	r2, [r3]
	return error;
    6b18:	e55b3012 	ldrb	r3, [fp, #-18]
}
    6b1c:	e1a00003 	mov	r0, r3
    6b20:	e24bd00c 	sub	sp, fp, #12
    6b24:	e89d6800 	ldm	sp, {fp, sp, lr}
    6b28:	e12fff1e 	bx	lr
    6b2c:	40001d9c 	.word	0x40001d9c
    6b30:	40000a42 	.word	0x40000a42

00006b34 <jetiInitValue>:

unsigned char jetiInitValue(unsigned char id, char * description, char * unit)
{
    6b34:	e1a0c00d 	mov	ip, sp
    6b38:	e92dd800 	push	{fp, ip, lr, pc}
    6b3c:	e24cb004 	sub	fp, ip, #4
    6b40:	e24dd018 	sub	sp, sp, #24
    6b44:	e1a03000 	mov	r3, r0
    6b48:	e50b101c 	str	r1, [fp, #-28]
    6b4c:	e50b2020 	str	r2, [fp, #-32]
    6b50:	e54b3018 	strb	r3, [fp, #-24]
	unsigned char descLength=0;
    6b54:	e3a03000 	mov	r3, #0
    6b58:	e54b3013 	strb	r3, [fp, #-19]
	unsigned char unitLength=0;
    6b5c:	e3a03000 	mov	r3, #0
    6b60:	e54b3012 	strb	r3, [fp, #-18]
	unsigned char error=JETI_NO_ERROR;
    6b64:	e3a03000 	mov	r3, #0
    6b68:	e54b3011 	strb	r3, [fp, #-17]

	int i;

	if (id>14)
    6b6c:	e55b3018 	ldrb	r3, [fp, #-24]
    6b70:	e353000e 	cmp	r3, #14
    6b74:	9a000002 	bls	6b84 <jetiInitValue+0x50>
		return JETI_ERROR_ID_RANGE;
    6b78:	e3a03001 	mov	r3, #1
    6b7c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6b80:	ea000068 	b	6d28 <jetiInitValue+0x1f4>

	for (i=0;i<11;i++)
    6b84:	e3a03000 	mov	r3, #0
    6b88:	e50b3010 	str	r3, [fp, #-16]
    6b8c:	ea000009 	b	6bb8 <jetiInitValue+0x84>
		if (description[i]==0)
    6b90:	e51b3010 	ldr	r3, [fp, #-16]
    6b94:	e1a02003 	mov	r2, r3
    6b98:	e51b301c 	ldr	r3, [fp, #-28]
    6b9c:	e0823003 	add	r3, r2, r3
    6ba0:	e5d33000 	ldrb	r3, [r3]
    6ba4:	e3530000 	cmp	r3, #0
    6ba8:	0a000005 	beq	6bc4 <jetiInitValue+0x90>
	int i;

	if (id>14)
		return JETI_ERROR_ID_RANGE;

	for (i=0;i<11;i++)
    6bac:	e51b3010 	ldr	r3, [fp, #-16]
    6bb0:	e2833001 	add	r3, r3, #1
    6bb4:	e50b3010 	str	r3, [fp, #-16]
    6bb8:	e51b3010 	ldr	r3, [fp, #-16]
    6bbc:	e353000a 	cmp	r3, #10
    6bc0:	dafffff2 	ble	6b90 <jetiInitValue+0x5c>
		if (description[i]==0)
			break;
	if (i==10)
    6bc4:	e51b3010 	ldr	r3, [fp, #-16]
    6bc8:	e353000a 	cmp	r3, #10
    6bcc:	1a000001 	bne	6bd8 <jetiInitValue+0xa4>
		error=JETI_ERROR_STRING_DESC;
    6bd0:	e3a03014 	mov	r3, #20
    6bd4:	e54b3011 	strb	r3, [fp, #-17]
	descLength=i;
    6bd8:	e51b3010 	ldr	r3, [fp, #-16]
    6bdc:	e54b3013 	strb	r3, [fp, #-19]

	for (i=0;i<6;i++)
    6be0:	e3a03000 	mov	r3, #0
    6be4:	e50b3010 	str	r3, [fp, #-16]
    6be8:	ea000009 	b	6c14 <jetiInitValue+0xe0>
			if (unit[i]==0)
    6bec:	e51b3010 	ldr	r3, [fp, #-16]
    6bf0:	e1a02003 	mov	r2, r3
    6bf4:	e51b3020 	ldr	r3, [fp, #-32]
    6bf8:	e0823003 	add	r3, r2, r3
    6bfc:	e5d33000 	ldrb	r3, [r3]
    6c00:	e3530000 	cmp	r3, #0
    6c04:	0a000005 	beq	6c20 <jetiInitValue+0xec>
			break;
	if (i==10)
		error=JETI_ERROR_STRING_DESC;
	descLength=i;

	for (i=0;i<6;i++)
    6c08:	e51b3010 	ldr	r3, [fp, #-16]
    6c0c:	e2833001 	add	r3, r3, #1
    6c10:	e50b3010 	str	r3, [fp, #-16]
    6c14:	e51b3010 	ldr	r3, [fp, #-16]
    6c18:	e3530005 	cmp	r3, #5
    6c1c:	dafffff2 	ble	6bec <jetiInitValue+0xb8>
			if (unit[i]==0)
				break;
	if (i==5)
    6c20:	e51b3010 	ldr	r3, [fp, #-16]
    6c24:	e3530005 	cmp	r3, #5
    6c28:	1a000001 	bne	6c34 <jetiInitValue+0x100>
			error=JETI_ERROR_STRING_UNIT;
    6c2c:	e3a03015 	mov	r3, #21
    6c30:	e54b3011 	strb	r3, [fp, #-17]

	unitLength=i;
    6c34:	e51b3010 	ldr	r3, [fp, #-16]
    6c38:	e54b3012 	strb	r3, [fp, #-18]

	jetiValues[id].active=id+1;
    6c3c:	e55b2018 	ldrb	r2, [fp, #-24]
    6c40:	e55b3018 	ldrb	r3, [fp, #-24]
    6c44:	e2833001 	add	r3, r3, #1
    6c48:	e20310ff 	and	r1, r3, #255	; 0xff
    6c4c:	e59f00e8 	ldr	r0, [pc, #232]	; 6d3c <jetiInitValue+0x208>
    6c50:	e1a03002 	mov	r3, r2
    6c54:	e1a03103 	lsl	r3, r3, #2
    6c58:	e0833002 	add	r3, r3, r2
    6c5c:	e1a03083 	lsl	r3, r3, #1
    6c60:	e0833002 	add	r3, r3, r2
    6c64:	e1a03083 	lsl	r3, r3, #1
    6c68:	e0832000 	add	r2, r3, r0
    6c6c:	e1a03001 	mov	r3, r1
    6c70:	e5c23000 	strb	r3, [r2]
	memcpy(&jetiValues[id].name[0],description,descLength);
    6c74:	e55b2018 	ldrb	r2, [fp, #-24]
    6c78:	e1a03002 	mov	r3, r2
    6c7c:	e1a03103 	lsl	r3, r3, #2
    6c80:	e0833002 	add	r3, r3, r2
    6c84:	e1a03083 	lsl	r3, r3, #1
    6c88:	e0833002 	add	r3, r3, r2
    6c8c:	e1a02083 	lsl	r2, r3, #1
    6c90:	e59f30a4 	ldr	r3, [pc, #164]	; 6d3c <jetiInitValue+0x208>
    6c94:	e0823003 	add	r3, r2, r3
    6c98:	e2832001 	add	r2, r3, #1
    6c9c:	e55b1013 	ldrb	r1, [fp, #-19]
    6ca0:	e51b301c 	ldr	r3, [fp, #-28]
    6ca4:	e1a0c001 	mov	ip, r1
    6ca8:	e1a00002 	mov	r0, r2
    6cac:	e1a01003 	mov	r1, r3
    6cb0:	e1a0200c 	mov	r2, ip
    6cb4:	eb001b43 	bl	d9c8 <__memcpy_from_arm>
	memcpy(&jetiValues[id].unit[0],unit,unitLength);
    6cb8:	e55b2018 	ldrb	r2, [fp, #-24]
    6cbc:	e1a03002 	mov	r3, r2
    6cc0:	e1a03103 	lsl	r3, r3, #2
    6cc4:	e0833002 	add	r3, r3, r2
    6cc8:	e1a03083 	lsl	r3, r3, #1
    6ccc:	e0833002 	add	r3, r3, r2
    6cd0:	e1a03083 	lsl	r3, r3, #1
    6cd4:	e2832008 	add	r2, r3, #8
    6cd8:	e59f305c 	ldr	r3, [pc, #92]	; 6d3c <jetiInitValue+0x208>
    6cdc:	e0823003 	add	r3, r2, r3
    6ce0:	e2832003 	add	r2, r3, #3
    6ce4:	e55b1012 	ldrb	r1, [fp, #-18]
    6ce8:	e51b3020 	ldr	r3, [fp, #-32]
    6cec:	e1a0c001 	mov	ip, r1
    6cf0:	e1a00002 	mov	r0, r2
    6cf4:	e1a01003 	mov	r1, r3
    6cf8:	e1a0200c 	mov	r2, ip
    6cfc:	eb001b31 	bl	d9c8 <__memcpy_from_arm>
	jetiSetValue6B(id,0);
    6d00:	e55b3018 	ldrb	r3, [fp, #-24]
    6d04:	e1a00003 	mov	r0, r3
    6d08:	e3a01000 	mov	r1, #0
    6d0c:	ebfffd8c 	bl	6344 <jetiSetValue6B>
	jetiSetDecimalPoint(id,0);
    6d10:	e55b3018 	ldrb	r3, [fp, #-24]
    6d14:	e1a00003 	mov	r0, r3
    6d18:	e3a01000 	mov	r1, #0
    6d1c:	ebfffca4 	bl	5fb4 <jetiSetDecimalPoint>

	return error;
    6d20:	e55b3011 	ldrb	r3, [fp, #-17]
    6d24:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    6d28:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24

}
    6d2c:	e1a00003 	mov	r0, r3
    6d30:	e24bd00c 	sub	sp, fp, #12
    6d34:	e89d6800 	ldm	sp, {fp, sp, lr}
    6d38:	e12fff1e 	bx	lr
    6d3c:	40001dbc 	.word	0x40001dbc

00006d40 <ee_erase>:
/*                                                                     	*/
/* revision history:                                                   	*/
/* - Rev. 1.1 adds interrupt disable feature.							*/
/*                                                                     	*/
/************************************************************************/
void ee_erase(unsigned int command_ee,unsigned int result_ee[]){
    6d40:	e1a0c00d 	mov	ip, sp
    6d44:	e92dd800 	push	{fp, ip, lr, pc}
    6d48:	e24cb004 	sub	fp, ip, #4
    6d4c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    6d50:	e50b0034 	str	r0, [fp, #-52]	; 0x34
    6d54:	e50b1038 	str	r1, [fp, #-56]	; 0x38
	unsigned int command_iap[5];
	unsigned int result_iap[3];
	unsigned long int enabled_interrupts;

	enabled_interrupts = VICIntEnable;  //disable all interrupts
    6d58:	e3a03000 	mov	r3, #0
    6d5c:	e2433eff 	sub	r3, r3, #4080	; 0xff0
    6d60:	e5933000 	ldr	r3, [r3]
    6d64:	e50b3010 	str	r3, [fp, #-16]
	VICIntEnClr        = enabled_interrupts;
    6d68:	e3e03efe 	mvn	r3, #4064	; 0xfe0
    6d6c:	e243300b 	sub	r3, r3, #11
    6d70:	e51b2010 	ldr	r2, [fp, #-16]
    6d74:	e5832000 	str	r2, [r3]

	command_iap[0]=50;					//prepare sectors from EE_SEC_L to EE_SEC_H for erase
    6d78:	e3a03032 	mov	r3, #50	; 0x32
    6d7c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	command_iap[1]=EE_SEC_L;
    6d80:	e3a0300e 	mov	r3, #14
    6d84:	e50b3020 	str	r3, [fp, #-32]
	command_iap[2]=EE_SEC_H;
    6d88:	e3a0300e 	mov	r3, #14
    6d8c:	e50b301c 	str	r3, [fp, #-28]
	iap_entry=(IAP) IAP_LOCATION;
    6d90:	e59f20e0 	ldr	r2, [pc, #224]	; 6e78 <ee_erase+0x138>
    6d94:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    6d98:	e5823000 	str	r3, [r2]
	iap_entry(command_iap,result_iap);
    6d9c:	e59f30d4 	ldr	r3, [pc, #212]	; 6e78 <ee_erase+0x138>
    6da0:	e593c000 	ldr	ip, [r3]
    6da4:	e24b3024 	sub	r3, fp, #36	; 0x24
    6da8:	e24b2030 	sub	r2, fp, #48	; 0x30
    6dac:	e1a00003 	mov	r0, r3
    6db0:	e1a01002 	mov	r1, r2
    6db4:	e1a0e00f 	mov	lr, pc
    6db8:	e12fff1c 	bx	ip

	command_iap[0]=52;					//erase sectors from EE_SEC_L to EE_SEC_H
    6dbc:	e3a03034 	mov	r3, #52	; 0x34
    6dc0:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	command_iap[1]=EE_SEC_L;
    6dc4:	e3a0300e 	mov	r3, #14
    6dc8:	e50b3020 	str	r3, [fp, #-32]
	command_iap[2]=EE_SEC_H;
    6dcc:	e3a0300e 	mov	r3, #14
    6dd0:	e50b301c 	str	r3, [fp, #-28]
	command_iap[3]=EE_CCLK;
    6dd4:	e3a03cea 	mov	r3, #59904	; 0xea00
    6dd8:	e2833060 	add	r3, r3, #96	; 0x60
    6ddc:	e50b3018 	str	r3, [fp, #-24]
	iap_entry=(IAP) IAP_LOCATION;
    6de0:	e59f2090 	ldr	r2, [pc, #144]	; 6e78 <ee_erase+0x138>
    6de4:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    6de8:	e5823000 	str	r3, [r2]
	iap_entry(command_iap,result_iap);
    6dec:	e59f3084 	ldr	r3, [pc, #132]	; 6e78 <ee_erase+0x138>
    6df0:	e593c000 	ldr	ip, [r3]
    6df4:	e24b3024 	sub	r3, fp, #36	; 0x24
    6df8:	e24b2030 	sub	r2, fp, #48	; 0x30
    6dfc:	e1a00003 	mov	r0, r3
    6e00:	e1a01002 	mov	r1, r2
    6e04:	e1a0e00f 	mov	lr, pc
    6e08:	e12fff1c 	bx	ip

	command_iap[0]=53;					//blankcheck sectors from EE_SEC_L to EE_SEC_H
    6e0c:	e3a03035 	mov	r3, #53	; 0x35
    6e10:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	command_iap[1]=EE_SEC_L;
    6e14:	e3a0300e 	mov	r3, #14
    6e18:	e50b3020 	str	r3, [fp, #-32]
	command_iap[2]=EE_SEC_H;
    6e1c:	e3a0300e 	mov	r3, #14
    6e20:	e50b301c 	str	r3, [fp, #-28]
	iap_entry=(IAP) IAP_LOCATION;
    6e24:	e59f204c 	ldr	r2, [pc, #76]	; 6e78 <ee_erase+0x138>
    6e28:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    6e2c:	e5823000 	str	r3, [r2]
	iap_entry(command_iap,result_iap);
    6e30:	e59f3040 	ldr	r3, [pc, #64]	; 6e78 <ee_erase+0x138>
    6e34:	e593c000 	ldr	ip, [r3]
    6e38:	e24b3024 	sub	r3, fp, #36	; 0x24
    6e3c:	e24b2030 	sub	r2, fp, #48	; 0x30
    6e40:	e1a00003 	mov	r0, r3
    6e44:	e1a01002 	mov	r1, r2
    6e48:	e1a0e00f 	mov	lr, pc
    6e4c:	e12fff1c 	bx	ip

	VICIntEnable = enabled_interrupts;  //restore interrupt enable register
    6e50:	e3a03000 	mov	r3, #0
    6e54:	e2433eff 	sub	r3, r3, #4080	; 0xff0
    6e58:	e51b2010 	ldr	r2, [fp, #-16]
    6e5c:	e5832000 	str	r2, [r3]

	result_ee[0]=result_iap[0];
    6e60:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    6e64:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    6e68:	e5832000 	str	r2, [r3]
	return;
}
    6e6c:	e24bd00c 	sub	sp, fp, #12
    6e70:	e89d6800 	ldm	sp, {fp, sp, lr}
    6e74:	e12fff1e 	bx	lr
    6e78:	40001f10 	.word	0x40001f10

00006e7c <ee_write>:
/*   the EEPROM. 1.0 was reporting missmatch even when there were no	*/
/*   problems at all.													*/
/*   Rev. 1.1 adds interrupt disable feature.							*/
/*                                                                     	*/
/************************************************************************/
void ee_write(unsigned int command_ee,unsigned int result_ee[]){
    6e7c:	e1a0c00d 	mov	ip, sp
    6e80:	e92dd800 	push	{fp, ip, lr, pc}
    6e84:	e24cb004 	sub	fp, ip, #4
    6e88:	e24ddf4f 	sub	sp, sp, #316	; 0x13c
    6e8c:	e50b0144 	str	r0, [fp, #-324]	; 0x144
    6e90:	e50b1148 	str	r1, [fp, #-328]	; 0x148
	unsigned int *source, *destination, i;
	unsigned char ee_buffer[EE_BUFFER_SIZE];
	unsigned int command_iap[5], result_iap[3];
	unsigned long int enabled_interrupts;

	location = ee_locate();
    6e94:	eb0000dc 	bl	720c <ee_locate>
    6e98:	e1a03000 	mov	r3, r0
    6e9c:	e50b3020 	str	r3, [fp, #-32]
	if (location == -1){
    6ea0:	e51b3020 	ldr	r3, [fp, #-32]
    6ea4:	e3730001 	cmn	r3, #1
    6ea8:	1a000004 	bne	6ec0 <ee_write+0x44>
		result_ee[0]=NO_SPACE_IN_EEPROM;
    6eac:	e51b2148 	ldr	r2, [fp, #-328]	; 0x148
    6eb0:	e3a03f7d 	mov	r3, #500	; 0x1f4
    6eb4:	e2833001 	add	r3, r3, #1
    6eb8:	e5823000 	str	r3, [r2]
    6ebc:	ea000073 	b	7090 <ee_write+0x214>
	}
	else{
		for (i=0;i<EE_BUFFER_SIZE;i++) ee_buffer[i]=0xFF;
    6ec0:	e3a03000 	mov	r3, #0
    6ec4:	e50b3014 	str	r3, [fp, #-20]
    6ec8:	ea00000a 	b	6ef8 <ee_write+0x7c>
    6ecc:	e51b2014 	ldr	r2, [fp, #-20]
    6ed0:	e3a034bb 	mov	r3, #-1157627904	; 0xbb000000
    6ed4:	e1a03b43 	asr	r3, r3, #22
    6ed8:	e24b100c 	sub	r1, fp, #12
    6edc:	e0812002 	add	r2, r1, r2
    6ee0:	e0822003 	add	r2, r2, r3
    6ee4:	e3e03000 	mvn	r3, #0
    6ee8:	e5c23000 	strb	r3, [r2]
    6eec:	e51b3014 	ldr	r3, [fp, #-20]
    6ef0:	e2833001 	add	r3, r3, #1
    6ef4:	e50b3014 	str	r3, [fp, #-20]
    6ef8:	e51b3014 	ldr	r3, [fp, #-20]
    6efc:	e35300ff 	cmp	r3, #255	; 0xff
    6f00:	9afffff1 	bls	6ecc <ee_write+0x50>

		destination = (unsigned int *) ((&ee_buffer[0])+((unsigned int)location & EE_BUFFER_MASK));
    6f04:	e24b3e12 	sub	r3, fp, #288	; 0x120
    6f08:	e50b3018 	str	r3, [fp, #-24]
		source = (unsigned int *) command_ee;
    6f0c:	e51b3144 	ldr	r3, [fp, #-324]	; 0x144
    6f10:	e50b301c 	str	r3, [fp, #-28]
		for(i=0;i!=EE_REC_SIZE/4;i++) *(destination+i) = *(source+i);
    6f14:	e3a03000 	mov	r3, #0
    6f18:	e50b3014 	str	r3, [fp, #-20]
    6f1c:	ea00000e 	b	6f5c <ee_write+0xe0>
    6f20:	e51b3014 	ldr	r3, [fp, #-20]
    6f24:	e1a03103 	lsl	r3, r3, #2
    6f28:	e1a02003 	mov	r2, r3
    6f2c:	e51b3018 	ldr	r3, [fp, #-24]
    6f30:	e0821003 	add	r1, r2, r3
    6f34:	e51b3014 	ldr	r3, [fp, #-20]
    6f38:	e1a03103 	lsl	r3, r3, #2
    6f3c:	e1a02003 	mov	r2, r3
    6f40:	e51b301c 	ldr	r3, [fp, #-28]
    6f44:	e0823003 	add	r3, r2, r3
    6f48:	e5933000 	ldr	r3, [r3]
    6f4c:	e5813000 	str	r3, [r1]
    6f50:	e51b3014 	ldr	r3, [fp, #-20]
    6f54:	e2833001 	add	r3, r3, #1
    6f58:	e50b3014 	str	r3, [fp, #-20]
    6f5c:	e51b3014 	ldr	r3, [fp, #-20]
    6f60:	e3530040 	cmp	r3, #64	; 0x40
    6f64:	1affffed 	bne	6f20 <ee_write+0xa4>

		enabled_interrupts = VICIntEnable;  //disable all interrupts
    6f68:	e3a03000 	mov	r3, #0
    6f6c:	e2433eff 	sub	r3, r3, #4080	; 0xff0
    6f70:	e5933000 	ldr	r3, [r3]
    6f74:	e50b3010 	str	r3, [fp, #-16]
		VICIntEnClr        = enabled_interrupts;
    6f78:	e3e03efe 	mvn	r3, #4064	; 0xfe0
    6f7c:	e243300b 	sub	r3, r3, #11
    6f80:	e51b2010 	ldr	r2, [fp, #-16]
    6f84:	e5832000 	str	r2, [r3]

		command_iap[0]=50;					//prepare sectors from EE_SEC_L to EE_SEC_H for erase
    6f88:	e3a03032 	mov	r3, #50	; 0x32
    6f8c:	e50b3134 	str	r3, [fp, #-308]	; 0x134
		command_iap[1]=EE_SEC_L;
    6f90:	e3a0300e 	mov	r3, #14
    6f94:	e50b3130 	str	r3, [fp, #-304]	; 0x130
		command_iap[2]=EE_SEC_H;
    6f98:	e3a0300e 	mov	r3, #14
    6f9c:	e50b312c 	str	r3, [fp, #-300]	; 0x12c
		iap_entry=(IAP) IAP_LOCATION;
    6fa0:	e59f20f4 	ldr	r2, [pc, #244]	; 709c <ee_write+0x220>
    6fa4:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    6fa8:	e5823000 	str	r3, [r2]
		iap_entry(command_iap,result_iap);
    6fac:	e59f30e8 	ldr	r3, [pc, #232]	; 709c <ee_write+0x220>
    6fb0:	e593c000 	ldr	ip, [r3]
    6fb4:	e24b3f4d 	sub	r3, fp, #308	; 0x134
    6fb8:	e24b2d05 	sub	r2, fp, #320	; 0x140
    6fbc:	e1a00003 	mov	r0, r3
    6fc0:	e1a01002 	mov	r1, r2
    6fc4:	e1a0e00f 	mov	lr, pc
    6fc8:	e12fff1c 	bx	ip

		command_iap[0]=51;					//copy RAM to flash/eeprom
    6fcc:	e3a03033 	mov	r3, #51	; 0x33
    6fd0:	e50b3134 	str	r3, [fp, #-308]	; 0x134
		command_iap[1]=(unsigned int) (location & EE_START_MASK);
    6fd4:	e51b3020 	ldr	r3, [fp, #-32]
    6fd8:	e3c330ff 	bic	r3, r3, #255	; 0xff
    6fdc:	e50b3130 	str	r3, [fp, #-304]	; 0x130
		command_iap[2]=(unsigned int) (&ee_buffer[0]);
    6fe0:	e24b3e12 	sub	r3, fp, #288	; 0x120
    6fe4:	e50b312c 	str	r3, [fp, #-300]	; 0x12c
		command_iap[3]=EE_BUFFER_SIZE;
    6fe8:	e3a03c01 	mov	r3, #256	; 0x100
    6fec:	e50b3128 	str	r3, [fp, #-296]	; 0x128
		command_iap[4]=EE_CCLK;
    6ff0:	e3a03cea 	mov	r3, #59904	; 0xea00
    6ff4:	e2833060 	add	r3, r3, #96	; 0x60
    6ff8:	e50b3124 	str	r3, [fp, #-292]	; 0x124
		iap_entry=(IAP) IAP_LOCATION;
    6ffc:	e59f2098 	ldr	r2, [pc, #152]	; 709c <ee_write+0x220>
    7000:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    7004:	e5823000 	str	r3, [r2]
		iap_entry(command_iap,result_iap);
    7008:	e59f308c 	ldr	r3, [pc, #140]	; 709c <ee_write+0x220>
    700c:	e593c000 	ldr	ip, [r3]
    7010:	e24b3f4d 	sub	r3, fp, #308	; 0x134
    7014:	e24b2d05 	sub	r2, fp, #320	; 0x140
    7018:	e1a00003 	mov	r0, r3
    701c:	e1a01002 	mov	r1, r2
    7020:	e1a0e00f 	mov	lr, pc
    7024:	e12fff1c 	bx	ip

		command_iap[0]=56;					//compare RAM and flash/eeprom
    7028:	e3a03038 	mov	r3, #56	; 0x38
    702c:	e50b3134 	str	r3, [fp, #-308]	; 0x134
		command_iap[1]=(unsigned int) source;
    7030:	e51b301c 	ldr	r3, [fp, #-28]
    7034:	e50b3130 	str	r3, [fp, #-304]	; 0x130
		command_iap[2]=(unsigned int) location;
    7038:	e51b3020 	ldr	r3, [fp, #-32]
    703c:	e50b312c 	str	r3, [fp, #-300]	; 0x12c
		command_iap[3]=EE_REC_SIZE;
    7040:	e3a03c01 	mov	r3, #256	; 0x100
    7044:	e50b3128 	str	r3, [fp, #-296]	; 0x128
		iap_entry=(IAP) IAP_LOCATION;
    7048:	e59f204c 	ldr	r2, [pc, #76]	; 709c <ee_write+0x220>
    704c:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    7050:	e5823000 	str	r3, [r2]
		iap_entry(command_iap,result_iap);
    7054:	e59f3040 	ldr	r3, [pc, #64]	; 709c <ee_write+0x220>
    7058:	e593c000 	ldr	ip, [r3]
    705c:	e24b3f4d 	sub	r3, fp, #308	; 0x134
    7060:	e24b2d05 	sub	r2, fp, #320	; 0x140
    7064:	e1a00003 	mov	r0, r3
    7068:	e1a01002 	mov	r1, r2
    706c:	e1a0e00f 	mov	lr, pc
    7070:	e12fff1c 	bx	ip

		VICIntEnable = enabled_interrupts;  //restore interrupt enable register
    7074:	e3a03000 	mov	r3, #0
    7078:	e2433eff 	sub	r3, r3, #4080	; 0xff0
    707c:	e51b2010 	ldr	r2, [fp, #-16]
    7080:	e5832000 	str	r2, [r3]

		result_ee[0]=result_iap[0];
    7084:	e51b2140 	ldr	r2, [fp, #-320]	; 0x140
    7088:	e51b3148 	ldr	r3, [fp, #-328]	; 0x148
    708c:	e5832000 	str	r2, [r3]
	}
	return;
}
    7090:	e24bd00c 	sub	sp, fp, #12
    7094:	e89d6800 	ldm	sp, {fp, sp, lr}
    7098:	e12fff1e 	bx	lr
    709c:	40001f10 	.word	0x40001f10

000070a0 <ee_read>:
/* revision history:                                                   	*/
/* - Rev. 1.0 had problems with accessing the last record in a fully	*/
/*   occupied EEPROM. Rev. 1.1 fixes this.								*/
/*                                                                     	*/
/************************************************************************/
void ee_read(unsigned int command_ee,unsigned int result_ee[]){
    70a0:	e1a0c00d 	mov	ip, sp
    70a4:	e92dd800 	push	{fp, ip, lr, pc}
    70a8:	e24cb004 	sub	fp, ip, #4
    70ac:	e24dd00c 	sub	sp, sp, #12
    70b0:	e50b0014 	str	r0, [fp, #-20]
    70b4:	e50b1018 	str	r1, [fp, #-24]
	int location;

	location = ee_locate();
    70b8:	eb000053 	bl	720c <ee_locate>
    70bc:	e1a03000 	mov	r3, r0
    70c0:	e50b3010 	str	r3, [fp, #-16]
	if (location == EE_ADDR_L){
    70c4:	e51b3010 	ldr	r3, [fp, #-16]
    70c8:	e353090e 	cmp	r3, #229376	; 0x38000
    70cc:	1a000003 	bne	70e0 <ee_read+0x40>
		result_ee[0]=NO_RECORDS_AVAILABLE;
    70d0:	e51b2018 	ldr	r2, [fp, #-24]
    70d4:	e3a03f7d 	mov	r3, #500	; 0x1f4
    70d8:	e5823000 	str	r3, [r2]
    70dc:	ea000010 	b	7124 <ee_read+0x84>
	}
	else{
		result_ee[0]=0;
    70e0:	e51b3018 	ldr	r3, [fp, #-24]
    70e4:	e3a02000 	mov	r2, #0
    70e8:	e5832000 	str	r2, [r3]
		if (location == -1)
    70ec:	e51b3010 	ldr	r3, [fp, #-16]
    70f0:	e3730001 	cmn	r3, #1
    70f4:	1a000005 	bne	7110 <ee_read+0x70>
			result_ee[1]=(unsigned int)(EE_ADDR_H+1 - EE_REC_SIZE);
    70f8:	e51b3018 	ldr	r3, [fp, #-24]
    70fc:	e2832004 	add	r2, r3, #4
    7100:	e3a03bff 	mov	r3, #261120	; 0x3fc00
    7104:	e2833c03 	add	r3, r3, #768	; 0x300
    7108:	e5823000 	str	r3, [r2]
    710c:	ea000004 	b	7124 <ee_read+0x84>
		else
			result_ee[1]=(unsigned int)(location - EE_REC_SIZE);
    7110:	e51b3018 	ldr	r3, [fp, #-24]
    7114:	e2832004 	add	r2, r3, #4
    7118:	e51b3010 	ldr	r3, [fp, #-16]
    711c:	e2433c01 	sub	r3, r3, #256	; 0x100
    7120:	e5823000 	str	r3, [r2]
	}
	return;
}
    7124:	e24bd00c 	sub	sp, fp, #12
    7128:	e89d6800 	ldm	sp, {fp, sp, lr}
    712c:	e12fff1e 	bx	lr

00007130 <ee_readn>:
/* description:															*/
/*  This function returns in result_ee[1] an address of an EEPROM 		*/
/*  record index specified in command_ee. Index can not be less than 0.	*/
/*                                                                     	*/
/************************************************************************/
void ee_readn(unsigned int command_ee,unsigned int result_ee[]){
    7130:	e1a0c00d 	mov	ip, sp
    7134:	e92dd800 	push	{fp, ip, lr, pc}
    7138:	e24cb004 	sub	fp, ip, #4
    713c:	e24dd008 	sub	sp, sp, #8
    7140:	e50b0010 	str	r0, [fp, #-16]
    7144:	e50b1014 	str	r1, [fp, #-20]
	if(command_ee>((EE_ADDR_H+1-EE_ADDR_L)/EE_REC_SIZE)){
    7148:	e51b3010 	ldr	r3, [fp, #-16]
    714c:	e3530080 	cmp	r3, #128	; 0x80
    7150:	9a000004 	bls	7168 <ee_readn+0x38>
		result_ee[0]=INDEX_OUT_OF_RANGE;}
    7154:	e51b2014 	ldr	r2, [fp, #-20]
    7158:	e3a03f7d 	mov	r3, #500	; 0x1f4
    715c:	e2833002 	add	r3, r3, #2
    7160:	e5823000 	str	r3, [r2]
    7164:	ea000008 	b	718c <ee_readn+0x5c>
	else{
		result_ee[0]=0;
    7168:	e51b2014 	ldr	r2, [fp, #-20]
    716c:	e3a03000 	mov	r3, #0
    7170:	e5823000 	str	r3, [r2]
		result_ee[1]=(unsigned int)(EE_ADDR_L+EE_REC_SIZE*command_ee);
    7174:	e51b3014 	ldr	r3, [fp, #-20]
    7178:	e2832004 	add	r2, r3, #4
    717c:	e51b3010 	ldr	r3, [fp, #-16]
    7180:	e1a03403 	lsl	r3, r3, #8
    7184:	e283390e 	add	r3, r3, #229376	; 0x38000
    7188:	e5823000 	str	r3, [r2]
	}
	return;
}
    718c:	e24bd00c 	sub	sp, fp, #12
    7190:	e89d6800 	ldm	sp, {fp, sp, lr}
    7194:	e12fff1e 	bx	lr

00007198 <ee_count>:
/* revision history:                                                   	*/
/* - Initial release (1.0) was not supplying the right feedback in case */
/*   of counting records in a full EEPROM. Rev. 1.1 fixes this.         */
/*                                                                     	*/
/************************************************************************/
void ee_count(unsigned int command_ee,unsigned int result_ee[]){
    7198:	e1a0c00d 	mov	ip, sp
    719c:	e92dd800 	push	{fp, ip, lr, pc}
    71a0:	e24cb004 	sub	fp, ip, #4
    71a4:	e24dd00c 	sub	sp, sp, #12
    71a8:	e50b0014 	str	r0, [fp, #-20]
    71ac:	e50b1018 	str	r1, [fp, #-24]
	int location;
	result_ee[0]=0;
    71b0:	e51b2018 	ldr	r2, [fp, #-24]
    71b4:	e3a03000 	mov	r3, #0
    71b8:	e5823000 	str	r3, [r2]
	location = ee_locate();
    71bc:	eb000012 	bl	720c <ee_locate>
    71c0:	e1a03000 	mov	r3, r0
    71c4:	e50b3010 	str	r3, [fp, #-16]
	if (location == -1) location = EE_ADDR_H+1;
    71c8:	e51b3010 	ldr	r3, [fp, #-16]
    71cc:	e3730001 	cmn	r3, #1
    71d0:	1a000001 	bne	71dc <ee_count+0x44>
    71d4:	e3a03701 	mov	r3, #262144	; 0x40000
    71d8:	e50b3010 	str	r3, [fp, #-16]
	result_ee[1]=(unsigned int)((location-EE_ADDR_L)/EE_REC_SIZE);
    71dc:	e51b3018 	ldr	r3, [fp, #-24]
    71e0:	e2831004 	add	r1, r3, #4
    71e4:	e51b3010 	ldr	r3, [fp, #-16]
    71e8:	e243390e 	sub	r3, r3, #229376	; 0x38000
    71ec:	e28320ff 	add	r2, r3, #255	; 0xff
    71f0:	e3530000 	cmp	r3, #0
    71f4:	b1a03002 	movlt	r3, r2
    71f8:	e1a03443 	asr	r3, r3, #8
    71fc:	e5813000 	str	r3, [r1]
	return;
}
    7200:	e24bd00c 	sub	sp, fp, #12
    7204:	e89d6800 	ldm	sp, {fp, sp, lr}
    7208:	e12fff1e 	bx	lr

0000720c <ee_locate>:
/* revision history:                                                   	*/
/* - Rev. 1.1 fixes a bug related to identifying an unused byte of 		*/
/*   EEPROM in an EEPROM with size not equal to EE_REC_SIZE * 2^k (k>=0)*/
/*                                                                     	*/
/************************************************************************/
int ee_locate(void){
    720c:	e1a0c00d 	mov	ip, sp
    7210:	e92dd800 	push	{fp, ip, lr, pc}
    7214:	e24cb004 	sub	fp, ip, #4
    7218:	e24dd018 	sub	sp, sp, #24
	unsigned int addr_l, addr_m, addr_r, size, slice_limit;
	addr_l = EE_ADDR_L;
    721c:	e3a0390e 	mov	r3, #229376	; 0x38000
    7220:	e50b3020 	str	r3, [fp, #-32]
	if ((*((unsigned char *)addr_l))==0xFF) return(addr_l);
    7224:	e51b3020 	ldr	r3, [fp, #-32]
    7228:	e5d33000 	ldrb	r3, [r3]
    722c:	e35300ff 	cmp	r3, #255	; 0xff
    7230:	1a000002 	bne	7240 <ee_locate+0x34>
    7234:	e51b3020 	ldr	r3, [fp, #-32]
    7238:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    723c:	ea00003f 	b	7340 <ee_locate+0x134>
	addr_r = EE_ADDR_H+1;
    7240:	e3a03701 	mov	r3, #262144	; 0x40000
    7244:	e50b3018 	str	r3, [fp, #-24]
	if ((*((unsigned char *)(addr_r-EE_REC_SIZE)))==EE_REC_ID) return(-1);
    7248:	e51b3018 	ldr	r3, [fp, #-24]
    724c:	e2433c01 	sub	r3, r3, #256	; 0x100
    7250:	e5d33000 	ldrb	r3, [r3]
    7254:	e35300aa 	cmp	r3, #170	; 0xaa
    7258:	1a000002 	bne	7268 <ee_locate+0x5c>
    725c:	e3e03000 	mvn	r3, #0
    7260:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    7264:	ea000035 	b	7340 <ee_locate+0x134>
	size = addr_r - addr_l;
    7268:	e51b2018 	ldr	r2, [fp, #-24]
    726c:	e51b3020 	ldr	r3, [fp, #-32]
    7270:	e0633002 	rsb	r3, r3, r2
    7274:	e50b3014 	str	r3, [fp, #-20]
	slice_limit = EE_REC_SIZE - 1;
    7278:	e3a030ff 	mov	r3, #255	; 0xff
    727c:	e50b3010 	str	r3, [fp, #-16]
	while(size != EE_REC_SIZE){
    7280:	ea000029 	b	732c <ee_locate+0x120>
		addr_m = (addr_r+addr_l)/2;
    7284:	e51b2018 	ldr	r2, [fp, #-24]
    7288:	e51b3020 	ldr	r3, [fp, #-32]
    728c:	e0823003 	add	r3, r2, r3
    7290:	e1a030a3 	lsr	r3, r3, #1
    7294:	e50b301c 	str	r3, [fp, #-28]
		if ((addr_m & slice_limit)!=0x00000000){
    7298:	e51b201c 	ldr	r2, [fp, #-28]
    729c:	e51b3010 	ldr	r3, [fp, #-16]
    72a0:	e0023003 	and	r3, r2, r3
    72a4:	e3530000 	cmp	r3, #0
    72a8:	0a000013 	beq	72fc <ee_locate+0xf0>
			if ((*((unsigned char *)(addr_r - EE_REC_SIZE)))==0xFF) 
    72ac:	e51b3018 	ldr	r3, [fp, #-24]
    72b0:	e2433c01 	sub	r3, r3, #256	; 0x100
    72b4:	e5d33000 	ldrb	r3, [r3]
    72b8:	e35300ff 	cmp	r3, #255	; 0xff
    72bc:	1a000003 	bne	72d0 <ee_locate+0xc4>
				addr_r = addr_r - EE_REC_SIZE;
    72c0:	e51b3018 	ldr	r3, [fp, #-24]
    72c4:	e2433c01 	sub	r3, r3, #256	; 0x100
    72c8:	e50b3018 	str	r3, [fp, #-24]
    72cc:	ea000002 	b	72dc <ee_locate+0xd0>
			else
				addr_l = addr_l + EE_REC_SIZE;
    72d0:	e51b3020 	ldr	r3, [fp, #-32]
    72d4:	e2833c01 	add	r3, r3, #256	; 0x100
    72d8:	e50b3020 	str	r3, [fp, #-32]
			addr_m = (addr_r+addr_l)/2;
    72dc:	e51b2018 	ldr	r2, [fp, #-24]
    72e0:	e51b3020 	ldr	r3, [fp, #-32]
    72e4:	e0823003 	add	r3, r2, r3
    72e8:	e1a030a3 	lsr	r3, r3, #1
    72ec:	e50b301c 	str	r3, [fp, #-28]
			size = size - EE_REC_SIZE;
    72f0:	e51b3014 	ldr	r3, [fp, #-20]
    72f4:	e2433c01 	sub	r3, r3, #256	; 0x100
    72f8:	e50b3014 	str	r3, [fp, #-20]
		}
		if ((*((unsigned char *)addr_m))==0xFF)
    72fc:	e51b301c 	ldr	r3, [fp, #-28]
    7300:	e5d33000 	ldrb	r3, [r3]
    7304:	e35300ff 	cmp	r3, #255	; 0xff
    7308:	1a000002 	bne	7318 <ee_locate+0x10c>
			addr_r = addr_m;
    730c:	e51b301c 	ldr	r3, [fp, #-28]
    7310:	e50b3018 	str	r3, [fp, #-24]
    7314:	ea000001 	b	7320 <ee_locate+0x114>
		else
			addr_l = addr_m;
    7318:	e51b301c 	ldr	r3, [fp, #-28]
    731c:	e50b3020 	str	r3, [fp, #-32]
		size = size/2;
    7320:	e51b3014 	ldr	r3, [fp, #-20]
    7324:	e1a030a3 	lsr	r3, r3, #1
    7328:	e50b3014 	str	r3, [fp, #-20]
	if ((*((unsigned char *)addr_l))==0xFF) return(addr_l);
	addr_r = EE_ADDR_H+1;
	if ((*((unsigned char *)(addr_r-EE_REC_SIZE)))==EE_REC_ID) return(-1);
	size = addr_r - addr_l;
	slice_limit = EE_REC_SIZE - 1;
	while(size != EE_REC_SIZE){
    732c:	e51b3014 	ldr	r3, [fp, #-20]
    7330:	e3530c01 	cmp	r3, #256	; 0x100
    7334:	1affffd2 	bne	7284 <ee_locate+0x78>
			addr_r = addr_m;
		else
			addr_l = addr_m;
		size = size/2;
	}
	return(addr_r);
    7338:	e51b3018 	ldr	r3, [fp, #-24]
    733c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
    7340:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
}
    7344:	e1a00003 	mov	r0, r3
    7348:	e24bd00c 	sub	sp, fp, #12
    734c:	e89d6800 	ldm	sp, {fp, sp, lr}
    7350:	e12fff1e 	bx	lr

00007354 <enter_isp>:

void enter_isp()
{
    7354:	e1a0c00d 	mov	ip, sp
    7358:	e92dd800 	push	{fp, ip, lr, pc}
    735c:	e24cb004 	sub	fp, ip, #4
    7360:	e24dd024 	sub	sp, sp, #36	; 0x24
	unsigned long enabled_interrupts;

	//this functions enters the ISP mode by software
	//disable PLL

	enabled_interrupts = VICIntEnable;  //disable all interrupts
    7364:	e3a03000 	mov	r3, #0
    7368:	e2433eff 	sub	r3, r3, #4080	; 0xff0
    736c:	e5933000 	ldr	r3, [r3]
    7370:	e50b3010 	str	r3, [fp, #-16]
	VICIntEnClr        = enabled_interrupts;
    7374:	e3e03efe 	mvn	r3, #4064	; 0xfe0
    7378:	e243300b 	sub	r3, r3, #11
    737c:	e51b2010 	ldr	r2, [fp, #-16]
    7380:	e5832000 	str	r2, [r3]


	PLLCON=0; //PLL disabled
    7384:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    7388:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
    738c:	e2833080 	add	r3, r3, #128	; 0x80
    7390:	e3a02000 	mov	r2, #0
    7394:	e5832000 	str	r2, [r3]

	command_iap[0]=57;
    7398:	e3a03039 	mov	r3, #57	; 0x39
    739c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	iap_entry=(IAP) IAP_LOCATION;
    73a0:	e59f2030 	ldr	r2, [pc, #48]	; 73d8 <enter_isp+0x84>
    73a4:	e3e0313a 	mvn	r3, #-2147483634	; 0x8000000e
    73a8:	e5823000 	str	r3, [r2]
	iap_entry(command_iap,result_iap);
    73ac:	e59f3024 	ldr	r3, [pc, #36]	; 73d8 <enter_isp+0x84>
    73b0:	e593c000 	ldr	ip, [r3]
    73b4:	e24b3024 	sub	r3, fp, #36	; 0x24
    73b8:	e24b2030 	sub	r2, fp, #48	; 0x30
    73bc:	e1a00003 	mov	r0, r3
    73c0:	e1a01002 	mov	r1, r2
    73c4:	e1a0e00f 	mov	lr, pc
    73c8:	e12fff1c 	bx	ip

}
    73cc:	e24bd00c 	sub	sp, fp, #12
    73d0:	e89d6800 	ldm	sp, {fp, sp, lr}
    73d4:	e12fff1e 	bx	lr
    73d8:	40001f10 	.word	0x40001f10

000073dc <loadFrame>:

// Processes bytes in our ring buffer and pulls out a frame.
//  Returns TRUE if there is a valid frame.
//  FALSE if there is not a valid frame in the Ring Buffer.
char loadFrame(void)
{
    73dc:	e1a0c00d 	mov	ip, sp
    73e0:	e92dd800 	push	{fp, ip, lr, pc}
    73e4:	e24cb004 	sub	fp, ip, #4
    73e8:	e24dd014 	sub	sp, sp, #20
	int i;
	int sIndex, eIndex; //SOF / EOF indexes.
	int nBuf; //Bytes in the buffer.
	
	// Loop through the available data while we have enough bytes to form a frame.
	while ( bytesAvailable() >= 8 )
    73ec:	ea00004f 	b	7530 <loadFrame+0x154>
	{
		nBuf = bytesAvailable();
    73f0:	ebffebab 	bl	22a4 <bytesAvailable>
    73f4:	e1a03000 	mov	r3, r0
    73f8:	e50b3010 	str	r3, [fp, #-16]
	
		// Find our first SOF byte.
		sIndex = findInBuffer(  0, nBuf, SOF );
    73fc:	e3a00000 	mov	r0, #0
    7400:	e51b1010 	ldr	r1, [fp, #-16]
    7404:	e3a020ea 	mov	r2, #234	; 0xea
    7408:	ebffeb8b 	bl	223c <findInBuffer>
    740c:	e1a03000 	mov	r3, r0
    7410:	e50b3018 	str	r3, [fp, #-24]
		if ( sIndex == -1 ) //No SOF in the entire buffer?
    7414:	e51b3018 	ldr	r3, [fp, #-24]
    7418:	e3730001 	cmn	r3, #1
    741c:	1a000004 	bne	7434 <loadFrame+0x58>
		{
			skipBytes(nBuf); //Discard the entire buffer.
    7420:	e51b0010 	ldr	r0, [fp, #-16]
    7424:	ebffeb94 	bl	227c <skipBytes>
			return 0;
    7428:	e3a03000 	mov	r3, #0
    742c:	e50b3020 	str	r3, [fp, #-32]
    7430:	ea000044 	b	7548 <loadFrame+0x16c>
		}
	
		// Make sure the SOF is the first entry in our Ring Buffer
		nBuf = skipBytes(sIndex);
    7434:	e51b0018 	ldr	r0, [fp, #-24]
    7438:	ebffeb8f 	bl	227c <skipBytes>
    743c:	e1a03000 	mov	r3, r0
    7440:	e50b3010 	str	r3, [fp, #-16]
	
		// If we don't have enough characters left in the buffer for a frame
		if ( nBuf < 8 ) 
    7444:	e51b3010 	ldr	r3, [fp, #-16]
    7448:	e3530007 	cmp	r3, #7
    744c:	ca000002 	bgt	745c <loadFrame+0x80>
			return 0; // Then we're done.
    7450:	e3a03000 	mov	r3, #0
    7454:	e50b3020 	str	r3, [fp, #-32]
    7458:	ea00003a 	b	7548 <loadFrame+0x16c>
			
		// Now we need to make sure we don't have another SOF.
		// We shouldn't have another for at least 8 bytes.
		sIndex = findInBuffer( 1, 7, SOF );
    745c:	e3a00001 	mov	r0, #1
    7460:	e3a01007 	mov	r1, #7
    7464:	e3a020ea 	mov	r2, #234	; 0xea
    7468:	ebffeb73 	bl	223c <findInBuffer>
    746c:	e1a03000 	mov	r3, r0
    7470:	e50b3018 	str	r3, [fp, #-24]
		if ( sIndex != -1 ) // We have another SOF in the next 7 characters.
    7474:	e51b3018 	ldr	r3, [fp, #-24]
    7478:	e3730001 	cmn	r3, #1
    747c:	0a000004 	beq	7494 <loadFrame+0xb8>
		{
			skipBytes( sIndex + 1 ); //Skip up until then
    7480:	e51b3018 	ldr	r3, [fp, #-24]
    7484:	e2833001 	add	r3, r3, #1
    7488:	e1a00003 	mov	r0, r3
    748c:	ebffeb7a 	bl	227c <skipBytes>
			continue;
    7490:	ea000026 	b	7530 <loadFrame+0x154>
		}
		
		// We don't have another SOF, do we have a valid EOF?
		eIndex = findInBuffer( 1, 7, EOFm );
    7494:	e3a00001 	mov	r0, #1
    7498:	e3a01007 	mov	r1, #7
    749c:	e3a020d5 	mov	r2, #213	; 0xd5
    74a0:	ebffeb65 	bl	223c <findInBuffer>
    74a4:	e1a03000 	mov	r3, r0
    74a8:	e50b3014 	str	r3, [fp, #-20]

		if (eIndex != 6) //EOF should be the 8th byte out. Bad Frame! Bad!
    74ac:	e51b3014 	ldr	r3, [fp, #-20]
    74b0:	e3530006 	cmp	r3, #6
    74b4:	0a00000a 	beq	74e4 <loadFrame+0x108>
		{
			// We will discard byte up to the EOF if it was found...
			if ( eIndex >= 0 )
    74b8:	e51b3014 	ldr	r3, [fp, #-20]
    74bc:	e3530000 	cmp	r3, #0
    74c0:	ba000004 	blt	74d8 <loadFrame+0xfc>
				skipBytes( eIndex + 1 ); //Discard up to and including the EOF.
    74c4:	e51b3014 	ldr	r3, [fp, #-20]
    74c8:	e2833001 	add	r3, r3, #1
    74cc:	e1a00003 	mov	r0, r3
    74d0:	ebffeb69 	bl	227c <skipBytes>
    74d4:	ea000015 	b	7530 <loadFrame+0x154>
			else
				skipBytes( 8 ); //No EOF was found at all. Discard all 8 in frame.
    74d8:	e3a00008 	mov	r0, #8
    74dc:	ebffeb66 	bl	227c <skipBytes>
			continue;
    74e0:	ea000012 	b	7530 <loadFrame+0x154>
		}		
		// We have a valid frame.
		frame.prefix = getByte(); //SOF byte
    74e4:	ebffebb7 	bl	23c8 <getByte>
    74e8:	e1a03000 	mov	r3, r0
    74ec:	e59f2068 	ldr	r2, [pc, #104]	; 755c <loadFrame+0x180>
    74f0:	e5c23000 	strb	r3, [r2]
		// Get the command byte
		frame.command = getByte();
    74f4:	ebffebb3 	bl	23c8 <getByte>
    74f8:	e1a03000 	mov	r3, r0
    74fc:	e59f2058 	ldr	r2, [pc, #88]	; 755c <loadFrame+0x180>
    7500:	e5c23001 	strb	r3, [r2, #1]
		getBytes(frame.data, 5); //Data bytes.
    7504:	e59f3054 	ldr	r3, [pc, #84]	; 7560 <loadFrame+0x184>
    7508:	e1a00003 	mov	r0, r3
    750c:	e3a01005 	mov	r1, #5
    7510:	ebffebc1 	bl	241c <getBytes>
		frame.suffix = getByte(); //EOF byte
    7514:	ebffebab 	bl	23c8 <getByte>
    7518:	e1a03000 	mov	r3, r0
    751c:	e59f2038 	ldr	r2, [pc, #56]	; 755c <loadFrame+0x180>
    7520:	e5c23007 	strb	r3, [r2, #7]
		
		return 1;
    7524:	e3a03001 	mov	r3, #1
    7528:	e50b3020 	str	r3, [fp, #-32]
    752c:	ea000005 	b	7548 <loadFrame+0x16c>
	int i;
	int sIndex, eIndex; //SOF / EOF indexes.
	int nBuf; //Bytes in the buffer.
	
	// Loop through the available data while we have enough bytes to form a frame.
	while ( bytesAvailable() >= 8 )
    7530:	ebffeb5b 	bl	22a4 <bytesAvailable>
    7534:	e1a03000 	mov	r3, r0
    7538:	e3530007 	cmp	r3, #7
    753c:	8affffab 	bhi	73f0 <loadFrame+0x14>
		getBytes(frame.data, 5); //Data bytes.
		frame.suffix = getByte(); //EOF byte
		
		return 1;
	}
	return 0; //No valid frame present.			
    7540:	e3a03000 	mov	r3, #0
    7544:	e50b3020 	str	r3, [fp, #-32]
    7548:	e51b3020 	ldr	r3, [fp, #-32]
}
    754c:	e1a00003 	mov	r0, r3
    7550:	e24bd00c 	sub	sp, fp, #12
    7554:	e89d6800 	ldm	sp, {fp, sp, lr}
    7558:	e12fff1e 	bx	lr
    755c:	40001f14 	.word	0x40001f14
    7560:	40001f16 	.word	0x40001f16

00007564 <memcpy>:
    7564:	b530      	push	{r4, r5, lr}
    7566:	1c05      	adds	r5, r0, #0
    7568:	1c14      	adds	r4, r2, #0
    756a:	2a0f      	cmp	r2, #15
    756c:	d904      	bls.n	7578 <memcpy+0x14>
    756e:	1c0a      	adds	r2, r1, #0
    7570:	432a      	orrs	r2, r5
    7572:	2303      	movs	r3, #3
    7574:	421a      	tst	r2, r3
    7576:	d00b      	beq.n	7590 <memcpy+0x2c>
    7578:	1e62      	subs	r2, r4, #1
    757a:	d305      	bcc.n	7588 <memcpy+0x24>
    757c:	780b      	ldrb	r3, [r1, #0]
    757e:	3101      	adds	r1, #1
    7580:	7003      	strb	r3, [r0, #0]
    7582:	3001      	adds	r0, #1
    7584:	3a01      	subs	r2, #1
    7586:	d2f9      	bcs.n	757c <memcpy+0x18>
    7588:	1c28      	adds	r0, r5, #0
    758a:	bc30      	pop	{r4, r5}
    758c:	bc02      	pop	{r1}
    758e:	4708      	bx	r1
    7590:	1c2a      	adds	r2, r5, #0
    7592:	680b      	ldr	r3, [r1, #0]
    7594:	6013      	str	r3, [r2, #0]
    7596:	684b      	ldr	r3, [r1, #4]
    7598:	6053      	str	r3, [r2, #4]
    759a:	688b      	ldr	r3, [r1, #8]
    759c:	6093      	str	r3, [r2, #8]
    759e:	68cb      	ldr	r3, [r1, #12]
    75a0:	3c10      	subs	r4, #16
    75a2:	60d3      	str	r3, [r2, #12]
    75a4:	3110      	adds	r1, #16
    75a6:	3210      	adds	r2, #16
    75a8:	2c0f      	cmp	r4, #15
    75aa:	d8f2      	bhi.n	7592 <memcpy+0x2e>
    75ac:	2c03      	cmp	r4, #3
    75ae:	d904      	bls.n	75ba <memcpy+0x56>
    75b0:	c908      	ldmia	r1!, {r3}
    75b2:	3c04      	subs	r4, #4
    75b4:	c208      	stmia	r2!, {r3}
    75b6:	2c03      	cmp	r4, #3
    75b8:	d8fa      	bhi.n	75b0 <memcpy+0x4c>
    75ba:	1c10      	adds	r0, r2, #0
    75bc:	e7dc      	b.n	7578 <memcpy+0x14>
    75be:	46c0      	nop			; (mov r8, r8)

000075c0 <__aeabi_uidiv>:
    75c0:	2900      	cmp	r1, #0
    75c2:	d034      	beq.n	762e <__aeabi_uidiv+0x6e>
    75c4:	2301      	movs	r3, #1
    75c6:	2200      	movs	r2, #0
    75c8:	b410      	push	{r4}
    75ca:	4288      	cmp	r0, r1
    75cc:	d32c      	bcc.n	7628 <__aeabi_uidiv+0x68>
    75ce:	2401      	movs	r4, #1
    75d0:	0724      	lsls	r4, r4, #28
    75d2:	42a1      	cmp	r1, r4
    75d4:	d204      	bcs.n	75e0 <__aeabi_uidiv+0x20>
    75d6:	4281      	cmp	r1, r0
    75d8:	d202      	bcs.n	75e0 <__aeabi_uidiv+0x20>
    75da:	0109      	lsls	r1, r1, #4
    75dc:	011b      	lsls	r3, r3, #4
    75de:	e7f8      	b.n	75d2 <__aeabi_uidiv+0x12>
    75e0:	00e4      	lsls	r4, r4, #3
    75e2:	42a1      	cmp	r1, r4
    75e4:	d204      	bcs.n	75f0 <__aeabi_uidiv+0x30>
    75e6:	4281      	cmp	r1, r0
    75e8:	d202      	bcs.n	75f0 <__aeabi_uidiv+0x30>
    75ea:	0049      	lsls	r1, r1, #1
    75ec:	005b      	lsls	r3, r3, #1
    75ee:	e7f8      	b.n	75e2 <__aeabi_uidiv+0x22>
    75f0:	4288      	cmp	r0, r1
    75f2:	d301      	bcc.n	75f8 <__aeabi_uidiv+0x38>
    75f4:	1a40      	subs	r0, r0, r1
    75f6:	431a      	orrs	r2, r3
    75f8:	084c      	lsrs	r4, r1, #1
    75fa:	42a0      	cmp	r0, r4
    75fc:	d302      	bcc.n	7604 <__aeabi_uidiv+0x44>
    75fe:	1b00      	subs	r0, r0, r4
    7600:	085c      	lsrs	r4, r3, #1
    7602:	4322      	orrs	r2, r4
    7604:	088c      	lsrs	r4, r1, #2
    7606:	42a0      	cmp	r0, r4
    7608:	d302      	bcc.n	7610 <__aeabi_uidiv+0x50>
    760a:	1b00      	subs	r0, r0, r4
    760c:	089c      	lsrs	r4, r3, #2
    760e:	4322      	orrs	r2, r4
    7610:	08cc      	lsrs	r4, r1, #3
    7612:	42a0      	cmp	r0, r4
    7614:	d302      	bcc.n	761c <__aeabi_uidiv+0x5c>
    7616:	1b00      	subs	r0, r0, r4
    7618:	08dc      	lsrs	r4, r3, #3
    761a:	4322      	orrs	r2, r4
    761c:	2800      	cmp	r0, #0
    761e:	d003      	beq.n	7628 <__aeabi_uidiv+0x68>
    7620:	091b      	lsrs	r3, r3, #4
    7622:	d001      	beq.n	7628 <__aeabi_uidiv+0x68>
    7624:	0909      	lsrs	r1, r1, #4
    7626:	e7e3      	b.n	75f0 <__aeabi_uidiv+0x30>
    7628:	1c10      	adds	r0, r2, #0
    762a:	bc10      	pop	{r4}
    762c:	4770      	bx	lr
    762e:	b502      	push	{r1, lr}
    7630:	f000 f85e 	bl	76f0 <__aeabi_idiv0>
    7634:	2000      	movs	r0, #0
    7636:	bc06      	pop	{r1, r2}
    7638:	4710      	bx	r2
    763a:	46c0      	nop			; (mov r8, r8)

0000763c <__aeabi_uidivmod>:
    763c:	b503      	push	{r0, r1, lr}
    763e:	f7ff ffbf 	bl	75c0 <__aeabi_uidiv>
    7642:	bc0e      	pop	{r1, r2, r3}
    7644:	4342      	muls	r2, r0
    7646:	1a89      	subs	r1, r1, r2
    7648:	4718      	bx	r3
    764a:	46c0      	nop			; (mov r8, r8)

0000764c <__aeabi_idiv>:
    764c:	2900      	cmp	r1, #0
    764e:	d041      	beq.n	76d4 <__aeabi_idiv+0x88>
    7650:	b410      	push	{r4}
    7652:	1c04      	adds	r4, r0, #0
    7654:	404c      	eors	r4, r1
    7656:	46a4      	mov	ip, r4
    7658:	2301      	movs	r3, #1
    765a:	2200      	movs	r2, #0
    765c:	2900      	cmp	r1, #0
    765e:	d500      	bpl.n	7662 <__aeabi_idiv+0x16>
    7660:	4249      	negs	r1, r1
    7662:	2800      	cmp	r0, #0
    7664:	d500      	bpl.n	7668 <__aeabi_idiv+0x1c>
    7666:	4240      	negs	r0, r0
    7668:	4288      	cmp	r0, r1
    766a:	d32c      	bcc.n	76c6 <__aeabi_idiv+0x7a>
    766c:	2401      	movs	r4, #1
    766e:	0724      	lsls	r4, r4, #28
    7670:	42a1      	cmp	r1, r4
    7672:	d204      	bcs.n	767e <__aeabi_idiv+0x32>
    7674:	4281      	cmp	r1, r0
    7676:	d202      	bcs.n	767e <__aeabi_idiv+0x32>
    7678:	0109      	lsls	r1, r1, #4
    767a:	011b      	lsls	r3, r3, #4
    767c:	e7f8      	b.n	7670 <__aeabi_idiv+0x24>
    767e:	00e4      	lsls	r4, r4, #3
    7680:	42a1      	cmp	r1, r4
    7682:	d204      	bcs.n	768e <__aeabi_idiv+0x42>
    7684:	4281      	cmp	r1, r0
    7686:	d202      	bcs.n	768e <__aeabi_idiv+0x42>
    7688:	0049      	lsls	r1, r1, #1
    768a:	005b      	lsls	r3, r3, #1
    768c:	e7f8      	b.n	7680 <__aeabi_idiv+0x34>
    768e:	4288      	cmp	r0, r1
    7690:	d301      	bcc.n	7696 <__aeabi_idiv+0x4a>
    7692:	1a40      	subs	r0, r0, r1
    7694:	431a      	orrs	r2, r3
    7696:	084c      	lsrs	r4, r1, #1
    7698:	42a0      	cmp	r0, r4
    769a:	d302      	bcc.n	76a2 <__aeabi_idiv+0x56>
    769c:	1b00      	subs	r0, r0, r4
    769e:	085c      	lsrs	r4, r3, #1
    76a0:	4322      	orrs	r2, r4
    76a2:	088c      	lsrs	r4, r1, #2
    76a4:	42a0      	cmp	r0, r4
    76a6:	d302      	bcc.n	76ae <__aeabi_idiv+0x62>
    76a8:	1b00      	subs	r0, r0, r4
    76aa:	089c      	lsrs	r4, r3, #2
    76ac:	4322      	orrs	r2, r4
    76ae:	08cc      	lsrs	r4, r1, #3
    76b0:	42a0      	cmp	r0, r4
    76b2:	d302      	bcc.n	76ba <__aeabi_idiv+0x6e>
    76b4:	1b00      	subs	r0, r0, r4
    76b6:	08dc      	lsrs	r4, r3, #3
    76b8:	4322      	orrs	r2, r4
    76ba:	2800      	cmp	r0, #0
    76bc:	d003      	beq.n	76c6 <__aeabi_idiv+0x7a>
    76be:	091b      	lsrs	r3, r3, #4
    76c0:	d001      	beq.n	76c6 <__aeabi_idiv+0x7a>
    76c2:	0909      	lsrs	r1, r1, #4
    76c4:	e7e3      	b.n	768e <__aeabi_idiv+0x42>
    76c6:	1c10      	adds	r0, r2, #0
    76c8:	4664      	mov	r4, ip
    76ca:	2c00      	cmp	r4, #0
    76cc:	d500      	bpl.n	76d0 <__aeabi_idiv+0x84>
    76ce:	4240      	negs	r0, r0
    76d0:	bc10      	pop	{r4}
    76d2:	4770      	bx	lr
    76d4:	b502      	push	{r1, lr}
    76d6:	f000 f80b 	bl	76f0 <__aeabi_idiv0>
    76da:	2000      	movs	r0, #0
    76dc:	bc06      	pop	{r1, r2}
    76de:	4710      	bx	r2

000076e0 <__aeabi_idivmod>:
    76e0:	b503      	push	{r0, r1, lr}
    76e2:	f7ff ffb3 	bl	764c <__aeabi_idiv>
    76e6:	bc0e      	pop	{r1, r2, r3}
    76e8:	4342      	muls	r2, r0
    76ea:	1a89      	subs	r1, r1, r2
    76ec:	4718      	bx	r3
    76ee:	46c0      	nop			; (mov r8, r8)

000076f0 <__aeabi_idiv0>:
    76f0:	4770      	bx	lr
    76f2:	46c0      	nop			; (mov r8, r8)

000076f4 <__aeabi_drsub>:
    76f4:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    76f8:	ea000000 	b	7700 <__adddf3>

000076fc <__aeabi_dsub>:
    76fc:	e2222102 	eor	r2, r2, #-2147483648	; 0x80000000

00007700 <__adddf3>:
    7700:	e92d4030 	push	{r4, r5, lr}
    7704:	e1a04080 	lsl	r4, r0, #1
    7708:	e1a05082 	lsl	r5, r2, #1
    770c:	e1340005 	teq	r4, r5
    7710:	01310003 	teqeq	r1, r3
    7714:	1194c001 	orrsne	ip, r4, r1
    7718:	1195c003 	orrsne	ip, r5, r3
    771c:	11f0cac4 	mvnsne	ip, r4, asr #21
    7720:	11f0cac5 	mvnsne	ip, r5, asr #21
    7724:	0a00008c 	beq	795c <__adddf3+0x25c>
    7728:	e1a04aa4 	lsr	r4, r4, #21
    772c:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    7730:	b2655000 	rsblt	r5, r5, #0
    7734:	da000006 	ble	7754 <__adddf3+0x54>
    7738:	e0844005 	add	r4, r4, r5
    773c:	e0213003 	eor	r3, r1, r3
    7740:	e0202002 	eor	r2, r0, r2
    7744:	e0231001 	eor	r1, r3, r1
    7748:	e0220000 	eor	r0, r2, r0
    774c:	e0213003 	eor	r3, r1, r3
    7750:	e0202002 	eor	r2, r0, r2
    7754:	e3550036 	cmp	r5, #54	; 0x36
    7758:	88bd4030 	pophi	{r4, r5, lr}
    775c:	812fff1e 	bxhi	lr
    7760:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    7764:	e1a00600 	lsl	r0, r0, #12
    7768:	e3a0c601 	mov	ip, #1048576	; 0x100000
    776c:	e18c0620 	orr	r0, ip, r0, lsr #12
    7770:	0a000001 	beq	777c <__adddf3+0x7c>
    7774:	e2711000 	rsbs	r1, r1, #0
    7778:	e2e00000 	rsc	r0, r0, #0
    777c:	e3120102 	tst	r2, #-2147483648	; 0x80000000
    7780:	e1a02602 	lsl	r2, r2, #12
    7784:	e18c2622 	orr	r2, ip, r2, lsr #12
    7788:	0a000001 	beq	7794 <__adddf3+0x94>
    778c:	e2733000 	rsbs	r3, r3, #0
    7790:	e2e22000 	rsc	r2, r2, #0
    7794:	e1340005 	teq	r4, r5
    7798:	0a000069 	beq	7944 <__adddf3+0x244>
    779c:	e2444001 	sub	r4, r4, #1
    77a0:	e275e020 	rsbs	lr, r5, #32
    77a4:	ba000005 	blt	77c0 <__adddf3+0xc0>
    77a8:	e1a0ce13 	lsl	ip, r3, lr
    77ac:	e0911533 	adds	r1, r1, r3, lsr r5
    77b0:	e2a00000 	adc	r0, r0, #0
    77b4:	e0911e12 	adds	r1, r1, r2, lsl lr
    77b8:	e0b00552 	adcs	r0, r0, r2, asr r5
    77bc:	ea000006 	b	77dc <__adddf3+0xdc>
    77c0:	e2455020 	sub	r5, r5, #32
    77c4:	e28ee020 	add	lr, lr, #32
    77c8:	e3530001 	cmp	r3, #1
    77cc:	e1a0ce12 	lsl	ip, r2, lr
    77d0:	238cc002 	orrcs	ip, ip, #2
    77d4:	e0911552 	adds	r1, r1, r2, asr r5
    77d8:	e0b00fc2 	adcs	r0, r0, r2, asr #31
    77dc:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
    77e0:	5a000002 	bpl	77f0 <__adddf3+0xf0>
    77e4:	e27cc000 	rsbs	ip, ip, #0
    77e8:	e2f11000 	rscs	r1, r1, #0
    77ec:	e2e00000 	rsc	r0, r0, #0
    77f0:	e3500601 	cmp	r0, #1048576	; 0x100000
    77f4:	3a00000f 	bcc	7838 <__adddf3+0x138>
    77f8:	e3500602 	cmp	r0, #2097152	; 0x200000
    77fc:	3a000006 	bcc	781c <__adddf3+0x11c>
    7800:	e1b000a0 	lsrs	r0, r0, #1
    7804:	e1b01061 	rrxs	r1, r1
    7808:	e1a0c06c 	rrx	ip, ip
    780c:	e2844001 	add	r4, r4, #1
    7810:	e1a02a84 	lsl	r2, r4, #21
    7814:	e3720501 	cmn	r2, #4194304	; 0x400000
    7818:	2a00006b 	bcs	79cc <__adddf3+0x2cc>
    781c:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    7820:	01b0c0a1 	lsrseq	ip, r1, #1
    7824:	e2b11000 	adcs	r1, r1, #0
    7828:	e0a00a04 	adc	r0, r0, r4, lsl #20
    782c:	e1800005 	orr	r0, r0, r5
    7830:	e8bd4030 	pop	{r4, r5, lr}
    7834:	e12fff1e 	bx	lr
    7838:	e1b0c08c 	lsls	ip, ip, #1
    783c:	e0b11001 	adcs	r1, r1, r1
    7840:	e0a00000 	adc	r0, r0, r0
    7844:	e3100601 	tst	r0, #1048576	; 0x100000
    7848:	e2444001 	sub	r4, r4, #1
    784c:	1afffff2 	bne	781c <__adddf3+0x11c>
    7850:	e3300000 	teq	r0, #0
    7854:	13a03014 	movne	r3, #20
    7858:	03a03034 	moveq	r3, #52	; 0x34
    785c:	01a00001 	moveq	r0, r1
    7860:	03a01000 	moveq	r1, #0
    7864:	e1a02000 	mov	r2, r0
    7868:	e3520801 	cmp	r2, #65536	; 0x10000
    786c:	21a02822 	lsrcs	r2, r2, #16
    7870:	22433010 	subcs	r3, r3, #16
    7874:	e3520c01 	cmp	r2, #256	; 0x100
    7878:	21a02422 	lsrcs	r2, r2, #8
    787c:	22433008 	subcs	r3, r3, #8
    7880:	e3520010 	cmp	r2, #16
    7884:	21a02222 	lsrcs	r2, r2, #4
    7888:	22433004 	subcs	r3, r3, #4
    788c:	e3520004 	cmp	r2, #4
    7890:	22433002 	subcs	r3, r3, #2
    7894:	304330a2 	subcc	r3, r3, r2, lsr #1
    7898:	e04331a2 	sub	r3, r3, r2, lsr #3
    789c:	e2532020 	subs	r2, r3, #32
    78a0:	aa000007 	bge	78c4 <__adddf3+0x1c4>
    78a4:	e292200c 	adds	r2, r2, #12
    78a8:	da000004 	ble	78c0 <__adddf3+0x1c0>
    78ac:	e282c014 	add	ip, r2, #20
    78b0:	e262200c 	rsb	r2, r2, #12
    78b4:	e1a01c10 	lsl	r1, r0, ip
    78b8:	e1a00230 	lsr	r0, r0, r2
    78bc:	ea000004 	b	78d4 <__adddf3+0x1d4>
    78c0:	e2822014 	add	r2, r2, #20
    78c4:	d262c020 	rsble	ip, r2, #32
    78c8:	e1a00210 	lsl	r0, r0, r2
    78cc:	d1800c31 	orrle	r0, r0, r1, lsr ip
    78d0:	d1a01211 	lslle	r1, r1, r2
    78d4:	e0544003 	subs	r4, r4, r3
    78d8:	a0800a04 	addge	r0, r0, r4, lsl #20
    78dc:	a1800005 	orrge	r0, r0, r5
    78e0:	a8bd4030 	popge	{r4, r5, lr}
    78e4:	a12fff1e 	bxge	lr
    78e8:	e1e04004 	mvn	r4, r4
    78ec:	e254401f 	subs	r4, r4, #31
    78f0:	aa00000f 	bge	7934 <__adddf3+0x234>
    78f4:	e294400c 	adds	r4, r4, #12
    78f8:	ca000006 	bgt	7918 <__adddf3+0x218>
    78fc:	e2844014 	add	r4, r4, #20
    7900:	e2642020 	rsb	r2, r4, #32
    7904:	e1a01431 	lsr	r1, r1, r4
    7908:	e1811210 	orr	r1, r1, r0, lsl r2
    790c:	e1850430 	orr	r0, r5, r0, lsr r4
    7910:	e8bd4030 	pop	{r4, r5, lr}
    7914:	e12fff1e 	bx	lr
    7918:	e264400c 	rsb	r4, r4, #12
    791c:	e2642020 	rsb	r2, r4, #32
    7920:	e1a01231 	lsr	r1, r1, r2
    7924:	e1811410 	orr	r1, r1, r0, lsl r4
    7928:	e1a00005 	mov	r0, r5
    792c:	e8bd4030 	pop	{r4, r5, lr}
    7930:	e12fff1e 	bx	lr
    7934:	e1a01430 	lsr	r1, r0, r4
    7938:	e1a00005 	mov	r0, r5
    793c:	e8bd4030 	pop	{r4, r5, lr}
    7940:	e12fff1e 	bx	lr
    7944:	e3340000 	teq	r4, #0
    7948:	e2222601 	eor	r2, r2, #1048576	; 0x100000
    794c:	02200601 	eoreq	r0, r0, #1048576	; 0x100000
    7950:	02844001 	addeq	r4, r4, #1
    7954:	12455001 	subne	r5, r5, #1
    7958:	eaffff8f 	b	779c <__adddf3+0x9c>
    795c:	e1f0cac4 	mvns	ip, r4, asr #21
    7960:	11f0cac5 	mvnsne	ip, r5, asr #21
    7964:	0a00001d 	beq	79e0 <__adddf3+0x2e0>
    7968:	e1340005 	teq	r4, r5
    796c:	01310003 	teqeq	r1, r3
    7970:	0a000004 	beq	7988 <__adddf3+0x288>
    7974:	e3340000 	teq	r4, #0
    7978:	01a00002 	moveq	r0, r2
    797c:	01a01003 	moveq	r1, r3
    7980:	e8bd4030 	pop	{r4, r5, lr}
    7984:	e12fff1e 	bx	lr
    7988:	e1300002 	teq	r0, r2
    798c:	13a00000 	movne	r0, #0
    7990:	13a01000 	movne	r1, #0
    7994:	18bd4030 	popne	{r4, r5, lr}
    7998:	112fff1e 	bxne	lr
    799c:	e1b0caa4 	lsrs	ip, r4, #21
    79a0:	1a000004 	bne	79b8 <__adddf3+0x2b8>
    79a4:	e1b01081 	lsls	r1, r1, #1
    79a8:	e0b00000 	adcs	r0, r0, r0
    79ac:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    79b0:	e8bd4030 	pop	{r4, r5, lr}
    79b4:	e12fff1e 	bx	lr
    79b8:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    79bc:	32800601 	addcc	r0, r0, #1048576	; 0x100000
    79c0:	38bd4030 	popcc	{r4, r5, lr}
    79c4:	312fff1e 	bxcc	lr
    79c8:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
    79cc:	e385047f 	orr	r0, r5, #2130706432	; 0x7f000000
    79d0:	e380060f 	orr	r0, r0, #15728640	; 0xf00000
    79d4:	e3a01000 	mov	r1, #0
    79d8:	e8bd4030 	pop	{r4, r5, lr}
    79dc:	e12fff1e 	bx	lr
    79e0:	e1f0cac4 	mvns	ip, r4, asr #21
    79e4:	11a00002 	movne	r0, r2
    79e8:	11a01003 	movne	r1, r3
    79ec:	01f0cac5 	mvnseq	ip, r5, asr #21
    79f0:	11a02000 	movne	r2, r0
    79f4:	11a03001 	movne	r3, r1
    79f8:	e1914600 	orrs	r4, r1, r0, lsl #12
    79fc:	01935602 	orrseq	r5, r3, r2, lsl #12
    7a00:	01300002 	teqeq	r0, r2
    7a04:	13800702 	orrne	r0, r0, #524288	; 0x80000
    7a08:	e8bd4030 	pop	{r4, r5, lr}
    7a0c:	e12fff1e 	bx	lr

00007a10 <__aeabi_ui2d>:
    7a10:	e3300000 	teq	r0, #0
    7a14:	03a01000 	moveq	r1, #0
    7a18:	012fff1e 	bxeq	lr
    7a1c:	e92d4030 	push	{r4, r5, lr}
    7a20:	e3a04b01 	mov	r4, #1024	; 0x400
    7a24:	e2844032 	add	r4, r4, #50	; 0x32
    7a28:	e3a05000 	mov	r5, #0
    7a2c:	e1a01000 	mov	r1, r0
    7a30:	e3a00000 	mov	r0, #0
    7a34:	eaffff85 	b	7850 <__adddf3+0x150>

00007a38 <__aeabi_i2d>:
    7a38:	e3300000 	teq	r0, #0
    7a3c:	03a01000 	moveq	r1, #0
    7a40:	012fff1e 	bxeq	lr
    7a44:	e92d4030 	push	{r4, r5, lr}
    7a48:	e3a04b01 	mov	r4, #1024	; 0x400
    7a4c:	e2844032 	add	r4, r4, #50	; 0x32
    7a50:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    7a54:	42600000 	rsbmi	r0, r0, #0
    7a58:	e1a01000 	mov	r1, r0
    7a5c:	e3a00000 	mov	r0, #0
    7a60:	eaffff7a 	b	7850 <__adddf3+0x150>

00007a64 <__aeabi_f2d>:
    7a64:	e1b02080 	lsls	r2, r0, #1
    7a68:	e1a001c2 	asr	r0, r2, #3
    7a6c:	e1a00060 	rrx	r0, r0
    7a70:	e1a01e02 	lsl	r1, r2, #28
    7a74:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    7a78:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    7a7c:	1220030e 	eorne	r0, r0, #939524096	; 0x38000000
    7a80:	112fff1e 	bxne	lr
    7a84:	e3320000 	teq	r2, #0
    7a88:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    7a8c:	012fff1e 	bxeq	lr
    7a90:	e92d4030 	push	{r4, r5, lr}
    7a94:	e3a04d0e 	mov	r4, #896	; 0x380
    7a98:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
    7a9c:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    7aa0:	eaffff6a 	b	7850 <__adddf3+0x150>

00007aa4 <__aeabi_ul2d>:
    7aa4:	e1902001 	orrs	r2, r0, r1
    7aa8:	012fff1e 	bxeq	lr
    7aac:	e92d4030 	push	{r4, r5, lr}
    7ab0:	e3a05000 	mov	r5, #0
    7ab4:	ea000006 	b	7ad4 <__aeabi_l2d+0x1c>

00007ab8 <__aeabi_l2d>:
    7ab8:	e1902001 	orrs	r2, r0, r1
    7abc:	012fff1e 	bxeq	lr
    7ac0:	e92d4030 	push	{r4, r5, lr}
    7ac4:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    7ac8:	5a000001 	bpl	7ad4 <__aeabi_l2d+0x1c>
    7acc:	e2700000 	rsbs	r0, r0, #0
    7ad0:	e2e11000 	rsc	r1, r1, #0
    7ad4:	e3a04b01 	mov	r4, #1024	; 0x400
    7ad8:	e2844032 	add	r4, r4, #50	; 0x32
    7adc:	e1a0c000 	mov	ip, r0
    7ae0:	e1a00001 	mov	r0, r1
    7ae4:	e1a0100c 	mov	r1, ip
    7ae8:	e1b0cb20 	lsrs	ip, r0, #22
    7aec:	0affff3f 	beq	77f0 <__adddf3+0xf0>
    7af0:	e3a02003 	mov	r2, #3
    7af4:	e1b0c1ac 	lsrs	ip, ip, #3
    7af8:	12822003 	addne	r2, r2, #3
    7afc:	e1b0c1ac 	lsrs	ip, ip, #3
    7b00:	12822003 	addne	r2, r2, #3
    7b04:	e08221ac 	add	r2, r2, ip, lsr #3
    7b08:	e2623020 	rsb	r3, r2, #32
    7b0c:	e1a0c311 	lsl	ip, r1, r3
    7b10:	e1a01231 	lsr	r1, r1, r2
    7b14:	e1811310 	orr	r1, r1, r0, lsl r3
    7b18:	e1a00230 	lsr	r0, r0, r2
    7b1c:	e0844002 	add	r4, r4, r2
    7b20:	eaffff32 	b	77f0 <__adddf3+0xf0>

00007b24 <__aeabi_dmul>:
    7b24:	e92d4070 	push	{r4, r5, r6, lr}
    7b28:	e3a0c0ff 	mov	ip, #255	; 0xff
    7b2c:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    7b30:	e01c4a20 	ands	r4, ip, r0, lsr #20
    7b34:	101c5a22 	andsne	r5, ip, r2, lsr #20
    7b38:	1134000c 	teqne	r4, ip
    7b3c:	1135000c 	teqne	r5, ip
    7b40:	0b000075 	bleq	7d1c <__aeabi_dmul+0x1f8>
    7b44:	e0844005 	add	r4, r4, r5
    7b48:	e0206002 	eor	r6, r0, r2
    7b4c:	e1c00a8c 	bic	r0, r0, ip, lsl #21
    7b50:	e1c22a8c 	bic	r2, r2, ip, lsl #21
    7b54:	e1915600 	orrs	r5, r1, r0, lsl #12
    7b58:	11935602 	orrsne	r5, r3, r2, lsl #12
    7b5c:	e3800601 	orr	r0, r0, #1048576	; 0x100000
    7b60:	e3822601 	orr	r2, r2, #1048576	; 0x100000
    7b64:	0a00001d 	beq	7be0 <__aeabi_dmul+0xbc>
    7b68:	e08ec391 	umull	ip, lr, r1, r3
    7b6c:	e3a05000 	mov	r5, #0
    7b70:	e0a5e390 	umlal	lr, r5, r0, r3
    7b74:	e2063102 	and	r3, r6, #-2147483648	; 0x80000000
    7b78:	e0a5e291 	umlal	lr, r5, r1, r2
    7b7c:	e3a06000 	mov	r6, #0
    7b80:	e0a65290 	umlal	r5, r6, r0, r2
    7b84:	e33c0000 	teq	ip, #0
    7b88:	138ee001 	orrne	lr, lr, #1
    7b8c:	e24440ff 	sub	r4, r4, #255	; 0xff
    7b90:	e3560c02 	cmp	r6, #512	; 0x200
    7b94:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    7b98:	2a000002 	bcs	7ba8 <__aeabi_dmul+0x84>
    7b9c:	e1b0e08e 	lsls	lr, lr, #1
    7ba0:	e0b55005 	adcs	r5, r5, r5
    7ba4:	e0a66006 	adc	r6, r6, r6
    7ba8:	e1830586 	orr	r0, r3, r6, lsl #11
    7bac:	e1800aa5 	orr	r0, r0, r5, lsr #21
    7bb0:	e1a01585 	lsl	r1, r5, #11
    7bb4:	e1811aae 	orr	r1, r1, lr, lsr #21
    7bb8:	e1a0e58e 	lsl	lr, lr, #11
    7bbc:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    7bc0:	835c0c07 	cmphi	ip, #1792	; 0x700
    7bc4:	8a000011 	bhi	7c10 <__aeabi_dmul+0xec>
    7bc8:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    7bcc:	01b0e0a1 	lsrseq	lr, r1, #1
    7bd0:	e2b11000 	adcs	r1, r1, #0
    7bd4:	e0a00a04 	adc	r0, r0, r4, lsl #20
    7bd8:	e8bd4070 	pop	{r4, r5, r6, lr}
    7bdc:	e12fff1e 	bx	lr
    7be0:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    7be4:	e1860000 	orr	r0, r6, r0
    7be8:	e1811003 	orr	r1, r1, r3
    7bec:	e0200002 	eor	r0, r0, r2
    7bf0:	e05440ac 	subs	r4, r4, ip, lsr #1
    7bf4:	c074500c 	rsbsgt	r5, r4, ip
    7bf8:	c1800a04 	orrgt	r0, r0, r4, lsl #20
    7bfc:	c8bd4070 	popgt	{r4, r5, r6, lr}
    7c00:	c12fff1e 	bxgt	lr
    7c04:	e3800601 	orr	r0, r0, #1048576	; 0x100000
    7c08:	e3a0e000 	mov	lr, #0
    7c0c:	e2544001 	subs	r4, r4, #1
    7c10:	ca00005d 	bgt	7d8c <__aeabi_dmul+0x268>
    7c14:	e3740036 	cmn	r4, #54	; 0x36
    7c18:	d3a01000 	movle	r1, #0
    7c1c:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    7c20:	d8bd4070 	pople	{r4, r5, r6, lr}
    7c24:	d12fff1e 	bxle	lr
    7c28:	e2644000 	rsb	r4, r4, #0
    7c2c:	e2544020 	subs	r4, r4, #32
    7c30:	aa00001a 	bge	7ca0 <__aeabi_dmul+0x17c>
    7c34:	e294400c 	adds	r4, r4, #12
    7c38:	ca00000c 	bgt	7c70 <__aeabi_dmul+0x14c>
    7c3c:	e2844014 	add	r4, r4, #20
    7c40:	e2645020 	rsb	r5, r4, #32
    7c44:	e1a03511 	lsl	r3, r1, r5
    7c48:	e1a01431 	lsr	r1, r1, r4
    7c4c:	e1811510 	orr	r1, r1, r0, lsl r5
    7c50:	e2002102 	and	r2, r0, #-2147483648	; 0x80000000
    7c54:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    7c58:	e0911fa3 	adds	r1, r1, r3, lsr #31
    7c5c:	e0a20430 	adc	r0, r2, r0, lsr r4
    7c60:	e19ee083 	orrs	lr, lr, r3, lsl #1
    7c64:	01c11fa3 	biceq	r1, r1, r3, lsr #31
    7c68:	e8bd4070 	pop	{r4, r5, r6, lr}
    7c6c:	e12fff1e 	bx	lr
    7c70:	e264400c 	rsb	r4, r4, #12
    7c74:	e2645020 	rsb	r5, r4, #32
    7c78:	e1a03411 	lsl	r3, r1, r4
    7c7c:	e1a01531 	lsr	r1, r1, r5
    7c80:	e1811410 	orr	r1, r1, r0, lsl r4
    7c84:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    7c88:	e0911fa3 	adds	r1, r1, r3, lsr #31
    7c8c:	e2a00000 	adc	r0, r0, #0
    7c90:	e19ee083 	orrs	lr, lr, r3, lsl #1
    7c94:	01c11fa3 	biceq	r1, r1, r3, lsr #31
    7c98:	e8bd4070 	pop	{r4, r5, r6, lr}
    7c9c:	e12fff1e 	bx	lr
    7ca0:	e2645020 	rsb	r5, r4, #32
    7ca4:	e18ee511 	orr	lr, lr, r1, lsl r5
    7ca8:	e1a03431 	lsr	r3, r1, r4
    7cac:	e1833510 	orr	r3, r3, r0, lsl r5
    7cb0:	e1a01430 	lsr	r1, r0, r4
    7cb4:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    7cb8:	e1c11430 	bic	r1, r1, r0, lsr r4
    7cbc:	e0811fa3 	add	r1, r1, r3, lsr #31
    7cc0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    7cc4:	01c11fa3 	biceq	r1, r1, r3, lsr #31
    7cc8:	e8bd4070 	pop	{r4, r5, r6, lr}
    7ccc:	e12fff1e 	bx	lr
    7cd0:	e3340000 	teq	r4, #0
    7cd4:	1a000008 	bne	7cfc <__aeabi_dmul+0x1d8>
    7cd8:	e2006102 	and	r6, r0, #-2147483648	; 0x80000000
    7cdc:	e1b01081 	lsls	r1, r1, #1
    7ce0:	e0a00000 	adc	r0, r0, r0
    7ce4:	e3100601 	tst	r0, #1048576	; 0x100000
    7ce8:	02444001 	subeq	r4, r4, #1
    7cec:	0afffffa 	beq	7cdc <__aeabi_dmul+0x1b8>
    7cf0:	e1800006 	orr	r0, r0, r6
    7cf4:	e3350000 	teq	r5, #0
    7cf8:	11a0f00e 	movne	pc, lr
    7cfc:	e2026102 	and	r6, r2, #-2147483648	; 0x80000000
    7d00:	e1b03083 	lsls	r3, r3, #1
    7d04:	e0a22002 	adc	r2, r2, r2
    7d08:	e3120601 	tst	r2, #1048576	; 0x100000
    7d0c:	02455001 	subeq	r5, r5, #1
    7d10:	0afffffa 	beq	7d00 <__aeabi_dmul+0x1dc>
    7d14:	e1822006 	orr	r2, r2, r6
    7d18:	e1a0f00e 	mov	pc, lr
    7d1c:	e134000c 	teq	r4, ip
    7d20:	e00c5a22 	and	r5, ip, r2, lsr #20
    7d24:	1135000c 	teqne	r5, ip
    7d28:	0a000007 	beq	7d4c <__aeabi_dmul+0x228>
    7d2c:	e1916080 	orrs	r6, r1, r0, lsl #1
    7d30:	11936082 	orrsne	r6, r3, r2, lsl #1
    7d34:	1affffe5 	bne	7cd0 <__aeabi_dmul+0x1ac>
    7d38:	e0200002 	eor	r0, r0, r2
    7d3c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    7d40:	e3a01000 	mov	r1, #0
    7d44:	e8bd4070 	pop	{r4, r5, r6, lr}
    7d48:	e12fff1e 	bx	lr
    7d4c:	e1916080 	orrs	r6, r1, r0, lsl #1
    7d50:	01a01003 	moveq	r1, r3
    7d54:	01a00002 	moveq	r0, r2
    7d58:	11936082 	orrsne	r6, r3, r2, lsl #1
    7d5c:	0a000010 	beq	7da4 <__aeabi_dmul+0x280>
    7d60:	e134000c 	teq	r4, ip
    7d64:	1a000001 	bne	7d70 <__aeabi_dmul+0x24c>
    7d68:	e1916600 	orrs	r6, r1, r0, lsl #12
    7d6c:	1a00000c 	bne	7da4 <__aeabi_dmul+0x280>
    7d70:	e135000c 	teq	r5, ip
    7d74:	1a000003 	bne	7d88 <__aeabi_dmul+0x264>
    7d78:	e1936602 	orrs	r6, r3, r2, lsl #12
    7d7c:	11a01003 	movne	r1, r3
    7d80:	11a00002 	movne	r0, r2
    7d84:	1a000006 	bne	7da4 <__aeabi_dmul+0x280>
    7d88:	e0200002 	eor	r0, r0, r2
    7d8c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    7d90:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    7d94:	e380060f 	orr	r0, r0, #15728640	; 0xf00000
    7d98:	e3a01000 	mov	r1, #0
    7d9c:	e8bd4070 	pop	{r4, r5, r6, lr}
    7da0:	e12fff1e 	bx	lr
    7da4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    7da8:	e380073e 	orr	r0, r0, #16252928	; 0xf80000
    7dac:	e8bd4070 	pop	{r4, r5, r6, lr}
    7db0:	e12fff1e 	bx	lr

00007db4 <__aeabi_ddiv>:
    7db4:	e92d4070 	push	{r4, r5, r6, lr}
    7db8:	e3a0c0ff 	mov	ip, #255	; 0xff
    7dbc:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    7dc0:	e01c4a20 	ands	r4, ip, r0, lsr #20
    7dc4:	101c5a22 	andsne	r5, ip, r2, lsr #20
    7dc8:	1134000c 	teqne	r4, ip
    7dcc:	1135000c 	teqne	r5, ip
    7dd0:	0b00005e 	bleq	7f50 <__aeabi_ddiv+0x19c>
    7dd4:	e0444005 	sub	r4, r4, r5
    7dd8:	e020e002 	eor	lr, r0, r2
    7ddc:	e1935602 	orrs	r5, r3, r2, lsl #12
    7de0:	e1a00600 	lsl	r0, r0, #12
    7de4:	0a00004c 	beq	7f1c <__aeabi_ddiv+0x168>
    7de8:	e1a02602 	lsl	r2, r2, #12
    7dec:	e3a05201 	mov	r5, #268435456	; 0x10000000
    7df0:	e1852222 	orr	r2, r5, r2, lsr #4
    7df4:	e1822c23 	orr	r2, r2, r3, lsr #24
    7df8:	e1a03403 	lsl	r3, r3, #8
    7dfc:	e1855220 	orr	r5, r5, r0, lsr #4
    7e00:	e1855c21 	orr	r5, r5, r1, lsr #24
    7e04:	e1a06401 	lsl	r6, r1, #8
    7e08:	e20e0102 	and	r0, lr, #-2147483648	; 0x80000000
    7e0c:	e1550002 	cmp	r5, r2
    7e10:	01560003 	cmpeq	r6, r3
    7e14:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    7e18:	e2844c03 	add	r4, r4, #768	; 0x300
    7e1c:	2a000001 	bcs	7e28 <__aeabi_ddiv+0x74>
    7e20:	e1b020a2 	lsrs	r2, r2, #1
    7e24:	e1a03063 	rrx	r3, r3
    7e28:	e0566003 	subs	r6, r6, r3
    7e2c:	e0c55002 	sbc	r5, r5, r2
    7e30:	e1b020a2 	lsrs	r2, r2, #1
    7e34:	e1a03063 	rrx	r3, r3
    7e38:	e3a01601 	mov	r1, #1048576	; 0x100000
    7e3c:	e3a0c702 	mov	ip, #524288	; 0x80000
    7e40:	e056e003 	subs	lr, r6, r3
    7e44:	e0d5e002 	sbcs	lr, r5, r2
    7e48:	20466003 	subcs	r6, r6, r3
    7e4c:	21a0500e 	movcs	r5, lr
    7e50:	2181100c 	orrcs	r1, r1, ip
    7e54:	e1b020a2 	lsrs	r2, r2, #1
    7e58:	e1a03063 	rrx	r3, r3
    7e5c:	e056e003 	subs	lr, r6, r3
    7e60:	e0d5e002 	sbcs	lr, r5, r2
    7e64:	20466003 	subcs	r6, r6, r3
    7e68:	21a0500e 	movcs	r5, lr
    7e6c:	218110ac 	orrcs	r1, r1, ip, lsr #1
    7e70:	e1b020a2 	lsrs	r2, r2, #1
    7e74:	e1a03063 	rrx	r3, r3
    7e78:	e056e003 	subs	lr, r6, r3
    7e7c:	e0d5e002 	sbcs	lr, r5, r2
    7e80:	20466003 	subcs	r6, r6, r3
    7e84:	21a0500e 	movcs	r5, lr
    7e88:	2181112c 	orrcs	r1, r1, ip, lsr #2
    7e8c:	e1b020a2 	lsrs	r2, r2, #1
    7e90:	e1a03063 	rrx	r3, r3
    7e94:	e056e003 	subs	lr, r6, r3
    7e98:	e0d5e002 	sbcs	lr, r5, r2
    7e9c:	20466003 	subcs	r6, r6, r3
    7ea0:	21a0500e 	movcs	r5, lr
    7ea4:	218111ac 	orrcs	r1, r1, ip, lsr #3
    7ea8:	e195e006 	orrs	lr, r5, r6
    7eac:	0a00000d 	beq	7ee8 <__aeabi_ddiv+0x134>
    7eb0:	e1a05205 	lsl	r5, r5, #4
    7eb4:	e1855e26 	orr	r5, r5, r6, lsr #28
    7eb8:	e1a06206 	lsl	r6, r6, #4
    7ebc:	e1a02182 	lsl	r2, r2, #3
    7ec0:	e1822ea3 	orr	r2, r2, r3, lsr #29
    7ec4:	e1a03183 	lsl	r3, r3, #3
    7ec8:	e1b0c22c 	lsrs	ip, ip, #4
    7ecc:	1affffdb 	bne	7e40 <__aeabi_ddiv+0x8c>
    7ed0:	e3100601 	tst	r0, #1048576	; 0x100000
    7ed4:	1a000006 	bne	7ef4 <__aeabi_ddiv+0x140>
    7ed8:	e1800001 	orr	r0, r0, r1
    7edc:	e3a01000 	mov	r1, #0
    7ee0:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
    7ee4:	eaffffd5 	b	7e40 <__aeabi_ddiv+0x8c>
    7ee8:	e3100601 	tst	r0, #1048576	; 0x100000
    7eec:	01800001 	orreq	r0, r0, r1
    7ef0:	03a01000 	moveq	r1, #0
    7ef4:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    7ef8:	835c0c07 	cmphi	ip, #1792	; 0x700
    7efc:	8affff43 	bhi	7c10 <__aeabi_dmul+0xec>
    7f00:	e055c002 	subs	ip, r5, r2
    7f04:	0056c003 	subseq	ip, r6, r3
    7f08:	01b0c0a1 	lsrseq	ip, r1, #1
    7f0c:	e2b11000 	adcs	r1, r1, #0
    7f10:	e0a00a04 	adc	r0, r0, r4, lsl #20
    7f14:	e8bd4070 	pop	{r4, r5, r6, lr}
    7f18:	e12fff1e 	bx	lr
    7f1c:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    7f20:	e18e0620 	orr	r0, lr, r0, lsr #12
    7f24:	e09440ac 	adds	r4, r4, ip, lsr #1
    7f28:	c074500c 	rsbsgt	r5, r4, ip
    7f2c:	c1800a04 	orrgt	r0, r0, r4, lsl #20
    7f30:	c8bd4070 	popgt	{r4, r5, r6, lr}
    7f34:	c12fff1e 	bxgt	lr
    7f38:	e3800601 	orr	r0, r0, #1048576	; 0x100000
    7f3c:	e3a0e000 	mov	lr, #0
    7f40:	e2544001 	subs	r4, r4, #1
    7f44:	eaffff31 	b	7c10 <__aeabi_dmul+0xec>
    7f48:	e185e006 	orr	lr, r5, r6
    7f4c:	eaffff2f 	b	7c10 <__aeabi_dmul+0xec>
    7f50:	e00c5a22 	and	r5, ip, r2, lsr #20
    7f54:	e134000c 	teq	r4, ip
    7f58:	0135000c 	teqeq	r5, ip
    7f5c:	0affff90 	beq	7da4 <__aeabi_dmul+0x280>
    7f60:	e134000c 	teq	r4, ip
    7f64:	1a000006 	bne	7f84 <__aeabi_ddiv+0x1d0>
    7f68:	e1914600 	orrs	r4, r1, r0, lsl #12
    7f6c:	1affff8c 	bne	7da4 <__aeabi_dmul+0x280>
    7f70:	e135000c 	teq	r5, ip
    7f74:	1affff83 	bne	7d88 <__aeabi_dmul+0x264>
    7f78:	e1a01003 	mov	r1, r3
    7f7c:	e1a00002 	mov	r0, r2
    7f80:	eaffff87 	b	7da4 <__aeabi_dmul+0x280>
    7f84:	e135000c 	teq	r5, ip
    7f88:	1a000004 	bne	7fa0 <__aeabi_ddiv+0x1ec>
    7f8c:	e1935602 	orrs	r5, r3, r2, lsl #12
    7f90:	0affff68 	beq	7d38 <__aeabi_dmul+0x214>
    7f94:	e1a01003 	mov	r1, r3
    7f98:	e1a00002 	mov	r0, r2
    7f9c:	eaffff80 	b	7da4 <__aeabi_dmul+0x280>
    7fa0:	e1916080 	orrs	r6, r1, r0, lsl #1
    7fa4:	11936082 	orrsne	r6, r3, r2, lsl #1
    7fa8:	1affff48 	bne	7cd0 <__aeabi_dmul+0x1ac>
    7fac:	e1914080 	orrs	r4, r1, r0, lsl #1
    7fb0:	1affff74 	bne	7d88 <__aeabi_dmul+0x264>
    7fb4:	e1935082 	orrs	r5, r3, r2, lsl #1
    7fb8:	1affff5e 	bne	7d38 <__aeabi_dmul+0x214>
    7fbc:	eaffff78 	b	7da4 <__aeabi_dmul+0x280>
    7fc0:	e1a0c00d 	.word	0xe1a0c00d
    7fc4:	e92dd8f0 	.word	0xe92dd8f0
    7fc8:	e24cb004 	.word	0xe24cb004
    7fcc:	e24dd014 	.word	0xe24dd014
    7fd0:	e50b0020 	.word	0xe50b0020
    7fd4:	e50b1024 	.word	0xe50b1024
    7fd8:	e50b2028 	.word	0xe50b2028
    7fdc:	e50b302c 	.word	0xe50b302c
    7fe0:	e51b3020 	.word	0xe51b3020
    7fe4:	e50b3030 	.word	0xe50b3030
    7fe8:	e51b3030 	.word	0xe51b3030
    7fec:	e3530000 	.word	0xe3530000
    7ff0:	0a000002 	.word	0x0a000002
    7ff4:	e51b3030 	.word	0xe51b3030
    7ff8:	e3530001 	.word	0xe3530001
    7ffc:	0a000220 	.word	0x0a000220
    8000:	e51b3024 	.word	0xe51b3024
    8004:	e5932000 	.word	0xe5932000
    8008:	e59f3bd8 	.word	0xe59f3bd8
    800c:	e5832000 	.word	0xe5832000
    8010:	e59f2bc8 	.word	0xe59f2bc8
    8014:	e59f3c00 	.word	0xe59f3c00
    8018:	e5823000 	.word	0xe5823000
    801c:	e59f3c00 	.word	0xe59f3c00
    8020:	e5931000 	.word	0xe5931000
    8024:	e59f2b08 	.word	0xe59f2b08
    8028:	e59f3b08 	.word	0xe59f3b08
    802c:	e5823000 	.word	0xe5823000
    8030:	e59f3afc 	.word	0xe59f3afc
    8034:	e5933000 	.word	0xe5933000
    8038:	e5813000 	.word	0xe5813000
    803c:	e5912000 	.word	0xe5912000
    8040:	e59f3b9c 	.word	0xe59f3b9c
    8044:	e5832000 	.word	0xe5832000
    8048:	e59f2be0 	.word	0xe59f2be0
    804c:	e59f3bc8 	.word	0xe59f3bc8
    8050:	e5823000 	.word	0xe5823000
    8054:	e59f2ae0 	.word	0xe59f2ae0
    8058:	e59f3ae0 	.word	0xe59f3ae0
    805c:	e5823000 	.word	0xe5823000
    8060:	e59f2adc 	.word	0xe59f2adc
    8064:	e59f3adc 	.word	0xe59f3adc
    8068:	e5823000 	.word	0xe5823000
    806c:	e59f2b78 	.word	0xe59f2b78
    8070:	e59f3ad4 	.word	0xe59f3ad4
    8074:	e5823000 	.word	0xe5823000
    8078:	e59f3abc 	.word	0xe59f3abc
    807c:	e5932000 	.word	0xe5932000
    8080:	e59f3ab4 	.word	0xe59f3ab4
    8084:	e5933000 	.word	0xe5933000
    8088:	e1a00002 	.word	0xe1a00002
    808c:	e1a01003 	.word	0xe1a01003
    8090:	eb001530 	.word	0xeb001530
    8094:	e1a03000 	.word	0xe1a03000
    8098:	e1a02003 	.word	0xe1a02003
    809c:	e59f3b10 	.word	0xe59f3b10
    80a0:	e5832000 	.word	0xe5832000
    80a4:	e59f3a98 	.word	0xe59f3a98
    80a8:	e5932000 	.word	0xe5932000
    80ac:	e59f3a90 	.word	0xe59f3a90
    80b0:	e5933000 	.word	0xe5933000
    80b4:	e1a00002 	.word	0xe1a00002
    80b8:	e1a01003 	.word	0xe1a01003
    80bc:	eb001525 	.word	0xeb001525
    80c0:	e1a03000 	.word	0xe1a03000
    80c4:	e1a02003 	.word	0xe1a02003
    80c8:	e59f3aec 	.word	0xe59f3aec
    80cc:	e5832000 	.word	0xe5832000
    80d0:	e59f3adc 	.word	0xe59f3adc
    80d4:	e5932000 	.word	0xe5932000
    80d8:	e59f3adc 	.word	0xe59f3adc
    80dc:	e5933000 	.word	0xe5933000
    80e0:	e1a00002 	.word	0xe1a00002
    80e4:	e1a01003 	.word	0xe1a01003
    80e8:	eb001471 	.word	0xeb001471
    80ec:	e1a03000 	.word	0xe1a03000
    80f0:	e1a02003 	.word	0xe1a02003
    80f4:	e59f3acc 	.word	0xe59f3acc
    80f8:	e5832000 	.word	0xe5832000
    80fc:	e59f3ab0 	.word	0xe59f3ab0
    8100:	e5932000 	.word	0xe5932000
    8104:	e59f3aa8 	.word	0xe59f3aa8
    8108:	e5933000 	.word	0xe5933000
    810c:	e1a00002 	.word	0xe1a00002
    8110:	e1a01003 	.word	0xe1a01003
    8114:	eb00150f 	.word	0xeb00150f
    8118:	e1a03000 	.word	0xe1a03000
    811c:	e1a02003 	.word	0xe1a02003
    8120:	e59f3a7c 	.word	0xe59f3a7c
    8124:	e5832000 	.word	0xe5832000
    8128:	e59f3a8c 	.word	0xe59f3a8c
    812c:	e5932000 	.word	0xe5932000
    8130:	e59f3a84 	.word	0xe59f3a84
    8134:	e5933000 	.word	0xe5933000
    8138:	e1a00002 	.word	0xe1a00002
    813c:	e1a01003 	.word	0xe1a01003
    8140:	eb001504 	.word	0xeb001504
    8144:	e1a03000 	.word	0xe1a03000
    8148:	e1a02003 	.word	0xe1a02003
    814c:	e59f39fc 	.word	0xe59f39fc
    8150:	e5832000 	.word	0xe5832000
    8154:	e59f3a48 	.word	0xe59f3a48
    8158:	e5932000 	.word	0xe5932000
    815c:	e59f39ec 	.word	0xe59f39ec
    8160:	e5933000 	.word	0xe5933000
    8164:	e1a00002 	.word	0xe1a00002
    8168:	e1a01003 	.word	0xe1a01003
    816c:	eb001450 	.word	0xeb001450
    8170:	e1a03000 	.word	0xe1a03000
    8174:	e1a02003 	.word	0xe1a02003
    8178:	e59f3a28 	.word	0xe59f3a28
    817c:	e5832000 	.word	0xe5832000
    8180:	e59f29cc 	.word	0xe59f29cc
    8184:	e59f39cc 	.word	0xe59f39cc
    8188:	e5823000 	.word	0xe5823000
    818c:	e59f29c8 	.word	0xe59f29c8
    8190:	e59f39a0 	.word	0xe59f39a0
    8194:	e5823000 	.word	0xe5823000
    8198:	e59f2a9c 	.word	0xe59f2a9c
    819c:	e3a03001 	.word	0xe3a03001
    81a0:	e5823000 	.word	0xe5823000
    81a4:	ea00019d 	.word	0xea00019d
    81a8:	e59f3a8c 	.word	0xe59f3a8c
    81ac:	e5933000 	.word	0xe5933000
    81b0:	e1a03103 	.word	0xe1a03103
    81b4:	e1a02003 	.word	0xe1a02003
    81b8:	e59f399c 	.word	0xe59f399c
    81bc:	e0825003 	.word	0xe0825003
    81c0:	e59f3a74 	.word	0xe59f3a74
    81c4:	e5933000 	.word	0xe5933000
    81c8:	e1a03103 	.word	0xe1a03103
    81cc:	e1a02003 	.word	0xe1a02003
    81d0:	e59f3984 	.word	0xe59f3984
    81d4:	e2433004 	.word	0xe2433004
    81d8:	e0823003 	.word	0xe0823003
    81dc:	e5934000 	.word	0xe5934000
    81e0:	e59f3a54 	.word	0xe59f3a54
    81e4:	e5933000 	.word	0xe5933000
    81e8:	e1a03083 	.word	0xe1a03083
    81ec:	e2433001 	.word	0xe2433001
    81f0:	e1a00003 	.word	0xe1a00003
    81f4:	eb0014a0 	.word	0xeb0014a0
    81f8:	e1a03000 	.word	0xe1a03000
    81fc:	e1a00004 	.word	0xe1a00004
    8200:	e1a01003 	.word	0xe1a01003
    8204:	eb0014d3 	.word	0xeb0014d3
    8208:	e1a03000 	.word	0xe1a03000
    820c:	e1a04003 	.word	0xe1a04003
    8210:	e59f3a24 	.word	0xe59f3a24
    8214:	e5933000 	.word	0xe5933000
    8218:	e1a00003 	.word	0xe1a00003
    821c:	eb001496 	.word	0xeb001496
    8220:	e1a03000 	.word	0xe1a03000
    8224:	e1a00004 	.word	0xe1a00004
    8228:	e1a01003 	.word	0xe1a01003
    822c:	eb00152f 	.word	0xeb00152f
    8230:	e1a03000 	.word	0xe1a03000
    8234:	e5853000 	.word	0xe5853000
    8238:	e59f2920 	.word	0xe59f2920
    823c:	e3a03002 	.word	0xe3a03002
    8240:	e5823000 	.word	0xe5823000
    8244:	e59f2a00 	.word	0xe59f2a00
    8248:	e3a03000 	.word	0xe3a03000
    824c:	e5823000 	.word	0xe5823000
    8250:	e59f290c 	.word	0xe59f290c
    8254:	e3a03001 	.word	0xe3a03001
    8258:	e5823000 	.word	0xe5823000
    825c:	e59f39d8 	.word	0xe59f39d8
    8260:	e5932000 	.word	0xe5932000
    8264:	e59f39e0 	.word	0xe59f39e0
    8268:	e5933000 	.word	0xe5933000
    826c:	e0632002 	.word	0xe0632002
    8270:	e59f38ec 	.word	0xe59f38ec
    8274:	e5933000 	.word	0xe5933000
    8278:	e0822003 	.word	0xe0822003
    827c:	e59f38e0 	.word	0xe59f38e0
    8280:	e5933000 	.word	0xe5933000
    8284:	e1a00002 	.word	0xe1a00002
    8288:	e1a01003 	.word	0xe1a01003
    828c:	eb0015d0 	.word	0xeb0015d0
    8290:	e1a03000 	.word	0xe1a03000
    8294:	e1a02003 	.word	0xe1a02003
    8298:	e59f38c8 	.word	0xe59f38c8
    829c:	e5832000 	.word	0xe5832000
    82a0:	ea000142 	.word	0xea000142
    82a4:	e59f39a0 	.word	0xe59f39a0
    82a8:	e5934000 	.word	0xe5934000
    82ac:	e59f3988 	.word	0xe59f3988
    82b0:	e5935000 	.word	0xe5935000
    82b4:	e59f3980 	.word	0xe59f3980
    82b8:	e5933000 	.word	0xe5933000
    82bc:	e2432001 	.word	0xe2432001
    82c0:	e59f3974 	.word	0xe59f3974
    82c4:	e5933000 	.word	0xe5933000
    82c8:	e2433001 	.word	0xe2433001
    82cc:	e0010293 	.word	0xe0010293
    82d0:	e59f3974 	.word	0xe59f3974
    82d4:	e5932000 	.word	0xe5932000
    82d8:	e59f396c 	.word	0xe59f396c
    82dc:	e5933000 	.word	0xe5933000
    82e0:	e0030392 	.word	0xe0030392
    82e4:	e0633001 	.word	0xe0633001
    82e8:	e1a00003 	.word	0xe1a00003
    82ec:	eb001462 	.word	0xeb001462
    82f0:	e1a06000 	.word	0xe1a06000
    82f4:	e59f3940 	.word	0xe59f3940
    82f8:	e5933000 	.word	0xe5933000
    82fc:	e1a03083 	.word	0xe1a03083
    8300:	e2432001 	.word	0xe2432001
    8304:	e59f3930 	.word	0xe59f3930
    8308:	e5933000 	.word	0xe5933000
    830c:	e1a03083 	.word	0xe1a03083
    8310:	e2433003 	.word	0xe2433003
    8314:	e0030392 	.word	0xe0030392
    8318:	e1a00003 	.word	0xe1a00003
    831c:	eb001456 	.word	0xeb001456
    8320:	e1a03000 	.word	0xe1a03000
    8324:	e1a00006 	.word	0xe1a00006
    8328:	e1a01003 	.word	0xe1a01003
    832c:	eb0014ef 	.word	0xeb0014ef
    8330:	e1a03000 	.word	0xe1a03000
    8334:	e1a02003 	.word	0xe1a02003
    8338:	e59f18ec 	.word	0xe59f18ec
    833c:	e1a03004 	.word	0xe1a03004
    8340:	e1a03083 	.word	0xe1a03083
    8344:	e0833004 	.word	0xe0833004
    8348:	e1a03103 	.word	0xe1a03103
    834c:	e0833004 	.word	0xe0833004
    8350:	e0833005 	.word	0xe0833005
    8354:	e7812103 	.word	0xe7812103
    8358:	e59f38ec 	.word	0xe59f38ec
    835c:	e5933000 	.word	0xe5933000
    8360:	e3530000 	.word	0xe3530000
    8364:	da0000af 	.word	0xda0000af
    8368:	e59f38cc 	.word	0xe59f38cc
    836c:	e5932000 	.word	0xe5932000
    8370:	e59f38d4 	.word	0xe59f38d4
    8374:	e5933000 	.word	0xe5933000
    8378:	e0633002 	.word	0xe0633002
    837c:	e2832001 	.word	0xe2832001
    8380:	e59f37d8 	.word	0xe59f37d8
    8384:	e5933000 	.word	0xe5933000
    8388:	e0030392 	.word	0xe0030392
    838c:	e1a00003 	.word	0xe1a00003
    8390:	eb001439 	.word	0xeb001439
    8394:	e1a04000 	.word	0xe1a04000
    8398:	e59f389c 	.word	0xe59f389c
    839c:	e5932000 	.word	0xe5932000
    83a0:	e59f38a4 	.word	0xe59f38a4
    83a4:	e5933000 	.word	0xe5933000
    83a8:	e0823003 	.word	0xe0823003
    83ac:	e1a00003 	.word	0xe1a00003
    83b0:	eb001431 	.word	0xeb001431
    83b4:	e1a03000 	.word	0xe1a03000
    83b8:	e1a00004 	.word	0xe1a00004
    83bc:	e1a01003 	.word	0xe1a01003
    83c0:	eb0014ca 	.word	0xeb0014ca
    83c4:	e1a03000 	.word	0xe1a03000
    83c8:	e1a02003 	.word	0xe1a02003
    83cc:	e59f3798 	.word	0xe59f3798
    83d0:	e5832000 	.word	0xe5832000
    83d4:	e59f3870 	.word	0xe59f3870
    83d8:	e5932000 	.word	0xe5932000
    83dc:	e1a03002 	.word	0xe1a03002
    83e0:	e1a03083 	.word	0xe1a03083
    83e4:	e0833002 	.word	0xe0833002
    83e8:	e1a03103 	.word	0xe1a03103
    83ec:	e0832002 	.word	0xe0832002
    83f0:	e59f3844 	.word	0xe59f3844
    83f4:	e5933000 	.word	0xe5933000
    83f8:	e0823003 	.word	0xe0823003
    83fc:	e1a02103 	.word	0xe1a02103
    8400:	e59f3754 	.word	0xe59f3754
    8404:	e0827003 	.word	0xe0827003
    8408:	e59f383c 	.word	0xe59f383c
    840c:	e5932000 	.word	0xe5932000
    8410:	e1a03002 	.word	0xe1a03002
    8414:	e1a03083 	.word	0xe1a03083
    8418:	e0833002 	.word	0xe0833002
    841c:	e1a03103 	.word	0xe1a03103
    8420:	e0832002 	.word	0xe0832002
    8424:	e59f3810 	.word	0xe59f3810
    8428:	e5933000 	.word	0xe5933000
    842c:	e0823003 	.word	0xe0823003
    8430:	e1a01103 	.word	0xe1a01103
    8434:	e3e02033 	.word	0xe3e02033
    8438:	e59f371c 	.word	0xe59f371c
    843c:	e0823003 	.word	0xe0823003
    8440:	e0813003 	.word	0xe0813003
    8444:	e5933000 	.word	0xe5933000
    8448:	e1a00003 	.word	0xe1a00003
    844c:	ebfffd84 	.word	0xebfffd84
    8450:	e1a05000 	.word	0xe1a05000
    8454:	e1a06001 	.word	0xe1a06001
    8458:	e59f370c 	.word	0xe59f370c
    845c:	e5933000 	.word	0xe5933000
    8460:	e1a00003 	.word	0xe1a00003
    8464:	ebfffd7e 	.word	0xebfffd7e
    8468:	e1a03000 	.word	0xe1a03000
    846c:	e1a04001 	.word	0xe1a04001
    8470:	e1a00003 	.word	0xe1a00003
    8474:	e1a01004 	.word	0xe1a01004
    8478:	eb00155e 	.word	0xeb00155e
    847c:	e1a03000 	.word	0xe1a03000
    8480:	e1a04001 	.word	0xe1a04001
    8484:	e1a00005 	.word	0xe1a00005
    8488:	e1a01006 	.word	0xe1a01006
    848c:	e1a02003 	.word	0xe1a02003
    8490:	e1a03004 	.word	0xe1a03004
    8494:	ebfffda2 	.word	0xebfffda2
    8498:	e1a03000 	.word	0xe1a03000
    849c:	e1a04001 	.word	0xe1a04001
    84a0:	e1a00003 	.word	0xe1a00003
    84a4:	e1a01004 	.word	0xe1a01004
    84a8:	eb001357 	.word	0xeb001357
    84ac:	e1a03000 	.word	0xe1a03000
    84b0:	e5873000 	.word	0xe5873000
    84b4:	e59f26a4 	.word	0xe59f26a4
    84b8:	e3a03001 	.word	0xe3a03001
    84bc:	e5823000 	.word	0xe5823000
    84c0:	e59f3774 	.word	0xe59f3774
    84c4:	e5932000 	.word	0xe5932000
    84c8:	e1a03002 	.word	0xe1a03002
    84cc:	e1a03083 	.word	0xe1a03083
    84d0:	e0833002 	.word	0xe0833002
    84d4:	e1a03103 	.word	0xe1a03103
    84d8:	e0832002 	.word	0xe0832002
    84dc:	e59f3768 	.word	0xe59f3768
    84e0:	e5933000 	.word	0xe5933000
    84e4:	e0823003 	.word	0xe0823003
    84e8:	e2434001 	.word	0xe2434001
    84ec:	e59f3758 	.word	0xe59f3758
    84f0:	e5932000 	.word	0xe5932000
    84f4:	e1a03002 	.word	0xe1a03002
    84f8:	e1a03083 	.word	0xe1a03083
    84fc:	e0833002 	.word	0xe0833002
    8500:	e1a03103 	.word	0xe1a03103
    8504:	e0832002 	.word	0xe0832002
    8508:	e59f372c 	.word	0xe59f372c
    850c:	e5933000 	.word	0xe5933000
    8510:	e0823003 	.word	0xe0823003
    8514:	e1a02103 	.word	0xe1a02103
    8518:	e59f363c 	.word	0xe59f363c
    851c:	e0823003 	.word	0xe0823003
    8520:	e5931000 	.word	0xe5931000
    8524:	e59f3710 	.word	0xe59f3710
    8528:	e5932000 	.word	0xe5932000
    852c:	e1a03002 	.word	0xe1a03002
    8530:	e1a03083 	.word	0xe1a03083
    8534:	e0833002 	.word	0xe0833002
    8538:	e1a03103 	.word	0xe1a03103
    853c:	e0832002 	.word	0xe0832002
    8540:	e59f3704 	.word	0xe59f3704
    8544:	e5933000 	.word	0xe5933000
    8548:	e0823003 	.word	0xe0823003
    854c:	e2432001 	.word	0xe2432001
    8550:	e59f36e0 	.word	0xe59f36e0
    8554:	e7933102 	.word	0xe7933102
    8558:	e1a00001 	.word	0xe1a00001
    855c:	e1a01003 	.word	0xe1a01003
    8560:	eb0013fc 	.word	0xeb0013fc
    8564:	e1a03000 	.word	0xe1a03000
    8568:	e1a02003 	.word	0xe1a02003
    856c:	e59f36c4 	.word	0xe59f36c4
    8570:	e7832104 	.word	0xe7832104
    8574:	e59f36c0 	.word	0xe59f36c0
    8578:	e5932000 	.word	0xe5932000
    857c:	e1a03002 	.word	0xe1a03002
    8580:	e1a03083 	.word	0xe1a03083
    8584:	e0833002 	.word	0xe0833002
    8588:	e1a03103 	.word	0xe1a03103
    858c:	e0832002 	.word	0xe0832002
    8590:	e59f36b4 	.word	0xe59f36b4
    8594:	e5933000 	.word	0xe5933000
    8598:	e0823003 	.word	0xe0823003
    859c:	e2434001 	.word	0xe2434001
    85a0:	e59f36a4 	.word	0xe59f36a4
    85a4:	e5932000 	.word	0xe5932000
    85a8:	e1a03002 	.word	0xe1a03002
    85ac:	e1a03083 	.word	0xe1a03083
    85b0:	e0833002 	.word	0xe0833002
    85b4:	e1a03103 	.word	0xe1a03103
    85b8:	e0832002 	.word	0xe0832002
    85bc:	e59f3678 	.word	0xe59f3678
    85c0:	e5933000 	.word	0xe5933000
    85c4:	e0823003 	.word	0xe0823003
    85c8:	e1a02103 	.word	0xe1a02103
    85cc:	e59f3588 	.word	0xe59f3588
    85d0:	e0823003 	.word	0xe0823003
    85d4:	e5931000 	.word	0xe5931000
    85d8:	e59f365c 	.word	0xe59f365c
    85dc:	e5932000 	.word	0xe5932000
    85e0:	e1a03002 	.word	0xe1a03002
    85e4:	e1a03083 	.word	0xe1a03083
    85e8:	e0833002 	.word	0xe0833002
    85ec:	e1a03103 	.word	0xe1a03103
    85f0:	e0832002 	.word	0xe0832002
    85f4:	e59f3650 	.word	0xe59f3650
    85f8:	e5933000 	.word	0xe5933000
    85fc:	e0823003 	.word	0xe0823003
    8600:	e2432001 	.word	0xe2432001
    8604:	e59f3634 	.word	0xe59f3634
    8608:	e7933102 	.word	0xe7933102
    860c:	e1a00001 	.word	0xe1a00001
    8610:	e1a01003 	.word	0xe1a01003
    8614:	eb0013cf 	.word	0xeb0013cf
    8618:	e1a03000 	.word	0xe1a03000
    861c:	e1a02003 	.word	0xe1a02003
    8620:	e59f3618 	.word	0xe59f3618
    8624:	e7832104 	.word	0xe7832104
    8628:	e59f361c 	.word	0xe59f361c
    862c:	e5932000 	.word	0xe5932000
    8630:	e1a03002 	.word	0xe1a03002
    8634:	e1a03083 	.word	0xe1a03083
    8638:	e0833002 	.word	0xe0833002
    863c:	e1a03103 	.word	0xe1a03103
    8640:	e0832002 	.word	0xe0832002
    8644:	e59f35f0 	.word	0xe59f35f0
    8648:	e5933000 	.word	0xe5933000
    864c:	e0824003 	.word	0xe0824003
    8650:	e59f35f4 	.word	0xe59f35f4
    8654:	e5932000 	.word	0xe5932000
    8658:	e1a03002 	.word	0xe1a03002
    865c:	e1a03083 	.word	0xe1a03083
    8660:	e0833002 	.word	0xe0833002
    8664:	e1a03103 	.word	0xe1a03103
    8668:	e0832002 	.word	0xe0832002
    866c:	e59f35c8 	.word	0xe59f35c8
    8670:	e5933000 	.word	0xe5933000
    8674:	e0823003 	.word	0xe0823003
    8678:	e1a02103 	.word	0xe1a02103
    867c:	e59f34d8 	.word	0xe59f34d8
    8680:	e0823003 	.word	0xe0823003
    8684:	e5931000 	.word	0xe5931000
    8688:	e59f35bc 	.word	0xe59f35bc
    868c:	e5932000 	.word	0xe5932000
    8690:	e1a03002 	.word	0xe1a03002
    8694:	e1a03083 	.word	0xe1a03083
    8698:	e0833002 	.word	0xe0833002
    869c:	e1a03103 	.word	0xe1a03103
    86a0:	e0832002 	.word	0xe0832002
    86a4:	e59f3590 	.word	0xe59f3590
    86a8:	e5933000 	.word	0xe5933000
    86ac:	e0822003 	.word	0xe0822003
    86b0:	e59f3580 	.word	0xe59f3580
    86b4:	e7933102 	.word	0xe7933102
    86b8:	e1a00001 	.word	0xe1a00001
    86bc:	e1a01003 	.word	0xe1a01003
    86c0:	eb0013a4 	.word	0xeb0013a4
    86c4:	e1a03000 	.word	0xe1a03000
    86c8:	e1a02003 	.word	0xe1a02003
    86cc:	e59f3564 	.word	0xe59f3564
    86d0:	e7832104 	.word	0xe7832104
    86d4:	e59f3570 	.word	0xe59f3570
    86d8:	e5932000 	.word	0xe5932000
    86dc:	e1a03002 	.word	0xe1a03002
    86e0:	e1a03083 	.word	0xe1a03083
    86e4:	e0833002 	.word	0xe0833002
    86e8:	e1a03103 	.word	0xe1a03103
    86ec:	e0832002 	.word	0xe0832002
    86f0:	e59f3544 	.word	0xe59f3544
    86f4:	e5933000 	.word	0xe5933000
    86f8:	e0824003 	.word	0xe0824003
    86fc:	e59f3548 	.word	0xe59f3548
    8700:	e5932000 	.word	0xe5932000
    8704:	e1a03002 	.word	0xe1a03002
    8708:	e1a03083 	.word	0xe1a03083
    870c:	e0833002 	.word	0xe0833002
    8710:	e1a03103 	.word	0xe1a03103
    8714:	e0832002 	.word	0xe0832002
    8718:	e59f351c 	.word	0xe59f351c
    871c:	e5933000 	.word	0xe5933000
    8720:	e0823003 	.word	0xe0823003
    8724:	e1a02103 	.word	0xe1a02103
    8728:	e59f342c 	.word	0xe59f342c
    872c:	e0823003 	.word	0xe0823003
    8730:	e5931000 	.word	0xe5931000
    8734:	e59f3510 	.word	0xe59f3510
    8738:	e5932000 	.word	0xe5932000
    873c:	e1a03002 	.word	0xe1a03002
    8740:	e1a03083 	.word	0xe1a03083
    8744:	e0833002 	.word	0xe0833002
    8748:	e1a03103 	.word	0xe1a03103
    874c:	e0832002 	.word	0xe0832002
    8750:	e59f34e4 	.word	0xe59f34e4
    8754:	e5933000 	.word	0xe5933000
    8758:	e0822003 	.word	0xe0822003
    875c:	e59f34dc 	.word	0xe59f34dc
    8760:	e7933102 	.word	0xe7933102
    8764:	e1a00001 	.word	0xe1a00001
    8768:	e1a01003 	.word	0xe1a01003
    876c:	eb001379 	.word	0xeb001379
    8770:	e1a03000 	.word	0xe1a03000
    8774:	e1a02003 	.word	0xe1a02003
    8778:	e59f34c0 	.word	0xe59f34c0
    877c:	e7832104 	.word	0xe7832104
    8780:	e59f33e0 	.word	0xe59f33e0
    8784:	e5933000 	.word	0xe5933000
    8788:	e2432001 	.word	0xe2432001
    878c:	e59f33d4 	.word	0xe59f33d4
    8790:	e5832000 	.word	0xe5832000
    8794:	e59f34b0 	.word	0xe59f34b0
    8798:	e5932000 	.word	0xe5932000
    879c:	e59f33c0 	.word	0xe59f33c0
    87a0:	e5933000 	.word	0xe5933000
    87a4:	e0822003 	.word	0xe0822003
    87a8:	e59f349c 	.word	0xe59f349c
    87ac:	e5832000 	.word	0xe5832000
    87b0:	e59f33b0 	.word	0xe59f33b0
    87b4:	e5933000 	.word	0xe5933000
    87b8:	e3530000 	.word	0xe3530000
    87bc:	cafffeb8 	.word	0xcafffeb8
    87c0:	e59f3474 	.word	0xe59f3474
    87c4:	e5934000 	.word	0xe5934000
    87c8:	e59f346c 	.word	0xe59f346c
    87cc:	e5933000 	.word	0xe5933000
    87d0:	e2833001 	.word	0xe2833001
    87d4:	e1a00003 	.word	0xe1a00003
    87d8:	eb001327 	.word	0xeb001327
    87dc:	e1a02000 	.word	0xe1a02000
    87e0:	e59f3388 	.word	0xe59f3388
    87e4:	e7832104 	.word	0xe7832104
    87e8:	e59f344c 	.word	0xe59f344c
    87ec:	e5934000 	.word	0xe5934000
    87f0:	e59f3444 	.word	0xe59f3444
    87f4:	e5933000 	.word	0xe5933000
    87f8:	e1a00003 	.word	0xe1a00003
    87fc:	eb00131e 	.word	0xeb00131e
    8800:	e1a02000 	.word	0xe1a02000
    8804:	e59f3368 	.word	0xe59f3368
    8808:	e7832104 	.word	0xe7832104
    880c:	e59f3428 	.word	0xe59f3428
    8810:	e5933000 	.word	0xe5933000
    8814:	e2832001 	.word	0xe2832001
    8818:	e59f341c 	.word	0xe59f341c
    881c:	e5832000 	.word	0xe5832000
    8820:	e59f3414 	.word	0xe59f3414
    8824:	e5932000 	.word	0xe5932000
    8828:	e59f33b8 	.word	0xe59f33b8
    882c:	e5933000 	.word	0xe5933000
    8830:	e1520003 	.word	0xe1520003
    8834:	dafffe5b 	.word	0xdafffe5b
    8838:	e59f23ec 	.word	0xe59f23ec
    883c:	e59f33d8 	.word	0xe59f33d8
    8840:	e5823038 	.word	0xe5823038
    8844:	e59f2390 	.word	0xe59f2390
    8848:	e59f3328 	.word	0xe59f3328
    884c:	e5823000 	.word	0xe5823000
    8850:	e59f3384 	.word	0xe59f3384
    8854:	e5932000 	.word	0xe5932000
    8858:	e59f33b8 	.word	0xe59f33b8
    885c:	e5832000 	.word	0xe5832000
    8860:	e59f33b0 	.word	0xe59f33b0
    8864:	e5932000 	.word	0xe5932000
    8868:	e59f33a4 	.word	0xe59f33a4
    886c:	e5832000 	.word	0xe5832000
    8870:	e59f339c 	.word	0xe59f339c
    8874:	e5932000 	.word	0xe5932000
    8878:	e59f33b4 	.word	0xe59f33b4
    887c:	e5832000 	.word	0xe5832000
    8880:	ea00082f 	.word	0xea00082f
    8884:	e59f32c8 	.word	0xe59f32c8
    8888:	e5933000 	.word	0xe5933000
    888c:	e59b0008 	.word	0xe59b0008
    8890:	e1a01003 	.word	0xe1a01003
    8894:	eb001286 	.word	0xeb001286
    8898:	e1a03000 	.word	0xe1a03000
    889c:	e1a02003 	.word	0xe1a02003
    88a0:	e59f339c 	.word	0xe59f339c
    88a4:	e5832000 	.word	0xe5832000
    88a8:	e59f3384 	.word	0xe59f3384
    88ac:	e5933000 	.word	0xe5933000
    88b0:	e1a00003 	.word	0xe1a00003
    88b4:	e59f1360 	.word	0xe59f1360
    88b8:	eb0013e6 	.word	0xeb0013e6
    88bc:	e1a03000 	.word	0xe1a03000
    88c0:	e3530000 	.word	0xe3530000
    88c4:	ba000000 	.word	0xba000000
    88c8:	ea000008 	.word	0xea000008
    88cc:	e59f3370 	.word	0xe59f3370
    88d0:	e5933000 	.word	0xe5933000
    88d4:	e1a00003 	.word	0xe1a00003
    88d8:	e59f133c 	.word	0xe59f133c
    88dc:	eb0013dd 	.word	0xeb0013dd
    88e0:	e1a03000 	.word	0xe1a03000
    88e4:	e3530000 	.word	0xe3530000
    88e8:	ba000000 	.word	0xba000000
    88ec:	eaffffff 	.word	0xeaffffff
    88f0:	e59f2284 	.word	0xe59f2284
    88f4:	e59f3284 	.word	0xe59f3284
    88f8:	e5823000 	.word	0xe5823000
    88fc:	e59f3278 	.word	0xe59f3278
    8900:	e5933000 	.word	0xe5933000
    8904:	e1a00003 	.word	0xe1a00003
    8908:	e59f1274 	.word	0xe59f1274
    890c:	eb001377 	.word	0xeb001377
    8910:	e1a03000 	.word	0xe1a03000
    8914:	e1a02003 	.word	0xe1a02003
    8918:	e59f3268 	.word	0xe59f3268
    891c:	e5832000 	.word	0xe5832000
    8920:	e59f3260 	.word	0xe59f3260
    8924:	e5933000 	.word	0xe5933000
    8928:	e1a00003 	.word	0xe1a00003
    892c:	e59b1004 	.word	0xe59b1004
    8930:	eb001308 	.word	0xeb001308
    8934:	e1a03000 	.word	0xe1a03000
    8938:	e1a02003 	.word	0xe1a02003
    893c:	e59f3248 	.word	0xe59f3248
    8940:	e5832000 	.word	0xe5832000
    8944:	e59f323c 	.word	0xe59f323c
    8948:	e5933000 	.word	0xe5933000
    894c:	e1a00003 	.word	0xe1a00003
    8950:	e51b102c 	.word	0xe51b102c
    8954:	eb0012ff 	.word	0xeb0012ff
    8958:	e1a03000 	.word	0xe1a03000
    895c:	e1a02003 	.word	0xe1a02003
    8960:	e59f3228 	.word	0xe59f3228
    8964:	e5832000 	.word	0xe5832000
    8968:	e59f321c 	.word	0xe59f321c
    896c:	e5933000 	.word	0xe5933000
    8970:	e1a00003 	.word	0xe1a00003
    8974:	ebfffc3a 	.word	0xebfffc3a
    8978:	e1a03000 	.word	0xe1a03000
    897c:	e1a04001 	.word	0xe1a04001
    8980:	e1a00003 	.word	0xe1a00003
    8984:	e1a01004 	.word	0xe1a01004
    8988:	eb00141d 	.word	0xeb00141d
    898c:	e1a03000 	.word	0xe1a03000
    8990:	e1a04001 	.word	0xe1a04001
    8994:	e1a00003 	.word	0xe1a00003
    8998:	e1a01004 	.word	0xe1a01004
    899c:	eb00121a 	.word	0xeb00121a
    89a0:	e1a02000 	.word	0xe1a02000
    89a4:	e59f31e8 	.word	0xe59f31e8
    89a8:	e5832000 	.word	0xe5832000
    89ac:	e59f31dc 	.word	0xe59f31dc
    89b0:	e5933000 	.word	0xe5933000
    89b4:	e1a00003 	.word	0xe1a00003
    89b8:	ebfffc29 	.word	0xebfffc29
    89bc:	e1a03000 	.word	0xe1a03000
    89c0:	e1a04001 	.word	0xe1a04001
    89c4:	e1a00003 	.word	0xe1a00003
    89c8:	e1a01004 	.word	0xe1a01004
    89cc:	eb00140c 	.word	0xeb00140c
    89d0:	e1a03000 	.word	0xe1a03000
    89d4:	e1a04001 	.word	0xe1a04001
    89d8:	e1a00003 	.word	0xe1a00003
    89dc:	e1a01004 	.word	0xe1a01004
    89e0:	eb001209 	.word	0xeb001209
    89e4:	e1a02000 	.word	0xe1a02000
    89e8:	e59f31e0 	.word	0xe59f31e0
    89ec:	e5832000 	.word	0xe5832000
    89f0:	e59f3194 	.word	0xe59f3194
    89f4:	e5933000 	.word	0xe5933000
    89f8:	e1a00003 	.word	0xe1a00003
    89fc:	ebfffc18 	.word	0xebfffc18
    8a00:	e1a03000 	.word	0xe1a03000
    8a04:	e1a04001 	.word	0xe1a04001
    8a08:	e1a00003 	.word	0xe1a00003
    8a0c:	e1a01004 	.word	0xe1a01004
    8a10:	eb0013f2 	.word	0xeb0013f2
    8a14:	e1a03000 	.word	0xe1a03000
    8a18:	e1a04001 	.word	0xe1a04001
    8a1c:	e1a00003 	.word	0xe1a00003
    8a20:	e1a01004 	.word	0xe1a01004
    8a24:	eb0011f8 	.word	0xeb0011f8
    8a28:	e1a02000 	.word	0xe1a02000
    8a2c:	e59f3164 	.word	0xe59f3164
    8a30:	e5832000 	.word	0xe5832000
    8a34:	e59f3154 	.word	0xe59f3154
    8a38:	e5933000 	.word	0xe5933000
    8a3c:	e1a00003 	.word	0xe1a00003
    8a40:	ebfffc07 	.word	0xebfffc07
    8a44:	e1a03000 	.word	0xe1a03000
    8a48:	e1a04001 	.word	0xe1a04001
    8a4c:	e1a00003 	.word	0xe1a00003
    8a50:	e1a01004 	.word	0xe1a01004
    8a54:	eb0013e1 	.word	0xeb0013e1
    8a58:	e1a03000 	.word	0xe1a03000
    8a5c:	e1a04001 	.word	0xe1a04001
    8a60:	e1a00003 	.word	0xe1a00003
    8a64:	e1a01004 	.word	0xe1a01004
    8a68:	eb0011e7 	.word	0xeb0011e7
    8a6c:	e1a02000 	.word	0xe1a02000
    8a70:	e59f3154 	.word	0xe59f3154
    8a74:	e5832000 	.word	0xe5832000
    8a78:	e59f3150 	.word	0xe59f3150
    8a7c:	e5932000 	.word	0xe5932000
    8a80:	e59f3148 	.word	0xe59f3148
    8a84:	e5933000 	.word	0xe5933000
    8a88:	e1a00002 	.word	0xe1a00002
    8a8c:	e1a01003 	.word	0xe1a01003
    8a90:	eb0012b0 	.word	0xeb0012b0
    8a94:	e1a03000 	.word	0xe1a03000
    8a98:	e1a02003 	.word	0xe1a02003
    8a9c:	e59f311c 	.word	0xe59f311c
    8aa0:	e5832000 	.word	0xe5832000
    8aa4:	e59f3120 	.word	0xe59f3120
    8aa8:	e5932000 	.word	0xe5932000
    8aac:	e59f3118 	.word	0xe59f3118
    8ab0:	e5933000 	.word	0xe5933000
    8ab4:	e1a00002 	.word	0xe1a00002
    8ab8:	e1a01003 	.word	0xe1a01003
    8abc:	eb0012a5 	.word	0xeb0012a5
    8ac0:	e1a03000 	.word	0xe1a03000
    8ac4:	e1a02003 	.word	0xe1a02003
    8ac8:	e59f30e8 	.word	0xe59f30e8
    8acc:	e5832000 	.word	0xe5832000
    8ad0:	e59f30bc 	.word	0xe59f30bc
    8ad4:	e5932000 	.word	0xe5932000
    8ad8:	e59f3100 	.word	0xe59f3100
    8adc:	e5832004 	.word	0xe5832004
    8ae0:	e59f30b0 	.word	0xe59f30b0
    8ae4:	e5932000 	.word	0xe5932000
    8ae8:	e59f30f4 	.word	0xe59f30f4
    8aec:	e5832004 	.word	0xe5832004
    8af0:	e59f311c 	.word	0xe59f311c
    8af4:	e5933000 	.word	0xe5933000
    8af8:	e51b0028 	.word	0xe51b0028
    8afc:	e1a01003 	.word	0xe1a01003
    8b00:	eb001356 	.word	0xeb001356
    8b04:	e1a03000 	.word	0xe1a03000
    8b08:	e3530000 	.word	0xe3530000
    8b0c:	1a00004f 	.word	0x1a00004f
    8b10:	e59f3100 	.word	0xe59f3100
    8b14:	e5933000 	.word	0xe5933000
    8b18:	e51b002c 	.word	0xe51b002c
    8b1c:	e1a01003 	.word	0xe1a01003
    8b20:	eb00134e 	.word	0xeb00134e
    8b24:	e1a03000 	.word	0xe1a03000
    8b28:	e3530000 	.word	0xe3530000
    8b2c:	1a000047 	.word	0x1a000047
    8b30:	ea000196 	.word	0xea000196
    8b34:	40000dc0 	.word	0x40000dc0
    8b38:	3f800000 	.word	0x3f800000
    8b3c:	40000b10 	.word	0x40000b10
    8b40:	45c75119 	.word	0x45c75119
    8b44:	40000b0c 	.word	0x40000b0c
    8b48:	45c6a605 	.word	0x45c6a605
    8b4c:	45c7199a 	.word	0x45c7199a
    8b50:	40000af4 	.word	0x40000af4
    8b54:	40000aec 	.word	0x40000aec
    8b58:	44faa000 	.word	0x44faa000
    8b5c:	40000ec4 	.word	0x40000ec4
    8b60:	400016c0 	.word	0x400016c0
    8b64:	400016bc 	.word	0x400016bc
    8b68:	400016b8 	.word	0x400016b8
    8b6c:	40000ae8 	.word	0x40000ae8
    8b70:	40000e28 	.word	0x40000e28
    8b74:	40000df4 	.word	0x40000df4
    8b78:	c47a0000 	.word	0xc47a0000
    8b7c:	40000b18 	.word	0x40000b18
    8b80:	40490fdb 	.word	0x40490fdb
    8b84:	43340000 	.word	0x43340000
    8b88:	40000b14 	.word	0x40000b14
    8b8c:	40000ad0 	.word	0x40000ad0
    8b90:	40000acc 	.word	0x40000acc
    8b94:	40000ac8 	.word	0x40000ac8
    8b98:	40000ac0 	.word	0x40000ac0
    8b9c:	40000aa8 	.word	0x40000aa8
    8ba0:	40000aac 	.word	0x40000aac
    8ba4:	40000af8 	.word	0x40000af8
    8ba8:	40000af0 	.word	0x40000af0
    8bac:	40000ab0 	.word	0x40000ab0
    8bb0:	40000a9c 	.word	0x40000a9c
    8bb4:	40000b04 	.word	0x40000b04
    8bb8:	40000ab4 	.word	0x40000ab4
    8bbc:	40000b00 	.word	0x40000b00
    8bc0:	40000ab8 	.word	0x40000ab8
    8bc4:	40000a90 	.word	0x40000a90
    8bc8:	40000afc 	.word	0x40000afc
    8bcc:	40000abc 	.word	0x40000abc
    8bd0:	40000ac4 	.word	0x40000ac4
    8bd4:	40000a94 	.word	0x40000a94
    8bd8:	40000a8c 	.word	0x40000a8c
    8bdc:	40000ad8 	.word	0x40000ad8
    8be0:	40000e90 	.word	0x40000e90
    8be4:	40000e5c 	.word	0x40000e5c
    8be8:	400016cc 	.word	0x400016cc
    8bec:	40000b08 	.word	0x40000b08
    8bf0:	40000a98 	.word	0x40000a98
    8bf4:	40000a74 	.word	0x40000a74
    8bf8:	40000a78 	.word	0x40000a78
    8bfc:	40000a7c 	.word	0x40000a7c
    8c00:	40000a80 	.word	0x40000a80
    8c04:	40000a88 	.word	0x40000a88
    8c08:	40000a84 	.word	0x40000a84
    8c0c:	400016b4 	.word	0x400016b4
    8c10:	400016b0 	.word	0x400016b0
    8c14:	40000ae0 	.word	0x40000ae0
    8c18:	40000adc 	.word	0x40000adc
    8c1c:	00000000 	.word	0x00000000
    8c20:	40000aa4 	.word	0x40000aa4
    8c24:	4000001c 	.word	0x4000001c
    8c28:	40000aa0 	.word	0x40000aa0
    8c2c:	40000b1c 	.word	0x40000b1c
    8c30:	40001168 	.word	0x40001168
    8c34:	40000ae4 	.word	0x40000ae4
    8c38:	40000020 	.word	0x40000020
    8c3c:	400016c8 	.word	0x400016c8
    8c40:	400002c4 	.word	0x400002c4
    8c44:	40000ad4 	.word	0x40000ad4
    8c48:	4000140c 	.word	0x4000140c
    8c4c:	400016c4 	.word	0x400016c4
    8c50:	e51f30a4 	.word	0xe51f30a4
    8c54:	e5934000 	.word	0xe5934000
    8c58:	e51f3098 	.word	0xe51f3098
    8c5c:	e5932000 	.word	0xe5932000
    8c60:	e51f30a8 	.word	0xe51f30a8
    8c64:	e5933000 	.word	0xe5933000
    8c68:	e1a00002 	.word	0xe1a00002
    8c6c:	e1a01003 	.word	0xe1a01003
    8c70:	eb001238 	.word	0xeb001238
    8c74:	e1a03000 	.word	0xe1a03000
    8c78:	e1a00004 	.word	0xe1a00004
    8c7c:	e1a01003 	.word	0xe1a01003
    8c80:	eb00118b 	.word	0xeb00118b
    8c84:	e1a03000 	.word	0xe1a03000
    8c88:	e1a00003 	.word	0xe1a00003
    8c8c:	ebfffb74 	.word	0xebfffb74
    8c90:	e1a03000 	.word	0xe1a03000
    8c94:	e1a04001 	.word	0xe1a04001
    8c98:	e1a00003 	.word	0xe1a00003
    8c9c:	e1a01004 	.word	0xe1a01004
    8ca0:	eb001354 	.word	0xeb001354
    8ca4:	e1a03000 	.word	0xe1a03000
    8ca8:	e1a04001 	.word	0xe1a04001
    8cac:	e1a00003 	.word	0xe1a00003
    8cb0:	e1a01004 	.word	0xe1a01004
    8cb4:	eb001154 	.word	0xeb001154
    8cb8:	e1a02000 	.word	0xe1a02000
    8cbc:	e51f3118 	.word	0xe51f3118
    8cc0:	e5832000 	.word	0xe5832000
    8cc4:	e51f3120 	.word	0xe51f3120
    8cc8:	e5933000 	.word	0xe5933000
    8ccc:	e1a00003 	.word	0xe1a00003
    8cd0:	e51b1028 	.word	0xe51b1028
    8cd4:	eb00121f 	.word	0xeb00121f
    8cd8:	e1a03000 	.word	0xe1a03000
    8cdc:	e1a02003 	.word	0xe1a02003
    8ce0:	e51f3148 	.word	0xe51f3148
    8ce4:	e5832000 	.word	0xe5832000
    8ce8:	e51f3150 	.word	0xe51f3150
    8cec:	e5932000 	.word	0xe5932000
    8cf0:	e51f3144 	.word	0xe51f3144
    8cf4:	e5933000 	.word	0xe5933000
    8cf8:	e1a00002 	.word	0xe1a00002
    8cfc:	e1a01003 	.word	0xe1a01003
    8d00:	eb00116c 	.word	0xeb00116c
    8d04:	e1a03000 	.word	0xe1a03000
    8d08:	e1a04003 	.word	0xe1a04003
    8d0c:	e51f3174 	.word	0xe51f3174
    8d10:	e5932000 	.word	0xe5932000
    8d14:	e51f3160 	.word	0xe51f3160
    8d18:	e5933000 	.word	0xe5933000
    8d1c:	e1a00002 	.word	0xe1a00002
    8d20:	e1a01003 	.word	0xe1a01003
    8d24:	eb001163 	.word	0xeb001163
    8d28:	e1a03000 	.word	0xe1a03000
    8d2c:	e1a00004 	.word	0xe1a00004
    8d30:	e1a01003 	.word	0xe1a01003
    8d34:	eb00126d 	.word	0xeb00126d
    8d38:	e1a03000 	.word	0xe1a03000
    8d3c:	e1a05003 	.word	0xe1a05003
    8d40:	e51f31a8 	.word	0xe51f31a8
    8d44:	e5932000 	.word	0xe5932000
    8d48:	e51f319c 	.word	0xe51f319c
    8d4c:	e5933000 	.word	0xe5933000
    8d50:	e1a00002 	.word	0xe1a00002
    8d54:	e1a01003 	.word	0xe1a01003
    8d58:	eb001156 	.word	0xeb001156
    8d5c:	e1a03000 	.word	0xe1a03000
    8d60:	e1a04003 	.word	0xe1a04003
    8d64:	e51f31cc 	.word	0xe51f31cc
    8d68:	e5932000 	.word	0xe5932000
    8d6c:	e51f31b8 	.word	0xe51f31b8
    8d70:	e5933000 	.word	0xe5933000
    8d74:	e1a00002 	.word	0xe1a00002
    8d78:	e1a01003 	.word	0xe1a01003
    8d7c:	eb00114d 	.word	0xeb00114d
    8d80:	e1a03000 	.word	0xe1a03000
    8d84:	e1a00004 	.word	0xe1a00004
    8d88:	e1a01003 	.word	0xe1a01003
    8d8c:	eb001257 	.word	0xeb001257
    8d90:	e1a03000 	.word	0xe1a03000
    8d94:	e1a00005 	.word	0xe1a00005
    8d98:	e1a01003 	.word	0xe1a01003
    8d9c:	eb0011ed 	.word	0xeb0011ed
    8da0:	e1a03000 	.word	0xe1a03000
    8da4:	e1a02003 	.word	0xe1a02003
    8da8:	e51f3214 	.word	0xe51f3214
    8dac:	e5832000 	.word	0xe5832000
    8db0:	e51f31e8 	.word	0xe51f31e8
    8db4:	e5933000 	.word	0xe5933000
    8db8:	e1a00003 	.word	0xe1a00003
    8dbc:	ebfffb28 	.word	0xebfffb28
    8dc0:	e1a05000 	.word	0xe1a05000
    8dc4:	e1a06001 	.word	0xe1a06001
    8dc8:	e51f3234 	.word	0xe51f3234
    8dcc:	e5932000 	.word	0xe5932000
    8dd0:	e51f3220 	.word	0xe51f3220
    8dd4:	e5933000 	.word	0xe5933000
    8dd8:	e1a00002 	.word	0xe1a00002
    8ddc:	e1a01003 	.word	0xe1a01003
    8de0:	eb0011dc 	.word	0xeb0011dc
    8de4:	e1a03000 	.word	0xe1a03000
    8de8:	e1a02003 	.word	0xe1a02003
    8dec:	e51f3234 	.word	0xe51f3234
    8df0:	e5933000 	.word	0xe5933000
    8df4:	e1a00002 	.word	0xe1a00002
    8df8:	e1a01003 	.word	0xe1a01003
    8dfc:	eb00112d 	.word	0xeb00112d
    8e00:	e1a03000 	.word	0xe1a03000
    8e04:	e1a00003 	.word	0xe1a00003
    8e08:	ebfffb15 	.word	0xebfffb15
    8e0c:	e1a03000 	.word	0xe1a03000
    8e10:	e1a04001 	.word	0xe1a04001
    8e14:	e1a00003 	.word	0xe1a00003
    8e18:	e1a01004 	.word	0xe1a01004
    8e1c:	eb0012f5 	.word	0xeb0012f5
    8e20:	e1a03000 	.word	0xe1a03000
    8e24:	e1a04001 	.word	0xe1a04001
    8e28:	e1a00005 	.word	0xe1a00005
    8e2c:	e1a01006 	.word	0xe1a01006
    8e30:	e1a02003 	.word	0xe1a02003
    8e34:	e1a03004 	.word	0xe1a03004
    8e38:	ebfffbdd 	.word	0xebfffbdd
    8e3c:	e1a03000 	.word	0xe1a03000
    8e40:	e1a04001 	.word	0xe1a04001
    8e44:	e1a00003 	.word	0xe1a00003
    8e48:	e1a01004 	.word	0xe1a01004
    8e4c:	eb0010ee 	.word	0xeb0010ee
    8e50:	e1a02000 	.word	0xe1a02000
    8e54:	e51f323c 	.word	0xe51f323c
    8e58:	e5832000 	.word	0xe5832000
    8e5c:	e51f3244 	.word	0xe51f3244
    8e60:	e5932000 	.word	0xe5932000
    8e64:	e51f324c 	.word	0xe51f324c
    8e68:	e5933000 	.word	0xe5933000
    8e6c:	e1a00002 	.word	0xe1a00002
    8e70:	e1a01003 	.word	0xe1a01003
    8e74:	eb0011b7 	.word	0xeb0011b7
    8e78:	e1a03000 	.word	0xe1a03000
    8e7c:	e1a00003 	.word	0xe1a00003
    8e80:	ebfffaf7 	.word	0xebfffaf7
    8e84:	e1a03000 	.word	0xe1a03000
    8e88:	e1a04001 	.word	0xe1a04001
    8e8c:	e3a005ff 	.word	0xe3a005ff
    8e90:	e2800603 	.word	0xe2800603
    8e94:	e3a01000 	.word	0xe3a01000
    8e98:	e1a02003 	.word	0xe1a02003
    8e9c:	e1a03004 	.word	0xe1a03004
    8ea0:	ebfffa15 	.word	0xebfffa15
    8ea4:	e1a03000 	.word	0xe1a03000
    8ea8:	e1a04001 	.word	0xe1a04001
    8eac:	e1a00003 	.word	0xe1a00003
    8eb0:	e1a01004 	.word	0xe1a01004
    8eb4:	eb0012cf 	.word	0xeb0012cf
    8eb8:	e1a03000 	.word	0xe1a03000
    8ebc:	e1a04001 	.word	0xe1a04001
    8ec0:	e1a00003 	.word	0xe1a00003
    8ec4:	e1a01004 	.word	0xe1a01004
    8ec8:	eb0010cf 	.word	0xeb0010cf
    8ecc:	e1a02000 	.word	0xe1a02000
    8ed0:	e51f32b0 	.word	0xe51f32b0
    8ed4:	e5832000 	.word	0xe5832000
    8ed8:	e51b0028 	.word	0xe51b0028
    8edc:	e51b1028 	.word	0xe51b1028
    8ee0:	eb00119c 	.word	0xeb00119c
    8ee4:	e1a03000 	.word	0xe1a03000
    8ee8:	e1a00003 	.word	0xe1a00003
    8eec:	ebfffadc 	.word	0xebfffadc
    8ef0:	e1a05000 	.word	0xe1a05000
    8ef4:	e1a06001 	.word	0xe1a06001
    8ef8:	e51f3360 	.word	0xe51f3360
    8efc:	e5933000 	.word	0xe5933000
    8f00:	e1a00003 	.word	0xe1a00003
    8f04:	ebfffad6 	.word	0xebfffad6
    8f08:	e1a03000 	.word	0xe1a03000
    8f0c:	e1a04001 	.word	0xe1a04001
    8f10:	e1a00003 	.word	0xe1a00003
    8f14:	e1a01004 	.word	0xe1a01004
    8f18:	e1a02003 	.word	0xe1a02003
    8f1c:	e1a03004 	.word	0xe1a03004
    8f20:	ebfff9f6 	.word	0xebfff9f6
    8f24:	e1a03000 	.word	0xe1a03000
    8f28:	e1a04001 	.word	0xe1a04001
    8f2c:	e1a00005 	.word	0xe1a00005
    8f30:	e1a01006 	.word	0xe1a01006
    8f34:	e1a02003 	.word	0xe1a02003
    8f38:	e1a03004 	.word	0xe1a03004
    8f3c:	ebfff9ef 	.word	0xebfff9ef
    8f40:	e1a03000 	.word	0xe1a03000
    8f44:	e1a04001 	.word	0xe1a04001
    8f48:	e1a05003 	.word	0xe1a05003
    8f4c:	e1a06004 	.word	0xe1a06004
    8f50:	e51f33b4 	.word	0xe51f33b4
    8f54:	e5934000 	.word	0xe5934000
    8f58:	e51f33b8 	.word	0xe51f33b8
    8f5c:	e5932000 	.word	0xe5932000
    8f60:	e51f33a8 	.word	0xe51f33a8
    8f64:	e5933000 	.word	0xe5933000
    8f68:	e1a00002 	.word	0xe1a00002
    8f6c:	e1a01003 	.word	0xe1a01003
    8f70:	eb001178 	.word	0xeb001178
    8f74:	e1a03000 	.word	0xe1a03000
    8f78:	e1a00004 	.word	0xe1a00004
    8f7c:	e1a01003 	.word	0xe1a01003
    8f80:	eb0010cb 	.word	0xeb0010cb
    8f84:	e1a03000 	.word	0xe1a03000
    8f88:	e1a04003 	.word	0xe1a04003
    8f8c:	e51f33e8 	.word	0xe51f33e8
    8f90:	e5932000 	.word	0xe5932000
    8f94:	e51f33f0 	.word	0xe51f33f0
    8f98:	e5933000 	.word	0xe5933000
    8f9c:	e1a00002 	.word	0xe1a00002
    8fa0:	e1a01003 	.word	0xe1a01003
    8fa4:	eb00116b 	.word	0xeb00116b
    8fa8:	e1a03000 	.word	0xe1a03000
    8fac:	e1a00004 	.word	0xe1a00004
    8fb0:	e1a01003 	.word	0xe1a01003
    8fb4:	eb0011cd 	.word	0xeb0011cd
    8fb8:	e1a03000 	.word	0xe1a03000
    8fbc:	e1a00003 	.word	0xe1a00003
    8fc0:	ebfffaa7 	.word	0xebfffaa7
    8fc4:	e1a03000 	.word	0xe1a03000
    8fc8:	e1a04001 	.word	0xe1a04001
    8fcc:	e1a00005 	.word	0xe1a00005
    8fd0:	e1a01006 	.word	0xe1a01006
    8fd4:	e1a02003 	.word	0xe1a02003
    8fd8:	e1a03004 	.word	0xe1a03004
    8fdc:	ebfff9c7 	.word	0xebfff9c7
    8fe0:	e1a03000 	.word	0xe1a03000
    8fe4:	e1a04001 	.word	0xe1a04001
    8fe8:	e1a00003 	.word	0xe1a00003
    8fec:	e1a01004 	.word	0xe1a01004
    8ff0:	eb001085 	.word	0xeb001085
    8ff4:	e1a02000 	.word	0xe1a02000
    8ff8:	e51f3450 	.word	0xe51f3450
    8ffc:	e5832000 	.word	0xe5832000
    9000:	e51f3458 	.word	0xe51f3458
    9004:	e5933000 	.word	0xe5933000
    9008:	e1a00003 	.word	0xe1a00003
    900c:	ebfffa94 	.word	0xebfffa94
    9010:	e1a03000 	.word	0xe1a03000
    9014:	e1a04001 	.word	0xe1a04001
    9018:	e1a00003 	.word	0xe1a00003
    901c:	e1a01004 	.word	0xe1a01004
    9020:	eb001274 	.word	0xeb001274
    9024:	e1a03000 	.word	0xe1a03000
    9028:	e1a04001 	.word	0xe1a04001
    902c:	e1a00003 	.word	0xe1a00003
    9030:	e1a01004 	.word	0xe1a01004
    9034:	eb001074 	.word	0xeb001074
    9038:	e1a02000 	.word	0xe1a02000
    903c:	e51f3454 	.word	0xe51f3454
    9040:	e5832000 	.word	0xe5832000
    9044:	e51f3498 	.word	0xe51f3498
    9048:	e5932000 	.word	0xe5932000
    904c:	e51f349c 	.word	0xe51f349c
    9050:	e5933000 	.word	0xe5933000
    9054:	e1a00002 	.word	0xe1a00002
    9058:	e1a01003 	.word	0xe1a01003
    905c:	eb00113d 	.word	0xeb00113d
    9060:	e1a03000 	.word	0xe1a03000
    9064:	e1a04003 	.word	0xe1a04003
    9068:	e51f34b4 	.word	0xe51f34b4
    906c:	e5932000 	.word	0xe5932000
    9070:	e51f34b8 	.word	0xe51f34b8
    9074:	e5933000 	.word	0xe5933000
    9078:	e1a00002 	.word	0xe1a00002
    907c:	e1a01003 	.word	0xe1a01003
    9080:	eb001134 	.word	0xeb001134
    9084:	e1a03000 	.word	0xe1a03000
    9088:	e1a00004 	.word	0xe1a00004
    908c:	e1a01003 	.word	0xe1a01003
    9090:	eb001088 	.word	0xeb001088
    9094:	e1a03000 	.word	0xe1a03000
    9098:	e1a00003 	.word	0xe1a00003
    909c:	ebfffa70 	.word	0xebfffa70
    90a0:	e1a03000 	.word	0xe1a03000
    90a4:	e1a04001 	.word	0xe1a04001
    90a8:	e1a00003 	.word	0xe1a00003
    90ac:	e1a01004 	.word	0xe1a01004
    90b0:	eb001250 	.word	0xeb001250
    90b4:	e1a03000 	.word	0xe1a03000
    90b8:	e1a04001 	.word	0xe1a04001
    90bc:	e1a00003 	.word	0xe1a00003
    90c0:	e1a01004 	.word	0xe1a01004
    90c4:	eb001050 	.word	0xeb001050
    90c8:	e1a02000 	.word	0xe1a02000
    90cc:	e51f3500 	.word	0xe51f3500
    90d0:	e5832000 	.word	0xe5832000
    90d4:	e51f3508 	.word	0xe51f3508
    90d8:	e5933000 	.word	0xe5933000
    90dc:	e1a00003 	.word	0xe1a00003
    90e0:	e51b1028 	.word	0xe51b1028
    90e4:	eb001073 	.word	0xeb001073
    90e8:	e1a03000 	.word	0xe1a03000
    90ec:	e1a02003 	.word	0xe1a02003
    90f0:	e51f3508 	.word	0xe51f3508
    90f4:	e5933000 	.word	0xe5933000
    90f8:	e1a00002 	.word	0xe1a00002
    90fc:	e1a01003 	.word	0xe1a01003
    9100:	eb00117a 	.word	0xeb00117a
    9104:	e1a03000 	.word	0xe1a03000
    9108:	e1a02003 	.word	0xe1a02003
    910c:	e51f3550 	.word	0xe51f3550
    9110:	e5832000 	.word	0xe5832000
    9114:	e51f3554 	.word	0xe51f3554
    9118:	e5932000 	.word	0xe5932000
    911c:	e51f3558 	.word	0xe51f3558
    9120:	e5933000 	.word	0xe5933000
    9124:	e1a00002 	.word	0xe1a00002
    9128:	e1a01003 	.word	0xe1a01003
    912c:	eb001109 	.word	0xeb001109
    9130:	e1a03000 	.word	0xe1a03000
    9134:	e1a02003 	.word	0xe1a02003
    9138:	e51f3570 	.word	0xe51f3570
    913c:	e5933000 	.word	0xe5933000
    9140:	e1a00002 	.word	0xe1a00002
    9144:	e1a01003 	.word	0xe1a01003
    9148:	eb001102 	.word	0xeb001102
    914c:	e1a03000 	.word	0xe1a03000
    9150:	e1a04003 	.word	0xe1a04003
    9154:	e51f356c 	.word	0xe51f356c
    9158:	e5932000 	.word	0xe5932000
    915c:	e51f3590 	.word	0xe51f3590
    9160:	e5933000 	.word	0xe5933000
    9164:	e1a00002 	.word	0xe1a00002
    9168:	e1a01003 	.word	0xe1a01003
    916c:	eb0010f9 	.word	0xeb0010f9
    9170:	e1a03000 	.word	0xe1a03000
    9174:	e1a00004 	.word	0xe1a00004
    9178:	e1a01003 	.word	0xe1a01003
    917c:	eb00115b 	.word	0xeb00115b
    9180:	e1a03000 	.word	0xe1a03000
    9184:	e1a02003 	.word	0xe1a02003
    9188:	e51f35b8 	.word	0xe51f35b8
    918c:	e5832000 	.word	0xe5832000
    9190:	e51f35bc 	.word	0xe51f35bc
    9194:	e5933000 	.word	0xe5933000
    9198:	e59b0004 	.word	0xe59b0004
    919c:	e1a01003 	.word	0xe1a01003
    91a0:	eb0011ae 	.word	0xeb0011ae
    91a4:	e1a03000 	.word	0xe1a03000
    91a8:	e3530000 	.word	0xe3530000
    91ac:	1a000000 	.word	0x1a000000
    91b0:	ea00004e 	.word	0xea00004e
    91b4:	e51f2570 	.word	0xe51f2570
    91b8:	e3a03002 	.word	0xe3a03002
    91bc:	e5823000 	.word	0xe5823000
    91c0:	ea000044 	.word	0xea000044
    91c4:	e51f3580 	.word	0xe51f3580
    91c8:	e5934000 	.word	0xe5934000
    91cc:	e51f35f4 	.word	0xe51f35f4
    91d0:	e5931004 	.word	0xe5931004
    91d4:	e51f3590 	.word	0xe51f3590
    91d8:	e5933000 	.word	0xe5933000
    91dc:	e2432001 	.word	0xe2432001
    91e0:	e51f3604 	.word	0xe51f3604
    91e4:	e7933102 	.word	0xe7933102
    91e8:	e1a00001 	.word	0xe1a00001
    91ec:	e1a01003 	.word	0xe1a01003
    91f0:	eb0010d8 	.word	0xeb0010d8
    91f4:	e1a03000 	.word	0xe1a03000
    91f8:	e1a05003 	.word	0xe1a05003
    91fc:	e51f3620 	.word	0xe51f3620
    9200:	e5931004 	.word	0xe5931004
    9204:	e51f35c0 	.word	0xe51f35c0
    9208:	e5933000 	.word	0xe5933000
    920c:	e2432001 	.word	0xe2432001
    9210:	e51f3638 	.word	0xe51f3638
    9214:	e7933102 	.word	0xe7933102
    9218:	e1a00001 	.word	0xe1a00001
    921c:	e1a01003 	.word	0xe1a01003
    9220:	eb0010cc 	.word	0xeb0010cc
    9224:	e1a03000 	.word	0xe1a03000
    9228:	e1a00005 	.word	0xe1a00005
    922c:	e1a01003 	.word	0xe1a01003
    9230:	eb001020 	.word	0xeb001020
    9234:	e1a03000 	.word	0xe1a03000
    9238:	e1a02003 	.word	0xe1a02003
    923c:	e51f3664 	.word	0xe51f3664
    9240:	e7832104 	.word	0xe7832104
    9244:	e51f3600 	.word	0xe51f3600
    9248:	e5934000 	.word	0xe5934000
    924c:	e51f3670 	.word	0xe51f3670
    9250:	e5931004 	.word	0xe5931004
    9254:	e51f3610 	.word	0xe51f3610
    9258:	e5933000 	.word	0xe5933000
    925c:	e2432001 	.word	0xe2432001
    9260:	e51f3684 	.word	0xe51f3684
    9264:	e7933102 	.word	0xe7933102
    9268:	e1a00001 	.word	0xe1a00001
    926c:	e1a01003 	.word	0xe1a01003
    9270:	eb0010b8 	.word	0xeb0010b8
    9274:	e1a03000 	.word	0xe1a03000
    9278:	e1a05003 	.word	0xe1a05003
    927c:	e51f36a4 	.word	0xe51f36a4
    9280:	e5931004 	.word	0xe5931004
    9284:	e51f3640 	.word	0xe51f3640
    9288:	e5933000 	.word	0xe5933000
    928c:	e2432001 	.word	0xe2432001
    9290:	e51f36b8 	.word	0xe51f36b8
    9294:	e7933102 	.word	0xe7933102
    9298:	e1a00001 	.word	0xe1a00001
    929c:	e1a01003 	.word	0xe1a01003
    92a0:	eb0010ac 	.word	0xeb0010ac
    92a4:	e1a03000 	.word	0xe1a03000
    92a8:	e1a00005 	.word	0xe1a00005
    92ac:	e1a01003 	.word	0xe1a01003
    92b0:	eb000fff 	.word	0xeb000fff
    92b4:	e1a03000 	.word	0xe1a03000
    92b8:	e1a02003 	.word	0xe1a02003
    92bc:	e51f36e0 	.word	0xe51f36e0
    92c0:	e7832104 	.word	0xe7832104
    92c4:	e51f3680 	.word	0xe51f3680
    92c8:	e5933000 	.word	0xe5933000
    92cc:	e2832001 	.word	0xe2832001
    92d0:	e51f368c 	.word	0xe51f368c
    92d4:	e5832000 	.word	0xe5832000
    92d8:	e51f3694 	.word	0xe51f3694
    92dc:	e5932000 	.word	0xe5932000
    92e0:	e51f3700 	.word	0xe51f3700
    92e4:	e5933000 	.word	0xe5933000
    92e8:	e1520003 	.word	0xe1520003
    92ec:	daffffb4 	.word	0xdaffffb4
    92f0:	e51f370c 	.word	0xe51f370c
    92f4:	e5932000 	.word	0xe5932000
    92f8:	e51f3710 	.word	0xe51f3710
    92fc:	e5933000 	.word	0xe5933000
    9300:	e1a00002 	.word	0xe1a00002
    9304:	e1a01003 	.word	0xe1a01003
    9308:	eb0010f8 	.word	0xeb0010f8
    930c:	e1a03000 	.word	0xe1a03000
    9310:	e1a02003 	.word	0xe1a02003
    9314:	e51f3718 	.word	0xe51f3718
    9318:	e5832000 	.word	0xe5832000
    931c:	e51f3720 	.word	0xe51f3720
    9320:	e5932000 	.word	0xe5932000
    9324:	e51f3728 	.word	0xe51f3728
    9328:	e5933000 	.word	0xe5933000
    932c:	e1a00002 	.word	0xe1a00002
    9330:	e1a01003 	.word	0xe1a01003
    9334:	eb001087 	.word	0xeb001087
    9338:	e1a03000 	.word	0xe1a03000
    933c:	e1a02003 	.word	0xe1a02003
    9340:	e51f3740 	.word	0xe51f3740
    9344:	e5832000 	.word	0xe5832000
    9348:	e51f275c 	.word	0xe51f275c
    934c:	e51f3738 	.word	0xe51f3738
    9350:	e5823000 	.word	0xe5823000
    9354:	e51f3768 	.word	0xe51f3768
    9358:	e5932000 	.word	0xe5932000
    935c:	e51f376c 	.word	0xe51f376c
    9360:	e5832000 	.word	0xe5832000
    9364:	e51f3774 	.word	0xe51f3774
    9368:	e5932000 	.word	0xe5932000
    936c:	e51f3778 	.word	0xe51f3778
    9370:	e5832000 	.word	0xe5832000
    9374:	e51f3780 	.word	0xe51f3780
    9378:	e5932000 	.word	0xe5932000
    937c:	e51f3784 	.word	0xe51f3784
    9380:	e5832000 	.word	0xe5832000
    9384:	e51f2750 	.word	0xe51f2750
    9388:	e3a03001 	.word	0xe3a03001
    938c:	e5823000 	.word	0xe5823000
    9390:	ea0003e7 	.word	0xea0003e7
    9394:	e51f3794 	.word	0xe51f3794
    9398:	e5932000 	.word	0xe5932000
    939c:	e51f37a0 	.word	0xe51f37a0
    93a0:	e5933000 	.word	0xe5933000
    93a4:	e1a00002 	.word	0xe1a00002
    93a8:	e1a01003 	.word	0xe1a01003
    93ac:	eb001069 	.word	0xeb001069
    93b0:	e1a03000 	.word	0xe1a03000
    93b4:	e1a02003 	.word	0xe1a02003
    93b8:	e51f37b8 	.word	0xe51f37b8
    93bc:	e5832000 	.word	0xe5832000
    93c0:	e51f277c 	.word	0xe51f277c
    93c4:	e3a03000 	.word	0xe3a03000
    93c8:	e5823000 	.word	0xe5823000
    93cc:	e51f27c8 	.word	0xe51f27c8
    93d0:	e3a03001 	.word	0xe3a03001
    93d4:	e5823000 	.word	0xe5823000
    93d8:	e51f37a4 	.word	0xe51f37a4
    93dc:	e5932000 	.word	0xe5932000
    93e0:	e51f379c 	.word	0xe51f379c
    93e4:	e5933000 	.word	0xe5933000
    93e8:	e0822003 	.word	0xe0822003
    93ec:	e51f37e8 	.word	0xe51f37e8
    93f0:	e5933000 	.word	0xe5933000
    93f4:	e0822003 	.word	0xe0822003
    93f8:	e51f37f4 	.word	0xe51f37f4
    93fc:	e5933000 	.word	0xe5933000
    9400:	e1a00002 	.word	0xe1a00002
    9404:	e1a01003 	.word	0xe1a01003
    9408:	eb001171 	.word	0xeb001171
    940c:	e1a03000 	.word	0xe1a03000
    9410:	e1a02003 	.word	0xe1a02003
    9414:	e51f380c 	.word	0xe51f380c
    9418:	e5832000 	.word	0xe5832000
    941c:	ea0003bb 	.word	0xea0003bb
    9420:	e51f3814 	.word	0xe51f3814
    9424:	e5933000 	.word	0xe5933000
    9428:	e51b0028 	.word	0xe51b0028
    942c:	e1a01003 	.word	0xe1a01003
    9430:	eb00110a 	.word	0xeb00110a
    9434:	e1a03000 	.word	0xe1a03000
    9438:	e3530000 	.word	0xe3530000
    943c:	1a000008 	.word	0x1a000008
    9440:	e51f3830 	.word	0xe51f3830
    9444:	e5933000 	.word	0xe5933000
    9448:	e51b002c 	.word	0xe51b002c
    944c:	e1a01003 	.word	0xe1a01003
    9450:	eb001102 	.word	0xeb001102
    9454:	e1a03000 	.word	0xe1a03000
    9458:	e3530000 	.word	0xe3530000
    945c:	1a000000 	.word	0x1a000000
    9460:	ea0001be 	.word	0xea0001be
    9464:	e51f3830 	.word	0xe51f3830
    9468:	e5932000 	.word	0xe5932000
    946c:	e51f3828 	.word	0xe51f3828
    9470:	e5933000 	.word	0xe5933000
    9474:	e1520003 	.word	0xe1520003
    9478:	1a000065 	.word	0x1a000065
    947c:	e51f3838 	.word	0xe51f3838
    9480:	e5932000 	.word	0xe5932000
    9484:	e1a03002 	.word	0xe1a03002
    9488:	e1a03083 	.word	0xe1a03083
    948c:	e0833002 	.word	0xe0833002
    9490:	e1a03103 	.word	0xe1a03103
    9494:	e0832002 	.word	0xe0832002
    9498:	e51f3864 	.word	0xe51f3864
    949c:	e5933000 	.word	0xe5933000
    94a0:	e0823003 	.word	0xe0823003
    94a4:	e1a02103 	.word	0xe1a02103
    94a8:	e51f388c 	.word	0xe51f388c
    94ac:	e5933000 	.word	0xe5933000
    94b0:	e0824003 	.word	0xe0824003
    94b4:	e51f3880 	.word	0xe51f3880
    94b8:	e5933000 	.word	0xe5933000
    94bc:	e1a03103 	.word	0xe1a03103
    94c0:	e1a02003 	.word	0xe1a02003
    94c4:	e51f38a8 	.word	0xe51f38a8
    94c8:	e5933000 	.word	0xe5933000
    94cc:	e0821003 	.word	0xe0821003
    94d0:	e51f388c 	.word	0xe51f388c
    94d4:	e5932000 	.word	0xe5932000
    94d8:	e1a03002 	.word	0xe1a03002
    94dc:	e1a03083 	.word	0xe1a03083
    94e0:	e0833002 	.word	0xe0833002
    94e4:	e1a03103 	.word	0xe1a03103
    94e8:	e0833002 	.word	0xe0833002
    94ec:	e1a03103 	.word	0xe1a03103
    94f0:	e0813003 	.word	0xe0813003
    94f4:	e2433038 	.word	0xe2433038
    94f8:	e5932000 	.word	0xe5932000
    94fc:	e51f38dc 	.word	0xe51f38dc
    9500:	e5933000 	.word	0xe5933000
    9504:	e1a00002 	.word	0xe1a00002
    9508:	e1a01003 	.word	0xe1a01003
    950c:	eb001011 	.word	0xeb001011
    9510:	e1a03000 	.word	0xe1a03000
    9514:	e5843000 	.word	0xe5843000
    9518:	e51f38d4 	.word	0xe51f38d4
    951c:	e5934000 	.word	0xe5934000
    9520:	e51f38ec 	.word	0xe51f38ec
    9524:	e5935000 	.word	0xe5935000
    9528:	e51f38e4 	.word	0xe51f38e4
    952c:	e5933000 	.word	0xe5933000
    9530:	e2432001 	.word	0xe2432001
    9534:	e51f3900 	.word	0xe51f3900
    9538:	e5933000 	.word	0xe5933000
    953c:	e2431001 	.word	0xe2431001
    9540:	e51f0918 	.word	0xe51f0918
    9544:	e1a03002 	.word	0xe1a03002
    9548:	e1a03083 	.word	0xe1a03083
    954c:	e0833002 	.word	0xe0833002
    9550:	e1a03103 	.word	0xe1a03103
    9554:	e0833002 	.word	0xe0833002
    9558:	e0833001 	.word	0xe0833001
    955c:	e7902103 	.word	0xe7902103
    9560:	e51f3940 	.word	0xe51f3940
    9564:	e5933000 	.word	0xe5933000
    9568:	e1a00002 	.word	0xe1a00002
    956c:	e1a01003 	.word	0xe1a01003
    9570:	eb000ff8 	.word	0xeb000ff8
    9574:	e1a03000 	.word	0xe1a03000
    9578:	e1a06003 	.word	0xe1a06003
    957c:	e51f3948 	.word	0xe51f3948
    9580:	e5933000 	.word	0xe5933000
    9584:	e1a03103 	.word	0xe1a03103
    9588:	e1a02003 	.word	0xe1a02003
    958c:	e51f3970 	.word	0xe51f3970
    9590:	e5933000 	.word	0xe5933000
    9594:	e0821003 	.word	0xe0821003
    9598:	e51f3954 	.word	0xe51f3954
    959c:	e5932000 	.word	0xe5932000
    95a0:	e1a03002 	.word	0xe1a03002
    95a4:	e1a03083 	.word	0xe1a03083
    95a8:	e0833002 	.word	0xe0833002
    95ac:	e1a03103 	.word	0xe1a03103
    95b0:	e0833002 	.word	0xe0833002
    95b4:	e1a03103 	.word	0xe1a03103
    95b8:	e0813003 	.word	0xe0813003
    95bc:	e2433038 	.word	0xe2433038
    95c0:	e5932000 	.word	0xe5932000
    95c4:	e51f39ac 	.word	0xe51f39ac
    95c8:	e5933000 	.word	0xe5933000
    95cc:	e1a00002 	.word	0xe1a00002
    95d0:	e1a01003 	.word	0xe1a01003
    95d4:	eb000fdf 	.word	0xeb000fdf
    95d8:	e1a03000 	.word	0xe1a03000
    95dc:	e1a00006 	.word	0xe1a00006
    95e0:	e1a01003 	.word	0xe1a01003
    95e4:	eb000f33 	.word	0xeb000f33
    95e8:	e1a03000 	.word	0xe1a03000
    95ec:	e1a02003 	.word	0xe1a02003
    95f0:	e51f19c8 	.word	0xe51f19c8
    95f4:	e1a03004 	.word	0xe1a03004
    95f8:	e1a03083 	.word	0xe1a03083
    95fc:	e0833004 	.word	0xe0833004
    9600:	e1a03103 	.word	0xe1a03103
    9604:	e0833004 	.word	0xe0833004
    9608:	e0833005 	.word	0xe0833005
    960c:	e7812103 	.word	0xe7812103
    9610:	ea000152 	.word	0xea000152
    9614:	e51f39e0 	.word	0xe51f39e0
    9618:	e5933000 	.word	0xe5933000
    961c:	e3530001 	.word	0xe3530001
    9620:	1a000068 	.word	0x1a000068
    9624:	e51f39e0 	.word	0xe51f39e0
    9628:	e5933000 	.word	0xe5933000
    962c:	e3530000 	.word	0xe3530000
    9630:	1a000064 	.word	0x1a000064
    9634:	e51f39f0 	.word	0xe51f39f0
    9638:	e5932000 	.word	0xe5932000
    963c:	e1a03002 	.word	0xe1a03002
    9640:	e1a03083 	.word	0xe1a03083
    9644:	e0833002 	.word	0xe0833002
    9648:	e1a03103 	.word	0xe1a03103
    964c:	e0832002 	.word	0xe0832002
    9650:	e51f3a1c 	.word	0xe51f3a1c
    9654:	e5933000 	.word	0xe5933000
    9658:	e0823003 	.word	0xe0823003
    965c:	e1a02103 	.word	0xe1a02103
    9660:	e51f3a44 	.word	0xe51f3a44
    9664:	e5933000 	.word	0xe5933000
    9668:	e0824003 	.word	0xe0824003
    966c:	e51f3a38 	.word	0xe51f3a38
    9670:	e5933000 	.word	0xe5933000
    9674:	e1a03103 	.word	0xe1a03103
    9678:	e1a02003 	.word	0xe1a02003
    967c:	e51f3a60 	.word	0xe51f3a60
    9680:	e5933000 	.word	0xe5933000
    9684:	e0821003 	.word	0xe0821003
    9688:	e51f3a44 	.word	0xe51f3a44
    968c:	e5932000 	.word	0xe5932000
    9690:	e1a03002 	.word	0xe1a03002
    9694:	e1a03083 	.word	0xe1a03083
    9698:	e0833002 	.word	0xe0833002
    969c:	e1a03103 	.word	0xe1a03103
    96a0:	e0833002 	.word	0xe0833002
    96a4:	e1a03103 	.word	0xe1a03103
    96a8:	e0813003 	.word	0xe0813003
    96ac:	e2433004 	.word	0xe2433004
    96b0:	e5932000 	.word	0xe5932000
    96b4:	e51f3a9c 	.word	0xe51f3a9c
    96b8:	e5933000 	.word	0xe5933000
    96bc:	e1a00002 	.word	0xe1a00002
    96c0:	e1a01003 	.word	0xe1a01003
    96c4:	eb000fa3 	.word	0xeb000fa3
    96c8:	e1a03000 	.word	0xe1a03000
    96cc:	e5843000 	.word	0xe5843000
    96d0:	e51f3a8c 	.word	0xe51f3a8c
    96d4:	e5934000 	.word	0xe5934000
    96d8:	e51f3aa4 	.word	0xe51f3aa4
    96dc:	e5935000 	.word	0xe5935000
    96e0:	e51f3a9c 	.word	0xe51f3a9c
    96e4:	e5932000 	.word	0xe5932000
    96e8:	e51f3ab4 	.word	0xe51f3ab4
    96ec:	e5933000 	.word	0xe5933000
    96f0:	e2431001 	.word	0xe2431001
    96f4:	e51f0acc 	.word	0xe51f0acc
    96f8:	e1a03002 	.word	0xe1a03002
    96fc:	e1a03083 	.word	0xe1a03083
    9700:	e0833002 	.word	0xe0833002
    9704:	e1a03103 	.word	0xe1a03103
    9708:	e0833002 	.word	0xe0833002
    970c:	e0833001 	.word	0xe0833001
    9710:	e7902103 	.word	0xe7902103
    9714:	e51f3afc 	.word	0xe51f3afc
    9718:	e5933000 	.word	0xe5933000
    971c:	e1a00002 	.word	0xe1a00002
    9720:	e1a01003 	.word	0xe1a01003
    9724:	eb000f8b 	.word	0xeb000f8b
    9728:	e1a03000 	.word	0xe1a03000
    972c:	e1a06003 	.word	0xe1a06003
    9730:	e51f3afc 	.word	0xe51f3afc
    9734:	e5933000 	.word	0xe5933000
    9738:	e1a03103 	.word	0xe1a03103
    973c:	e1a02003 	.word	0xe1a02003
    9740:	e51f3b24 	.word	0xe51f3b24
    9744:	e5933000 	.word	0xe5933000
    9748:	e0821003 	.word	0xe0821003
    974c:	e51f3b08 	.word	0xe51f3b08
    9750:	e5932000 	.word	0xe5932000
    9754:	e1a03002 	.word	0xe1a03002
    9758:	e1a03083 	.word	0xe1a03083
    975c:	e0833002 	.word	0xe0833002
    9760:	e1a03103 	.word	0xe1a03103
    9764:	e0833002 	.word	0xe0833002
    9768:	e1a03103 	.word	0xe1a03103
    976c:	e0813003 	.word	0xe0813003
    9770:	e2433004 	.word	0xe2433004
    9774:	e5932000 	.word	0xe5932000
    9778:	e51f3b58 	.word	0xe51f3b58
    977c:	e5933000 	.word	0xe5933000
    9780:	e1a00002 	.word	0xe1a00002
    9784:	e1a01003 	.word	0xe1a01003
    9788:	eb000f72 	.word	0xeb000f72
    978c:	e1a03000 	.word	0xe1a03000
    9790:	e1a00006 	.word	0xe1a00006
    9794:	e1a01003 	.word	0xe1a01003
    9798:	eb000ec5 	.word	0xeb000ec5
    979c:	e1a03000 	.word	0xe1a03000
    97a0:	e1a02003 	.word	0xe1a02003
    97a4:	e51f1b7c 	.word	0xe51f1b7c
    97a8:	e1a03004 	.word	0xe1a03004
    97ac:	e1a03083 	.word	0xe1a03083
    97b0:	e0833004 	.word	0xe0833004
    97b4:	e1a03103 	.word	0xe1a03103
    97b8:	e0833004 	.word	0xe0833004
    97bc:	e0833005 	.word	0xe0833005
    97c0:	e7812103 	.word	0xe7812103
    97c4:	ea0000e5 	.word	0xea0000e5
    97c8:	e51f3b94 	.word	0xe51f3b94
    97cc:	e5933000 	.word	0xe5933000
    97d0:	e3530001 	.word	0xe3530001
    97d4:	da0000e1 	.word	0xda0000e1
    97d8:	e51f3ba4 	.word	0xe51f3ba4
    97dc:	e5932000 	.word	0xe5932000
    97e0:	e51f3b9c 	.word	0xe51f3b9c
    97e4:	e5933000 	.word	0xe5933000
    97e8:	e1520003 	.word	0xe1520003
    97ec:	0a0000db 	.word	0x0a0000db
    97f0:	e51f3bbc 	.word	0xe51f3bbc
    97f4:	e5933000 	.word	0xe5933000
    97f8:	e2432002 	.word	0xe2432002
    97fc:	e51f3bb8 	.word	0xe51f3bb8
    9800:	e5933000 	.word	0xe5933000
    9804:	e1520003 	.word	0xe1520003
    9808:	aa000012 	.word	0xaa000012
    980c:	e51f3bd8 	.word	0xe51f3bd8
    9810:	e5933000 	.word	0xe5933000
    9814:	e1a03103 	.word	0xe1a03103
    9818:	e1a02003 	.word	0xe1a02003
    981c:	e51f3c00 	.word	0xe51f3c00
    9820:	e5933000 	.word	0xe5933000
    9824:	e0821003 	.word	0xe0821003
    9828:	e51f3be4 	.word	0xe51f3be4
    982c:	e5932000 	.word	0xe5932000
    9830:	e1a03002 	.word	0xe1a03002
    9834:	e1a03083 	.word	0xe1a03083
    9838:	e0833002 	.word	0xe0833002
    983c:	e1a03103 	.word	0xe1a03103
    9840:	e0833002 	.word	0xe0833002
    9844:	e1a03103 	.word	0xe1a03103
    9848:	e0813003 	.word	0xe0813003
    984c:	e2432008 	.word	0xe2432008
    9850:	e51f3c3c 	.word	0xe51f3c3c
    9854:	e5823000 	.word	0xe5823000
    9858:	e51f3c24 	.word	0xe51f3c24
    985c:	e5933000 	.word	0xe5933000
    9860:	e2432002 	.word	0xe2432002
    9864:	e51f3c20 	.word	0xe51f3c20
    9868:	e5933000 	.word	0xe5933000
    986c:	e1520003 	.word	0xe1520003
    9870:	aa00000d 	.word	0xaa00000d
    9874:	e51f3c30 	.word	0xe51f3c30
    9878:	e5932000 	.word	0xe5932000
    987c:	e51f3c48 	.word	0xe51f3c48
    9880:	e5933000 	.word	0xe5933000
    9884:	e2431002 	.word	0xe2431002
    9888:	e51f0c60 	.word	0xe51f0c60
    988c:	e1a03002 	.word	0xe1a03002
    9890:	e1a03083 	.word	0xe1a03083
    9894:	e0833002 	.word	0xe0833002
    9898:	e1a03103 	.word	0xe1a03103
    989c:	e0833002 	.word	0xe0833002
    98a0:	e0832001 	.word	0xe0832001
    98a4:	e51f3c90 	.word	0xe51f3c90
    98a8:	e7803102 	.word	0xe7803102
    98ac:	e51f3c68 	.word	0xe51f3c68
    98b0:	e5932000 	.word	0xe5932000
    98b4:	e1a03002 	.word	0xe1a03002
    98b8:	e1a03083 	.word	0xe1a03083
    98bc:	e0833002 	.word	0xe0833002
    98c0:	e1a03103 	.word	0xe1a03103
    98c4:	e0832002 	.word	0xe0832002
    98c8:	e51f3c94 	.word	0xe51f3c94
    98cc:	e5933000 	.word	0xe5933000
    98d0:	e0823003 	.word	0xe0823003
    98d4:	e1a02103 	.word	0xe1a02103
    98d8:	e51f3cbc 	.word	0xe51f3cbc
    98dc:	e5933000 	.word	0xe5933000
    98e0:	e0824003 	.word	0xe0824003
    98e4:	e51f3cb0 	.word	0xe51f3cb0
    98e8:	e5933000 	.word	0xe5933000
    98ec:	e1a03103 	.word	0xe1a03103
    98f0:	e1a02003 	.word	0xe1a02003
    98f4:	e51f3cd8 	.word	0xe51f3cd8
    98f8:	e5933000 	.word	0xe5933000
    98fc:	e0821003 	.word	0xe0821003
    9900:	e51f3cbc 	.word	0xe51f3cbc
    9904:	e5932000 	.word	0xe5932000
    9908:	e1a03002 	.word	0xe1a03002
    990c:	e1a03083 	.word	0xe1a03083
    9910:	e0833002 	.word	0xe0833002
    9914:	e1a03103 	.word	0xe1a03103
    9918:	e0833002 	.word	0xe0833002
    991c:	e1a03103 	.word	0xe1a03103
    9920:	e0813003 	.word	0xe0813003
    9924:	e2433004 	.word	0xe2433004
    9928:	e5932000 	.word	0xe5932000
    992c:	e51f3d14 	.word	0xe51f3d14
    9930:	e5933000 	.word	0xe5933000
    9934:	e1a00002 	.word	0xe1a00002
    9938:	e1a01003 	.word	0xe1a01003
    993c:	eb000f05 	.word	0xeb000f05
    9940:	e1a03000 	.word	0xe1a03000
    9944:	e1a05003 	.word	0xe1a05003
    9948:	e51f3d04 	.word	0xe51f3d04
    994c:	e5932000 	.word	0xe5932000
    9950:	e51f3d1c 	.word	0xe51f3d1c
    9954:	e5931000 	.word	0xe5931000
    9958:	e51f0d34 	.word	0xe51f0d34
    995c:	e1a03002 	.word	0xe1a03002
    9960:	e1a03083 	.word	0xe1a03083
    9964:	e0833002 	.word	0xe0833002
    9968:	e1a03103 	.word	0xe1a03103
    996c:	e0833002 	.word	0xe0833002
    9970:	e0833001 	.word	0xe0833001
    9974:	e7901103 	.word	0xe7901103
    9978:	e51f3d44 	.word	0xe51f3d44
    997c:	e5933000 	.word	0xe5933000
    9980:	e1a03103 	.word	0xe1a03103
    9984:	e1a02003 	.word	0xe1a02003
    9988:	e51f3d6c 	.word	0xe51f3d6c
    998c:	e5933000 	.word	0xe5933000
    9990:	e0820003 	.word	0xe0820003
    9994:	e51f3d50 	.word	0xe51f3d50
    9998:	e5932000 	.word	0xe5932000
    999c:	e1a03002 	.word	0xe1a03002
    99a0:	e1a03083 	.word	0xe1a03083
    99a4:	e0833002 	.word	0xe0833002
    99a8:	e1a03103 	.word	0xe1a03103
    99ac:	e0833002 	.word	0xe0833002
    99b0:	e1a03103 	.word	0xe1a03103
    99b4:	e0803003 	.word	0xe0803003
    99b8:	e2433008 	.word	0xe2433008
    99bc:	e5933000 	.word	0xe5933000
    99c0:	e1a00001 	.word	0xe1a00001
    99c4:	e1a01003 	.word	0xe1a01003
    99c8:	eb000ee2 	.word	0xeb000ee2
    99cc:	e1a03000 	.word	0xe1a03000
    99d0:	e1a00005 	.word	0xe1a00005
    99d4:	e1a01003 	.word	0xe1a01003
    99d8:	eb000e35 	.word	0xeb000e35
    99dc:	e1a03000 	.word	0xe1a03000
    99e0:	e5843000 	.word	0xe5843000
    99e4:	e51f3da0 	.word	0xe51f3da0
    99e8:	e5934000 	.word	0xe5934000
    99ec:	e51f3db8 	.word	0xe51f3db8
    99f0:	e5935000 	.word	0xe5935000
    99f4:	e51f3db0 	.word	0xe51f3db0
    99f8:	e5932000 	.word	0xe5932000
    99fc:	e51f3dc8 	.word	0xe51f3dc8
    9a00:	e5933000 	.word	0xe5933000
    9a04:	e2431001 	.word	0xe2431001
    9a08:	e51f0de0 	.word	0xe51f0de0
    9a0c:	e1a03002 	.word	0xe1a03002
    9a10:	e1a03083 	.word	0xe1a03083
    9a14:	e0833002 	.word	0xe0833002
    9a18:	e1a03103 	.word	0xe1a03103
    9a1c:	e0833002 	.word	0xe0833002
    9a20:	e0833001 	.word	0xe0833001
    9a24:	e7902103 	.word	0xe7902103
    9a28:	e51f3e10 	.word	0xe51f3e10
    9a2c:	e5933000 	.word	0xe5933000
    9a30:	e1a00002 	.word	0xe1a00002
    9a34:	e1a01003 	.word	0xe1a01003
    9a38:	eb000ec6 	.word	0xeb000ec6
    9a3c:	e1a03000 	.word	0xe1a03000
    9a40:	e1a06003 	.word	0xe1a06003
    9a44:	e51f3e10 	.word	0xe51f3e10
    9a48:	e5933000 	.word	0xe5933000
    9a4c:	e1a03103 	.word	0xe1a03103
    9a50:	e1a02003 	.word	0xe1a02003
    9a54:	e51f3e38 	.word	0xe51f3e38
    9a58:	e5933000 	.word	0xe5933000
    9a5c:	e0821003 	.word	0xe0821003
    9a60:	e51f3e1c 	.word	0xe51f3e1c
    9a64:	e5932000 	.word	0xe5932000
    9a68:	e1a03002 	.word	0xe1a03002
    9a6c:	e1a03083 	.word	0xe1a03083
    9a70:	e0833002 	.word	0xe0833002
    9a74:	e1a03103 	.word	0xe1a03103
    9a78:	e0833002 	.word	0xe0833002
    9a7c:	e1a03103 	.word	0xe1a03103
    9a80:	e0813003 	.word	0xe0813003
    9a84:	e2433004 	.word	0xe2433004
    9a88:	e5932000 	.word	0xe5932000
    9a8c:	e51f3e6c 	.word	0xe51f3e6c
    9a90:	e5933000 	.word	0xe5933000
    9a94:	e1a00002 	.word	0xe1a00002
    9a98:	e1a01003 	.word	0xe1a01003
    9a9c:	eb000ead 	.word	0xeb000ead
    9aa0:	e1a03000 	.word	0xe1a03000
    9aa4:	e1a00006 	.word	0xe1a00006
    9aa8:	e1a01003 	.word	0xe1a01003
    9aac:	eb000e00 	.word	0xeb000e00
    9ab0:	e1a03000 	.word	0xe1a03000
    9ab4:	e1a06003 	.word	0xe1a06003
    9ab8:	e51f3e74 	.word	0xe51f3e74
    9abc:	e5932000 	.word	0xe5932000
    9ac0:	e51f3e8c 	.word	0xe51f3e8c
    9ac4:	e5931000 	.word	0xe5931000
    9ac8:	e51f0ea4 	.word	0xe51f0ea4
    9acc:	e1a03002 	.word	0xe1a03002
    9ad0:	e1a03083 	.word	0xe1a03083
    9ad4:	e0833002 	.word	0xe0833002
    9ad8:	e1a03103 	.word	0xe1a03103
    9adc:	e0833002 	.word	0xe0833002
    9ae0:	e0833001 	.word	0xe0833001
    9ae4:	e790c103 	.word	0xe790c103
    9ae8:	e51f3ea4 	.word	0xe51f3ea4
    9aec:	e5932000 	.word	0xe5932000
    9af0:	e51f3ebc 	.word	0xe51f3ebc
    9af4:	e5933000 	.word	0xe5933000
    9af8:	e2431002 	.word	0xe2431002
    9afc:	e51f0ed4 	.word	0xe51f0ed4
    9b00:	e1a03002 	.word	0xe1a03002
    9b04:	e1a03083 	.word	0xe1a03083
    9b08:	e0833002 	.word	0xe0833002
    9b0c:	e1a03103 	.word	0xe1a03103
    9b10:	e0833002 	.word	0xe0833002
    9b14:	e0833001 	.word	0xe0833001
    9b18:	e7903103 	.word	0xe7903103
    9b1c:	e1a0000c 	.word	0xe1a0000c
    9b20:	e1a01003 	.word	0xe1a01003
    9b24:	eb000e8b 	.word	0xeb000e8b
    9b28:	e1a03000 	.word	0xe1a03000
    9b2c:	e1a00006 	.word	0xe1a00006
    9b30:	e1a01003 	.word	0xe1a01003
    9b34:	eb000dde 	.word	0xeb000dde
    9b38:	e1a03000 	.word	0xe1a03000
    9b3c:	e1a02003 	.word	0xe1a02003
    9b40:	e51f1f18 	.word	0xe51f1f18
    9b44:	e1a03004 	.word	0xe1a03004
    9b48:	e1a03083 	.word	0xe1a03083
    9b4c:	e0833004 	.word	0xe0833004
    9b50:	e1a03103 	.word	0xe1a03103
    9b54:	e0833004 	.word	0xe0833004
    9b58:	e0833005 	.word	0xe0833005
    9b5c:	e7812103 	.word	0xe7812103
    9b60:	e51f3f34 	.word	0xe51f3f34
    9b64:	e5933000 	.word	0xe5933000
    9b68:	e59b0008 	.word	0xe59b0008
    9b6c:	e1a01003 	.word	0xe1a01003
    9b70:	eb000f3a 	.word	0xeb000f3a
    9b74:	e1a03000 	.word	0xe1a03000
    9b78:	e3530000 	.word	0xe3530000
    9b7c:	1a000000 	.word	0x1a000000
    9b80:	ea000064 	.word	0xea000064
    9b84:	e51f3f40 	.word	0xe51f3f40
    9b88:	e5934000 	.word	0xe5934000
    9b8c:	e51f3f58 	.word	0xe51f3f58
    9b90:	e5935000 	.word	0xe5935000
    9b94:	e51f3f50 	.word	0xe51f3f50
    9b98:	e5932000 	.word	0xe5932000
    9b9c:	e1a03002 	.word	0xe1a03002
    9ba0:	e1a03083 	.word	0xe1a03083
    9ba4:	e0833002 	.word	0xe0833002
    9ba8:	e1a03103 	.word	0xe1a03103
    9bac:	e0832002 	.word	0xe0832002
    9bb0:	e51f3f7c 	.word	0xe51f3f7c
    9bb4:	e5933000 	.word	0xe5933000
    9bb8:	e0822003 	.word	0xe0822003
    9bbc:	e51f3f8c 	.word	0xe51f3f8c
    9bc0:	e7936102 	.word	0xe7936102
    9bc4:	e51f3f80 	.word	0xe51f3f80
    9bc8:	e5932000 	.word	0xe5932000
    9bcc:	e1a03002 	.word	0xe1a03002
    9bd0:	e1a03083 	.word	0xe1a03083
    9bd4:	e0833002 	.word	0xe0833002
    9bd8:	e1a03103 	.word	0xe1a03103
    9bdc:	e0832002 	.word	0xe0832002
    9be0:	e51f3fac 	.word	0xe51f3fac
    9be4:	e5933000 	.word	0xe5933000
    9be8:	e0822003 	.word	0xe0822003
    9bec:	e51f3fb4 	.word	0xe51f3fb4
    9bf0:	e7932102 	.word	0xe7932102
    9bf4:	e51f3fb8 	.word	0xe51f3fb8
    9bf8:	e5933000 	.word	0xe5933000
    9bfc:	e1a00002 	.word	0xe1a00002
    9c00:	e1a01003 	.word	0xe1a01003
    9c04:	eb000e53 	.word	0xeb000e53
    9c08:	e1a03000 	.word	0xe1a03000
    9c0c:	e1a00006 	.word	0xe1a00006
    9c10:	e1a01003 	.word	0xe1a01003
    9c14:	eb000da7 	.word	0xeb000da7
    9c18:	e1a03000 	.word	0xe1a03000
    9c1c:	e1a02003 	.word	0xe1a02003
    9c20:	e51f1fe0 	.word	0xe51f1fe0
    9c24:	e1a03004 	.word	0xe1a03004
    9c28:	e1a03083 	.word	0xe1a03083
    9c2c:	e0833004 	.word	0xe0833004
    9c30:	e1a03103 	.word	0xe1a03103
    9c34:	e0833004 	.word	0xe0833004
    9c38:	e0833005 	.word	0xe0833005
    9c3c:	e7812103 	.word	0xe7812103
    9c40:	e51f3ffc 	.word	0xe51f3ffc
    9c44:	e5933000 	.word	0xe5933000
    9c48:	e3530000 	.word	0xe3530000
    9c4c:	0a000031 	.word	0x0a000031
    9c50:	e59f3cf8 	.word	0xe59f3cf8
    9c54:	e5934000 	.word	0xe5934000
    9c58:	e59f3cf4 	.word	0xe59f3cf4
    9c5c:	e5933000 	.word	0xe5933000
    9c60:	e2435001 	.word	0xe2435001
    9c64:	e59f3ce4 	.word	0xe59f3ce4
    9c68:	e5932000 	.word	0xe5932000
    9c6c:	e1a03002 	.word	0xe1a03002
    9c70:	e1a03083 	.word	0xe1a03083
    9c74:	e0833002 	.word	0xe0833002
    9c78:	e1a03103 	.word	0xe1a03103
    9c7c:	e0832002 	.word	0xe0832002
    9c80:	e59f3ccc 	.word	0xe59f3ccc
    9c84:	e5933000 	.word	0xe5933000
    9c88:	e0823003 	.word	0xe0823003
    9c8c:	e2432001 	.word	0xe2432001
    9c90:	e59f3cc0 	.word	0xe59f3cc0
    9c94:	e7936102 	.word	0xe7936102
    9c98:	e59f3cb0 	.word	0xe59f3cb0
    9c9c:	e5932000 	.word	0xe5932000
    9ca0:	e1a03002 	.word	0xe1a03002
    9ca4:	e1a03083 	.word	0xe1a03083
    9ca8:	e0833002 	.word	0xe0833002
    9cac:	e1a03103 	.word	0xe1a03103
    9cb0:	e0832002 	.word	0xe0832002
    9cb4:	e59f3c98 	.word	0xe59f3c98
    9cb8:	e5933000 	.word	0xe5933000
    9cbc:	e0823003 	.word	0xe0823003
    9cc0:	e2432001 	.word	0xe2432001
    9cc4:	e59f3c90 	.word	0xe59f3c90
    9cc8:	e7932102 	.word	0xe7932102
    9ccc:	e59f3c8c 	.word	0xe59f3c8c
    9cd0:	e5933000 	.word	0xe5933000
    9cd4:	e1a00002 	.word	0xe1a00002
    9cd8:	e1a01003 	.word	0xe1a01003
    9cdc:	eb000e1d 	.word	0xeb000e1d
    9ce0:	e1a03000 	.word	0xe1a03000
    9ce4:	e1a00006 	.word	0xe1a00006
    9ce8:	e1a01003 	.word	0xe1a01003
    9cec:	eb000d71 	.word	0xeb000d71
    9cf0:	e1a03000 	.word	0xe1a03000
    9cf4:	e1a02003 	.word	0xe1a02003
    9cf8:	e59f1c64 	.word	0xe59f1c64
    9cfc:	e1a03004 	.word	0xe1a03004
    9d00:	e1a03083 	.word	0xe1a03083
    9d04:	e0833004 	.word	0xe0833004
    9d08:	e1a03103 	.word	0xe1a03103
    9d0c:	e0833004 	.word	0xe0833004
    9d10:	e0833005 	.word	0xe0833005
    9d14:	e7812103 	.word	0xe7812103
    9d18:	e59f3c34 	.word	0xe59f3c34
    9d1c:	e5932000 	.word	0xe5932000
    9d20:	e1a03002 	.word	0xe1a03002
    9d24:	e1a03083 	.word	0xe1a03083
    9d28:	e0833002 	.word	0xe0833002
    9d2c:	e1a03103 	.word	0xe1a03103
    9d30:	e0832002 	.word	0xe0832002
    9d34:	e59f3c14 	.word	0xe59f3c14
    9d38:	e5933000 	.word	0xe5933000
    9d3c:	e0823003 	.word	0xe0823003
    9d40:	e1a02103 	.word	0xe1a02103
    9d44:	e59f3c1c 	.word	0xe59f3c1c
    9d48:	e5933000 	.word	0xe5933000
    9d4c:	e0823003 	.word	0xe0823003
    9d50:	e5932000 	.word	0xe5932000
    9d54:	e59f3c10 	.word	0xe59f3c10
    9d58:	e5933000 	.word	0xe5933000
    9d5c:	e1a00002 	.word	0xe1a00002
    9d60:	e1a01003 	.word	0xe1a01003
    9d64:	eb000dfb 	.word	0xeb000dfb
    9d68:	e1a03000 	.word	0xe1a03000
    9d6c:	e1a02003 	.word	0xe1a02003
    9d70:	e59f3bf8 	.word	0xe59f3bf8
    9d74:	e5832000 	.word	0xe5832000
    9d78:	e59f3bd4 	.word	0xe59f3bd4
    9d7c:	e5933000 	.word	0xe5933000
    9d80:	e3530000 	.word	0xe3530000
    9d84:	1a00002e 	.word	0x1a00002e
    9d88:	e59f3bc4 	.word	0xe59f3bc4
    9d8c:	e5932000 	.word	0xe5932000
    9d90:	e59f3bb8 	.word	0xe59f3bb8
    9d94:	e5931000 	.word	0xe5931000
    9d98:	e59f0bc4 	.word	0xe59f0bc4
    9d9c:	e1a03002 	.word	0xe1a03002
    9da0:	e1a03083 	.word	0xe1a03083
    9da4:	e0833002 	.word	0xe0833002
    9da8:	e1a03103 	.word	0xe1a03103
    9dac:	e0833002 	.word	0xe0833002
    9db0:	e0833001 	.word	0xe0833001
    9db4:	e7901103 	.word	0xe7901103
    9db8:	e59f3b94 	.word	0xe59f3b94
    9dbc:	e5932000 	.word	0xe5932000
    9dc0:	e59f3bac 	.word	0xe59f3bac
    9dc4:	e7933102 	.word	0xe7933102
    9dc8:	e1a00001 	.word	0xe1a00001
    9dcc:	e1a01003 	.word	0xe1a01003
    9dd0:	eb000de0 	.word	0xeb000de0
    9dd4:	e1a03000 	.word	0xe1a03000
    9dd8:	e1a02003 	.word	0xe1a02003
    9ddc:	e59f3b94 	.word	0xe59f3b94
    9de0:	e5832000 	.word	0xe5832000
    9de4:	e59f3b68 	.word	0xe59f3b68
    9de8:	e5932000 	.word	0xe5932000
    9dec:	e59f3b5c 	.word	0xe59f3b5c
    9df0:	e5931000 	.word	0xe5931000
    9df4:	e59f0b68 	.word	0xe59f0b68
    9df8:	e1a03002 	.word	0xe1a03002
    9dfc:	e1a03083 	.word	0xe1a03083
    9e00:	e0833002 	.word	0xe0833002
    9e04:	e1a03103 	.word	0xe1a03103
    9e08:	e0833002 	.word	0xe0833002
    9e0c:	e0833001 	.word	0xe0833001
    9e10:	e7901103 	.word	0xe7901103
    9e14:	e59f3b38 	.word	0xe59f3b38
    9e18:	e5932000 	.word	0xe5932000
    9e1c:	e59f3b58 	.word	0xe59f3b58
    9e20:	e7933102 	.word	0xe7933102
    9e24:	e1a00001 	.word	0xe1a00001
    9e28:	e1a01003 	.word	0xe1a01003
    9e2c:	eb000dc9 	.word	0xeb000dc9
    9e30:	e1a03000 	.word	0xe1a03000
    9e34:	e1a02003 	.word	0xe1a02003
    9e38:	e59f3b40 	.word	0xe59f3b40
    9e3c:	e5832000 	.word	0xe5832000
    9e40:	ea000061 	.word	0xea000061
    9e44:	e59f3b08 	.word	0xe59f3b08
    9e48:	e5932000 	.word	0xe5932000
    9e4c:	e59f3afc 	.word	0xe59f3afc
    9e50:	e5931000 	.word	0xe5931000
    9e54:	e59f0b08 	.word	0xe59f0b08
    9e58:	e1a03002 	.word	0xe1a03002
    9e5c:	e1a03083 	.word	0xe1a03083
    9e60:	e0833002 	.word	0xe0833002
    9e64:	e1a03103 	.word	0xe1a03103
    9e68:	e0833002 	.word	0xe0833002
    9e6c:	e0833001 	.word	0xe0833001
    9e70:	e7901103 	.word	0xe7901103
    9e74:	e59f3ad8 	.word	0xe59f3ad8
    9e78:	e5932000 	.word	0xe5932000
    9e7c:	e59f3af0 	.word	0xe59f3af0
    9e80:	e7933102 	.word	0xe7933102
    9e84:	e1a00001 	.word	0xe1a00001
    9e88:	e1a01003 	.word	0xe1a01003
    9e8c:	eb000db1 	.word	0xeb000db1
    9e90:	e1a03000 	.word	0xe1a03000
    9e94:	e1a04003 	.word	0xe1a04003
    9e98:	e59f3ab0 	.word	0xe59f3ab0
    9e9c:	e5932000 	.word	0xe5932000
    9ea0:	e59f3aac 	.word	0xe59f3aac
    9ea4:	e5933000 	.word	0xe5933000
    9ea8:	e2431001 	.word	0xe2431001
    9eac:	e59f0ab0 	.word	0xe59f0ab0
    9eb0:	e1a03002 	.word	0xe1a03002
    9eb4:	e1a03083 	.word	0xe1a03083
    9eb8:	e0833002 	.word	0xe0833002
    9ebc:	e1a03103 	.word	0xe1a03103
    9ec0:	e0833002 	.word	0xe0833002
    9ec4:	e0833001 	.word	0xe0833001
    9ec8:	e7901103 	.word	0xe7901103
    9ecc:	e59f3a80 	.word	0xe59f3a80
    9ed0:	e5932000 	.word	0xe5932000
    9ed4:	e59f3aa0 	.word	0xe59f3aa0
    9ed8:	e7933102 	.word	0xe7933102
    9edc:	e1a00001 	.word	0xe1a00001
    9ee0:	e1a01003 	.word	0xe1a01003
    9ee4:	eb000d9b 	.word	0xeb000d9b
    9ee8:	e1a03000 	.word	0xe1a03000
    9eec:	e1a00004 	.word	0xe1a00004
    9ef0:	e1a01003 	.word	0xe1a01003
    9ef4:	eb000cef 	.word	0xeb000cef
    9ef8:	e1a03000 	.word	0xe1a03000
    9efc:	e1a02003 	.word	0xe1a02003
    9f00:	e59f3a70 	.word	0xe59f3a70
    9f04:	e5832000 	.word	0xe5832000
    9f08:	e59f3a44 	.word	0xe59f3a44
    9f0c:	e5932000 	.word	0xe5932000
    9f10:	e59f3a38 	.word	0xe59f3a38
    9f14:	e5931000 	.word	0xe5931000
    9f18:	e59f0a44 	.word	0xe59f0a44
    9f1c:	e1a03002 	.word	0xe1a03002
    9f20:	e1a03083 	.word	0xe1a03083
    9f24:	e0833002 	.word	0xe0833002
    9f28:	e1a03103 	.word	0xe1a03103
    9f2c:	e0833002 	.word	0xe0833002
    9f30:	e0833001 	.word	0xe0833001
    9f34:	e7901103 	.word	0xe7901103
    9f38:	e59f3a14 	.word	0xe59f3a14
    9f3c:	e5932000 	.word	0xe5932000
    9f40:	e59f3a34 	.word	0xe59f3a34
    9f44:	e7933102 	.word	0xe7933102
    9f48:	e1a00001 	.word	0xe1a00001
    9f4c:	e1a01003 	.word	0xe1a01003
    9f50:	eb000d80 	.word	0xeb000d80
    9f54:	e1a03000 	.word	0xe1a03000
    9f58:	e1a04003 	.word	0xe1a04003
    9f5c:	e59f39ec 	.word	0xe59f39ec
    9f60:	e5932000 	.word	0xe5932000
    9f64:	e59f39e8 	.word	0xe59f39e8
    9f68:	e5933000 	.word	0xe5933000
    9f6c:	e2431001 	.word	0xe2431001
    9f70:	e59f09ec 	.word	0xe59f09ec
    9f74:	e1a03002 	.word	0xe1a03002
    9f78:	e1a03083 	.word	0xe1a03083
    9f7c:	e0833002 	.word	0xe0833002
    9f80:	e1a03103 	.word	0xe1a03103
    9f84:	e0833002 	.word	0xe0833002
    9f88:	e0833001 	.word	0xe0833001
    9f8c:	e7901103 	.word	0xe7901103
    9f90:	e59f39bc 	.word	0xe59f39bc
    9f94:	e5932000 	.word	0xe5932000
    9f98:	e59f39d4 	.word	0xe59f39d4
    9f9c:	e7933102 	.word	0xe7933102
    9fa0:	e1a00001 	.word	0xe1a00001
    9fa4:	e1a01003 	.word	0xe1a01003
    9fa8:	eb000d6a 	.word	0xeb000d6a
    9fac:	e1a03000 	.word	0xe1a03000
    9fb0:	e1a00004 	.word	0xe1a00004
    9fb4:	e1a01003 	.word	0xe1a01003
    9fb8:	eb000cbd 	.word	0xeb000cbd
    9fbc:	e1a03000 	.word	0xe1a03000
    9fc0:	e1a02003 	.word	0xe1a02003
    9fc4:	e59f39b4 	.word	0xe59f39b4
    9fc8:	e5832000 	.word	0xe5832000
    9fcc:	e59f39b0 	.word	0xe59f39b0
    9fd0:	e5934000 	.word	0xe5934000
    9fd4:	e59f3990 	.word	0xe59f3990
    9fd8:	e5932000 	.word	0xe5932000
    9fdc:	e59f3994 	.word	0xe59f3994
    9fe0:	e5933000 	.word	0xe5933000
    9fe4:	e1a00002 	.word	0xe1a00002
    9fe8:	e1a01003 	.word	0xe1a01003
    9fec:	eb000d59 	.word	0xeb000d59
    9ff0:	e1a03000 	.word	0xe1a03000
    9ff4:	e1a0c003 	.word	0xe1a0c003
    9ff8:	e59f3954 	.word	0xe59f3954
    9ffc:	e5932000 	.word	0xe5932000
    a000:	e59f3948 	.word	0xe59f3948
    a004:	e5931000 	.word	0xe5931000
    a008:	e59f0978 	.word	0xe59f0978
    a00c:	e1a03002 	.word	0xe1a03002
    a010:	e1a03083 	.word	0xe1a03083
    a014:	e0833002 	.word	0xe0833002
    a018:	e1a03103 	.word	0xe1a03103
    a01c:	e0833002 	.word	0xe0833002
    a020:	e0833001 	.word	0xe0833001
    a024:	e7903103 	.word	0xe7903103
    a028:	e1a0000c 	.word	0xe1a0000c
    a02c:	e1a01003 	.word	0xe1a01003
    a030:	eb000d48 	.word	0xeb000d48
    a034:	e1a03000 	.word	0xe1a03000
    a038:	e1a00004 	.word	0xe1a00004
    a03c:	e1a01003 	.word	0xe1a01003
    a040:	eb000c9b 	.word	0xeb000c9b
    a044:	e1a03000 	.word	0xe1a03000
    a048:	e1a02003 	.word	0xe1a02003
    a04c:	e59f3930 	.word	0xe59f3930
    a050:	e5832000 	.word	0xe5832000
    a054:	e59f38f8 	.word	0xe59f38f8
    a058:	e5932000 	.word	0xe5932000
    a05c:	e59f3928 	.word	0xe59f3928
    a060:	e7932102 	.word	0xe7932102
    a064:	e59f3914 	.word	0xe59f3914
    a068:	e5933000 	.word	0xe5933000
    a06c:	e1a00002 	.word	0xe1a00002
    a070:	e1a01003 	.word	0xe1a01003
    a074:	eb000d37 	.word	0xeb000d37
    a078:	e1a03000 	.word	0xe1a03000
    a07c:	e1a02003 	.word	0xe1a02003
    a080:	e59f38e8 	.word	0xe59f38e8
    a084:	e5933000 	.word	0xe5933000
    a088:	e1a00002 	.word	0xe1a00002
    a08c:	e1a01003 	.word	0xe1a01003
    a090:	eb000d30 	.word	0xeb000d30
    a094:	e1a03000 	.word	0xe1a03000
    a098:	e1a02003 	.word	0xe1a02003
    a09c:	e59f38ec 	.word	0xe59f38ec
    a0a0:	e5933000 	.word	0xe5933000
    a0a4:	e1a00002 	.word	0xe1a00002
    a0a8:	e1a01003 	.word	0xe1a01003
    a0ac:	eb000c81 	.word	0xeb000c81
    a0b0:	e1a03000 	.word	0xe1a03000
    a0b4:	e1a02003 	.word	0xe1a02003
    a0b8:	e59f38d0 	.word	0xe59f38d0
    a0bc:	e5832000 	.word	0xe5832000
    a0c0:	e59f3888 	.word	0xe59f3888
    a0c4:	e5932000 	.word	0xe5932000
    a0c8:	e59f38c4 	.word	0xe59f38c4
    a0cc:	e7932102 	.word	0xe7932102
    a0d0:	e59f38a0 	.word	0xe59f38a0
    a0d4:	e5933000 	.word	0xe5933000
    a0d8:	e1a00002 	.word	0xe1a00002
    a0dc:	e1a01003 	.word	0xe1a01003
    a0e0:	eb000d1c 	.word	0xeb000d1c
    a0e4:	e1a03000 	.word	0xe1a03000
    a0e8:	e1a02003 	.word	0xe1a02003
    a0ec:	e59f387c 	.word	0xe59f387c
    a0f0:	e5933000 	.word	0xe5933000
    a0f4:	e1a00002 	.word	0xe1a00002
    a0f8:	e1a01003 	.word	0xe1a01003
    a0fc:	eb000d15 	.word	0xeb000d15
    a100:	e1a03000 	.word	0xe1a03000
    a104:	e1a02003 	.word	0xe1a02003
    a108:	e59f3888 	.word	0xe59f3888
    a10c:	e5933000 	.word	0xe5933000
    a110:	e1a00002 	.word	0xe1a00002
    a114:	e1a01003 	.word	0xe1a01003
    a118:	eb000c66 	.word	0xeb000c66
    a11c:	e1a03000 	.word	0xe1a03000
    a120:	e1a02003 	.word	0xe1a02003
    a124:	e59f386c 	.word	0xe59f386c
    a128:	e5832000 	.word	0xe5832000
    a12c:	e59f3868 	.word	0xe59f3868
    a130:	e5933000 	.word	0xe5933000
    a134:	e1a00003 	.word	0xe1a00003
    a138:	e59f1860 	.word	0xe59f1860
    a13c:	eb000dc7 	.word	0xeb000dc7
    a140:	e1a03000 	.word	0xe1a03000
    a144:	e3530000 	.word	0xe3530000
    a148:	0a000000 	.word	0x0a000000
    a14c:	ea000063 	.word	0xea000063
    a150:	e59f37fc 	.word	0xe59f37fc
    a154:	e5933000 	.word	0xe5933000
    a158:	e3530001 	.word	0xe3530001
    a15c:	1a00005f 	.word	0x1a00005f
    a160:	e59f37e8 	.word	0xe59f37e8
    a164:	e5933000 	.word	0xe5933000
    a168:	e3530001 	.word	0xe3530001
    a16c:	1a000009 	.word	0x1a000009
    a170:	e59f37d8 	.word	0xe59f37d8
    a174:	e5931000 	.word	0xe5931000
    a178:	e59f37d0 	.word	0xe59f37d0
    a17c:	e5933000 	.word	0xe5933000
    a180:	e2432001 	.word	0xe2432001
    a184:	e59f3818 	.word	0xe59f3818
    a188:	e7932102 	.word	0xe7932102
    a18c:	e59f3810 	.word	0xe59f3810
    a190:	e7832101 	.word	0xe7832101
    a194:	ea000029 	.word	0xea000029
    a198:	e59f37b0 	.word	0xe59f37b0
    a19c:	e5934000 	.word	0xe5934000
    a1a0:	e59f37a8 	.word	0xe59f37a8
    a1a4:	e5933000 	.word	0xe5933000
    a1a8:	e2432001 	.word	0xe2432001
    a1ac:	e59f37f0 	.word	0xe59f37f0
    a1b0:	e7932102 	.word	0xe7932102
    a1b4:	e59f37ec 	.word	0xe59f37ec
    a1b8:	e5933000 	.word	0xe5933000
    a1bc:	e1a00002 	.word	0xe1a00002
    a1c0:	e1a01003 	.word	0xe1a01003
    a1c4:	eb000ce3 	.word	0xeb000ce3
    a1c8:	e1a03000 	.word	0xe1a03000
    a1cc:	e1a05003 	.word	0xe1a05003
    a1d0:	e59f377c 	.word	0xe59f377c
    a1d4:	e5932000 	.word	0xe5932000
    a1d8:	e59f3770 	.word	0xe59f3770
    a1dc:	e5931000 	.word	0xe5931000
    a1e0:	e59f07c4 	.word	0xe59f07c4
    a1e4:	e1a03002 	.word	0xe1a03002
    a1e8:	e1a03083 	.word	0xe1a03083
    a1ec:	e0833002 	.word	0xe0833002
    a1f0:	e1a03103 	.word	0xe1a03103
    a1f4:	e0833002 	.word	0xe0833002
    a1f8:	e0833001 	.word	0xe0833001
    a1fc:	e7901103 	.word	0xe7901103
    a200:	e59f3748 	.word	0xe59f3748
    a204:	e5933000 	.word	0xe5933000
    a208:	e2432002 	.word	0xe2432002
    a20c:	e59f3790 	.word	0xe59f3790
    a210:	e7933102 	.word	0xe7933102
    a214:	e1a00001 	.word	0xe1a00001
    a218:	e1a01003 	.word	0xe1a01003
    a21c:	eb000ccd 	.word	0xeb000ccd
    a220:	e1a03000 	.word	0xe1a03000
    a224:	e1a00005 	.word	0xe1a00005
    a228:	e1a01003 	.word	0xe1a01003
    a22c:	eb000c20 	.word	0xeb000c20
    a230:	e1a03000 	.word	0xe1a03000
    a234:	e1a02003 	.word	0xe1a02003
    a238:	e59f3764 	.word	0xe59f3764
    a23c:	e7832104 	.word	0xe7832104
    a240:	e59f3708 	.word	0xe59f3708
    a244:	e5932000 	.word	0xe5932000
    a248:	e59f3754 	.word	0xe59f3754
    a24c:	e7932102 	.word	0xe7932102
    a250:	e59f3714 	.word	0xe59f3714
    a254:	e5933000 	.word	0xe5933000
    a258:	e1a00002 	.word	0xe1a00002
    a25c:	e1a01003 	.word	0xe1a01003
    a260:	eb000cbc 	.word	0xeb000cbc
    a264:	e1a03000 	.word	0xe1a03000
    a268:	e1a02003 	.word	0xe1a02003
    a26c:	e59f373c 	.word	0xe59f373c
    a270:	e5832000 	.word	0xe5832000
    a274:	e59f36d8 	.word	0xe59f36d8
    a278:	e5932000 	.word	0xe5932000
    a27c:	e59f3708 	.word	0xe59f3708
    a280:	e7932102 	.word	0xe7932102
    a284:	e59f36f4 	.word	0xe59f36f4
    a288:	e5933000 	.word	0xe5933000
    a28c:	e1a00002 	.word	0xe1a00002
    a290:	e1a01003 	.word	0xe1a01003
    a294:	eb000caf 	.word	0xeb000caf
    a298:	e1a03000 	.word	0xe1a03000
    a29c:	e1a02003 	.word	0xe1a02003
    a2a0:	e59f3708 	.word	0xe59f3708
    a2a4:	e5933000 	.word	0xe5933000
    a2a8:	e1a00002 	.word	0xe1a00002
    a2ac:	e1a01003 	.word	0xe1a01003
    a2b0:	eb000ca8 	.word	0xeb000ca8
    a2b4:	e1a03000 	.word	0xe1a03000
    a2b8:	e1a02003 	.word	0xe1a02003
    a2bc:	e59f36f0 	.word	0xe59f36f0
    a2c0:	e5933000 	.word	0xe5933000
    a2c4:	e1a00002 	.word	0xe1a00002
    a2c8:	e1a01003 	.word	0xe1a01003
    a2cc:	eb000bf9 	.word	0xeb000bf9
    a2d0:	e1a03000 	.word	0xe1a03000
    a2d4:	e1a02003 	.word	0xe1a02003
    a2d8:	e59f36d4 	.word	0xe59f36d4
    a2dc:	e5832000 	.word	0xe5832000
    a2e0:	e59f36d0 	.word	0xe59f36d0
    a2e4:	e5933000 	.word	0xe5933000
    a2e8:	e2432001 	.word	0xe2432001
    a2ec:	e59f36c4 	.word	0xe59f36c4
    a2f0:	e5832000 	.word	0xe5832000
    a2f4:	e59f3658 	.word	0xe59f3658
    a2f8:	e5932000 	.word	0xe5932000
    a2fc:	e59f36b8 	.word	0xe59f36b8
    a300:	e5933000 	.word	0xe5933000
    a304:	e0822003 	.word	0xe0822003
    a308:	e59f3644 	.word	0xe59f3644
    a30c:	e5832000 	.word	0xe5832000
    a310:	e59f36a0 	.word	0xe59f36a0
    a314:	e5933000 	.word	0xe5933000
    a318:	e3530000 	.word	0xe3530000
    a31c:	cafffc3f 	.word	0xcafffc3f
    a320:	e59f3628 	.word	0xe59f3628
    a324:	e5933000 	.word	0xe5933000
    a328:	e2832001 	.word	0xe2832001
    a32c:	e59f361c 	.word	0xe59f361c
    a330:	e5832000 	.word	0xe5832000
    a334:	e59f3614 	.word	0xe59f3614
    a338:	e5932000 	.word	0xe5932000
    a33c:	e59f367c 	.word	0xe59f367c
    a340:	e5933000 	.word	0xe5933000
    a344:	e1520003 	.word	0xe1520003
    a348:	dafffc11 	.word	0xdafffc11
    a34c:	e59f3648 	.word	0xe59f3648
    a350:	e5933000 	.word	0xe5933000
    a354:	e1a00003 	.word	0xe1a00003
    a358:	e59f1640 	.word	0xe59f1640
    a35c:	eb000d3f 	.word	0xeb000d3f
    a360:	e1a03000 	.word	0xe1a03000
    a364:	e3530000 	.word	0xe3530000
    a368:	0a000000 	.word	0x0a000000
    a36c:	ea000004 	.word	0xea000004
    a370:	e59f363c 	.word	0xe59f363c
    a374:	e5932000 	.word	0xe5932000
    a378:	e59f3610 	.word	0xe59f3610
    a37c:	e5832000 	.word	0xe5832000
    a380:	ea00000a 	.word	0xea00000a
    a384:	e59f3604 	.word	0xe59f3604
    a388:	e5932000 	.word	0xe5932000
    a38c:	e59f3608 	.word	0xe59f3608
    a390:	e5933000 	.word	0xe5933000
    a394:	e1a00002 	.word	0xe1a00002
    a398:	e1a01003 	.word	0xe1a01003
    a39c:	eb000cd3 	.word	0xeb000cd3
    a3a0:	e1a03000 	.word	0xe1a03000
    a3a4:	e1a02003 	.word	0xe1a02003
    a3a8:	e59f35e0 	.word	0xe59f35e0
    a3ac:	e5832000 	.word	0xe5832000
    a3b0:	e59f35cc 	.word	0xe59f35cc
    a3b4:	e5933000 	.word	0xe5933000
    a3b8:	e2232102 	.word	0xe2232102
    a3bc:	e59f3600 	.word	0xe59f3600
    a3c0:	e5933000 	.word	0xe5933000
    a3c4:	e1a00002 	.word	0xe1a00002
    a3c8:	e1a01003 	.word	0xe1a01003
    a3cc:	eb000c61 	.word	0xeb000c61
    a3d0:	e1a03000 	.word	0xe1a03000
    a3d4:	e1a04003 	.word	0xe1a04003
    a3d8:	e59f35b8 	.word	0xe59f35b8
    a3dc:	e5932000 	.word	0xe5932000
    a3e0:	e59f35e0 	.word	0xe59f35e0
    a3e4:	e5933000 	.word	0xe5933000
    a3e8:	e1a00002 	.word	0xe1a00002
    a3ec:	e1a01003 	.word	0xe1a01003
    a3f0:	eb000c58 	.word	0xeb000c58
    a3f4:	e1a03000 	.word	0xe1a03000
    a3f8:	e1a00004 	.word	0xe1a00004
    a3fc:	e1a01003 	.word	0xe1a01003
    a400:	eb000bab 	.word	0xeb000bab
    a404:	e1a03000 	.word	0xe1a03000
    a408:	e1a02003 	.word	0xe1a02003
    a40c:	e59f35b8 	.word	0xe59f35b8
    a410:	e5832000 	.word	0xe5832000
    a414:	e59f3574 	.word	0xe59f3574
    a418:	e5932000 	.word	0xe5932000
    a41c:	e59f35ac 	.word	0xe59f35ac
    a420:	e5832000 	.word	0xe5832000
    a424:	e59f3558 	.word	0xe59f3558
    a428:	e5932000 	.word	0xe5932000
    a42c:	e59f3594 	.word	0xe59f3594
    a430:	e5933000 	.word	0xe5933000
    a434:	e1a00002 	.word	0xe1a00002
    a438:	e1a01003 	.word	0xe1a01003
    a43c:	eb000c45 	.word	0xeb000c45
    a440:	e1a03000 	.word	0xe1a03000
    a444:	e1a04003 	.word	0xe1a04003
    a448:	e59f3548 	.word	0xe59f3548
    a44c:	e5932000 	.word	0xe5932000
    a450:	e59f356c 	.word	0xe59f356c
    a454:	e5933000 	.word	0xe5933000
    a458:	e1a00002 	.word	0xe1a00002
    a45c:	e1a01003 	.word	0xe1a01003
    a460:	eb000c3c 	.word	0xeb000c3c
    a464:	e1a03000 	.word	0xe1a03000
    a468:	e1a00004 	.word	0xe1a00004
    a46c:	e1a01003 	.word	0xe1a01003
    a470:	eb000b8f 	.word	0xeb000b8f
    a474:	e1a03000 	.word	0xe1a03000
    a478:	e1a02003 	.word	0xe1a02003
    a47c:	e59f3550 	.word	0xe59f3550
    a480:	e5832000 	.word	0xe5832000
    a484:	e59f3540 	.word	0xe59f3540
    a488:	e5932000 	.word	0xe5932000
    a48c:	e59f3538 	.word	0xe59f3538
    a490:	e5933000 	.word	0xe5933000
    a494:	e1a00002 	.word	0xe1a00002
    a498:	e1a01003 	.word	0xe1a01003
    a49c:	eb000c2d 	.word	0xeb000c2d
    a4a0:	e1a03000 	.word	0xe1a03000
    a4a4:	e1a04003 	.word	0xe1a04003
    a4a8:	e59f3520 	.word	0xe59f3520
    a4ac:	e5932000 	.word	0xe5932000
    a4b0:	e59f3518 	.word	0xe59f3518
    a4b4:	e5933000 	.word	0xe5933000
    a4b8:	e1a00002 	.word	0xe1a00002
    a4bc:	e1a01003 	.word	0xe1a01003
    a4c0:	eb000c24 	.word	0xeb000c24
    a4c4:	e1a03000 	.word	0xe1a03000
    a4c8:	e1a00004 	.word	0xe1a00004
    a4cc:	e1a01003 	.word	0xe1a01003
    a4d0:	eb000b78 	.word	0xeb000b78
    a4d4:	e1a03000 	.word	0xe1a03000
    a4d8:	e1a00003 	.word	0xe1a00003
    a4dc:	ebfff560 	.word	0xebfff560
    a4e0:	e1a03000 	.word	0xe1a03000
    a4e4:	e1a04001 	.word	0xe1a04001
    a4e8:	e1a00003 	.word	0xe1a00003
    a4ec:	e1a01004 	.word	0xe1a01004
    a4f0:	eb000d40 	.word	0xeb000d40
    a4f4:	e1a03000 	.word	0xe1a03000
    a4f8:	e1a04001 	.word	0xe1a04001
    a4fc:	e1a00003 	.word	0xe1a00003
    a500:	e1a01004 	.word	0xe1a01004
    a504:	eb000b40 	.word	0xeb000b40
    a508:	e1a02000 	.word	0xe1a02000
    a50c:	e59f34c4 	.word	0xe59f34c4
    a510:	e5832000 	.word	0xe5832000
    a514:	e59f34bc 	.word	0xe59f34bc
    a518:	e5932000 	.word	0xe5932000
    a51c:	e59f34b4 	.word	0xe59f34b4
    a520:	e5933000 	.word	0xe5933000
    a524:	e1a00002 	.word	0xe1a00002
    a528:	e1a01003 	.word	0xe1a01003
    a52c:	eb000c09 	.word	0xeb000c09
    a530:	e1a03000 	.word	0xe1a03000
    a534:	e1a04003 	.word	0xe1a04003
    a538:	e59f3494 	.word	0xe59f3494
    a53c:	e5932000 	.word	0xe5932000
    a540:	e59f348c 	.word	0xe59f348c
    a544:	e5933000 	.word	0xe5933000
    a548:	e1a00002 	.word	0xe1a00002
    a54c:	e1a01003 	.word	0xe1a01003
    a550:	eb000c00 	.word	0xeb000c00
    a554:	e1a03000 	.word	0xe1a03000
    a558:	e1a00004 	.word	0xe1a00004
    a55c:	e1a01003 	.word	0xe1a01003
    a560:	eb000b54 	.word	0xeb000b54
    a564:	e1a03000 	.word	0xe1a03000
    a568:	e1a00003 	.word	0xe1a00003
    a56c:	ebfff53c 	.word	0xebfff53c
    a570:	e1a03000 	.word	0xe1a03000
    a574:	e1a04001 	.word	0xe1a04001
    a578:	e1a00003 	.word	0xe1a00003
    a57c:	e1a01004 	.word	0xe1a01004
    a580:	eb000d1c 	.word	0xeb000d1c
    a584:	e1a03000 	.word	0xe1a03000
    a588:	e1a04001 	.word	0xe1a04001
    a58c:	e1a00003 	.word	0xe1a00003
    a590:	e1a01004 	.word	0xe1a01004
    a594:	eb000b1c 	.word	0xeb000b1c
    a598:	e1a02000 	.word	0xe1a02000
    a59c:	e59b3014 	.word	0xe59b3014
    a5a0:	e5832000 	.word	0xe5832000
    a5a4:	e59f3424 	.word	0xe59f3424
    a5a8:	e5933000 	.word	0xe5933000
    a5ac:	e1a00003 	.word	0xe1a00003
    a5b0:	ebfff52b 	.word	0xebfff52b
    a5b4:	e1a05000 	.word	0xe1a05000
    a5b8:	e1a06001 	.word	0xe1a06001
    a5bc:	e59f3408 	.word	0xe59f3408
    a5c0:	e5933000 	.word	0xe5933000
    a5c4:	e1a00003 	.word	0xe1a00003
    a5c8:	ebfff525 	.word	0xebfff525
    a5cc:	e1a03000 	.word	0xe1a03000
    a5d0:	e1a04001 	.word	0xe1a04001
    a5d4:	e1a00005 	.word	0xe1a00005
    a5d8:	e1a01006 	.word	0xe1a01006
    a5dc:	e1a02003 	.word	0xe1a02003
    a5e0:	e1a03004 	.word	0xe1a03004
    a5e4:	eb000d09 	.word	0xeb000d09
    a5e8:	e1a05000 	.word	0xe1a05000
    a5ec:	e1a06001 	.word	0xe1a06001
    a5f0:	e59f33e4 	.word	0xe59f33e4
    a5f4:	e5933000 	.word	0xe5933000
    a5f8:	e1a00003 	.word	0xe1a00003
    a5fc:	ebfff518 	.word	0xebfff518
    a600:	e1a03000 	.word	0xe1a03000
    a604:	e1a04001 	.word	0xe1a04001
    a608:	e1a00005 	.word	0xe1a00005
    a60c:	e1a01006 	.word	0xe1a01006
    a610:	e1a02003 	.word	0xe1a02003
    a614:	e1a03004 	.word	0xe1a03004
    a618:	ebfff5e5 	.word	0xebfff5e5
    a61c:	e1a03000 	.word	0xe1a03000
    a620:	e1a04001 	.word	0xe1a04001
    a624:	e1a00003 	.word	0xe1a00003
    a628:	e1a01004 	.word	0xe1a01004
    a62c:	eb000af6 	.word	0xeb000af6
    a630:	e1a02000 	.word	0xe1a02000
    a634:	e59b300c 	.word	0xe59b300c
    a638:	e5832000 	.word	0xe5832000
    a63c:	e59f3390 	.word	0xe59f3390
    a640:	e5933000 	.word	0xe5933000
    a644:	e1a00003 	.word	0xe1a00003
    a648:	ebfff505 	.word	0xebfff505
    a64c:	e1a05000 	.word	0xe1a05000
    a650:	e1a06001 	.word	0xe1a06001
    a654:	e59f337c 	.word	0xe59f337c
    a658:	e5933000 	.word	0xe5933000
    a65c:	e1a00003 	.word	0xe1a00003
    a660:	ebfff4ff 	.word	0xebfff4ff
    a664:	e1a03000 	.word	0xe1a03000
    a668:	e1a04001 	.word	0xe1a04001
    a66c:	e1a00005 	.word	0xe1a00005
    a670:	e1a01006 	.word	0xe1a01006
    a674:	e1a02003 	.word	0xe1a02003
    a678:	e1a03004 	.word	0xe1a03004
    a67c:	eb000ce3 	.word	0xeb000ce3
    a680:	e1a05000 	.word	0xe1a05000
    a684:	e1a06001 	.word	0xe1a06001
    a688:	e59f334c 	.word	0xe59f334c
    a68c:	e5933000 	.word	0xe5933000
    a690:	e1a00003 	.word	0xe1a00003
    a694:	ebfff4f2 	.word	0xebfff4f2
    a698:	e1a03000 	.word	0xe1a03000
    a69c:	e1a04001 	.word	0xe1a04001
    a6a0:	e1a00005 	.word	0xe1a00005
    a6a4:	e1a01006 	.word	0xe1a01006
    a6a8:	e1a02003 	.word	0xe1a02003
    a6ac:	e1a03004 	.word	0xe1a03004
    a6b0:	ebfff5bf 	.word	0xebfff5bf
    a6b4:	e1a03000 	.word	0xe1a03000
    a6b8:	e1a04001 	.word	0xe1a04001
    a6bc:	e1a00003 	.word	0xe1a00003
    a6c0:	e1a01004 	.word	0xe1a01004
    a6c4:	eb000ad0 	.word	0xeb000ad0
    a6c8:	e1a02000 	.word	0xe1a02000
    a6cc:	e59b3010 	.word	0xe59b3010
    a6d0:	e5832000 	.word	0xe5832000
    a6d4:	e59b2018 	.word	0xe59b2018
    a6d8:	e59f3300 	.word	0xe59f3300
    a6dc:	e5823000 	.word	0xe5823000
    a6e0:	e51b302c 	.word	0xe51b302c
    a6e4:	e3c33102 	.word	0xe3c33102
    a6e8:	e1a00003 	.word	0xe1a00003
    a6ec:	e59f12f0 	.word	0xe59f12f0
    a6f0:	eb000c56 	.word	0xeb000c56
    a6f4:	e1a03000 	.word	0xe1a03000
    a6f8:	e3530000 	.word	0xe3530000
    a6fc:	aa000000 	.word	0xaa000000
    a700:	ea000083 	.word	0xea000083
    a704:	e51b002c 	.word	0xe51b002c
    a708:	e59f1290 	.word	0xe59f1290
    a70c:	eb000c4f 	.word	0xeb000c4f
    a710:	e1a03000 	.word	0xe1a03000
    a714:	e3530000 	.word	0xe3530000
    a718:	ca000000 	.word	0xca000000
    a71c:	ea00000f 	.word	0xea00000f
    a720:	e59b0004 	.word	0xe59b0004
    a724:	e59f1274 	.word	0xe59f1274
    a728:	eb000c48 	.word	0xeb000c48
    a72c:	e1a03000 	.word	0xe1a03000
    a730:	e3530000 	.word	0xe3530000
    a734:	aa000000 	.word	0xaa000000
    a738:	ea000008 	.word	0xea000008
    a73c:	e59b300c 	.word	0xe59b300c
    a740:	e5933000 	.word	0xe5933000
    a744:	e1a00003 	.word	0xe1a00003
    a748:	e59b1004 	.word	0xe59b1004
    a74c:	eb000ad8 	.word	0xeb000ad8
    a750:	e1a03000 	.word	0xe1a03000
    a754:	e1a02003 	.word	0xe1a02003
    a758:	e59b3018 	.word	0xe59b3018
    a75c:	e5832000 	.word	0xe5832000
    a760:	e51b002c 	.word	0xe51b002c
    a764:	e59f1234 	.word	0xe59f1234
    a768:	eb000c38 	.word	0xeb000c38
    a76c:	e1a03000 	.word	0xe1a03000
    a770:	e3530000 	.word	0xe3530000
    a774:	ca000000 	.word	0xca000000
    a778:	ea000011 	.word	0xea000011
    a77c:	e59b0004 	.word	0xe59b0004
    a780:	e59f1218 	.word	0xe59f1218
    a784:	eb000c33 	.word	0xeb000c33
    a788:	e1a03000 	.word	0xe1a03000
    a78c:	e3530000 	.word	0xe3530000
    a790:	ba000000 	.word	0xba000000
    a794:	ea00000a 	.word	0xea00000a
    a798:	e59b300c 	.word	0xe59b300c
    a79c:	e5932000 	.word	0xe5932000
    a7a0:	e59b3004 	.word	0xe59b3004
    a7a4:	e3c33102 	.word	0xe3c33102
    a7a8:	e1a00002 	.word	0xe1a00002
    a7ac:	e1a01003 	.word	0xe1a01003
    a7b0:	eb000ac0 	.word	0xeb000ac0
    a7b4:	e1a03000 	.word	0xe1a03000
    a7b8:	e1a02003 	.word	0xe1a02003
    a7bc:	e59b3018 	.word	0xe59b3018
    a7c0:	e5832000 	.word	0xe5832000
    a7c4:	e51b002c 	.word	0xe51b002c
    a7c8:	e59f11d0 	.word	0xe59f11d0
    a7cc:	eb000c21 	.word	0xeb000c21
    a7d0:	e1a03000 	.word	0xe1a03000
    a7d4:	e3530000 	.word	0xe3530000
    a7d8:	ba000000 	.word	0xba000000
    a7dc:	ea00000f 	.word	0xea00000f
    a7e0:	e59b0004 	.word	0xe59b0004
    a7e4:	e59f11b4 	.word	0xe59f11b4
    a7e8:	eb000c18 	.word	0xeb000c18
    a7ec:	e1a03000 	.word	0xe1a03000
    a7f0:	e3530000 	.word	0xe3530000
    a7f4:	aa000000 	.word	0xaa000000
    a7f8:	ea000008 	.word	0xea000008
    a7fc:	e59b300c 	.word	0xe59b300c
    a800:	e5933000 	.word	0xe5933000
    a804:	e1a00003 	.word	0xe1a00003
    a808:	e59b1004 	.word	0xe59b1004
    a80c:	eb000aa9 	.word	0xeb000aa9
    a810:	e1a03000 	.word	0xe1a03000
    a814:	e1a02003 	.word	0xe1a02003
    a818:	e59b3018 	.word	0xe59b3018
    a81c:	e5832000 	.word	0xe5832000
    a820:	e51b002c 	.word	0xe51b002c
    a824:	e59f1174 	.word	0xe59f1174
    a828:	eb000c0a 	.word	0xeb000c0a
    a82c:	e1a03000 	.word	0xe1a03000
    a830:	e3530000 	.word	0xe3530000
    a834:	ba000000 	.word	0xba000000
    a838:	ea000011 	.word	0xea000011
    a83c:	e59b0004 	.word	0xe59b0004
    a840:	e59f1158 	.word	0xe59f1158
    a844:	eb000c03 	.word	0xeb000c03
    a848:	e1a03000 	.word	0xe1a03000
    a84c:	e3530000 	.word	0xe3530000
    a850:	ba000000 	.word	0xba000000
    a854:	ea00000a 	.word	0xea00000a
    a858:	e59b300c 	.word	0xe59b300c
    a85c:	e5932000 	.word	0xe5932000
    a860:	e59b3004 	.word	0xe59b3004
    a864:	e3c33102 	.word	0xe3c33102
    a868:	e1a00002 	.word	0xe1a00002
    a86c:	e1a01003 	.word	0xe1a01003
    a870:	eb000a8f 	.word	0xeb000a8f
    a874:	e1a03000 	.word	0xe1a03000
    a878:	e1a02003 	.word	0xe1a02003
    a87c:	e59b3018 	.word	0xe59b3018
    a880:	e5832000 	.word	0xe5832000
    a884:	e59b3018 	.word	0xe59b3018
    a888:	e5933000 	.word	0xe5933000
    a88c:	e1a00003 	.word	0xe1a00003
    a890:	e59f1150 	.word	0xe59f1150
    a894:	eb000bed 	.word	0xeb000bed
    a898:	e1a03000 	.word	0xe1a03000
    a89c:	e3530000 	.word	0xe3530000
    a8a0:	ca000000 	.word	0xca000000
    a8a4:	ea000008 	.word	0xea000008
    a8a8:	e59b3018 	.word	0xe59b3018
    a8ac:	e5933000 	.word	0xe5933000
    a8b0:	e1a00003 	.word	0xe1a00003
    a8b4:	e59f1130 	.word	0xe59f1130
    a8b8:	eb000a7d 	.word	0xeb000a7d
    a8bc:	e1a03000 	.word	0xe1a03000
    a8c0:	e1a02003 	.word	0xe1a02003
    a8c4:	e59b3018 	.word	0xe59b3018
    a8c8:	e5832000 	.word	0xe5832000
    a8cc:	e59b3018 	.word	0xe59b3018
    a8d0:	e5933000 	.word	0xe5933000
    a8d4:	e1a00003 	.word	0xe1a00003
    a8d8:	e59f1110 	.word	0xe59f1110
    a8dc:	eb000bdd 	.word	0xeb000bdd
    a8e0:	e1a03000 	.word	0xe1a03000
    a8e4:	e3530000 	.word	0xe3530000
    a8e8:	ba000000 	.word	0xba000000
    a8ec:	ea000008 	.word	0xea000008
    a8f0:	e59b3018 	.word	0xe59b3018
    a8f4:	e5933000 	.word	0xe5933000
    a8f8:	e1a00003 	.word	0xe1a00003
    a8fc:	e59f10e8 	.word	0xe59f10e8
    a900:	eb000a6c 	.word	0xeb000a6c
    a904:	e1a03000 	.word	0xe1a03000
    a908:	e1a02003 	.word	0xe1a02003
    a90c:	e59b3018 	.word	0xe59b3018
    a910:	e5832000 	.word	0xe5832000
    a914:	e59f20d8 	.word	0xe59f20d8
    a918:	e59b3008 	.word	0xe59b3008
    a91c:	e5823000 	.word	0xe5823000
    a920:	e59f20d0 	.word	0xe59f20d0
    a924:	e51b3028 	.word	0xe51b3028
    a928:	e5823000 	.word	0xe5823000
    a92c:	e59f20c8 	.word	0xe59f20c8
    a930:	e51b302c 	.word	0xe51b302c
    a934:	e5823000 	.word	0xe5823000
    a938:	e59f20c0 	.word	0xe59f20c0
    a93c:	e59b3004 	.word	0xe59b3004
    a940:	e5823000 	.word	0xe5823000
    a944:	e24bd01c 	.word	0xe24bd01c
    a948:	e89d68f0 	.word	0xe89d68f0
    a94c:	e12fff1e 	.word	0xe12fff1e
    a950:	400016c8 	.word	0x400016c8
    a954:	400016c4 	.word	0x400016c4
    a958:	40000020 	.word	0x40000020
    a95c:	400002c4 	.word	0x400002c4
    a960:	40000ad4 	.word	0x40000ad4
    a964:	4000140c 	.word	0x4000140c
    a968:	4000001c 	.word	0x4000001c
    a96c:	40000a84 	.word	0x40000a84
    a970:	40000a70 	.word	0x40000a70
    a974:	40000e5c 	.word	0x40000e5c
    a978:	40000a6c 	.word	0x40000a6c
    a97c:	40000e90 	.word	0x40000e90
    a980:	40000a68 	.word	0x40000a68
    a984:	40000a7c 	.word	0x40000a7c
    a988:	40001168 	.word	0x40001168
    a98c:	40000df4 	.word	0x40000df4
    a990:	40000a78 	.word	0x40000a78
    a994:	40000e28 	.word	0x40000e28
    a998:	40000a80 	.word	0x40000a80
    a99c:	40000aa0 	.word	0x40000aa0
    a9a0:	00000000 	.word	0x00000000
    a9a4:	40000dc0 	.word	0x40000dc0
    a9a8:	40000aa4 	.word	0x40000aa4
    a9ac:	40000b1c 	.word	0x40000b1c
    a9b0:	40000a64 	.word	0x40000a64
    a9b4:	40000a74 	.word	0x40000a74
    a9b8:	400016b0 	.word	0x400016b0
    a9bc:	400016b4 	.word	0x400016b4
    a9c0:	400016cc 	.word	0x400016cc
    a9c4:	40000a90 	.word	0x40000a90
    a9c8:	40000a8c 	.word	0x40000a8c
    a9cc:	40000a60 	.word	0x40000a60
    a9d0:	40000a5c 	.word	0x40000a5c
    a9d4:	40000a58 	.word	0x40000a58
    a9d8:	40000a54 	.word	0x40000a54
    a9dc:	40000b14 	.word	0x40000b14
    a9e0:	c479c000 	.word	0xc479c000
    a9e4:	425c0000 	.word	0x425c0000
    a9e8:	43340000 	.word	0x43340000
    a9ec:	43b40000 	.word	0x43b40000
    a9f0:	c3340000 	.word	0xc3340000
    a9f4:	40000ae4 	.word	0x40000ae4
    a9f8:	40000ae0 	.word	0x40000ae0
    a9fc:	40000adc 	.word	0x40000adc
    aa00:	40000ad8 	.word	0x40000ad8

0000aa04 <geomag>:
    aa04:	e1a0c00d 	.word	0xe1a0c00d
    aa08:	e92dd800 	.word	0xe92dd800
    aa0c:	e24cb004 	.word	0xe24cb004
    aa10:	e24dd01c 	.word	0xe24dd01c
    aa14:	e50b0010 	.word	0xe50b0010
    aa18:	e59f3048 	.word	0xe59f3048
    aa1c:	e58d3000 	.word	0xe58d3000
    aa20:	e59f3040 	.word	0xe59f3040
    aa24:	e58d3004 	.word	0xe58d3004
    aa28:	e3a03000 	.word	0xe3a03000
    aa2c:	e58d3008 	.word	0xe58d3008
    aa30:	e3a03000 	.word	0xe3a03000
    aa34:	e58d300c 	.word	0xe58d300c
    aa38:	e3a03000 	.word	0xe3a03000
    aa3c:	e58d3010 	.word	0xe58d3010
    aa40:	e3a03000 	.word	0xe3a03000
    aa44:	e58d3014 	.word	0xe58d3014
    aa48:	e3a00000 	.word	0xe3a00000
    aa4c:	e51b1010 	.word	0xe51b1010
    aa50:	e59f2010 	.word	0xe59f2010
    aa54:	e59f300c 	.word	0xe59f300c
    aa58:	ebfff558 	.word	0xebfff558
    aa5c:	e24bd00c 	.word	0xe24bd00c
    aa60:	e89d6800 	.word	0xe89d6800
    aa64:	e12fff1e 	.word	0xe12fff1e
    aa68:	00000000 	.word	0x00000000

0000aa6c <geomg1>:
    aa6c:	e1a0c00d 	.word	0xe1a0c00d
    aa70:	e92dd800 	.word	0xe92dd800
    aa74:	e24cb004 	.word	0xe24cb004
    aa78:	e24dd028 	.word	0xe24dd028
    aa7c:	e50b0010 	.word	0xe50b0010
    aa80:	e50b1014 	.word	0xe50b1014
    aa84:	e50b2018 	.word	0xe50b2018
    aa88:	e50b301c 	.word	0xe50b301c
    aa8c:	e51b3018 	.word	0xe51b3018
    aa90:	e58d3000 	.word	0xe58d3000
    aa94:	e51b301c 	.word	0xe51b301c
    aa98:	e58d3004 	.word	0xe58d3004
    aa9c:	e59b3004 	.word	0xe59b3004
    aaa0:	e58d3008 	.word	0xe58d3008
    aaa4:	e59b3008 	.word	0xe59b3008
    aaa8:	e58d300c 	.word	0xe58d300c
    aaac:	e59b300c 	.word	0xe59b300c
    aab0:	e58d3010 	.word	0xe58d3010
    aab4:	e59b3010 	.word	0xe59b3010
    aab8:	e58d3014 	.word	0xe58d3014
    aabc:	e3a00001 	.word	0xe3a00001
    aac0:	e3a01000 	.word	0xe3a01000
    aac4:	e51b2010 	.word	0xe51b2010
    aac8:	e51b3014 	.word	0xe51b3014
    aacc:	ebfff53b 	.word	0xebfff53b
    aad0:	e24bd00c 	.word	0xe24bd00c
    aad4:	e89d6800 	.word	0xe89d6800
    aad8:	e12fff1e 	.word	0xe12fff1e

0000aadc <getDeclination>:
    aadc:	e1a0c00d 	.word	0xe1a0c00d
    aae0:	e92dd9f0 	.word	0xe92dd9f0
    aae4:	e24cb004 	.word	0xe24cb004
    aae8:	e24dd060 	.word	0xe24dd060
    aaec:	e50b0060 	.word	0xe50b0060
    aaf0:	e50b1064 	.word	0xe50b1064
    aaf4:	e50b2068 	.word	0xe50b2068
    aaf8:	e50b306c 	.word	0xe50b306c
    aafc:	e59f36ac 	.word	0xe59f36ac
    ab00:	e50b3038 	.word	0xe50b3038
    ab04:	e59f36a8 	.word	0xe59f36a8
    ab08:	e50b3034 	.word	0xe50b3034
    ab0c:	e59f36a4 	.word	0xe59f36a4
    ab10:	e50b302c 	.word	0xe50b302c
    ab14:	e59f26a0 	.word	0xe59f26a0
    ab18:	e3a0300c 	.word	0xe3a0300c
    ab1c:	e5823000 	.word	0xe5823000
    ab20:	e3a03000 	.word	0xe3a03000
    ab24:	e50b305c 	.word	0xe50b305c
    ab28:	e59f3690 	.word	0xe59f3690
    ab2c:	e50b3028 	.word	0xe50b3028
    ab30:	e3a03000 	.word	0xe3a03000
    ab34:	e50b3058 	.word	0xe50b3058
    ab38:	e59f3680 	.word	0xe59f3680
    ab3c:	e50b3024 	.word	0xe50b3024
    ab40:	e3a03000 	.word	0xe3a03000
    ab44:	e50b3054 	.word	0xe50b3054
    ab48:	e59f066c 	.word	0xe59f066c
    ab4c:	ebffffac 	.word	0xebffffac
    ab50:	e51b0060 	.word	0xe51b0060
    ab54:	eb000a48 	.word	0xeb000a48
    ab58:	e1a03000 	.word	0xe1a03000
    ab5c:	e1a00003 	.word	0xe1a00003
    ab60:	e59f165c 	.word	0xe59f165c
    ab64:	eb000ae1 	.word	0xeb000ae1
    ab68:	e1a03000 	.word	0xe1a03000
    ab6c:	e1a02003 	.word	0xe1a02003
    ab70:	e59f3650 	.word	0xe59f3650
    ab74:	e5832000 	.word	0xe5832000
    ab78:	e51b0064 	.word	0xe51b0064
    ab7c:	eb000a3e 	.word	0xeb000a3e
    ab80:	e1a03000 	.word	0xe1a03000
    ab84:	e1a00003 	.word	0xe1a00003
    ab88:	e59f1634 	.word	0xe59f1634
    ab8c:	eb000ad7 	.word	0xeb000ad7
    ab90:	e1a03000 	.word	0xe1a03000
    ab94:	e1a02003 	.word	0xe1a02003
    ab98:	e59f362c 	.word	0xe59f362c
    ab9c:	e5832000 	.word	0xe5832000
    aba0:	e51b0068 	.word	0xe51b0068
    aba4:	eb000a34 	.word	0xeb000a34
    aba8:	e1a02000 	.word	0xe1a02000
    abac:	e59f361c 	.word	0xe59f361c
    abb0:	e5832000 	.word	0xe5832000
    abb4:	e59f3614 	.word	0xe59f3614
    abb8:	e5933000 	.word	0xe5933000
    abbc:	e1a00003 	.word	0xe1a00003
    abc0:	e59f160c 	.word	0xe59f160c
    abc4:	eb000ac9 	.word	0xeb000ac9
    abc8:	e1a03000 	.word	0xe1a03000
    abcc:	e1a02003 	.word	0xe1a02003
    abd0:	e59f3600 	.word	0xe59f3600
    abd4:	e5832000 	.word	0xe5832000
    abd8:	e51b0034 	.word	0xe51b0034
    abdc:	e51b102c 	.word	0xe51b102c
    abe0:	eb0009b4 	.word	0xeb0009b4
    abe4:	e1a03000 	.word	0xe1a03000
    abe8:	e50b3030 	.word	0xe50b3030
    abec:	e51b006c 	.word	0xe51b006c
    abf0:	eb000a21 	.word	0xeb000a21
    abf4:	e1a02000 	.word	0xe1a02000
    abf8:	e59f35dc 	.word	0xe59f35dc
    abfc:	e5832000 	.word	0xe5832000
    ac00:	e59f35d0 	.word	0xe59f35d0
    ac04:	e5932000 	.word	0xe5932000
    ac08:	e59f35b8 	.word	0xe59f35b8
    ac0c:	e5931000 	.word	0xe5931000
    ac10:	e59f35b4 	.word	0xe59f35b4
    ac14:	e593c000 	.word	0xe593c000
    ac18:	e59f35bc 	.word	0xe59f35bc
    ac1c:	e593e000 	.word	0xe593e000
    ac20:	e59f35b8 	.word	0xe59f35b8
    ac24:	e58d3000 	.word	0xe58d3000
    ac28:	e59f35b4 	.word	0xe59f35b4
    ac2c:	e58d3004 	.word	0xe58d3004
    ac30:	e59f35b0 	.word	0xe59f35b0
    ac34:	e58d3008 	.word	0xe58d3008
    ac38:	e59f35ac 	.word	0xe59f35ac
    ac3c:	e58d300c 	.word	0xe58d300c
    ac40:	e1a00002 	.word	0xe1a00002
    ac44:	e1a0200c 	.word	0xe1a0200c
    ac48:	e1a0300e 	.word	0xe1a0300e
    ac4c:	ebffff86 	.word	0xebffff86
    ac50:	e59f3584 	.word	0xe59f3584
    ac54:	e5932000 	.word	0xe5932000
    ac58:	e59f3590 	.word	0xe59f3590
    ac5c:	e5832000 	.word	0xe5832000
    ac60:	e59f3578 	.word	0xe59f3578
    ac64:	e5932000 	.word	0xe5932000
    ac68:	e59f3584 	.word	0xe59f3584
    ac6c:	e5832000 	.word	0xe5832000
    ac70:	e59f356c 	.word	0xe59f356c
    ac74:	e5932000 	.word	0xe5932000
    ac78:	e59f3578 	.word	0xe59f3578
    ac7c:	e5832000 	.word	0xe5832000
    ac80:	e59f3560 	.word	0xe59f3560
    ac84:	e5932000 	.word	0xe5932000
    ac88:	e59f356c 	.word	0xe59f356c
    ac8c:	e5832000 	.word	0xe5832000
    ac90:	e59f3564 	.word	0xe59f3564
    ac94:	e5933000 	.word	0xe5933000
    ac98:	e1a00003 	.word	0xe1a00003
    ac9c:	ebfff370 	.word	0xebfff370
    aca0:	e1a07000 	.word	0xe1a07000
    aca4:	e1a08001 	.word	0xe1a08001
    aca8:	e59f3544 	.word	0xe59f3544
    acac:	e5933000 	.word	0xe5933000
    acb0:	e1a00003 	.word	0xe1a00003
    acb4:	e51b1038 	.word	0xe51b1038
    acb8:	eb000a26 	.word	0xeb000a26
    acbc:	e1a03000 	.word	0xe1a03000
    acc0:	e1a00003 	.word	0xe1a00003
    acc4:	ebfff366 	.word	0xebfff366
    acc8:	e1a03000 	.word	0xe1a03000
    accc:	e1a04001 	.word	0xe1a04001
    acd0:	e1a00003 	.word	0xe1a00003
    acd4:	e1a01004 	.word	0xe1a01004
    acd8:	eb000b40 	.word	0xeb000b40
    acdc:	e1a05000 	.word	0xe1a05000
    ace0:	e1a06001 	.word	0xe1a06001
    ace4:	e59f350c 	.word	0xe59f350c
    ace8:	e5933000 	.word	0xe5933000
    acec:	e1a00003 	.word	0xe1a00003
    acf0:	e51b1038 	.word	0xe51b1038
    acf4:	eb000a17 	.word	0xeb000a17
    acf8:	e1a03000 	.word	0xe1a03000
    acfc:	e1a00003 	.word	0xe1a00003
    ad00:	ebfff357 	.word	0xebfff357
    ad04:	e1a03000 	.word	0xe1a03000
    ad08:	e1a04001 	.word	0xe1a04001
    ad0c:	e1a00003 	.word	0xe1a00003
    ad10:	e1a01004 	.word	0xe1a01004
    ad14:	eb000b31 	.word	0xeb000b31
    ad18:	e1a03000 	.word	0xe1a03000
    ad1c:	e1a04001 	.word	0xe1a04001
    ad20:	e1a00005 	.word	0xe1a00005
    ad24:	e1a01006 	.word	0xe1a01006
    ad28:	e1a02003 	.word	0xe1a02003
    ad2c:	e1a03004 	.word	0xe1a03004
    ad30:	ebfff37b 	.word	0xebfff37b
    ad34:	e1a03000 	.word	0xe1a03000
    ad38:	e1a04001 	.word	0xe1a04001
    ad3c:	e1a00007 	.word	0xe1a00007
    ad40:	e1a01008 	.word	0xe1a01008
    ad44:	e1a02003 	.word	0xe1a02003
    ad48:	e1a03004 	.word	0xe1a03004
    ad4c:	ebfff374 	.word	0xebfff374
    ad50:	e1a03000 	.word	0xe1a03000
    ad54:	e1a04001 	.word	0xe1a04001
    ad58:	e1a00003 	.word	0xe1a00003
    ad5c:	e1a01004 	.word	0xe1a01004
    ad60:	eb000929 	.word	0xeb000929
    ad64:	e1a03000 	.word	0xe1a03000
    ad68:	e50b3050 	.word	0xe50b3050
    ad6c:	e59f3488 	.word	0xe59f3488
    ad70:	e5933000 	.word	0xe5933000
    ad74:	e1a00003 	.word	0xe1a00003
    ad78:	ebfff339 	.word	0xebfff339
    ad7c:	e1a07000 	.word	0xe1a07000
    ad80:	e1a08001 	.word	0xe1a08001
    ad84:	e59f346c 	.word	0xe59f346c
    ad88:	e5933000 	.word	0xe5933000
    ad8c:	e1a00003 	.word	0xe1a00003
    ad90:	e51b1038 	.word	0xe51b1038
    ad94:	eb0009ef 	.word	0xeb0009ef
    ad98:	e1a03000 	.word	0xe1a03000
    ad9c:	e1a00003 	.word	0xe1a00003
    ada0:	ebfff32f 	.word	0xebfff32f
    ada4:	e1a03000 	.word	0xe1a03000
    ada8:	e1a04001 	.word	0xe1a04001
    adac:	e1a00003 	.word	0xe1a00003
    adb0:	e1a01004 	.word	0xe1a01004
    adb4:	eb000b09 	.word	0xeb000b09
    adb8:	e1a05000 	.word	0xe1a05000
    adbc:	e1a06001 	.word	0xe1a06001
    adc0:	e59f342c 	.word	0xe59f342c
    adc4:	e5933000 	.word	0xe5933000
    adc8:	e1a00003 	.word	0xe1a00003
    adcc:	e51b1038 	.word	0xe51b1038
    add0:	eb0009e0 	.word	0xeb0009e0
    add4:	e1a03000 	.word	0xe1a03000
    add8:	e1a00003 	.word	0xe1a00003
    addc:	ebfff320 	.word	0xebfff320
    ade0:	e1a03000 	.word	0xe1a03000
    ade4:	e1a04001 	.word	0xe1a04001
    ade8:	e1a00003 	.word	0xe1a00003
    adec:	e1a01004 	.word	0xe1a01004
    adf0:	eb000b03 	.word	0xeb000b03
    adf4:	e1a03000 	.word	0xe1a03000
    adf8:	e1a04001 	.word	0xe1a04001
    adfc:	e1a00005 	.word	0xe1a00005
    ae00:	e1a01006 	.word	0xe1a01006
    ae04:	e1a02003 	.word	0xe1a02003
    ae08:	e1a03004 	.word	0xe1a03004
    ae0c:	ebfff344 	.word	0xebfff344
    ae10:	e1a03000 	.word	0xe1a03000
    ae14:	e1a04001 	.word	0xe1a04001
    ae18:	e1a00007 	.word	0xe1a00007
    ae1c:	e1a01008 	.word	0xe1a01008
    ae20:	e1a02003 	.word	0xe1a02003
    ae24:	e1a03004 	.word	0xe1a03004
    ae28:	ebfff33d 	.word	0xebfff33d
    ae2c:	e1a03000 	.word	0xe1a03000
    ae30:	e1a04001 	.word	0xe1a04001
    ae34:	e1a00003 	.word	0xe1a00003
    ae38:	e1a01004 	.word	0xe1a01004
    ae3c:	eb0008f2 	.word	0xeb0008f2
    ae40:	e1a03000 	.word	0xe1a03000
    ae44:	e50b304c 	.word	0xe50b304c
    ae48:	e59f33ac 	.word	0xe59f33ac
    ae4c:	e5933000 	.word	0xe5933000
    ae50:	e1a00003 	.word	0xe1a00003
    ae54:	ebfff302 	.word	0xebfff302
    ae58:	e1a05000 	.word	0xe1a05000
    ae5c:	e1a06001 	.word	0xe1a06001
    ae60:	e59f3390 	.word	0xe59f3390
    ae64:	e5933000 	.word	0xe5933000
    ae68:	e1a00003 	.word	0xe1a00003
    ae6c:	e51b1038 	.word	0xe51b1038
    ae70:	eb0009b8 	.word	0xeb0009b8
    ae74:	e1a03000 	.word	0xe1a03000
    ae78:	e1a00003 	.word	0xe1a00003
    ae7c:	ebfff2f8 	.word	0xebfff2f8
    ae80:	e1a03000 	.word	0xe1a03000
    ae84:	e1a04001 	.word	0xe1a04001
    ae88:	e1a00003 	.word	0xe1a00003
    ae8c:	e1a01004 	.word	0xe1a01004
    ae90:	eb000adb 	.word	0xeb000adb
    ae94:	e1a03000 	.word	0xe1a03000
    ae98:	e1a04001 	.word	0xe1a04001
    ae9c:	e1a00005 	.word	0xe1a00005
    aea0:	e1a01006 	.word	0xe1a01006
    aea4:	e1a02003 	.word	0xe1a02003
    aea8:	e1a03004 	.word	0xe1a03004
    aeac:	ebfff31c 	.word	0xebfff31c
    aeb0:	e1a03000 	.word	0xe1a03000
    aeb4:	e1a04001 	.word	0xe1a04001
    aeb8:	e1a00003 	.word	0xe1a00003
    aebc:	e1a01004 	.word	0xe1a01004
    aec0:	eb0008d1 	.word	0xeb0008d1
    aec4:	e1a03000 	.word	0xe1a03000
    aec8:	e50b3048 	.word	0xe50b3048
    aecc:	e59f3328 	.word	0xe59f3328
    aed0:	e5933000 	.word	0xe5933000
    aed4:	e1a00003 	.word	0xe1a00003
    aed8:	ebfff2e1 	.word	0xebfff2e1
    aedc:	e1a05000 	.word	0xe1a05000
    aee0:	e1a06001 	.word	0xe1a06001
    aee4:	e59f330c 	.word	0xe59f330c
    aee8:	e5933000 	.word	0xe5933000
    aeec:	e1a00003 	.word	0xe1a00003
    aef0:	e51b1038 	.word	0xe51b1038
    aef4:	eb000997 	.word	0xeb000997
    aef8:	e1a03000 	.word	0xe1a03000
    aefc:	e1a00003 	.word	0xe1a00003
    af00:	ebfff2d7 	.word	0xebfff2d7
    af04:	e1a03000 	.word	0xe1a03000
    af08:	e1a04001 	.word	0xe1a04001
    af0c:	e1a00003 	.word	0xe1a00003
    af10:	e1a01004 	.word	0xe1a01004
    af14:	eb000ab1 	.word	0xeb000ab1
    af18:	e1a03000 	.word	0xe1a03000
    af1c:	e1a04001 	.word	0xe1a04001
    af20:	e1a00005 	.word	0xe1a00005
    af24:	e1a01006 	.word	0xe1a01006
    af28:	e1a02003 	.word	0xe1a02003
    af2c:	e1a03004 	.word	0xe1a03004
    af30:	ebfff2fb 	.word	0xebfff2fb
    af34:	e1a03000 	.word	0xe1a03000
    af38:	e1a04001 	.word	0xe1a04001
    af3c:	e1a00003 	.word	0xe1a00003
    af40:	e1a01004 	.word	0xe1a01004
    af44:	eb0008b0 	.word	0xeb0008b0
    af48:	e1a03000 	.word	0xe1a03000
    af4c:	e50b3044 	.word	0xe50b3044
    af50:	e51b0044 	.word	0xe51b0044
    af54:	e59f12a4 	.word	0xe59f12a4
    af58:	eb000a3e 	.word	0xeb000a3e
    af5c:	e1a03000 	.word	0xe1a03000
    af60:	e3530000 	.word	0xe3530000
    af64:	ba000000 	.word	0xba000000
    af68:	ea000005 	.word	0xea000005
    af6c:	e59f2280 	.word	0xe59f2280
    af70:	e59f323c 	.word	0xe59f323c
    af74:	e5823000 	.word	0xe5823000
    af78:	e59f2284 	.word	0xe59f2284
    af7c:	e59f3230 	.word	0xe59f3230
    af80:	e5823000 	.word	0xe5823000
    af84:	e51b0044 	.word	0xe51b0044
    af88:	e59f1244 	.word	0xe59f1244
    af8c:	eb000a31 	.word	0xeb000a31
    af90:	e1a03000 	.word	0xe1a03000
    af94:	e3530000 	.word	0xe3530000
    af98:	ba000000 	.word	0xba000000
    af9c:	ea000006 	.word	0xea000006
    afa0:	e3a03000 	.word	0xe3a03000
    afa4:	e50b305c 	.word	0xe50b305c
    afa8:	e3a03001 	.word	0xe3a03001
    afac:	e50b3058 	.word	0xe50b3058
    afb0:	e51b3044 	.word	0xe51b3044
    afb4:	e50b3024 	.word	0xe50b3024
    afb8:	ea00000d 	.word	0xea00000d
    afbc:	e51b0044 	.word	0xe51b0044
    afc0:	e59f1240 	.word	0xe59f1240
    afc4:	eb000a23 	.word	0xeb000a23
    afc8:	e1a03000 	.word	0xe1a03000
    afcc:	e3530000 	.word	0xe3530000
    afd0:	ba000000 	.word	0xba000000
    afd4:	ea000006 	.word	0xea000006
    afd8:	e51b3058 	.word	0xe51b3058
    afdc:	e3530000 	.word	0xe3530000
    afe0:	1a000003 	.word	0x1a000003
    afe4:	e3a03001 	.word	0xe3a03001
    afe8:	e50b305c 	.word	0xe50b305c
    afec:	e51b3044 	.word	0xe51b3044
    aff0:	e50b3028 	.word	0xe50b3028
    aff4:	e59f31cc 	.word	0xe59f31cc
    aff8:	e5933000 	.word	0xe5933000
    affc:	e3c33102 	.word	0xe3c33102
    b000:	e1a00003 	.word	0xe1a00003
    b004:	ebfff296 	.word	0xebfff296
    b008:	e1a03000 	.word	0xe1a03000
    b00c:	e1a04001 	.word	0xe1a04001
    b010:	e3a00101 	.word	0xe3a00101
    b014:	e2800856 	.word	0xe2800856
    b018:	e2800902 	.word	0xe2800902
    b01c:	e3a01000 	.word	0xe3a01000
    b020:	e1a02003 	.word	0xe1a02003
    b024:	e1a03004 	.word	0xe1a03004
    b028:	ebfff1b3 	.word	0xebfff1b3
    b02c:	e1a03000 	.word	0xe1a03000
    b030:	e1a04001 	.word	0xe1a04001
    b034:	e1a00003 	.word	0xe1a00003
    b038:	e1a01004 	.word	0xe1a01004
    b03c:	e28f2f59 	.word	0xe28f2f59
    b040:	e892000c 	.word	0xe892000c
    b044:	eb00080b 	.word	0xeb00080b
    b048:	e1a03000 	.word	0xe1a03000
    b04c:	e3530000 	.word	0xe3530000
    b050:	da000000 	.word	0xda000000
    b054:	ea000013 	.word	0xea000013
    b058:	e59f3154 	.word	0xe59f3154
    b05c:	e50b3050 	.word	0xe50b3050
    b060:	e59f314c 	.word	0xe59f314c
    b064:	e50b304c 	.word	0xe50b304c
    b068:	e59f2184 	.word	0xe59f2184
    b06c:	e59f3140 	.word	0xe59f3140
    b070:	e5823000 	.word	0xe5823000
    b074:	e59f3138 	.word	0xe59f3138
    b078:	e50b3040 	.word	0xe50b3040
    b07c:	e59f3130 	.word	0xe59f3130
    b080:	e50b303c 	.word	0xe50b303c
    b084:	e59f2178 	.word	0xe59f2178
    b088:	e59f3124 	.word	0xe59f3124
    b08c:	e5823000 	.word	0xe5823000
    b090:	e3a03001 	.word	0xe3a03001
    b094:	e50b3054 	.word	0xe50b3054
    b098:	e3a03000 	.word	0xe3a03000
    b09c:	e50b305c 	.word	0xe50b305c
    b0a0:	e3a03000 	.word	0xe3a03000
    b0a4:	e50b3058 	.word	0xe50b3058
    b0a8:	e59b3004 	.word	0xe59b3004
    b0ac:	e3a02000 	.word	0xe3a02000
    b0b0:	e5832000 	.word	0xe5832000
    b0b4:	e51b305c 	.word	0xe51b305c
    b0b8:	e3530000 	.word	0xe3530000
    b0bc:	0a000004 	.word	0x0a000004
    b0c0:	e59b3004 	.word	0xe59b3004
    b0c4:	e5933000 	.word	0xe5933000
    b0c8:	e3832001 	.word	0xe3832001
    b0cc:	e59b3004 	.word	0xe59b3004
    b0d0:	e5832000 	.word	0xe5832000
    b0d4:	e51b3058 	.word	0xe51b3058
    b0d8:	e3530000 	.word	0xe3530000
    b0dc:	0a000004 	.word	0x0a000004
    b0e0:	e59b3004 	.word	0xe59b3004
    b0e4:	e5933000 	.word	0xe5933000
    b0e8:	e3832002 	.word	0xe3832002
    b0ec:	e59b3004 	.word	0xe59b3004
    b0f0:	e5832000 	.word	0xe5832000
    b0f4:	e51b3054 	.word	0xe51b3054
    b0f8:	e3530000 	.word	0xe3530000
    b0fc:	0a000007 	.word	0x0a000007
    b100:	e59b3004 	.word	0xe59b3004
    b104:	e5933000 	.word	0xe5933000
    b108:	e3832004 	.word	0xe3832004
    b10c:	e59b3004 	.word	0xe59b3004
    b110:	e5832000 	.word	0xe5832000
    b114:	e3a03000 	.word	0xe3a03000
    b118:	e50b3070 	.word	0xe50b3070
    b11c:	ea00001c 	.word	0xea00001c
    b120:	e59f30d0 	.word	0xe59f30d0
    b124:	e5933000 	.word	0xe5933000
    b128:	e1a00003 	.word	0xe1a00003
    b12c:	ebfff24c 	.word	0xebfff24c
    b130:	e1a03000 	.word	0xe1a03000
    b134:	e1a04001 	.word	0xe1a04001
    b138:	e1a00003 	.word	0xe1a00003
    b13c:	e1a01004 	.word	0xe1a01004
    b140:	e3a02101 	.word	0xe3a02101
    b144:	e2822709 	.word	0xe2822709
    b148:	e3a03000 	.word	0xe3a03000
    b14c:	ebfff274 	.word	0xebfff274
    b150:	e1a03000 	.word	0xe1a03000
    b154:	e1a04001 	.word	0xe1a04001
    b158:	e1a00003 	.word	0xe1a00003
    b15c:	e1a01004 	.word	0xe1a01004
    b160:	eb000812 	.word	0xeb000812
    b164:	e1a02000 	.word	0xe1a02000
    b168:	e59f309c 	.word	0xe59f309c
    b16c:	e5832000 	.word	0xe5832000
    b170:	e59f307c 	.word	0xe59f307c
    b174:	e5933000 	.word	0xe5933000
    b178:	e1a00003 	.word	0xe1a00003
    b17c:	e59f1050 	.word	0xe59f1050
    b180:	eb0008f4 	.word	0xeb0008f4
    b184:	e1a03000 	.word	0xe1a03000
    b188:	e1a00003 	.word	0xe1a00003
    b18c:	eb0009f3 	.word	0xeb0009f3
    b190:	e50b0070 	.word	0xe50b0070
    b194:	e51b3070 	.word	0xe51b3070
    b198:	e1a00003 	.word	0xe1a00003
    b19c:	e24bd020 	.word	0xe24bd020
    b1a0:	e89d69f0 	.word	0xe89d69f0
    b1a4:	e12fff1e 	.word	0xe12fff1e
    b1a8:	3f50624d 	.word	0x3f50624d
    b1ac:	d2f1a9fc 	.word	0xd2f1a9fc
    b1b0:	3c8efa35 	.word	0x3c8efa35
    b1b4:	00000000 	.word	0x00000000
    b1b8:	40a00000 	.word	0x40a00000
    b1bc:	40001708 	.word	0x40001708
    b1c0:	47c34f80 	.word	0x47c34f80
    b1c4:	4b189680 	.word	0x4b189680
    b1c8:	40001700 	.word	0x40001700
    b1cc:	400016fc 	.word	0x400016fc
    b1d0:	40001704 	.word	0x40001704
    b1d4:	447a0000 	.word	0x447a0000
    b1d8:	400016f4 	.word	0x400016f4
    b1dc:	400016f0 	.word	0x400016f0
    b1e0:	400016ec 	.word	0x400016ec
    b1e4:	400016e8 	.word	0x400016e8
    b1e8:	400016e4 	.word	0x400016e4
    b1ec:	400016e0 	.word	0x400016e0
    b1f0:	400016dc 	.word	0x400016dc
    b1f4:	400016d8 	.word	0x400016d8
    b1f8:	400016d4 	.word	0x400016d4
    b1fc:	400016d0 	.word	0x400016d0
    b200:	42c80000 	.word	0x42c80000
    b204:	400016f8 	.word	0x400016f8
    b208:	459c4000 	.word	0x459c4000
    b20c:	40000a4c 	.word	0x40000a4c

0000b210 <cos>:
    b210:	b570      	push	{r4, r5, r6, lr}
    b212:	4a28      	ldr	r2, [pc, #160]	; (b2b4 <cos+0xa4>)
    b214:	4b28      	ldr	r3, [pc, #160]	; (b2b8 <cos+0xa8>)
    b216:	4002      	ands	r2, r0
    b218:	b085      	sub	sp, #20
    b21a:	1c05      	adds	r5, r0, #0
    b21c:	1c0e      	adds	r6, r1, #0
    b21e:	429a      	cmp	r2, r3
    b220:	dd23      	ble.n	b26a <cos+0x5a>
    b222:	4b26      	ldr	r3, [pc, #152]	; (b2bc <cos+0xac>)
    b224:	429a      	cmp	r2, r3
    b226:	dd0b      	ble.n	b240 <cos+0x30>
    b228:	1c33      	adds	r3, r6, #0
    b22a:	1c2a      	adds	r2, r5, #0
    b22c:	f002 fc14 	bl	da58 <____subdf3_from_thumb>
    b230:	1c03      	adds	r3, r0, #0
    b232:	1c0c      	adds	r4, r1, #0
    b234:	1c18      	adds	r0, r3, #0
    b236:	1c21      	adds	r1, r4, #0
    b238:	b005      	add	sp, #20
    b23a:	bc70      	pop	{r4, r5, r6}
    b23c:	bc04      	pop	{r2}
    b23e:	4710      	bx	r2
    b240:	aa01      	add	r2, sp, #4
    b242:	f000 fa79 	bl	b738 <__ieee754_rem_pio2>
    b246:	2303      	movs	r3, #3
    b248:	1c04      	adds	r4, r0, #0
    b24a:	401c      	ands	r4, r3
    b24c:	2c01      	cmp	r4, #1
    b24e:	d013      	beq.n	b278 <cos+0x68>
    b250:	2c02      	cmp	r4, #2
    b252:	d028      	beq.n	b2a6 <cos+0x96>
    b254:	2c00      	cmp	r4, #0
    b256:	d11b      	bne.n	b290 <cos+0x80>
    b258:	9a03      	ldr	r2, [sp, #12]
    b25a:	9b04      	ldr	r3, [sp, #16]
    b25c:	9801      	ldr	r0, [sp, #4]
    b25e:	9902      	ldr	r1, [sp, #8]
    b260:	f000 fd76 	bl	bd50 <__kernel_cos>
    b264:	1c03      	adds	r3, r0, #0
    b266:	1c0c      	adds	r4, r1, #0
    b268:	e7e4      	b.n	b234 <cos+0x24>
    b26a:	4a15      	ldr	r2, [pc, #84]	; (b2c0 <cos+0xb0>)
    b26c:	4b15      	ldr	r3, [pc, #84]	; (b2c4 <cos+0xb4>)
    b26e:	f000 fd6f 	bl	bd50 <__kernel_cos>
    b272:	1c03      	adds	r3, r0, #0
    b274:	1c0c      	adds	r4, r1, #0
    b276:	e7dd      	b.n	b234 <cos+0x24>
    b278:	9801      	ldr	r0, [sp, #4]
    b27a:	9902      	ldr	r1, [sp, #8]
    b27c:	9a03      	ldr	r2, [sp, #12]
    b27e:	9b04      	ldr	r3, [sp, #16]
    b280:	9400      	str	r4, [sp, #0]
    b282:	f001 faf9 	bl	c878 <__kernel_sin>
    b286:	2280      	movs	r2, #128	; 0x80
    b288:	0612      	lsls	r2, r2, #24
    b28a:	1883      	adds	r3, r0, r2
    b28c:	1c0c      	adds	r4, r1, #0
    b28e:	e7d1      	b.n	b234 <cos+0x24>
    b290:	9a03      	ldr	r2, [sp, #12]
    b292:	9b04      	ldr	r3, [sp, #16]
    b294:	2401      	movs	r4, #1
    b296:	9801      	ldr	r0, [sp, #4]
    b298:	9902      	ldr	r1, [sp, #8]
    b29a:	9400      	str	r4, [sp, #0]
    b29c:	f001 faec 	bl	c878 <__kernel_sin>
    b2a0:	1c03      	adds	r3, r0, #0
    b2a2:	1c0c      	adds	r4, r1, #0
    b2a4:	e7c6      	b.n	b234 <cos+0x24>
    b2a6:	9801      	ldr	r0, [sp, #4]
    b2a8:	9902      	ldr	r1, [sp, #8]
    b2aa:	9a03      	ldr	r2, [sp, #12]
    b2ac:	9b04      	ldr	r3, [sp, #16]
    b2ae:	f000 fd4f 	bl	bd50 <__kernel_cos>
    b2b2:	e7e8      	b.n	b286 <cos+0x76>
    b2b4:	7fffffff 	.word	0x7fffffff
    b2b8:	3fe921fb 	.word	0x3fe921fb
    b2bc:	7fefffff 	.word	0x7fefffff
	...

0000b2c8 <sin>:
    b2c8:	b570      	push	{r4, r5, r6, lr}
    b2ca:	4a29      	ldr	r2, [pc, #164]	; (b370 <sin+0xa8>)
    b2cc:	4b29      	ldr	r3, [pc, #164]	; (b374 <sin+0xac>)
    b2ce:	4002      	ands	r2, r0
    b2d0:	b085      	sub	sp, #20
    b2d2:	1c05      	adds	r5, r0, #0
    b2d4:	1c0e      	adds	r6, r1, #0
    b2d6:	429a      	cmp	r2, r3
    b2d8:	dd24      	ble.n	b324 <sin+0x5c>
    b2da:	4b27      	ldr	r3, [pc, #156]	; (b378 <sin+0xb0>)
    b2dc:	429a      	cmp	r2, r3
    b2de:	dd0b      	ble.n	b2f8 <sin+0x30>
    b2e0:	1c33      	adds	r3, r6, #0
    b2e2:	1c2a      	adds	r2, r5, #0
    b2e4:	f002 fbb8 	bl	da58 <____subdf3_from_thumb>
    b2e8:	1c03      	adds	r3, r0, #0
    b2ea:	1c0c      	adds	r4, r1, #0
    b2ec:	1c18      	adds	r0, r3, #0
    b2ee:	1c21      	adds	r1, r4, #0
    b2f0:	b005      	add	sp, #20
    b2f2:	bc70      	pop	{r4, r5, r6}
    b2f4:	bc04      	pop	{r2}
    b2f6:	4710      	bx	r2
    b2f8:	aa01      	add	r2, sp, #4
    b2fa:	f000 fa1d 	bl	b738 <__ieee754_rem_pio2>
    b2fe:	2303      	movs	r3, #3
    b300:	4018      	ands	r0, r3
    b302:	2801      	cmp	r0, #1
    b304:	d017      	beq.n	b336 <sin+0x6e>
    b306:	2802      	cmp	r0, #2
    b308:	d029      	beq.n	b35e <sin+0x96>
    b30a:	2800      	cmp	r0, #0
    b30c:	d11c      	bne.n	b348 <sin+0x80>
    b30e:	9a03      	ldr	r2, [sp, #12]
    b310:	9b04      	ldr	r3, [sp, #16]
    b312:	2401      	movs	r4, #1
    b314:	9801      	ldr	r0, [sp, #4]
    b316:	9902      	ldr	r1, [sp, #8]
    b318:	9400      	str	r4, [sp, #0]
    b31a:	f001 faad 	bl	c878 <__kernel_sin>
    b31e:	1c03      	adds	r3, r0, #0
    b320:	1c0c      	adds	r4, r1, #0
    b322:	e7e3      	b.n	b2ec <sin+0x24>
    b324:	2300      	movs	r3, #0
    b326:	9300      	str	r3, [sp, #0]
    b328:	4a14      	ldr	r2, [pc, #80]	; (b37c <sin+0xb4>)
    b32a:	4b15      	ldr	r3, [pc, #84]	; (b380 <sin+0xb8>)
    b32c:	f001 faa4 	bl	c878 <__kernel_sin>
    b330:	1c03      	adds	r3, r0, #0
    b332:	1c0c      	adds	r4, r1, #0
    b334:	e7da      	b.n	b2ec <sin+0x24>
    b336:	9a03      	ldr	r2, [sp, #12]
    b338:	9b04      	ldr	r3, [sp, #16]
    b33a:	9801      	ldr	r0, [sp, #4]
    b33c:	9902      	ldr	r1, [sp, #8]
    b33e:	f000 fd07 	bl	bd50 <__kernel_cos>
    b342:	1c03      	adds	r3, r0, #0
    b344:	1c0c      	adds	r4, r1, #0
    b346:	e7d1      	b.n	b2ec <sin+0x24>
    b348:	9801      	ldr	r0, [sp, #4]
    b34a:	9902      	ldr	r1, [sp, #8]
    b34c:	9a03      	ldr	r2, [sp, #12]
    b34e:	9b04      	ldr	r3, [sp, #16]
    b350:	f000 fcfe 	bl	bd50 <__kernel_cos>
    b354:	2280      	movs	r2, #128	; 0x80
    b356:	0612      	lsls	r2, r2, #24
    b358:	1883      	adds	r3, r0, r2
    b35a:	1c0c      	adds	r4, r1, #0
    b35c:	e7c6      	b.n	b2ec <sin+0x24>
    b35e:	2401      	movs	r4, #1
    b360:	9801      	ldr	r0, [sp, #4]
    b362:	9902      	ldr	r1, [sp, #8]
    b364:	9a03      	ldr	r2, [sp, #12]
    b366:	9b04      	ldr	r3, [sp, #16]
    b368:	9400      	str	r4, [sp, #0]
    b36a:	f001 fa85 	bl	c878 <__kernel_sin>
    b36e:	e7f1      	b.n	b354 <sin+0x8c>
    b370:	7fffffff 	.word	0x7fffffff
    b374:	3fe921fb 	.word	0x3fe921fb
    b378:	7fefffff 	.word	0x7fefffff
	...

0000b384 <atan2>:
    b384:	b5f0      	push	{r4, r5, r6, r7, lr}
    b386:	4657      	mov	r7, sl
    b388:	4646      	mov	r6, r8
    b38a:	b4c0      	push	{r6, r7}
    b38c:	b08b      	sub	sp, #44	; 0x2c
    b38e:	1c1d      	adds	r5, r3, #0
    b390:	1c06      	adds	r6, r0, #0
    b392:	1c0f      	adds	r7, r1, #0
    b394:	1c14      	adds	r4, r2, #0
    b396:	f000 f8bf 	bl	b518 <__ieee754_atan2>
    b39a:	4b2a      	ldr	r3, [pc, #168]	; (b444 <atan2+0xc0>)
    b39c:	681b      	ldr	r3, [r3, #0]
    b39e:	9000      	str	r0, [sp, #0]
    b3a0:	9101      	str	r1, [sp, #4]
    b3a2:	4698      	mov	r8, r3
    b3a4:	3301      	adds	r3, #1
    b3a6:	d005      	beq.n	b3b4 <atan2+0x30>
    b3a8:	1c20      	adds	r0, r4, #0
    b3aa:	1c29      	adds	r1, r5, #0
    b3ac:	f001 fda6 	bl	cefc <isnan>
    b3b0:	2800      	cmp	r0, #0
    b3b2:	d008      	beq.n	b3c6 <atan2+0x42>
    b3b4:	9800      	ldr	r0, [sp, #0]
    b3b6:	9901      	ldr	r1, [sp, #4]
    b3b8:	b00b      	add	sp, #44	; 0x2c
    b3ba:	bc0c      	pop	{r2, r3}
    b3bc:	4690      	mov	r8, r2
    b3be:	469a      	mov	sl, r3
    b3c0:	bcf0      	pop	{r4, r5, r6, r7}
    b3c2:	bc04      	pop	{r2}
    b3c4:	4710      	bx	r2
    b3c6:	1c30      	adds	r0, r6, #0
    b3c8:	1c39      	adds	r1, r7, #0
    b3ca:	f001 fd97 	bl	cefc <isnan>
    b3ce:	4682      	mov	sl, r0
    b3d0:	2800      	cmp	r0, #0
    b3d2:	d1ef      	bne.n	b3b4 <atan2+0x30>
    b3d4:	1c20      	adds	r0, r4, #0
    b3d6:	1c29      	adds	r1, r5, #0
    b3d8:	4a1b      	ldr	r2, [pc, #108]	; (b448 <atan2+0xc4>)
    b3da:	4b1c      	ldr	r3, [pc, #112]	; (b44c <atan2+0xc8>)
    b3dc:	f002 fb2c 	bl	da38 <____eqdf2_from_thumb>
    b3e0:	2800      	cmp	r0, #0
    b3e2:	d1e7      	bne.n	b3b4 <atan2+0x30>
    b3e4:	1c30      	adds	r0, r6, #0
    b3e6:	1c39      	adds	r1, r7, #0
    b3e8:	4a17      	ldr	r2, [pc, #92]	; (b448 <atan2+0xc4>)
    b3ea:	4b18      	ldr	r3, [pc, #96]	; (b44c <atan2+0xc8>)
    b3ec:	f002 fb24 	bl	da38 <____eqdf2_from_thumb>
    b3f0:	2800      	cmp	r0, #0
    b3f2:	d1df      	bne.n	b3b4 <atan2+0x30>
    b3f4:	2301      	movs	r3, #1
    b3f6:	9302      	str	r3, [sp, #8]
    b3f8:	4b15      	ldr	r3, [pc, #84]	; (b450 <atan2+0xcc>)
    b3fa:	9406      	str	r4, [sp, #24]
    b3fc:	9507      	str	r5, [sp, #28]
    b3fe:	4654      	mov	r4, sl
    b400:	9303      	str	r3, [sp, #12]
    b402:	940a      	str	r4, [sp, #40]	; 0x28
    b404:	4b10      	ldr	r3, [pc, #64]	; (b448 <atan2+0xc4>)
    b406:	4c11      	ldr	r4, [pc, #68]	; (b44c <atan2+0xc8>)
    b408:	9308      	str	r3, [sp, #32]
    b40a:	9409      	str	r4, [sp, #36]	; 0x24
    b40c:	4644      	mov	r4, r8
    b40e:	9604      	str	r6, [sp, #16]
    b410:	9705      	str	r7, [sp, #20]
    b412:	2c02      	cmp	r4, #2
    b414:	d00c      	beq.n	b430 <atan2+0xac>
    b416:	a802      	add	r0, sp, #8
    b418:	f001 fd7e 	bl	cf18 <matherr>
    b41c:	2800      	cmp	r0, #0
    b41e:	d007      	beq.n	b430 <atan2+0xac>
    b420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b422:	2b00      	cmp	r3, #0
    b424:	d109      	bne.n	b43a <atan2+0xb6>
    b426:	9b08      	ldr	r3, [sp, #32]
    b428:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b42a:	9300      	str	r3, [sp, #0]
    b42c:	9401      	str	r4, [sp, #4]
    b42e:	e7c1      	b.n	b3b4 <atan2+0x30>
    b430:	f002 fac4 	bl	d9bc <__errno>
    b434:	2321      	movs	r3, #33	; 0x21
    b436:	6003      	str	r3, [r0, #0]
    b438:	e7f2      	b.n	b420 <atan2+0x9c>
    b43a:	f002 fabf 	bl	d9bc <__errno>
    b43e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b440:	6003      	str	r3, [r0, #0]
    b442:	e7f0      	b.n	b426 <atan2+0xa2>
    b444:	0000dd1c 	.word	0x0000dd1c
	...
    b450:	0000daf4 	.word	0x0000daf4

0000b454 <sqrt>:
    b454:	b5f0      	push	{r4, r5, r6, r7, lr}
    b456:	4657      	mov	r7, sl
    b458:	4646      	mov	r6, r8
    b45a:	b4c0      	push	{r6, r7}
    b45c:	b089      	sub	sp, #36	; 0x24
    b45e:	1c04      	adds	r4, r0, #0
    b460:	1c0d      	adds	r5, r1, #0
    b462:	f000 fb89 	bl	bb78 <__ieee754_sqrt>
    b466:	4b28      	ldr	r3, [pc, #160]	; (b508 <sqrt+0xb4>)
    b468:	681b      	ldr	r3, [r3, #0]
    b46a:	1c06      	adds	r6, r0, #0
    b46c:	1c0f      	adds	r7, r1, #0
    b46e:	4698      	mov	r8, r3
    b470:	3301      	adds	r3, #1
    b472:	d00e      	beq.n	b492 <sqrt+0x3e>
    b474:	1c20      	adds	r0, r4, #0
    b476:	1c29      	adds	r1, r5, #0
    b478:	f001 fd40 	bl	cefc <isnan>
    b47c:	4682      	mov	sl, r0
    b47e:	2800      	cmp	r0, #0
    b480:	d107      	bne.n	b492 <sqrt+0x3e>
    b482:	1c20      	adds	r0, r4, #0
    b484:	1c29      	adds	r1, r5, #0
    b486:	4a21      	ldr	r2, [pc, #132]	; (b50c <sqrt+0xb8>)
    b488:	4b21      	ldr	r3, [pc, #132]	; (b510 <sqrt+0xbc>)
    b48a:	f002 facd 	bl	da28 <____ltdf2_from_thumb>
    b48e:	2800      	cmp	r0, #0
    b490:	db08      	blt.n	b4a4 <sqrt+0x50>
    b492:	1c30      	adds	r0, r6, #0
    b494:	1c39      	adds	r1, r7, #0
    b496:	b009      	add	sp, #36	; 0x24
    b498:	bc0c      	pop	{r2, r3}
    b49a:	4690      	mov	r8, r2
    b49c:	469a      	mov	sl, r3
    b49e:	bcf0      	pop	{r4, r5, r6, r7}
    b4a0:	bc04      	pop	{r2}
    b4a2:	4710      	bx	r2
    b4a4:	2301      	movs	r3, #1
    b4a6:	9300      	str	r3, [sp, #0]
    b4a8:	4b1a      	ldr	r3, [pc, #104]	; (b514 <sqrt+0xc0>)
    b4aa:	9404      	str	r4, [sp, #16]
    b4ac:	9505      	str	r5, [sp, #20]
    b4ae:	9301      	str	r3, [sp, #4]
    b4b0:	9402      	str	r4, [sp, #8]
    b4b2:	9503      	str	r5, [sp, #12]
    b4b4:	4653      	mov	r3, sl
    b4b6:	4644      	mov	r4, r8
    b4b8:	9308      	str	r3, [sp, #32]
    b4ba:	2c00      	cmp	r4, #0
    b4bc:	d10e      	bne.n	b4dc <sqrt+0x88>
    b4be:	4b13      	ldr	r3, [pc, #76]	; (b50c <sqrt+0xb8>)
    b4c0:	4c13      	ldr	r4, [pc, #76]	; (b510 <sqrt+0xbc>)
    b4c2:	9306      	str	r3, [sp, #24]
    b4c4:	9407      	str	r4, [sp, #28]
    b4c6:	4668      	mov	r0, sp
    b4c8:	f001 fd26 	bl	cf18 <matherr>
    b4cc:	2800      	cmp	r0, #0
    b4ce:	d010      	beq.n	b4f2 <sqrt+0x9e>
    b4d0:	9b08      	ldr	r3, [sp, #32]
    b4d2:	2b00      	cmp	r3, #0
    b4d4:	d112      	bne.n	b4fc <sqrt+0xa8>
    b4d6:	9e06      	ldr	r6, [sp, #24]
    b4d8:	9f07      	ldr	r7, [sp, #28]
    b4da:	e7da      	b.n	b492 <sqrt+0x3e>
    b4dc:	480b      	ldr	r0, [pc, #44]	; (b50c <sqrt+0xb8>)
    b4de:	490c      	ldr	r1, [pc, #48]	; (b510 <sqrt+0xbc>)
    b4e0:	1c02      	adds	r2, r0, #0
    b4e2:	1c0b      	adds	r3, r1, #0
    b4e4:	f002 faa4 	bl	da30 <____divdf3_from_thumb>
    b4e8:	4644      	mov	r4, r8
    b4ea:	9006      	str	r0, [sp, #24]
    b4ec:	9107      	str	r1, [sp, #28]
    b4ee:	2c02      	cmp	r4, #2
    b4f0:	d1e9      	bne.n	b4c6 <sqrt+0x72>
    b4f2:	f002 fa63 	bl	d9bc <__errno>
    b4f6:	2321      	movs	r3, #33	; 0x21
    b4f8:	6003      	str	r3, [r0, #0]
    b4fa:	e7e9      	b.n	b4d0 <sqrt+0x7c>
    b4fc:	f002 fa5e 	bl	d9bc <__errno>
    b500:	9b08      	ldr	r3, [sp, #32]
    b502:	6003      	str	r3, [r0, #0]
    b504:	e7e7      	b.n	b4d6 <sqrt+0x82>
    b506:	46c0      	nop			; (mov r8, r8)
    b508:	0000dd1c 	.word	0x0000dd1c
	...
    b514:	0000dafc 	.word	0x0000dafc

0000b518 <__ieee754_atan2>:
    b518:	b5f0      	push	{r4, r5, r6, r7, lr}
    b51a:	4657      	mov	r7, sl
    b51c:	464e      	mov	r6, r9
    b51e:	4645      	mov	r5, r8
    b520:	b4e0      	push	{r5, r6, r7}
    b522:	1c1c      	adds	r4, r3, #0
    b524:	1c0e      	adds	r6, r1, #0
    b526:	496b      	ldr	r1, [pc, #428]	; (b6d4 <__ieee754_atan2+0x1bc>)
    b528:	b082      	sub	sp, #8
    b52a:	1c05      	adds	r5, r0, #0
    b52c:	1c20      	adds	r0, r4, #0
    b52e:	9200      	str	r2, [sp, #0]
    b530:	9301      	str	r3, [sp, #4]
    b532:	4692      	mov	sl, r2
    b534:	4243      	negs	r3, r0
    b536:	400a      	ands	r2, r1
    b538:	4690      	mov	r8, r2
    b53a:	4303      	orrs	r3, r0
    b53c:	4647      	mov	r7, r8
    b53e:	0fdb      	lsrs	r3, r3, #31
    b540:	433b      	orrs	r3, r7
    b542:	4f65      	ldr	r7, [pc, #404]	; (b6d8 <__ieee754_atan2+0x1c0>)
    b544:	468c      	mov	ip, r1
    b546:	42bb      	cmp	r3, r7
    b548:	d80a      	bhi.n	b560 <__ieee754_atan2+0x48>
    b54a:	4273      	negs	r3, r6
    b54c:	4662      	mov	r2, ip
    b54e:	1c29      	adds	r1, r5, #0
    b550:	4333      	orrs	r3, r6
    b552:	4011      	ands	r1, r2
    b554:	0fdb      	lsrs	r3, r3, #31
    b556:	430b      	orrs	r3, r1
    b558:	46a9      	mov	r9, r5
    b55a:	468c      	mov	ip, r1
    b55c:	42bb      	cmp	r3, r7
    b55e:	d911      	bls.n	b584 <__ieee754_atan2+0x6c>
    b560:	1c28      	adds	r0, r5, #0
    b562:	1c31      	adds	r1, r6, #0
    b564:	9a00      	ldr	r2, [sp, #0]
    b566:	9b01      	ldr	r3, [sp, #4]
    b568:	f002 fa72 	bl	da50 <____adddf3_from_thumb>
    b56c:	1c05      	adds	r5, r0, #0
    b56e:	1c0e      	adds	r6, r1, #0
    b570:	1c28      	adds	r0, r5, #0
    b572:	1c31      	adds	r1, r6, #0
    b574:	b002      	add	sp, #8
    b576:	bc1c      	pop	{r2, r3, r4}
    b578:	4690      	mov	r8, r2
    b57a:	4699      	mov	r9, r3
    b57c:	46a2      	mov	sl, r4
    b57e:	bcf0      	pop	{r4, r5, r6, r7}
    b580:	bc04      	pop	{r2}
    b582:	4710      	bx	r2
    b584:	4b55      	ldr	r3, [pc, #340]	; (b6dc <__ieee754_atan2+0x1c4>)
    b586:	4453      	add	r3, sl
    b588:	4303      	orrs	r3, r0
    b58a:	d012      	beq.n	b5b2 <__ieee754_atan2+0x9a>
    b58c:	4651      	mov	r1, sl
    b58e:	178a      	asrs	r2, r1, #30
    b590:	0feb      	lsrs	r3, r5, #31
    b592:	2102      	movs	r1, #2
    b594:	400a      	ands	r2, r1
    b596:	1c1f      	adds	r7, r3, #0
    b598:	4317      	orrs	r7, r2
    b59a:	4662      	mov	r2, ip
    b59c:	4332      	orrs	r2, r6
    b59e:	d111      	bne.n	b5c4 <__ieee754_atan2+0xac>
    b5a0:	2f02      	cmp	r7, #2
    b5a2:	d04a      	beq.n	b63a <__ieee754_atan2+0x122>
    b5a4:	2f02      	cmp	r7, #2
    b5a6:	dd0b      	ble.n	b5c0 <__ieee754_atan2+0xa8>
    b5a8:	2f03      	cmp	r7, #3
    b5aa:	d10b      	bne.n	b5c4 <__ieee754_atan2+0xac>
    b5ac:	4d4c      	ldr	r5, [pc, #304]	; (b6e0 <__ieee754_atan2+0x1c8>)
    b5ae:	4e4d      	ldr	r6, [pc, #308]	; (b6e4 <__ieee754_atan2+0x1cc>)
    b5b0:	e7de      	b.n	b570 <__ieee754_atan2+0x58>
    b5b2:	1c28      	adds	r0, r5, #0
    b5b4:	1c31      	adds	r1, r6, #0
    b5b6:	f001 fa1f 	bl	c9f8 <atan>
    b5ba:	1c05      	adds	r5, r0, #0
    b5bc:	1c0e      	adds	r6, r1, #0
    b5be:	e7d7      	b.n	b570 <__ieee754_atan2+0x58>
    b5c0:	2f00      	cmp	r7, #0
    b5c2:	dad5      	bge.n	b570 <__ieee754_atan2+0x58>
    b5c4:	4643      	mov	r3, r8
    b5c6:	4303      	orrs	r3, r0
    b5c8:	d105      	bne.n	b5d6 <__ieee754_atan2+0xbe>
    b5ca:	464f      	mov	r7, r9
    b5cc:	2f00      	cmp	r7, #0
    b5ce:	db26      	blt.n	b61e <__ieee754_atan2+0x106>
    b5d0:	4d45      	ldr	r5, [pc, #276]	; (b6e8 <__ieee754_atan2+0x1d0>)
    b5d2:	4e46      	ldr	r6, [pc, #280]	; (b6ec <__ieee754_atan2+0x1d4>)
    b5d4:	e7cc      	b.n	b570 <__ieee754_atan2+0x58>
    b5d6:	4b40      	ldr	r3, [pc, #256]	; (b6d8 <__ieee754_atan2+0x1c0>)
    b5d8:	4598      	cmp	r8, r3
    b5da:	d023      	beq.n	b624 <__ieee754_atan2+0x10c>
    b5dc:	4b3e      	ldr	r3, [pc, #248]	; (b6d8 <__ieee754_atan2+0x1c0>)
    b5de:	459c      	cmp	ip, r3
    b5e0:	d01a      	beq.n	b618 <__ieee754_atan2+0x100>
    b5e2:	4661      	mov	r1, ip
    b5e4:	4642      	mov	r2, r8
    b5e6:	1a8b      	subs	r3, r1, r2
    b5e8:	151b      	asrs	r3, r3, #20
    b5ea:	2b3c      	cmp	r3, #60	; 0x3c
    b5ec:	dd2e      	ble.n	b64c <__ieee754_atan2+0x134>
    b5ee:	4b3e      	ldr	r3, [pc, #248]	; (b6e8 <__ieee754_atan2+0x1d0>)
    b5f0:	4c3e      	ldr	r4, [pc, #248]	; (b6ec <__ieee754_atan2+0x1d4>)
    b5f2:	2f01      	cmp	r7, #1
    b5f4:	d024      	beq.n	b640 <__ieee754_atan2+0x128>
    b5f6:	2f02      	cmp	r7, #2
    b5f8:	d038      	beq.n	b66c <__ieee754_atan2+0x154>
    b5fa:	2f00      	cmp	r7, #0
    b5fc:	d023      	beq.n	b646 <__ieee754_atan2+0x12e>
    b5fe:	1c18      	adds	r0, r3, #0
    b600:	1c21      	adds	r1, r4, #0
    b602:	4a3b      	ldr	r2, [pc, #236]	; (b6f0 <__ieee754_atan2+0x1d8>)
    b604:	4b3b      	ldr	r3, [pc, #236]	; (b6f4 <__ieee754_atan2+0x1dc>)
    b606:	f002 fa27 	bl	da58 <____subdf3_from_thumb>
    b60a:	4a3b      	ldr	r2, [pc, #236]	; (b6f8 <__ieee754_atan2+0x1e0>)
    b60c:	4b3b      	ldr	r3, [pc, #236]	; (b6fc <__ieee754_atan2+0x1e4>)
    b60e:	f002 fa23 	bl	da58 <____subdf3_from_thumb>
    b612:	1c05      	adds	r5, r0, #0
    b614:	1c0e      	adds	r6, r1, #0
    b616:	e7ab      	b.n	b570 <__ieee754_atan2+0x58>
    b618:	4648      	mov	r0, r9
    b61a:	2800      	cmp	r0, #0
    b61c:	dad8      	bge.n	b5d0 <__ieee754_atan2+0xb8>
    b61e:	4d38      	ldr	r5, [pc, #224]	; (b700 <__ieee754_atan2+0x1e8>)
    b620:	4e38      	ldr	r6, [pc, #224]	; (b704 <__ieee754_atan2+0x1ec>)
    b622:	e7a5      	b.n	b570 <__ieee754_atan2+0x58>
    b624:	45c4      	cmp	ip, r8
    b626:	d035      	beq.n	b694 <__ieee754_atan2+0x17c>
    b628:	2f01      	cmp	r7, #1
    b62a:	d03e      	beq.n	b6aa <__ieee754_atan2+0x192>
    b62c:	2f01      	cmp	r7, #1
    b62e:	dd3f      	ble.n	b6b0 <__ieee754_atan2+0x198>
    b630:	2f02      	cmp	r7, #2
    b632:	d002      	beq.n	b63a <__ieee754_atan2+0x122>
    b634:	2f03      	cmp	r7, #3
    b636:	d1d1      	bne.n	b5dc <__ieee754_atan2+0xc4>
    b638:	e7b8      	b.n	b5ac <__ieee754_atan2+0x94>
    b63a:	4d2f      	ldr	r5, [pc, #188]	; (b6f8 <__ieee754_atan2+0x1e0>)
    b63c:	4e2f      	ldr	r6, [pc, #188]	; (b6fc <__ieee754_atan2+0x1e4>)
    b63e:	e797      	b.n	b570 <__ieee754_atan2+0x58>
    b640:	2780      	movs	r7, #128	; 0x80
    b642:	063f      	lsls	r7, r7, #24
    b644:	19db      	adds	r3, r3, r7
    b646:	1c1d      	adds	r5, r3, #0
    b648:	1c26      	adds	r6, r4, #0
    b64a:	e791      	b.n	b570 <__ieee754_atan2+0x58>
    b64c:	4650      	mov	r0, sl
    b64e:	2800      	cmp	r0, #0
    b650:	db1b      	blt.n	b68a <__ieee754_atan2+0x172>
    b652:	9a00      	ldr	r2, [sp, #0]
    b654:	9b01      	ldr	r3, [sp, #4]
    b656:	1c28      	adds	r0, r5, #0
    b658:	1c31      	adds	r1, r6, #0
    b65a:	f002 f9e9 	bl	da30 <____divdf3_from_thumb>
    b65e:	f001 fb8b 	bl	cd78 <fabs>
    b662:	f001 f9c9 	bl	c9f8 <atan>
    b666:	1c03      	adds	r3, r0, #0
    b668:	1c0c      	adds	r4, r1, #0
    b66a:	e7c2      	b.n	b5f2 <__ieee754_atan2+0xda>
    b66c:	1c18      	adds	r0, r3, #0
    b66e:	1c21      	adds	r1, r4, #0
    b670:	4a1f      	ldr	r2, [pc, #124]	; (b6f0 <__ieee754_atan2+0x1d8>)
    b672:	4b20      	ldr	r3, [pc, #128]	; (b6f4 <__ieee754_atan2+0x1dc>)
    b674:	f002 f9f0 	bl	da58 <____subdf3_from_thumb>
    b678:	1c02      	adds	r2, r0, #0
    b67a:	1c0b      	adds	r3, r1, #0
    b67c:	481e      	ldr	r0, [pc, #120]	; (b6f8 <__ieee754_atan2+0x1e0>)
    b67e:	491f      	ldr	r1, [pc, #124]	; (b6fc <__ieee754_atan2+0x1e4>)
    b680:	f002 f9ea 	bl	da58 <____subdf3_from_thumb>
    b684:	1c05      	adds	r5, r0, #0
    b686:	1c0e      	adds	r6, r1, #0
    b688:	e772      	b.n	b570 <__ieee754_atan2+0x58>
    b68a:	333c      	adds	r3, #60	; 0x3c
    b68c:	dae1      	bge.n	b652 <__ieee754_atan2+0x13a>
    b68e:	4b1e      	ldr	r3, [pc, #120]	; (b708 <__ieee754_atan2+0x1f0>)
    b690:	4c1e      	ldr	r4, [pc, #120]	; (b70c <__ieee754_atan2+0x1f4>)
    b692:	e7ae      	b.n	b5f2 <__ieee754_atan2+0xda>
    b694:	2f01      	cmp	r7, #1
    b696:	d010      	beq.n	b6ba <__ieee754_atan2+0x1a2>
    b698:	2f01      	cmp	r7, #1
    b69a:	dd14      	ble.n	b6c6 <__ieee754_atan2+0x1ae>
    b69c:	2f02      	cmp	r7, #2
    b69e:	d00f      	beq.n	b6c0 <__ieee754_atan2+0x1a8>
    b6a0:	2f03      	cmp	r7, #3
    b6a2:	d19b      	bne.n	b5dc <__ieee754_atan2+0xc4>
    b6a4:	4d1a      	ldr	r5, [pc, #104]	; (b710 <__ieee754_atan2+0x1f8>)
    b6a6:	4e1b      	ldr	r6, [pc, #108]	; (b714 <__ieee754_atan2+0x1fc>)
    b6a8:	e762      	b.n	b570 <__ieee754_atan2+0x58>
    b6aa:	4d1b      	ldr	r5, [pc, #108]	; (b718 <__ieee754_atan2+0x200>)
    b6ac:	4e1b      	ldr	r6, [pc, #108]	; (b71c <__ieee754_atan2+0x204>)
    b6ae:	e75f      	b.n	b570 <__ieee754_atan2+0x58>
    b6b0:	2f00      	cmp	r7, #0
    b6b2:	d193      	bne.n	b5dc <__ieee754_atan2+0xc4>
    b6b4:	4d14      	ldr	r5, [pc, #80]	; (b708 <__ieee754_atan2+0x1f0>)
    b6b6:	4e15      	ldr	r6, [pc, #84]	; (b70c <__ieee754_atan2+0x1f4>)
    b6b8:	e75a      	b.n	b570 <__ieee754_atan2+0x58>
    b6ba:	4d19      	ldr	r5, [pc, #100]	; (b720 <__ieee754_atan2+0x208>)
    b6bc:	4e19      	ldr	r6, [pc, #100]	; (b724 <__ieee754_atan2+0x20c>)
    b6be:	e757      	b.n	b570 <__ieee754_atan2+0x58>
    b6c0:	4d19      	ldr	r5, [pc, #100]	; (b728 <__ieee754_atan2+0x210>)
    b6c2:	4e1a      	ldr	r6, [pc, #104]	; (b72c <__ieee754_atan2+0x214>)
    b6c4:	e754      	b.n	b570 <__ieee754_atan2+0x58>
    b6c6:	2f00      	cmp	r7, #0
    b6c8:	d000      	beq.n	b6cc <__ieee754_atan2+0x1b4>
    b6ca:	e787      	b.n	b5dc <__ieee754_atan2+0xc4>
    b6cc:	4d18      	ldr	r5, [pc, #96]	; (b730 <__ieee754_atan2+0x218>)
    b6ce:	4e19      	ldr	r6, [pc, #100]	; (b734 <__ieee754_atan2+0x21c>)
    b6d0:	e74e      	b.n	b570 <__ieee754_atan2+0x58>
    b6d2:	46c0      	nop			; (mov r8, r8)
    b6d4:	7fffffff 	.word	0x7fffffff
    b6d8:	7ff00000 	.word	0x7ff00000
    b6dc:	c0100000 	.word	0xc0100000
    b6e0:	c00921fb 	.word	0xc00921fb
    b6e4:	54442d18 	.word	0x54442d18
    b6e8:	3ff921fb 	.word	0x3ff921fb
    b6ec:	54442d18 	.word	0x54442d18
    b6f0:	3ca1a626 	.word	0x3ca1a626
    b6f4:	33145c07 	.word	0x33145c07
    b6f8:	400921fb 	.word	0x400921fb
    b6fc:	54442d18 	.word	0x54442d18
    b700:	bff921fb 	.word	0xbff921fb
    b704:	54442d18 	.word	0x54442d18
	...
    b710:	c002d97c 	.word	0xc002d97c
    b714:	7f3321d2 	.word	0x7f3321d2
    b718:	80000000 	.word	0x80000000
    b71c:	00000000 	.word	0x00000000
    b720:	bfe921fb 	.word	0xbfe921fb
    b724:	54442d18 	.word	0x54442d18
    b728:	4002d97c 	.word	0x4002d97c
    b72c:	7f3321d2 	.word	0x7f3321d2
    b730:	3fe921fb 	.word	0x3fe921fb
    b734:	54442d18 	.word	0x54442d18

0000b738 <__ieee754_rem_pio2>:
    b738:	b5f0      	push	{r4, r5, r6, r7, lr}
    b73a:	465f      	mov	r7, fp
    b73c:	4656      	mov	r6, sl
    b73e:	464d      	mov	r5, r9
    b740:	4644      	mov	r4, r8
    b742:	b4f0      	push	{r4, r5, r6, r7}
    b744:	4bd2      	ldr	r3, [pc, #840]	; (ba90 <__ieee754_rem_pio2+0x358>)
    b746:	1c07      	adds	r7, r0, #0
    b748:	401f      	ands	r7, r3
    b74a:	4bd2      	ldr	r3, [pc, #840]	; (ba94 <__ieee754_rem_pio2+0x35c>)
    b74c:	b08e      	sub	sp, #56	; 0x38
    b74e:	1c05      	adds	r5, r0, #0
    b750:	1c0e      	adds	r6, r1, #0
    b752:	4690      	mov	r8, r2
    b754:	4681      	mov	r9, r0
    b756:	429f      	cmp	r7, r3
    b758:	dc10      	bgt.n	b77c <__ieee754_rem_pio2+0x44>
    b75a:	4bcf      	ldr	r3, [pc, #828]	; (ba98 <__ieee754_rem_pio2+0x360>)
    b75c:	4ccf      	ldr	r4, [pc, #828]	; (ba9c <__ieee754_rem_pio2+0x364>)
    b75e:	6015      	str	r5, [r2, #0]
    b760:	6056      	str	r6, [r2, #4]
    b762:	6093      	str	r3, [r2, #8]
    b764:	60d4      	str	r4, [r2, #12]
    b766:	469a      	mov	sl, r3
    b768:	4650      	mov	r0, sl
    b76a:	b00e      	add	sp, #56	; 0x38
    b76c:	bc3c      	pop	{r2, r3, r4, r5}
    b76e:	4690      	mov	r8, r2
    b770:	4699      	mov	r9, r3
    b772:	46a2      	mov	sl, r4
    b774:	46ab      	mov	fp, r5
    b776:	bcf0      	pop	{r4, r5, r6, r7}
    b778:	bc02      	pop	{r1}
    b77a:	4708      	bx	r1
    b77c:	4bc8      	ldr	r3, [pc, #800]	; (baa0 <__ieee754_rem_pio2+0x368>)
    b77e:	429f      	cmp	r7, r3
    b780:	dd13      	ble.n	b7aa <__ieee754_rem_pio2+0x72>
    b782:	4bc8      	ldr	r3, [pc, #800]	; (baa4 <__ieee754_rem_pio2+0x36c>)
    b784:	429f      	cmp	r7, r3
    b786:	dd34      	ble.n	b7f2 <__ieee754_rem_pio2+0xba>
    b788:	4bc7      	ldr	r3, [pc, #796]	; (baa8 <__ieee754_rem_pio2+0x370>)
    b78a:	429f      	cmp	r7, r3
    b78c:	dc00      	bgt.n	b790 <__ieee754_rem_pio2+0x58>
    b78e:	e0eb      	b.n	b968 <__ieee754_rem_pio2+0x230>
    b790:	1c2a      	adds	r2, r5, #0
    b792:	1c33      	adds	r3, r6, #0
    b794:	f002 f960 	bl	da58 <____subdf3_from_thumb>
    b798:	2400      	movs	r4, #0
    b79a:	4642      	mov	r2, r8
    b79c:	4643      	mov	r3, r8
    b79e:	46a2      	mov	sl, r4
    b7a0:	6090      	str	r0, [r2, #8]
    b7a2:	60d1      	str	r1, [r2, #12]
    b7a4:	6018      	str	r0, [r3, #0]
    b7a6:	6059      	str	r1, [r3, #4]
    b7a8:	e7de      	b.n	b768 <__ieee754_rem_pio2+0x30>
    b7aa:	2800      	cmp	r0, #0
    b7ac:	dc00      	bgt.n	b7b0 <__ieee754_rem_pio2+0x78>
    b7ae:	e0b9      	b.n	b924 <__ieee754_rem_pio2+0x1ec>
    b7b0:	4abe      	ldr	r2, [pc, #760]	; (baac <__ieee754_rem_pio2+0x374>)
    b7b2:	4bbf      	ldr	r3, [pc, #764]	; (bab0 <__ieee754_rem_pio2+0x378>)
    b7b4:	f002 f950 	bl	da58 <____subdf3_from_thumb>
    b7b8:	4bbe      	ldr	r3, [pc, #760]	; (bab4 <__ieee754_rem_pio2+0x37c>)
    b7ba:	1c04      	adds	r4, r0, #0
    b7bc:	1c0d      	adds	r5, r1, #0
    b7be:	429f      	cmp	r7, r3
    b7c0:	d100      	bne.n	b7c4 <__ieee754_rem_pio2+0x8c>
    b7c2:	e127      	b.n	ba14 <__ieee754_rem_pio2+0x2dc>
    b7c4:	4abc      	ldr	r2, [pc, #752]	; (bab8 <__ieee754_rem_pio2+0x380>)
    b7c6:	4bbd      	ldr	r3, [pc, #756]	; (babc <__ieee754_rem_pio2+0x384>)
    b7c8:	f002 f946 	bl	da58 <____subdf3_from_thumb>
    b7cc:	1c02      	adds	r2, r0, #0
    b7ce:	1c0b      	adds	r3, r1, #0
    b7d0:	4641      	mov	r1, r8
    b7d2:	600a      	str	r2, [r1, #0]
    b7d4:	604b      	str	r3, [r1, #4]
    b7d6:	1c20      	adds	r0, r4, #0
    b7d8:	1c29      	adds	r1, r5, #0
    b7da:	f002 f93d 	bl	da58 <____subdf3_from_thumb>
    b7de:	4ab6      	ldr	r2, [pc, #728]	; (bab8 <__ieee754_rem_pio2+0x380>)
    b7e0:	4bb6      	ldr	r3, [pc, #728]	; (babc <__ieee754_rem_pio2+0x384>)
    b7e2:	f002 f939 	bl	da58 <____subdf3_from_thumb>
    b7e6:	2301      	movs	r3, #1
    b7e8:	4642      	mov	r2, r8
    b7ea:	469a      	mov	sl, r3
    b7ec:	6090      	str	r0, [r2, #8]
    b7ee:	60d1      	str	r1, [r2, #12]
    b7f0:	e7ba      	b.n	b768 <__ieee754_rem_pio2+0x30>
    b7f2:	f001 fac1 	bl	cd78 <fabs>
    b7f6:	4ab2      	ldr	r2, [pc, #712]	; (bac0 <__ieee754_rem_pio2+0x388>)
    b7f8:	4bb2      	ldr	r3, [pc, #712]	; (bac4 <__ieee754_rem_pio2+0x38c>)
    b7fa:	1c0d      	adds	r5, r1, #0
    b7fc:	1c04      	adds	r4, r0, #0
    b7fe:	f002 f923 	bl	da48 <____muldf3_from_thumb>
    b802:	4ab1      	ldr	r2, [pc, #708]	; (bac8 <__ieee754_rem_pio2+0x390>)
    b804:	4bb1      	ldr	r3, [pc, #708]	; (bacc <__ieee754_rem_pio2+0x394>)
    b806:	f002 f923 	bl	da50 <____adddf3_from_thumb>
    b80a:	f002 f929 	bl	da60 <____fixdfsi_from_thumb>
    b80e:	4682      	mov	sl, r0
    b810:	f002 f906 	bl	da20 <____floatsidf_from_thumb>
    b814:	4aae      	ldr	r2, [pc, #696]	; (bad0 <__ieee754_rem_pio2+0x398>)
    b816:	4baf      	ldr	r3, [pc, #700]	; (bad4 <__ieee754_rem_pio2+0x39c>)
    b818:	9004      	str	r0, [sp, #16]
    b81a:	9105      	str	r1, [sp, #20]
    b81c:	f002 f914 	bl	da48 <____muldf3_from_thumb>
    b820:	1c02      	adds	r2, r0, #0
    b822:	1c0b      	adds	r3, r1, #0
    b824:	1c20      	adds	r0, r4, #0
    b826:	1c29      	adds	r1, r5, #0
    b828:	f002 f912 	bl	da50 <____adddf3_from_thumb>
    b82c:	4aa2      	ldr	r2, [pc, #648]	; (bab8 <__ieee754_rem_pio2+0x380>)
    b82e:	4ba3      	ldr	r3, [pc, #652]	; (babc <__ieee754_rem_pio2+0x384>)
    b830:	9002      	str	r0, [sp, #8]
    b832:	9103      	str	r1, [sp, #12]
    b834:	9804      	ldr	r0, [sp, #16]
    b836:	9905      	ldr	r1, [sp, #20]
    b838:	f002 f906 	bl	da48 <____muldf3_from_thumb>
    b83c:	1c0e      	adds	r6, r1, #0
    b83e:	4651      	mov	r1, sl
    b840:	1c05      	adds	r5, r0, #0
    b842:	291f      	cmp	r1, #31
    b844:	dc00      	bgt.n	b848 <__ieee754_rem_pio2+0x110>
    b846:	e0fb      	b.n	ba40 <__ieee754_rem_pio2+0x308>
    b848:	1c33      	adds	r3, r6, #0
    b84a:	9802      	ldr	r0, [sp, #8]
    b84c:	9903      	ldr	r1, [sp, #12]
    b84e:	1c2a      	adds	r2, r5, #0
    b850:	f002 f902 	bl	da58 <____subdf3_from_thumb>
    b854:	4ca0      	ldr	r4, [pc, #640]	; (bad8 <__ieee754_rem_pio2+0x3a0>)
    b856:	4643      	mov	r3, r8
    b858:	6018      	str	r0, [r3, #0]
    b85a:	6059      	str	r1, [r3, #4]
    b85c:	0d03      	lsrs	r3, r0, #20
    b85e:	153f      	asrs	r7, r7, #20
    b860:	4023      	ands	r3, r4
    b862:	1afb      	subs	r3, r7, r3
    b864:	46bb      	mov	fp, r7
    b866:	2b10      	cmp	r3, #16
    b868:	dd3e      	ble.n	b8e8 <__ieee754_rem_pio2+0x1b0>
    b86a:	4a9c      	ldr	r2, [pc, #624]	; (badc <__ieee754_rem_pio2+0x3a4>)
    b86c:	4b9c      	ldr	r3, [pc, #624]	; (bae0 <__ieee754_rem_pio2+0x3a8>)
    b86e:	9804      	ldr	r0, [sp, #16]
    b870:	9905      	ldr	r1, [sp, #20]
    b872:	f002 f8e9 	bl	da48 <____muldf3_from_thumb>
    b876:	1c06      	adds	r6, r0, #0
    b878:	1c0f      	adds	r7, r1, #0
    b87a:	1c32      	adds	r2, r6, #0
    b87c:	1c3b      	adds	r3, r7, #0
    b87e:	9802      	ldr	r0, [sp, #8]
    b880:	9903      	ldr	r1, [sp, #12]
    b882:	f002 f8e9 	bl	da58 <____subdf3_from_thumb>
    b886:	4a97      	ldr	r2, [pc, #604]	; (bae4 <__ieee754_rem_pio2+0x3ac>)
    b888:	4b97      	ldr	r3, [pc, #604]	; (bae8 <__ieee754_rem_pio2+0x3b0>)
    b88a:	9006      	str	r0, [sp, #24]
    b88c:	9107      	str	r1, [sp, #28]
    b88e:	9804      	ldr	r0, [sp, #16]
    b890:	9905      	ldr	r1, [sp, #20]
    b892:	f002 f8d9 	bl	da48 <____muldf3_from_thumb>
    b896:	9a06      	ldr	r2, [sp, #24]
    b898:	9b07      	ldr	r3, [sp, #28]
    b89a:	1c04      	adds	r4, r0, #0
    b89c:	1c0d      	adds	r5, r1, #0
    b89e:	9802      	ldr	r0, [sp, #8]
    b8a0:	9903      	ldr	r1, [sp, #12]
    b8a2:	f002 f8d9 	bl	da58 <____subdf3_from_thumb>
    b8a6:	1c32      	adds	r2, r6, #0
    b8a8:	1c3b      	adds	r3, r7, #0
    b8aa:	f002 f8d5 	bl	da58 <____subdf3_from_thumb>
    b8ae:	1c02      	adds	r2, r0, #0
    b8b0:	1c0b      	adds	r3, r1, #0
    b8b2:	1c20      	adds	r0, r4, #0
    b8b4:	1c29      	adds	r1, r5, #0
    b8b6:	f002 f8cf 	bl	da58 <____subdf3_from_thumb>
    b8ba:	1c05      	adds	r5, r0, #0
    b8bc:	1c0e      	adds	r6, r1, #0
    b8be:	1c2a      	adds	r2, r5, #0
    b8c0:	1c33      	adds	r3, r6, #0
    b8c2:	9806      	ldr	r0, [sp, #24]
    b8c4:	9907      	ldr	r1, [sp, #28]
    b8c6:	f002 f8c7 	bl	da58 <____subdf3_from_thumb>
    b8ca:	4c83      	ldr	r4, [pc, #524]	; (bad8 <__ieee754_rem_pio2+0x3a0>)
    b8cc:	4642      	mov	r2, r8
    b8ce:	0d03      	lsrs	r3, r0, #20
    b8d0:	6010      	str	r0, [r2, #0]
    b8d2:	6051      	str	r1, [r2, #4]
    b8d4:	4023      	ands	r3, r4
    b8d6:	4659      	mov	r1, fp
    b8d8:	1acb      	subs	r3, r1, r3
    b8da:	2b31      	cmp	r3, #49	; 0x31
    b8dc:	dd00      	ble.n	b8e0 <__ieee754_rem_pio2+0x1a8>
    b8de:	e10f      	b.n	bb00 <__ieee754_rem_pio2+0x3c8>
    b8e0:	9a06      	ldr	r2, [sp, #24]
    b8e2:	9b07      	ldr	r3, [sp, #28]
    b8e4:	9202      	str	r2, [sp, #8]
    b8e6:	9303      	str	r3, [sp, #12]
    b8e8:	4644      	mov	r4, r8
    b8ea:	6822      	ldr	r2, [r4, #0]
    b8ec:	6863      	ldr	r3, [r4, #4]
    b8ee:	9802      	ldr	r0, [sp, #8]
    b8f0:	9903      	ldr	r1, [sp, #12]
    b8f2:	f002 f8b1 	bl	da58 <____subdf3_from_thumb>
    b8f6:	1c2a      	adds	r2, r5, #0
    b8f8:	1c33      	adds	r3, r6, #0
    b8fa:	f002 f8ad 	bl	da58 <____subdf3_from_thumb>
    b8fe:	4642      	mov	r2, r8
    b900:	464b      	mov	r3, r9
    b902:	6090      	str	r0, [r2, #8]
    b904:	60d1      	str	r1, [r2, #12]
    b906:	2b00      	cmp	r3, #0
    b908:	db00      	blt.n	b90c <__ieee754_rem_pio2+0x1d4>
    b90a:	e72d      	b.n	b768 <__ieee754_rem_pio2+0x30>
    b90c:	6813      	ldr	r3, [r2, #0]
    b90e:	2480      	movs	r4, #128	; 0x80
    b910:	0624      	lsls	r4, r4, #24
    b912:	191b      	adds	r3, r3, r4
    b914:	4651      	mov	r1, sl
    b916:	6013      	str	r3, [r2, #0]
    b918:	6893      	ldr	r3, [r2, #8]
    b91a:	4249      	negs	r1, r1
    b91c:	191b      	adds	r3, r3, r4
    b91e:	468a      	mov	sl, r1
    b920:	6093      	str	r3, [r2, #8]
    b922:	e721      	b.n	b768 <__ieee754_rem_pio2+0x30>
    b924:	4a61      	ldr	r2, [pc, #388]	; (baac <__ieee754_rem_pio2+0x374>)
    b926:	4b62      	ldr	r3, [pc, #392]	; (bab0 <__ieee754_rem_pio2+0x378>)
    b928:	f002 f892 	bl	da50 <____adddf3_from_thumb>
    b92c:	4b61      	ldr	r3, [pc, #388]	; (bab4 <__ieee754_rem_pio2+0x37c>)
    b92e:	1c04      	adds	r4, r0, #0
    b930:	1c0d      	adds	r5, r1, #0
    b932:	429f      	cmp	r7, r3
    b934:	d100      	bne.n	b938 <__ieee754_rem_pio2+0x200>
    b936:	e095      	b.n	ba64 <__ieee754_rem_pio2+0x32c>
    b938:	4a5f      	ldr	r2, [pc, #380]	; (bab8 <__ieee754_rem_pio2+0x380>)
    b93a:	4b60      	ldr	r3, [pc, #384]	; (babc <__ieee754_rem_pio2+0x384>)
    b93c:	f002 f888 	bl	da50 <____adddf3_from_thumb>
    b940:	1c02      	adds	r2, r0, #0
    b942:	1c0b      	adds	r3, r1, #0
    b944:	4641      	mov	r1, r8
    b946:	600a      	str	r2, [r1, #0]
    b948:	604b      	str	r3, [r1, #4]
    b94a:	1c20      	adds	r0, r4, #0
    b94c:	1c29      	adds	r1, r5, #0
    b94e:	f002 f883 	bl	da58 <____subdf3_from_thumb>
    b952:	4a59      	ldr	r2, [pc, #356]	; (bab8 <__ieee754_rem_pio2+0x380>)
    b954:	4b59      	ldr	r3, [pc, #356]	; (babc <__ieee754_rem_pio2+0x384>)
    b956:	f002 f87b 	bl	da50 <____adddf3_from_thumb>
    b95a:	2301      	movs	r3, #1
    b95c:	425c      	negs	r4, r3
    b95e:	4642      	mov	r2, r8
    b960:	46a2      	mov	sl, r4
    b962:	6090      	str	r0, [r2, #8]
    b964:	60d1      	str	r1, [r2, #12]
    b966:	e6ff      	b.n	b768 <__ieee754_rem_pio2+0x30>
    b968:	4960      	ldr	r1, [pc, #384]	; (baec <__ieee754_rem_pio2+0x3b4>)
    b96a:	153a      	asrs	r2, r7, #20
    b96c:	1889      	adds	r1, r1, r2
    b96e:	050a      	lsls	r2, r1, #20
    b970:	1abb      	subs	r3, r7, r2
    b972:	1c18      	adds	r0, r3, #0
    b974:	468a      	mov	sl, r1
    b976:	1c31      	adds	r1, r6, #0
    b978:	1c1c      	adds	r4, r3, #0
    b97a:	f002 f871 	bl	da60 <____fixdfsi_from_thumb>
    b97e:	f002 f84f 	bl	da20 <____floatsidf_from_thumb>
    b982:	1c02      	adds	r2, r0, #0
    b984:	1c0b      	adds	r3, r1, #0
    b986:	1c20      	adds	r0, r4, #0
    b988:	1c31      	adds	r1, r6, #0
    b98a:	9208      	str	r2, [sp, #32]
    b98c:	9309      	str	r3, [sp, #36]	; 0x24
    b98e:	f002 f863 	bl	da58 <____subdf3_from_thumb>
    b992:	4a57      	ldr	r2, [pc, #348]	; (baf0 <__ieee754_rem_pio2+0x3b8>)
    b994:	4b57      	ldr	r3, [pc, #348]	; (baf4 <__ieee754_rem_pio2+0x3bc>)
    b996:	f002 f857 	bl	da48 <____muldf3_from_thumb>
    b99a:	1c0d      	adds	r5, r1, #0
    b99c:	1c04      	adds	r4, r0, #0
    b99e:	f002 f85f 	bl	da60 <____fixdfsi_from_thumb>
    b9a2:	f002 f83d 	bl	da20 <____floatsidf_from_thumb>
    b9a6:	1c02      	adds	r2, r0, #0
    b9a8:	1c0b      	adds	r3, r1, #0
    b9aa:	1c20      	adds	r0, r4, #0
    b9ac:	1c29      	adds	r1, r5, #0
    b9ae:	920a      	str	r2, [sp, #40]	; 0x28
    b9b0:	930b      	str	r3, [sp, #44]	; 0x2c
    b9b2:	f002 f851 	bl	da58 <____subdf3_from_thumb>
    b9b6:	4a4e      	ldr	r2, [pc, #312]	; (baf0 <__ieee754_rem_pio2+0x3b8>)
    b9b8:	4b4e      	ldr	r3, [pc, #312]	; (baf4 <__ieee754_rem_pio2+0x3bc>)
    b9ba:	f002 f845 	bl	da48 <____muldf3_from_thumb>
    b9be:	2603      	movs	r6, #3
    b9c0:	ad0c      	add	r5, sp, #48	; 0x30
    b9c2:	900c      	str	r0, [sp, #48]	; 0x30
    b9c4:	910d      	str	r1, [sp, #52]	; 0x34
    b9c6:	e001      	b.n	b9cc <__ieee754_rem_pio2+0x294>
    b9c8:	1c26      	adds	r6, r4, #0
    b9ca:	3d08      	subs	r5, #8
    b9cc:	6828      	ldr	r0, [r5, #0]
    b9ce:	6869      	ldr	r1, [r5, #4]
    b9d0:	4a31      	ldr	r2, [pc, #196]	; (ba98 <__ieee754_rem_pio2+0x360>)
    b9d2:	4b32      	ldr	r3, [pc, #200]	; (ba9c <__ieee754_rem_pio2+0x364>)
    b9d4:	1e74      	subs	r4, r6, #1
    b9d6:	f002 f82f 	bl	da38 <____eqdf2_from_thumb>
    b9da:	2800      	cmp	r0, #0
    b9dc:	d0f4      	beq.n	b9c8 <__ieee754_rem_pio2+0x290>
    b9de:	2302      	movs	r3, #2
    b9e0:	9300      	str	r3, [sp, #0]
    b9e2:	4b45      	ldr	r3, [pc, #276]	; (baf8 <__ieee754_rem_pio2+0x3c0>)
    b9e4:	4652      	mov	r2, sl
    b9e6:	9301      	str	r3, [sp, #4]
    b9e8:	a808      	add	r0, sp, #32
    b9ea:	4641      	mov	r1, r8
    b9ec:	1c33      	adds	r3, r6, #0
    b9ee:	f000 faf5 	bl	bfdc <__kernel_rem_pio2>
    b9f2:	464a      	mov	r2, r9
    b9f4:	4682      	mov	sl, r0
    b9f6:	2a00      	cmp	r2, #0
    b9f8:	db00      	blt.n	b9fc <__ieee754_rem_pio2+0x2c4>
    b9fa:	e6b5      	b.n	b768 <__ieee754_rem_pio2+0x30>
    b9fc:	4644      	mov	r4, r8
    b9fe:	6823      	ldr	r3, [r4, #0]
    ba00:	2180      	movs	r1, #128	; 0x80
    ba02:	0609      	lsls	r1, r1, #24
    ba04:	185b      	adds	r3, r3, r1
    ba06:	6023      	str	r3, [r4, #0]
    ba08:	68a3      	ldr	r3, [r4, #8]
    ba0a:	4242      	negs	r2, r0
    ba0c:	185b      	adds	r3, r3, r1
    ba0e:	4692      	mov	sl, r2
    ba10:	60a3      	str	r3, [r4, #8]
    ba12:	e6a9      	b.n	b768 <__ieee754_rem_pio2+0x30>
    ba14:	4a31      	ldr	r2, [pc, #196]	; (badc <__ieee754_rem_pio2+0x3a4>)
    ba16:	4b32      	ldr	r3, [pc, #200]	; (bae0 <__ieee754_rem_pio2+0x3a8>)
    ba18:	f002 f81e 	bl	da58 <____subdf3_from_thumb>
    ba1c:	4a31      	ldr	r2, [pc, #196]	; (bae4 <__ieee754_rem_pio2+0x3ac>)
    ba1e:	4b32      	ldr	r3, [pc, #200]	; (bae8 <__ieee754_rem_pio2+0x3b0>)
    ba20:	1c04      	adds	r4, r0, #0
    ba22:	1c0d      	adds	r5, r1, #0
    ba24:	f002 f818 	bl	da58 <____subdf3_from_thumb>
    ba28:	1c02      	adds	r2, r0, #0
    ba2a:	1c0b      	adds	r3, r1, #0
    ba2c:	4641      	mov	r1, r8
    ba2e:	600a      	str	r2, [r1, #0]
    ba30:	604b      	str	r3, [r1, #4]
    ba32:	1c20      	adds	r0, r4, #0
    ba34:	1c29      	adds	r1, r5, #0
    ba36:	f002 f80f 	bl	da58 <____subdf3_from_thumb>
    ba3a:	4a2a      	ldr	r2, [pc, #168]	; (bae4 <__ieee754_rem_pio2+0x3ac>)
    ba3c:	4b2a      	ldr	r3, [pc, #168]	; (bae8 <__ieee754_rem_pio2+0x3b0>)
    ba3e:	e6d0      	b.n	b7e2 <__ieee754_rem_pio2+0xaa>
    ba40:	4b2e      	ldr	r3, [pc, #184]	; (bafc <__ieee754_rem_pio2+0x3c4>)
    ba42:	008a      	lsls	r2, r1, #2
    ba44:	18d2      	adds	r2, r2, r3
    ba46:	3a04      	subs	r2, #4
    ba48:	6813      	ldr	r3, [r2, #0]
    ba4a:	429f      	cmp	r7, r3
    ba4c:	d100      	bne.n	ba50 <__ieee754_rem_pio2+0x318>
    ba4e:	e6fb      	b.n	b848 <__ieee754_rem_pio2+0x110>
    ba50:	1c2a      	adds	r2, r5, #0
    ba52:	9802      	ldr	r0, [sp, #8]
    ba54:	9903      	ldr	r1, [sp, #12]
    ba56:	1c33      	adds	r3, r6, #0
    ba58:	f001 fffe 	bl	da58 <____subdf3_from_thumb>
    ba5c:	4642      	mov	r2, r8
    ba5e:	6010      	str	r0, [r2, #0]
    ba60:	6051      	str	r1, [r2, #4]
    ba62:	e741      	b.n	b8e8 <__ieee754_rem_pio2+0x1b0>
    ba64:	4a1d      	ldr	r2, [pc, #116]	; (badc <__ieee754_rem_pio2+0x3a4>)
    ba66:	4b1e      	ldr	r3, [pc, #120]	; (bae0 <__ieee754_rem_pio2+0x3a8>)
    ba68:	f001 fff2 	bl	da50 <____adddf3_from_thumb>
    ba6c:	4a1d      	ldr	r2, [pc, #116]	; (bae4 <__ieee754_rem_pio2+0x3ac>)
    ba6e:	4b1e      	ldr	r3, [pc, #120]	; (bae8 <__ieee754_rem_pio2+0x3b0>)
    ba70:	1c04      	adds	r4, r0, #0
    ba72:	1c0d      	adds	r5, r1, #0
    ba74:	f001 ffec 	bl	da50 <____adddf3_from_thumb>
    ba78:	1c02      	adds	r2, r0, #0
    ba7a:	1c0b      	adds	r3, r1, #0
    ba7c:	4641      	mov	r1, r8
    ba7e:	600a      	str	r2, [r1, #0]
    ba80:	604b      	str	r3, [r1, #4]
    ba82:	1c20      	adds	r0, r4, #0
    ba84:	1c29      	adds	r1, r5, #0
    ba86:	f001 ffe7 	bl	da58 <____subdf3_from_thumb>
    ba8a:	4a16      	ldr	r2, [pc, #88]	; (bae4 <__ieee754_rem_pio2+0x3ac>)
    ba8c:	4b16      	ldr	r3, [pc, #88]	; (bae8 <__ieee754_rem_pio2+0x3b0>)
    ba8e:	e762      	b.n	b956 <__ieee754_rem_pio2+0x21e>
    ba90:	7fffffff 	.word	0x7fffffff
    ba94:	3fe921fb 	.word	0x3fe921fb
	...
    baa0:	4002d97b 	.word	0x4002d97b
    baa4:	413921fb 	.word	0x413921fb
    baa8:	7fefffff 	.word	0x7fefffff
    baac:	3ff921fb 	.word	0x3ff921fb
    bab0:	54400000 	.word	0x54400000
    bab4:	3ff921fb 	.word	0x3ff921fb
    bab8:	3dd0b461 	.word	0x3dd0b461
    babc:	1a626331 	.word	0x1a626331
    bac0:	3fe45f30 	.word	0x3fe45f30
    bac4:	6dc9c883 	.word	0x6dc9c883
    bac8:	3fe00000 	.word	0x3fe00000
    bacc:	00000000 	.word	0x00000000
    bad0:	bff921fb 	.word	0xbff921fb
    bad4:	54400000 	.word	0x54400000
    bad8:	000007ff 	.word	0x000007ff
    badc:	3dd0b461 	.word	0x3dd0b461
    bae0:	1a600000 	.word	0x1a600000
    bae4:	3ba3198a 	.word	0x3ba3198a
    bae8:	2e037073 	.word	0x2e037073
    baec:	fffffbea 	.word	0xfffffbea
    baf0:	41700000 	.word	0x41700000
    baf4:	00000000 	.word	0x00000000
    baf8:	0000db84 	.word	0x0000db84
    bafc:	0000db04 	.word	0x0000db04
    bb00:	4b1a      	ldr	r3, [pc, #104]	; (bb6c <__ieee754_rem_pio2+0x434>)
    bb02:	4a19      	ldr	r2, [pc, #100]	; (bb68 <__ieee754_rem_pio2+0x430>)
    bb04:	9804      	ldr	r0, [sp, #16]
    bb06:	9905      	ldr	r1, [sp, #20]
    bb08:	f001 ff9e 	bl	da48 <____muldf3_from_thumb>
    bb0c:	1c06      	adds	r6, r0, #0
    bb0e:	1c0f      	adds	r7, r1, #0
    bb10:	1c32      	adds	r2, r6, #0
    bb12:	1c3b      	adds	r3, r7, #0
    bb14:	9806      	ldr	r0, [sp, #24]
    bb16:	9907      	ldr	r1, [sp, #28]
    bb18:	f001 ff9e 	bl	da58 <____subdf3_from_thumb>
    bb1c:	4a14      	ldr	r2, [pc, #80]	; (bb70 <__ieee754_rem_pio2+0x438>)
    bb1e:	4b15      	ldr	r3, [pc, #84]	; (bb74 <__ieee754_rem_pio2+0x43c>)
    bb20:	9002      	str	r0, [sp, #8]
    bb22:	9103      	str	r1, [sp, #12]
    bb24:	9804      	ldr	r0, [sp, #16]
    bb26:	9905      	ldr	r1, [sp, #20]
    bb28:	f001 ff8e 	bl	da48 <____muldf3_from_thumb>
    bb2c:	9a02      	ldr	r2, [sp, #8]
    bb2e:	9b03      	ldr	r3, [sp, #12]
    bb30:	1c0d      	adds	r5, r1, #0
    bb32:	1c04      	adds	r4, r0, #0
    bb34:	9806      	ldr	r0, [sp, #24]
    bb36:	9907      	ldr	r1, [sp, #28]
    bb38:	f001 ff8e 	bl	da58 <____subdf3_from_thumb>
    bb3c:	1c32      	adds	r2, r6, #0
    bb3e:	1c3b      	adds	r3, r7, #0
    bb40:	f001 ff8a 	bl	da58 <____subdf3_from_thumb>
    bb44:	1c02      	adds	r2, r0, #0
    bb46:	1c0b      	adds	r3, r1, #0
    bb48:	1c20      	adds	r0, r4, #0
    bb4a:	1c29      	adds	r1, r5, #0
    bb4c:	f001 ff84 	bl	da58 <____subdf3_from_thumb>
    bb50:	1c05      	adds	r5, r0, #0
    bb52:	1c0e      	adds	r6, r1, #0
    bb54:	1c33      	adds	r3, r6, #0
    bb56:	9802      	ldr	r0, [sp, #8]
    bb58:	9903      	ldr	r1, [sp, #12]
    bb5a:	1c2a      	adds	r2, r5, #0
    bb5c:	f001 ff7c 	bl	da58 <____subdf3_from_thumb>
    bb60:	4643      	mov	r3, r8
    bb62:	6018      	str	r0, [r3, #0]
    bb64:	6059      	str	r1, [r3, #4]
    bb66:	e6bf      	b.n	b8e8 <__ieee754_rem_pio2+0x1b0>
    bb68:	3ba3198a 	.word	0x3ba3198a
    bb6c:	2e000000 	.word	0x2e000000
    bb70:	397b839a 	.word	0x397b839a
    bb74:	252049c1 	.word	0x252049c1

0000bb78 <__ieee754_sqrt>:
    bb78:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb7a:	4657      	mov	r7, sl
    bb7c:	464e      	mov	r6, r9
    bb7e:	4645      	mov	r5, r8
    bb80:	b4e0      	push	{r5, r6, r7}
    bb82:	2200      	movs	r2, #0
    bb84:	2300      	movs	r3, #0
    bb86:	b082      	sub	sp, #8
    bb88:	9200      	str	r2, [sp, #0]
    bb8a:	9301      	str	r3, [sp, #4]
    bb8c:	1c05      	adds	r5, r0, #0
    bb8e:	4a6b      	ldr	r2, [pc, #428]	; (bd3c <__ieee754_sqrt+0x1c4>)
    bb90:	1c2b      	adds	r3, r5, #0
    bb92:	1c0e      	adds	r6, r1, #0
    bb94:	4013      	ands	r3, r2
    bb96:	1c07      	adds	r7, r0, #0
    bb98:	1c01      	adds	r1, r0, #0
    bb9a:	1c30      	adds	r0, r6, #0
    bb9c:	4293      	cmp	r3, r2
    bb9e:	d100      	bne.n	bba2 <__ieee754_sqrt+0x2a>
    bba0:	e0a1      	b.n	bce6 <__ieee754_sqrt+0x16e>
    bba2:	2d00      	cmp	r5, #0
    bba4:	dc00      	bgt.n	bba8 <__ieee754_sqrt+0x30>
    bba6:	e0ad      	b.n	bd04 <__ieee754_sqrt+0x18c>
    bba8:	150a      	asrs	r2, r1, #20
    bbaa:	2a00      	cmp	r2, #0
    bbac:	d118      	bne.n	bbe0 <__ieee754_sqrt+0x68>
    bbae:	2f00      	cmp	r7, #0
    bbb0:	d104      	bne.n	bbbc <__ieee754_sqrt+0x44>
    bbb2:	0ac1      	lsrs	r1, r0, #11
    bbb4:	3a15      	subs	r2, #21
    bbb6:	0540      	lsls	r0, r0, #21
    bbb8:	2900      	cmp	r1, #0
    bbba:	d0fa      	beq.n	bbb2 <__ieee754_sqrt+0x3a>
    bbbc:	2380      	movs	r3, #128	; 0x80
    bbbe:	035b      	lsls	r3, r3, #13
    bbc0:	4219      	tst	r1, r3
    bbc2:	d000      	beq.n	bbc6 <__ieee754_sqrt+0x4e>
    bbc4:	e0b6      	b.n	bd34 <__ieee754_sqrt+0x1bc>
    bbc6:	2400      	movs	r4, #0
    bbc8:	0049      	lsls	r1, r1, #1
    bbca:	3401      	adds	r4, #1
    bbcc:	4219      	tst	r1, r3
    bbce:	d0fb      	beq.n	bbc8 <__ieee754_sqrt+0x50>
    bbd0:	2320      	movs	r3, #32
    bbd2:	1b1d      	subs	r5, r3, r4
    bbd4:	1b13      	subs	r3, r2, r4
    bbd6:	1c5a      	adds	r2, r3, #1
    bbd8:	1c03      	adds	r3, r0, #0
    bbda:	40eb      	lsrs	r3, r5
    bbdc:	4319      	orrs	r1, r3
    bbde:	40a0      	lsls	r0, r4
    bbe0:	4b57      	ldr	r3, [pc, #348]	; (bd40 <__ieee754_sqrt+0x1c8>)
    bbe2:	189b      	adds	r3, r3, r2
    bbe4:	4699      	mov	r9, r3
    bbe6:	4b57      	ldr	r3, [pc, #348]	; (bd44 <__ieee754_sqrt+0x1cc>)
    bbe8:	1c0a      	adds	r2, r1, #0
    bbea:	401a      	ands	r2, r3
    bbec:	2380      	movs	r3, #128	; 0x80
    bbee:	035b      	lsls	r3, r3, #13
    bbf0:	464c      	mov	r4, r9
    bbf2:	431a      	orrs	r2, r3
    bbf4:	07e4      	lsls	r4, r4, #31
    bbf6:	d468      	bmi.n	bcca <__ieee754_sqrt+0x152>
    bbf8:	0fc3      	lsrs	r3, r0, #31
    bbfa:	189b      	adds	r3, r3, r2
    bbfc:	2180      	movs	r1, #128	; 0x80
    bbfe:	2500      	movs	r5, #0
    bc00:	18d2      	adds	r2, r2, r3
    bc02:	0040      	lsls	r0, r0, #1
    bc04:	0389      	lsls	r1, r1, #14
    bc06:	46aa      	mov	sl, r5
    bc08:	2600      	movs	r6, #0
    bc0a:	194b      	adds	r3, r1, r5
    bc0c:	4293      	cmp	r3, r2
    bc0e:	dc02      	bgt.n	bc16 <__ieee754_sqrt+0x9e>
    bc10:	18cd      	adds	r5, r1, r3
    bc12:	1ad2      	subs	r2, r2, r3
    bc14:	448a      	add	sl, r1
    bc16:	0fc3      	lsrs	r3, r0, #31
    bc18:	2480      	movs	r4, #128	; 0x80
    bc1a:	189b      	adds	r3, r3, r2
    bc1c:	3601      	adds	r6, #1
    bc1e:	0624      	lsls	r4, r4, #24
    bc20:	18d2      	adds	r2, r2, r3
    bc22:	0040      	lsls	r0, r0, #1
    bc24:	0849      	lsrs	r1, r1, #1
    bc26:	2e16      	cmp	r6, #22
    bc28:	d1ef      	bne.n	bc0a <__ieee754_sqrt+0x92>
    bc2a:	2700      	movs	r7, #0
    bc2c:	46b8      	mov	r8, r7
    bc2e:	2600      	movs	r6, #0
    bc30:	46a4      	mov	ip, r4
    bc32:	e009      	b.n	bc48 <__ieee754_sqrt+0xd0>
    bc34:	42aa      	cmp	r2, r5
    bc36:	d044      	beq.n	bcc2 <__ieee754_sqrt+0x14a>
    bc38:	0fc3      	lsrs	r3, r0, #31
    bc3a:	189b      	adds	r3, r3, r2
    bc3c:	3601      	adds	r6, #1
    bc3e:	18d2      	adds	r2, r2, r3
    bc40:	0040      	lsls	r0, r0, #1
    bc42:	0864      	lsrs	r4, r4, #1
    bc44:	2e20      	cmp	r6, #32
    bc46:	d017      	beq.n	bc78 <__ieee754_sqrt+0x100>
    bc48:	19e1      	adds	r1, r4, r7
    bc4a:	42aa      	cmp	r2, r5
    bc4c:	ddf2      	ble.n	bc34 <__ieee754_sqrt+0xbc>
    bc4e:	4663      	mov	r3, ip
    bc50:	400b      	ands	r3, r1
    bc52:	190f      	adds	r7, r1, r4
    bc54:	4563      	cmp	r3, ip
    bc56:	d02f      	beq.n	bcb8 <__ieee754_sqrt+0x140>
    bc58:	1c2b      	adds	r3, r5, #0
    bc5a:	1b52      	subs	r2, r2, r5
    bc5c:	4281      	cmp	r1, r0
    bc5e:	d900      	bls.n	bc62 <__ieee754_sqrt+0xea>
    bc60:	3a01      	subs	r2, #1
    bc62:	1a40      	subs	r0, r0, r1
    bc64:	1c1d      	adds	r5, r3, #0
    bc66:	0fc3      	lsrs	r3, r0, #31
    bc68:	189b      	adds	r3, r3, r2
    bc6a:	3601      	adds	r6, #1
    bc6c:	44a0      	add	r8, r4
    bc6e:	18d2      	adds	r2, r2, r3
    bc70:	0040      	lsls	r0, r0, #1
    bc72:	0864      	lsrs	r4, r4, #1
    bc74:	2e20      	cmp	r6, #32
    bc76:	d1e7      	bne.n	bc48 <__ieee754_sqrt+0xd0>
    bc78:	4302      	orrs	r2, r0
    bc7a:	d12b      	bne.n	bcd4 <__ieee754_sqrt+0x15c>
    bc7c:	4644      	mov	r4, r8
    bc7e:	0861      	lsrs	r1, r4, #1
    bc80:	4650      	mov	r0, sl
    bc82:	07c0      	lsls	r0, r0, #31
    bc84:	d502      	bpl.n	bc8c <__ieee754_sqrt+0x114>
    bc86:	2380      	movs	r3, #128	; 0x80
    bc88:	061b      	lsls	r3, r3, #24
    bc8a:	4319      	orrs	r1, r3
    bc8c:	4653      	mov	r3, sl
    bc8e:	4c2e      	ldr	r4, [pc, #184]	; (bd48 <__ieee754_sqrt+0x1d0>)
    bc90:	4648      	mov	r0, r9
    bc92:	105a      	asrs	r2, r3, #1
    bc94:	1043      	asrs	r3, r0, #1
    bc96:	1912      	adds	r2, r2, r4
    bc98:	051b      	lsls	r3, r3, #20
    bc9a:	18d3      	adds	r3, r2, r3
    bc9c:	9300      	str	r3, [sp, #0]
    bc9e:	9101      	str	r1, [sp, #4]
    bca0:	9d00      	ldr	r5, [sp, #0]
    bca2:	9e01      	ldr	r6, [sp, #4]
    bca4:	1c28      	adds	r0, r5, #0
    bca6:	1c31      	adds	r1, r6, #0
    bca8:	b002      	add	sp, #8
    bcaa:	bc1c      	pop	{r2, r3, r4}
    bcac:	4690      	mov	r8, r2
    bcae:	4699      	mov	r9, r3
    bcb0:	46a2      	mov	sl, r4
    bcb2:	bcf0      	pop	{r4, r5, r6, r7}
    bcb4:	bc04      	pop	{r2}
    bcb6:	4710      	bx	r2
    bcb8:	4663      	mov	r3, ip
    bcba:	421f      	tst	r7, r3
    bcbc:	d1cc      	bne.n	bc58 <__ieee754_sqrt+0xe0>
    bcbe:	1c6b      	adds	r3, r5, #1
    bcc0:	e7cb      	b.n	bc5a <__ieee754_sqrt+0xe2>
    bcc2:	4281      	cmp	r1, r0
    bcc4:	d9c3      	bls.n	bc4e <__ieee754_sqrt+0xd6>
    bcc6:	1c15      	adds	r5, r2, #0
    bcc8:	e7b6      	b.n	bc38 <__ieee754_sqrt+0xc0>
    bcca:	0fc3      	lsrs	r3, r0, #31
    bccc:	189b      	adds	r3, r3, r2
    bcce:	18d2      	adds	r2, r2, r3
    bcd0:	0040      	lsls	r0, r0, #1
    bcd2:	e791      	b.n	bbf8 <__ieee754_sqrt+0x80>
    bcd4:	4640      	mov	r0, r8
    bcd6:	3001      	adds	r0, #1
    bcd8:	d028      	beq.n	bd2c <__ieee754_sqrt+0x1b4>
    bcda:	2301      	movs	r3, #1
    bcdc:	4644      	mov	r4, r8
    bcde:	4023      	ands	r3, r4
    bce0:	4443      	add	r3, r8
    bce2:	0859      	lsrs	r1, r3, #1
    bce4:	e7cc      	b.n	bc80 <__ieee754_sqrt+0x108>
    bce6:	1c2a      	adds	r2, r5, #0
    bce8:	1c33      	adds	r3, r6, #0
    bcea:	1c28      	adds	r0, r5, #0
    bcec:	1c31      	adds	r1, r6, #0
    bcee:	f001 feab 	bl	da48 <____muldf3_from_thumb>
    bcf2:	1c02      	adds	r2, r0, #0
    bcf4:	1c0b      	adds	r3, r1, #0
    bcf6:	1c28      	adds	r0, r5, #0
    bcf8:	1c31      	adds	r1, r6, #0
    bcfa:	f001 fea9 	bl	da50 <____adddf3_from_thumb>
    bcfe:	1c05      	adds	r5, r0, #0
    bd00:	1c0e      	adds	r6, r1, #0
    bd02:	e7cf      	b.n	bca4 <__ieee754_sqrt+0x12c>
    bd04:	4b11      	ldr	r3, [pc, #68]	; (bd4c <__ieee754_sqrt+0x1d4>)
    bd06:	402b      	ands	r3, r5
    bd08:	4333      	orrs	r3, r6
    bd0a:	d0cb      	beq.n	bca4 <__ieee754_sqrt+0x12c>
    bd0c:	2d00      	cmp	r5, #0
    bd0e:	d100      	bne.n	bd12 <__ieee754_sqrt+0x19a>
    bd10:	e74a      	b.n	bba8 <__ieee754_sqrt+0x30>
    bd12:	1c2a      	adds	r2, r5, #0
    bd14:	1c33      	adds	r3, r6, #0
    bd16:	1c28      	adds	r0, r5, #0
    bd18:	1c31      	adds	r1, r6, #0
    bd1a:	f001 fe9d 	bl	da58 <____subdf3_from_thumb>
    bd1e:	1c02      	adds	r2, r0, #0
    bd20:	1c0b      	adds	r3, r1, #0
    bd22:	f001 fe85 	bl	da30 <____divdf3_from_thumb>
    bd26:	1c05      	adds	r5, r0, #0
    bd28:	1c0e      	adds	r6, r1, #0
    bd2a:	e7bb      	b.n	bca4 <__ieee754_sqrt+0x12c>
    bd2c:	2201      	movs	r2, #1
    bd2e:	4492      	add	sl, r2
    bd30:	2100      	movs	r1, #0
    bd32:	e7a5      	b.n	bc80 <__ieee754_sqrt+0x108>
    bd34:	2400      	movs	r4, #0
    bd36:	2520      	movs	r5, #32
    bd38:	e74c      	b.n	bbd4 <__ieee754_sqrt+0x5c>
    bd3a:	46c0      	nop			; (mov r8, r8)
    bd3c:	7ff00000 	.word	0x7ff00000
    bd40:	fffffc01 	.word	0xfffffc01
    bd44:	000fffff 	.word	0x000fffff
    bd48:	3fe00000 	.word	0x3fe00000
    bd4c:	7fffffff 	.word	0x7fffffff

0000bd50 <__kernel_cos>:
    bd50:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd52:	4647      	mov	r7, r8
    bd54:	b480      	push	{r7}
    bd56:	b08e      	sub	sp, #56	; 0x38
    bd58:	9204      	str	r2, [sp, #16]
    bd5a:	9305      	str	r3, [sp, #20]
    bd5c:	4a86      	ldr	r2, [pc, #536]	; (bf78 <__kernel_cos+0x228>)
    bd5e:	4b87      	ldr	r3, [pc, #540]	; (bf7c <__kernel_cos+0x22c>)
    bd60:	4002      	ands	r2, r0
    bd62:	2400      	movs	r4, #0
    bd64:	2500      	movs	r5, #0
    bd66:	4690      	mov	r8, r2
    bd68:	9406      	str	r4, [sp, #24]
    bd6a:	9507      	str	r5, [sp, #28]
    bd6c:	1c06      	adds	r6, r0, #0
    bd6e:	1c0f      	adds	r7, r1, #0
    bd70:	4598      	cmp	r8, r3
    bd72:	dd00      	ble.n	bd76 <__kernel_cos+0x26>
    bd74:	e072      	b.n	be5c <__kernel_cos+0x10c>
    bd76:	f001 fe73 	bl	da60 <____fixdfsi_from_thumb>
    bd7a:	2800      	cmp	r0, #0
    bd7c:	d100      	bne.n	bd80 <__kernel_cos+0x30>
    bd7e:	e0e7      	b.n	bf50 <__kernel_cos+0x200>
    bd80:	1c32      	adds	r2, r6, #0
    bd82:	1c3b      	adds	r3, r7, #0
    bd84:	1c30      	adds	r0, r6, #0
    bd86:	1c39      	adds	r1, r7, #0
    bd88:	f001 fe5e 	bl	da48 <____muldf3_from_thumb>
    bd8c:	4a7c      	ldr	r2, [pc, #496]	; (bf80 <__kernel_cos+0x230>)
    bd8e:	4b7d      	ldr	r3, [pc, #500]	; (bf84 <__kernel_cos+0x234>)
    bd90:	1c04      	adds	r4, r0, #0
    bd92:	1c0d      	adds	r5, r1, #0
    bd94:	f001 fe58 	bl	da48 <____muldf3_from_thumb>
    bd98:	4a7b      	ldr	r2, [pc, #492]	; (bf88 <__kernel_cos+0x238>)
    bd9a:	4b7c      	ldr	r3, [pc, #496]	; (bf8c <__kernel_cos+0x23c>)
    bd9c:	f001 fe58 	bl	da50 <____adddf3_from_thumb>
    bda0:	1c02      	adds	r2, r0, #0
    bda2:	1c0b      	adds	r3, r1, #0
    bda4:	1c20      	adds	r0, r4, #0
    bda6:	1c29      	adds	r1, r5, #0
    bda8:	f001 fe4e 	bl	da48 <____muldf3_from_thumb>
    bdac:	4a78      	ldr	r2, [pc, #480]	; (bf90 <__kernel_cos+0x240>)
    bdae:	4b79      	ldr	r3, [pc, #484]	; (bf94 <__kernel_cos+0x244>)
    bdb0:	f001 fe52 	bl	da58 <____subdf3_from_thumb>
    bdb4:	1c02      	adds	r2, r0, #0
    bdb6:	1c0b      	adds	r3, r1, #0
    bdb8:	1c20      	adds	r0, r4, #0
    bdba:	1c29      	adds	r1, r5, #0
    bdbc:	f001 fe44 	bl	da48 <____muldf3_from_thumb>
    bdc0:	4a75      	ldr	r2, [pc, #468]	; (bf98 <__kernel_cos+0x248>)
    bdc2:	4b76      	ldr	r3, [pc, #472]	; (bf9c <__kernel_cos+0x24c>)
    bdc4:	f001 fe44 	bl	da50 <____adddf3_from_thumb>
    bdc8:	1c02      	adds	r2, r0, #0
    bdca:	1c0b      	adds	r3, r1, #0
    bdcc:	1c20      	adds	r0, r4, #0
    bdce:	1c29      	adds	r1, r5, #0
    bdd0:	f001 fe3a 	bl	da48 <____muldf3_from_thumb>
    bdd4:	4a72      	ldr	r2, [pc, #456]	; (bfa0 <__kernel_cos+0x250>)
    bdd6:	4b73      	ldr	r3, [pc, #460]	; (bfa4 <__kernel_cos+0x254>)
    bdd8:	f001 fe3e 	bl	da58 <____subdf3_from_thumb>
    bddc:	1c02      	adds	r2, r0, #0
    bdde:	1c0b      	adds	r3, r1, #0
    bde0:	1c20      	adds	r0, r4, #0
    bde2:	1c29      	adds	r1, r5, #0
    bde4:	f001 fe30 	bl	da48 <____muldf3_from_thumb>
    bde8:	4a6f      	ldr	r2, [pc, #444]	; (bfa8 <__kernel_cos+0x258>)
    bdea:	4b70      	ldr	r3, [pc, #448]	; (bfac <__kernel_cos+0x25c>)
    bdec:	f001 fe30 	bl	da50 <____adddf3_from_thumb>
    bdf0:	1c02      	adds	r2, r0, #0
    bdf2:	1c0b      	adds	r3, r1, #0
    bdf4:	1c20      	adds	r0, r4, #0
    bdf6:	1c29      	adds	r1, r5, #0
    bdf8:	f001 fe26 	bl	da48 <____muldf3_from_thumb>
    bdfc:	9008      	str	r0, [sp, #32]
    bdfe:	9109      	str	r1, [sp, #36]	; 0x24
    be00:	1c20      	adds	r0, r4, #0
    be02:	1c29      	adds	r1, r5, #0
    be04:	4a6a      	ldr	r2, [pc, #424]	; (bfb0 <__kernel_cos+0x260>)
    be06:	4b6b      	ldr	r3, [pc, #428]	; (bfb4 <__kernel_cos+0x264>)
    be08:	f001 fe1e 	bl	da48 <____muldf3_from_thumb>
    be0c:	9a08      	ldr	r2, [sp, #32]
    be0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    be10:	9002      	str	r0, [sp, #8]
    be12:	9103      	str	r1, [sp, #12]
    be14:	1c20      	adds	r0, r4, #0
    be16:	1c29      	adds	r1, r5, #0
    be18:	f001 fe16 	bl	da48 <____muldf3_from_thumb>
    be1c:	9a04      	ldr	r2, [sp, #16]
    be1e:	9b05      	ldr	r3, [sp, #20]
    be20:	1c04      	adds	r4, r0, #0
    be22:	1c0d      	adds	r5, r1, #0
    be24:	1c30      	adds	r0, r6, #0
    be26:	1c39      	adds	r1, r7, #0
    be28:	f001 fe0e 	bl	da48 <____muldf3_from_thumb>
    be2c:	1c02      	adds	r2, r0, #0
    be2e:	1c0b      	adds	r3, r1, #0
    be30:	1c20      	adds	r0, r4, #0
    be32:	1c29      	adds	r1, r5, #0
    be34:	f001 fe10 	bl	da58 <____subdf3_from_thumb>
    be38:	1c02      	adds	r2, r0, #0
    be3a:	1c0b      	adds	r3, r1, #0
    be3c:	9802      	ldr	r0, [sp, #8]
    be3e:	9903      	ldr	r1, [sp, #12]
    be40:	f001 fe0a 	bl	da58 <____subdf3_from_thumb>
    be44:	1c02      	adds	r2, r0, #0
    be46:	1c0b      	adds	r3, r1, #0
    be48:	485b      	ldr	r0, [pc, #364]	; (bfb8 <__kernel_cos+0x268>)
    be4a:	495c      	ldr	r1, [pc, #368]	; (bfbc <__kernel_cos+0x26c>)
    be4c:	f001 fe04 	bl	da58 <____subdf3_from_thumb>
    be50:	b00e      	add	sp, #56	; 0x38
    be52:	bc04      	pop	{r2}
    be54:	4690      	mov	r8, r2
    be56:	bcf0      	pop	{r4, r5, r6, r7}
    be58:	bc04      	pop	{r2}
    be5a:	4710      	bx	r2
    be5c:	1c32      	adds	r2, r6, #0
    be5e:	1c3b      	adds	r3, r7, #0
    be60:	f001 fdf2 	bl	da48 <____muldf3_from_thumb>
    be64:	4a46      	ldr	r2, [pc, #280]	; (bf80 <__kernel_cos+0x230>)
    be66:	4b47      	ldr	r3, [pc, #284]	; (bf84 <__kernel_cos+0x234>)
    be68:	1c04      	adds	r4, r0, #0
    be6a:	1c0d      	adds	r5, r1, #0
    be6c:	f001 fdec 	bl	da48 <____muldf3_from_thumb>
    be70:	4a45      	ldr	r2, [pc, #276]	; (bf88 <__kernel_cos+0x238>)
    be72:	4b46      	ldr	r3, [pc, #280]	; (bf8c <__kernel_cos+0x23c>)
    be74:	f001 fdec 	bl	da50 <____adddf3_from_thumb>
    be78:	1c02      	adds	r2, r0, #0
    be7a:	1c0b      	adds	r3, r1, #0
    be7c:	1c20      	adds	r0, r4, #0
    be7e:	1c29      	adds	r1, r5, #0
    be80:	f001 fde2 	bl	da48 <____muldf3_from_thumb>
    be84:	4a42      	ldr	r2, [pc, #264]	; (bf90 <__kernel_cos+0x240>)
    be86:	4b43      	ldr	r3, [pc, #268]	; (bf94 <__kernel_cos+0x244>)
    be88:	f001 fde6 	bl	da58 <____subdf3_from_thumb>
    be8c:	1c02      	adds	r2, r0, #0
    be8e:	1c0b      	adds	r3, r1, #0
    be90:	1c20      	adds	r0, r4, #0
    be92:	1c29      	adds	r1, r5, #0
    be94:	f001 fdd8 	bl	da48 <____muldf3_from_thumb>
    be98:	4a3f      	ldr	r2, [pc, #252]	; (bf98 <__kernel_cos+0x248>)
    be9a:	4b40      	ldr	r3, [pc, #256]	; (bf9c <__kernel_cos+0x24c>)
    be9c:	f001 fdd8 	bl	da50 <____adddf3_from_thumb>
    bea0:	1c02      	adds	r2, r0, #0
    bea2:	1c0b      	adds	r3, r1, #0
    bea4:	1c20      	adds	r0, r4, #0
    bea6:	1c29      	adds	r1, r5, #0
    bea8:	f001 fdce 	bl	da48 <____muldf3_from_thumb>
    beac:	4a3c      	ldr	r2, [pc, #240]	; (bfa0 <__kernel_cos+0x250>)
    beae:	4b3d      	ldr	r3, [pc, #244]	; (bfa4 <__kernel_cos+0x254>)
    beb0:	f001 fdd2 	bl	da58 <____subdf3_from_thumb>
    beb4:	1c02      	adds	r2, r0, #0
    beb6:	1c0b      	adds	r3, r1, #0
    beb8:	1c20      	adds	r0, r4, #0
    beba:	1c29      	adds	r1, r5, #0
    bebc:	f001 fdc4 	bl	da48 <____muldf3_from_thumb>
    bec0:	4a39      	ldr	r2, [pc, #228]	; (bfa8 <__kernel_cos+0x258>)
    bec2:	4b3a      	ldr	r3, [pc, #232]	; (bfac <__kernel_cos+0x25c>)
    bec4:	f001 fdc4 	bl	da50 <____adddf3_from_thumb>
    bec8:	1c0b      	adds	r3, r1, #0
    beca:	1c02      	adds	r2, r0, #0
    becc:	1c29      	adds	r1, r5, #0
    bece:	1c20      	adds	r0, r4, #0
    bed0:	f001 fdba 	bl	da48 <____muldf3_from_thumb>
    bed4:	4b3a      	ldr	r3, [pc, #232]	; (bfc0 <__kernel_cos+0x270>)
    bed6:	9008      	str	r0, [sp, #32]
    bed8:	9109      	str	r1, [sp, #36]	; 0x24
    beda:	4598      	cmp	r8, r3
    bedc:	dc00      	bgt.n	bee0 <__kernel_cos+0x190>
    bede:	e78f      	b.n	be00 <__kernel_cos+0xb0>
    bee0:	4b38      	ldr	r3, [pc, #224]	; (bfc4 <__kernel_cos+0x274>)
    bee2:	4598      	cmp	r8, r3
    bee4:	dd37      	ble.n	bf56 <__kernel_cos+0x206>
    bee6:	4a38      	ldr	r2, [pc, #224]	; (bfc8 <__kernel_cos+0x278>)
    bee8:	4b38      	ldr	r3, [pc, #224]	; (bfcc <__kernel_cos+0x27c>)
    beea:	920a      	str	r2, [sp, #40]	; 0x28
    beec:	930b      	str	r3, [sp, #44]	; 0x2c
    beee:	4a38      	ldr	r2, [pc, #224]	; (bfd0 <__kernel_cos+0x280>)
    bef0:	4b38      	ldr	r3, [pc, #224]	; (bfd4 <__kernel_cos+0x284>)
    bef2:	920c      	str	r2, [sp, #48]	; 0x30
    bef4:	930d      	str	r3, [sp, #52]	; 0x34
    bef6:	1c20      	adds	r0, r4, #0
    bef8:	1c29      	adds	r1, r5, #0
    befa:	4a2d      	ldr	r2, [pc, #180]	; (bfb0 <__kernel_cos+0x260>)
    befc:	4b2d      	ldr	r3, [pc, #180]	; (bfb4 <__kernel_cos+0x264>)
    befe:	f001 fda3 	bl	da48 <____muldf3_from_thumb>
    bf02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bf04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bf06:	f001 fda7 	bl	da58 <____subdf3_from_thumb>
    bf0a:	9a08      	ldr	r2, [sp, #32]
    bf0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bf0e:	9000      	str	r0, [sp, #0]
    bf10:	9101      	str	r1, [sp, #4]
    bf12:	1c20      	adds	r0, r4, #0
    bf14:	1c29      	adds	r1, r5, #0
    bf16:	f001 fd97 	bl	da48 <____muldf3_from_thumb>
    bf1a:	9a04      	ldr	r2, [sp, #16]
    bf1c:	9b05      	ldr	r3, [sp, #20]
    bf1e:	1c04      	adds	r4, r0, #0
    bf20:	1c0d      	adds	r5, r1, #0
    bf22:	1c30      	adds	r0, r6, #0
    bf24:	1c39      	adds	r1, r7, #0
    bf26:	f001 fd8f 	bl	da48 <____muldf3_from_thumb>
    bf2a:	1c02      	adds	r2, r0, #0
    bf2c:	1c0b      	adds	r3, r1, #0
    bf2e:	1c20      	adds	r0, r4, #0
    bf30:	1c29      	adds	r1, r5, #0
    bf32:	f001 fd91 	bl	da58 <____subdf3_from_thumb>
    bf36:	1c02      	adds	r2, r0, #0
    bf38:	1c0b      	adds	r3, r1, #0
    bf3a:	9800      	ldr	r0, [sp, #0]
    bf3c:	9901      	ldr	r1, [sp, #4]
    bf3e:	f001 fd8b 	bl	da58 <____subdf3_from_thumb>
    bf42:	1c02      	adds	r2, r0, #0
    bf44:	1c0b      	adds	r3, r1, #0
    bf46:	980c      	ldr	r0, [sp, #48]	; 0x30
    bf48:	990d      	ldr	r1, [sp, #52]	; 0x34
    bf4a:	f001 fd85 	bl	da58 <____subdf3_from_thumb>
    bf4e:	e77f      	b.n	be50 <__kernel_cos+0x100>
    bf50:	4819      	ldr	r0, [pc, #100]	; (bfb8 <__kernel_cos+0x268>)
    bf52:	491a      	ldr	r1, [pc, #104]	; (bfbc <__kernel_cos+0x26c>)
    bf54:	e77c      	b.n	be50 <__kernel_cos+0x100>
    bf56:	4b20      	ldr	r3, [pc, #128]	; (bfd8 <__kernel_cos+0x288>)
    bf58:	2200      	movs	r2, #0
    bf5a:	4443      	add	r3, r8
    bf5c:	9306      	str	r3, [sp, #24]
    bf5e:	9207      	str	r2, [sp, #28]
    bf60:	9a06      	ldr	r2, [sp, #24]
    bf62:	9b07      	ldr	r3, [sp, #28]
    bf64:	4814      	ldr	r0, [pc, #80]	; (bfb8 <__kernel_cos+0x268>)
    bf66:	4915      	ldr	r1, [pc, #84]	; (bfbc <__kernel_cos+0x26c>)
    bf68:	920a      	str	r2, [sp, #40]	; 0x28
    bf6a:	930b      	str	r3, [sp, #44]	; 0x2c
    bf6c:	f001 fd74 	bl	da58 <____subdf3_from_thumb>
    bf70:	900c      	str	r0, [sp, #48]	; 0x30
    bf72:	910d      	str	r1, [sp, #52]	; 0x34
    bf74:	e7bf      	b.n	bef6 <__kernel_cos+0x1a6>
    bf76:	46c0      	nop			; (mov r8, r8)
    bf78:	7fffffff 	.word	0x7fffffff
    bf7c:	3e3fffff 	.word	0x3e3fffff
    bf80:	bda8fae9 	.word	0xbda8fae9
    bf84:	be8838d4 	.word	0xbe8838d4
    bf88:	3e21ee9e 	.word	0x3e21ee9e
    bf8c:	bdb4b1c4 	.word	0xbdb4b1c4
    bf90:	3e927e4f 	.word	0x3e927e4f
    bf94:	809c52ad 	.word	0x809c52ad
    bf98:	3efa01a0 	.word	0x3efa01a0
    bf9c:	19cb1590 	.word	0x19cb1590
    bfa0:	3f56c16c 	.word	0x3f56c16c
    bfa4:	16c15177 	.word	0x16c15177
    bfa8:	3fa55555 	.word	0x3fa55555
    bfac:	5555554c 	.word	0x5555554c
    bfb0:	3fe00000 	.word	0x3fe00000
    bfb4:	00000000 	.word	0x00000000
    bfb8:	3ff00000 	.word	0x3ff00000
    bfbc:	00000000 	.word	0x00000000
    bfc0:	3fd33332 	.word	0x3fd33332
    bfc4:	3fe90000 	.word	0x3fe90000
    bfc8:	3fd20000 	.word	0x3fd20000
    bfcc:	00000000 	.word	0x00000000
    bfd0:	3fe70000 	.word	0x3fe70000
    bfd4:	00000000 	.word	0x00000000
    bfd8:	ffe00000 	.word	0xffe00000

0000bfdc <__kernel_rem_pio2>:
    bfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfde:	465f      	mov	r7, fp
    bfe0:	4656      	mov	r6, sl
    bfe2:	464d      	mov	r5, r9
    bfe4:	4644      	mov	r4, r8
    bfe6:	b4f0      	push	{r4, r5, r6, r7}
    bfe8:	4cd7      	ldr	r4, [pc, #860]	; (c348 <__kernel_rem_pio2+0x36c>)
    bfea:	44a5      	add	sp, r4
    bfec:	9303      	str	r3, [sp, #12]
    bfee:	9005      	str	r0, [sp, #20]
    bff0:	98a6      	ldr	r0, [sp, #664]	; 0x298
    bff2:	9104      	str	r1, [sp, #16]
    bff4:	4bd5      	ldr	r3, [pc, #852]	; (c34c <__kernel_rem_pio2+0x370>)
    bff6:	9903      	ldr	r1, [sp, #12]
    bff8:	1c14      	adds	r4, r2, #0
    bffa:	0082      	lsls	r2, r0, #2
    bffc:	58d2      	ldr	r2, [r2, r3]
    bffe:	3901      	subs	r1, #1
    c000:	9106      	str	r1, [sp, #24]
    c002:	1ee0      	subs	r0, r4, #3
    c004:	2118      	movs	r1, #24
    c006:	9207      	str	r2, [sp, #28]
    c008:	f7fb fb20 	bl	764c <__aeabi_idiv>
    c00c:	9010      	str	r0, [sp, #64]	; 0x40
    c00e:	2800      	cmp	r0, #0
    c010:	da00      	bge.n	c014 <__kernel_rem_pio2+0x38>
    c012:	e392      	b.n	c73a <__kernel_rem_pio2+0x75e>
    c014:	9d10      	ldr	r5, [sp, #64]	; 0x40
    c016:	06eb      	lsls	r3, r5, #27
    c018:	1b5b      	subs	r3, r3, r5
    c01a:	009b      	lsls	r3, r3, #2
    c01c:	195b      	adds	r3, r3, r5
    c01e:	00db      	lsls	r3, r3, #3
    c020:	18e3      	adds	r3, r4, r3
    c022:	9e07      	ldr	r6, [sp, #28]
    c024:	9806      	ldr	r0, [sp, #24]
    c026:	3b18      	subs	r3, #24
    c028:	9309      	str	r3, [sp, #36]	; 0x24
    c02a:	1836      	adds	r6, r6, r0
    c02c:	46b0      	mov	r8, r6
    c02e:	d41a      	bmi.n	c066 <__kernel_rem_pio2+0x8a>
    c030:	1a2d      	subs	r5, r5, r0
    c032:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    c034:	00ab      	lsls	r3, r5, #2
    c036:	18cc      	adds	r4, r1, r3
    c038:	2700      	movs	r7, #0
    c03a:	ae61      	add	r6, sp, #388	; 0x184
    c03c:	e00a      	b.n	c054 <__kernel_rem_pio2+0x78>
    c03e:	6820      	ldr	r0, [r4, #0]
    c040:	f001 fcee 	bl	da20 <____floatsidf_from_thumb>
    c044:	3404      	adds	r4, #4
    c046:	6030      	str	r0, [r6, #0]
    c048:	6071      	str	r1, [r6, #4]
    c04a:	4547      	cmp	r7, r8
    c04c:	d00b      	beq.n	c066 <__kernel_rem_pio2+0x8a>
    c04e:	3501      	adds	r5, #1
    c050:	3701      	adds	r7, #1
    c052:	3608      	adds	r6, #8
    c054:	2d00      	cmp	r5, #0
    c056:	daf2      	bge.n	c03e <__kernel_rem_pio2+0x62>
    c058:	48bd      	ldr	r0, [pc, #756]	; (c350 <__kernel_rem_pio2+0x374>)
    c05a:	49be      	ldr	r1, [pc, #760]	; (c354 <__kernel_rem_pio2+0x378>)
    c05c:	3404      	adds	r4, #4
    c05e:	6030      	str	r0, [r6, #0]
    c060:	6071      	str	r1, [r6, #4]
    c062:	4547      	cmp	r7, r8
    c064:	d1f3      	bne.n	c04e <__kernel_rem_pio2+0x72>
    c066:	9a07      	ldr	r2, [sp, #28]
    c068:	2a00      	cmp	r2, #0
    c06a:	db32      	blt.n	c0d2 <__kernel_rem_pio2+0xf6>
    c06c:	9d03      	ldr	r5, [sp, #12]
    c06e:	9b06      	ldr	r3, [sp, #24]
    c070:	ac11      	add	r4, sp, #68	; 0x44
    c072:	1952      	adds	r2, r2, r5
    c074:	469a      	mov	sl, r3
    c076:	46a3      	mov	fp, r4
    c078:	4691      	mov	r9, r2
    c07a:	9906      	ldr	r1, [sp, #24]
    c07c:	2900      	cmp	r1, #0
    c07e:	da00      	bge.n	c082 <__kernel_rem_pio2+0xa6>
    c080:	e1d4      	b.n	c42c <__kernel_rem_pio2+0x450>
    c082:	9a05      	ldr	r2, [sp, #20]
    c084:	4653      	mov	r3, sl
    c086:	4690      	mov	r8, r2
    c088:	4cb1      	ldr	r4, [pc, #708]	; (c350 <__kernel_rem_pio2+0x374>)
    c08a:	4db2      	ldr	r5, [pc, #712]	; (c354 <__kernel_rem_pio2+0x378>)
    c08c:	00da      	lsls	r2, r3, #3
    c08e:	ab61      	add	r3, sp, #388	; 0x184
    c090:	189f      	adds	r7, r3, r2
    c092:	2600      	movs	r6, #0
    c094:	4642      	mov	r2, r8
    c096:	3208      	adds	r2, #8
    c098:	4690      	mov	r8, r2
    c09a:	3a08      	subs	r2, #8
    c09c:	ca03      	ldmia	r2!, {r0, r1}
    c09e:	683a      	ldr	r2, [r7, #0]
    c0a0:	687b      	ldr	r3, [r7, #4]
    c0a2:	f001 fcd1 	bl	da48 <____muldf3_from_thumb>
    c0a6:	1c0b      	adds	r3, r1, #0
    c0a8:	1c02      	adds	r2, r0, #0
    c0aa:	1c29      	adds	r1, r5, #0
    c0ac:	1c20      	adds	r0, r4, #0
    c0ae:	f001 fccf 	bl	da50 <____adddf3_from_thumb>
    c0b2:	9b03      	ldr	r3, [sp, #12]
    c0b4:	3601      	adds	r6, #1
    c0b6:	1c04      	adds	r4, r0, #0
    c0b8:	1c0d      	adds	r5, r1, #0
    c0ba:	3f08      	subs	r7, #8
    c0bc:	42b3      	cmp	r3, r6
    c0be:	d1e9      	bne.n	c094 <__kernel_rem_pio2+0xb8>
    c0c0:	465e      	mov	r6, fp
    c0c2:	3608      	adds	r6, #8
    c0c4:	2001      	movs	r0, #1
    c0c6:	46b3      	mov	fp, r6
    c0c8:	4482      	add	sl, r0
    c0ca:	3e08      	subs	r6, #8
    c0cc:	c630      	stmia	r6!, {r4, r5}
    c0ce:	45ca      	cmp	sl, r9
    c0d0:	d1d3      	bne.n	c07a <__kernel_rem_pio2+0x9e>
    c0d2:	9c07      	ldr	r4, [sp, #28]
    c0d4:	00a5      	lsls	r5, r4, #2
    c0d6:	9502      	str	r5, [sp, #8]
    c0d8:	46a3      	mov	fp, r4
    c0da:	465e      	mov	r6, fp
    c0dc:	00f2      	lsls	r2, r6, #3
    c0de:	a811      	add	r0, sp, #68	; 0x44
    c0e0:	1813      	adds	r3, r2, r0
    c0e2:	4659      	mov	r1, fp
    c0e4:	681e      	ldr	r6, [r3, #0]
    c0e6:	685f      	ldr	r7, [r3, #4]
    c0e8:	2900      	cmp	r1, #0
    c0ea:	dd34      	ble.n	c156 <__kernel_rem_pio2+0x17a>
    c0ec:	1c13      	adds	r3, r2, #0
    c0ee:	2489      	movs	r4, #137	; 0x89
    c0f0:	3b08      	subs	r3, #8
    c0f2:	00a4      	lsls	r4, r4, #2
    c0f4:	18c2      	adds	r2, r0, r3
    c0f6:	446c      	add	r4, sp
    c0f8:	2300      	movs	r3, #0
    c0fa:	4690      	mov	r8, r2
    c0fc:	469a      	mov	sl, r3
    c0fe:	46a1      	mov	r9, r4
    c100:	4a95      	ldr	r2, [pc, #596]	; (c358 <__kernel_rem_pio2+0x37c>)
    c102:	4b96      	ldr	r3, [pc, #600]	; (c35c <__kernel_rem_pio2+0x380>)
    c104:	1c30      	adds	r0, r6, #0
    c106:	1c39      	adds	r1, r7, #0
    c108:	f001 fc9e 	bl	da48 <____muldf3_from_thumb>
    c10c:	f001 fca8 	bl	da60 <____fixdfsi_from_thumb>
    c110:	f001 fc86 	bl	da20 <____floatsidf_from_thumb>
    c114:	4a92      	ldr	r2, [pc, #584]	; (c360 <__kernel_rem_pio2+0x384>)
    c116:	4b93      	ldr	r3, [pc, #588]	; (c364 <__kernel_rem_pio2+0x388>)
    c118:	1c04      	adds	r4, r0, #0
    c11a:	1c0d      	adds	r5, r1, #0
    c11c:	f001 fc94 	bl	da48 <____muldf3_from_thumb>
    c120:	1c32      	adds	r2, r6, #0
    c122:	1c3b      	adds	r3, r7, #0
    c124:	f001 fc94 	bl	da50 <____adddf3_from_thumb>
    c128:	f001 fc9a 	bl	da60 <____fixdfsi_from_thumb>
    c12c:	464e      	mov	r6, r9
    c12e:	3604      	adds	r6, #4
    c130:	46b1      	mov	r9, r6
    c132:	3e04      	subs	r6, #4
    c134:	c601      	stmia	r6!, {r0}
    c136:	1c20      	adds	r0, r4, #0
    c138:	4644      	mov	r4, r8
    c13a:	1c29      	adds	r1, r5, #0
    c13c:	6822      	ldr	r2, [r4, #0]
    c13e:	6863      	ldr	r3, [r4, #4]
    c140:	f001 fc86 	bl	da50 <____adddf3_from_thumb>
    c144:	2501      	movs	r5, #1
    c146:	1c06      	adds	r6, r0, #0
    c148:	2008      	movs	r0, #8
    c14a:	4240      	negs	r0, r0
    c14c:	44aa      	add	sl, r5
    c14e:	1c0f      	adds	r7, r1, #0
    c150:	4480      	add	r8, r0
    c152:	45d3      	cmp	fp, sl
    c154:	d1d4      	bne.n	c100 <__kernel_rem_pio2+0x124>
    c156:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c158:	1c30      	adds	r0, r6, #0
    c15a:	1c39      	adds	r1, r7, #0
    c15c:	f000 fede 	bl	cf1c <scalbn>
    c160:	4a81      	ldr	r2, [pc, #516]	; (c368 <__kernel_rem_pio2+0x38c>)
    c162:	4b82      	ldr	r3, [pc, #520]	; (c36c <__kernel_rem_pio2+0x390>)
    c164:	1c04      	adds	r4, r0, #0
    c166:	1c0d      	adds	r5, r1, #0
    c168:	f001 fc6e 	bl	da48 <____muldf3_from_thumb>
    c16c:	f000 fe10 	bl	cd90 <floor>
    c170:	4a7f      	ldr	r2, [pc, #508]	; (c370 <__kernel_rem_pio2+0x394>)
    c172:	4b80      	ldr	r3, [pc, #512]	; (c374 <__kernel_rem_pio2+0x398>)
    c174:	f001 fc68 	bl	da48 <____muldf3_from_thumb>
    c178:	1c02      	adds	r2, r0, #0
    c17a:	1c0b      	adds	r3, r1, #0
    c17c:	1c20      	adds	r0, r4, #0
    c17e:	1c29      	adds	r1, r5, #0
    c180:	f001 fc66 	bl	da50 <____adddf3_from_thumb>
    c184:	1c0d      	adds	r5, r1, #0
    c186:	1c04      	adds	r4, r0, #0
    c188:	f001 fc6a 	bl	da60 <____fixdfsi_from_thumb>
    c18c:	9008      	str	r0, [sp, #32]
    c18e:	f001 fc47 	bl	da20 <____floatsidf_from_thumb>
    c192:	1c02      	adds	r2, r0, #0
    c194:	1c0b      	adds	r3, r1, #0
    c196:	1c20      	adds	r0, r4, #0
    c198:	1c29      	adds	r1, r5, #0
    c19a:	f001 fc5d 	bl	da58 <____subdf3_from_thumb>
    c19e:	1c0d      	adds	r5, r1, #0
    c1a0:	9909      	ldr	r1, [sp, #36]	; 0x24
    c1a2:	1c04      	adds	r4, r0, #0
    c1a4:	2900      	cmp	r1, #0
    c1a6:	dc00      	bgt.n	c1aa <__kernel_rem_pio2+0x1ce>
    c1a8:	e106      	b.n	c3b8 <__kernel_rem_pio2+0x3dc>
    c1aa:	4658      	mov	r0, fp
    c1ac:	3801      	subs	r0, #1
    c1ae:	2389      	movs	r3, #137	; 0x89
    c1b0:	0080      	lsls	r0, r0, #2
    c1b2:	009b      	lsls	r3, r3, #2
    c1b4:	181b      	adds	r3, r3, r0
    c1b6:	466a      	mov	r2, sp
    c1b8:	5899      	ldr	r1, [r3, r2]
    c1ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c1bc:	2218      	movs	r2, #24
    c1be:	1b92      	subs	r2, r2, r6
    c1c0:	1c0b      	adds	r3, r1, #0
    c1c2:	9e08      	ldr	r6, [sp, #32]
    c1c4:	4113      	asrs	r3, r2
    c1c6:	18f6      	adds	r6, r6, r3
    c1c8:	4093      	lsls	r3, r2
    c1ca:	1ac9      	subs	r1, r1, r3
    c1cc:	2389      	movs	r3, #137	; 0x89
    c1ce:	009b      	lsls	r3, r3, #2
    c1d0:	181b      	adds	r3, r3, r0
    c1d2:	9608      	str	r6, [sp, #32]
    c1d4:	466a      	mov	r2, sp
    c1d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c1d8:	5099      	str	r1, [r3, r2]
    c1da:	2317      	movs	r3, #23
    c1dc:	1b9b      	subs	r3, r3, r6
    c1de:	4119      	asrs	r1, r3
    c1e0:	910a      	str	r1, [sp, #40]	; 0x28
    c1e2:	980a      	ldr	r0, [sp, #40]	; 0x28
    c1e4:	2800      	cmp	r0, #0
    c1e6:	dd2c      	ble.n	c242 <__kernel_rem_pio2+0x266>
    c1e8:	9908      	ldr	r1, [sp, #32]
    c1ea:	465a      	mov	r2, fp
    c1ec:	3101      	adds	r1, #1
    c1ee:	9108      	str	r1, [sp, #32]
    c1f0:	2a00      	cmp	r2, #0
    c1f2:	dc00      	bgt.n	c1f6 <__kernel_rem_pio2+0x21a>
    c1f4:	e1f8      	b.n	c5e8 <__kernel_rem_pio2+0x60c>
    c1f6:	2080      	movs	r0, #128	; 0x80
    c1f8:	4e5f      	ldr	r6, [pc, #380]	; (c378 <__kernel_rem_pio2+0x39c>)
    c1fa:	2700      	movs	r7, #0
    c1fc:	2100      	movs	r1, #0
    c1fe:	aa89      	add	r2, sp, #548	; 0x224
    c200:	0440      	lsls	r0, r0, #17
    c202:	e008      	b.n	c216 <__kernel_rem_pio2+0x23a>
    c204:	2b00      	cmp	r3, #0
    c206:	d002      	beq.n	c20e <__kernel_rem_pio2+0x232>
    c208:	1ac3      	subs	r3, r0, r3
    c20a:	6013      	str	r3, [r2, #0]
    c20c:	2701      	movs	r7, #1
    c20e:	3101      	adds	r1, #1
    c210:	3204      	adds	r2, #4
    c212:	458b      	cmp	fp, r1
    c214:	d008      	beq.n	c228 <__kernel_rem_pio2+0x24c>
    c216:	6813      	ldr	r3, [r2, #0]
    c218:	2f00      	cmp	r7, #0
    c21a:	d0f3      	beq.n	c204 <__kernel_rem_pio2+0x228>
    c21c:	1af3      	subs	r3, r6, r3
    c21e:	3101      	adds	r1, #1
    c220:	6013      	str	r3, [r2, #0]
    c222:	3204      	adds	r2, #4
    c224:	458b      	cmp	fp, r1
    c226:	d1f6      	bne.n	c216 <__kernel_rem_pio2+0x23a>
    c228:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c22a:	2b00      	cmp	r3, #0
    c22c:	dd05      	ble.n	c23a <__kernel_rem_pio2+0x25e>
    c22e:	2b01      	cmp	r3, #1
    c230:	d100      	bne.n	c234 <__kernel_rem_pio2+0x258>
    c232:	e0cd      	b.n	c3d0 <__kernel_rem_pio2+0x3f4>
    c234:	2b02      	cmp	r3, #2
    c236:	d100      	bne.n	c23a <__kernel_rem_pio2+0x25e>
    c238:	e0d6      	b.n	c3e8 <__kernel_rem_pio2+0x40c>
    c23a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c23c:	2a02      	cmp	r2, #2
    c23e:	d100      	bne.n	c242 <__kernel_rem_pio2+0x266>
    c240:	e0a1      	b.n	c386 <__kernel_rem_pio2+0x3aa>
    c242:	1c20      	adds	r0, r4, #0
    c244:	1c29      	adds	r1, r5, #0
    c246:	4a42      	ldr	r2, [pc, #264]	; (c350 <__kernel_rem_pio2+0x374>)
    c248:	4b42      	ldr	r3, [pc, #264]	; (c354 <__kernel_rem_pio2+0x378>)
    c24a:	f001 fbf5 	bl	da38 <____eqdf2_from_thumb>
    c24e:	2800      	cmp	r0, #0
    c250:	d000      	beq.n	c254 <__kernel_rem_pio2+0x278>
    c252:	e0ee      	b.n	c432 <__kernel_rem_pio2+0x456>
    c254:	465c      	mov	r4, fp
    c256:	9b07      	ldr	r3, [sp, #28]
    c258:	3c01      	subs	r4, #1
    c25a:	42a3      	cmp	r3, r4
    c25c:	dc0d      	bgt.n	c27a <__kernel_rem_pio2+0x29e>
    c25e:	00a5      	lsls	r5, r4, #2
    c260:	ae89      	add	r6, sp, #548	; 0x224
    c262:	1971      	adds	r1, r6, r5
    c264:	1c22      	adds	r2, r4, #0
    c266:	680b      	ldr	r3, [r1, #0]
    c268:	4318      	orrs	r0, r3
    c26a:	9b07      	ldr	r3, [sp, #28]
    c26c:	3a01      	subs	r2, #1
    c26e:	3904      	subs	r1, #4
    c270:	4293      	cmp	r3, r2
    c272:	ddf8      	ble.n	c266 <__kernel_rem_pio2+0x28a>
    c274:	2800      	cmp	r0, #0
    c276:	d000      	beq.n	c27a <__kernel_rem_pio2+0x29e>
    c278:	e0e7      	b.n	c44a <__kernel_rem_pio2+0x46e>
    c27a:	9c02      	ldr	r4, [sp, #8]
    c27c:	ad89      	add	r5, sp, #548	; 0x224
    c27e:	1963      	adds	r3, r4, r5
    c280:	3b04      	subs	r3, #4
    c282:	681b      	ldr	r3, [r3, #0]
    c284:	2b00      	cmp	r3, #0
    c286:	d000      	beq.n	c28a <__kernel_rem_pio2+0x2ae>
    c288:	e0c6      	b.n	c418 <__kernel_rem_pio2+0x43c>
    c28a:	9b02      	ldr	r3, [sp, #8]
    c28c:	ae89      	add	r6, sp, #548	; 0x224
    c28e:	3b08      	subs	r3, #8
    c290:	18f2      	adds	r2, r6, r3
    c292:	2101      	movs	r1, #1
    c294:	6813      	ldr	r3, [r2, #0]
    c296:	3101      	adds	r1, #1
    c298:	3a04      	subs	r2, #4
    c29a:	2b00      	cmp	r3, #0
    c29c:	d0fa      	beq.n	c294 <__kernel_rem_pio2+0x2b8>
    c29e:	2001      	movs	r0, #1
    c2a0:	4458      	add	r0, fp
    c2a2:	465a      	mov	r2, fp
    c2a4:	4680      	mov	r8, r0
    c2a6:	1857      	adds	r7, r2, r1
    c2a8:	45b8      	cmp	r8, r7
    c2aa:	dd01      	ble.n	c2b0 <__kernel_rem_pio2+0x2d4>
    c2ac:	46bb      	mov	fp, r7
    c2ae:	e714      	b.n	c0da <__kernel_rem_pio2+0xfe>
    c2b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c2b2:	9ca7      	ldr	r4, [sp, #668]	; 0x29c
    c2b4:	445b      	add	r3, fp
    c2b6:	009b      	lsls	r3, r3, #2
    c2b8:	9a03      	ldr	r2, [sp, #12]
    c2ba:	18e3      	adds	r3, r4, r3
    c2bc:	445a      	add	r2, fp
    c2be:	3304      	adds	r3, #4
    c2c0:	930b      	str	r3, [sp, #44]	; 0x2c
    c2c2:	ad61      	add	r5, sp, #388	; 0x184
    c2c4:	00d3      	lsls	r3, r2, #3
    c2c6:	18ed      	adds	r5, r5, r3
    c2c8:	ae11      	add	r6, sp, #68	; 0x44
    c2ca:	00c3      	lsls	r3, r0, #3
    c2cc:	18f6      	adds	r6, r6, r3
    c2ce:	46a9      	mov	r9, r5
    c2d0:	46b3      	mov	fp, r6
    c2d2:	4692      	mov	sl, r2
    c2d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c2d6:	6808      	ldr	r0, [r1, #0]
    c2d8:	f001 fba2 	bl	da20 <____floatsidf_from_thumb>
    c2dc:	9b06      	ldr	r3, [sp, #24]
    c2de:	464a      	mov	r2, r9
    c2e0:	6010      	str	r0, [r2, #0]
    c2e2:	6051      	str	r1, [r2, #4]
    c2e4:	2b00      	cmp	r3, #0
    c2e6:	db49      	blt.n	c37c <__kernel_rem_pio2+0x3a0>
    c2e8:	4819      	ldr	r0, [pc, #100]	; (c350 <__kernel_rem_pio2+0x374>)
    c2ea:	491a      	ldr	r1, [pc, #104]	; (c354 <__kernel_rem_pio2+0x378>)
    c2ec:	4655      	mov	r5, sl
    c2ee:	900c      	str	r0, [sp, #48]	; 0x30
    c2f0:	910d      	str	r1, [sp, #52]	; 0x34
    c2f2:	ae61      	add	r6, sp, #388	; 0x184
    c2f4:	00eb      	lsls	r3, r5, #3
    c2f6:	9c05      	ldr	r4, [sp, #20]
    c2f8:	18f5      	adds	r5, r6, r3
    c2fa:	2600      	movs	r6, #0
    c2fc:	682a      	ldr	r2, [r5, #0]
    c2fe:	686b      	ldr	r3, [r5, #4]
    c300:	cc03      	ldmia	r4!, {r0, r1}
    c302:	f001 fba1 	bl	da48 <____muldf3_from_thumb>
    c306:	1c02      	adds	r2, r0, #0
    c308:	1c0b      	adds	r3, r1, #0
    c30a:	980c      	ldr	r0, [sp, #48]	; 0x30
    c30c:	990d      	ldr	r1, [sp, #52]	; 0x34
    c30e:	f001 fb9f 	bl	da50 <____adddf3_from_thumb>
    c312:	900c      	str	r0, [sp, #48]	; 0x30
    c314:	910d      	str	r1, [sp, #52]	; 0x34
    c316:	9903      	ldr	r1, [sp, #12]
    c318:	3601      	adds	r6, #1
    c31a:	3d08      	subs	r5, #8
    c31c:	42b1      	cmp	r1, r6
    c31e:	d1ed      	bne.n	c2fc <__kernel_rem_pio2+0x320>
    c320:	465c      	mov	r4, fp
    c322:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c324:	3408      	adds	r4, #8
    c326:	2501      	movs	r5, #1
    c328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c32a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c32c:	46a3      	mov	fp, r4
    c32e:	3604      	adds	r6, #4
    c330:	3c08      	subs	r4, #8
    c332:	2008      	movs	r0, #8
    c334:	44a8      	add	r8, r5
    c336:	c40c      	stmia	r4!, {r2, r3}
    c338:	960b      	str	r6, [sp, #44]	; 0x2c
    c33a:	4481      	add	r9, r0
    c33c:	44aa      	add	sl, r5
    c33e:	45b8      	cmp	r8, r7
    c340:	ddc8      	ble.n	c2d4 <__kernel_rem_pio2+0x2f8>
    c342:	46bb      	mov	fp, r7
    c344:	e6c9      	b.n	c0da <__kernel_rem_pio2+0xfe>
    c346:	46c0      	nop			; (mov r8, r8)
    c348:	fffffd8c 	.word	0xfffffd8c
    c34c:	0000dc8c 	.word	0x0000dc8c
	...
    c358:	3e700000 	.word	0x3e700000
    c35c:	00000000 	.word	0x00000000
    c360:	c1700000 	.word	0xc1700000
    c364:	00000000 	.word	0x00000000
    c368:	3fc00000 	.word	0x3fc00000
    c36c:	00000000 	.word	0x00000000
    c370:	c0200000 	.word	0xc0200000
    c374:	00000000 	.word	0x00000000
    c378:	00ffffff 	.word	0x00ffffff
    c37c:	4d9e      	ldr	r5, [pc, #632]	; (c5f8 <__kernel_rem_pio2+0x61c>)
    c37e:	4c9d      	ldr	r4, [pc, #628]	; (c5f4 <__kernel_rem_pio2+0x618>)
    c380:	940c      	str	r4, [sp, #48]	; 0x30
    c382:	950d      	str	r5, [sp, #52]	; 0x34
    c384:	e7cc      	b.n	c320 <__kernel_rem_pio2+0x344>
    c386:	1c22      	adds	r2, r4, #0
    c388:	1c2b      	adds	r3, r5, #0
    c38a:	489c      	ldr	r0, [pc, #624]	; (c5fc <__kernel_rem_pio2+0x620>)
    c38c:	499c      	ldr	r1, [pc, #624]	; (c600 <__kernel_rem_pio2+0x624>)
    c38e:	f001 fb63 	bl	da58 <____subdf3_from_thumb>
    c392:	1c04      	adds	r4, r0, #0
    c394:	1c0d      	adds	r5, r1, #0
    c396:	2f00      	cmp	r7, #0
    c398:	d100      	bne.n	c39c <__kernel_rem_pio2+0x3c0>
    c39a:	e752      	b.n	c242 <__kernel_rem_pio2+0x266>
    c39c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c39e:	4897      	ldr	r0, [pc, #604]	; (c5fc <__kernel_rem_pio2+0x620>)
    c3a0:	4997      	ldr	r1, [pc, #604]	; (c600 <__kernel_rem_pio2+0x624>)
    c3a2:	f000 fdbb 	bl	cf1c <scalbn>
    c3a6:	1c02      	adds	r2, r0, #0
    c3a8:	1c0b      	adds	r3, r1, #0
    c3aa:	1c20      	adds	r0, r4, #0
    c3ac:	1c29      	adds	r1, r5, #0
    c3ae:	f001 fb53 	bl	da58 <____subdf3_from_thumb>
    c3b2:	1c04      	adds	r4, r0, #0
    c3b4:	1c0d      	adds	r5, r1, #0
    c3b6:	e744      	b.n	c242 <__kernel_rem_pio2+0x266>
    c3b8:	9809      	ldr	r0, [sp, #36]	; 0x24
    c3ba:	2800      	cmp	r0, #0
    c3bc:	d120      	bne.n	c400 <__kernel_rem_pio2+0x424>
    c3be:	4659      	mov	r1, fp
    c3c0:	008b      	lsls	r3, r1, #2
    c3c2:	aa89      	add	r2, sp, #548	; 0x224
    c3c4:	189b      	adds	r3, r3, r2
    c3c6:	3b04      	subs	r3, #4
    c3c8:	681b      	ldr	r3, [r3, #0]
    c3ca:	15db      	asrs	r3, r3, #23
    c3cc:	930a      	str	r3, [sp, #40]	; 0x28
    c3ce:	e708      	b.n	c1e2 <__kernel_rem_pio2+0x206>
    c3d0:	465b      	mov	r3, fp
    c3d2:	3b01      	subs	r3, #1
    c3d4:	2089      	movs	r0, #137	; 0x89
    c3d6:	009b      	lsls	r3, r3, #2
    c3d8:	0080      	lsls	r0, r0, #2
    c3da:	18c0      	adds	r0, r0, r3
    c3dc:	466e      	mov	r6, sp
    c3de:	5982      	ldr	r2, [r0, r6]
    c3e0:	4988      	ldr	r1, [pc, #544]	; (c604 <__kernel_rem_pio2+0x628>)
    c3e2:	400a      	ands	r2, r1
    c3e4:	5182      	str	r2, [r0, r6]
    c3e6:	e728      	b.n	c23a <__kernel_rem_pio2+0x25e>
    c3e8:	465b      	mov	r3, fp
    c3ea:	3b01      	subs	r3, #1
    c3ec:	2089      	movs	r0, #137	; 0x89
    c3ee:	009b      	lsls	r3, r3, #2
    c3f0:	0080      	lsls	r0, r0, #2
    c3f2:	18c0      	adds	r0, r0, r3
    c3f4:	466e      	mov	r6, sp
    c3f6:	5982      	ldr	r2, [r0, r6]
    c3f8:	4983      	ldr	r1, [pc, #524]	; (c608 <__kernel_rem_pio2+0x62c>)
    c3fa:	400a      	ands	r2, r1
    c3fc:	5182      	str	r2, [r0, r6]
    c3fe:	e71c      	b.n	c23a <__kernel_rem_pio2+0x25e>
    c400:	1c20      	adds	r0, r4, #0
    c402:	1c29      	adds	r1, r5, #0
    c404:	4a81      	ldr	r2, [pc, #516]	; (c60c <__kernel_rem_pio2+0x630>)
    c406:	4b82      	ldr	r3, [pc, #520]	; (c610 <__kernel_rem_pio2+0x634>)
    c408:	f001 fb1a 	bl	da40 <____gedf2_from_thumb>
    c40c:	2800      	cmp	r0, #0
    c40e:	db00      	blt.n	c412 <__kernel_rem_pio2+0x436>
    c410:	e0ec      	b.n	c5ec <__kernel_rem_pio2+0x610>
    c412:	2300      	movs	r3, #0
    c414:	930a      	str	r3, [sp, #40]	; 0x28
    c416:	e714      	b.n	c242 <__kernel_rem_pio2+0x266>
    c418:	2001      	movs	r0, #1
    c41a:	2101      	movs	r1, #1
    c41c:	4458      	add	r0, fp
    c41e:	465a      	mov	r2, fp
    c420:	4680      	mov	r8, r0
    c422:	1857      	adds	r7, r2, r1
    c424:	45b8      	cmp	r8, r7
    c426:	dd00      	ble.n	c42a <__kernel_rem_pio2+0x44e>
    c428:	e740      	b.n	c2ac <__kernel_rem_pio2+0x2d0>
    c42a:	e741      	b.n	c2b0 <__kernel_rem_pio2+0x2d4>
    c42c:	4d72      	ldr	r5, [pc, #456]	; (c5f8 <__kernel_rem_pio2+0x61c>)
    c42e:	4c71      	ldr	r4, [pc, #452]	; (c5f4 <__kernel_rem_pio2+0x618>)
    c430:	e646      	b.n	c0c0 <__kernel_rem_pio2+0xe4>
    c432:	1c20      	adds	r0, r4, #0
    c434:	1c29      	adds	r1, r5, #0
    c436:	4b70      	ldr	r3, [pc, #448]	; (c5f8 <__kernel_rem_pio2+0x61c>)
    c438:	4a6e      	ldr	r2, [pc, #440]	; (c5f4 <__kernel_rem_pio2+0x618>)
    c43a:	f001 fafd 	bl	da38 <____eqdf2_from_thumb>
    c43e:	2800      	cmp	r0, #0
    c440:	d000      	beq.n	c444 <__kernel_rem_pio2+0x468>
    c442:	e182      	b.n	c74a <__kernel_rem_pio2+0x76e>
    c444:	465c      	mov	r4, fp
    c446:	3c01      	subs	r4, #1
    c448:	00a5      	lsls	r5, r4, #2
    c44a:	2689      	movs	r6, #137	; 0x89
    c44c:	00b6      	lsls	r6, r6, #2
    c44e:	9909      	ldr	r1, [sp, #36]	; 0x24
    c450:	1976      	adds	r6, r6, r5
    c452:	466a      	mov	r2, sp
    c454:	58b3      	ldr	r3, [r6, r2]
    c456:	3918      	subs	r1, #24
    c458:	9109      	str	r1, [sp, #36]	; 0x24
    c45a:	2b00      	cmp	r3, #0
    c45c:	d000      	beq.n	c460 <__kernel_rem_pio2+0x484>
    c45e:	e1ce      	b.n	c7fe <__kernel_rem_pio2+0x822>
    c460:	1f2b      	subs	r3, r5, #4
    c462:	a889      	add	r0, sp, #548	; 0x224
    c464:	18c2      	adds	r2, r0, r3
    c466:	46a3      	mov	fp, r4
    c468:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c46a:	3b18      	subs	r3, #24
    c46c:	2101      	movs	r1, #1
    c46e:	9309      	str	r3, [sp, #36]	; 0x24
    c470:	6813      	ldr	r3, [r2, #0]
    c472:	4249      	negs	r1, r1
    c474:	448b      	add	fp, r1
    c476:	3a04      	subs	r2, #4
    c478:	2b00      	cmp	r3, #0
    c47a:	d0f5      	beq.n	c468 <__kernel_rem_pio2+0x48c>
    c47c:	485f      	ldr	r0, [pc, #380]	; (c5fc <__kernel_rem_pio2+0x620>)
    c47e:	4960      	ldr	r1, [pc, #384]	; (c600 <__kernel_rem_pio2+0x624>)
    c480:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c482:	f000 fd4b 	bl	cf1c <scalbn>
    c486:	1c04      	adds	r4, r0, #0
    c488:	4658      	mov	r0, fp
    c48a:	1c0d      	adds	r5, r1, #0
    c48c:	2800      	cmp	r0, #0
    c48e:	db5c      	blt.n	c54a <__kernel_rem_pio2+0x56e>
    c490:	0083      	lsls	r3, r0, #2
    c492:	a989      	add	r1, sp, #548	; 0x224
    c494:	18c9      	adds	r1, r1, r3
    c496:	aa11      	add	r2, sp, #68	; 0x44
    c498:	00c3      	lsls	r3, r0, #3
    c49a:	4688      	mov	r8, r1
    c49c:	18d7      	adds	r7, r2, r3
    c49e:	465e      	mov	r6, fp
    c4a0:	4643      	mov	r3, r8
    c4a2:	6818      	ldr	r0, [r3, #0]
    c4a4:	f001 fabc 	bl	da20 <____floatsidf_from_thumb>
    c4a8:	1c22      	adds	r2, r4, #0
    c4aa:	1c2b      	adds	r3, r5, #0
    c4ac:	f001 facc 	bl	da48 <____muldf3_from_thumb>
    c4b0:	4a58      	ldr	r2, [pc, #352]	; (c614 <__kernel_rem_pio2+0x638>)
    c4b2:	4b59      	ldr	r3, [pc, #356]	; (c618 <__kernel_rem_pio2+0x63c>)
    c4b4:	6038      	str	r0, [r7, #0]
    c4b6:	6079      	str	r1, [r7, #4]
    c4b8:	1c20      	adds	r0, r4, #0
    c4ba:	1c29      	adds	r1, r5, #0
    c4bc:	f001 fac4 	bl	da48 <____muldf3_from_thumb>
    c4c0:	1c04      	adds	r4, r0, #0
    c4c2:	2004      	movs	r0, #4
    c4c4:	4240      	negs	r0, r0
    c4c6:	1c0d      	adds	r5, r1, #0
    c4c8:	4480      	add	r8, r0
    c4ca:	3f08      	subs	r7, #8
    c4cc:	3e01      	subs	r6, #1
    c4ce:	d2e7      	bcs.n	c4a0 <__kernel_rem_pio2+0x4c4>
    c4d0:	2100      	movs	r1, #0
    c4d2:	46d9      	mov	r9, fp
    c4d4:	468a      	mov	sl, r1
    c4d6:	9807      	ldr	r0, [sp, #28]
    c4d8:	2800      	cmp	r0, #0
    c4da:	da00      	bge.n	c4de <__kernel_rem_pio2+0x502>
    c4dc:	e123      	b.n	c726 <__kernel_rem_pio2+0x74a>
    c4de:	4652      	mov	r2, sl
    c4e0:	2a00      	cmp	r2, #0
    c4e2:	da00      	bge.n	c4e6 <__kernel_rem_pio2+0x50a>
    c4e4:	e124      	b.n	c730 <__kernel_rem_pio2+0x754>
    c4e6:	464c      	mov	r4, r9
    c4e8:	00e3      	lsls	r3, r4, #3
    c4ea:	ad11      	add	r5, sp, #68	; 0x44
    c4ec:	18ed      	adds	r5, r5, r3
    c4ee:	4942      	ldr	r1, [pc, #264]	; (c5f8 <__kernel_rem_pio2+0x61c>)
    c4f0:	4840      	ldr	r0, [pc, #256]	; (c5f4 <__kernel_rem_pio2+0x618>)
    c4f2:	4f4a      	ldr	r7, [pc, #296]	; (c61c <__kernel_rem_pio2+0x640>)
    c4f4:	46a8      	mov	r8, r5
    c4f6:	2400      	movs	r4, #0
    c4f8:	9000      	str	r0, [sp, #0]
    c4fa:	9101      	str	r1, [sp, #4]
    c4fc:	e004      	b.n	c508 <__kernel_rem_pio2+0x52c>
    c4fe:	2008      	movs	r0, #8
    c500:	3708      	adds	r7, #8
    c502:	4480      	add	r8, r0
    c504:	4554      	cmp	r4, sl
    c506:	dc12      	bgt.n	c52e <__kernel_rem_pio2+0x552>
    c508:	4645      	mov	r5, r8
    c50a:	682a      	ldr	r2, [r5, #0]
    c50c:	686b      	ldr	r3, [r5, #4]
    c50e:	6838      	ldr	r0, [r7, #0]
    c510:	6879      	ldr	r1, [r7, #4]
    c512:	f001 fa99 	bl	da48 <____muldf3_from_thumb>
    c516:	1c02      	adds	r2, r0, #0
    c518:	1c0b      	adds	r3, r1, #0
    c51a:	9800      	ldr	r0, [sp, #0]
    c51c:	9901      	ldr	r1, [sp, #4]
    c51e:	f001 fa97 	bl	da50 <____adddf3_from_thumb>
    c522:	9e07      	ldr	r6, [sp, #28]
    c524:	3401      	adds	r4, #1
    c526:	9000      	str	r0, [sp, #0]
    c528:	9101      	str	r1, [sp, #4]
    c52a:	42a6      	cmp	r6, r4
    c52c:	dae7      	bge.n	c4fe <__kernel_rem_pio2+0x522>
    c52e:	4651      	mov	r1, sl
    c530:	9c00      	ldr	r4, [sp, #0]
    c532:	9d01      	ldr	r5, [sp, #4]
    c534:	00cb      	lsls	r3, r1, #3
    c536:	aa39      	add	r2, sp, #228	; 0xe4
    c538:	189b      	adds	r3, r3, r2
    c53a:	601c      	str	r4, [r3, #0]
    c53c:	605d      	str	r5, [r3, #4]
    c53e:	464e      	mov	r6, r9
    c540:	2501      	movs	r5, #1
    c542:	44aa      	add	sl, r5
    c544:	3e01      	subs	r6, #1
    c546:	46b1      	mov	r9, r6
    c548:	d2c5      	bcs.n	c4d6 <__kernel_rem_pio2+0x4fa>
    c54a:	99a6      	ldr	r1, [sp, #664]	; 0x298
    c54c:	2902      	cmp	r1, #2
    c54e:	dc67      	bgt.n	c620 <__kernel_rem_pio2+0x644>
    c550:	2901      	cmp	r1, #1
    c552:	da00      	bge.n	c556 <__kernel_rem_pio2+0x57a>
    c554:	e138      	b.n	c7c8 <__kernel_rem_pio2+0x7ec>
    c556:	465c      	mov	r4, fp
    c558:	2c00      	cmp	r4, #0
    c55a:	da00      	bge.n	c55e <__kernel_rem_pio2+0x582>
    c55c:	e173      	b.n	c846 <__kernel_rem_pio2+0x86a>
    c55e:	4658      	mov	r0, fp
    c560:	00c3      	lsls	r3, r0, #3
    c562:	a939      	add	r1, sp, #228	; 0xe4
    c564:	18cd      	adds	r5, r1, r3
    c566:	4b24      	ldr	r3, [pc, #144]	; (c5f8 <__kernel_rem_pio2+0x61c>)
    c568:	4a22      	ldr	r2, [pc, #136]	; (c5f4 <__kernel_rem_pio2+0x618>)
    c56a:	465c      	mov	r4, fp
    c56c:	1c10      	adds	r0, r2, #0
    c56e:	1c19      	adds	r1, r3, #0
    c570:	682a      	ldr	r2, [r5, #0]
    c572:	686b      	ldr	r3, [r5, #4]
    c574:	f001 fa6c 	bl	da50 <____adddf3_from_thumb>
    c578:	3d08      	subs	r5, #8
    c57a:	1c02      	adds	r2, r0, #0
    c57c:	1c0b      	adds	r3, r1, #0
    c57e:	3c01      	subs	r4, #1
    c580:	d2f4      	bcs.n	c56c <__kernel_rem_pio2+0x590>
    c582:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c584:	2c00      	cmp	r4, #0
    c586:	d000      	beq.n	c58a <__kernel_rem_pio2+0x5ae>
    c588:	e0da      	b.n	c740 <__kernel_rem_pio2+0x764>
    c58a:	1c10      	adds	r0, r2, #0
    c58c:	1c19      	adds	r1, r3, #0
    c58e:	9e04      	ldr	r6, [sp, #16]
    c590:	6030      	str	r0, [r6, #0]
    c592:	6071      	str	r1, [r6, #4]
    c594:	9839      	ldr	r0, [sp, #228]	; 0xe4
    c596:	993a      	ldr	r1, [sp, #232]	; 0xe8
    c598:	f001 fa5e 	bl	da58 <____subdf3_from_thumb>
    c59c:	465a      	mov	r2, fp
    c59e:	2a00      	cmp	r2, #0
    c5a0:	dd0a      	ble.n	c5b8 <__kernel_rem_pio2+0x5dc>
    c5a2:	465e      	mov	r6, fp
    c5a4:	ac39      	add	r4, sp, #228	; 0xe4
    c5a6:	2501      	movs	r5, #1
    c5a8:	3601      	adds	r6, #1
    c5aa:	3408      	adds	r4, #8
    c5ac:	cc0c      	ldmia	r4!, {r2, r3}
    c5ae:	3501      	adds	r5, #1
    c5b0:	f001 fa4e 	bl	da50 <____adddf3_from_thumb>
    c5b4:	42ae      	cmp	r6, r5
    c5b6:	d1f9      	bne.n	c5ac <__kernel_rem_pio2+0x5d0>
    c5b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c5ba:	2b00      	cmp	r3, #0
    c5bc:	d003      	beq.n	c5c6 <__kernel_rem_pio2+0x5ea>
    c5be:	2580      	movs	r5, #128	; 0x80
    c5c0:	062d      	lsls	r5, r5, #24
    c5c2:	1943      	adds	r3, r0, r5
    c5c4:	1c18      	adds	r0, r3, #0
    c5c6:	9e04      	ldr	r6, [sp, #16]
    c5c8:	60b0      	str	r0, [r6, #8]
    c5ca:	60f1      	str	r1, [r6, #12]
    c5cc:	9808      	ldr	r0, [sp, #32]
    c5ce:	2307      	movs	r3, #7
    c5d0:	4018      	ands	r0, r3
    c5d2:	239d      	movs	r3, #157	; 0x9d
    c5d4:	009b      	lsls	r3, r3, #2
    c5d6:	449d      	add	sp, r3
    c5d8:	bc3c      	pop	{r2, r3, r4, r5}
    c5da:	4690      	mov	r8, r2
    c5dc:	4699      	mov	r9, r3
    c5de:	46a2      	mov	sl, r4
    c5e0:	46ab      	mov	fp, r5
    c5e2:	bcf0      	pop	{r4, r5, r6, r7}
    c5e4:	bc02      	pop	{r1}
    c5e6:	4708      	bx	r1
    c5e8:	2700      	movs	r7, #0
    c5ea:	e61d      	b.n	c228 <__kernel_rem_pio2+0x24c>
    c5ec:	2602      	movs	r6, #2
    c5ee:	960a      	str	r6, [sp, #40]	; 0x28
    c5f0:	e5fa      	b.n	c1e8 <__kernel_rem_pio2+0x20c>
    c5f2:	46c0      	nop			; (mov r8, r8)
	...
    c5fc:	3ff00000 	.word	0x3ff00000
    c600:	00000000 	.word	0x00000000
    c604:	007fffff 	.word	0x007fffff
    c608:	003fffff 	.word	0x003fffff
    c60c:	3fe00000 	.word	0x3fe00000
    c610:	00000000 	.word	0x00000000
    c614:	3e700000 	.word	0x3e700000
    c618:	00000000 	.word	0x00000000
    c61c:	0000dc9c 	.word	0x0000dc9c
    c620:	9aa6      	ldr	r2, [sp, #664]	; 0x298
    c622:	2a03      	cmp	r2, #3
    c624:	d1d2      	bne.n	c5cc <__kernel_rem_pio2+0x5f0>
    c626:	465d      	mov	r5, fp
    c628:	2d00      	cmp	r5, #0
    c62a:	dd2c      	ble.n	c686 <__kernel_rem_pio2+0x6aa>
    c62c:	4658      	mov	r0, fp
    c62e:	00c3      	lsls	r3, r0, #3
    c630:	3b08      	subs	r3, #8
    c632:	a939      	add	r1, sp, #228	; 0xe4
    c634:	18c9      	adds	r1, r1, r3
    c636:	4688      	mov	r8, r1
    c638:	46da      	mov	sl, fp
    c63a:	4643      	mov	r3, r8
    c63c:	681c      	ldr	r4, [r3, #0]
    c63e:	685d      	ldr	r5, [r3, #4]
    c640:	689e      	ldr	r6, [r3, #8]
    c642:	68df      	ldr	r7, [r3, #12]
    c644:	2201      	movs	r2, #1
    c646:	4252      	negs	r2, r2
    c648:	4492      	add	sl, r2
    c64a:	1c20      	adds	r0, r4, #0
    c64c:	1c29      	adds	r1, r5, #0
    c64e:	1c32      	adds	r2, r6, #0
    c650:	1c3b      	adds	r3, r7, #0
    c652:	f001 f9fd 	bl	da50 <____adddf3_from_thumb>
    c656:	4642      	mov	r2, r8
    c658:	6010      	str	r0, [r2, #0]
    c65a:	6051      	str	r1, [r2, #4]
    c65c:	1c20      	adds	r0, r4, #0
    c65e:	6853      	ldr	r3, [r2, #4]
    c660:	6812      	ldr	r2, [r2, #0]
    c662:	1c29      	adds	r1, r5, #0
    c664:	f001 f9f8 	bl	da58 <____subdf3_from_thumb>
    c668:	1c0b      	adds	r3, r1, #0
    c66a:	1c02      	adds	r2, r0, #0
    c66c:	1c39      	adds	r1, r7, #0
    c66e:	1c30      	adds	r0, r6, #0
    c670:	f001 f9ee 	bl	da50 <____adddf3_from_thumb>
    c674:	2408      	movs	r4, #8
    c676:	4643      	mov	r3, r8
    c678:	4264      	negs	r4, r4
    c67a:	4655      	mov	r5, sl
    c67c:	6098      	str	r0, [r3, #8]
    c67e:	60d9      	str	r1, [r3, #12]
    c680:	44a0      	add	r8, r4
    c682:	2d00      	cmp	r5, #0
    c684:	d1d9      	bne.n	c63a <__kernel_rem_pio2+0x65e>
    c686:	465e      	mov	r6, fp
    c688:	2e01      	cmp	r6, #1
    c68a:	dc00      	bgt.n	c68e <__kernel_rem_pio2+0x6b2>
    c68c:	e0de      	b.n	c84c <__kernel_rem_pio2+0x870>
    c68e:	4658      	mov	r0, fp
    c690:	00c0      	lsls	r0, r0, #3
    c692:	1c03      	adds	r3, r0, #0
    c694:	3b08      	subs	r3, #8
    c696:	a939      	add	r1, sp, #228	; 0xe4
    c698:	18c9      	adds	r1, r1, r3
    c69a:	4681      	mov	r9, r0
    c69c:	4688      	mov	r8, r1
    c69e:	46da      	mov	sl, fp
    c6a0:	4643      	mov	r3, r8
    c6a2:	681c      	ldr	r4, [r3, #0]
    c6a4:	685d      	ldr	r5, [r3, #4]
    c6a6:	689e      	ldr	r6, [r3, #8]
    c6a8:	68df      	ldr	r7, [r3, #12]
    c6aa:	2201      	movs	r2, #1
    c6ac:	4252      	negs	r2, r2
    c6ae:	4492      	add	sl, r2
    c6b0:	1c20      	adds	r0, r4, #0
    c6b2:	1c29      	adds	r1, r5, #0
    c6b4:	1c32      	adds	r2, r6, #0
    c6b6:	1c3b      	adds	r3, r7, #0
    c6b8:	f001 f9ca 	bl	da50 <____adddf3_from_thumb>
    c6bc:	4642      	mov	r2, r8
    c6be:	6010      	str	r0, [r2, #0]
    c6c0:	6051      	str	r1, [r2, #4]
    c6c2:	1c20      	adds	r0, r4, #0
    c6c4:	6853      	ldr	r3, [r2, #4]
    c6c6:	6812      	ldr	r2, [r2, #0]
    c6c8:	1c29      	adds	r1, r5, #0
    c6ca:	f001 f9c5 	bl	da58 <____subdf3_from_thumb>
    c6ce:	1c0b      	adds	r3, r1, #0
    c6d0:	1c02      	adds	r2, r0, #0
    c6d2:	1c39      	adds	r1, r7, #0
    c6d4:	1c30      	adds	r0, r6, #0
    c6d6:	f001 f9bb 	bl	da50 <____adddf3_from_thumb>
    c6da:	2408      	movs	r4, #8
    c6dc:	4643      	mov	r3, r8
    c6de:	4264      	negs	r4, r4
    c6e0:	4655      	mov	r5, sl
    c6e2:	6098      	str	r0, [r3, #8]
    c6e4:	60d9      	str	r1, [r3, #12]
    c6e6:	44a0      	add	r8, r4
    c6e8:	2d01      	cmp	r5, #1
    c6ea:	d1d9      	bne.n	c6a0 <__kernel_rem_pio2+0x6c4>
    c6ec:	ad39      	add	r5, sp, #228	; 0xe4
    c6ee:	495b      	ldr	r1, [pc, #364]	; (c85c <__kernel_rem_pio2+0x880>)
    c6f0:	4859      	ldr	r0, [pc, #356]	; (c858 <__kernel_rem_pio2+0x87c>)
    c6f2:	444d      	add	r5, r9
    c6f4:	465c      	mov	r4, fp
    c6f6:	682a      	ldr	r2, [r5, #0]
    c6f8:	686b      	ldr	r3, [r5, #4]
    c6fa:	3c01      	subs	r4, #1
    c6fc:	f001 f9a8 	bl	da50 <____adddf3_from_thumb>
    c700:	3d08      	subs	r5, #8
    c702:	2c01      	cmp	r4, #1
    c704:	d1f7      	bne.n	c6f6 <__kernel_rem_pio2+0x71a>
    c706:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c708:	2e00      	cmp	r6, #0
    c70a:	d000      	beq.n	c70e <__kernel_rem_pio2+0x732>
    c70c:	e085      	b.n	c81a <__kernel_rem_pio2+0x83e>
    c70e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    c710:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
    c712:	9a04      	ldr	r2, [sp, #16]
    c714:	6013      	str	r3, [r2, #0]
    c716:	6054      	str	r4, [r2, #4]
    c718:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    c71a:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
    c71c:	6110      	str	r0, [r2, #16]
    c71e:	6151      	str	r1, [r2, #20]
    c720:	6093      	str	r3, [r2, #8]
    c722:	60d4      	str	r4, [r2, #12]
    c724:	e752      	b.n	c5cc <__kernel_rem_pio2+0x5f0>
    c726:	4a4d      	ldr	r2, [pc, #308]	; (c85c <__kernel_rem_pio2+0x880>)
    c728:	494b      	ldr	r1, [pc, #300]	; (c858 <__kernel_rem_pio2+0x87c>)
    c72a:	9100      	str	r1, [sp, #0]
    c72c:	9201      	str	r2, [sp, #4]
    c72e:	e6fe      	b.n	c52e <__kernel_rem_pio2+0x552>
    c730:	4c4a      	ldr	r4, [pc, #296]	; (c85c <__kernel_rem_pio2+0x880>)
    c732:	4b49      	ldr	r3, [pc, #292]	; (c858 <__kernel_rem_pio2+0x87c>)
    c734:	9300      	str	r3, [sp, #0]
    c736:	9401      	str	r4, [sp, #4]
    c738:	e6f9      	b.n	c52e <__kernel_rem_pio2+0x552>
    c73a:	2200      	movs	r2, #0
    c73c:	9210      	str	r2, [sp, #64]	; 0x40
    c73e:	e469      	b.n	c014 <__kernel_rem_pio2+0x38>
    c740:	2580      	movs	r5, #128	; 0x80
    c742:	062d      	lsls	r5, r5, #24
    c744:	1950      	adds	r0, r2, r5
    c746:	1c19      	adds	r1, r3, #0
    c748:	e721      	b.n	c58e <__kernel_rem_pio2+0x5b2>
    c74a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c74c:	1c20      	adds	r0, r4, #0
    c74e:	4272      	negs	r2, r6
    c750:	1c29      	adds	r1, r5, #0
    c752:	f000 fbe3 	bl	cf1c <scalbn>
    c756:	4a42      	ldr	r2, [pc, #264]	; (c860 <__kernel_rem_pio2+0x884>)
    c758:	4b42      	ldr	r3, [pc, #264]	; (c864 <__kernel_rem_pio2+0x888>)
    c75a:	900e      	str	r0, [sp, #56]	; 0x38
    c75c:	910f      	str	r1, [sp, #60]	; 0x3c
    c75e:	f001 f96f 	bl	da40 <____gedf2_from_thumb>
    c762:	2800      	cmp	r0, #0
    c764:	db4d      	blt.n	c802 <__kernel_rem_pio2+0x826>
    c766:	4a40      	ldr	r2, [pc, #256]	; (c868 <__kernel_rem_pio2+0x88c>)
    c768:	4b40      	ldr	r3, [pc, #256]	; (c86c <__kernel_rem_pio2+0x890>)
    c76a:	980e      	ldr	r0, [sp, #56]	; 0x38
    c76c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c76e:	f001 f96b 	bl	da48 <____muldf3_from_thumb>
    c772:	f001 f975 	bl	da60 <____fixdfsi_from_thumb>
    c776:	f001 f953 	bl	da20 <____floatsidf_from_thumb>
    c77a:	1c05      	adds	r5, r0, #0
    c77c:	4658      	mov	r0, fp
    c77e:	0084      	lsls	r4, r0, #2
    c780:	4a3b      	ldr	r2, [pc, #236]	; (c870 <__kernel_rem_pio2+0x894>)
    c782:	4b3c      	ldr	r3, [pc, #240]	; (c874 <__kernel_rem_pio2+0x898>)
    c784:	1c28      	adds	r0, r5, #0
    c786:	1c0e      	adds	r6, r1, #0
    c788:	f001 f95e 	bl	da48 <____muldf3_from_thumb>
    c78c:	1c02      	adds	r2, r0, #0
    c78e:	1c0b      	adds	r3, r1, #0
    c790:	980e      	ldr	r0, [sp, #56]	; 0x38
    c792:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c794:	f001 f95c 	bl	da50 <____adddf3_from_thumb>
    c798:	f001 f962 	bl	da60 <____fixdfsi_from_thumb>
    c79c:	2289      	movs	r2, #137	; 0x89
    c79e:	0092      	lsls	r2, r2, #2
    c7a0:	1912      	adds	r2, r2, r4
    c7a2:	2301      	movs	r3, #1
    c7a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c7a6:	4669      	mov	r1, sp
    c7a8:	449b      	add	fp, r3
    c7aa:	5050      	str	r0, [r2, r1]
    c7ac:	3418      	adds	r4, #24
    c7ae:	4658      	mov	r0, fp
    c7b0:	9409      	str	r4, [sp, #36]	; 0x24
    c7b2:	1c31      	adds	r1, r6, #0
    c7b4:	0084      	lsls	r4, r0, #2
    c7b6:	1c28      	adds	r0, r5, #0
    c7b8:	f001 f952 	bl	da60 <____fixdfsi_from_thumb>
    c7bc:	2289      	movs	r2, #137	; 0x89
    c7be:	0092      	lsls	r2, r2, #2
    c7c0:	1912      	adds	r2, r2, r4
    c7c2:	4669      	mov	r1, sp
    c7c4:	5050      	str	r0, [r2, r1]
    c7c6:	e659      	b.n	c47c <__kernel_rem_pio2+0x4a0>
    c7c8:	2900      	cmp	r1, #0
    c7ca:	d000      	beq.n	c7ce <__kernel_rem_pio2+0x7f2>
    c7cc:	e6fe      	b.n	c5cc <__kernel_rem_pio2+0x5f0>
    c7ce:	465b      	mov	r3, fp
    c7d0:	2b00      	cmp	r3, #0
    c7d2:	db3e      	blt.n	c852 <__kernel_rem_pio2+0x876>
    c7d4:	465e      	mov	r6, fp
    c7d6:	00f2      	lsls	r2, r6, #3
    c7d8:	ab39      	add	r3, sp, #228	; 0xe4
    c7da:	4920      	ldr	r1, [pc, #128]	; (c85c <__kernel_rem_pio2+0x880>)
    c7dc:	481e      	ldr	r0, [pc, #120]	; (c858 <__kernel_rem_pio2+0x87c>)
    c7de:	189d      	adds	r5, r3, r2
    c7e0:	465c      	mov	r4, fp
    c7e2:	682a      	ldr	r2, [r5, #0]
    c7e4:	686b      	ldr	r3, [r5, #4]
    c7e6:	f001 f933 	bl	da50 <____adddf3_from_thumb>
    c7ea:	3d08      	subs	r5, #8
    c7ec:	3c01      	subs	r4, #1
    c7ee:	d2f8      	bcs.n	c7e2 <__kernel_rem_pio2+0x806>
    c7f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c7f2:	2a00      	cmp	r2, #0
    c7f4:	d122      	bne.n	c83c <__kernel_rem_pio2+0x860>
    c7f6:	9e04      	ldr	r6, [sp, #16]
    c7f8:	6030      	str	r0, [r6, #0]
    c7fa:	6071      	str	r1, [r6, #4]
    c7fc:	e6e6      	b.n	c5cc <__kernel_rem_pio2+0x5f0>
    c7fe:	46a3      	mov	fp, r4
    c800:	e63c      	b.n	c47c <__kernel_rem_pio2+0x4a0>
    c802:	465b      	mov	r3, fp
    c804:	980e      	ldr	r0, [sp, #56]	; 0x38
    c806:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c808:	009c      	lsls	r4, r3, #2
    c80a:	f001 f929 	bl	da60 <____fixdfsi_from_thumb>
    c80e:	2689      	movs	r6, #137	; 0x89
    c810:	00b6      	lsls	r6, r6, #2
    c812:	1936      	adds	r6, r6, r4
    c814:	466d      	mov	r5, sp
    c816:	5170      	str	r0, [r6, r5]
    c818:	e630      	b.n	c47c <__kernel_rem_pio2+0x4a0>
    c81a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    c81c:	2280      	movs	r2, #128	; 0x80
    c81e:	9c04      	ldr	r4, [sp, #16]
    c820:	0612      	lsls	r2, r2, #24
    c822:	189b      	adds	r3, r3, r2
    c824:	6023      	str	r3, [r4, #0]
    c826:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    c828:	6063      	str	r3, [r4, #4]
    c82a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    c82c:	189b      	adds	r3, r3, r2
    c82e:	60a3      	str	r3, [r4, #8]
    c830:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    c832:	60e3      	str	r3, [r4, #12]
    c834:	1883      	adds	r3, r0, r2
    c836:	6123      	str	r3, [r4, #16]
    c838:	6161      	str	r1, [r4, #20]
    c83a:	e6c7      	b.n	c5cc <__kernel_rem_pio2+0x5f0>
    c83c:	2580      	movs	r5, #128	; 0x80
    c83e:	062d      	lsls	r5, r5, #24
    c840:	1943      	adds	r3, r0, r5
    c842:	1c18      	adds	r0, r3, #0
    c844:	e7d7      	b.n	c7f6 <__kernel_rem_pio2+0x81a>
    c846:	4b05      	ldr	r3, [pc, #20]	; (c85c <__kernel_rem_pio2+0x880>)
    c848:	4a03      	ldr	r2, [pc, #12]	; (c858 <__kernel_rem_pio2+0x87c>)
    c84a:	e69a      	b.n	c582 <__kernel_rem_pio2+0x5a6>
    c84c:	4903      	ldr	r1, [pc, #12]	; (c85c <__kernel_rem_pio2+0x880>)
    c84e:	4802      	ldr	r0, [pc, #8]	; (c858 <__kernel_rem_pio2+0x87c>)
    c850:	e759      	b.n	c706 <__kernel_rem_pio2+0x72a>
    c852:	4902      	ldr	r1, [pc, #8]	; (c85c <__kernel_rem_pio2+0x880>)
    c854:	4800      	ldr	r0, [pc, #0]	; (c858 <__kernel_rem_pio2+0x87c>)
    c856:	e7cb      	b.n	c7f0 <__kernel_rem_pio2+0x814>
	...
    c860:	41700000 	.word	0x41700000
    c864:	00000000 	.word	0x00000000
    c868:	3e700000 	.word	0x3e700000
    c86c:	00000000 	.word	0x00000000
    c870:	c1700000 	.word	0xc1700000
    c874:	00000000 	.word	0x00000000

0000c878 <__kernel_sin>:
    c878:	b5f0      	push	{r4, r5, r6, r7, lr}
    c87a:	b088      	sub	sp, #32
    c87c:	9200      	str	r2, [sp, #0]
    c87e:	9301      	str	r3, [sp, #4]
    c880:	4a4d      	ldr	r2, [pc, #308]	; (c9b8 <__kernel_sin+0x140>)
    c882:	4b4e      	ldr	r3, [pc, #312]	; (c9bc <__kernel_sin+0x144>)
    c884:	4002      	ands	r2, r0
    c886:	9002      	str	r0, [sp, #8]
    c888:	9103      	str	r1, [sp, #12]
    c88a:	429a      	cmp	r2, r3
    c88c:	dc03      	bgt.n	c896 <__kernel_sin+0x1e>
    c88e:	f001 f8e7 	bl	da60 <____fixdfsi_from_thumb>
    c892:	2800      	cmp	r0, #0
    c894:	d070      	beq.n	c978 <__kernel_sin+0x100>
    c896:	9802      	ldr	r0, [sp, #8]
    c898:	9903      	ldr	r1, [sp, #12]
    c89a:	1c02      	adds	r2, r0, #0
    c89c:	1c0b      	adds	r3, r1, #0
    c89e:	f001 f8d3 	bl	da48 <____muldf3_from_thumb>
    c8a2:	1c06      	adds	r6, r0, #0
    c8a4:	1c0f      	adds	r7, r1, #0
    c8a6:	1c32      	adds	r2, r6, #0
    c8a8:	1c3b      	adds	r3, r7, #0
    c8aa:	9802      	ldr	r0, [sp, #8]
    c8ac:	9903      	ldr	r1, [sp, #12]
    c8ae:	f001 f8cb 	bl	da48 <____muldf3_from_thumb>
    c8b2:	4a43      	ldr	r2, [pc, #268]	; (c9c0 <__kernel_sin+0x148>)
    c8b4:	4b43      	ldr	r3, [pc, #268]	; (c9c4 <__kernel_sin+0x14c>)
    c8b6:	9006      	str	r0, [sp, #24]
    c8b8:	9107      	str	r1, [sp, #28]
    c8ba:	1c30      	adds	r0, r6, #0
    c8bc:	1c39      	adds	r1, r7, #0
    c8be:	f001 f8c3 	bl	da48 <____muldf3_from_thumb>
    c8c2:	4a41      	ldr	r2, [pc, #260]	; (c9c8 <__kernel_sin+0x150>)
    c8c4:	4b41      	ldr	r3, [pc, #260]	; (c9cc <__kernel_sin+0x154>)
    c8c6:	f001 f8c7 	bl	da58 <____subdf3_from_thumb>
    c8ca:	1c02      	adds	r2, r0, #0
    c8cc:	1c0b      	adds	r3, r1, #0
    c8ce:	1c30      	adds	r0, r6, #0
    c8d0:	1c39      	adds	r1, r7, #0
    c8d2:	f001 f8b9 	bl	da48 <____muldf3_from_thumb>
    c8d6:	4a3e      	ldr	r2, [pc, #248]	; (c9d0 <__kernel_sin+0x158>)
    c8d8:	4b3e      	ldr	r3, [pc, #248]	; (c9d4 <__kernel_sin+0x15c>)
    c8da:	f001 f8b9 	bl	da50 <____adddf3_from_thumb>
    c8de:	1c02      	adds	r2, r0, #0
    c8e0:	1c0b      	adds	r3, r1, #0
    c8e2:	1c30      	adds	r0, r6, #0
    c8e4:	1c39      	adds	r1, r7, #0
    c8e6:	f001 f8af 	bl	da48 <____muldf3_from_thumb>
    c8ea:	4a3b      	ldr	r2, [pc, #236]	; (c9d8 <__kernel_sin+0x160>)
    c8ec:	4b3b      	ldr	r3, [pc, #236]	; (c9dc <__kernel_sin+0x164>)
    c8ee:	f001 f8b3 	bl	da58 <____subdf3_from_thumb>
    c8f2:	1c02      	adds	r2, r0, #0
    c8f4:	1c0b      	adds	r3, r1, #0
    c8f6:	1c30      	adds	r0, r6, #0
    c8f8:	1c39      	adds	r1, r7, #0
    c8fa:	f001 f8a5 	bl	da48 <____muldf3_from_thumb>
    c8fe:	4a38      	ldr	r2, [pc, #224]	; (c9e0 <__kernel_sin+0x168>)
    c900:	4b38      	ldr	r3, [pc, #224]	; (c9e4 <__kernel_sin+0x16c>)
    c902:	f001 f8a5 	bl	da50 <____adddf3_from_thumb>
    c906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c908:	9004      	str	r0, [sp, #16]
    c90a:	9105      	str	r1, [sp, #20]
    c90c:	2b00      	cmp	r3, #0
    c90e:	d039      	beq.n	c984 <__kernel_sin+0x10c>
    c910:	4a35      	ldr	r2, [pc, #212]	; (c9e8 <__kernel_sin+0x170>)
    c912:	4b36      	ldr	r3, [pc, #216]	; (c9ec <__kernel_sin+0x174>)
    c914:	9800      	ldr	r0, [sp, #0]
    c916:	9901      	ldr	r1, [sp, #4]
    c918:	f001 f896 	bl	da48 <____muldf3_from_thumb>
    c91c:	9a04      	ldr	r2, [sp, #16]
    c91e:	9b05      	ldr	r3, [sp, #20]
    c920:	1c04      	adds	r4, r0, #0
    c922:	1c0d      	adds	r5, r1, #0
    c924:	9806      	ldr	r0, [sp, #24]
    c926:	9907      	ldr	r1, [sp, #28]
    c928:	f001 f88e 	bl	da48 <____muldf3_from_thumb>
    c92c:	1c02      	adds	r2, r0, #0
    c92e:	1c0b      	adds	r3, r1, #0
    c930:	1c20      	adds	r0, r4, #0
    c932:	1c29      	adds	r1, r5, #0
    c934:	f001 f890 	bl	da58 <____subdf3_from_thumb>
    c938:	1c02      	adds	r2, r0, #0
    c93a:	1c0b      	adds	r3, r1, #0
    c93c:	1c30      	adds	r0, r6, #0
    c93e:	1c39      	adds	r1, r7, #0
    c940:	f001 f882 	bl	da48 <____muldf3_from_thumb>
    c944:	9a00      	ldr	r2, [sp, #0]
    c946:	9b01      	ldr	r3, [sp, #4]
    c948:	f001 f886 	bl	da58 <____subdf3_from_thumb>
    c94c:	4a28      	ldr	r2, [pc, #160]	; (c9f0 <__kernel_sin+0x178>)
    c94e:	4b29      	ldr	r3, [pc, #164]	; (c9f4 <__kernel_sin+0x17c>)
    c950:	1c04      	adds	r4, r0, #0
    c952:	1c0d      	adds	r5, r1, #0
    c954:	9806      	ldr	r0, [sp, #24]
    c956:	9907      	ldr	r1, [sp, #28]
    c958:	f001 f876 	bl	da48 <____muldf3_from_thumb>
    c95c:	1c02      	adds	r2, r0, #0
    c95e:	1c0b      	adds	r3, r1, #0
    c960:	1c20      	adds	r0, r4, #0
    c962:	1c29      	adds	r1, r5, #0
    c964:	f001 f874 	bl	da50 <____adddf3_from_thumb>
    c968:	1c02      	adds	r2, r0, #0
    c96a:	1c0b      	adds	r3, r1, #0
    c96c:	9802      	ldr	r0, [sp, #8]
    c96e:	9903      	ldr	r1, [sp, #12]
    c970:	f001 f872 	bl	da58 <____subdf3_from_thumb>
    c974:	9002      	str	r0, [sp, #8]
    c976:	9103      	str	r1, [sp, #12]
    c978:	9802      	ldr	r0, [sp, #8]
    c97a:	9903      	ldr	r1, [sp, #12]
    c97c:	b008      	add	sp, #32
    c97e:	bcf0      	pop	{r4, r5, r6, r7}
    c980:	bc04      	pop	{r2}
    c982:	4710      	bx	r2
    c984:	9a04      	ldr	r2, [sp, #16]
    c986:	9b05      	ldr	r3, [sp, #20]
    c988:	1c30      	adds	r0, r6, #0
    c98a:	1c39      	adds	r1, r7, #0
    c98c:	f001 f85c 	bl	da48 <____muldf3_from_thumb>
    c990:	4a17      	ldr	r2, [pc, #92]	; (c9f0 <__kernel_sin+0x178>)
    c992:	4b18      	ldr	r3, [pc, #96]	; (c9f4 <__kernel_sin+0x17c>)
    c994:	f001 f860 	bl	da58 <____subdf3_from_thumb>
    c998:	1c02      	adds	r2, r0, #0
    c99a:	1c0b      	adds	r3, r1, #0
    c99c:	9806      	ldr	r0, [sp, #24]
    c99e:	9907      	ldr	r1, [sp, #28]
    c9a0:	f001 f852 	bl	da48 <____muldf3_from_thumb>
    c9a4:	1c02      	adds	r2, r0, #0
    c9a6:	1c0b      	adds	r3, r1, #0
    c9a8:	9802      	ldr	r0, [sp, #8]
    c9aa:	9903      	ldr	r1, [sp, #12]
    c9ac:	f001 f850 	bl	da50 <____adddf3_from_thumb>
    c9b0:	9002      	str	r0, [sp, #8]
    c9b2:	9103      	str	r1, [sp, #12]
    c9b4:	e7e0      	b.n	c978 <__kernel_sin+0x100>
    c9b6:	46c0      	nop			; (mov r8, r8)
    c9b8:	7fffffff 	.word	0x7fffffff
    c9bc:	3e3fffff 	.word	0x3e3fffff
    c9c0:	3de5d93a 	.word	0x3de5d93a
    c9c4:	5acfd57c 	.word	0x5acfd57c
    c9c8:	3e5ae5e6 	.word	0x3e5ae5e6
    c9cc:	8a2b9ceb 	.word	0x8a2b9ceb
    c9d0:	3ec71de3 	.word	0x3ec71de3
    c9d4:	57b1fe7d 	.word	0x57b1fe7d
    c9d8:	3f2a01a0 	.word	0x3f2a01a0
    c9dc:	19c161d5 	.word	0x19c161d5
    c9e0:	3f811111 	.word	0x3f811111
    c9e4:	1110f8a6 	.word	0x1110f8a6
    c9e8:	3fe00000 	.word	0x3fe00000
    c9ec:	00000000 	.word	0x00000000
    c9f0:	3fc55555 	.word	0x3fc55555
    c9f4:	55555549 	.word	0x55555549

0000c9f8 <atan>:
    c9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9fa:	4657      	mov	r7, sl
    c9fc:	4646      	mov	r6, r8
    c9fe:	b4c0      	push	{r6, r7}
    ca00:	4baf      	ldr	r3, [pc, #700]	; (ccc0 <atan+0x2c8>)
    ca02:	1c05      	adds	r5, r0, #0
    ca04:	401d      	ands	r5, r3
    ca06:	4baf      	ldr	r3, [pc, #700]	; (ccc4 <atan+0x2cc>)
    ca08:	b084      	sub	sp, #16
    ca0a:	1c06      	adds	r6, r0, #0
    ca0c:	1c0f      	adds	r7, r1, #0
    ca0e:	4680      	mov	r8, r0
    ca10:	429d      	cmp	r5, r3
    ca12:	dd14      	ble.n	ca3e <atan+0x46>
    ca14:	4aac      	ldr	r2, [pc, #688]	; (ccc8 <atan+0x2d0>)
    ca16:	4295      	cmp	r5, r2
    ca18:	dc00      	bgt.n	ca1c <atan+0x24>
    ca1a:	e0b8      	b.n	cb8e <atan+0x196>
    ca1c:	1c30      	adds	r0, r6, #0
    ca1e:	1c39      	adds	r1, r7, #0
    ca20:	1c32      	adds	r2, r6, #0
    ca22:	1c3b      	adds	r3, r7, #0
    ca24:	f001 f814 	bl	da50 <____adddf3_from_thumb>
    ca28:	1c06      	adds	r6, r0, #0
    ca2a:	1c0f      	adds	r7, r1, #0
    ca2c:	1c30      	adds	r0, r6, #0
    ca2e:	1c39      	adds	r1, r7, #0
    ca30:	b004      	add	sp, #16
    ca32:	bc0c      	pop	{r2, r3}
    ca34:	4690      	mov	r8, r2
    ca36:	469a      	mov	sl, r3
    ca38:	bcf0      	pop	{r4, r5, r6, r7}
    ca3a:	bc04      	pop	{r2}
    ca3c:	4710      	bx	r2
    ca3e:	4ba3      	ldr	r3, [pc, #652]	; (cccc <atan+0x2d4>)
    ca40:	429d      	cmp	r5, r3
    ca42:	dd00      	ble.n	ca46 <atan+0x4e>
    ca44:	e0b7      	b.n	cbb6 <atan+0x1be>
    ca46:	4ba2      	ldr	r3, [pc, #648]	; (ccd0 <atan+0x2d8>)
    ca48:	429d      	cmp	r5, r3
    ca4a:	dc00      	bgt.n	ca4e <atan+0x56>
    ca4c:	e0a7      	b.n	cb9e <atan+0x1a6>
    ca4e:	2301      	movs	r3, #1
    ca50:	4259      	negs	r1, r3
    ca52:	468a      	mov	sl, r1
    ca54:	1c32      	adds	r2, r6, #0
    ca56:	1c3b      	adds	r3, r7, #0
    ca58:	1c30      	adds	r0, r6, #0
    ca5a:	1c39      	adds	r1, r7, #0
    ca5c:	f000 fff4 	bl	da48 <____muldf3_from_thumb>
    ca60:	1c02      	adds	r2, r0, #0
    ca62:	1c0b      	adds	r3, r1, #0
    ca64:	9000      	str	r0, [sp, #0]
    ca66:	9101      	str	r1, [sp, #4]
    ca68:	f000 ffee 	bl	da48 <____muldf3_from_thumb>
    ca6c:	4a99      	ldr	r2, [pc, #612]	; (ccd4 <atan+0x2dc>)
    ca6e:	4b9a      	ldr	r3, [pc, #616]	; (ccd8 <atan+0x2e0>)
    ca70:	1c04      	adds	r4, r0, #0
    ca72:	1c0d      	adds	r5, r1, #0
    ca74:	f000 ffe8 	bl	da48 <____muldf3_from_thumb>
    ca78:	4a98      	ldr	r2, [pc, #608]	; (ccdc <atan+0x2e4>)
    ca7a:	4b99      	ldr	r3, [pc, #612]	; (cce0 <atan+0x2e8>)
    ca7c:	f000 ffe8 	bl	da50 <____adddf3_from_thumb>
    ca80:	1c02      	adds	r2, r0, #0
    ca82:	1c0b      	adds	r3, r1, #0
    ca84:	1c20      	adds	r0, r4, #0
    ca86:	1c29      	adds	r1, r5, #0
    ca88:	f000 ffde 	bl	da48 <____muldf3_from_thumb>
    ca8c:	4a95      	ldr	r2, [pc, #596]	; (cce4 <atan+0x2ec>)
    ca8e:	4b96      	ldr	r3, [pc, #600]	; (cce8 <atan+0x2f0>)
    ca90:	f000 ffde 	bl	da50 <____adddf3_from_thumb>
    ca94:	1c02      	adds	r2, r0, #0
    ca96:	1c0b      	adds	r3, r1, #0
    ca98:	1c20      	adds	r0, r4, #0
    ca9a:	1c29      	adds	r1, r5, #0
    ca9c:	f000 ffd4 	bl	da48 <____muldf3_from_thumb>
    caa0:	4a92      	ldr	r2, [pc, #584]	; (ccec <atan+0x2f4>)
    caa2:	4b93      	ldr	r3, [pc, #588]	; (ccf0 <atan+0x2f8>)
    caa4:	f000 ffd4 	bl	da50 <____adddf3_from_thumb>
    caa8:	1c02      	adds	r2, r0, #0
    caaa:	1c0b      	adds	r3, r1, #0
    caac:	1c20      	adds	r0, r4, #0
    caae:	1c29      	adds	r1, r5, #0
    cab0:	f000 ffca 	bl	da48 <____muldf3_from_thumb>
    cab4:	4a8f      	ldr	r2, [pc, #572]	; (ccf4 <atan+0x2fc>)
    cab6:	4b90      	ldr	r3, [pc, #576]	; (ccf8 <atan+0x300>)
    cab8:	f000 ffca 	bl	da50 <____adddf3_from_thumb>
    cabc:	1c02      	adds	r2, r0, #0
    cabe:	1c0b      	adds	r3, r1, #0
    cac0:	1c20      	adds	r0, r4, #0
    cac2:	1c29      	adds	r1, r5, #0
    cac4:	f000 ffc0 	bl	da48 <____muldf3_from_thumb>
    cac8:	4a8c      	ldr	r2, [pc, #560]	; (ccfc <atan+0x304>)
    caca:	4b8d      	ldr	r3, [pc, #564]	; (cd00 <atan+0x308>)
    cacc:	f000 ffc0 	bl	da50 <____adddf3_from_thumb>
    cad0:	1c02      	adds	r2, r0, #0
    cad2:	1c0b      	adds	r3, r1, #0
    cad4:	9800      	ldr	r0, [sp, #0]
    cad6:	9901      	ldr	r1, [sp, #4]
    cad8:	f000 ffb6 	bl	da48 <____muldf3_from_thumb>
    cadc:	4a89      	ldr	r2, [pc, #548]	; (cd04 <atan+0x30c>)
    cade:	4b8a      	ldr	r3, [pc, #552]	; (cd08 <atan+0x310>)
    cae0:	9002      	str	r0, [sp, #8]
    cae2:	9103      	str	r1, [sp, #12]
    cae4:	1c20      	adds	r0, r4, #0
    cae6:	1c29      	adds	r1, r5, #0
    cae8:	f000 ffae 	bl	da48 <____muldf3_from_thumb>
    caec:	4a87      	ldr	r2, [pc, #540]	; (cd0c <atan+0x314>)
    caee:	4b88      	ldr	r3, [pc, #544]	; (cd10 <atan+0x318>)
    caf0:	f000 ffb2 	bl	da58 <____subdf3_from_thumb>
    caf4:	1c02      	adds	r2, r0, #0
    caf6:	1c0b      	adds	r3, r1, #0
    caf8:	1c20      	adds	r0, r4, #0
    cafa:	1c29      	adds	r1, r5, #0
    cafc:	f000 ffa4 	bl	da48 <____muldf3_from_thumb>
    cb00:	4a84      	ldr	r2, [pc, #528]	; (cd14 <atan+0x31c>)
    cb02:	4b85      	ldr	r3, [pc, #532]	; (cd18 <atan+0x320>)
    cb04:	f000 ffa8 	bl	da58 <____subdf3_from_thumb>
    cb08:	1c02      	adds	r2, r0, #0
    cb0a:	1c0b      	adds	r3, r1, #0
    cb0c:	1c20      	adds	r0, r4, #0
    cb0e:	1c29      	adds	r1, r5, #0
    cb10:	f000 ff9a 	bl	da48 <____muldf3_from_thumb>
    cb14:	4a81      	ldr	r2, [pc, #516]	; (cd1c <atan+0x324>)
    cb16:	4b82      	ldr	r3, [pc, #520]	; (cd20 <atan+0x328>)
    cb18:	f000 ff9e 	bl	da58 <____subdf3_from_thumb>
    cb1c:	1c02      	adds	r2, r0, #0
    cb1e:	1c0b      	adds	r3, r1, #0
    cb20:	1c20      	adds	r0, r4, #0
    cb22:	1c29      	adds	r1, r5, #0
    cb24:	f000 ff90 	bl	da48 <____muldf3_from_thumb>
    cb28:	4a7e      	ldr	r2, [pc, #504]	; (cd24 <atan+0x32c>)
    cb2a:	4b7f      	ldr	r3, [pc, #508]	; (cd28 <atan+0x330>)
    cb2c:	f000 ff94 	bl	da58 <____subdf3_from_thumb>
    cb30:	1c02      	adds	r2, r0, #0
    cb32:	1c0b      	adds	r3, r1, #0
    cb34:	1c20      	adds	r0, r4, #0
    cb36:	1c29      	adds	r1, r5, #0
    cb38:	f000 ff86 	bl	da48 <____muldf3_from_thumb>
    cb3c:	1c0b      	adds	r3, r1, #0
    cb3e:	4651      	mov	r1, sl
    cb40:	1c02      	adds	r2, r0, #0
    cb42:	2900      	cmp	r1, #0
    cb44:	db61      	blt.n	cc0a <atan+0x212>
    cb46:	4651      	mov	r1, sl
    cb48:	00cc      	lsls	r4, r1, #3
    cb4a:	9802      	ldr	r0, [sp, #8]
    cb4c:	9903      	ldr	r1, [sp, #12]
    cb4e:	f000 ff7f 	bl	da50 <____adddf3_from_thumb>
    cb52:	1c02      	adds	r2, r0, #0
    cb54:	1c0b      	adds	r3, r1, #0
    cb56:	1c30      	adds	r0, r6, #0
    cb58:	1c39      	adds	r1, r7, #0
    cb5a:	f000 ff75 	bl	da48 <____muldf3_from_thumb>
    cb5e:	4d73      	ldr	r5, [pc, #460]	; (cd2c <atan+0x334>)
    cb60:	4b73      	ldr	r3, [pc, #460]	; (cd30 <atan+0x338>)
    cb62:	1965      	adds	r5, r4, r5
    cb64:	18e4      	adds	r4, r4, r3
    cb66:	6822      	ldr	r2, [r4, #0]
    cb68:	6863      	ldr	r3, [r4, #4]
    cb6a:	f000 ff75 	bl	da58 <____subdf3_from_thumb>
    cb6e:	1c32      	adds	r2, r6, #0
    cb70:	1c3b      	adds	r3, r7, #0
    cb72:	f000 ff71 	bl	da58 <____subdf3_from_thumb>
    cb76:	1c02      	adds	r2, r0, #0
    cb78:	1c0b      	adds	r3, r1, #0
    cb7a:	6828      	ldr	r0, [r5, #0]
    cb7c:	6869      	ldr	r1, [r5, #4]
    cb7e:	f000 ff6b 	bl	da58 <____subdf3_from_thumb>
    cb82:	4642      	mov	r2, r8
    cb84:	2a00      	cmp	r2, #0
    cb86:	db37      	blt.n	cbf8 <atan+0x200>
    cb88:	1c06      	adds	r6, r0, #0
    cb8a:	1c0f      	adds	r7, r1, #0
    cb8c:	e74e      	b.n	ca2c <atan+0x34>
    cb8e:	4295      	cmp	r5, r2
    cb90:	d038      	beq.n	cc04 <atan+0x20c>
    cb92:	4641      	mov	r1, r8
    cb94:	2900      	cmp	r1, #0
    cb96:	dd59      	ble.n	cc4c <atan+0x254>
    cb98:	4e66      	ldr	r6, [pc, #408]	; (cd34 <atan+0x33c>)
    cb9a:	4f67      	ldr	r7, [pc, #412]	; (cd38 <atan+0x340>)
    cb9c:	e746      	b.n	ca2c <atan+0x34>
    cb9e:	4a67      	ldr	r2, [pc, #412]	; (cd3c <atan+0x344>)
    cba0:	4b67      	ldr	r3, [pc, #412]	; (cd40 <atan+0x348>)
    cba2:	f000 ff55 	bl	da50 <____adddf3_from_thumb>
    cba6:	4a67      	ldr	r2, [pc, #412]	; (cd44 <atan+0x34c>)
    cba8:	4b67      	ldr	r3, [pc, #412]	; (cd48 <atan+0x350>)
    cbaa:	f000 ff5d 	bl	da68 <____gtdf2_from_thumb>
    cbae:	2800      	cmp	r0, #0
    cbb0:	dd00      	ble.n	cbb4 <atan+0x1bc>
    cbb2:	e73b      	b.n	ca2c <atan+0x34>
    cbb4:	e74b      	b.n	ca4e <atan+0x56>
    cbb6:	f000 f8df 	bl	cd78 <fabs>
    cbba:	4b64      	ldr	r3, [pc, #400]	; (cd4c <atan+0x354>)
    cbbc:	1c06      	adds	r6, r0, #0
    cbbe:	1c0f      	adds	r7, r1, #0
    cbc0:	429d      	cmp	r5, r3
    cbc2:	dc35      	bgt.n	cc30 <atan+0x238>
    cbc4:	4b62      	ldr	r3, [pc, #392]	; (cd50 <atan+0x358>)
    cbc6:	429d      	cmp	r5, r3
    cbc8:	dd43      	ble.n	cc52 <atan+0x25a>
    cbca:	4a5e      	ldr	r2, [pc, #376]	; (cd44 <atan+0x34c>)
    cbcc:	4b5e      	ldr	r3, [pc, #376]	; (cd48 <atan+0x350>)
    cbce:	f000 ff43 	bl	da58 <____subdf3_from_thumb>
    cbd2:	4a5c      	ldr	r2, [pc, #368]	; (cd44 <atan+0x34c>)
    cbd4:	4b5c      	ldr	r3, [pc, #368]	; (cd48 <atan+0x350>)
    cbd6:	1c04      	adds	r4, r0, #0
    cbd8:	1c0d      	adds	r5, r1, #0
    cbda:	1c30      	adds	r0, r6, #0
    cbdc:	1c39      	adds	r1, r7, #0
    cbde:	f000 ff37 	bl	da50 <____adddf3_from_thumb>
    cbe2:	1c0b      	adds	r3, r1, #0
    cbe4:	1c02      	adds	r2, r0, #0
    cbe6:	1c29      	adds	r1, r5, #0
    cbe8:	1c20      	adds	r0, r4, #0
    cbea:	f000 ff21 	bl	da30 <____divdf3_from_thumb>
    cbee:	2301      	movs	r3, #1
    cbf0:	1c06      	adds	r6, r0, #0
    cbf2:	1c0f      	adds	r7, r1, #0
    cbf4:	469a      	mov	sl, r3
    cbf6:	e72d      	b.n	ca54 <atan+0x5c>
    cbf8:	2280      	movs	r2, #128	; 0x80
    cbfa:	0612      	lsls	r2, r2, #24
    cbfc:	1883      	adds	r3, r0, r2
    cbfe:	1c1e      	adds	r6, r3, #0
    cc00:	1c0f      	adds	r7, r1, #0
    cc02:	e713      	b.n	ca2c <atan+0x34>
    cc04:	2900      	cmp	r1, #0
    cc06:	d0c4      	beq.n	cb92 <atan+0x19a>
    cc08:	e708      	b.n	ca1c <atan+0x24>
    cc0a:	9802      	ldr	r0, [sp, #8]
    cc0c:	9903      	ldr	r1, [sp, #12]
    cc0e:	f000 ff1f 	bl	da50 <____adddf3_from_thumb>
    cc12:	1c02      	adds	r2, r0, #0
    cc14:	1c0b      	adds	r3, r1, #0
    cc16:	1c30      	adds	r0, r6, #0
    cc18:	1c39      	adds	r1, r7, #0
    cc1a:	f000 ff15 	bl	da48 <____muldf3_from_thumb>
    cc1e:	1c02      	adds	r2, r0, #0
    cc20:	1c0b      	adds	r3, r1, #0
    cc22:	1c30      	adds	r0, r6, #0
    cc24:	1c39      	adds	r1, r7, #0
    cc26:	f000 ff17 	bl	da58 <____subdf3_from_thumb>
    cc2a:	1c06      	adds	r6, r0, #0
    cc2c:	1c0f      	adds	r7, r1, #0
    cc2e:	e6fd      	b.n	ca2c <atan+0x34>
    cc30:	4b48      	ldr	r3, [pc, #288]	; (cd54 <atan+0x35c>)
    cc32:	429d      	cmp	r5, r3
    cc34:	dd28      	ble.n	cc88 <atan+0x290>
    cc36:	1c32      	adds	r2, r6, #0
    cc38:	1c3b      	adds	r3, r7, #0
    cc3a:	4847      	ldr	r0, [pc, #284]	; (cd58 <atan+0x360>)
    cc3c:	4947      	ldr	r1, [pc, #284]	; (cd5c <atan+0x364>)
    cc3e:	f000 fef7 	bl	da30 <____divdf3_from_thumb>
    cc42:	2203      	movs	r2, #3
    cc44:	1c06      	adds	r6, r0, #0
    cc46:	1c0f      	adds	r7, r1, #0
    cc48:	4692      	mov	sl, r2
    cc4a:	e703      	b.n	ca54 <atan+0x5c>
    cc4c:	4e44      	ldr	r6, [pc, #272]	; (cd60 <atan+0x368>)
    cc4e:	4f45      	ldr	r7, [pc, #276]	; (cd64 <atan+0x36c>)
    cc50:	e6ec      	b.n	ca2c <atan+0x34>
    cc52:	1c32      	adds	r2, r6, #0
    cc54:	1c3b      	adds	r3, r7, #0
    cc56:	f000 fefb 	bl	da50 <____adddf3_from_thumb>
    cc5a:	4a3a      	ldr	r2, [pc, #232]	; (cd44 <atan+0x34c>)
    cc5c:	4b3a      	ldr	r3, [pc, #232]	; (cd48 <atan+0x350>)
    cc5e:	f000 fefb 	bl	da58 <____subdf3_from_thumb>
    cc62:	4a41      	ldr	r2, [pc, #260]	; (cd68 <atan+0x370>)
    cc64:	4b41      	ldr	r3, [pc, #260]	; (cd6c <atan+0x374>)
    cc66:	1c04      	adds	r4, r0, #0
    cc68:	1c0d      	adds	r5, r1, #0
    cc6a:	1c30      	adds	r0, r6, #0
    cc6c:	1c39      	adds	r1, r7, #0
    cc6e:	f000 feef 	bl	da50 <____adddf3_from_thumb>
    cc72:	1c02      	adds	r2, r0, #0
    cc74:	1c0b      	adds	r3, r1, #0
    cc76:	1c20      	adds	r0, r4, #0
    cc78:	1c29      	adds	r1, r5, #0
    cc7a:	f000 fed9 	bl	da30 <____divdf3_from_thumb>
    cc7e:	2200      	movs	r2, #0
    cc80:	1c06      	adds	r6, r0, #0
    cc82:	1c0f      	adds	r7, r1, #0
    cc84:	4692      	mov	sl, r2
    cc86:	e6e5      	b.n	ca54 <atan+0x5c>
    cc88:	4a39      	ldr	r2, [pc, #228]	; (cd70 <atan+0x378>)
    cc8a:	4b3a      	ldr	r3, [pc, #232]	; (cd74 <atan+0x37c>)
    cc8c:	f000 fee4 	bl	da58 <____subdf3_from_thumb>
    cc90:	4a37      	ldr	r2, [pc, #220]	; (cd70 <atan+0x378>)
    cc92:	4b38      	ldr	r3, [pc, #224]	; (cd74 <atan+0x37c>)
    cc94:	1c04      	adds	r4, r0, #0
    cc96:	1c0d      	adds	r5, r1, #0
    cc98:	1c30      	adds	r0, r6, #0
    cc9a:	1c39      	adds	r1, r7, #0
    cc9c:	f000 fed4 	bl	da48 <____muldf3_from_thumb>
    cca0:	4a28      	ldr	r2, [pc, #160]	; (cd44 <atan+0x34c>)
    cca2:	4b29      	ldr	r3, [pc, #164]	; (cd48 <atan+0x350>)
    cca4:	f000 fed4 	bl	da50 <____adddf3_from_thumb>
    cca8:	1c02      	adds	r2, r0, #0
    ccaa:	1c0b      	adds	r3, r1, #0
    ccac:	1c20      	adds	r0, r4, #0
    ccae:	1c29      	adds	r1, r5, #0
    ccb0:	f000 febe 	bl	da30 <____divdf3_from_thumb>
    ccb4:	1c0f      	adds	r7, r1, #0
    ccb6:	2102      	movs	r1, #2
    ccb8:	1c06      	adds	r6, r0, #0
    ccba:	468a      	mov	sl, r1
    ccbc:	e6ca      	b.n	ca54 <atan+0x5c>
    ccbe:	46c0      	nop			; (mov r8, r8)
    ccc0:	7fffffff 	.word	0x7fffffff
    ccc4:	440fffff 	.word	0x440fffff
    ccc8:	7ff00000 	.word	0x7ff00000
    cccc:	3fdbffff 	.word	0x3fdbffff
    ccd0:	3e1fffff 	.word	0x3e1fffff
    ccd4:	3f90ad3a 	.word	0x3f90ad3a
    ccd8:	e322da11 	.word	0xe322da11
    ccdc:	3fa97b4b 	.word	0x3fa97b4b
    cce0:	24760deb 	.word	0x24760deb
    cce4:	3fb10d66 	.word	0x3fb10d66
    cce8:	a0d03d51 	.word	0xa0d03d51
    ccec:	3fb745cd 	.word	0x3fb745cd
    ccf0:	c54c206e 	.word	0xc54c206e
    ccf4:	3fc24924 	.word	0x3fc24924
    ccf8:	920083ff 	.word	0x920083ff
    ccfc:	3fd55555 	.word	0x3fd55555
    cd00:	5555550d 	.word	0x5555550d
    cd04:	bfa2b444 	.word	0xbfa2b444
    cd08:	2c6a6c2f 	.word	0x2c6a6c2f
    cd0c:	3fadde2d 	.word	0x3fadde2d
    cd10:	52defd9a 	.word	0x52defd9a
    cd14:	3fb3b0f2 	.word	0x3fb3b0f2
    cd18:	af749a6d 	.word	0xaf749a6d
    cd1c:	3fbc71c6 	.word	0x3fbc71c6
    cd20:	fe231671 	.word	0xfe231671
    cd24:	3fc99999 	.word	0x3fc99999
    cd28:	9998ebc4 	.word	0x9998ebc4
    cd2c:	0000dcdc 	.word	0x0000dcdc
    cd30:	0000dcfc 	.word	0x0000dcfc
    cd34:	3ff921fb 	.word	0x3ff921fb
    cd38:	54442d18 	.word	0x54442d18
    cd3c:	7e37e43c 	.word	0x7e37e43c
    cd40:	8800759c 	.word	0x8800759c
    cd44:	3ff00000 	.word	0x3ff00000
    cd48:	00000000 	.word	0x00000000
    cd4c:	3ff2ffff 	.word	0x3ff2ffff
    cd50:	3fe5ffff 	.word	0x3fe5ffff
    cd54:	40037fff 	.word	0x40037fff
    cd58:	bff00000 	.word	0xbff00000
    cd5c:	00000000 	.word	0x00000000
    cd60:	bff921fb 	.word	0xbff921fb
    cd64:	54442d18 	.word	0x54442d18
    cd68:	40000000 	.word	0x40000000
    cd6c:	00000000 	.word	0x00000000
    cd70:	3ff80000 	.word	0x3ff80000
    cd74:	00000000 	.word	0x00000000

0000cd78 <fabs>:
    cd78:	b510      	push	{r4, lr}
    cd7a:	1c03      	adds	r3, r0, #0
    cd7c:	4803      	ldr	r0, [pc, #12]	; (cd8c <fabs+0x14>)
    cd7e:	1c0a      	adds	r2, r1, #0
    cd80:	4003      	ands	r3, r0
    cd82:	1c18      	adds	r0, r3, #0
    cd84:	1c11      	adds	r1, r2, #0
    cd86:	bc10      	pop	{r4}
    cd88:	bc04      	pop	{r2}
    cd8a:	4710      	bx	r2
    cd8c:	7fffffff 	.word	0x7fffffff

0000cd90 <floor>:
    cd90:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd92:	465f      	mov	r7, fp
    cd94:	4656      	mov	r6, sl
    cd96:	464d      	mov	r5, r9
    cd98:	4644      	mov	r4, r8
    cd9a:	b4f0      	push	{r4, r5, r6, r7}
    cd9c:	2200      	movs	r2, #0
    cd9e:	2300      	movs	r3, #0
    cda0:	b082      	sub	sp, #8
    cda2:	9200      	str	r2, [sp, #0]
    cda4:	9301      	str	r3, [sp, #4]
    cda6:	0043      	lsls	r3, r0, #1
    cda8:	0d5a      	lsrs	r2, r3, #21
    cdaa:	4b4b      	ldr	r3, [pc, #300]	; (ced8 <floor+0x148>)
    cdac:	189b      	adds	r3, r3, r2
    cdae:	1c04      	adds	r4, r0, #0
    cdb0:	1c0d      	adds	r5, r1, #0
    cdb2:	1c06      	adds	r6, r0, #0
    cdb4:	4682      	mov	sl, r0
    cdb6:	4689      	mov	r9, r1
    cdb8:	4698      	mov	r8, r3
    cdba:	2b13      	cmp	r3, #19
    cdbc:	dc2e      	bgt.n	ce1c <floor+0x8c>
    cdbe:	2b00      	cmp	r3, #0
    cdc0:	db53      	blt.n	ce6a <floor+0xda>
    cdc2:	4b46      	ldr	r3, [pc, #280]	; (cedc <floor+0x14c>)
    cdc4:	4642      	mov	r2, r8
    cdc6:	4113      	asrs	r3, r2
    cdc8:	469b      	mov	fp, r3
    cdca:	1c0a      	adds	r2, r1, #0
    cdcc:	4003      	ands	r3, r0
    cdce:	4682      	mov	sl, r0
    cdd0:	4689      	mov	r9, r1
    cdd2:	431a      	orrs	r2, r3
    cdd4:	d017      	beq.n	ce06 <floor+0x76>
    cdd6:	4a42      	ldr	r2, [pc, #264]	; (cee0 <floor+0x150>)
    cdd8:	4b42      	ldr	r3, [pc, #264]	; (cee4 <floor+0x154>)
    cdda:	f000 fe39 	bl	da50 <____adddf3_from_thumb>
    cdde:	4a42      	ldr	r2, [pc, #264]	; (cee8 <floor+0x158>)
    cde0:	4b42      	ldr	r3, [pc, #264]	; (ceec <floor+0x15c>)
    cde2:	f000 fe41 	bl	da68 <____gtdf2_from_thumb>
    cde6:	2800      	cmp	r0, #0
    cde8:	dd07      	ble.n	cdfa <floor+0x6a>
    cdea:	2c00      	cmp	r4, #0
    cdec:	db4d      	blt.n	ce8a <floor+0xfa>
    cdee:	4652      	mov	r2, sl
    cdf0:	465b      	mov	r3, fp
    cdf2:	439a      	bics	r2, r3
    cdf4:	2400      	movs	r4, #0
    cdf6:	4692      	mov	sl, r2
    cdf8:	46a1      	mov	r9, r4
    cdfa:	4654      	mov	r4, sl
    cdfc:	464a      	mov	r2, r9
    cdfe:	9400      	str	r4, [sp, #0]
    ce00:	9201      	str	r2, [sp, #4]
    ce02:	9c00      	ldr	r4, [sp, #0]
    ce04:	9d01      	ldr	r5, [sp, #4]
    ce06:	1c29      	adds	r1, r5, #0
    ce08:	1c20      	adds	r0, r4, #0
    ce0a:	b002      	add	sp, #8
    ce0c:	bc3c      	pop	{r2, r3, r4, r5}
    ce0e:	4690      	mov	r8, r2
    ce10:	4699      	mov	r9, r3
    ce12:	46a2      	mov	sl, r4
    ce14:	46ab      	mov	fp, r5
    ce16:	bcf0      	pop	{r4, r5, r6, r7}
    ce18:	bc04      	pop	{r2}
    ce1a:	4710      	bx	r2
    ce1c:	2b33      	cmp	r3, #51	; 0x33
    ce1e:	dc19      	bgt.n	ce54 <floor+0xc4>
    ce20:	4b33      	ldr	r3, [pc, #204]	; (cef0 <floor+0x160>)
    ce22:	18d2      	adds	r2, r2, r3
    ce24:	2301      	movs	r3, #1
    ce26:	425b      	negs	r3, r3
    ce28:	40d3      	lsrs	r3, r2
    ce2a:	469b      	mov	fp, r3
    ce2c:	4689      	mov	r9, r1
    ce2e:	420b      	tst	r3, r1
    ce30:	d0e9      	beq.n	ce06 <floor+0x76>
    ce32:	4a2b      	ldr	r2, [pc, #172]	; (cee0 <floor+0x150>)
    ce34:	4b2b      	ldr	r3, [pc, #172]	; (cee4 <floor+0x154>)
    ce36:	f000 fe0b 	bl	da50 <____adddf3_from_thumb>
    ce3a:	4a2b      	ldr	r2, [pc, #172]	; (cee8 <floor+0x158>)
    ce3c:	4b2b      	ldr	r3, [pc, #172]	; (ceec <floor+0x15c>)
    ce3e:	f000 fe13 	bl	da68 <____gtdf2_from_thumb>
    ce42:	2800      	cmp	r0, #0
    ce44:	dd27      	ble.n	ce96 <floor+0x106>
    ce46:	2c00      	cmp	r4, #0
    ce48:	db27      	blt.n	ce9a <floor+0x10a>
    ce4a:	464a      	mov	r2, r9
    ce4c:	465b      	mov	r3, fp
    ce4e:	439a      	bics	r2, r3
    ce50:	4691      	mov	r9, r2
    ce52:	e7d2      	b.n	cdfa <floor+0x6a>
    ce54:	2380      	movs	r3, #128	; 0x80
    ce56:	00db      	lsls	r3, r3, #3
    ce58:	4598      	cmp	r8, r3
    ce5a:	d1d4      	bne.n	ce06 <floor+0x76>
    ce5c:	1c22      	adds	r2, r4, #0
    ce5e:	1c2b      	adds	r3, r5, #0
    ce60:	f000 fdf6 	bl	da50 <____adddf3_from_thumb>
    ce64:	1c04      	adds	r4, r0, #0
    ce66:	1c0d      	adds	r5, r1, #0
    ce68:	e7cd      	b.n	ce06 <floor+0x76>
    ce6a:	4a1d      	ldr	r2, [pc, #116]	; (cee0 <floor+0x150>)
    ce6c:	4b1d      	ldr	r3, [pc, #116]	; (cee4 <floor+0x154>)
    ce6e:	f000 fdef 	bl	da50 <____adddf3_from_thumb>
    ce72:	4a1d      	ldr	r2, [pc, #116]	; (cee8 <floor+0x158>)
    ce74:	4b1d      	ldr	r3, [pc, #116]	; (ceec <floor+0x15c>)
    ce76:	f000 fdf7 	bl	da68 <____gtdf2_from_thumb>
    ce7a:	2800      	cmp	r0, #0
    ce7c:	ddbd      	ble.n	cdfa <floor+0x6a>
    ce7e:	2c00      	cmp	r4, #0
    ce80:	db1a      	blt.n	ceb8 <floor+0x128>
    ce82:	2200      	movs	r2, #0
    ce84:	4692      	mov	sl, r2
    ce86:	4691      	mov	r9, r2
    ce88:	e7b7      	b.n	cdfa <floor+0x6a>
    ce8a:	2380      	movs	r3, #128	; 0x80
    ce8c:	035b      	lsls	r3, r3, #13
    ce8e:	4644      	mov	r4, r8
    ce90:	4123      	asrs	r3, r4
    ce92:	449a      	add	sl, r3
    ce94:	e7ab      	b.n	cdee <floor+0x5e>
    ce96:	46a2      	mov	sl, r4
    ce98:	e7af      	b.n	cdfa <floor+0x6a>
    ce9a:	4644      	mov	r4, r8
    ce9c:	2c14      	cmp	r4, #20
    ce9e:	d018      	beq.n	ced2 <floor+0x142>
    cea0:	4643      	mov	r3, r8
    cea2:	2234      	movs	r2, #52	; 0x34
    cea4:	1ad2      	subs	r2, r2, r3
    cea6:	2301      	movs	r3, #1
    cea8:	4093      	lsls	r3, r2
    ceaa:	444b      	add	r3, r9
    ceac:	4599      	cmp	r9, r3
    ceae:	d901      	bls.n	ceb4 <floor+0x124>
    ceb0:	2401      	movs	r4, #1
    ceb2:	44a2      	add	sl, r4
    ceb4:	4699      	mov	r9, r3
    ceb6:	e7c8      	b.n	ce4a <floor+0xba>
    ceb8:	4b0e      	ldr	r3, [pc, #56]	; (cef4 <floor+0x164>)
    ceba:	1c2a      	adds	r2, r5, #0
    cebc:	4033      	ands	r3, r6
    cebe:	431a      	orrs	r2, r3
    cec0:	d004      	beq.n	cecc <floor+0x13c>
    cec2:	4b0d      	ldr	r3, [pc, #52]	; (cef8 <floor+0x168>)
    cec4:	2400      	movs	r4, #0
    cec6:	469a      	mov	sl, r3
    cec8:	46a1      	mov	r9, r4
    ceca:	e796      	b.n	cdfa <floor+0x6a>
    cecc:	46b2      	mov	sl, r6
    cece:	46a9      	mov	r9, r5
    ced0:	e793      	b.n	cdfa <floor+0x6a>
    ced2:	2201      	movs	r2, #1
    ced4:	4492      	add	sl, r2
    ced6:	e7b8      	b.n	ce4a <floor+0xba>
    ced8:	fffffc01 	.word	0xfffffc01
    cedc:	000fffff 	.word	0x000fffff
    cee0:	7e37e43c 	.word	0x7e37e43c
    cee4:	8800759c 	.word	0x8800759c
	...
    cef0:	fffffbed 	.word	0xfffffbed
    cef4:	7fffffff 	.word	0x7fffffff
    cef8:	bff00000 	.word	0xbff00000

0000cefc <isnan>:
    cefc:	424a      	negs	r2, r1
    cefe:	4b04      	ldr	r3, [pc, #16]	; (cf10 <isnan+0x14>)
    cf00:	430a      	orrs	r2, r1
    cf02:	4003      	ands	r3, r0
    cf04:	0fd2      	lsrs	r2, r2, #31
    cf06:	4803      	ldr	r0, [pc, #12]	; (cf14 <isnan+0x18>)
    cf08:	431a      	orrs	r2, r3
    cf0a:	1a80      	subs	r0, r0, r2
    cf0c:	0fc0      	lsrs	r0, r0, #31
    cf0e:	4770      	bx	lr
    cf10:	7fffffff 	.word	0x7fffffff
    cf14:	7ff00000 	.word	0x7ff00000

0000cf18 <matherr>:
    cf18:	2000      	movs	r0, #0
    cf1a:	4770      	bx	lr

0000cf1c <scalbn>:
    cf1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf1e:	4647      	mov	r7, r8
    cf20:	b480      	push	{r7}
    cf22:	4f3b      	ldr	r7, [pc, #236]	; (d010 <scalbn+0xf4>)
    cf24:	1c03      	adds	r3, r0, #0
    cf26:	403b      	ands	r3, r7
    cf28:	4690      	mov	r8, r2
    cf2a:	151a      	asrs	r2, r3, #20
    cf2c:	1c05      	adds	r5, r0, #0
    cf2e:	1c0e      	adds	r6, r1, #0
    cf30:	2a00      	cmp	r2, #0
    cf32:	d121      	bne.n	cf78 <scalbn+0x5c>
    cf34:	4b37      	ldr	r3, [pc, #220]	; (d014 <scalbn+0xf8>)
    cf36:	4003      	ands	r3, r0
    cf38:	4319      	orrs	r1, r3
    cf3a:	d011      	beq.n	cf60 <scalbn+0x44>
    cf3c:	1c28      	adds	r0, r5, #0
    cf3e:	1c31      	adds	r1, r6, #0
    cf40:	4a35      	ldr	r2, [pc, #212]	; (d018 <scalbn+0xfc>)
    cf42:	4b36      	ldr	r3, [pc, #216]	; (d01c <scalbn+0x100>)
    cf44:	f000 fd80 	bl	da48 <____muldf3_from_thumb>
    cf48:	4b35      	ldr	r3, [pc, #212]	; (d020 <scalbn+0x104>)
    cf4a:	1c05      	adds	r5, r0, #0
    cf4c:	1c0e      	adds	r6, r1, #0
    cf4e:	4598      	cmp	r8, r3
    cf50:	da0d      	bge.n	cf6e <scalbn+0x52>
    cf52:	1c28      	adds	r0, r5, #0
    cf54:	4a33      	ldr	r2, [pc, #204]	; (d024 <scalbn+0x108>)
    cf56:	4b34      	ldr	r3, [pc, #208]	; (d028 <scalbn+0x10c>)
    cf58:	f000 fd76 	bl	da48 <____muldf3_from_thumb>
    cf5c:	1c05      	adds	r5, r0, #0
    cf5e:	1c0e      	adds	r6, r1, #0
    cf60:	1c28      	adds	r0, r5, #0
    cf62:	1c31      	adds	r1, r6, #0
    cf64:	bc04      	pop	{r2}
    cf66:	4690      	mov	r8, r2
    cf68:	bcf0      	pop	{r4, r5, r6, r7}
    cf6a:	bc04      	pop	{r2}
    cf6c:	4710      	bx	r2
    cf6e:	1c03      	adds	r3, r0, #0
    cf70:	403b      	ands	r3, r7
    cf72:	151b      	asrs	r3, r3, #20
    cf74:	1c1a      	adds	r2, r3, #0
    cf76:	3a36      	subs	r2, #54	; 0x36
    cf78:	4b2c      	ldr	r3, [pc, #176]	; (d02c <scalbn+0x110>)
    cf7a:	429a      	cmp	r2, r3
    cf7c:	d00e      	beq.n	cf9c <scalbn+0x80>
    cf7e:	4643      	mov	r3, r8
    cf80:	18d7      	adds	r7, r2, r3
    cf82:	4b2b      	ldr	r3, [pc, #172]	; (d030 <scalbn+0x114>)
    cf84:	429f      	cmp	r7, r3
    cf86:	dc12      	bgt.n	cfae <scalbn+0x92>
    cf88:	2f00      	cmp	r7, #0
    cf8a:	dd1d      	ble.n	cfc8 <scalbn+0xac>
    cf8c:	4a29      	ldr	r2, [pc, #164]	; (d034 <scalbn+0x118>)
    cf8e:	1c01      	adds	r1, r0, #0
    cf90:	4011      	ands	r1, r2
    cf92:	1c0b      	adds	r3, r1, #0
    cf94:	053a      	lsls	r2, r7, #20
    cf96:	4313      	orrs	r3, r2
    cf98:	1c1d      	adds	r5, r3, #0
    cf9a:	e7e1      	b.n	cf60 <scalbn+0x44>
    cf9c:	1c28      	adds	r0, r5, #0
    cf9e:	1c31      	adds	r1, r6, #0
    cfa0:	1c2a      	adds	r2, r5, #0
    cfa2:	1c33      	adds	r3, r6, #0
    cfa4:	f000 fd54 	bl	da50 <____adddf3_from_thumb>
    cfa8:	1c05      	adds	r5, r0, #0
    cfaa:	1c0e      	adds	r6, r1, #0
    cfac:	e7d8      	b.n	cf60 <scalbn+0x44>
    cfae:	1c2a      	adds	r2, r5, #0
    cfb0:	1c33      	adds	r3, r6, #0
    cfb2:	4821      	ldr	r0, [pc, #132]	; (d038 <scalbn+0x11c>)
    cfb4:	4921      	ldr	r1, [pc, #132]	; (d03c <scalbn+0x120>)
    cfb6:	f000 f849 	bl	d04c <copysign>
    cfba:	4a1f      	ldr	r2, [pc, #124]	; (d038 <scalbn+0x11c>)
    cfbc:	4b1f      	ldr	r3, [pc, #124]	; (d03c <scalbn+0x120>)
    cfbe:	f000 fd43 	bl	da48 <____muldf3_from_thumb>
    cfc2:	1c05      	adds	r5, r0, #0
    cfc4:	1c0e      	adds	r6, r1, #0
    cfc6:	e7cb      	b.n	cf60 <scalbn+0x44>
    cfc8:	1c3b      	adds	r3, r7, #0
    cfca:	3336      	adds	r3, #54	; 0x36
    cfcc:	dc0f      	bgt.n	cfee <scalbn+0xd2>
    cfce:	4b1c      	ldr	r3, [pc, #112]	; (d040 <scalbn+0x124>)
    cfd0:	4598      	cmp	r8, r3
    cfd2:	dcec      	bgt.n	cfae <scalbn+0x92>
    cfd4:	1c2a      	adds	r2, r5, #0
    cfd6:	1c33      	adds	r3, r6, #0
    cfd8:	4812      	ldr	r0, [pc, #72]	; (d024 <scalbn+0x108>)
    cfda:	4913      	ldr	r1, [pc, #76]	; (d028 <scalbn+0x10c>)
    cfdc:	f000 f836 	bl	d04c <copysign>
    cfe0:	4a10      	ldr	r2, [pc, #64]	; (d024 <scalbn+0x108>)
    cfe2:	4b11      	ldr	r3, [pc, #68]	; (d028 <scalbn+0x10c>)
    cfe4:	f000 fd30 	bl	da48 <____muldf3_from_thumb>
    cfe8:	1c05      	adds	r5, r0, #0
    cfea:	1c0e      	adds	r6, r1, #0
    cfec:	e7b8      	b.n	cf60 <scalbn+0x44>
    cfee:	4b11      	ldr	r3, [pc, #68]	; (d034 <scalbn+0x118>)
    cff0:	4018      	ands	r0, r3
    cff2:	1c3b      	adds	r3, r7, #0
    cff4:	3336      	adds	r3, #54	; 0x36
    cff6:	051b      	lsls	r3, r3, #20
    cff8:	1c01      	adds	r1, r0, #0
    cffa:	4319      	orrs	r1, r3
    cffc:	1c08      	adds	r0, r1, #0
    cffe:	4a11      	ldr	r2, [pc, #68]	; (d044 <scalbn+0x128>)
    d000:	4b11      	ldr	r3, [pc, #68]	; (d048 <scalbn+0x12c>)
    d002:	1c31      	adds	r1, r6, #0
    d004:	f000 fd20 	bl	da48 <____muldf3_from_thumb>
    d008:	1c05      	adds	r5, r0, #0
    d00a:	1c0e      	adds	r6, r1, #0
    d00c:	e7a8      	b.n	cf60 <scalbn+0x44>
    d00e:	46c0      	nop			; (mov r8, r8)
    d010:	7ff00000 	.word	0x7ff00000
    d014:	7fffffff 	.word	0x7fffffff
    d018:	43500000 	.word	0x43500000
    d01c:	00000000 	.word	0x00000000
    d020:	ffff3cb0 	.word	0xffff3cb0
    d024:	01a56e1f 	.word	0x01a56e1f
    d028:	c2f8f359 	.word	0xc2f8f359
    d02c:	000007ff 	.word	0x000007ff
    d030:	000007fe 	.word	0x000007fe
    d034:	800fffff 	.word	0x800fffff
    d038:	7e37e43c 	.word	0x7e37e43c
    d03c:	8800759c 	.word	0x8800759c
    d040:	0000c350 	.word	0x0000c350
    d044:	3c900000 	.word	0x3c900000
    d048:	00000000 	.word	0x00000000

0000d04c <copysign>:
    d04c:	b530      	push	{r4, r5, lr}
    d04e:	4b07      	ldr	r3, [pc, #28]	; (d06c <copysign+0x20>)
    d050:	1c04      	adds	r4, r0, #0
    d052:	401c      	ands	r4, r3
    d054:	2380      	movs	r3, #128	; 0x80
    d056:	1c15      	adds	r5, r2, #0
    d058:	061b      	lsls	r3, r3, #24
    d05a:	402b      	ands	r3, r5
    d05c:	1c0a      	adds	r2, r1, #0
    d05e:	431c      	orrs	r4, r3
    d060:	1c20      	adds	r0, r4, #0
    d062:	1c11      	adds	r1, r2, #0
    d064:	bc30      	pop	{r4, r5}
    d066:	bc04      	pop	{r2}
    d068:	4710      	bx	r2
    d06a:	46c0      	nop			; (mov r8, r8)
    d06c:	7fffffff 	.word	0x7fffffff

0000d070 <__gedf2>:
    d070:	e3e0c000 	mvn	ip, #0
    d074:	ea000002 	b	d084 <__cmpdf2+0x4>

0000d078 <__ledf2>:
    d078:	e3a0c001 	mov	ip, #1
    d07c:	ea000000 	b	d084 <__cmpdf2+0x4>

0000d080 <__cmpdf2>:
    d080:	e3a0c001 	mov	ip, #1
    d084:	e50dc004 	str	ip, [sp, #-4]
    d088:	e1a0c080 	lsl	ip, r0, #1
    d08c:	e1f0cacc 	mvns	ip, ip, asr #21
    d090:	e1a0c082 	lsl	ip, r2, #1
    d094:	11f0cacc 	mvnsne	ip, ip, asr #21
    d098:	0a00000d 	beq	d0d4 <__cmpdf2+0x54>
    d09c:	e191c080 	orrs	ip, r1, r0, lsl #1
    d0a0:	0193c082 	orrseq	ip, r3, r2, lsl #1
    d0a4:	11300002 	teqne	r0, r2
    d0a8:	01310003 	teqeq	r1, r3
    d0ac:	03a00000 	moveq	r0, #0
    d0b0:	012fff1e 	bxeq	lr
    d0b4:	e3700000 	cmn	r0, #0
    d0b8:	e1300002 	teq	r0, r2
    d0bc:	51500002 	cmppl	r0, r2
    d0c0:	01510003 	cmpeq	r1, r3
    d0c4:	21a00fc2 	asrcs	r0, r2, #31
    d0c8:	31e00fc2 	mvncc	r0, r2, asr #31
    d0cc:	e3800001 	orr	r0, r0, #1
    d0d0:	e12fff1e 	bx	lr
    d0d4:	e1a0c080 	lsl	ip, r0, #1
    d0d8:	e1f0cacc 	mvns	ip, ip, asr #21
    d0dc:	1a000001 	bne	d0e8 <__cmpdf2+0x68>
    d0e0:	e191c600 	orrs	ip, r1, r0, lsl #12
    d0e4:	1a000004 	bne	d0fc <__cmpdf2+0x7c>
    d0e8:	e1a0c082 	lsl	ip, r2, #1
    d0ec:	e1f0cacc 	mvns	ip, ip, asr #21
    d0f0:	1affffe9 	bne	d09c <__cmpdf2+0x1c>
    d0f4:	e193c602 	orrs	ip, r3, r2, lsl #12
    d0f8:	0affffe7 	beq	d09c <__cmpdf2+0x1c>
    d0fc:	e51d0004 	ldr	r0, [sp, #-4]
    d100:	e12fff1e 	bx	lr

0000d104 <__aeabi_cdrcmple>:
    d104:	e1a0c000 	mov	ip, r0
    d108:	e1a00002 	mov	r0, r2
    d10c:	e1a0200c 	mov	r2, ip
    d110:	e1a0c001 	mov	ip, r1
    d114:	e1a01003 	mov	r1, r3
    d118:	e1a0300c 	mov	r3, ip
    d11c:	eaffffff 	b	d120 <__aeabi_cdcmpeq>

0000d120 <__aeabi_cdcmpeq>:
    d120:	e92d4001 	push	{r0, lr}
    d124:	ebffffd5 	bl	d080 <__cmpdf2>
    d128:	e3500000 	cmp	r0, #0
    d12c:	43700000 	cmnmi	r0, #0
    d130:	e8bd4001 	pop	{r0, lr}
    d134:	e12fff1e 	bx	lr

0000d138 <__aeabi_dcmpeq>:
    d138:	e52de008 	str	lr, [sp, #-8]!
    d13c:	ebfffff7 	bl	d120 <__aeabi_cdcmpeq>
    d140:	03a00001 	moveq	r0, #1
    d144:	13a00000 	movne	r0, #0
    d148:	e49de008 	ldr	lr, [sp], #8
    d14c:	e12fff1e 	bx	lr

0000d150 <__aeabi_dcmplt>:
    d150:	e52de008 	str	lr, [sp, #-8]!
    d154:	ebfffff1 	bl	d120 <__aeabi_cdcmpeq>
    d158:	33a00001 	movcc	r0, #1
    d15c:	23a00000 	movcs	r0, #0
    d160:	e49de008 	ldr	lr, [sp], #8
    d164:	e12fff1e 	bx	lr

0000d168 <__aeabi_dcmple>:
    d168:	e52de008 	str	lr, [sp, #-8]!
    d16c:	ebffffeb 	bl	d120 <__aeabi_cdcmpeq>
    d170:	93a00001 	movls	r0, #1
    d174:	83a00000 	movhi	r0, #0
    d178:	e49de008 	ldr	lr, [sp], #8
    d17c:	e12fff1e 	bx	lr

0000d180 <__aeabi_dcmpge>:
    d180:	e52de008 	str	lr, [sp, #-8]!
    d184:	ebffffde 	bl	d104 <__aeabi_cdrcmple>
    d188:	93a00001 	movls	r0, #1
    d18c:	83a00000 	movhi	r0, #0
    d190:	e49de008 	ldr	lr, [sp], #8
    d194:	e12fff1e 	bx	lr

0000d198 <__aeabi_dcmpgt>:
    d198:	e52de008 	str	lr, [sp, #-8]!
    d19c:	ebffffd8 	bl	d104 <__aeabi_cdrcmple>
    d1a0:	33a00001 	movcc	r0, #1
    d1a4:	23a00000 	movcs	r0, #0
    d1a8:	e49de008 	ldr	lr, [sp], #8
    d1ac:	e12fff1e 	bx	lr

0000d1b0 <__aeabi_d2iz>:
    d1b0:	e1a02080 	lsl	r2, r0, #1
    d1b4:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    d1b8:	2a00000c 	bcs	d1f0 <__aeabi_d2iz+0x40>
    d1bc:	5a000009 	bpl	d1e8 <__aeabi_d2iz+0x38>
    d1c0:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    d1c4:	e0532ac2 	subs	r2, r3, r2, asr #21
    d1c8:	9a00000a 	bls	d1f8 <__aeabi_d2iz+0x48>
    d1cc:	e1a03580 	lsl	r3, r0, #11
    d1d0:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    d1d4:	e1833aa1 	orr	r3, r3, r1, lsr #21
    d1d8:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    d1dc:	e1a00233 	lsr	r0, r3, r2
    d1e0:	12600000 	rsbne	r0, r0, #0
    d1e4:	e12fff1e 	bx	lr
    d1e8:	e3a00000 	mov	r0, #0
    d1ec:	e12fff1e 	bx	lr
    d1f0:	e1911600 	orrs	r1, r1, r0, lsl #12
    d1f4:	1a000002 	bne	d204 <__aeabi_d2iz+0x54>
    d1f8:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    d1fc:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    d200:	e12fff1e 	bx	lr
    d204:	e3a00000 	mov	r0, #0
    d208:	e12fff1e 	bx	lr

0000d20c <__aeabi_d2f>:
    d20c:	e1a02080 	lsl	r2, r0, #1
    d210:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
    d214:	2253c602 	subscs	ip, r3, #2097152	; 0x200000
    d218:	227cc57f 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    d21c:	9a000006 	bls	d23c <__aeabi_d2f+0x30>
    d220:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
    d224:	e1a02181 	lsl	r2, r1, #3
    d228:	e18c1ea1 	orr	r1, ip, r1, lsr #29
    d22c:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
    d230:	e0a10103 	adc	r0, r1, r3, lsl #2
    d234:	03c00001 	biceq	r0, r0, #1
    d238:	e12fff1e 	bx	lr
    d23c:	e3100101 	tst	r0, #1073741824	; 0x40000000
    d240:	1a00000f 	bne	d284 <__aeabi_d2f+0x78>
    d244:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
    d248:	b2000102 	andlt	r0, r0, #-2147483648	; 0x80000000
    d24c:	b12fff1e 	bxlt	lr
    d250:	e3800601 	orr	r0, r0, #1048576	; 0x100000
    d254:	e1a02aa2 	lsr	r2, r2, #21
    d258:	e2622018 	rsb	r2, r2, #24
    d25c:	e262c020 	rsb	ip, r2, #32
    d260:	e1b03c11 	lsls	r3, r1, ip
    d264:	e1a01231 	lsr	r1, r1, r2
    d268:	13811001 	orrne	r1, r1, #1
    d26c:	e1a03580 	lsl	r3, r0, #11
    d270:	e1a035a3 	lsr	r3, r3, #11
    d274:	e1811c13 	orr	r1, r1, r3, lsl ip
    d278:	e1a03233 	lsr	r3, r3, r2
    d27c:	e1a03083 	lsl	r3, r3, #1
    d280:	eaffffe6 	b	d220 <__aeabi_d2f+0x14>
    d284:	e1f03ac2 	mvns	r3, r2, asr #21
    d288:	1a000003 	bne	d29c <__aeabi_d2f+0x90>
    d28c:	e1913600 	orrs	r3, r1, r0, lsl #12
    d290:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
    d294:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
    d298:	112fff1e 	bxne	lr
    d29c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    d2a0:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    d2a4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    d2a8:	e12fff1e 	bx	lr

0000d2ac <__aeabi_frsub>:
    d2ac:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    d2b0:	ea000000 	b	d2b8 <__addsf3>

0000d2b4 <__aeabi_fsub>:
    d2b4:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

0000d2b8 <__addsf3>:
    d2b8:	e1b02080 	lsls	r2, r0, #1
    d2bc:	11b03081 	lslsne	r3, r1, #1
    d2c0:	11320003 	teqne	r2, r3
    d2c4:	11f0cc42 	mvnsne	ip, r2, asr #24
    d2c8:	11f0cc43 	mvnsne	ip, r3, asr #24
    d2cc:	0a000047 	beq	d3f0 <__addsf3+0x138>
    d2d0:	e1a02c22 	lsr	r2, r2, #24
    d2d4:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    d2d8:	c0822003 	addgt	r2, r2, r3
    d2dc:	c0201001 	eorgt	r1, r0, r1
    d2e0:	c0210000 	eorgt	r0, r1, r0
    d2e4:	c0201001 	eorgt	r1, r0, r1
    d2e8:	b2633000 	rsblt	r3, r3, #0
    d2ec:	e3530019 	cmp	r3, #25
    d2f0:	812fff1e 	bxhi	lr
    d2f4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    d2f8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    d2fc:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    d300:	12600000 	rsbne	r0, r0, #0
    d304:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    d308:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    d30c:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    d310:	12611000 	rsbne	r1, r1, #0
    d314:	e1320003 	teq	r2, r3
    d318:	0a00002e 	beq	d3d8 <__addsf3+0x120>
    d31c:	e2422001 	sub	r2, r2, #1
    d320:	e0900351 	adds	r0, r0, r1, asr r3
    d324:	e2633020 	rsb	r3, r3, #32
    d328:	e1a01311 	lsl	r1, r1, r3
    d32c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    d330:	5a000001 	bpl	d33c <__addsf3+0x84>
    d334:	e2711000 	rsbs	r1, r1, #0
    d338:	e2e00000 	rsc	r0, r0, #0
    d33c:	e3500502 	cmp	r0, #8388608	; 0x800000
    d340:	3a00000b 	bcc	d374 <__addsf3+0xbc>
    d344:	e3500401 	cmp	r0, #16777216	; 0x1000000
    d348:	3a000004 	bcc	d360 <__addsf3+0xa8>
    d34c:	e1b000a0 	lsrs	r0, r0, #1
    d350:	e1a01061 	rrx	r1, r1
    d354:	e2822001 	add	r2, r2, #1
    d358:	e35200fe 	cmp	r2, #254	; 0xfe
    d35c:	2a000038 	bcs	d444 <__addsf3+0x18c>
    d360:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    d364:	e0a00b82 	adc	r0, r0, r2, lsl #23
    d368:	03c00001 	biceq	r0, r0, #1
    d36c:	e1800003 	orr	r0, r0, r3
    d370:	e12fff1e 	bx	lr
    d374:	e1b01081 	lsls	r1, r1, #1
    d378:	e0a00000 	adc	r0, r0, r0
    d37c:	e3100502 	tst	r0, #8388608	; 0x800000
    d380:	e2422001 	sub	r2, r2, #1
    d384:	1afffff5 	bne	d360 <__addsf3+0xa8>
    d388:	e1b0c620 	lsrs	ip, r0, #12
    d38c:	01a00600 	lsleq	r0, r0, #12
    d390:	0242200c 	subeq	r2, r2, #12
    d394:	e31008ff 	tst	r0, #16711680	; 0xff0000
    d398:	01a00400 	lsleq	r0, r0, #8
    d39c:	02422008 	subeq	r2, r2, #8
    d3a0:	e310060f 	tst	r0, #15728640	; 0xf00000
    d3a4:	01a00200 	lsleq	r0, r0, #4
    d3a8:	02422004 	subeq	r2, r2, #4
    d3ac:	e3100503 	tst	r0, #12582912	; 0xc00000
    d3b0:	01a00100 	lsleq	r0, r0, #2
    d3b4:	02422002 	subeq	r2, r2, #2
    d3b8:	e3500502 	cmp	r0, #8388608	; 0x800000
    d3bc:	31a00080 	lslcc	r0, r0, #1
    d3c0:	e2d22000 	sbcs	r2, r2, #0
    d3c4:	a0800b82 	addge	r0, r0, r2, lsl #23
    d3c8:	b2622000 	rsblt	r2, r2, #0
    d3cc:	a1800003 	orrge	r0, r0, r3
    d3d0:	b1830230 	orrlt	r0, r3, r0, lsr r2
    d3d4:	e12fff1e 	bx	lr
    d3d8:	e3320000 	teq	r2, #0
    d3dc:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    d3e0:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    d3e4:	02822001 	addeq	r2, r2, #1
    d3e8:	12433001 	subne	r3, r3, #1
    d3ec:	eaffffca 	b	d31c <__addsf3+0x64>
    d3f0:	e1a03081 	lsl	r3, r1, #1
    d3f4:	e1f0cc42 	mvns	ip, r2, asr #24
    d3f8:	11f0cc43 	mvnsne	ip, r3, asr #24
    d3fc:	0a000013 	beq	d450 <__addsf3+0x198>
    d400:	e1320003 	teq	r2, r3
    d404:	0a000002 	beq	d414 <__addsf3+0x15c>
    d408:	e3320000 	teq	r2, #0
    d40c:	01a00001 	moveq	r0, r1
    d410:	e12fff1e 	bx	lr
    d414:	e1300001 	teq	r0, r1
    d418:	13a00000 	movne	r0, #0
    d41c:	112fff1e 	bxne	lr
    d420:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    d424:	1a000002 	bne	d434 <__addsf3+0x17c>
    d428:	e1b00080 	lsls	r0, r0, #1
    d42c:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    d430:	e12fff1e 	bx	lr
    d434:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    d438:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    d43c:	312fff1e 	bxcc	lr
    d440:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    d444:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    d448:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    d44c:	e12fff1e 	bx	lr
    d450:	e1f02c42 	mvns	r2, r2, asr #24
    d454:	11a00001 	movne	r0, r1
    d458:	01f03c43 	mvnseq	r3, r3, asr #24
    d45c:	11a01000 	movne	r1, r0
    d460:	e1b02480 	lsls	r2, r0, #9
    d464:	01b03481 	lslseq	r3, r1, #9
    d468:	01300001 	teqeq	r0, r1
    d46c:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    d470:	e12fff1e 	bx	lr

0000d474 <__aeabi_ui2f>:
    d474:	e3a03000 	mov	r3, #0
    d478:	ea000001 	b	d484 <__aeabi_i2f+0x8>

0000d47c <__aeabi_i2f>:
    d47c:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    d480:	42600000 	rsbmi	r0, r0, #0
    d484:	e1b0c000 	movs	ip, r0
    d488:	012fff1e 	bxeq	lr
    d48c:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    d490:	e1a01000 	mov	r1, r0
    d494:	e3a00000 	mov	r0, #0
    d498:	ea00000f 	b	d4dc <__aeabi_l2f+0x30>

0000d49c <__aeabi_ul2f>:
    d49c:	e1902001 	orrs	r2, r0, r1
    d4a0:	012fff1e 	bxeq	lr
    d4a4:	e3a03000 	mov	r3, #0
    d4a8:	ea000005 	b	d4c4 <__aeabi_l2f+0x18>

0000d4ac <__aeabi_l2f>:
    d4ac:	e1902001 	orrs	r2, r0, r1
    d4b0:	012fff1e 	bxeq	lr
    d4b4:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    d4b8:	5a000001 	bpl	d4c4 <__aeabi_l2f+0x18>
    d4bc:	e2700000 	rsbs	r0, r0, #0
    d4c0:	e2e11000 	rsc	r1, r1, #0
    d4c4:	e1b0c001 	movs	ip, r1
    d4c8:	01a0c000 	moveq	ip, r0
    d4cc:	01a01000 	moveq	r1, r0
    d4d0:	03a00000 	moveq	r0, #0
    d4d4:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    d4d8:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    d4dc:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    d4e0:	e3a02017 	mov	r2, #23
    d4e4:	e35c0801 	cmp	ip, #65536	; 0x10000
    d4e8:	21a0c82c 	lsrcs	ip, ip, #16
    d4ec:	22422010 	subcs	r2, r2, #16
    d4f0:	e35c0c01 	cmp	ip, #256	; 0x100
    d4f4:	21a0c42c 	lsrcs	ip, ip, #8
    d4f8:	22422008 	subcs	r2, r2, #8
    d4fc:	e35c0010 	cmp	ip, #16
    d500:	21a0c22c 	lsrcs	ip, ip, #4
    d504:	22422004 	subcs	r2, r2, #4
    d508:	e35c0004 	cmp	ip, #4
    d50c:	22422002 	subcs	r2, r2, #2
    d510:	304220ac 	subcc	r2, r2, ip, lsr #1
    d514:	e05221ac 	subs	r2, r2, ip, lsr #3
    d518:	e0433b82 	sub	r3, r3, r2, lsl #23
    d51c:	ba000006 	blt	d53c <__aeabi_l2f+0x90>
    d520:	e0833211 	add	r3, r3, r1, lsl r2
    d524:	e1a0c210 	lsl	ip, r0, r2
    d528:	e2622020 	rsb	r2, r2, #32
    d52c:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    d530:	e0a30230 	adc	r0, r3, r0, lsr r2
    d534:	03c00001 	biceq	r0, r0, #1
    d538:	e12fff1e 	bx	lr
    d53c:	e2822020 	add	r2, r2, #32
    d540:	e1a0c211 	lsl	ip, r1, r2
    d544:	e2622020 	rsb	r2, r2, #32
    d548:	e190008c 	orrs	r0, r0, ip, lsl #1
    d54c:	e0a30231 	adc	r0, r3, r1, lsr r2
    d550:	01c00fac 	biceq	r0, r0, ip, lsr #31
    d554:	e12fff1e 	bx	lr

0000d558 <__aeabi_fmul>:
    d558:	e3a0c0ff 	mov	ip, #255	; 0xff
    d55c:	e01c2ba0 	ands	r2, ip, r0, lsr #23
    d560:	101c3ba1 	andsne	r3, ip, r1, lsr #23
    d564:	1132000c 	teqne	r2, ip
    d568:	1133000c 	teqne	r3, ip
    d56c:	0a00003e 	beq	d66c <__aeabi_fmul+0x114>
    d570:	e0822003 	add	r2, r2, r3
    d574:	e020c001 	eor	ip, r0, r1
    d578:	e1b00480 	lsls	r0, r0, #9
    d57c:	11b01481 	lslsne	r1, r1, #9
    d580:	0a000010 	beq	d5c8 <__aeabi_fmul+0x70>
    d584:	e3a03302 	mov	r3, #134217728	; 0x8000000
    d588:	e18302a0 	orr	r0, r3, r0, lsr #5
    d58c:	e18312a1 	orr	r1, r3, r1, lsr #5
    d590:	e0813190 	umull	r3, r1, r0, r1
    d594:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
    d598:	e3510502 	cmp	r1, #8388608	; 0x800000
    d59c:	31a01081 	lslcc	r1, r1, #1
    d5a0:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    d5a4:	31a03083 	lslcc	r3, r3, #1
    d5a8:	e1800001 	orr	r0, r0, r1
    d5ac:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    d5b0:	e35200fd 	cmp	r2, #253	; 0xfd
    d5b4:	8a00000f 	bhi	d5f8 <__aeabi_fmul+0xa0>
    d5b8:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    d5bc:	e0a00b82 	adc	r0, r0, r2, lsl #23
    d5c0:	03c00001 	biceq	r0, r0, #1
    d5c4:	e12fff1e 	bx	lr
    d5c8:	e3300000 	teq	r0, #0
    d5cc:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
    d5d0:	01a01481 	lsleq	r1, r1, #9
    d5d4:	e18c04a0 	orr	r0, ip, r0, lsr #9
    d5d8:	e18004a1 	orr	r0, r0, r1, lsr #9
    d5dc:	e252207f 	subs	r2, r2, #127	; 0x7f
    d5e0:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    d5e4:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    d5e8:	c12fff1e 	bxgt	lr
    d5ec:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    d5f0:	e3a03000 	mov	r3, #0
    d5f4:	e2522001 	subs	r2, r2, #1
    d5f8:	ca000035 	bgt	d6d4 <__aeabi_fmul+0x17c>
    d5fc:	e3720019 	cmn	r2, #25
    d600:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    d604:	d12fff1e 	bxle	lr
    d608:	e2622000 	rsb	r2, r2, #0
    d60c:	e1b01080 	lsls	r1, r0, #1
    d610:	e1a01231 	lsr	r1, r1, r2
    d614:	e2622020 	rsb	r2, r2, #32
    d618:	e1a0c210 	lsl	ip, r0, r2
    d61c:	e1b00061 	rrxs	r0, r1
    d620:	e2a00000 	adc	r0, r0, #0
    d624:	e193308c 	orrs	r3, r3, ip, lsl #1
    d628:	01c00fac 	biceq	r0, r0, ip, lsr #31
    d62c:	e12fff1e 	bx	lr
    d630:	e3320000 	teq	r2, #0
    d634:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
    d638:	01a00080 	lsleq	r0, r0, #1
    d63c:	03100502 	tsteq	r0, #8388608	; 0x800000
    d640:	02422001 	subeq	r2, r2, #1
    d644:	0afffffb 	beq	d638 <__aeabi_fmul+0xe0>
    d648:	e180000c 	orr	r0, r0, ip
    d64c:	e3330000 	teq	r3, #0
    d650:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    d654:	01a01081 	lsleq	r1, r1, #1
    d658:	03110502 	tsteq	r1, #8388608	; 0x800000
    d65c:	02433001 	subeq	r3, r3, #1
    d660:	0afffffb 	beq	d654 <__aeabi_fmul+0xfc>
    d664:	e181100c 	orr	r1, r1, ip
    d668:	eaffffc0 	b	d570 <__aeabi_fmul+0x18>
    d66c:	e00c3ba1 	and	r3, ip, r1, lsr #23
    d670:	e132000c 	teq	r2, ip
    d674:	1133000c 	teqne	r3, ip
    d678:	0a000005 	beq	d694 <__aeabi_fmul+0x13c>
    d67c:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
    d680:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
    d684:	1affffe9 	bne	d630 <__aeabi_fmul+0xd8>
    d688:	e0200001 	eor	r0, r0, r1
    d68c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    d690:	e12fff1e 	bx	lr
    d694:	e3300000 	teq	r0, #0
    d698:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    d69c:	01a00001 	moveq	r0, r1
    d6a0:	13310000 	teqne	r1, #0
    d6a4:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    d6a8:	0a00000d 	beq	d6e4 <__aeabi_fmul+0x18c>
    d6ac:	e132000c 	teq	r2, ip
    d6b0:	1a000001 	bne	d6bc <__aeabi_fmul+0x164>
    d6b4:	e1b02480 	lsls	r2, r0, #9
    d6b8:	1a000009 	bne	d6e4 <__aeabi_fmul+0x18c>
    d6bc:	e133000c 	teq	r3, ip
    d6c0:	1a000002 	bne	d6d0 <__aeabi_fmul+0x178>
    d6c4:	e1b03481 	lsls	r3, r1, #9
    d6c8:	11a00001 	movne	r0, r1
    d6cc:	1a000004 	bne	d6e4 <__aeabi_fmul+0x18c>
    d6d0:	e0200001 	eor	r0, r0, r1
    d6d4:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    d6d8:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    d6dc:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    d6e0:	e12fff1e 	bx	lr
    d6e4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    d6e8:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    d6ec:	e12fff1e 	bx	lr

0000d6f0 <__aeabi_fdiv>:
    d6f0:	e3a0c0ff 	mov	ip, #255	; 0xff
    d6f4:	e01c2ba0 	ands	r2, ip, r0, lsr #23
    d6f8:	101c3ba1 	andsne	r3, ip, r1, lsr #23
    d6fc:	1132000c 	teqne	r2, ip
    d700:	1133000c 	teqne	r3, ip
    d704:	0a00003a 	beq	d7f4 <__aeabi_fdiv+0x104>
    d708:	e0422003 	sub	r2, r2, r3
    d70c:	e020c001 	eor	ip, r0, r1
    d710:	e1b01481 	lsls	r1, r1, #9
    d714:	e1a00480 	lsl	r0, r0, #9
    d718:	0a00001c 	beq	d790 <__aeabi_fdiv+0xa0>
    d71c:	e3a03201 	mov	r3, #268435456	; 0x10000000
    d720:	e1831221 	orr	r1, r3, r1, lsr #4
    d724:	e1833220 	orr	r3, r3, r0, lsr #4
    d728:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
    d72c:	e1530001 	cmp	r3, r1
    d730:	31a03083 	lslcc	r3, r3, #1
    d734:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    d738:	e3a0c502 	mov	ip, #8388608	; 0x800000
    d73c:	e1530001 	cmp	r3, r1
    d740:	20433001 	subcs	r3, r3, r1
    d744:	2180000c 	orrcs	r0, r0, ip
    d748:	e15300a1 	cmp	r3, r1, lsr #1
    d74c:	204330a1 	subcs	r3, r3, r1, lsr #1
    d750:	218000ac 	orrcs	r0, r0, ip, lsr #1
    d754:	e1530121 	cmp	r3, r1, lsr #2
    d758:	20433121 	subcs	r3, r3, r1, lsr #2
    d75c:	2180012c 	orrcs	r0, r0, ip, lsr #2
    d760:	e15301a1 	cmp	r3, r1, lsr #3
    d764:	204331a1 	subcs	r3, r3, r1, lsr #3
    d768:	218001ac 	orrcs	r0, r0, ip, lsr #3
    d76c:	e1b03203 	lsls	r3, r3, #4
    d770:	11b0c22c 	lsrsne	ip, ip, #4
    d774:	1afffff0 	bne	d73c <__aeabi_fdiv+0x4c>
    d778:	e35200fd 	cmp	r2, #253	; 0xfd
    d77c:	8affff9d 	bhi	d5f8 <__aeabi_fmul+0xa0>
    d780:	e1530001 	cmp	r3, r1
    d784:	e0a00b82 	adc	r0, r0, r2, lsl #23
    d788:	03c00001 	biceq	r0, r0, #1
    d78c:	e12fff1e 	bx	lr
    d790:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
    d794:	e18c04a0 	orr	r0, ip, r0, lsr #9
    d798:	e292207f 	adds	r2, r2, #127	; 0x7f
    d79c:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    d7a0:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    d7a4:	c12fff1e 	bxgt	lr
    d7a8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    d7ac:	e3a03000 	mov	r3, #0
    d7b0:	e2522001 	subs	r2, r2, #1
    d7b4:	eaffff8f 	b	d5f8 <__aeabi_fmul+0xa0>
    d7b8:	e3320000 	teq	r2, #0
    d7bc:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
    d7c0:	01a00080 	lsleq	r0, r0, #1
    d7c4:	03100502 	tsteq	r0, #8388608	; 0x800000
    d7c8:	02422001 	subeq	r2, r2, #1
    d7cc:	0afffffb 	beq	d7c0 <__aeabi_fdiv+0xd0>
    d7d0:	e180000c 	orr	r0, r0, ip
    d7d4:	e3330000 	teq	r3, #0
    d7d8:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    d7dc:	01a01081 	lsleq	r1, r1, #1
    d7e0:	03110502 	tsteq	r1, #8388608	; 0x800000
    d7e4:	02433001 	subeq	r3, r3, #1
    d7e8:	0afffffb 	beq	d7dc <__aeabi_fdiv+0xec>
    d7ec:	e181100c 	orr	r1, r1, ip
    d7f0:	eaffffc4 	b	d708 <__aeabi_fdiv+0x18>
    d7f4:	e00c3ba1 	and	r3, ip, r1, lsr #23
    d7f8:	e132000c 	teq	r2, ip
    d7fc:	1a000005 	bne	d818 <__aeabi_fdiv+0x128>
    d800:	e1b02480 	lsls	r2, r0, #9
    d804:	1affffb6 	bne	d6e4 <__aeabi_fmul+0x18c>
    d808:	e133000c 	teq	r3, ip
    d80c:	1affffaf 	bne	d6d0 <__aeabi_fmul+0x178>
    d810:	e1a00001 	mov	r0, r1
    d814:	eaffffb2 	b	d6e4 <__aeabi_fmul+0x18c>
    d818:	e133000c 	teq	r3, ip
    d81c:	1a000003 	bne	d830 <__aeabi_fdiv+0x140>
    d820:	e1b03481 	lsls	r3, r1, #9
    d824:	0affff97 	beq	d688 <__aeabi_fmul+0x130>
    d828:	e1a00001 	mov	r0, r1
    d82c:	eaffffac 	b	d6e4 <__aeabi_fmul+0x18c>
    d830:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
    d834:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
    d838:	1affffde 	bne	d7b8 <__aeabi_fdiv+0xc8>
    d83c:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    d840:	1affffa2 	bne	d6d0 <__aeabi_fmul+0x178>
    d844:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    d848:	1affff8e 	bne	d688 <__aeabi_fmul+0x130>
    d84c:	eaffffa4 	b	d6e4 <__aeabi_fmul+0x18c>

0000d850 <__gesf2>:
    d850:	e3e0c000 	mvn	ip, #0
    d854:	ea000002 	b	d864 <__cmpsf2+0x4>

0000d858 <__lesf2>:
    d858:	e3a0c001 	mov	ip, #1
    d85c:	ea000000 	b	d864 <__cmpsf2+0x4>

0000d860 <__cmpsf2>:
    d860:	e3a0c001 	mov	ip, #1
    d864:	e50dc004 	str	ip, [sp, #-4]
    d868:	e1a02080 	lsl	r2, r0, #1
    d86c:	e1a03081 	lsl	r3, r1, #1
    d870:	e1f0cc42 	mvns	ip, r2, asr #24
    d874:	11f0cc43 	mvnsne	ip, r3, asr #24
    d878:	0a000006 	beq	d898 <__cmpsf2+0x38>
    d87c:	e192c0a3 	orrs	ip, r2, r3, lsr #1
    d880:	11300001 	teqne	r0, r1
    d884:	50520003 	subspl	r0, r2, r3
    d888:	81a00fc1 	asrhi	r0, r1, #31
    d88c:	31e00fc1 	mvncc	r0, r1, asr #31
    d890:	13800001 	orrne	r0, r0, #1
    d894:	e12fff1e 	bx	lr
    d898:	e1f0cc42 	mvns	ip, r2, asr #24
    d89c:	1a000001 	bne	d8a8 <__cmpsf2+0x48>
    d8a0:	e1b0c480 	lsls	ip, r0, #9
    d8a4:	1a000003 	bne	d8b8 <__cmpsf2+0x58>
    d8a8:	e1f0cc43 	mvns	ip, r3, asr #24
    d8ac:	1afffff2 	bne	d87c <__cmpsf2+0x1c>
    d8b0:	e1b0c481 	lsls	ip, r1, #9
    d8b4:	0afffff0 	beq	d87c <__cmpsf2+0x1c>
    d8b8:	e51d0004 	ldr	r0, [sp, #-4]
    d8bc:	e12fff1e 	bx	lr

0000d8c0 <__aeabi_cfrcmple>:
    d8c0:	e1a0c000 	mov	ip, r0
    d8c4:	e1a00001 	mov	r0, r1
    d8c8:	e1a0100c 	mov	r1, ip
    d8cc:	eaffffff 	b	d8d0 <__aeabi_cfcmpeq>

0000d8d0 <__aeabi_cfcmpeq>:
    d8d0:	e92d400f 	push	{r0, r1, r2, r3, lr}
    d8d4:	ebffffe1 	bl	d860 <__cmpsf2>
    d8d8:	e3500000 	cmp	r0, #0
    d8dc:	43700000 	cmnmi	r0, #0
    d8e0:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    d8e4:	e12fff1e 	bx	lr

0000d8e8 <__aeabi_fcmpeq>:
    d8e8:	e52de008 	str	lr, [sp, #-8]!
    d8ec:	ebfffff7 	bl	d8d0 <__aeabi_cfcmpeq>
    d8f0:	03a00001 	moveq	r0, #1
    d8f4:	13a00000 	movne	r0, #0
    d8f8:	e49de008 	ldr	lr, [sp], #8
    d8fc:	e12fff1e 	bx	lr

0000d900 <__aeabi_fcmplt>:
    d900:	e52de008 	str	lr, [sp, #-8]!
    d904:	ebfffff1 	bl	d8d0 <__aeabi_cfcmpeq>
    d908:	33a00001 	movcc	r0, #1
    d90c:	23a00000 	movcs	r0, #0
    d910:	e49de008 	ldr	lr, [sp], #8
    d914:	e12fff1e 	bx	lr

0000d918 <__aeabi_fcmple>:
    d918:	e52de008 	str	lr, [sp, #-8]!
    d91c:	ebffffeb 	bl	d8d0 <__aeabi_cfcmpeq>
    d920:	93a00001 	movls	r0, #1
    d924:	83a00000 	movhi	r0, #0
    d928:	e49de008 	ldr	lr, [sp], #8
    d92c:	e12fff1e 	bx	lr

0000d930 <__aeabi_fcmpge>:
    d930:	e52de008 	str	lr, [sp, #-8]!
    d934:	ebffffe1 	bl	d8c0 <__aeabi_cfrcmple>
    d938:	93a00001 	movls	r0, #1
    d93c:	83a00000 	movhi	r0, #0
    d940:	e49de008 	ldr	lr, [sp], #8
    d944:	e12fff1e 	bx	lr

0000d948 <__aeabi_fcmpgt>:
    d948:	e52de008 	str	lr, [sp, #-8]!
    d94c:	ebffffdb 	bl	d8c0 <__aeabi_cfrcmple>
    d950:	33a00001 	movcc	r0, #1
    d954:	23a00000 	movcs	r0, #0
    d958:	e49de008 	ldr	lr, [sp], #8
    d95c:	e12fff1e 	bx	lr

0000d960 <__aeabi_f2iz>:
    d960:	e1a02080 	lsl	r2, r0, #1
    d964:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    d968:	3a000008 	bcc	d990 <__aeabi_f2iz+0x30>
    d96c:	e3a0309e 	mov	r3, #158	; 0x9e
    d970:	e0532c22 	subs	r2, r3, r2, lsr #24
    d974:	9a000007 	bls	d998 <__aeabi_f2iz+0x38>
    d978:	e1a03400 	lsl	r3, r0, #8
    d97c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    d980:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    d984:	e1a00233 	lsr	r0, r3, r2
    d988:	12600000 	rsbne	r0, r0, #0
    d98c:	e12fff1e 	bx	lr
    d990:	e3a00000 	mov	r0, #0
    d994:	e12fff1e 	bx	lr
    d998:	e3720061 	cmn	r2, #97	; 0x61
    d99c:	1a000001 	bne	d9a8 <__aeabi_f2iz+0x48>
    d9a0:	e1b02480 	lsls	r2, r0, #9
    d9a4:	1a000002 	bne	d9b4 <__aeabi_f2iz+0x54>
    d9a8:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    d9ac:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    d9b0:	e12fff1e 	bx	lr
    d9b4:	e3a00000 	mov	r0, #0
    d9b8:	e12fff1e 	bx	lr

0000d9bc <__errno>:
    d9bc:	4b01      	ldr	r3, [pc, #4]	; (d9c4 <__errno+0x8>)
    d9be:	6818      	ldr	r0, [r3, #0]
    d9c0:	4770      	bx	lr
    d9c2:	46c0      	nop			; (mov r8, r8)
    d9c4:	40000568 	.word	0x40000568

0000d9c8 <__memcpy_from_arm>:
    d9c8:	e59fc000 	ldr	ip, [pc]	; d9d0 <__memcpy_from_arm+0x8>
    d9cc:	e12fff1c 	bx	ip
    d9d0:	00007565 	.word	0x00007565

0000d9d4 <____divsi3_from_arm>:
    d9d4:	e59fc000 	ldr	ip, [pc]	; d9dc <____divsi3_from_arm+0x8>
    d9d8:	e12fff1c 	bx	ip
    d9dc:	0000764d 	.word	0x0000764d

0000d9e0 <__cos_from_arm>:
    d9e0:	e59fc000 	ldr	ip, [pc]	; d9e8 <__cos_from_arm+0x8>
    d9e4:	e12fff1c 	bx	ip
    d9e8:	0000b211 	.word	0x0000b211

0000d9ec <____udivsi3_from_arm>:
    d9ec:	e59fc000 	ldr	ip, [pc]	; d9f4 <____udivsi3_from_arm+0x8>
    d9f0:	e12fff1c 	bx	ip
    d9f4:	000075c1 	.word	0x000075c1

0000d9f8 <__sqrt_from_arm>:
    d9f8:	e59fc000 	ldr	ip, [pc]	; da00 <__sqrt_from_arm+0x8>
    d9fc:	e12fff1c 	bx	ip
    da00:	0000b455 	.word	0x0000b455

0000da04 <__sin_from_arm>:
    da04:	e59fc000 	ldr	ip, [pc]	; da0c <__sin_from_arm+0x8>
    da08:	e12fff1c 	bx	ip
    da0c:	0000b2c9 	.word	0x0000b2c9

0000da10 <__atan2_from_arm>:
    da10:	e59fc000 	ldr	ip, [pc]	; da18 <__atan2_from_arm+0x8>
    da14:	e12fff1c 	bx	ip
    da18:	0000b385 	.word	0x0000b385
    da1c:	00000000 	.word	0x00000000

0000da20 <____floatsidf_from_thumb>:
    da20:	4778      	bx	pc
    da22:	46c0      	nop			; (mov r8, r8)
    da24:	eaffe803 	b	7a38 <__aeabi_i2d>

0000da28 <____ltdf2_from_thumb>:
    da28:	4778      	bx	pc
    da2a:	46c0      	nop			; (mov r8, r8)
    da2c:	eafffd91 	b	d078 <__ledf2>

0000da30 <____divdf3_from_thumb>:
    da30:	4778      	bx	pc
    da32:	46c0      	nop			; (mov r8, r8)
    da34:	eaffe8de 	b	7db4 <__aeabi_ddiv>

0000da38 <____eqdf2_from_thumb>:
    da38:	4778      	bx	pc
    da3a:	46c0      	nop			; (mov r8, r8)
    da3c:	eafffd8f 	b	d080 <__cmpdf2>

0000da40 <____gedf2_from_thumb>:
    da40:	4778      	bx	pc
    da42:	46c0      	nop			; (mov r8, r8)
    da44:	eafffd89 	b	d070 <__gedf2>

0000da48 <____muldf3_from_thumb>:
    da48:	4778      	bx	pc
    da4a:	46c0      	nop			; (mov r8, r8)
    da4c:	eaffe834 	b	7b24 <__aeabi_dmul>

0000da50 <____adddf3_from_thumb>:
    da50:	4778      	bx	pc
    da52:	46c0      	nop			; (mov r8, r8)
    da54:	eaffe729 	b	7700 <__adddf3>

0000da58 <____subdf3_from_thumb>:
    da58:	4778      	bx	pc
    da5a:	46c0      	nop			; (mov r8, r8)
    da5c:	eaffe726 	b	76fc <__aeabi_dsub>

0000da60 <____fixdfsi_from_thumb>:
    da60:	4778      	bx	pc
    da62:	46c0      	nop			; (mov r8, r8)
    da64:	eafffdd1 	b	d1b0 <__aeabi_d2iz>

0000da68 <____gtdf2_from_thumb>:
    da68:	4778      	bx	pc
    da6a:	46c0      	nop			; (mov r8, r8)
    da6c:	eafffd7f 	b	d070 <__gedf2>

0000da70 <C.0.2388>:
    da70:	00000001 000003e8 0000c350 20706553     ........P...Sep 
    da80:	32203031 00343130                       10 2014.

0000da88 <C.0.1302>:
    da88:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
    da98:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
    daa8:	7a654476 65444252 75657571 42203a65     vDezRBDequeue: B
    dab8:	65666675 6d452072 21797470 0000000a     uffer Empty!....
    dac8:	66754231 20726566 4c4c5546 00000a21     1Buffer FULL!...
    dad8:	55424544 00003a47 0000003a 0000000a     DEBUG:..:.......

0000dae8 <C.0.1974>:
    dae8:	04030201 08070605 0c0b0a09 6e617461     ............atan
    daf8:	00000032 74727173 00000000              2...sqrt....

0000db04 <npio2_hw>:
    db04:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
    db14:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
    db24:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
    db34:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
    db44:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
    db54:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
    db64:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
    db74:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

0000db84 <two_over_pi>:
    db84:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
    db94:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
    dba4:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
    dbb4:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
    dbc4:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
    dbd4:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
    dbe4:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
    dbf4:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
    dc04:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
    dc14:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
    dc24:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
    dc34:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
    dc44:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
    dc54:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
    dc64:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
    dc74:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
    dc84:	0060e27b 00c08c6b                       {.`.k...

0000dc8c <init_jk>:
    dc8c:	00000002 00000003 00000004 00000006     ................

0000dc9c <PIo2>:
    dc9c:	3ff921fb 40000000 3e74442d 00000000     .!.?...@-Dt>....
    dcac:	3cf84698 80000000 3b78cc51 60000000     .F.<....Q.x;...`
    dcbc:	39f01b83 80000000 387a2520 40000000     ...9.... %z8...@
    dccc:	36e38222 80000000 3569f31d 00000000     "..6......i5....

0000dcdc <atanhi>:
    dcdc:	3fddac67 0561bb4f 3fe921fb 54442d18     g..?O.a..!.?.-DT
    dcec:	3fef730b d281f69b 3ff921fb 54442d18     .s.?.....!.?.-DT

0000dcfc <atanlo>:
    dcfc:	3c7a2b7f 222f65e2 3c81a626 33145c07     .+z<.e/"&..<.\.3
    dd0c:	3c700788 7af0cbbd 3c91a626 33145c07     ..p<...z&..<.\.3

0000dd1c <__fdlib_version>:
    dd1c:	00000001                                ....

0000dd20 <_global_impure_ptr>:
    dd20:	4000056c 00000043                       l..@C...
